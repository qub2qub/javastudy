Шаблоны -- это наборы типовых проблем и их решений.
Работа с шаблоном идёт на уровне абстракций.
Их можно повторно использовать или дорабатывать.

Типа шаблонов:
1) Порождающие-Creational == отвечают за создание объектов
	1.1) Singleton - одиночка
	1.2) Factory Method - Фабричный метод (Виртуальный конструктор)
	1.3) Abstract Factory - Абстрактная фабрика

2) Структурные-Structural == отвечают за изменение и доработку существующих интерфейсов. (изменяют структуру уже созданного объекта)
		2.1) Decorator - Декоратор (WRAPPER - ОБЁРТКА)
		2.2) Adapter - Адаптер
		2.3) Facade - Фасад

3) Поведенческие-Behavioral == отвечают за взаимодейсвие между объектами, после их применения уменьшается кол-во связей между объектами.
	3.1) STATE - СОСТОЯНИЕ
	3.2) STRATEGY - СТРАТЕГИЯ
	3.3) OBSERVER - НАБЛЮДАТЕЛЬ

****************************************************
3.1) STATE - СОСТОЯНИЕ
__Объект меняет своё поведение в зависимости от своего состояния
__Можно передать разные состояния в один и тот же объект, и в зависимости от того состояния, в котором нах-ся объект, он будет делать данное действие разными способами.
__Позволяет избежать многочисленных условий if
__[Состояние присуще объекту, т.е. состояние хранится в объекте]
Объект содержит в себе (инкапсулирует) "объект состояния"  и предоставляет клиенту API=метод, в котором ис-ет состояние, т.е. в [своём public API методе] вызывает [абстракный метод из интерфейса-состояния] (для подсчёта цены, например), а по факту будет вызвана логика того состояния, которое было передано/хранится.

Т.е. есть общий-абстрактный интерфейс, который описывает какое-то абстрактное действие. Клиент использует этот действие. 
Но конкретный результат действия будут разным, в зависимости от переданного ему состояния.

Например,
1) у трансформера есть метод action(), если  состояние=машина - он едет, если состояние=робот - стреляет.
2) у товара есть метод рассчитатьСтоимость(), если товар в обычном состоянии -- цена стандартна, если товар на скидке - цена будет меньше.

Т.е. у клиента в распоряжении какое-то 1 действие. И он в различное время его вызывает.
Например, у генерала есть личинка бабочки.
Он ей 3 раза через неделю командует -- пой и УХОДИ !! и при этом кормит/воздействует на неё.
1) сначала личинкой они ничего не может делать.
2) через неделю гусеницей -- она ползёт, но петь не может.
3) через неделю бабочкой -- она летит, но петь не может.
4) если бы потом бабочка трансформировалась в кузнечика -- она бы могла прагать и петь=стрекотать.

Объекту нужно перейти в это состояние,
т.е. передать "объект состояния", который будет храниться в классе.
например,
Есть человек (интерфейс БОЕЦ), который учиться драться.
и есть различные состояния, в которых он может драться:
1) сначала он учился каратэ (как каратист)
2) потом борьбе (как борец)
3) потом на любки

Будет интерфейс ТРЕНЕР, который на экзамене проверяет 4 способности (разные=много, т.е. не 1 действие, а много различных действий из 1 текущего состояния):
1-удар рукой, 2-удар ногой, 3-блок, 4-присед
а разные состояния, по-разному будут делать эти действия.

Тренер учит бойца, переводя из состояния в состояние, и каждую неделю проверяет на экзамене, как он может делать свои 4 способности.

но проектировать драку можно общими понятиями -- 
1-ударить рукой, 2-блок, 3-удар ногой, 4-присед.
Каждый сделает эту постановку, но в своей технике.

some operations may not be possible when the context is in certain states

****************************************************
3.2) STRATEGY - СТРАТЕГИЯ
Есть заданное действие, но его можно выполнить разными способами.
Например, Collections.sort(), в зависимости от Comparetor будут разные способы выполнения.
__Значит, выбор одного алгоритма действия из семейства алгоритмов для достижения той же цели.
__Не зависит от конкретных реализаций, потому что он ис-ет интерфейсы.
__Смысл действия = один и тот же, а реализации действия - разные.

Для работы, нужно минимум 3-4 класса:
1) есть интерфейс для сервиса с требуемым действием-методом. (стратегическое направление действия).
Например, AuthStrategy::checkLogin(name, pwd).
2) Есть различные реализации этой стратегии (интерфейса), они реализуют этот метод (достигают результат данной стратегии). 
Это семейство алгоритмов для цели=стратегии (из п.1).
3) есть интерфейс для клиента, который ис-ет сервис из п.1., и в к-й надо передать конкретный алгоритм из семейства (из п.2).
Т.е. клиент вызывает стратегию=цель=метод интерфейса-сервиса, и задаёт конкретный способ достижения (по факту выполнится конкретная реализация).

ОТЛИЧИЯ ОТ ШАБЛОНА "СОСТОЯНИЕ" STATE:
1) Не хранит ссылку на объект стратегии
2) Одноразовое действие и только одно действие (и при кадом вызове надо передавать конкретную реализацию алгоритма стратегии)
[при STATE объект может МНОГО РАЗ делать РАЗНЫЕ ДЕЙСТВИЯ для данного состояния].

Например, есть стартегия = "вырыть ров";
Семейство, алгоритмы, реализации = 
1) экскаватором (быстро-глубоко),  
2) лопатой (долго-неглубоко),  
3) взорвать (быстро-неточно).
Генерал говорит, ЧТО надо "вырыть ров", и говорит ЧЕМ "лопатой". 
И, если надо, говорит КАК собрать лопату, или как завести экскаватор или где взять взрывчатку.

Или есть интерфейс БОЕЦ, у которого есть метод блок (п.1),
И должен быть тренер, который скажет бойцу, как именно делать блок. 
есть разные виды блоков (из семейства блоков) для этого интерфейса (п.2 - это различные реализации п.1):
1-нож, 2-палка, 3-кирпич, 4-по умолчанию, ничего, будет блок руками.

При проектировании драки, используем базовый метод блок (в который необходимо передать предмет).
Результат (что удар будет заблокирован) будет достигнут в любом случае.

Или когда для аутентификации ис-ть разные источники:
1-веб сервис, 2-файл, 3-БД.

Будет доп интерфейс с методом(который вернёт - был ли юзер осентикэйтед), куда надо передать стратегию проверки, а в неё передать логин и пароль.

The Strategy pattern is to be used where you want to choose the algorithm to use at runtime. A good use of the Strategy pattern would be saving files in different formats, running various sorting algorithms, or file compression.

encapsulate interface details in a base class, and bury implementation details in derived classes.

Clients of the algorithm couple themselves to the interface.

Example

A Strategy defines a set of algorithms that can be used interchangeably. Modes of transportation to an airport is an example of a Strategy. Several options exist such as driving one's own car, taking a taxi, an airport shuttle, a city bus, or a limousine service. For some airports, subways and helicopters are also available as a mode of transportation to the airport. Any of these modes of transportation will get a traveler to the airport, and they can be used interchangeably. The traveler must chose the Strategy based on trade-offs between cost, convenience, and time.

Rules of thumb

Strategy is like Template Method except in its granularity.
State is like Strategy except in its intent.
Strategy lets you change the guts of an object. Decorator lets you change the skin.
State, Strategy, Bridge (and to some degree Adapter) have similar solution structures. They all share elements of the 'handle/body' idiom. They differ in intent - that is, they solve different problems.
Strategy has 2 different implementations, the first is similar to State. The difference is in binding times (Strategy is a bind-once pattern, whereas State is more dynamic).
Strategy objects often make good Flyweights.

****************************************************
3.3) OBSERVER - НАБЛЮДАТЕЛЬ
Поведенческий.
Слушает некоторое поведение и реагирует на некоторые события.
  _3.1) представляет собой связь по принципу pusblisher/subscriber
(например, подписки в инете. swing onClickListener())
  _3.2) наблюдатель ждёт наступление определённого события и оповещает о нём всех слушателей.
  _3.3) Делает слабую зависимость low coupling.

паблишер не знает подписчиков, а только предоставляет интерфейс для оповещения. 

В интерфейсе pusblisher должны методы для добавления/удаления определённых Listener-ов, и метод для оповещения всех подписчиков.
У Listener-ов тоже должен быть свой интерфейс, в нём метод, который будет вызываться паблишером по событию (при нотификации подписчиков, у каждого дёрнет этот метод).
__Т.е. в паблишере отдельно генерируется какое-то событие, и в этом месте также дополнительно вызывается метод, который даст знать всем подписчикам, что событие произошло.

Например, как звонить в колокол каждый час.
паблишер/observer -- это колокол, который звонит, и при этом к бойку можно привязать верёвочки (лиснеров/subscriber) к другим объектам. 
При новом часе, происходит событие, колокол бьёт, верёвочки дёргаются и узнают что произошло событие.
Разные колокола = разные события.
1 объект можно привязать к нескольким разным колоколам, для обработки разных событий (если удовлетворены условия, что например к 1му колоколу можно привязаться только синей верёвочкой, а ко 2му - красной --- и у объекта есть все эти верёвочки.)
Или у объекта есть много одинаковых верёвочек, и к разным колоколам можно привязаться этим типом верёвочек.

Observer Design Pattern
Intent
1 Define a one-to-many dependency between objects so that when one object changes state, all its dependents are notified and updated automatically.
2 Encapsulate the core (or common or engine) components in a Subject abstraction, and the variable (or optional or user interface) components in an Observer hierarchy.
3 The "View" part of Model-View-Controller.

Discussion
  Define an object that is the "keeper" of the data model and/or business logic (the Subject). Delegate all "view" functionality to decoupled and distinct Observer objects. Observers register themselves with the Subject as they are created. Whenever the Subject changes, it broadcasts to all registered Observers that it has changed, and each Observer queries the Subject for that subset of the Subject's state that it is responsible for monitoring.
This allows the number and "type" of "view" objects to be configured dynamically, instead of being statically specified at compile-time.

The protocol described above specifies a "pull" interaction model. Instead of the Subject "pushing" what has changed to all Observers, each Observer is responsible for "pulling" its particular "window of interest" from the Subject. The "push" model compromises reuse, while the "pull" model is less efficient.


****************************************************
1.1) Singleton - одиночка
   _1) Для создания объекта в единственном экземпляре.
   _2) Как правило с глобальным доступом к нему.
   _3) Можно управлять кол-вом экземпляров объекта. (например, нужно 2 объекта)
   _4) Есть единая точка доступа к синглтону.

****************************************************
1.2) Factory Method - Фабричный метод (Виртуальный конструктор)
Используется когда:
	_1) Известен интерфейс, но заранее неизвестно, какая из реализаций будет ис-ся.
	_2) Получение ссылки на объект в зависимости от входных условий.
Например, есть интерфейс авто, с методами ехать() и остановиться().
И разные реализации для разных машин: спорт, джип, трактор.

Ис-ся чтобы сделать создание объектов более гибким. 
Т.е. есть "Цех(специализированный на автомобилях) по созданию всех видов авто", и "у него есть метод", который их непосредственно и создаёт, В ЗАВИСИМОСТИ ОТ ВХОДНЫХ ПАРАМЕТРОВ.
Сам цех -- "типа синглтон". Т.е. 1 экземпляр на всю прилагу.

Т.е. если для данного параметра нужно будет возвращать другой тип объектов - то нужно будет ТОЛЬКО В ФАБРИЧНОМ МЕТОДЕ поменять возвращаемый объект.

Например, сервис для сохранения данных в разные места: ДБ, файл, сайт.
И если на вход пришёл параметр: 
URL - то возвращаем сайт,
ДБ_ссылка - возвращаем БД, 
путь на диске -- возвращаем файл.

Видимо надо передевать 2 параметра: тип и спецфчский аргумент к нему.

An increasingly popular definition of factory method is: a static method of a class that returns an object of that class' type. But unlike a constructor, the actual object it returns might be an instance of a subclass. Unlike a constructor, an existing object might be reused, instead of a new object created. Unlike a constructor, factory methods can have different and more descriptive names (e.g. Color.make_RGB_color(float red, float green, float blue) and Color.make_HSB_color(float hue, float saturation, float brightness)

****************************************************
1.3) Abstract Factory - Абстрактная фабрика
Он более объёмный и чаще используемый, чем Фабричный метод.
	_1) Фабрика по созданию семейства объектов разных типов (в отличие от "Фабричный метод", где возвращается экземпляр всегда одного и того же типа.)
	_2) Т.е. это более расширенный вариант шаблона "Фабричный метод".
	_3) Объекты внутри фабрики связаны по смыслу или задаче (но не связаны по типу).
__Т.е. есть набор разных объектов для конкретной цели/задачи,
но все объекты целиком могут быть разных реализаций/видов (в зависимости от каких-то условий).
И для каждого условия будет своя отдельная фабрика, которая будет производить весь набор всех этих объектов под эти конкретные условия.
__Какая фабрика будет выбрана -- зависит от конфига при старте прилаги.
Т.е. какие ИМЕННО объекты будут созданы -- зависит от фабрики. (семейство объектов разных типов, но для 1 вида)

Например, есть фабрика по создание любых транспортных средств, в т.ч. самолёты, пароходы, машины, и др.
Но разделение будет например, по назначению ТС или использованию,
например, 
	военные ТС, 
	гражданские -- городские или сельские,
	спец назначения -- пожарные, скорой помощи, милиции, президентские.
------ или про другому типу:
	по принадлежности завода -- российские, китайские, американские..
	а в них уже можно делить по назначению ТС.
	т.е. будут как бы 2 вложенные фабрики.

Или кнопки для интерфейса, и для разных ОС будут разные наборы всех UI элементов.
И логика будет строиться на основе абстракций, конкретные реализации будут подставлени после старта прилаги.

Provide an interface for creating families of related or dependent objects without specifying their concrete classes.

The Abstract Factory defines a Factory Method per product. Each Factory Method encapsulates the new operator and the concrete, platform-specific, product classes. Each "platform" is then modeled with a Factory derived class.

This pattern is found in the sheet metal stamping equipment used in the manufacture of Japanese automobiles. The stamping equipment is an Abstract Factory which creates auto body parts. The same machinery is used to stamp right hand doors, left hand doors, right front fenders, left front fenders, hoods, etc. for different models of cars. Through the use of rollers to change the stamping dies, the concrete classes produced by the machinery can be changed within three minutes.

****************************************************
2.1) Decorator - Декоратор (WRAPPER - ОБЁРТКА)
Делает возможным:
   _1) Расширение функционала объекта без создания дочерних классов (альтернатива наследованию)
   _2) Гибкий способ добавить ЛЮБОЕ КОЛ-ВО нового функционала к ЛЮБОМУ существующему объекту.
   _3) Можно ВЛК/ВЫКЛ это новое поведения у любого объекта в любое время
   _4) Когда невозможно наследоваться, но надо добавить новое поведение (к-е может быть не связано по смыслу)
   _5) Декораторы можно вкладывать друг в друга.
   _5) Одни и те же Декораторы(любую комбинацию декораторов) можно применять ко всем/любым объектам данного типа.
Для наследования желательно поддерживать связь "является" (is a).

Например, есть интерфейс Компонент, у к-го 1 метод "нарисоваться()".
И надо к каждому компоненту добавить рамку и возможность изменения цвета.
Например, Сначала создаём абстрактный класс декоратор, который реализует исходный интерфейс Компонент. 
абстрактный метод -- это наш доп функционал, его будут реализовывать наши декораторы.

В декораторе надо сделать:
 1) реализовать исходный интерфейс объекта.
 2) через композицию вставляем исходный компонент(при создании декоратора через его конструктор передаём оборачиваемый объект), 
 3) переопределяем методы интерфейса, и в них добавляем:
 		3.1) вызов методов исходного инкапсулированного объекта
 		3.2) вызов своего функционала (над инкапсулированным объектом)
 4) реализуем логику своего доп. функционала

ЦЕЛИ:
1) Attach additional responsibilities to an object dynamically. Decorators provide a flexible alternative to subclassing for extending functionality.
2) Client-specified embellishment of a core object by recursively wrapping it.
3) Wrapping a gift, putting it in a box, and wrapping the box.

--- You want to add behavior or state to individual objects at run-time. Inheritance is not feasible because it is static and applies to an entire class.

The solution to this class of problems involves encapsulating the original object inside an abstract wrapper interface. Both the decorator objects and the core object inherit from this abstract interface. The interface uses recursive composition to allow an unlimited number of decorator "layers" to be added to each core object.

****************************************************
Rules of thumb

(1) Adapter provides a different interface to its subject. Proxy provides the same interface. Decorator provides an enhanced interface.
(2) Adapter changes an object's interface, Decorator enhances an object's responsibilities. Decorator is thus more transparent to the client. As a consequence, Decorator supports recursive composition, which isn't possible with pure Adapters.
(3) Composite and Decorator have similar structure diagrams, reflecting the fact that both rely on recursive composition to organize an open-ended number of objects.
(4) A Decorator can be viewed as a degenerate Composite with only one component. However, a Decorator adds additional responsibilities - it isn't intended for object aggregation.
(5) Decorator is designed to let you add responsibilities to objects without subclassing. Composite's focus is not on embellishment but on representation. These intents are distinct but complementary. Consequently, Composite and Decorator are often used in concert.
(6) Composite could use Chain of Responsibility to let components access global properties through their parent. It could also use Decorator to override these properties on parts of the composition.
(7) Decorator and Proxy have different purposes but similar structures. Both describe how to provide a level of indirection to another object, and the implementations keep a reference to the object to which they forward requests.
(8) Decorator lets you change the skin of an object. Strategy lets you change the guts.
****************************************************
2.2) Adapter - Адаптер
Помогает двум разным интерфейсам работать вместе.
Реализуется композицией или наследованием.
!!! Т.е. АДАПТЕР СОВМЕЩАЕТ ЖЕЛАНИЯ КЛИЕНТА И ВОЗМОЖНОСТИ БИБЛИОТЕКИ.

Например, в библиотеке есть класс, который печатает только 1 строку.
А надо напечатать все строки из списка.

1) Создаём новый интерфейс, в нём определяем метод для клиента.
2) Реализуем интерфейс: 
		2.1) композицией вставляем класс из библ,
		2.2) реализуем клиентский метод ис-я этот инкапсулированный класс.

ЦЕЛИ:
(1)Convert the interface of a class into another interface clients expect. Adapter lets classes work together that couldn't otherwise because of incompatible interfaces.
(2)Wrap an existing class with a new interface.
(3)Impedance match an old component to a new system

Adapter is about creating an intermediary abstraction that translates, or maps, the old component to the new system. Clients call methods on the Adapter object which redirects them into calls to the legacy component. This strategy can be implemented either with inheritance or with aggregation.

Rules of thumb

(1) Adapter makes things work after they're designed; Bridge makes them work before they are.
(2) Bridge is designed up-front to let the abstraction and the implementation vary independently. Adapter is retrofitted to make unrelated classes work together.
(3) Adapter provides a different interface to its subject. Proxy provides the same interface. Decorator provides an enhanced interface.
(4) Adapter is meant to change the interface of an existing object. Decorator enhances another object without changing its interface. Decorator is thus more transparent to the application than an adapter is. As a consequence, Decorator supports recursive composition, which isn't possible with pure Adapters.
(5) Facade defines a new interface, whereas Adapter reuses an old interface. Remember that Adapter makes two existing interfaces work together as opposed to defining an entirely new one.

****************************************************
2.3) Facade - Фасад
Ис-ся когда нужно:
 _1) Скрыть сложную внутреннюю реализацию и предоставить простой интерфейс
 _2) Т.е. для упрощения взаимодействия с объектами системы (или нескольких систем)
 _3) Иногда, Можно обращаться и к самим внутренним объектам без фасада.

Например, для составных действий, чтобы юзер не создавал/вызывал каждое действие самостоятельно, а вызвал 1 метод из фасада, который всё это сделает.

1) Provide a unified interface to a set of interfaces in a subsystem. Facade defines a higher-level interface that makes the subsystem easier to use.
2) Wrap a complicated subsystem with a simpler interface.

This reduces the learning curve necessary to successfully leverage the subsystem. It also promotes decoupling the subsystem from its potentially many clients. On the other hand, if the Facade is the only access point for the subsystem, it will limit the features and flexibility that "power users" may need.

The Facade object should be a fairly simple advocate or facilitator. It should not become an all-knowing oracle or "god" object.

Rules of thumb

(1) Facade defines a new interface, whereas Adapter uses an old interface. Remember that Adapter makes two existing interfaces work together as opposed to defining an entirely new one.
(2) Whereas Flyweight shows how to make lots of little objects, Facade shows how to make a single object represent an entire subsystem.
(3) Mediator is similar to Facade in that it abstracts functionality of existing classes. Mediator abstracts/centralizes arbitrary communications between colleague objects. It routinely "adds value", and it is known/referenced by the colleague objects. In contrast, Facade defines a simpler interface to a subsystem, it doesn't add new functionality, and it is not known by the subsystem classes.
(4) Abstract Factory can be used as an alternative to Facade to hide platform-specific classes.
(5) Facade objects are often Singletons because only one Facade object is required.
(6) Adapter and Facade are both wrappers; but they are different kinds of wrappers. The intent of Facade is to produce a simpler interface, and the intent of Adapter is to design to an existing interface. While Facade routinely wraps multiple objects and Adapter wraps a single object; Facade could front-end a single complex object and Adapter could wrap several legacy objects.

Question: So the way to tell the difference between the Adapter pattern and the Facade pattern is that the Adapter wraps one class and the Facade may represent many classes?

Answer: No! Remember, the Adapter pattern changes the interface of one or more classes into one interface that a client is expecting. While most textbook examples show the adapter adapting one class, you may need to adapt many classes to provide the interface a client is coded to. Likewise, a Facade may provide a simplified interface to a single class with a very complex interface. The difference between the two is not in terms of how many classes they "wrap", it is in their intent.