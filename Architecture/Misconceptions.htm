<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<title>Misconceptions of Clean Architecture</title>
    <link rel="stylesheet" href="grey.css">
	<style type="text/css">
	pre, div.note {
		font-family: "Trebuchet MS",Tahoma,Arial;
		font-size: 18px;
		font-weight: bold;
		border: 1px solid #000;
		background-color: #999;
		padding: 5px;
	}
	body {
		font-family: Arial,Tahoma,"Trebuchet MS";
		font-size: 20px;
		background-color: #c0c0c0;
	}
	table {
		table-layout: fixed;
		border-collapse: collapse;
		border-spacing: 0;
	}
	td, th {
		border: 1px solid black;
		word-wrap: break-word;
	}
	div.comment-container {
    		border: 1px solid #920000;
    }
	</style>
</head>
<body>
	<a href="https://habrahabr.ru/company/mobileup/blog/335382/">src</a>
<p>На первый взгляд, <em>Clean Architecture</em> – довольно простой набор рекомендаций к построению приложений. Но и я, и многие мои коллеги, сильные разработчики, осознали эту архитектуру не сразу. А в последнее время в чатах и интернете я вижу всё больше ошибочных представлений, связанных с ней. <strong>Этой статьёй я хочу помочь сообществу лучше понять Clean Architecture и избавиться от распространенных заблуждений</strong>. <a name="habracut"></a></p>
<p>Сразу хочу оговориться, заблуждения – это дело личное. Каждый в праве заблуждаться. И если это его устраивает, то я не хочу мешать. Но всегда хорошо услышать мнения других людей, а зачастую люди не знают даже мнений тех, кто стоял у истоков.</p>
<h1 id="istoki">Истоки</h1>
<p>В 2011 году <a href="https://ru.wikipedia.org/wiki/%D0%9C%D0%B0%D1%80%D1%82%D0%B8%D0%BD,_%D0%A0%D0%BE%D0%B1%D0%B5%D1%80%D1%82">Robert C. Martin</a>, также известный как Uncle Bob, опубликовал статью <a href="https://8thlight.com/blog/uncle-bob/2011/09/30/Screaming-Architecture.html">Screaming Architecture</a>, в которой говорится, что архитектура должна «кричать» о самом приложении, а не о том, какие фреймворки в нем используются. Позже вышла <a href="https://8thlight.com/blog/uncle-bob/2011/11/22/Clean-Architecture.html">статья</a>, в которой Uncle Bob даёт отпор высказывающимся против идей чистой архитектуры. А в 2012 году он опубликовал статью «<strong><a href="https://8thlight.com/blog/uncle-bob/2012/08/13/the-clean-architecture.html">The Clean Architecture</a></strong>», <em>которая и является основным описанием этого подхода</em>. Кроме этих статей я также очень рекомендую посмотреть <a href="https://www.youtube.com/watch?v=Nsjsiz2A9mg">видео</a> выступления Дяди Боба. </p>
<p>Вот <strong>оригинальная схема</strong> из статьи, которая первой всплывает в голове разработчика, когда речь заходит о Clean Architecture:</p>
<img alt="Оригинальная схема" src="./Misconceptions_files/CleanArchitecture.jpg" width="700">
<p>
В Android-сообществе Clean стала быстро набирать популярность после статьи <strong><a href="https://fernandocejas.com/2014/09/03/architecting-android-the-clean-way/">Architecting Android...The clean way?</a></strong>, написанной Fernando Cejas. Я впервые узнал про Clean Architecture именно из неё. И только потом пошёл искать оригинал. В этой статье Fernando приводит <em>такую схему слоёв</em>:</p>
<img alt="Схема от Fernando Cejas" src="./Misconceptions_files/9ac65cf9ba3849db8532914040bd89b8.png" width="700">
<p>
То, что на этой схеме другие слои, а в domain слое лежат ещё какие-то Interactors и Boundaries, сбивает с толку. Оригинальная картинка тоже не всем понятна. В статьях многое неоднозначно или слегка абстрактно. А видео не все смотрят (обычно из-за недостаточного знания английского). И вот, <em>из-за недопонимания, люди начинают что-то выдумывать, усложнять, заблуждаться…</em> </p>
<p>Давайте разбираться! </p>
<h1 id="slean-architecture">Сlean Architecture</h1>
<p>Clean Architecture объединила в себе идеи нескольких других архитектурных подходов, которые сходятся в том, что <strong>архитектура должна</strong>: </p>
<ul>
<li>быть тестируемой;</li>
<li>не зависеть от UI;</li>
<li>не зависеть от БД, внешних фреймворков и библиотек. </li>
</ul>
<p>Это достигается разделением на слои и следованием Dependency Rule (правилу зависимостей). </p>
<h3 id="dependency-rule">Dependency Rule</h3>
<p><strong>Dependency Rule говорит нам, что внутренние слои не должны зависеть от внешних</strong>. То есть наша бизнес-логика и логика приложения не должны зависеть от презентеров, UI, баз данных и т.п. На оригинальной схеме это правило изображено стрелками, указывающими внутрь. </p>
<p>В статье сказано: <em>имена сущностей (классов, функций, переменных, чего угодно), объявленных во внешних слоях, не должны встречаться в коде внутренних слоев</em>. </p>
<p>Это правило позволяет строить системы, которые будет проще поддерживать, потому что изменения во внешних слоях не затронут внутренние слои. </p>
<h3 id="sloi">Слои</h3>
<p>Uncle Bob выделяет 4 слоя: </p>
<ul>
<li><strong>Entities</strong>. Бизнес-логика общая для многих приложений.</li>
<li><strong>Use Cases (Interactors)</strong>. Логика приложения.</li>
<li><strong>Interface Adapters</strong>. Адаптеры между Use Cases и внешним миром. Сюда попадают Presenter’ы из MVP, а также Gateways (более популярное название репозитории).</li>
<li><strong>Frameworks</strong>. Самый внешний слой, тут лежит все остальное: UI, база данных, http-клиент, и т.п. </li>
</ul>
<p>Подробнее, что из себя представляют эти слои, мы рассмотрим по ходу статьи. А пока остановимся на передаче данных между ними. </p>
<h3 id="perehody">Переходы</h3>
<p><strong>Переходы между слоями осуществляются через Boundaries</strong>, то есть через два интерфейса: один для запроса и один для ответа. Их можно увидеть справа на оригинальной схеме (Input/OutputPort). Они нужны, чтобы внутренний слой не зависел от внешнего (следуя Dependency Rule), но при этом мог передать ему данные. </p>
<img alt="Поток данных на оригинальной схеме" src="./Misconceptions_files/afbef2e40b7b4f87939dcde0b1ab6bae.jpg" height="250">
<p>
Оба интерфейса относятся к внутреннему слою (обратите внимание на их цвет на картинке). </p>
<p>Смотрите, Controller вызывает метод у InputPort, его реализует UseCase, а затем UseCase отдает ответ интерфейсу OutputPort, который реализует Presenter. То есть данные пересекли границу между слоями, но при этом все зависимости указывают внутрь на слой UseCase’ов. </p>
<p><em>Чтобы зависимость была направлена в сторону обратную потоку данных, применяется <a href="https://ru.wikipedia.org/wiki/%D0%9F%D1%80%D0%B8%D0%BD%D1%86%D0%B8%D0%BF_%D0%B8%D0%BD%D0%B2%D0%B5%D1%80%D1%81%D0%B8%D0%B8_%D0%B7%D0%B0%D0%B2%D0%B8%D1%81%D0%B8%D0%BC%D0%BE%D1%81%D1%82%D0%B5%D0%B9">принцип инверсии зависимостей</a></em> (буква D из аббревиатуры <a href="https://ru.wikipedia.org/wiki/SOLID_(%D0%BE%D0%B1%D1%8A%D0%B5%D0%BA%D1%82%D0%BD%D0%BE-%D0%BE%D1%80%D0%B8%D0%B5%D0%BD%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%BD%D0%BE%D0%B5_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5)">SOLID</a>). То есть, вместо того чтобы UseCase напрямую зависел от Presenter’a (что нарушало бы Dependency Rule), он зависит от интерфейса в своём слое, а Presenter должен этот интерфейс реализовать. </p>
<p>Точно та же схема работает и в других местах, например, при обращении UseCase к Gateway/Repository. Чтобы не зависеть от репозитория, выделяется интерфейс и кладется в слой UseCases. </p>
<p>Что же касается данных, которые пересекают границы, то это должны быть <strong>простые структуры</strong>. Они могут передаваться как <a href="https://ru.wikipedia.org/wiki/DTO">DTO</a> или быть завернуты в HashMap, или просто быть аргументами при вызове метода. Но они обязательно должны быть <em>в форме более удобной для внутреннего слоя</em> (лежать во внутреннем слое). </p>
<h2 id="osobennosti-mobilnyh-prilozheniy">Особенности мобильных приложений</h2>
<p>Надо отметить, что <strong>Clean Architecture была придумана с немного иным типом приложений на уме</strong>. Большие серверные приложения для крупного бизнеса, а не мобильные клиент-серверные приложения средней сложности, которые не нуждаются в дальнейшем развитии (конечно, бывают разные приложения, но согласитесь, в большей массе они именно такие). Непонимание этого может привести к <a href="https://en.wikipedia.org/wiki/Overengineering">overengineering</a>’у. </p>
<p>На оригинальной схеме есть слово Controllers. Оно появилось на схеме из-за frontend’a, в частности из Ruby On Rails. Там зачастую разделяют Controller, который обрабатывает запрос и отдает результат, и Presenter, который выводит этот результат на View. Многие не сразу догадываются, но <em>в android-приложениях Controllers не нужны</em>. </p>
<p>Ещё в статье Uncle Bob говорит, что <em>слоёв не обязательно должно быть 4</em>. Может быть любое количество, но Dependency Rule должен всегда применяться. </p>
<p>Глядя на схему из статьи Fernando Cejas, можно подумать, что автор воспользовался как раз этой возможностью и уменьшил количество слоев до трёх. Но это не так. Если разобраться, то в Domain Layer у него находятся как Interactors (это другое название UseCase’ов), так и Entities. </p>
<p>Все мы благодарны Fernando за его статьи, которые дали хороший толчок развитию Clean в Android-сообществе, но его схема также породила и заблуждение. </p>
<h1 id="zabluzhdenie-sloi-i-lineynost">Заблуждение: Слои и линейность</h1>
<p>Сравнивая оригинальную схему от Uncle Bob’a и cхему Fernando Cejas’a многие начинают путаться. Линейная схема воспринимается проще, и люди начинают неверно понимать оригинальную. А не понимая оригинальную, начинают неверно толковать и линейную. Кто-то думает, что расположение надписей в кругах имеет сакральное значение, или что надо использовать Controller, или пытаются соотнести названия слоёв на двух схемах. <strong>Смешно и грустно, но основные схемы стали основными источниками заблуждения!</strong> </p>
<p>Постараемся это исправить. Для начала давайте <em>очистим основную схему</em>, убрав из нее лишнее для нас. И переименуем Gateways в Repositories, т.к. это более распространенное название этой сущности. </p>
<img alt="Упрощенная оригинальная схема" src="./Misconceptions_files/42cf44b37d614d2785444057af7273e8.png" height="350">
<p>
Стало немного понятнее. Теперь мы сделаем вот что: <em>разрежем слои на части</em> и превратим эту схему в блочную, где цвет будет по-прежнему обозначать принадлежность к слою. </p>
<img alt="Превращаем круги в блоки" src="./Misconceptions_files/fe8c82a32b1548b1a297187e24ae755a_2.png" style="width: 1000px;">
<p> 
Как я уже сказал выше, цвета обозначают слои. А стрелка внизу обозначает Dependency Rule. </p>
<p>На получившейся схеме уже проще представить себе течение данных от UI к БД или серверу и обратно. Но давайте сделаем еще один шаг к линейности, расположив слои <em>по категориям</em>: </p>
<img alt="Слои по категориям" src="./Misconceptions_files/9869dbe34b5649e28be40bff6bee3147.png" width="600">
<p>Я намеренно не называю это разделение слоями, в отличие от Fernando Cejas. Потому что мы и так делим слои. Я называю это категориями или частями. Можно назвать как угодно, но повторно использовать слово «слои» не стоит. </p>
<p>А теперь давайте сравним то, что получилось, со схемой Fernando. </p>
<img alt="Сравнение со схемой Fernando Cejas" src="./Misconceptions_files/cbe3fdad2be24de3bd4dda6c66d56d76.png"style="width: 1000px;">
<p>Надеюсь теперь вcё начало вставать на свои места. Выше я говорил, что, по моему мнению, у Fernando всё же 4 слоя. Думаю теперь это тоже стало понятнее. В Domain части у нас находятся и UseCases и Entities. </p>
<p>Такая схема воспринимается проще. Ведь обычно события и данные в наших приложениях ходят от UI к backend’у или базе данных и обратно. Давайте изобразим этот процесс: </p>
<img alt="Поток данных от UI и обратно" src="./Misconceptions_files/53104c89d9cf44a59c95e351b7485574.png">
<p>Красными стрелками показано <em>течение данных</em>. </p>
<p>Событие пользователя идет в Presenter, тот передает в Use Case. Use Case делает запрос в Repository. Repository получает данные где-то, создает Entity, передает его в UseCase. Так Use Case получает все нужные ему Entity. Затем, применив их и свою логику, получает результат, который передает обратно в Presenter. А тот, в свою очередь, отображает результат в UI. </p>
<p>На переходах между слоями (не категориями, а слоями, отмеченными разным цветом) используются Boundaries, описанные ранее. </p>
<p>Теперь, когда мы <strong>поняли, как соотносятся две схемы</strong>, давайте рассмотрим следующее заблуждение. </p>
<h1 id="zabluzhdenie-sloi-a-ne-suschnosti">Заблуждение: Слои, а не сущности</h1>
<p>Как понятно из заголовка, кто-то думает, что на схемах изображены сущности (особенно это затрагивает UseCases и Entities). Но это не так. </p>
<p><strong>На схемах изображены слои, в них может находиться много сущностей</strong>. В них будут находиться интерфейсы для переходов между слоями (Boundaries), различные DTO, основные классы слоя (Interactors для слоя UseCases, например). </p>
<p>Не будет лишним взглянуть на схему, собранную из частей, показанных в видео выступления Uncle Bob’a. На ней изображены <em>классы и зависимости</em>: </p>
<img alt="Схема классов из выступления Uncle Bob" src="./Misconceptions_files/bb3430769e6c4e8fbca757a8bc071f2e.jpg" width="900">
<p>
Видите двойные линии? Это границы между слоями. Разделение между слоями Entities и UseCases не показаны, так как в видео основной упор делался на том, что вся логика (приложения и бизнеса) отгорожена от внешнего мира. </p>
<p>C Boundaries мы уже знакомы, интерфейс Gateway – это то же самое. Request/ResponseModel – просто DTO для передачи данных между слоями. По правилу зависимости они должны лежать во внутреннем слое, что мы и видим на картинке. </p>
<p>Про Controller мы тоже уже говорили, он нас не интересует. Его функцию у нас выполняет Presenter. </p>
<p>А ViewModel на картинке – это не ViewModel из <a href="https://ru.wikipedia.org/wiki/Model-View-ViewModel">MVVM</a> и не ViewModel из <a href="https://developer.android.com/topic/libraries/architecture/viewmodel.html">Architecture Components</a>. Это просто DTO для передачи данных View, чтобы View была тупой и просто сетила свои поля. Но это уже детали реализации и будет зависеть от выбора презентационного паттерна и личных подходов. </p>
<p>В слое UseCases находятся не только Interactor’ы, но также и Boundaries для работы с презентером, интерфейс для работы с репозиторием, DTO для запроса и ответа. <em>Отсюда можно сделать вывод, что на оригинальной схеме отражены всё же слои</em>.</p>
<h1 id="zabluzhdenie-entities">Заблуждение: Entities</h1>
<p><em>Entities по праву занимают первое место по непониманию</em>. </p>
<p>Мало того, что почти никто (включая меня до недавнего времени) не осознает, что же это такое на самом деле, так их ещё и путают с DTO. </p>
<blockquote>Однажды в чате у меня возник спор, в котором мой оппонент доказывал мне, что Entity – это объекты, полученные после парсинга JSON в data-слое, а DTO – объекты, которыми оперируют Interactor’ы… </blockquote><p>Постараемся хорошо разобраться, чтобы таких заблуждений больше не было ни у кого. </p>
<p>Что же такое Entities? </p>
<p>Чаще всего они воспринимаются как POJO-классы, с которыми работают Interactor’ы. Но это не так. По крайней мере не совсем. </p>
<p>В статье Uncle Bob говорит, что <strong>Entities инкапсулируют логику бизнеса</strong>, <em>то есть всё то, что не зависит от конкретного приложения, а будет общим для многих</em>. Но если у вас отдельное приложение и оно не заточено под какой-то существующий бизнес, то Entities будут являться <em>бизнес-объектами приложения, содержащими самые общие и высокоуровневые правила</em>. </p>
<p>Я думаю, что именно фраза: «Entities это бизнес объекты», – запутывает больше всего. Кроме того, на приведенной выше схеме из видео Interactor получает Entity из Gateway. Это также подкрепляет ощущение, что это просто POJO объекты. </p>
<p>Но в статье также говорится, что <em>Entity может быть объектом с методами или набором структур и функций</em>. То есть упор делается на то, что важны методы, а не данные. </p>
<p>Это также подтверждается в <a href="https://groups.google.com/forum/#!topic/clean-code-discussion/mvP_NR2MUPc">разъяснении</a> от Uncle Bob’а, которое я нашел недавно:
Uncle Bob говорит, что для него Entities содержат бизнес-правила, независимые от приложения. И они <em>не просто объекты с данными. Entities могут содержать ссылки на объекты с данными, но основное их назначение в том, чтобы реализовать методы бизнес-логики, которые могут использоваться в различных приложениях</em>. </p>
<p>А по-поводу того, что Gateways возвращают Entities на картинке, он поясняет следующее:
Реализация Gаteway получает данные из БД, и использует их, чтобы создать структуры данных, которые будут переданы в Entities, которые Gateway вернет. Реализовано это может быть композицией </p>
<pre><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyEntity</span> </span>{ <span class="hljs-keyword">private</span> MyDataStructure data;}</code></pre>
<p>или наследованием </p>
<pre><code class="java hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyEntity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">MyDataStructure</span> </span>{...} </code></pre>
<p>И в конце ответа фраза, которая меня очень порадовала: </p>
<blockquote>And remember, we are all pirates by nature; and the rules I'm talking about here are really more like guidelines…
(И запомните: мы все пираты по натуре, и правила, о которых я говорю тут, на самом деле, скорее рекомендации…) </blockquote><p>Действительно, не надо слишком буквально всё воспринимать, надо искать компромиссы и не делать лишнего. Все-таки любая архитектура призвана помогать, а не мешать. </p>
<p>Итак, <strong>слой Entities содержит</strong>: </p>
<ul>
<li>Entities – функции или объекты с методами, которые реализуют логику бизнеса, общую для многих приложений (а если бизнеса нет, то самую высокоуровневую логику приложения); </li>
<li>DTO, необходимые для работы и перехода между слоями.</li>
</ul>
<p>Кроме того, когда приложение отдельное, то надо стараться находить и выделять в Entities высокоуровневую логику из слоя UseCases, где зачастую она оседает по ошибке. </p>
<h1 id="zabluzhdenie-usecase-iili-interactor">Заблуждение: UseCase и/или Interactor</h1>
<p>Многие путаются в понятиях <em>UseCase и Interactor</em>. Я слышал фразы типа: «Канонического определения Interactor нет». Или вопросы типа: «Мне делать это в Interactor’e или вынести в UseCase?».</p>
<p>Косвенное определение Interactor’a встречается в <a href="https://8thlight.com/blog/uncle-bob/2011/11/22/Clean-Architecture.html">статье</a>, которую я уже упоминал в самом начале. Оно звучит так: </p>
<p>«...interactor object that implements the use case by invoking business objects.» </p>
<p>Таким образом: </p>
<p><strong>Interactor – объект, который реализует use case (<a href="https://ru.wikipedia.org/wiki/%D0%A1%D1%86%D0%B5%D0%BD%D0%B0%D1%80%D0%B8%D0%B9_%D0%B8%D1%81%D0%BF%D0%BE%D0%BB%D1%8C%D0%B7%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F">сценарий использования</a>), используя бизнес-объекты (Entities)</strong>. </p>
<div class="note"> Методика сценариев использования применяется для выявления требований к поведению системы, известных также как пользовательские и функциональные требования.  Другими словами, сценарий использования описывает, «кто» и «что» может сделать с рассматриваемой системой, или что система может сделать с «кем» или «чем». </div>
<p>Что же такое Use Case или сценарий использования?
Uncle Bob в видео выступлении говорит о книге «Object-Oriented Software Engineering: A Use Case Driven Approach», которую написал <a href="https://en.wikipedia.org/wiki/Ivar_Jacobson">Ivar Jacobson</a> в 1992 году, и о том, как тот описывает Use Case. </p>
<p><em>Use case – это детализация, описание действия, которое может совершить пользователь системы</em>. </p>
<p>Вот пример, который приводится в видео: </p>
<img alt="Пример Use Case для создания заказа" src="./Misconceptions_files/87e46ddcbd124e14afb7e2a86bc4b0f2.png" width="650">
<p>Это Use Case для создания заказа, причём выполняемый <em>клерком</em>. </p>
<p>Сперва перечислены входные данные, но не даётся никаких уточнений, что они из себя представляют. Тут это не важно. </p>
<p>Первый пункт – даже не часть Use Case’a, это его старт – клерк запускает команду для создания заказа с нужными данными. </p>
<p>Далее шаги: </p>
<ul>
<li>Система валидирует данные. Не оговаривается как.</li>
<li>Система создает заказ и id заказа. Подразумевается использование БД, но это не важно пока, не уточняется. Как-то создает и всё. </li>
<li>Система доставляет id заказа клерку. Не уточняется как.
Легко представить, что id возвращается не клерку, а, например, выводится на страницу сайта. То есть Use Case никак не зависит от деталей реализации. </li>
</ul>
<p>Ivar Jacobson предложил реализовать этот Use Case в объекте, который назвал ControlObject.
Но Uncle Bob решил, что это плохая идея, так как путается с Controller из MVC и <strong>стал называть такой объект Interactor</strong>. И он говорит, что мог бы назвать его UseCase.
Это можно посмотреть примерно в этом <a href="https://youtu.be/Nsjsiz2A9mg?t=15m2s">моменте видео</a>. </p>
<p>Там же он говорит, что Interactor реализует use case и имеет метод для запуска execute() и получается, что это <a href="https://ru.wikipedia.org/wiki/%D0%9A%D0%BE%D0%BC%D0%B0%D0%BD%D0%B4%D0%B0_(%D1%88%D0%B0%D0%B1%D0%BB%D0%BE%D0%BD_%D0%BF%D1%80%D0%BE%D0%B5%D0%BA%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F)">паттерн Команда</a>. Интересно. </p>
<p>Вернемся к нашим заблуждениям. </p>
<p><strong>Когда кто-то говорит, что у Interactor’a нет четкого определения – он не прав</strong>. Определение есть и оно вполне четкое. Выше я привел несколько источников. </p>
<p>Многим нравится объединять Interactor’ы в один общий с набором методов, реализующих use case’ы.
Если вам сильно не нравятся отдельные классы, можете так делать, это ваше решение. Я лично за <strong>отдельные Interactor’ы</strong>, так как это даёт больше гибкости. </p>
<p>А вот давать определение: «Интерактор – это набор UseCase’ов», – вот это уже <em>плохо</em>. А такое определение бытует. Оно ошибочно с точки зрения оригинального толкования термина и вводит начинающих в большие заблуждения, когда в коде получается одновременно есть и UseCase классы и Interactor классы, хотя всё это одно и то же. </p>
<p>Я призываю не вводить друг друга в заблуждения и использовать названия Interactor и UseCase, не меняя их изначальный смысл: Interactor/UseCase – объект, реализующий use case (сценарий использования). </p>
<p>За примером того, чем плохо, когда одно название толкуется по-разному, далеко ходить не надо, такой пример рядом – паттерн Repository. </p>
<h1 id="dostup-k-dannym">Доступ к данным</h1>
<p>Для доступа к данным удобно <strong>использовать какой-либо паттерн, позволяющий скрыть процесс их получения</strong>. Uncle Bob в своей схеме использует Gateway, но сейчас куда сильнее распространен Repository. </p>
<h3 id="repository">Repository</h3>
<p>А что из себя представляет паттерн Repository? Вот тут и возникает проблема, потому что <em><a href="https://martinfowler.com/eaaCatalog/repository.html">оригинальное определение</a> и то, как мы понимаем репозиторий сейчас (и как его описывает Fernando Cejas в своей <a href="https://fernandocejas.com/2014/09/03/architecting-android-the-clean-way/">статье</a>), фундаментально различаются</em>. </p>
<p>В оригинале Repository инкапсулирует набор сохраненных объектов в более объектно-ориентированном виде. В нем собран код, создающий запросы, который помогает минимизировать дублирование запросов. </p>
<p>Но в Android-сообществе куда более распространено определение Repository как объекта, <em>предоставляющего доступ к данным с возможностью выбора источника данных в зависимости от условий</em>. </p>
<p>Подробнее об этом можно прочесть в <a href="http://hannesdorfmann.com/android/evolution-of-the-repository-pattern">статье Hannes Dorfmann’а</a>. </p>
<h3 id="gateway">Gateway</h3>
<p>Сначала я тоже начал использовать Repository, но воспринимая слово «репозиторий» в значении хранилища, мне <em>не нравилось наличие там методов для работы с сервером типа <code>login()</code></em> (да, работа с сервером тоже идет через Repository, ведь в конце концов для приложения сервер – это та же база данных, только расположенная удаленно). </p>
<p>Я начал искать альтернативное название и узнал, что многие используют Gateway – слово более подходящее, на мой вкус. А сам паттерн <a href="https://martinfowler.com/eaaCatalog/gateway.html">Gateway</a> по сути представляет собой разновидность фасада, где мы прячем сложное API за простыми методами. Он в оригинале тоже не предусматривает выбор источников данных, но все же ближе к тому, как используем мы. </p>
<p>А в обсуждениях все равно приходится использовать слово «репозиторий», всем так проще.</p>
<h3 id="dostup-k-repositorygateway-tolko-cherez-interactor">Доступ к Repository/Gateway только через Interactor?</h3>
<p>Многие настаивают, что это единственный правильный способ. И они правы!
<strong>В идеале использовать Repository нужно только через Interactor</strong>. </p>
<p>Но я не вижу ничего страшного, чтобы в простых случаях, когда не нужно никакой логики обработки данных, вызывать Repository из Presenter’a, минуя Interactor. </p>
<p>Repository и презентер находятся на одном слое, Dependency Rule не запрещает нам использовать Repository напрямую. Единственное но – возможное добавления логики в Interactor в будущем. Но добавить Interactor, когда понадобится, не сложно, а иметь множество proxy-interactor’ов, просто прокидывающих вызов в репозиторий, не всегда хочется. </p>
<p>Повторюсь, я считаю, что в идеале надо делать запросы через Interactor, но также считаю, что в небольших проектах, где вероятность добавления логики в Interactor ничтожно мала, <em>можно этим правилом поступиться</em>. В качестве компромисса с собой. </p>
<h1 id="zabluzhdenie-obyazatelnost-mappinga-mezhdu-sloyami">Заблуждение: Обязательность маппинга между слоями</h1>
<p>Некоторые утверждают, что маппить данные обязательно между всеми слоями. Но это может породить большое количество дублирующихся представлений одних и тех же данных. </p>
<p>А можно использовать DTO из слоя Entities везде во внешних слоях. Конечно, если те могут его использовать. Нарушения Dependency Rule тут нет. </p>
<p>Какое решение выбрать – сильно зависит от предпочтений и от проекта. В каждом варианте есть свои плюсы и минусы. </p>
<p><strong>Маппинг DTO на каждом слое</strong>: </p>
<ul>
<li>Изменение данных в одном слое не затрагивает другой слой; </li>
<li>Аннотации, нужные для какой-то библиотеки не попадут в другие слои; </li>
<li>Может быть много дублирования; </li>
<li>При изменении данных все равно приходится менять маппер. </li>
</ul>
<p><strong>Использование DTO из слоя Enitities</strong>: </p>
<ul>
<li>Нет дублирования кода; </li>
<li>Меньше работы; </li>
<li>Присутствие аннотаций, нужных для внешних библиотек на внутреннем слое; </li>
<li>При изменении этого DTO, возможно придется менять код в других слоях. </li>
</ul>
<p>Хорошее рассуждение есть вот по этой <a href="https://softwareengineering.stackexchange.com/a/303480">ссылке</a>. </p>
<p>С выводами автора ответа я полностью согласен: </p>
<p><em>Если у вас сложное приложение с логикой бизнеса и логикой приложения, и/или разные люди работают над разными слоями, то лучше разделять данные между слоями (и маппить их). Также это стоит делать, если серверное API корявое. Но если вы работаете над проектом один, и это простое приложение, то</em> <strong>не усложняйте</strong> <em>лишним маппингом</em>. </p>
<h1 id="zabluzhdenie-mapping-v-interactore">Заблуждение: маппинг в Interactor’e</h1>
<p>Да, такое заблуждение существует. Развеять его несложно, приведя фразу из оригинальной <a href="https://8thlight.com/blog/uncle-bob/2012/08/13/the-clean-architecture.html">cтатьи</a>:
<em>So when we pass data across a boundary, it is always in the form that is most convenient for the inner circle.
(Когда мы передаем данные между слоями, они всегда в форме более удобной для внутреннего слоя)</em> </p>
<p>Поэтому <strong>в Interactor данные должны попадать уже в нужном ему виде</strong>.
Маппинг происходит в слое Interface Adapters, то есть в Presenter и Repository. </p>
<h1 id="a-gde-raskladyvat-obekty">А где раскладывать объекты?</h1>
<p>С сервера нам приходят данные в разном виде. И иногда API навязывает нам странные вещи. Например, в ответ на <code>login()</code> может прийти объект Profile и объект OrderState. И, конечно же, мы хотим сохранить эти объекты в разных Repository. </p>
<p>Так где же нам разобрать LoginResponse и разложить Profile и OrderState по нужным репозиториям, в Interactor’e или в Repository? </p>
<p>Многие делают это в Interactor’e. Так проще, т.к. не надо иметь зависимости между репозиториями и разрывать иногда возникающую кроссылочность. </p>
<p>Но я делаю это <strong>в Repository. По двум причинам</strong>: </p>
<ul>
<li>Если мы делаем это в Interactor’e, значит мы должны передать ему LoginResponse в каком-то виде. Но тогда, чтобы не нарушать Dependency Rule, LoginResponse должен находиться в слое Interactor’a (UseCases) или Entities. А ему там не место, ведь он им кроме как для раскладывания ни для чего больше не нужен. </li>
<li>Раскладывание данных – не дело для use case. Мы же не станем писать пункт в описании действия доступного пользователю: «Получить данные, разложить данные». Скорее мы напишем просто: «Получить нужные данные»,– и всё. </li>
</ul>
<p>Если вам удобно делать это в Interactor, то делайте, но считайте это компромиссом. </p>
<h1 id="mozhno-li-obedinit-interactor-i-repository">Можно ли объединить Interactor и Repository?</h1>
<p>Некоторым нравится объединять Interactor и Repository. В основном это вызвано желанием избежать решения проблемы, описанной в пункте «Доступ к Repository/Gateway только через Interactor?». </p>
<p>Но <strong>в оригинале Clean Architecture эти сущности не смешиваются</strong>.
И на это пара веских причин: </p>
<ul>
<li>Они на разных слоях. </li>
<li>Они выполняют различные функции. </li>
</ul>
<p>А вообще, как показывает практика, в этом ничего страшного нет. Пробуйте и смотрите, особенно если у вас небольшой проект. Хотя я рекомендую разделять эти сущности. </p>
<h1 id="rxjava-v-clean-architecture">RxJava в Clean Architecture</h1>
<p>Уже становится сложным представить современное Android-приложение без RxJava. Поэтому не удивительно, что <a href="https://fernandocejas.com/2015/07/18/architecting-android-the-evolution/">вторая в серии статья</a> Fernando Cejas была про то, как он добавил RxJava в Clean Architecture. </p>
<p>Я не стану пересказывать статью, но хочу отметить, что, наверное, <em>главным плюсом является возможность избавиться от интерфейсов Boundaries</em> (как способа обеспечить выполнение Dependency Rule) в пользу общих Observable и Subscriber. </p>
<p>Правда <em>есть люди, которых смущает присутствие RxJava во всех слоях</em>, и даже в самых внутренних. Ведь это сторонняя библиотека, а убрать зависимость на всё внешнее – один из основных посылов Clean Architecture. </p>
<p>Но можно сказать, что RxJava негласно уже стала частью языка. Да и в Java 9 уже добавили <a href="http://download.java.net/java/jdk9/docs/api/java/util/concurrent/Flow.html">util.concurrent.Flow</a>, реализацию спецификации <a href="http://www.reactive-streams.org/">Reactive Streams</a>, которую реализует также и RxJava2. Так что не стоит нервничать из-за RxJava, пора <strong>принять ее как часть языка</strong> и наслаждаться. </p>
<h1 id="zabluzhdenie-chto-luchshe-clean-architecture-ili-mvp">Заблуждение: Что лучше Clean Architecture или MVP?</h1>
<p>Смешно, да? А некоторые спрашивают такое в чатах.
Быстро поясню: </p>
<ul>
<li>Архитектура затрагивает всё ваше приложение. И Clean – не исключение. </li>
<li>А презентационные паттерны, например MVP, затрагивают лишь часть, отвечающую за отображение и взаимодействие с UI. Чтобы лучше понять эти паттерны, я рекомендую почитать <a href="https://habrahabr.ru/company/mobileup/blog/313538/">статью</a> моего коллеги <a href="https://habrahabr.ru/users/dmdev/" class="user_link">dmdev</a>. </li>
</ul>
<h1 id="zabluzhdenie-clean-architecture-v-pervyh-proektah">Заблуждение: Clean Architecture в первых проектах</h1>
<p>В последнее время архитектура приложений на слуху. Даже Google решили выпустить свои Architecture Components. </p>
<p>Но этот хайп заставляет молодых разработчиков пытаться затянуть какую-нибудь архитектуру в первые же свои приложения. А это <strong>чаще всего плохая идея</strong>. Так как на раннем этапе куда полезнее вникнуть в другие вещи. </p>
<p>Конечно, если вам все понятно и есть на это время – то супер. Но если сложно, то не надо себя мучить, делайте проще, набирайтесь опыта. А применять архитектуру начнете позже, само придет. </p>
<p><em>Лучше красивый, хорошо работающий код, чем архитектурное спагетти с соусом из недопонимания</em>. </p>
<h1 id="fffuh">Фффух!</h1>
<p>Статья получилась немаленькой. Надеюсь она будет многим полезна и поможет лучше разобраться в теме. <strong>Используйте Clean Architecture, следуйте правилам, но не забывайте, что «все мы пираты по натуре»!</strong> </p></div>
</body>
</html>