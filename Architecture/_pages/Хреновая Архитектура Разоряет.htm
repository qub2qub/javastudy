<!DOCTYPE html>
<html lang="en"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
	<meta charset="UTF-8">
	<title>eXtreme Application Platform</title>
    <link rel="stylesheet" href="grey.css">
	<style type="text/css">
		pre {
            font-family: "Trebuchet MS",Tahoma,Arial;
            font-size: 16px;
            font-weight: bold;
            border: 1px solid #000;
            background-color: #999;
            padding: 5px;
        }
        body {
        	background-color: #bbb;
        }
	</style>
</head>
<body>
<div class="content html_format"><i>Вчера я первый раз написал статью на хабр, не зная местных тонкостей.<br>
<br>
Исправляюсь! Теперь понятным языком и с юмором!</i><br>
<br>
<a href="http://ru.wikipedia.org/wiki/%D0%A7%D1%91%D1%80%D0%BD%D0%B0%D1%8F_%D0%BF%D1%8F%D1%82%D0%BD%D0%B8%D1%86%D0%B0_%28%D1%80%D0%B0%D1%81%D0%BF%D1%80%D0%BE%D0%B4%D0%B0%D0%B6%D0%B8%29">Чёрная пятница</a> оказалась воистину <b>чёрной</b> для aмериканского интернет-универмага <a href="http://en.wikipedia.org/wiki/Kohl%27s">Kohl's</a>.
 Все сервера накрылись медным тазом именно в день рождественских 
распродаж. Привычные 20% годового дохода, добываемые в этот день, 
обернулись смешным пустяком, а все потому что Боливар не вынес такой 
нагрузки.<br>
<br>
Традиционная архитектура Tomcat + WebLogic + БД облажалась по полной 
программе! Напрасно бегали по этажам сисадмины, суетились в панике 
ведущие программисты, а архитекторы выдирали остатки волос… Горлышко 
бутылки оказалось слишком узким для того, чтобы в него могли 
протиснуться все потенциальные клиенты и недостаточно эластичным, чтобы 
за короткое время его можно было успеть расширить. Бутылку разорвало 
нахрен. И долго еще кровоточили раны, нанесённые ее осколками…<br>
<a name="habracut"></a><br>
<h5>Проблемы трёхуровневой архитектуры</h5><br>
<i> – Сынок, работает – не трогай!<br>
– Папа, оно не работает, оно ТОРМОЗИТ!!!</i><br>
<br>
Всем вам прекрасно известна старая, но далеко не всегда добрая трёхуровневая архитектура.<br>
<div class="spoiler"><b class="spoiler_title">трёхуровневая архитектура</b><div class="spoiler_text">Первый
 слой содержит данные, которые в своем большинстве хранятся в 
реляционной базе данных, если мы говорим про большие объёмы, то, видимо,
 выбор падёт на Oracle. Здесь данные сохраняются, модернизируются, 
извлекаются и отправляются в следующий, логический слой. На втором слое 
находит бизнес-логика, всякие EJB, Spring и Hibernate. Где будет сидеть 
весь этот код? Ну конечно в сервере приложений – JBoss, WebLogic, 
WebSphere – вариантов хватает. Дальше третий слой – веб клиент. Тут 
можно томкатами отделаться, да еще и балансировщик нагрузки прикрутить.<br>
<br>
Что я забыл? Ах да, messaging – он обеспечит надежное асинхронное 
взаимодействие с компонентами приложений. Event-driven-архитектура – 
наше всё! Ну и конечно, кластеры, которые будут использоваться в каждом 
из слоев для надёжности.<br>
</div></div><br>
<br>
<img src="%D0%A5%D1%80%D0%B5%D0%BD%D0%BE%D0%B2%D0%B0%D1%8F%20%D0%90%D1%80%D1%85%D0%B8%D1%82%D0%B5%D0%BA%D1%82%D1%83%D1%80%D0%B0%20%D0%A0%D0%B0%D0%B7%D0%BE%D1%80%D1%8F%D0%B5%D1%82_files/951279f55cb16049dc5c8df6b28abcd0.png" alt="image"><br>
<br>
Анализируя такое решение, с лёгкостью можно выявить несколько очевидных проблем<br>
<br>
<h5>Трудности в управлении</h5> <br>
Все уровни имеют различные модели кластеризации. Для управления такой 
системой требуются знания и опыт работы со всеми из них. Это влечет за 
собой:<br>
<ul>
<li>Высокую стоимость: компании вынуждены приобретать отдельные лицензии
 для всех составных частей и нанимать экспертов для установки и 
поддержки каждого из уровней. Кроме того, кластеризация некоторых 
составляющих не всегда проста и, зачастую, полна непредвиденных 
трудностей даже для самых опытных специалистов.</li>
<li>Трудности в контролировании: отслеживание и мониторинг такого 
большого количества компонентов в настоящей работающей системе в 
очередной раз требует дополнительных ресурсов. В большинстве случаев, 
необходимо приобретать дополнительные софт приложения для таких целей.</li>
<li>Трудности в идентификации и решении проблем: трудно определить что и на каком уровне случилось если система вышла из строя</li>
<li>Трудности во внедрении программного обеспечения: межмодульная 
интеграция и конфигурация также может послужить дополнительным 
источником расходов. Заставить все модули «общаться» правильно один с 
другим, как правило, займет некоторое время и дополнительные ресурсы.</li>
</ul><br>
<br>
<h5>Привязка к статическим ресурсам</h5><br>
Таким, как жёсткие диски и имена серверов. Сложности возникают при 
установке таких приложений в облака, так как те очень динамичны по своей
 натуре. <br>
<br>
<h5>Производительность</h5><br>
Почти любой запрос проходит через все три уровня системы и может 
включать в себя множество сетевых прыжков между уровнями и внутри них, 
что плохо сказывается на среднем времени отклика. К тому же рано или 
поздно данные придется сбрасывать на диск. Сетевой и дисковый I/O 
значительно ограничивает масштабируемость и, опять-таки, приводит к 
торможению системы. <br>
<br>
Как результат, Трехуровневая Архитектура не может быть предсказуемо 
масштабирована. Увеличение нагрузки на систему потребует большего числа 
ресурсов для обработки данных, но решить эту проблему тупо добавив 
железа, не получится. Более того, зачастую добавка дополнительных 
ресурсов в один из уровней (например, серверов БД) не только не поможет,
 но, наоборот, повысит время ожидания, и понизит пропускную способность 
системы в целом из-за накладных расходов на синхронизацию между узлами 
кластера. <br>
<br>
<h5>Почему cache и datagrid не решают проблему</h5><br>
Чтобы решить проблемы времени ожидания и масштабируемости обычно ставят 
in-memory datagrid перед реляционной базой данных. Несомненно, это шаг в
 правильном направлении, который частично разгрузит систему и, в 
основном, подходит для кэширования. Стоит обратить внимание, что 
большинство datagrid’ов ограничены своей возможностью извлекать данные 
только при помощи уникального ID. Хотя такое решение может быть 
применено в отдельных случаях, все же оно не идеально по следующим 
причинам:<br>
<ul>
<li>Оно добавляет еще один уровень, для которого требуются 
дополнительные лицензии. Как и все другие, новый уровень нужно 
интегрировать, конфигурировать, контролировать и удалять неисправности, 
если возникнут. Таким образом, это увеличивает общую сложность 
управления данной архитектурой и расходы на ее установку, поддержку и 
обслуживание. </li>
<li>Как было упомянуто выше, такие решения помогут для систем, в которых
 много операций чтения. Но это абсолютно бесполезно для систем, где 
много операций записи. Более того, при наличии кэша возникают 
дополнительные расходы на синхронизацию между кэшом и БД. </li>
</ul><br>
<br>
<h5>Пример из реального мира</h5><br>
Рассмотрим реальную многоуровневую архитектуру системы компании Kohl’s из сферы интернет-продаж.<br>
<img src="%D0%A5%D1%80%D0%B5%D0%BD%D0%BE%D0%B2%D0%B0%D1%8F%20%D0%90%D1%80%D1%85%D0%B8%D1%82%D0%B5%D0%BA%D1%82%D1%83%D1%80%D0%B0%20%D0%A0%D0%B0%D0%B7%D0%BE%D1%80%D1%8F%D0%B5%D1%82_files/2e2e5d6cc0c6eda3f6fd909940e2f778.png" alt="image"><br>
<br>
Сразу бросается в глаза, что любая часть этой системы может сыграть роль
 бутылочного горлышка. Очевидно, что добавление дополнительных ресурсов в
 любое другое место кроме «узкого» никак не поможет избавиться от 
тормозов в системе. <br>
<br>
В случае Kohl’s WebLogic, Apache и база данных Oracle прекрасно 
справлялись с задачами, используя 50 физических серверов. 30 000 
одновременно подсоединённых пользователей исправно получали ответы на 
все запросы. Оно бы всё продолжало работать и впредь, если бы, например,
 компания должна была бы обслуживать определённое фиксированное 
количество транзакций ежесекундно, и не происходило бы никаких резких 
изменений в требованиях к системе. <br>
<br>
Однако, та самая «черная пятница» (Black Friday, когда миллионы 
американцев рвутся в магазины, а ритейлеры делают 20, а иногда и 30 
процентов от годовой выручки за один день) 2009-го года потребовала, 
чтобы система справилась с нагрузкой в 500 000 пользователей 
одновременно. К такому удару трёхуровневая архитектура была не готова… <br>
<br>
Результат — потеря десятков миллионов долларов. Отсюда вопрос:<br>
<br>
<h5>Не пришла ли пора сменить старых героев?</h5><br>
<img src="%D0%A5%D1%80%D0%B5%D0%BD%D0%BE%D0%B2%D0%B0%D1%8F%20%D0%90%D1%80%D1%85%D0%B8%D1%82%D0%B5%D0%BA%D1%82%D1%83%D1%80%D0%B0%20%D0%A0%D0%B0%D0%B7%D0%BE%D1%80%D1%8F%D0%B5%D1%82_files/79ec94ed4e67df14eaeb506fa11092d0.jpg"><br>
<br>
Итак, сформулируем ключевые требования к современной платформе:<br>
<ul>
<li>Операции с данными должны быть быстрыми</li>
<li>Разделение между слоями абстракции не должно бить по производительности</li>
<li>Добавление новых ресурсов должно линейно (или почти линейно) 
увеличивать производительность, а также не упираться ни в какие 
ограничения. </li>
<li>Диплоймент должен быть одновременно гибким и простым.</li>
<li>Система должна быть «неубиваемой» и заранее предупреждать об потенциальных проблемах.</li>
</ul><br>
<br>
Примерно такими требованиями руководствовались инженеры компании 
Gigaspaces которые 10 лет назад начали разработку новой платформы XAP 
(eXtreme Application Platform)<br>
<br>
<h5>Вот как они все придумали</h5><br>
<img src="%D0%A5%D1%80%D0%B5%D0%BD%D0%BE%D0%B2%D0%B0%D1%8F%20%D0%90%D1%80%D1%85%D0%B8%D1%82%D0%B5%D0%BA%D1%82%D1%83%D1%80%D0%B0%20%D0%A0%D0%B0%D0%B7%D0%BE%D1%80%D1%8F%D0%B5%D1%82_files/d31d54305ee51e59e6443ba81b7507fc.png" alt="image"><br>
<ul>
<li>Все данные хранятся в оперативке, а не на диске. Если что, 
оперативка сегодня очень дешевая, ни в пример Оракловой БД даже с самым 
простым саппортом</li>
<li>Логика приложения сидит в одном контейнере с данными. Это конечно 
может не понравится университетским преподавателям и прочим любителям 
классической архитектуры. Иной хабровчанин даже может решить, что такое 
решение способствует нездоровому смешиванию данных с логикой. Однако 
опыт показывает, что настоящих умельцев никакие слои не остановят и при 
наличии должных навыков, винегрет можно сделать, имея какую угодно 
«архитектуру»!</li>
<li>Все данные разбиваются на неограниченное количество партишенов, каждый из которых может сидеть в отдельной машине. </li>
<li>Диплоймент описывается декларативно! «разбей мне все данные на 
100500 кусков, на каждый кусок сделай по 2 бэкапа, не диплой бэкапы в 
одном дата центре, не используй для диплойменты машины нагруженные 
больше чем на 146 процентов»</li>
<li>Специальные диспетчеры пишут данные сразу в несколько мест и в 
случае сбоя автоматически перенаправляют запросы на другие машины. 
Паралельно с этим существует удобная система мониторинга, которая 
уведомляет обо всех потенциальных проблемах, таких как недостаточное 
количество нодов в кластере, сбои в системе или перегруженность машин.</li>
</ul><br>
<br>
<img src="%D0%A5%D1%80%D0%B5%D0%BD%D0%BE%D0%B2%D0%B0%D1%8F%20%D0%90%D1%80%D1%85%D0%B8%D1%82%D0%B5%D0%BA%D1%82%D1%83%D1%80%D0%B0%20%D0%A0%D0%B0%D0%B7%D0%BE%D1%80%D1%8F%D0%B5%D1%82_files/b342356583c4041ebfc0a6f61df755f0.png" alt="image"><br>
А вот <b><a href="http://www.gigaspaces.com/xap-in-memory-computing-event-processing/Meet-XAP">видео</a></b><br>
<br>
<h5>Компания Kohl воскресла из пепла</h5><br>
После кризиса 2009 года компания Коhl заменила всю старую архитектуру на
 XAP. В результате, по данным гугла сегодня их сайт занимает одно из 
первых мест в мире по скорости выдачи страниц <br>
<img src="%D0%A5%D1%80%D0%B5%D0%BD%D0%BE%D0%B2%D0%B0%D1%8F%20%D0%90%D1%80%D1%85%D0%B8%D1%82%D0%B5%D0%BA%D1%82%D1%83%D1%80%D0%B0%20%D0%A0%D0%B0%D0%B7%D0%BE%D1%80%D1%8F%D0%B5%D1%82_files/d1a4c1dedbc1e44b0304feda9f4191f2.png"><br>
<br>
На сегодняшний день платформой XAP пользуется далеко не только Kohl. В 
списке её клиентов сегодня присутствуют ведущие швейцарские банки 
(например, <a href="http://ru.wikipedia.org/wiki/UBS">UBS</a>), нью-йоркская биржа, компания <a href="http://ru.wikipedia.org/wiki/Avaya">Avaya</a> и еще сотни других компаний.<br>
<br>
<h5>Эпилог</h5><br>
Кто-то скажет: «А я использую многоуровневую архитектуру и очень 
доволен!» И очень хорошо. Но живя в мире, где объём данных растёт 
экспоненциально, мы должны понимать, что даже если сегодня нет 
необходимости в in-memory computing platform, то нам стоит хотя бы знать
 об их существовании и о том, какую пользу они несут. Может, уже в 
ближайшем будущем вырастут требования к количеству обрабатываемых Вашим 
приложением данных и тогда, несомненно, in-memory computing platforms 
могут помочь, не говоря о приложениях, оперирующих в реальном времени 
огромными объёмами данных, для которых их использование просто 
необходимо.<br>
<br>
<a href="https://youtu.be/a-ArgBL5WhA">видео его выступления</a>
</div>

</body></html>