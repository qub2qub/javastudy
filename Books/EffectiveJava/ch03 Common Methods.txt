ch03 Common Methods
******************************************************
*** Item 8: Obey(слушаться, повиноваться, подчиняться) the general contract when overriding equals ***

В некоторых случая не нужно переопределять Object.equals(), т.к. дефолтной реализации будет достаточно:
1) Each instance of the class is inherently unique.
2) You don’t care whether the class provides a “logical equality” test. 
3) A superclass has already overridden equals, and the superclass behavior is appropriate for this class. 
4) The class is private or package-private, and you are certain that its equals method will never be invoked. Тут надо переопределить и выбросить AssertionError.
5) One kind of value class that does not require the equals method to be overridden is a class that uses INSTANCE CONTROL (Item 1) to ensure that at most one object exists with each value. Enum types (Item 30) fall into this category. For these classes, logical equality is the same as object identity, so Object’s equals method functions as a logical equals method.

------
Но в определённых случаях надо переопределить Object.equals():
When a class has a notion of logical equality that differs from mere object identity, 
and a superclass has not already overridden equals to implement the desired behavior.


-----
Контракт Object.equals():
The equals method implements an equivalence relation. It is:

1) Reflexive: ( an object must be equal to itself )
>> For any non-null reference value x, x.equals(x) must return true.
а null==null ?

2) Symmetric: ( any two objects must agree on whether they are equal )
>> For any non-null reference values x and y, x.equals(y) must return true if and only if y.equals(x) returns true.
Once you’ve violated the equals contract, you simply don’t know how other objects will behave when confronted with your object.

3) Transitive: (if one object is equal to a second and the second object is equal to a third, then the first object must be equal to the third)
>> For any non-null reference values x, y, z, if x.equals(y) returns true and y.equals(z) returns true, then x.equals(z) must return true.
There is no way to extend an instantiable class and add a value component while preserving the equals contract

4) Consistent: (if two objects are equal, they must remain equal for all time unless one (or both) of them is modified.)
>> For any non-null reference values x and y, multiple invocations of x.equals(y) consistently return true or consistently return false, provided no information used in equals comparisons on the objects is modified.

5) “Non-nullity”: (all objects must be unequal to null)
>> For any non-null reference value x, x.equals(null) must return false.

п.3
The Liskov substitution principle says that any important property of a type should also hold for its subtypes, so that any method written for the type should work equally well on its subtypes [Liskov87].

collections, such as the HashSet used by the onUnitCircle method, use the equals() method to test for containment, and no CounterPoint instance is equal to any Point. 

There are some classes in the Java platform libraries that do extend an instantiate class and add a value component. 
For example, java.sql.Timestamp extends java.util.Date and adds a nanoseconds field. The equals implementation for Timestamp does violate symmetry and can cause erratic behavior if Timestamp and Date objects are used in the same collection or are otherwise intermixed. The Timestamp class has a disclaimer cautioning programmers against mixing dates and timestamps.


!!! Note that you CAN add a VALUE COMPONENT to a subclass of an ABSTRACT class WITHOUT VIOLATING the equals contract. 
Потому что нельзя явно создать инстанс родителя, и доп. поля в потомках никак не повляют, если сравнивать только потомков между собой.

MUTABLE objects can be equal to different objects at different times while IMMUTABLE OBJECTS CAN’T. When you write a class, think hard about whether it should be immutable (Item 15). If you conclude that it should, make sure that your equals method enforces the restriction that equal objects remain equal and unequal objects remain unequal for all time.

Whether or not a class is immutable, do not write an equals method that depends on unreliable resources. It’s extremely difficult to satisfy the consistency requirement if you violate this prohibition.
--you don’t need a separate "null" check, because "instanceof" operator is specified to return false if its first operand is null, regardless of what type appears in the second operand.
------------------------------------------

Putting it all together, here’s a recipe for a high-quality equals method:

1. Use the == operator to check if the argument is a reference to this object.

If so, return true. This is just a performance optimization, but one that is worth doing if the comparison is potentially expensive.

2. Use the instanceof operator to check if the argument has the correct type (and not NULL).

If not, return false. Typically, the correct type is the class in which the method occurs. Occasionally, it is some interface implemented by this class. Use an interface if the class implements an interface that refines the equals contract to permit comparisons across classes that implement the interface. Collection interfaces such as Set, List, Map, and Map.Entry have this property.

3. Cast the argument to the correct type. Because this cast was preceded by an instanceof test, it is guaranteed to succeed.

4. For each “significant” field in the class, check if THAT FIELD of the argument matches the corresponding field of THIS OBJECT. 
If all these tests succeed, return true; otherwise, return false. 
If the type in step 2 is an interface, you must access the argument’s fields via interface methods; if the type is a class, you may be able to access the fields directly, depending on their accessibility.

5. When you are finished writing your equals method, ask yourself three questions: Is it symmetric? Is it transitive? Is it consistent? And don’t just ask yourself; write unit tests to check that these properties hold! If they don’t, figure out why not, and modify the equals method accordingly. Of course your equals method also has to satisfy the other two properties (reflexivity and “non-nullity”), but these two usually take care of themselves.
---------------------------
1) For primitive fields whose type is not float or double, use the == operator for comparisons; 
2) for object reference fields, invoke the equals method recursively; 
3) for float fields, use the Float.compare method; 
4) and for double fields, use Double.compare. 

The special treatment of float and double fields is made necessary by the existence of Float.NaN, -0.0f and the analogous double constants; see the Float.equals documentation for details. 
For array fields, apply these guidelines to each element. If every element in an array field is significant, you can use one of the Arrays.equals(..) methods added in release 1.5.

Some object reference fields may legitimately contain null. To avoid the possibility of a Null PointerException, use this idiom to compare such fields:

(field == null ? o.field == null : field.equals(o.field))

This alternative may be faster if field and o.field are often identical:

(field == o.field || (field != null && field.equals(o.field)))

The performance of the equals method may be affected by the order in which fields are compared. For best performance, you should first compare fields that are more likely to differ, less expensive to compare, or, ideally, both. You must not compare fields that are not part of an object’s logical state, such as Lock fields used to synchronize operations. 

доп в п4:
You NEED NOT COMPARE REDUNDANT FIELDS, which can be calculated from “significant fields,” BUT DOING SO MAY IMPROVE THE PERFORMANCE of the equals method. 
If a redundant field amounts to a summary description of the entire object, comparing this field will save you the expense of comparing the actual data if the comparison fails. For example, suppose you have a Polygon class, and you cache the area. If two polygons have unequal areas, you needn’t bother comparing their edges and vertices.

Here are a few final caveats:

• Always override hashCode() when you override equals (Item 9).
• Don’t try to be too clever. If you simply test fields for equality, it’s not hard to adhere to the equals contract.
• Don’t substitute(заместитель) another type for Object in the equals declaration.

******************************************************
*** Item 9: Always override hashCode when you override equals ***
A common source of bugs is the failure to override the hashCode method. You must override hashCode in every class that overrides equals. 
Failure to do so will result in a violation of the general contract for Object.hashCode(), which will prevent your class from functioning properly in conjunction with all hash-based collections, including HashMap, HashSet, and Hashtable.

Here is the contract, copied from the Object specification [JavaSE6]:

1 Whenever it is invoked on the same object more than once during an execution of an application, the hashCode method must consistently return the same integer, provided no information used in equals comparisons on the object is modified. This integer need not remain consistent from one execution of an application to another execution of the same application.

2 If two objects are equal according to the equals (Object) method, then calling the hashCode method on each of the two objects must produce the same integer result.

3 It is not required that if two objects are unequal according to the equa1s(Ob-ject) method, then calling the hashCode method on each of the two objects must produce distinct integer results. However, the programmer should be aware that producing distinct integer results for unequal objects may improve the performance of hash tables.

The key provision [that is violated when you fail to override hashCode] is the second one: EQUAL OBJECTS MUST HAVE EQUAL HASH CODES. Two distinct instances may be logically equal according to a class’s equals method, but to Object’s hashCode method, they’re just two objects with nothing much in common. Therefore Object’s hashCode method returns two seemingly random numbers instead of two equal numbers as required by the contract.

GOOD hash function tends to produce unequal hash codes for unequal objects. This is exactly what is meant by the third provision of the hashCode contract. Ideally, a hash function should distribute any reasonable collection of unequal instances uniformly across all possible hash values.

Как правильно писть хэшкод:
1. Store some constant nonzero value, say, 17, in an int variable called result.
2. For each significant field F in your object (each field taken into account by the equals method, that is), do the following:
	a. Compute an int hash code c for the field:
	i. 		If the field is a boolean, compute (f ? 1 : 0).
	ii. 	If the field is a byte, char, short, or int, compute (int) f.
	iii. 	If the field is a long, compute (int) (f^(f >>> 32)).
	iv. 	If the field is a float, compute Float.floatTolntBits(f).
	v. 		If the field is a double, compute Double.doubleToLongBits(f), and then hash the resulting long as in step 2.a.iii.
	vi. 	If the field is an object reference and this class’s equals method compares the field by recursively invoking equals, ecursively invoke hashCode() on the field. 
	If a more complex comparison is required, compute a “canonical representation” for this field and invoke hashCode on the canonical representation. If the value of the field is null, return 0 (or some other constant, but 0 is traditional).

	vii. 	If the field is an array, treat it as if each element were a separate field. That is, compute a hash code for each significant element by applying these rules recursively, and combine these values per step 2.b. 
	If every element in an array field is significant, you can use one of the Arrays.hashCode(..) methods added in release 1.5.

	b. Combine the hash code "C" computed in step 2.a into result as follows: 
	result = 31 * result + c;

3. Return result.
4. When you are finished writing the hashCode method, ask yourself whether equal instances have equal hash codes? 
Write unit tests to verify your intuition!
If equal instances have unequal hash codes, figure out why and fix the problem.

! You may exclude redundant fields from the hash code computation. 
!! In other words, you may ignore any field whose value can be computed from fields included in the computation. 
!!! You must exclude any fields that are not used in equals comparisons, or you risk violating the second provision(положение (договора, закона и т.д.)) of the hashCode contract.
----------
A nonzero initial value is used in step 1 so the hash value will be affected by initial fields whose hash value, as computed in step 2.a, is zero. If zero were used as the initial value in step 1, the overall hash value would be unaffected by any such initial fields, which COULD INCREASE COLLISIONS. The value 17 is arbitrary.

The multiplication in step 2.b makes the result depend on the order of the fields, yielding a much better hash function if the class has multiple similar fields. For example, if the multiplication were omitted from a String hash function, all anagrams would have identical hash codes. The value 31 was chosen because it is an odd prime. 

If it were even and the multiplication overflowed, information would be lost, as multiplication by 2 is equivalent to shifting. The advantage of using a prime is less clear, but it is traditional. A nice property of 31 is that the multiplication can be replaced by a shift and a subtraction for better performance: 31 * i == (i << 5) - i. Modern VMs do this sort of optimization automatically.

If a class is immutable and the cost of computing the hash code is significant, you might consider caching the hash code in the object rather than recalculating it each time it is requested. 
If you believe that most objects of this type will be used as hash keys, then you should calculate the hash code when the instance is created. Otherwise, you might choose to lazily initialize it the first time hashCode is invoked (Item 71).

!!! Do not be tempted to exclude significant parts of an object from the hash code computation to improve performance. 
While the resulting hash function may run faster, its poor quality may degrade hash tables’ performance to the point where they become unusably slow. 

******************************************************
*** Item 10: Always override toString ***
The general contract for toString says that the returned string should be “a concise but informative representation that is easy for a person to read” 
The toString contract goes on to say, “It is recommended that all subclasses override this method.” 

One important decision you’ll have to make when implementing a toString method is whether to specify the format of the return value in the documentation.
It is recommended that you do this for value classes, such as phone numbers or matrices. The advantage of specifying the format is that it serves as a standard, unambiguous, human-readable representation of the object.

If you specify the format, it’s usually a good idea to provide a matching static factory or constructor so programmers can easily translate back and forth between the object and its string representation.

Whether or not you specify the format, provide programmatic access to all of the information contained in the value returned by toString. For example, the PhoneNumber class should contain accessors for the area code, prefix, and line number. If you fail to do this, you force programmers who need this information to parse the string. Besides reducing performance and making unnecessary work for programmers, this process is error-prone and results in fragile systems that break if you change the format. By failing to provide accessors, you turn the string format into a de facto API, even if you’ve specified that it’s subject to change.

******************************************************
*** Item 11: Override clone judiciously ***

The Cloneable interface was intended as a mixin interface (Item 18) for objects to advertise that they permit cloning. Unfortunately, it fails to serve this purpose. Its primary flaw is that it lacks a clone method, and Object’s clone method is protected. You cannot, without resorting to reflection (Item 53), invoke the clone method on an object merely because it implements Cloneable. Even a reflective invocation may fail, as there is no guarantee that the object has an accessible clone method. Despite this flaw and others, the facility is in wide use so it pays to understand it. This item tells you how to implement a well-behaved clone method, discusses when it is appropriate to do so, and presents alternatives.

Cloneable determines the behavior of Object’s protected clone implementation: 
if a class implements Cloneable, Object’s clone method returns a field-by-field copy of the object; 
otherwise it throws CloneNotSupportedException.

If implementing the Cloneable interface is to have any effect on a class, the class and all of its superclasses must obey a fairly complex, unenforceable(неосуществимый), and thinly(плохо, кое-как) documented protocol. 
The resulting mechanism is extralinguistic(внеязыковой): it creates an object without calling a constructor.

The general contract for the clone method is weak:
------------------
Creates and returns a copy of this object. The precise meaning of "copy" may depend on the class of the object. The general intent is that, for any object x, the expression:
       x.clone() != x
will be true, and that the expression:
       x.clone().getClass() == x.getClass()
will be true, but these are not absolute requirements. 
While it is typically the case that:
       x.clone().equals(x)
will be true, this is not an absolute requirement.
By convention, the returned object should be obtained by calling super.clone(). If a class and all of its superclasses (except Object) obey this convention, it will be the case that x.clone().getClass() == x.getClass().
By convention, the object returned by this method should be independent of this object (which is being cloned). To achieve this independence, it may be necessary to modify one or more fields of the object returned by super.clone before returning it. Typically, this means copying any mutable objects that comprise the internal "deep structure" of the object being cloned and replacing the references to these objects with references to the copies. If a class contains only primitive fields or references to immutable objects, then it is usually the case that no fields in the object returned by super.clone need to be modified.
-------------

There are a number of problems with this contract. The provision that “no constructors are called” is too strong. A well-behaved clone method can call constructors to create objects internal to the clone under construction. If the class is final, clone can even return an object created by a constructor.

The Cloneable interface does not, as of release 1.6, spell out in detail the responsibilities that a class takes on when it implements this interface. In practice, a class that implements Cloneable is expected to provide a properly functioning public clone method. It is not, in general, possible to do so unless all of the class’s superclasses provide a well-behaved clone implementation, whether public or protected.

COVARIANT RETURN TYPES were introduced in release 1.5 as part of generics. In other words, it is now legal for an overriding method’s return type to be a subclass of the overridden method’s return type. This allows the overriding method to provide more information about the returned object and eliminates the need for casting in the client. 

!! The general principle at play here is "never make the client do anything the library can do for the client".

If an object contains fields that refer to mutable objects, using the simple clone implementation shown above can be disastrous. For example, consider the Stack class in Item 6:

Note that we do not have to cast the result of elements.clone() to Object[]. As of release 1.5, calling clone on an array returns an array whose compile-time type is the same as that of the array being cloned.

Note also that the above solution would not work if the elements field were final, because clone would be prohibited from assigning a new value to the field. 
This is a fundamental problem: the clone architecture is incompatible with normal use of final fields referring to mutable objects, except in cases where the mutable objects may be safely shared between an object and its clone. 
!!! In order to make a class cloneable, it may be necessary to remove final modifiers from some fields.

---------
A final approach to cloning complex objects is to call super.clone, set all of the fields in the resulting object to their virgin state, and then call higher-level methods to regenerate the state of the object. 

This approach typically yields a simple, reasonably elegant clone method that generally doesn’t run quite as fast as one that directly manipulates the innards of the object and its clone.

Like a constructor, a clone method should not invoke any nonfinal methods on the clone under construction (Item 17). 
 If clone invokes an overridden method, this method will execute before the subclass [in which it is defined] has had a chance to fix its state in the clone, quite possibly leading to corruption in the clone and the original.
   Therefore the put(key, value) method discussed in the previous paragraph should be either final or private. (If it is private, it is presumably the “helper method” for a nonfinal public method.)

Object’s clone method is declared to throw CloneNotSupportedException, but overriding clone methods can omit this declaration. 
Public clone methods should omit it because methods that don’t throw checked exceptions are easier to use (Item 59). 
If a class [that is designed for inheritance (Item 17)] overrides clone, the overriding method should mimic the behavior of Object.clone: 
1) it should be declared protected, 
2) it should be declared to throw CloneNotSupportedException, 
3) and the class should not implement Cloneable.
      This gives subclasses the freedom to implement Cloneable or not, just as if they extended Object directly.

One more detail bears noting. If you decide to make a thread-safe class implement Cloneabl e, remember that its clone method must be properly synchronized just like any other method (Item 66). Object’s clone method is not synchronized, so even if it is otherwise satisfactory, you may have to write a synchronized clone method that invokes super.clone().

To recap, all classes that implement Cloneable should override clone with a public method whose return type is the class itself. This method should first call super.clone and then fix any fields that need to be fixed. Typically, this means copying any mutable objects that comprise the internal “deep structure” of the object being cloned, and replacing the clone’s references to these objects with references to the copies. While these internal copies can generally be made by calling clone recursively, this is not always the best approach. If the class contains only primitive fields or references to immutable objects, then it is probably the case that no fields need to be fixed. There are exceptions to this rule. For example, a field representing a serial number or other unique ID or a field representing the object’s creation time will need to be fixed, even if it is primitive or immutable.

------

A fine approach to object copying is to provide a copy constructor or copy factory. A copy constructor is simply a constructor that takes a single argument whose type is the class containing the constructor, for example,
			public Yum(Yum yum);
A copy factory is the static factory analog of a copy constructor:
			public static Yum newInstance(Yum yum);
The copy constructor approach and its static factory variant have many advantages over Cloneable/clone: 
_1__they don’t rely on a risk-prone extralinguistic object creation mechanism;
_2__they don’t demand unenforceable adherence to thinly documented conventions;
_3__they don’t conflict with the proper use of final fields;
_4__they don’t throw unnecessary checked exceptions; 
_5__and they don’t require casts. 
While it is impossible to put a copy constructor or factory in an interface, Cloneable fails to function as an interface because it lacks a public clone method. Therefore you aren’t giving up interface functionality by using a copy constructor or factory in preference to a clone method.

Furthermore, a copy constructor or factory can take an argument whose type is an interface implemented by the class.
Interface-based copy constructors and factories, more properly known as CONVERSION CONSTRUCTORS AND CONVERSION FACTORIES, allow the client to choose the implementation type of the copy rather than forcing the client to accept the implementation type of the original. 

Given all of the problems associated with Cloneable, it’s safe to say that other interfaces should not extend it, and that classes designed for inheritance (Item 17) should not implement it. Because of its many shortcomings, some expert programmers simply choose never to override the clone method and never to invoke it except, perhaps, to copy arrays. If you design a class for inheritance, be aware that if you choose not to provide a well-behaved protected clone method, it will be impossible for subclasses to implement Cl oneable.


******************************************************
*** Item 12: Consider implementing Comparable ***

By implementing Comparable, a class indicates that its instances have a natural ordering. 
Sorting an array of objects that implement Comparable is as simple as this:  Arrays.sort(a);

It is similarly easy to search, compute extreme values, and maintain automatically sorted collections of Comparable objects.

By implementing Comparable, you allow your class to interoperate with all of the many generic algorithms and collection implementations that depend on this interface. You gain a tremendous amount of power for a small amount of effort. Virtually all of the value classes in the Java platform libraries implement Comparable. If you are writing a value class with an obvious natural ordering, such as alphabetical order, numerical order, or chronological order, you should strongly consider implementing the interface:
public interface Comparable<T> { 
	int compareTo(T t);
}

The general contract of the compareTo method is similar to that of equals:

Compares this object with the specified object for order. 
Returns a negative integer, zero, or a positive integer as this object is less than, equal to, or greater than the specified object. Throws ClassCastException if the specified object’s type prevents it from being compared to this object.

In the following description, the notation sgn(expression) designates the mathematical signum function, which is defined to return -1, 0, or 1, according to whether the value of expression is negative, zero, or positive.

•    The implementor must ensure sgn(x.compareTo(y)) ==-sgn(y.compare-To(x)) for all x and y. (This implies that x.compareTo(y) must throw an exception if and only if y.compareTo(x) throws an exception.)

•    The implementor must also ensure that the relation is transitive: (x.com-pareTo(y) > 0 && y.compareTo(z) > 0) implies x.compareTo(z) >0.

•    Finally, the implementor must ensure that x.compareTo(y) == 0 implies that sgn(x.compareTo(z)) == sgn(y.compareTo(z)), for all z.

•    It is strongly recommended, but not strictly required, that (x.compareTo(y) == 0) == (x.equals(y)). 
Generally speaking, any class that implements the Comparable interface and violates this condition should clearly indicate this fact. 
The recommended language is “Note: This class has a natural ordering that is inconsistent with equals.”
---- It states that the equality test imposed by the compareTo method should generally return the same results as the equals method. If this provision is obeyed, the ordering imposed by the compareTo method is said to be consistent with equals. If it’s violated, the ordering is said to be inconsistent with equals. 

Within a class, any reasonable ordering will satisfy it. 
Across classes, compareTo, unlike equals, doesn’t have to work: it is permitted to throw ClassCastException if two object references being compared refer to objects of different classes.

Just as a class that violates the hashCode contract can break other classes that depend on hashing, a class that violates the compareTo contract can break other classes that depend on comparison. 
Classes that depend on comparison include the sorted collections TreeSet and TreeMap, and the utility classes Collecti ons and Arrays, which contain searching and sorting algorithms.

Let’s go over the provisions of the compareTo contract. 
1) The first provision says that if you reverse the direction of a comparison between two object references, the expected thing happens: if the first object is less than the second, then the second must be greater than the first; if the first object is equal to the second, then the second must be equal to the first; and if the first object is greater than the second, then the second must be less than the first. 
2) The second provision says that if one object is greater than a second, and the second is greater than a third, then the first must be greater than the third. 
3) The final provision says that all objects that compare as equal must yield the same results when compared to any other object.

One consequence of these three provisions is that the equality test imposed by a compareTo method must obey the same restrictions imposed by the equals contract: reflexivity, symmetry, and transitivity. Therefore the same caveat applies: there is no way to extend an instantiable class with a new value component while preserving the compareTo contract, unless you are willing to forgo the benefits of object-oriented abstraction (Item 8). The same workaround applies, too. If you want to add a value component to a class that implements Comparable, don’t extend it; write an unrelated class containing an instance of the first class. Then provide a “view” method that returns this instance. This frees you to implement whatever compareTo method you like on the second class, while allowing its client to view an instance of the second class as an instance of the first class when needed.

A class whose compareTo method imposes an order that is inconsistent with equals will still work, but sorted collections containing elements of the class may not obey the general contract of the appropriate collection interfaces (Collection, Set, or Map). 
This is because the general contracts for these interfaces are defined in terms of the EQUALS METHOD, BUT SORTED COLLECTIONS USE THE EQUALITY TEST IMPOSED BY COMPARE_TO IN PLACE OF EQUALS. 
It is not a catastrophe if this happens, but it’s something to be aware of.

 ---- public int compareTo(BigDecimal val)
The suggested idiom for performing these comparisons is: 
			(x.compareTo(y) [op] 0), 
where <op> is one of the six comparison operators (<, ==, >, >=, !=, <=).

Comparable interface is parameterized, the compareTo method is statically typed, so you don’t need to type check or cast its argument. If the argument is of the wrong type, the invocation won’t even compile. If the argument is null, the invocation should throw a NullPointerEx-ception, and it will, as soon as the method attempts to access its members.

Compare integral primitive fields using the relational operators < and >. For floating-point fields, use Double.compare or Float.compare in place of the relational operators, which do not obey the general contract for compareTo when applied to floating point values. For array fields, apply these guidelines to each element.

!!! If a class has multiple significant fields, the order in which you compare them is critical. 
You must start with the most significant field and work your way down. If a comparison results in anything other than zero (which represents equality), you’re done; just return the result. If the most significant fields are equal, go on to compare the next-most-significant fields, and so on. If all fields are equal, the objects are equal; return zero. The technique is demonstrated by this compareTo method for the PhoneNumber class in Item 9:

This trick works fine here but should be used with extreme caution. Don’t use it unless you’re certain the fields in question are non-negative or, more generally, that the difference between the lowest and highest possible field values is less than or equal to Integer.MAX_VALUE (2^31-1). 