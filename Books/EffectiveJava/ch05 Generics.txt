ch05 Generics

******************************************************
*** Item 23: Don’t use raw types in new code ***
Генерики - это параметризированные классы.
A class or interface whose declaration has one or more type parameters is a generic class or interface.
Generic classes and interfaces - параметризованные типы.
Generic classes and interfaces are collectively known as generic types.

Each generic type defines a set of parameterized types. which consist of the class or interface name followed by an angle-bracketed list of actual type parameters corresponding to the generic type’s formal type parameters

List<String> (read “list of string”) is a parameterized type representing a list whose elements are of type String. 
(String is the ACTUAL TYPE PARAMETER corresponding to the FORMAL TYPE PARAMETER E.)

Finally. each generic type defines a RAW TYPE. which is the name of the generic type used without any accompanying actual type parameters.
For all practical purposes, the raw type List behaves the same way as the interface type List did before generics were added to the platform.

As mentioned throughout this book, it pays to discover errors as soon as possible after they are made, ideally at compile time. In this case, you don’t discover the error till runtime, long after it has happened, and in code that is far removed from the code containing the error. 

The compiler inserts invisible casts for you and guarantees that they won’t fail (assuming, again, that all of your code was compiled with a generics-aware compiler and did not produce or suppress any warnings).

If you use raw types, you lose all the safety and expressiveness benefits of generics.
language designers allow raw types to provide compatibility for older java versions. 
It had to be legal to pass instances of parameterized types to methods that were designed for use with ordinary types, and vice versa. This requirement, known as migration compatibility, drove the decision to support raw types.

what is the difference between the raw type List and the parameterized type List<Object>? 
Loosely speaking, the former/первый/"List" has [opted out of] generic type checking, while the latter/второй/"List<Object>" has explicitly told the compiler that it is capable of holding objects of any type. 

--- opt out of ---
1) не принимать участия в 
(Students should have the option to opt out of dissecting animals in science class.), 
отказаться от участия в
2) дип. устраняться от участия в (ч-л)

While you can pass a List<String> to a parameter of type List, you can’t pass it to a parameter of type List<Object>. 
There are subtyping rules for generics, and List<String> is a subtype of the raw type List, but not of the parameterized type List<Object> (Item 25). 
As a consequence, you lose type safety if you use a raw type like List, but not if you use a parameterized type like List<Object>.

You might be tempted to use a raw type for a collection whose element type is unknown and doesn’t matter. For example, suppose you want to write a method that takes two sets and returns the number of elements they have in common.
Java has provided a safe alternative known as UNBOUNDED WILDCARD TYPES. 
If you want to use a generic type but you DON’T KNOW OR CARE WHAT THE ACTUAL TYPE PARAMETER IS, you can use a question mark instead. 
For example, the UNBOUNDED WILDCARD TYPE for the generic type Set<E> is Set<?> (read “SET OF SOME TYPE”).
It is the most general parameterized Set type, capable of holding any set. 

!!! wildcard type is safe and the raw type isn’t. 
You can put any element into a collection with a raw type, easily corrupting the collection’s type invariant/

You can’t put any element (other than null) into a Collection<?>. 
Attempting to do so will generate a compile-time error message/

А ТАКЖЕ you can’t assume anything about the type of the objects that you get out ИЗ "Collection<?>". 
If these restrictions are unacceptable, you can use generic methods (Item 27) or bounded wildcard types (Item 28).

There are two minor exceptions to the rule that you should not use raw types in new code, both of which stem from the fact that generic type information is erased at runtime (Item 25). 

1) You MUST USE RAW TYPES IN CLASS LITERALS. 
The specification does not permit the use of parameterized types (though it does permit array types and primitive types). 
In other words, List.class, String[].class, and int.class are all legal, but List<String>.class and List<?>.class are not.

2) The second exception to the rule concerns the INSTANCEOF operator. Because generic type information is erased at runtime, IT IS ILLEGAL TO USE THE INSTANCEOF OPERATOR ON PARAMETERIZED TYPES OTHER THAN UNBOUNDED WILDCARD TYPES. 
The use of unbounded wildcard types in place of raw types does not affect the behavior of the instanceof operator in any way. 
In this case, the angle brackets and question marks are just noise.

This is the preferred way to use the instanceof operator
with generic types:
// Legitimate use of raw type - instanceof operator
	if (o instanceof Set) { 		// Raw type
		Set<?> m = (Set<?>) o; 		// Wildcard type
		// This is a checked cast, so it will not cause a
compiler warning.
	}

In summary, using raw types can lead to exceptions at runtime, so don’t use them in new code. 
They are provided only for compatibility and interoperability with legacy code that predates the introduction of generics. 
As a quick review, Set<Object> is a parameterized type representing a set that can contain objects of any type, 
Set<?> is a wildcard type representing a set that can contain only objects of some unknown type, 
and Set is a raw type, which opts out of the generic type system. The first two are safe and the last is not.

******************************************************
*** Item 24: Eliminate unchecked warnings *** СТР 116

 When you get warnings that require some thought, persevere!
 --- persevere [pɜ:sı`vıə] ---
  [упорно, настойчиво добиваться; стойко, упорно продолжать] 

 Eliminate every unchecked warning that you can. If you eliminate all warnings, you are assured that your code is typesafe, which is a very good thing.
 It means that you won’t get a ClassCastExcepti on at runtime, and it increases your confidence that your program is behaving as you intended.

 --  crop up -- неожиданно появляться, возникать; нарисовываться
 -- amidst  -- в середине, между; посреди, среди, в условиях

 The SuppressWarnings annotation can be used at any granularity, from an individual local variable declaration to an entire class. Always use the SuppressWarnings annotation on the smallest scope possible. Typically this will be a variable declaration or a very short method or constructor. Never use Suppress-Warnings on an entire class. Doing so could mask critical warnings.

It is illegal to put a SuppressWarnings annotation on the return statement, because it isn’t a declaration. You might be tempted to put the annotation on the entire method, but don’t. 
Instead, declare a local variable to hold the return value and annotate its declaration

// This cast is correct because the array we're creating
// is of the same type as the one passed in, which is T[].
	@SuppressWarnings("unchecked") T[] result =
		(T[]) Arrays.copyOf(elements, size, a.getClass());
	return result;

!!! Every time you use an @SuppressWarnings("unchecked") annotation,
add a comment saying why it’s safe to do so. 

In summary, unchecked warnings are important. Don’t ignore them. Every unchecked warning represents the potential for a ClassCastException at runtime. Do your best to eliminate these warnings. If you can’t eliminate an unchecked warning and you can prove that the code that provoked it is typesafe, suppress the warning with an @SuppressWarnings("unchecked") annotation in the narrowest possible scope. Record the rationale for your decision to suppress the warning in a comment.

******************************************************
*** Item 25: Prefer lists to arrays ***

Arrays differ from generic types in TWO important ways. 
1__ First, ARRAYS ARE COVARIANT. 
[COVARIANT -- changing so that interrelations with another variable quantity or set of quantities remain unchanged]
This scary-sounding word means simply that if Sub is a subtype of Super, then the array type Sub[] is a subtype of Super[]. 

Generics, by contrast, are INVARIANT: [инвариантный; неизменный, постоянный, неизменяющийся]
for any two distinct types Type1 and Type2, List<Type1> is neither a subtype nor a supertype of List<Type2>. 

You might think this means that generics are deficient, but arguably it is arrays that are deficient.

Either way you can’t put a String into a Long container, but with an array you find out that you’ve made a mistake at runtime; with a list, you find out at compile time. Of course you’d rather find out at compile time.

2__ The second major difference between arrays and generics is that ARRAYS ARE REIFIED / материализованный. 
This means that ARRAYS KNOW AND ENFORCE THEIR ELEMENT TYPES AT RUNTIME. 
As noted above, if you try to store a String into an array of Long, you’ll get an ArrayStoreException. 

Generics, by contrast, are implemented by erasure. 
This means that GENERICS ENFORCE THEIR TYPE CONSTRAINTS ONLY AT COMPILE TIME AND DISCARD (OR ERASE) THEIR ELEMENT TYPE INFORMATION AT RUNTIME. Erasure is what allows generic types to interoperate freely with legacy code that does not use generics (Item 23).

Because of these fundamental differences, ARRAYS AND GENERICS DO NOT MIX WELL.
 For example, it is ILLEGAL to create AN ARRAY OF A GENERIC TYPE, a parameterized type, or a type parameter. None of these array creation expressions are legal: new List<E>[], new List<String>[], new E[]. All will result in generic array creation errors at compile time.

Why is it illegal to create a generic array? Because it isn’t typesafe. If it were legal, casts generated by the compiler in an otherwise correct program could fail at runtime with a ClassCastException. This would violate the fundamental guarantee provided by the generic type system.

Types such as E, List<E>, and List<String> are technically known as non-reifiable types.
Intuitively speaking, a NON-REIFIABLE TYPE is one whose RUNTIME REPRESENTATION CONTAINS LESS INFORMATION THAN ITS COMPILE-TIME REPRESENTATION.

The only parameterized types that are REIFIABLE ARE UNBOUNDED WILDCARD TYPES such as List<?> and Map<?,?> (Item 23). It is legal, though infrequently useful, to create arrays of unbounded wildcard types.

Поэтому -- it’s not generally possible for a generic type to return an array of its element type,
It also means that you can get confusing warnings when using varargs methods (Item 42) in combination with generic types. 

the best solution is often to use the collection type List<E> in preference to the array type E[]. You might sacrifice some performance or conciseness, but in exchange you get better type safety and interoperability.

In summary, arrays and generics have very different type rules. 
		Arrays are covariant and reified; 
		generics are invariant and erased. 
As a consequence, arrays provide runtime type safety but not compile-time type safety and vice versa for generics. Generally speaking, arrays and generics don’t mix well. If you find yourself mixing them and getting compile-time errors or warnings, your first impulse should be to replace the arrays with lists.

******************************************************
*** Item 26: Favor generic types

As it stands, you have to cast objects that are popped off the stack, and those casts might fail at runtime. The first step in generifying a class is to add one or more type parameters to its declaration. In this case there is one type parameter, representing the element type of the stack, and the conventional name for this parameter is E (Item 44).
The next step is to replace all the uses of the type Object with the appropriate type parameter, and then try to compile the resulting program

As explained in Item 25, you can’t create an array of a non-reifiable type, such as E. This problem arises every time you write a generic type that is backed by an array. There are two ways to solve it. 

1__ The first solution directly circumvents the prohibition on generic array creation: create an array of Object and cast it to the generic array type. Now in place of an error, the compiler will emit a warning. This usage is legal, but it’s not (in general) typesafe.

		elements = (E[]) new Object[DEFAULT_INITIAL_CAPACITY];

The compiler may not be able to prove that your program is typesafe, but you can. You must convince yourself that the unchecked cast will not compromise the type safety of the program. The array in question (elements) is stored in a private field and never returned to the client or passed to any other method. The only elements stored in the array are those passed to the push method, which are of type E, so the unchecked cast can do no harm.

2__ The second way to eliminate the generic array creation error in Stack is to change the type of the field elements from E[] to Object[]. If you do this, you’ll get a different error..

Because E is a non-reifiable type, there’s no way the compiler can check the cast at runtime. Again, you can easily prove to yourself that the unchecked cast is safe, so it’s appropriate to suppress the warning. In line with the advice of Item 24, we suppress the warning only on the assignment that contains the unchecked cast, not on the entire pop method

		@SuppressWarnings("unchecked")
		E result = (E) elements[--size]; // here !!!
----------------

The foregoing [предшествующий, вышеупомянутый] example may appear to contradict Item 25, which encourages the use of lists in preference to arrays. 
It is not always possible or desirable to use lists inside your generic types. 
Java doesn’t support lists natively, so some generic types, such as ArrayList, must be implemented atop arrays. 
Other generic types, such as HashMap, are implemented atop arrays for performance.
- - - -
The great majority of generic types are like our Stack example in that their TYPE PARAMETERS HAVE NO RESTRICTIONS: 
you can create a Stack<Object>, Stack<int[]>, Stack<List<String>>, or a Stack of any other object reference type. Note that you can’t create a Stack of a primitive type
- - - -
The type parameter list (<E extends Delayed>) requires that the actual type parameter E must be a subtype of java.util.concurrent.Delayed. 
This allows the DelayQueue implementation and its clients to take advantage of Delayed methods on the elements of a DelayQueue, without the need for explicit casting or the risk of a ClassCastException. 
  The type parameter E is known as a bounded type parameter.
     Note that the subtype relation is defined so that EVERY TYPE IS A SUBTYPE OF ITSELF, so it is legal to create a DelayQueue<Delayed>.

In summary, generic types are safer and easier to use than types that require casts in client code. When you design new types, make sure that they can be used without such casts. This will often mean making the types generic. Generify your existing types as time permits. This will make life easier for new users of these types without breaking existing clients (Item 23).

******************************************************
*** Item 27: Favor generic methods

Static utility methods are particularly good candidates for generification. All of the “algorithm” methods in Collections (such as binarySearch and sort) have been generified.

The naming conventions for type parameters are the same for generic methods as for generic types (Items 26, 44):

You can make the method more flexible by using bounded wildcard types (Item 28).

One noteworthy feature of generic methods is that you needn’t specify the value of the type parameter explicitly as you must when invoking generic constructors. The compiler figures out the value of the type parameters by examining the types of the method arguments.

In the case of the program above, the compiler sees that both arguments to union are of type Set<String>, so it knows that the type parameter E must be String. This process is called type inference.

A related pattern is the GENERIC SINGLETON FACTORY. 
On occasion, you will need to create an OBJECT THAT IS IMMUTABLE but APPLICABLE TO MANY DIFFERENT TYPES. 
Because generics are implemented by erasure (Item 25), you can use a single object for all required type parameterizations, but you need to write a static factory method to repeatedly dole out the object for each requested type parameterization. 
This pattern is most frequently used for function objects (Item 21) such as Collections.reverseOrder(), but it is also used for collections such as Collections.emptySet().

	public static final <T> Set<T> emptySet() {
        return (Set<T>) EMPTY_SET;
    }

--- dole out --- (разг.) отслюнявить; неохотно раздавать, оказывать благотворительную помощь.

Suppose you have an interface that describes a function that accepts and returns a value of some type T:

	public interface UnaryFunction<T> {
		T apply(T arg);
	}

Now suppose that you want to provide an identity function. It would be wasteful to create a new one each time it’s required, as it’s stateless. If generics were reified, you would need one identity function per type, but since they’re erased you need only a generic singleton.

The cast of IDENTITY_FUNCTION to (UnaryFunction<T>) generates an unchecked cast warning, as UnaryFunction<Object> is not a UnaryFunction<T> for every T. But the identity function is special: it returns its argument unmodified, so we know that it is typesafe to use it as a UnaryFunction<T> whatever the value of T. Therefore, we can confidently suppress the unchecked cast warning that is generated by this cast. Once we’ve done this, the code compiles without error or warning.

It is permissible, though relatively rare, for a type parameter to be bounded by some expression involving that type parameter itself. This is what’s known as a RECURSIVE TYPE BOUND. !!!
The most common use of recursive type bounds is in connection with the Comparable interface, which defines a type’s natural ordering
	public interface Comparable<T> { 
		int compareTo(T o);
	}

The type parameter T defines the type to which elements of the type implementing Comparable<T> can be compared.
			In practice, nearly all types can be compared 
			only to elements of their own type. 
So, for example, String implements Comparable<String>, Integer implements Comparable<Integer>, and so on.

Надо чтобы объекты были обоюдно сравнимые.
There are many methods that take a list of elements that implement Comparable, in order to sort the list, search within it, calculate its minimum or maximum, and the like. To do any of these things, it is required that every element in the list be comparable to every other element in the list, in other words, that the elements of the list be mutually/обоюдно comparable. Here is how to express that constraint:

	// Using a recursive type bound to express mutual comparability
	public static <T extends Comparable<T>> T max(List<T> list)

Т.е. есть лист объектов, а надо допольнительно задать ограничение, чтобы они были сравнимы между собой. 
А для этого надо, чтобы они имплеменитили Comparable, и это условие задаётся в "главном" определении типа <T extends Comparable<T>>.

The type bound <T extends Comparable<T>> may be read as “for every type T that can be compared to itself,” which corresponds more or less exactly to the notion of mutual comparability.

In summary, generic methods, like generic types, are safer and easier to use than methods that require their clients to cast input parameters and return values. Like types, you should make sure that your new methods can be used without casts, which will often mean making them generic. And like types, you should generify your existing methods to make life easier for new users without breaking existing clients (Item 23).

******************************************************
*** Item 28: Use bounded wildcards to increase API flexibility

 !!  As noted in Item 25, parameterized types are invariant. 
In other words, 
for any two distinct types Type1 and Type2, 
List<Type1> is neither a subtype nor a supertype of List<Type2>.

While it is counterintuitive that List<String> is not a subtype of List<Object>, it really does make sense. 
You can put ANY OBJECT into a List<Object>, 
but you can put only STRINGS into a List<String>.

Поэтому есть BOUNDED WILDCARD TYPE, чтобы в метод передавать генерик коллекцию с другими типами.
   The type of the input parameter to pushAll should not be “Iterable of E” but “Iterable of some subtype of E,” 
// Wildcard type for parameter that serves as an E producer
   pushAll(Iterable<? extends E> src_producer)

!!! (The use of the keyword EXTENDS is slightly misleading: recall from Item 26 that subtype is defined so that every type is a subtype of itself, even though it does not extend itself.)

The type of the input parameter to popAll() should not be “collection of E” but “collection of some supertype of E” 
(where supertype is defined such that E is a supertype of itself).
// Wildcard type for parameter that serves as an E consumer
    popAll(Collection<? super E> dst_consumer)

For maximum flexibility, use wildcard types on input parameters that represent producers or consumers. 
If an input parameter is both a producer and a consumer, then wildcard types will do you NO good: you need an exact type match, which is what you get without any wildcards.

Here is a mnemonic to help you remember which wildcard type to use: !! PECS !!
PECS stands for -->>  producer-extends, consumer-super.

In other words, 
if a parameterized type (аргумент метода) представляет собой
represents a T producer, use <? extends T>; 
if it represents a T consumer, use <? super T>. 

In our Stack example, pushAll’s src parameter produces E instances for use by the Stack, so the appropriate type for src is Iterable<? extends E>; 
popAll’s dst parameter consumes E instances from the Stack, so the appropriate type for dst is Collection<? super E>. 
The PECS mnemonic captures the fundamental principle that guides the use of wildcard types. Naftalin and Wadler call it the Get and Put Principle.

-----------
public static <E> Set<E> union(Set<E> s1, Set<E> s2)

Both parameters, s1 and s2, are E producers, so the PECS mnemonic tells us that the declaration should be:

public static <E> Set<E> union(Set<? extends E> s1, Set<? extends E> s2)

Note that the return type is still Set<E>. 
!!! DO NOT USE wildcard types as RETURN TYPES. 
Rather than providing additional flexibility for your users, it would force them to use wildcard types in client code.

Properly used, wildcard types are nearly invisible to users of a class. They cause methods to accept the parameters they should accept and reject those they should reject. If the user of a class has to think about wildcard types, there is probably something wrong with the class’s API.

If the compiler doesn’t infer the type that you wish it had, you can tell it what type to use with an explicit type parameter. This is not something that you have to do very often, which is a good thing, as explicit type parameters aren’t very pretty. 
...
Set<Number> numbers = UnionPECS.<Number> union(integers, doubles);

-----------
Было:
<T extends Comparable<T>> T max(List<T> list)
стало:
<T extends Comparable<? super T>> T max(List<? extends T> list) 
Потому что:
To get the revised declaration from the original one, we apply the PECS transformation twice. 
    The straightforward application is to the parameter list. It produces T instances, so we change the type from List<T> to List<? extends T>. 
The tricky application is to the type parameter T. 

This is the first time we’ve seen a wildcard applied to a type parameter. T was originally specified to extend Comparable<T>, 
     but a COMPARABLE of T CONSUMES T instances (and produces integers indicating order relations). 
Therefore the parameterized type Comparable<T> is replaced by the bounded wildcard type Comparable<? super T>. 
Comparables are always consumers, so you should always use Comparable<? super T> in preference to Comparable<T>. 
The same is true of comparators, so you should always use Comparator<? super T> in preference to Comparator<T>.

The revised max declaration is probably the most complex method declaration in the entire book. Does the added complexity really buy you anything? Yes, it does. Here is a simple example of a list that would be excluded by the original declaration but is permitted by the revised one:

List<ScheduledFuture<?>> scheduledFutures = ... ;

The reason that you can’t apply the original method declaration to this list is that java.util.concurrent.ScheduledFuture does not implement Comparable<ScheduledFuture>. Instead, it is a subinterface of Delayed, which extends Comparable<Delayed>. In other words, a ScheduledFuture instance isn’t merely comparable to other ScheduledFuture instances; it’s comparable to any Delayed instance, and that’s enough to cause the original declaration to reject it.

----------
Было:
Iterator<T> i = list.iterator();
Стало:
Iterator<? extends T> i = list.iterator();
Потому что:
It means that list is not a List<T>, so its iterator method doesn’t return Iterator<T>. It returns an iterator of <some subtype of T>, so we replace the iterator declaration with this one, which uses a bounded wildcard type.

---------
There is one more wildcard-related topic that bears discussing. There is a duality between TYPE PARAMETERS and WILDCARDS, and many methods can be declared using one or the other. 
For example, here are two possible declarations for a static method to swap two indexed items in a list. The first uses an UNBOUNDED TYPE PARAMETER (Item 27) and the second an UNBOUNDED WILDCARD:

1) public static <E> void swap(List<E> list, int i, int j); 
2) public static void swap(List<?> list, int i, int j);

Which of these two declarations is preferable, and why? 
In a public API, the SECOND IS BETTER because it’s SIMPLER. 
You pass in a list — any list — and the method swaps the indexed elements. There is no type parameter to worry about. 
As a rule, 
1) if a type parameter appears only once in a method declaration, replace it with a wildcard. 
2) If it’s an unbounded type parameter, replace it with an unbounded wildcard; if it’s a bounded type parameter, replace it with a bounded wildcard.

Но есть проблема со 2-м подходом: !!! 
	The problem is that the type of list is List<?>, and you can’t put any value except NULL into a List<?> 
	!!!
И чтобы решить эту фигню надо:
The idea is to write a private helper method to capture the wildcard type. The helper method must be a generic method in order to capture the type.

The swapHelper method knows that list is a List<E>. Therefore, it knows that any value it gets out of this list is of type E, and that it’s safe to put any value of type E into the list.
     This slightly convoluted implementation of swap compiles cleanly. 
It allows us to export the nice wildcard-based declaration of swap, while taking advantage of the more complex generic method internally. Clients of the swap method don’t have to confront the more complex swapHelper declaration, but they do benefit from it.


******************************************************
*** Item 29: Consider typesafe heterogeneous containers
*** Типо-безопасный контейнер для разнородных объектов
heterogeneous - (различный; неоднородный)

The most common use of generics is for collections, such as Set and Map, and single-element containers, such as ThreadLocal and AtomicReference. 
!!! In all of these uses, it is the CONTAINER that IS PARAMETERIZED. 

Но вдруг надо.. a database row can have arbitrarily many columns, and it would be nice to be able to access all of them in a typesafe manner. 
!!! The idea is to PARAMETERIZE THE KEY instead of the container. 
Then present the parameterized key to the container to insert or retrieve a value. 
The generic type system is used to guarantee that the type of the value agrees with its key.

Class was generified in release 1.5. 
The type of a class literal is no longer simply Class, 
but Class<T>. 
For example, String.class is of type Class<String>, and Integer.class is of type Class<Integer>.

!!! When a class literal is passed among methods to communicate both compile-time and runtime type information, it is called a __TYPE TOKEN__ !!!

A Favorites instance is typesafe: 
it will never return an Integer when you ask it for a String. 
It is also heterogeneous: 
unlike an ordinary map, all the keys are of different types.
Therefore, we call Favorites a typesafe heterogeneous container.

___ Map<Class<?>, Object> favorites ___

The thing to notice is that the wildcard type is nested(внутри мапы, т.е. тип не мапы, а тип ключа внути мапы): 
it’s not the type of the Map that’s a wildcard type but the type of its key. 
This means that every key can have a different parameterized type: one can be Class<String>, the next Class<Integer>, and so on. That’s where the heterogeneity comes from.

The next thing to notice is that the value type of the favorites Map is simply Object. In other words, the Map does not guarantee the type relationship between keys and values, which is that every value is of the type represented by its key. In fact, Java’s type system is not powerful enough to express this. But we know that it’s true, and we take advantage of it when it comes time to retrieve a favorite.

The cast method is the dynamic analog of Java’s cast operator. It simply checks that its argument is an instance of the type represented by the Class object. If so, it returns the argument; otherwise it throws a ClassCastException. 
--
There are two limitations to the Favorites class that are worth noting. First, a malicious client could easily corrupt the type safety of a Favori tes instance, simply by using a Class object in its raw form. But the resulting client code would generate an unchecked warning when it was compiled. 
--
There are collection wrappers in java.util.Collections that play the same trick. They are called checkedSet, checkedList, checkedMap, and so forth. Their static factories take a Class object (or two) in addition to a collection (or map). The static factories are generic methods, ensuring that the compile-time types of the Class object and the collection match. The wrappers add reification to the collections they wrap. 
For example, the wrapper throws a ClassCastException at runtime if someone tries to put Coin into your Collection<Stamp>. These wrappers are useful for tracking down who adds an incorrectly typed element to a collection in an application that mixes generic and legacy code.
--
The second limitation of the Favorites class is that it cannot be used on a non-reifiable type (Item 25). In other words, you can store your favorite String or String[], but not your favorite List<String>. If you try to store your favorite List<String>, your program won’t compile. The reason is that you can’t get a Class object for List<String>: List<String>.class is a syntax error, and it’s a good thing, too. List<String> and List<Integer> share a single Class object, which is List.class. It would wreak havoc with the internals of a Favorites object if the “type literals” List<String>.class and List<Integer>.class were legal and returned the same object reference.

--->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

reify [`ri:ıfaı] -- представлять как нечто материальное,
овеществлять, материализовать, превращать в нечто конкретное.
https://docs.oracle.com/javase/tutorial/java/generics/nonReifiableVarargsType.html

_____________ Non-Reifiable Types _____________ 

A reifiable type is a type whose type information is fully available at runtime. This includes primitives, non-generic types, raw types, and invocations of unbound wildcards.

Non-reifiable types are types where information has been removed at compile-time by type erasure — invocations of generic types that are not defined as unbounded wildcards. A non-reifiable type does not have all of its information available at runtime. Examples of non-reifiable types are List<String> and List<Number>; the JVM cannot tell the difference between these types at runtime. As shown in Restrictions on Generics, there are certain situations where non-reifiable types cannot be used: in an instanceof expression, for example, or as an element in an array.
----<<<<<<<<<<<<<<<<<<<<<<<<

There is no entirely satisfactory workaround for the second limitation. There is a technique called super type tokens that goes a long way toward addressing the limitation, but this technique has limitations of its own.

The type tokens used by Favorites are unbounded: getFavorite and putFavorite accept any Class object. Sometimes you may need to limit the types that can be passed to a method. This can be achieved with a BOUNDED TYPE TOKEN, which is simply a type token that places a bound on what type can be represented, using a bounded type parameter (Item 27) or a bounded wildcard (Item 28).

The annotations API (Item 35) makes extensive use of bounded type tokens. For example, here is the method to read an annotation at runtime.....

java.lang.reflect.AnnotatedElement#getAnnotation ->
<T extends Annotation> T getAnnotation(Class<T> annotationClass)

The argument annotationType is a bounded type token representing an annotation type. The method returns the element’s annotation of that type, if it has one, or null, if it doesn’t. In essence, an annotated element is a typesafe heterogeneous container whose keys are annotation types.

Suppose you have an object of type Class<?> and you want to pass it to a method that requires a bounded type token, such as getAnnotation. You could cast the object to Class<? extends Annotations but this cast is unchecked, so it would generate a compile-time warning (Item 24). 
Luckily, class Class provides an instance method that performs this sort of cast safely (and dynamically). The method is called __asSubclass()__ [java.lang.Class#asSubclass(Class<U> clazz)] __, 
and it casts the Class object on which it’s called to represent a subclass of the class represented by its argument. If the cast succeeds, the method returns its argument; if it fails, it throws a ClassCastException.

См пример в effj.ch05.item29.PrintAnnotation

*******
You can also use a custom key type. For example, you could have a DatabaseRow type representing a database row (the container), and a generic type Column<T> as its key.