ch08 General Programming 209-
******************************************************
*** Item 45: Minimize the scope of local variables

 By minimizing the scope of local variables, you increase the readability and maintainability of your code and reduce the likelihood of error.
 !! Java lets you declare variables anywhere a statement is legal.

 The most powerful technique for minimizing the scope of a local variable is to declare it where it is first used.
   If a variable is declared before it is used, it’s just clutter — one more thing to distract the reader who is trying to figure out what the program does. By the time the variable is used, the reader might not remember the variable’s type or initial value.

Обозначишь её раньше - она может оказаться в более широком скоупе. а тогда the consequences can be disastrous.

Nearly every local variable declaration SHOULD CONTAIN AN INITIALIZER. If you don’t yet have enough information to initialize a variable sensibly, you should postpone the declaration until you do.
One exception to this rule concerns try-catch statements. If a variable is initialized by a method that throws a checked exception, it must be initialized inside a try block. If the value must be used outside of the try block, then it must be declared before the try block, where it cannot yet be “sensibly initialized.”
***
Loops present a special opportunity to minimize the scope of variables. 
The for loop, in both its traditional and for-each forms, allows you to declare loop variables, limiting their scope to the exact region where they’re needed. (This region consists of the body of the loop as well as the initialization, test, and update preceding the body.) 
!!! Therefore, PREFER FOR LOOPS TO WHILE LOOPS, assuming the contents of the loop variable aren’t needed after the loop terminates.
		for (Iterator<Element> i = c.iterator(); i.hasNext(); ) {
            doSomething(i.next());
        }

Here is another loop idiom that minimizes the scope of local variables:
        for (int i = 0, n = expensiveComputation(); i < n; i++) { 
            doSomething(i);
        }
The important thing to notice about this idiom is that it has two loop variables, i and n, both of which have exactly the right scope. The second variable, n, is used to store the limit of the first, thus avoiding the cost of a redundant computation on every iteration. As a rule, you should use this idiom if the loop test involves a method invocation that is guaranteed to return the same result on each iteration.

A final technique to minimize the scope of local variables is to keep methods small and focused. 
If you combine two activities in the same method, local variables relevant to one activity may be in the scope of the code performing the other activity.
To prevent this from happening, simply separate the method into two: one for each activity.

******************************************************
*** Item 46: Prefer for-each loops to traditional for loops

Prior to release 1.5, this was the preferred idiom for iterating over a collection:
// No longer the preferred idiom to iterate over a collection!
for (Iterator i = c.iterator(); i.hasNext(); ) {
		doSomething((Element) i.next()); // (No generics before 1.5)
}

This was the preferred idiom for iterating over an array:
// No longer the preferred idiom to iterate over an array!
for (int i = 0; i < a.length; i++) { 
		doSomething(a[i]);
}

These idioms are better than while loops (Item 45), but they aren’t perfect. The iterator and the index variables are both just clutter. Furthermore, they represent opportunities for error. The iterator and the index variable occur three times in each loop, which gives you two chances to get them wrong. If you do, there is no guarantee that the compiler will catch the problem.

Since 1.5 hide the iterator or index variable completely:
// The preferred idiom for iterating over collections and arrays
for (Element e : elements) { doSomething(e); }

When you see the colon (:), read it as “in.” Thus, the loop above reads as “for each element e in elements.” 
Note that there is no performance penalty for using the for-each loop, even for arrays. In fact, it may offer a slight performance advantage over an ordinary for loop in some circumstances, as it computes the limit of the array index only once. While you can do this by hand (Item 45), programmers don’t always do so.
		int[] arr = {1, 2, 3};
        for (int i = 0, n = arr.length; i < n; i++) {
            doSomething(arr[i]);
        }
...
Not only does the for-each loop let you iterate over collections and arrays, it lets you iterate over any object that implements the Iterable interface. This simple interface, which consists of a single method, was added to the platform at the same time as the for-each loop.
				java.lang.Iterable

It is not hard to implement the Iterable interface. If you are writing a type that represents a group of elements, have it implement Iterable even if you choose not to have it implement Collection. This will allow your users to iterate over your type using the for-each loop, and they will be forever grateful.

In summary, the for-each loop provides COMPELLING ADVANTAGES over the traditional for loop in clarity and bug prevention, with no performance penalty. You should use it wherever you can. 
Unfortunately, there are three common situations where you can’t use a for-each loop:
1.    Filtering — If you need to traverse a collection and remove selected elements, then you need to use an explicit iterator so that you can call its remove method.
2.    Transforming — If you need to traverse a list or array and replace some or all of the values of its elements, then you need the LIST ITERATOR or ARRAY INDEX in order to set the value of an element.
3.    Parallel iteration — If you need to traverse multiple collections in parallel (видимо несколько колекций в одном цикле), then you need explicit control over the iterator or index variable, so that all iterators or index variables can be advanced in lockstep (as demonstrated unintentionally in the buggy card and dice examples above).

If you find yourself in any of these situations, use an ordinary for loop, be wary of the traps mentioned in this item, and know that you’re doing the best you can.

******************************************************
*** Item 47: Know and use the libraries

// Common but deeply flawed!
	static int random(int n) {
		return Math.abs(rnd.nextInt()) % n;
	}
This method may look good, but it has three flaws. 
1) The first is that if n is a small power of two, the sequence of random numbers it generates will repeat itself after a fairly short period. 
2) The second flaw is that if n is not a power of two, some numbers will, on average, be returned more frequently than others. If n is large, this effect can be quite pronounced. 
3) The third flaw in the random method is that it can, on rare occasions, fail catastrophically, returning a number outside the specified range. This is so because the method attempts to map the value returned by rnd.nextInt() to a non-negative int by calling Math.abs. If nextInt() returns Integer.MIN_VALUE, Math.abs will also return Integer.MIN_VALUE, and the remainder operator (%) will return a negative number, assuming n is not a power of two. This will almost certainly cause your program to fail, and the failure may be difficult to reproduce.

!!! Поэтому юзай написанную умными людьми ф-ю Random.nextlnt(int)
Приемущества:
1) By using a standard library, you take advantage of the knowledge of the experts who wrote it and the experience of those who used it before you.
2) A second advantage of using the libraries is that you don’t have to waste your time writing ad hoc solutions to problems that are only marginally related to your work.
3) A third advantage of using standard libraries is that their performance tends to improve over time, with no effort on your part.
4) Libraries also tend to gain new functionality over time. If a library is missing something, the developer community will make it known, and the missing functionality may get added to a subsequent release. 
5) A final advantage of using the standard libraries is that you place your code in the mainstream. Such code is more easily readable, maintainable, and reusable by the multitude of developers.

Given all these advantages, it seems only logical to use library facilities in preference to ad hoc implementations, yet a significant fraction of programmers don’t. Why? Perhaps they don’t know the library facilities exist. Numerous features are added to the libraries in every major release, and it pays to keep abreast of these additions.

Смотри хотя бы 
java.util.Collections
java.util.concurrent.*

Occasionally, a library facility can fail to meet your needs. The more specialized your needs, the more likely this is to happen. While your first impulse should be to use the libraries, if you’ve looked at what they have to offer in some area and it doesn’t meet your needs, then use an alternate implementation. There will always be holes in the functionality provided by any finite set of libraries. If the functionality that you need is missing, you may have no choice but to implement it yourself.

To summarize, don’t reinvent the wheel. If you need to do something that seems like it should be reasonably common, there may already be a class in the libraries that does what you want. If there is, use it; if you don’t know, check. 
!!! GENERALLY SPEAKING, LIBRARY CODE IS LIKELY TO BE BETTER THAN CODE THAT YOU’D WRITE YOURSELF AND IS LIKELY TO IMPROVE OVER TIME. 
This is no reflection on your abilities as a programmer. Economies of scale dictate that library code receives far more attention than most developers could afford to devote to the same functionality.

******************************************************
*** Item 48: Avoid float and double if exact answers are required

The float and double types are designed primarily for scientific and engineering calculations. They perform binary floating-point arithmetic, which was carefully designed to furnish accurate approximations quickly over a broad range of magnitudes.
They do not, however, provide exact results and should not be used where exact results are required. 
The float and double types are particularly ill-suited for monetary calculations because it is impossible to represent 0.1 (or any other negative power of ten) as a float or double EXACTLY.

--You might think that the problem could be solved merely by rounding results prior to printing, but unfortunately this does not always work.

The right way to solve this problem is to use BigDecimal, int, or long for monetary calculations.

There are, however, two disadvantages to using BigDecimal: 
1) it’s less convenient than using a primitive arithmetic type, 
2) and it’s slower. 
The latter (Последний) disadvantage is irrelevant if you’re solving a single short problem, 
but the former(первый) may annoy you.

An alternative to using BigDecimal is to use int or long, depending on the amounts involved, and to keep track of the decimal point yourself. In this example, the obvious approach is to do all computation in cents instead of dollars.

in summary, 
1) don’t use float or double for any calculations that require an exact answer. Use BigDecimal if you want the system to keep track of the decimal point and you don’t mind the inconvenience and cost of not using a primitive type. 
2) Using BigDecimal has the added advantage that it gives you full control over rounding, letting you select from eight rounding modes whenever an operation that entails rounding is performed. This comes in handy if you’re performing business calculations with legally mandated rounding behavior. 
3) If performance is of the essence, you don’t mind keeping track of the decimal point yourself, and the quantities aren’t too big, use int or long. 
4) If the quantities don’t exceed nine decimal digits, you can use int; if they don’t exceed eighteen digits, you can use long. If the quantities might exceed eighteen digits, you must use BigDecimal.

******************************************************
какое макс число можно хранить в BigDecimal, BigInteger?
какой макс размер пассива int[]? = Integer.MAX_VALUE = 32bit
почему если <9 значащих цифр - ис-ть int
<18 значащих цифр - ис-ть long ==> потому что в 10й системе счисления Integer.MAX_VALUE = 2 147 483 647 имеет 9 разрядов, в которые можно закодировать все 10чные цифры от 0 до 9
BigInteger и BigDecimal взаимозаменяемы? 
******************************************************
*** Item 49: Prefer primitive types to boxed primitives

Java has a two-part type system, consisting of primitives, such as int, double, and boolean, and reference types, such as String and List. Every primitive type has a corresponding reference type, called a boxed primitive. The boxed primitives corresponding to int, double, and boolean are Integer, Double, and Boolean.

AUTOBOXING  blur but do not erase the distinction between the primitive and boxed primitive types. There are real differences between the two.

There are three major differences between primitives and boxed primitives. 
1) First, primitives have only their values, whereas boxed primitives have identities distinct from their values. In other words, two boxed primitive instances can have the same value and different identities. 
2) Second, primitive types have only fully functional values, whereas each boxed primitive type has one nonfunctional value, which is null, in addition to all of the functional values of its corresponding primitive type. 
3) Last, primitives are generally more time- and space-efficient than boxed primitives. All three of these differences can get you into real trouble if you aren’t careful.

#1/expression first == second, which performs an identity comparison on the two object references. 
!!! Applying the '==' operator to boxed primitives is almost always wrong.

#2/It throws a NullPointerException when evaluating the expression (i == 42).

!!! when you mix primitives and boxed primitives in a single operation, the boxed primitive is auto-unboxed, and this case is no exception. If a null object reference is auto-unboxed, you get a NullPointerException. 

The program compiles without error or warning, and the variable is repeatedly boxed and unboxed, causing the observed performance degradation:

So when should you use boxed primitives? They have several legitimate uses. 
1) The first is as elements, keys, and values in collections. 
You can’t put primitives in collections, so you’re forced to use boxed primitives. This is a special case of a more general one. 
2) You must use boxed primitives as type parameters in parameterized types, because the language does not permit you to use primitives.
3) Finally, you must use boxed primitives when making reflective method invocations (Item 53).

In summary, 
!!! USE PRIMITIVES IN PREFERENCE TO BOXED PRIMITIVES WHENEVER YOU HAVE THE CHOICE. 
Primitive types are simpler and faster. 
If you must use boxed primitives, be carefull !
Autoboxing reduces the verbosity(многословность), but not the danger, of using boxed primitives. 
When your program compares two boxed primitives with the == operator, it does an IDENTITY COMPARISON, which is almost certainly not what you want. 
When your program does mixed-type computations involving boxed and unboxed primitives, it does unboxing, and when your program does unboxing, it can throw a NullPointerException. 
Finally, when your program boxes primitive values, it can result in costly and unnecessary object creations.

******************************************************
*** Item 50: Avoid strings where other types are more appropriate

Strings are poor substitutes for other value types. 

If it’s numeric, it should be translated into the appropriate numeric type, such as int, float, or BigInteger. If it’s the answer to a yes-or-no question, it should be translated into a boolean. More generally, if there’s an appropriate value type, whether primitive or object reference, you should use it; if there isn’t, you should write one. While this advice may seem obvious, it is often violated.

1) Strings are poor substitutes for enum types.

2) Strings are poor substitutes for aggregate types. 
If an entity has multiple components, it is usually a bad idea to represent it as a single string:
			String compoundKey = className + "#" + i.next();
This approach has many disadvantages. 
-If the character used to separate fields occurs in one of the fields, chaos may result. 
-To access individual fields, you have to parse the string, which is slow, tedious, and error-prone. 
-You can’t provide equals, toString, or compareTo methods but are forced to accept the behavior that String provides. A better approach is simply to write a class to represent the aggregate, often a private static member class (Item 22).

3) Strings are poor substitutes for capabilities. 
Occasionally, strings are used to grant access to some functionality. For example, consider the design of a thread-local variable facility. Such a facility provides variables for which each thread has its own value. The Java libraries have had a thread-local variable facility since release 1.2

You don’t really need the static methods anymore. They can instead become instance methods on the key, at which point the key is no longer a key for a thread-local variable: it is a thread-local variable. At this point, the noninstantiable top-level class isn’t doing anything for you anymore, so you might as well get rid of it and rename the nested class to ThreadLocal:
This is, roughly speaking, the API that java.lang.ThreadLocal provides. In addition to solving the problems with the string-based API, it is faster and more elegant than either of the key-based APIs.

To summarize, avoid the natural tendency to represent objects as strings when better data types exist or can be written. Used inappropriately, strings are more cumbersome, less flexible, slower, and more error-prone than other types. 
Types for which strings are commonly misused include primitive types, enums, and aggregate types.

******************************************************
*** Item 51: Beware the performance of string concatenation

The string concatenation operator (+) is a convenient way to combine a few strings into one. It is fine for generating a single line of output or for constructing the string representation of a small, fixed-size object, 
!!!!  but IT DOES NOT SCALE. 
Using the string concatenation operator repeatedly to concatenate N strings requires time QUADRATIC in N (	O(n^2) ). It is an unfortunate consequence of the fact that strings are immutable (Item 15). 
When two strings are concatenated, the contents of both are copied.

 Because the first method is quadratic in the number of items and the second is linear, the performance difference is even more dramatic for larger numbers of items. Note that the second method preallocates a StringBuilder large enough to hold the result. Even if it is detuned to use a default-sized StringBuilder, it is still fifty times faster.

The moral is simple: don’t use the string concatenation operator to combine more than a few strings unless performance is irrelevant. Use StringBuilder’s append method instead. Alternatively, use a character array, or process the strings one at a time instead of combining them.

******************************************************
*** Item 52: Refer to objects by their interfaces

You should favor the use of interfaces rather than classes to refer to objects. 
If appropriate interface types exist, then parameters, return values, variables, and fields should all be declared using interface types. 
The only time you really need to refer to an object’s class is when you’re creating it with a constructor. 

If you get into the habit of using interfaces as types, your program will be much more flexible. If you decide that you want to switch implementations, all you have to do is change the class name in the constructor (or use a different static factory).
and all of the surrounding code would continue to work. The surrounding code was unaware of the old implementation type, so it would be oblivious to the change.

There is one caveat: if the original implementation offered some special functionality not required by the general contract of the interface and the code depended on that functionality, then it is critical that the new implementation provide the same functionality. 
For example, if the code surrounding the first declaration depended on Vector’s synchronization policy, then it would be incorrect to substitute ArrayList for Vector in the declaration. If you depend on any special properties of an implementation, document these requirements where you declare the variable.

Declaring the field with the interface type “keeps you honest.”

It is entirely appropriate to refer to an object by a class rather than an interface if no appropriate interface exists. (such as String and BigInteger)

More generally, if a concrete class has no associated interface, then you have no choice but to refer to it by its class whether or not it represents a value. (The Random class)

A second case in which there is no appropriate interface type is that of objects belonging to A FRAMEWORK WHOSE FUNDAMENTAL TYPES ARE CLASSES RATHER THAN INTERFACES. If an object belongs to such a class-based framework, it is preferable to refer to it by the relevant base class, which is typically abstract, rather than by its implementation class. The java.util.TimerTask class falls into this category.

A final case in which there is no appropriate interface type is that of classes that implement an interface but provide extra methods not found in the interface — for example, LinkedHashMap. Such a class should be used to refer to its instances only if the program relies on the extra methods. It should rarely be used as a parameter type (Item 40).

These cases are not meant to be exhaustive but merely to convey the flavor of situations where it is appropriate to refer to an object by its class. 
In practice, it should be apparent whether a given object has an appropriate interface. If it does, your program will be more flexible if you use the interface to refer to the object; if not, just use the least specific class in the class hierarchy that provides the required functionality.

******************************************************
*** Item 53: Prefer interfaces to reflection