11 Serialization 289-315
*************************************************************
*** 
OBJECT SERIALIZATION API provides a framework for encoding objects as byte streams and reconstructing objects from their byte-stream encodings. 
ENCODING an object as a byte stream is known as SERIALIZING the object; 
the reverse process is known as DESERIALIZING it.

Once an object has been serialized, its encoding can be transmitted from one running virtual machine to another or stored on disk for later deserialization. 

Serialization provides the standard wire-level object representation for remote communication, and the standard persistent data format for the JavaBeans component architecture. 

A notable feature of this chapter is the serialization proxy pattern (Item 78), which can help you avoid many of the pitfalls of object serialization.

***************************************************************
*** Item 74: Implement Serializable judiciously

По началу всё очень просто: добавить  “implements Serializable” to its declaration.
 the long-term costs are often substantial ( существенный, значительный, важный).

A major cost of implementing Serializable is that it decreases the flexibility to change a class’s implementation once it has been released. 
When a class implements Serializable, ITS BYTE-STREAM ENCODING (or serialized form) BECOMES PART OF ITS EXPORTED API. 
Once you distribute a class widely, you are generally required to support the serialized form forever, just as you are required to support all other parts of the exported API. 
If you DO NOT make the effort to design a CUSTOM SERIALIZED FORM, but merely accept the default, the serialized form will forever be tied to the class’s original internal representation. In other words, if you accept the DEFAULT SERIALIZED FORM, the class’s private and package-private instance fields become part of its exported API, and the practice of minimizing access to fields (Item 13) loses its effectiveness as a tool for information hiding.

Therefore, you should carefully design a high-quality serialized form that you are willing to live with for the long haul (долгий путь)(Items 75, 78).

!! STREAM UNIQUE IDENTIFIERS, more commonly known as SERIAL VERSION UIDs.

Что в итоге влияет на сериализцию:

1) Every serializable class has a unique identification number associated with it. If you do not specify this number explicitly by declaring a static final long field named serialVersionUID, the system automatically generates it at runtime by applying a complex procedure to the class. The automatically generated value is affected by the class’s name, the names of the interfaces it implements, and all of its public and protected members. If you change any of these things in any way, for example, by adding a trivial convenience method, the automatically generated serial version UID changes. If you fail to declare an explicit serial version UID, compatibility will be broken, resulting in an InvalidClassException at runtime.

2) A second cost of implementing Serializable is that it increases the likelihood of bugs and security holes. Normally, objects are created using constructors; serialization is an extralinguistic mechanism for creating objects. Whether you accept the default behavior or override it, deserialization is a “hidden constructor” with all of the same issues as other constructors. 
Because there is no explicit constructor associated with deserialization, it is easy to forget that you must ensure that it guarantees all of the invariants established by the constructors and that it does not allow an attacker to gain access to the internals of the object under construction. 
Relying on the default deserialization mechanism can easily leave objects open to invariant corruption and illegal access (Item 76).

3) A third cost of implementing Serializable is that it increases the testing burden associated with releasing a new version of a class. When a serializable class is revised, it is important to check that it is possible to serialize an instance in the new release and deserialize it in old releases, and vice versa. 
   The amount of testing required is thus proportional to the product of the number of serializable classes and the number of releases, which can be large. These tests cannot be constructed automatically because, IN ADDITION TO BINARY COMPATIBILITY, YOU MUST TEST FOR SEMANTIC COMPATIBILITY.
In other words, you must ensure both that the serialization-deserialization process succeeds and that it results in a faithful replica of the original object. The greater the change to a serializable class, the greater the need for testing. The need is reduced if a custom serialized form is carefully designed when the class is first written (Items 75, 78), but it does not vanish entirely.

__________Зачем вообще ис-ть сериализацию:__________
Implementing the Serializable interface is not a decision to be undertaken lightly. 
IT OFFERS REAL BENEFITS: it is essential if a class is to participate in a framework that relies on serialization for object transmission or persistence. 
Also, it greatly eases the use of a class as a component in another class that must implement Serializable. 
There are, however, many real costs associated with implementing Serializable. Each time you design a class, WEIGH THE COSTS AGAINST THE BENEFITS. 
As a rule of thumb, value classes such as Date and BigInteger should implement Serializable, as should most collection classes. Classes representing active entities, such as thread pools, should rarely implement Serializable.

Classes designed for inheritance (Item 17) should rarely implement Serializable, and interfaces should rarely extend it. 
Violating this rule places a significant burden on anyone who extends the class or implements the interface. There are times when it is appropriate to violate the rule.

___ см примеры исключений из правила: ______________
Classes designed for inheritance that do implement Serializable include Throwable, Component, and HttpServlet. Throwable implements Serializable so exceptions from remote method invocation (RMI) can be passed from server to client. Component implements Serializable so GUIs can be sent, saved, and restored. HttpServlet implements Serializable so session state can be cached.

If you implement a class with instance fields that is serializable and extendable, there is a caution you should be aware of. 
IF THE CLASS HAS INVARIANTS THAT WOULD BE VIOLATED IF ITS INSTANCE FIELDS WERE INITIALIZED TO THEIR DEFAULT VALUES (zero for integral types, false for boolean, and null for object reference types), YOU MUST ADD THIS ___readObjectNoData()___ method to the class:

не понятно, надо погуглить что на самом деле делает этот метод?
// readObjectNoData for stateful extendable serializable classes
private void readObjectNoData() throws InvalidObjectException {
	throw new InvalidObjectException("Stream data required");
}

the readObjectNoData method was added in release 1.4 to cover a corner case involving the addition of a serializable superclass to an existing serializable class. Details can be found in the serialization specification [Serialization, 3.5].

There is one caveat regarding the decision not to implement Serializable. 
IF A CLASS THAT IS DESIGNED FOR INHERITANCE IS NOT SERIALIZABLE CONSIDER PROVIDING A PARAMETERLESS CONSTRUCTOR ON NONSERIALIZABLE CLASSES DESIGNED FOR INHERITANCE.

!!! It is best to create objects with their invariants already established (Item 15).

All public and protected instance methods in AbstractFoo must invoke checkInit before doing anything else. This ensures that method invocations fail quickly and cleanly if a poorly written subclass fails to initialize an instance. Note that the initialized field is an atomic reference ( java.util.concurrent.atomic.AtomicReference ). 
This is necessary to ensure object integrity in the face of a determined adversary. In the absence of this precaution, if one thread were to invoke ___initialize()___ on an instance while a second thread attempted to use it, the second thread might see the instance in an inconsistent state. 
поэтому надо спецом задизайнить инициализацию класса в readObject, с учётом всех нюансов.

INNER CLASSES (ITEM 22) SHOULD NOT IMPLEMENT SERIALIZABLE. 
They use compiler-generated synthetic fields to store references to enclosing instances and to store values of local variables from enclosing scopes. How these fields correspond to the class definition is unspecified, as are the names of anonymous and local classes. Therefore, the default serialized form of an inner class is ill-defined. A static member class can, however, implement Serializable.

To summarize, the ease of implementing Serializable is specious. Unless a class is to be thrown away after a short period of use, implementing Serializable is a serious commitment that should be made with care. Extra caution is warranted if a class is designed for inheritance. For such classes, an intermediate design point between implementing Serializable and prohibiting it in subclasses is to provide an accessible parameterless constructor. This design point permits, but does not require, subclasses to implement Serializable.

*************************************************************
*** Item 75: Consider using a custom serialized form

Sometimes this means releasing a “THROWAWAY” implementation that you know you’ll replace in a future release. 

!!! Do not accept the DEFAULT SERIALIZED FORM without first considering whether it is appropriate. 
Accepting the default serialized form should be a conscious decision that this encoding is reasonable from the standpoint of flexibility, performance, and correctness. Generally speaking, you should accept the DEFAULT SERIALIZED FORM only if it is largely identical to the encoding that you would choose if you were designing a CUSTOM SERIALIZED FORM.

The DEFAULT SERIALIZED FORM of an object is a REASONABLY EFFICIENT ENCODING of the physical representation OF THE OBJECT GRAPH ROOTED AT THE OBJECT. 
In other words, IT DESCRIBES THE DATA CONTAINED IN THE OBJECT AND IN EVERY OBJECT THAT IS REACHABLE FROM THIS OBJECT. 
It also DESCRIBES THE TOPOLOGY by which all of these objects are interlinked. 

!!! The IDEAL SERIALIZED FORM of an object contains only the LOGICAL DATA REPRESENTED by the object. It is INDEPENDENT of the PHYSICAL REPRESENTATION.

Logically speaking, a name consists of three strings that represent a last name, a first name, and a middle name. The instance fields in Name precisely mirror this logical content.
Even if you decide that the default serialized form is appropriate, you often must provide a ___readObject()___ method TO ENSURE INVARIANTS AND SECURITY. In the case of Name, the readObject method must ensure that lastName and first-Name are non-null. 

Note that there are documentation comments on the lastName, firstName, and middleName fields, even though they are private. That is because these private fields define a public API, which is the serialized form of the class, and this public API must be documented. The presence of the @serial tag tells the Javadoc utility to place this documentation on a special page that documents serialized forms.

-----------
Using the DEFAULT SERIALIZED FORM when an object’s physical representation differs substantially from its logical data content has four disadvantages:

•    IT PERMANENTLY TIES THE EXPORTED API TO THE CURRENT INTERNAL REPRESENTATION. 
  In the above example, the private Stri ngList.Entry class becomes part of the public API. If the representation is changed in a future release, the StringList class will still need to accept the linked list representation on input and generate it on output. The class will never be rid of all the code dealing with linked list entries, even if it doesn’t use them anymore.

•    IT CAN CONSUME EXCESSIVE SPACE.
  In the above example, the serialized form unnecessarily represents each entry in the linked list and all the links. These entries and links are mere implementation details, not worthy of inclusion in the serialized form. Because the serialized form is excessively large, writing it to disk or sending it across the network will be excessively slow.

•    IT CAN CONSUME EXCESSIVE TIME. 
  The serialization logic has no knowledge of the topology of the object graph, so it must go through an expensive graph traversal. In the example above, it would be sufficient simply to follow the next references.

•    IT CAN CAUSE STACK OVERFLOWS. 
  The procedure performs a RECURSIVE TRAVERSAL OF THE OBJECT GRAPH, which can cause stack overflows even for moderately sized object graphs.
  Serializing a StringList instance with 1,258 elements causes the stack to overflow on my machine. The number of elements required to cause this problem may vary depending on the JVM implementation and command line flags; some implementations may not have this problem at all.

A reasonable serialized form for StringList is simply the number of strings in the list, followed by the strings themselves

!!! the TRANSIENT modifier indicates that an INSTANCE FIELD IS TO BE OMITTED FROM A CLASS’S DEFAULT SERIALIZED FORM

Note that the first thing writeObject() does is to invoke defaultWriteObject(), and the first thing readObject() does is to invoke defaultReadObject(), even though all of StringList’s fields are transient. 
If all instance fields are transient, it is technically permissible to dispense with invoking defaultWriteObject() and defaultReadObject(), but it is not recommended. Even if all instance fields are transient, invoking defaultWriteObject affects the serialized form, resulting in GREATLY ENHANCED FLEXIBILITY. 

The resulting serialized form makes it possible to add NONTRANSIENT INSTANCE FIELDS in a later release WHILE PRESERVING BACKWARD AND FORWARD COMPATIBILITY. If an instance is serialized in a later version and deserialized in an earlier version, the added fields will be ignored. 
Had the earlier version’s readObject() method failed to invoke defaultReadObject(), the deserialization would fail with a StreamCorruptedException.

Note that there is a documentation comment on the writeObject() method, even though it is private. This is analogous to the documentation comment on the private fields in the Name class. This private method defines a public API, which is the serialized form, and that public API should be documented. Like the @serial tag for fields, the @serialData tag for methods tells the Javadoc utility to place this documentation on the serialized forms page.

!!! DEFAULT SERIALIZED FORM не подойдёт для объектов, чьи invariants are tied to implementation-specific details.

For example, consider the case of a hash table. The physical representation is a sequence of hash buckets containing key-value entries. The bucket that an entry resides in is a function of the hash code of its key, which is not, in general, guaranteed to be the same from JVM implementation to JVM implementation. In fact, it isn’t even guaranteed to be the same from run to run. Therefore, accepting the default serialized form for a hash table would constitute a serious bug.

Whether or not you use the default serialized form, every instance field that is not labeled transient will be serialized when the defaultWriteObject() method is invoked. 
Therefore, every instance field that can be made transient should be made so. This includes redundant fields, whose values can be computed from “primary data fields,” such as a cached hash value.
It also includes fields whose values are tied to one particular run of the JVM, such as a long field representing a pointer to a native data structure. Before deciding to make a field nontransient, convince yourself that its value is part of the logical state of the object. If you use a custom serialized form, most or all of the instance fields should be labeled transient, as in the StringList example shown above.

If you are using the default serialized form and you have labeled one or more fields transient, remember that these fields will be initialized to their default values when an instance is deserialized: null for object reference fields, zero for numeric primitive fields, and false for boolean fields. 
If these values are unacceptable for any transient fields, you must provide a readObject() method that invokes the defaultReadObject() method and then restores transient fields to acceptable values (Item 76). Alternatively, these fields can be lazily initialized the first time they are used (Item 71).

Whether or not you use the default serialized form, you must impose any synchronization on object serialization that you would impose on any other method that reads the entire state of the object. 
So, for example, if you have a thread-safe object (Item 70) that achieves its thread safety by synchronizing every method, and you elect to use the default serialized form, use the following writeObject() method:

// writeObject for synchronized class with default serialized form
private synchronizedvoid writeObject(ObjectOutputStream s)
	throws IOException {
		s.defaultWriteObject();
	}

If you put synchronization in the writeObject() method, you must ensure that it adheres to the same lock-ordering constraints as other activity, or you risk a resource-ordering deadlock.

Regardless of what serialized form you choose, declare an explicit serial version UID in every serializable class you write. This eliminates the serial version UID as a POTENTIAL SOURCE OF INCOMPATIBILITY (Item 74). 
There is also a small performance benefit. If no serial version UID is provided, an expensive computation is required to generate one at runtime.

If you write a new class, it doesn’t matter what value you choose for randomLongValue. You can generate the value by running the serialver utility on the class, but it’s also fine to pick a number out of thin air. If you modify an existing class that lacks a serial version UID, and you want the new version to accept existing serialized instances, you must use the value that was automatically generated for the old version. You can get this number by running the "SERIALVER" UTILITY on the old version of the class—the one for which serialized instances exist.

If you ever want to make a new version of a class that is incompatible with existing versions, merely change the value in the serial version UID declaration. This will cause attempts to deserialize serialized instances of previous versions to fail with an InvalidClassException.

To summarize, when you have decided that a class should be serializable (Item 74), think hard about what the serialized form should be. Use the default serialized form only if it is a reasonable description of the logical state of the object; otherwise design a custom serialized form that aptly describes the object. 
You should allocate as much time to designing the serialized form of a class as you allocate to designing its exported methods (Item 40). Just as you cannot eliminate exported methods from future versions, you cannot eliminate fields from the serialized form; they must be preserved forever to ensure serialization compatibility. 
Choosing the wrong serialized form can have a permanent, negative impact on the complexity and performance of a class.

*************************************************************
*** Item 76: Write ___readObject()___ methods defensively

Suppose you decide that you want this class to be serializable. 
Because the physical representation of a Period object exactly mirrors its logical data content, it is not unreasonable to use the default serialized form (Item 75).
Therefore, it might seem that all you have to do to make the class serializable is to add the words “implements Serializable” to the class declaration. If you did so, however, the class would no longer guarantee its critical invariants.

The problem is that the readObject() method is effectively another public constructor, and it demands all of the same care as any other constructor. 
1) Just as a constructor must check its arguments for validity (Item 38) and make defensive copies of parameters where appropriate (Item 39), so must a readObject() method. If a readObject method fails to do either of these things, it is a relatively simple matter for an attacker to violate the class’s invariants.
!!! Короче, надо в readObj() также как и в конструкторе проверять инварианты.

While this fix prevents an attacker from creating an invalid Period instance, there is a more subtle problem still lurking. 
It is possible to create a mutable Period instance by fabricating a byte stream that begins with a valid Period instance and then appends extra references to the private Date fields internal to the Period instance. The attacker reads the Period instance from the ObjectInputStream and then reads the “ROGUE OBJECT REFERENCES” that were appended to the stream. These references give the attacker access to the objects referenced by the private Date fields within the Period object. By mutating these Date instances, the attacker can mutate the Period instance.
_________ СМ effj.ch11.item76.MutablePeriod _________

While the Period instance is created with its invariants intact, it is possible to modify its internal components at will. Once in possession of a mutable Period instance, an attacker might cause great harm by passing the instance on to a class that depends on Period’s immutability for its security. 
This is not so far-fetched: there are classes that depend on String’s immutability for their security.

The source of the problem is that Period’s readObject method is not doing enough defensive copying. When an object is deserialized, it is critical to defensively copy any field containing an object reference that a client must not possess. Therefore, every serializable immutable class containing private mutable components must defensively copy these components in its readObject method.

Note that the defensive copy is performed prior to the validity check and that we did not use Date’s clone method to perform the defensive copy. Both of these details are required to protect Period against attack (Item 39). Note also that defensive copying is not possible for final fields. To use the readObject method, we must make the start and end fields nonfinal. This is unfortunate, but it is the lesser of two evils.

In release 1.4, the writeUnshared() and readUnshared() methods were added to ObjectOutputStream with the goal of thwarting rogue object reference attacks without the cost of defensive copying [Serialization]. Unfortunately, these methods are vulnerable to sophisticated attacks similar in nature to the Elvi sStealer attack described in Item 77. Do not use the writeUnshared() and readUnshared() methods. They are typically faster than defensive copying, but they don’t provide the necessary safety guarantee.

Here is a simple litmus test for deciding whether the default readObject() method is acceptable for a class: 
    -- would you feel comfortable adding a public constructor that took as parameters the values for each nontransient field in the object and stored the values in the fields with no validation whatsoever?
If not, you must provide a readObject() method, and it must perform all the validity checking and defensive copying that would be required of a constructor. 
Alternatively, you can use the SERIALIZATION PROXY PATTERN (Item 78).

There is one other similarity between readObject() methods and constructors, concerning nonfinal serializable classes. 
A readObject() method MUST NOT INVOKE AN OVERRIDABLE METHOD, DIRECTLY OR INDIRECTLY (Item 17). If this rule is violated and the method is overridden, the overriding method will run before the subclass’s state has been deserialized.
A program failure is likely to result.

To summarize, anytime you write a readObject() method, adopt the mind-set that you are writing a PUBLIC CONSTRUCTOR that must produce a valid instance regardless of what byte stream it is given. 
Do not assume that the byte stream represents an actual serialized instance. While the examples in this item concern a class that uses the default serialized form, all of the issues that were raised apply equally to classes with custom serialized forms. 

Here, in summary form, are the guidelines for writing a bulletproof readObject method:
1) For classes with object reference fields that must remain private, defensively copy each object in such a field. Mutable components of immutable classes fall into this category.
2) Check any invariants and throw an InvalidObjectException() if a check fails. The checks should follow any defensive copying.
3) If an entire object graph must be validated after it is deserialized, use the ObjectInputValidation interface.
4) Do not invoke any overridable methods in the class, directly or indirectly.

*************************************************************
*** Item 77: For instance control, prefer enum types to readResolve()

Item 3 describes the Singleton pattern and gives the following example of a singleton class. This class restricts access to its constructor to ensure that only a single instance is ever created,
this class would no longer be a singleton if the words “implements Serializable” were added to its declaration. It doesn’t matter whether the class uses the default serialized form or a custom serialized form (Item 75), nor does it matter whether the class provides an explicit readObject method (Item 76). Any readObject method, whether explicit or default, returns a newly created instance, which will not be the same instance that was created at class initialization time.

The ___readResolve()___ feature allows you to substitute another instance for the one created by readObject. If the class of an object being deserialized defines a readResolve method with the proper declaration, this method is invoked on the newly created object after it is deserialized. 
The object reference returned by this method is then returned in place of the newly created object. In most uses of this feature, no reference to the newly created object is retained, so it immediately becomes eligible for garbage collection

This method ignores the deserialized object, returning the distinguished Elvis instance that was created when the class was initialized. Therefore, the serialized form of an Elvis instance need not contain any real data; all instance fields should be declared transient. 
!! In fact, if you depend on readResolve() for instance control, ALL INSTANCE FIELDS WITH OBJECT REFERENCE TYPES MUST BE DECLARED TRANSIENT.
   Otherwise, it is possible for a determined attacker to secure a reference to the deserialized object before its readResolve method is run, using a technique that is vaguely similar to the MutablePeriod attack in Item 76

You could fix the problem by declaring the favorites field transient, but you’re better off fixing it by making Elvis a single-element enum type (Item 3). Historically, the readResolve method was used for all serializable instance-controlled classes. As of release 1.5, this is no longer the best way to maintain instance control in a serializable class. As demonstrated by the ElvisStealer attack, this technique is fragile and demands great care.

If instead you write your serializable instance-controlled class as an enum, you get an ironclad guarantee that there can be no instances besides the declared constants. The JVM makes this guarantee, and you can depend on it. It requires no special care on your part.

!! 1) The use of readResolve() for instance control is not obsolete. If you have to write a serializable instance-controlled class whose instances are not known at compile time, you will not be able to represent the class as an enum type.
!!! 2) The accessibility of readResolve is significant. 
If you place a readResolve() method on a final class, it should be private.
If you place a readResolve method on a nonfinal class, you must carefully consider its accessibility. 
If it is private, it will not apply to any subclasses. 
If it is package-private, it will apply only to subclasses in the same package. 
If it is protected or public, it will apply to all subclasses that do not override it.
If a readResolve method is protected or public and a subclass does not override it, deserializing a serialized subclass instance will produce a superclass instance, which is likely to cause a ClassCastException.

To summarize, you should use enum types to enforce INSTANCE CONTROL INVARIANTS wherever possible. 
If this is not possible and you need a class to be both serializable and instance-controlled, you must provide a readResolve() method and ensure that all of the class’s instance fields are either primitive or transient.

*************************************************************
*** Item 78: Consider serialization proxies instead of serialized instances

As mentioned in Item 74 and discussed throughout this chapter, the decision to implement Serializable increases the likelihood of bugs and security problems, because it causes instances to be created using an EXTRALINGUISTIC MECHANISM in place of ordinary constructors. There is, however, a technique that greatly reduces these risks. This technique is known as the serialization proxy pattern.

The serialization proxy pattern is reasonably straightforward. 
First, design a PRIVATE STATIC NESTED CLASS of the serializable class that concisely represents the LOGICAL STATE of an instance of the enclosing class. 
1) This nested class, known as the serialization proxy, should have a single constructor, whose parameter type is the enclosing class. 
2) This constructor merely copies the data from its argument: it need not do any consistency checking or defensive copying. 
3) By design, the DEFAULT SERIALIZED FORM of the serialization proxy is the PERFECT SERIALIZED FORM of the ENCLOSING CLASS. 
4) Both the enclosing class and its serialization proxy must be declared to implement Serializable.

5)Next, add the following writeReplace() method to the enclosing class. This method can be copied verbatim into any class with a serialization proxy:

The presence of this method causes the serialization system to emit a SerializationProxy instance instead of an instance of the enclosing class. 
In other words, the __writeReplace()__ method translates an instance of the enclosing class to its serialization proxy prior to serialization.

With this writeReplace method in place, the serialization system will never generate a serialized instance of the enclosing class, but an attacker might fabricate one in an attempt to violate the class’s invariants. To guarantee that such an attack would fail, merely add this readObject() method to the enclosing class

Finally, provide a readResolve() method on the SerializationProxy class that returns a logically equivalent instance of the enclosing class. The presence of this method causes the serialization system to translate the serialization proxy back into an instance of the enclosing class upon deserialization.

This readResolve method creates an instance of the enclosing class using only its public API, and therein lies the beauty of the pattern. It largely eliminates the extralinguistic character of serialization, because the deserialized instance is created using the same constructors, static factories, and methods as any other instance. This frees you from having to separately ensure that deserialized instances obey the class’s invariants. If the class’s static factories or constructors establish these invariants, and its instance methods maintain them, you’ve ensured that the invariants will be maintained by serialization as well.

Like the defensive copying approach (page 306), the serialization proxy approach stops the bogus byte-stream attack (page 303) and the internal field theft attack (page 305) dead in their tracks. Unlike the two previous approaches, this one allows the fields of Period to be final, which is required in order for the Period class to be truly immutable (Item 15). And unlike the two previous approaches, this one doesn’t involve a great deal of thought. You don’t have to figure out which fields might be compromised by devious serialization attacks, nor do you have to explicitly perform validity checking as part of deserialization.

There is another way in which the serialization proxy pattern is more powerful than defensive copying. The serialization proxy pattern allows the deserialized instance to have a different class from the originally serialized instance. You might not think that this would be useful in practice, but it is.

The serialization proxy pattern has two limitations. 
1) It is NOT COMPATIBLE with classes that are extendable by their clients (Item 17). 2) Also, it is not compatible with some classes whose object graphs contain circularities: if you attempt to invoke a method on an object from within its serialization proxy’s readResolve() method, you’ll get a ClassCastException, as you don’t have the object yet, only its serialization proxy.

Finally, the added power and safety of the serialization proxy pattern are not free. On my machine, it is 14 percent more expensive to serialize and deserialize Peri od instances with serialization proxies than it is with defensive copying.

In summary, consider the serialization proxy pattern whenever you find yourself having to write a readObject or writeObject method on a class that is not extendable by its clients. This pattern is perhaps the easiest way to robustly serialize objects with nontrivial invariants.