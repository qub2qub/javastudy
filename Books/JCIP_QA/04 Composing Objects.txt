Компоновка объектов

Как можно понять по простому признаку, что класс будет thread-safe или не будет?
While it is possible to write a thread-safe program that stores all its state in public static fields, it is a lot harder to verify its thread safety or to modify it so that it remains thread-safe than one that uses encapsulation appropriately.
Encapsulation makes it possible to determine that a class is thread-safe without having to examine the entire program.

Чтобы задизайнить thread-safe класс, надо:
The design process for a thread-safe class should include these three basic elements:
•1• Identify the variables that form the object’s state;
•2• Identify the invariants that constrain the state variables;
•3• Establish a policy for managing concurrent access to the object’s state.

Состояние объекта начинается с его полей.
Если все поля примитивы (т.е. содержат только простое значение) -- то эти поля и определяют состояние такого объекта.
А если же поля являются ссылками на другие объекты -- то состояние объекта будет включать в себя также и поля из этих связанных объектов.
For example, the state of a LinkedList includes the state of all the link node objects belonging to the list.

The SYNCHRONIZATION POLICY defines how an object coordinates access to its state without violating its invariants or postconditions. 
It specifies what combination of immutability, thread confinement, and locking is used to maintain thread safety, and which variables are guarded by which locks. To ensure that the class can be analyzed and maintained, document the synchronization policy.

Related variables must be fetched or updated in a single atomic operation. You cannot update one, release and reacquire the lock, and then update the others, since this could involve leaving the object in an invalid state when the lock was released. 

Что значит сделать класс thread-safe ?
Making a class thread-safe means ensuring that its invariants hold under concurrent access; this requires reasoning about its state.

Что такое пространство состояния [state space]?
Objects and variables have a STATE SPACE: the range(область значений, диапазон) of possible states they can take on. The smaller this state space, the easier it is to reason about.
Many classes have invariants that identify certain states as valid or invalid. 
Например,
The value field in Counter is a long. The state space of a long ranges from Long.MIN_VALUE to Long.MAX_VALUE, but Counter places constraints on value; negative values are not allowed.
Similarly, operations may have postconditions that identify certain state transitions as invalid. If the current state of a Counter is 17, the only valid next state is 18.

Ещё одно определение compound action?
When the next state is derived(производное) from the current state, the operation is necessarily a compound action.

   Not all operations impose state transition constraints (не все операции налагают ограничения на переход из одного состояния в другое); when updating a variable that holds the current temperature, its previous state does not affect the computation.

   Если объект можно перевести в какое-то невалидное состояние -- это очень плохо! -- т.к. клиент его таки сделает невалидным, поэтому надо сделать такой переход невозможным:
   ==> инкапсулировать переменные и все эти изменения поместить в атомарную операцию.
Constraints placed on states or state transitions by invariants and postconditions create additional synchronization or encapsulation requirements. If certain states are invalid, then the underlying state variables must be encapsulated, otherwise client code could put the object into an invalid state. If an operation has invalid state transitions, it must be made atomic(related variables must be fetched or updated in a single atomic operation). On the other hand, if the class does not impose any such constraints, we may be able to relax encapsulation or serialization requirements to obtain greater flexibility or better performance.

!! You cannot ensure thread safety without understanding an object’s invariants and postconditions. Constraints on the valid values or state transitions for state variables can create atomicity and encapsulation requirements.

Что такое State-dependent operations ?
Operations with state-based preconditions (предусловия на основе состояния) are called STATE-DEPENDENT.
т.е. операции которые зависят он предусловий наложенных на состояние объекта.
в многопоточном приложении предусловия меняются динамически другими потоками, когда те меняют состояние объекта.

In a single-threaded program, if a precondition does not hold, the operation has no choice but to fail. But in a concurrent program, the precondition may become true later due to the action of another thread. Concurrent programs add the possibility of waiting until the precondition becomes true, and then proceeding with the operation.

Что такое State ownership и в чём выражается в классе?
не все поля в классе определяют его состояние.
State ownership -- это элемент дизайна класса (an element of class design)
When defining which variables form an object's state, we want to consider only the data that object owns. Ownership is not embodied explicitly in the language, but is instead an element of class design.
Состояние объекта -- это такие переменные, которые содержат те данные, которыми класс обладает\владеет (own), т.е. только те переменные, которые определяют/влияют состояние объекта.

In many cases, OWNERSHIP AND ENCAPSULATION go together — the object encapsulates the state it owns and owns the state it encapsulates. It is the owner of a given state variable that gets to decide on the locking protocol used to maintain the integrity (целостность, нетронутость, чистота) of that variable's state. 
Ownership implies control, but once you publish a reference to a mutable object, you no longer have exclusive control; at best, you might have "SHARED OWNERSHIP".

A class usually DOES NOT OWN the OBJECTS PASSED TO ITS METHODS or CONSTRUCTORS, unless the method is designed to explicitly transfer ownership of objects passed in (such as the synchronized collection wrapper factory methods).

Пример для "split ownership" ? разделённого владения.
the collection owns the state of the collection infrastructure (структура, связи внутри коллекции), but client code owns the objects stored in the collection. 
An example is ServletContext.

Как безопасно использовать не thread-safe объект в многопоточном приложении?
1) You can ensure that it is only accessed from a single thread (thread confinement), or 
2) that all access to it is properly guarded by a lock.

Что такое instance confinement?
Encapsulation simplifies making classes thread-safe by promoting instance confinement, often just called confinement.
When an object is encapsulated within another object, all code paths that have access to the encapsulated object are known and can therefore be analyzed more easily than if that object were accessible to the entire program.
!! Encapsulating data within an object confines access to the data to the object’s methods, making it easier to ensure that the data is always accessed with the appropriate lock held.
Т.е. любой доступ к instance confinement переменной происходит только из одного объекта и с применением соответствующей блокировки.

Чем можно ограничить использование объекта?
(Заточённые\ограниченные объекты) Confined objects must NOT escape their intended scope (предназначенную область / из своей камеры).
An object may be confined to:
1) a class instance (such as a private class member), 
2) a lexical scope (such as a local variable), or 
3) a thread (such as an object that is passed from method to method within a thread, but not supposed to be shared across threads).

** Пример thread confinement? - локальные переменные, или когда только 1 поток может писать в переменную.

Если объект сбежит из заключения (или неявно станет доступен через итератор или внутренний класс) -- это БАГ, Ошибка программы.
if an object is intended to be confined to a specific scope, then letting it escape from that scope is a bug. 
Confined objects can also escape by publishing other objects such as iterators or inner class instances that may indirectly publish the confined objects.

Можно ли понять только по самому класса, что он будет thread-safe, без анализа всего кода ?
Confinement makes it easier to build thread-safe classes because a class that confines its state can be analyzed for thread safety without having to examine the whole program.

Что такое Java monitor pattern ?
Это шаблон для дизайна всего класса, когда он инкапсулирует всё своё изменяемое состояние у себя внутри и сам является объектом, по которому идёт синхронизация(охраняет его своим внутренним intrinsic Локом).
An object, following the Java monitor pattern, encapsulates all its mutable state and guards it with the object's own intrinsic lock.
Пример: Counter -- It encapsulates one state variable, value, and all access to that state variable is through the methods of Counter, which are all synchronized.

Какие преимущества в использовании private lock object instead of an object's intrinsic lock(or any other publicly accessible lock) ?
Making the lock object private encapsulates the lock so that client code cannot acquire it, whereas a publicly accessible lock allows client code to participate in its synchronization policy — correctly or incorrectly.

** Описать все примеры и почему они так были расшарены !!

All but the most trivial objects are composite objects. The Java monitor pattern is useful when building classes from scratch or composing classes out of objects that are not thread-safe. 
Большинство объектов -- всё-таки это составные\сложные объекты.
Java monitor pattern полезен, когда надо создавать объект с самого начала или составлять классы из потоко-НЕ-безопасных объектов.
Нужно ли добавлять дополнительную синхронизацию, если наш класс состоит из потокобезопасных объектов? ОТВЕТ: это зависит..
In some cases a composite made of thread-safe components is thread-safe (Listings 4.7 and 4.9), and in others it is merely a good start (Listing 4.10).

**********************************************************************************************
****** 1 способ VehicleTracker -- Java monitor pattern **************
--- MonitorVehicleTracker ---
- Since the view thread and the updater threads will access the data model concurrently, it must be thread-safe. Listing 4.4 shows an implementation of the vehicle tracker using the Java monitor pattern that uses MutablePoint in Listing 4.5 for representing the vehicle locations.
- Even though MutablePoint is not thread-safe, the tracker class is. Neither the map nor any of the mutable points it contains is ever published. When we need to return vehicle locations to callers, the appropriate values are copied using either the MutablePoint copy constructor or deepCopy, which creates a new Map whose values are copies of the keys and values from the old Map.
- This implementation maintains thread safety in part by copying mutable data before returning it to the client. This is usually not a performance issue, but could become one if the set of vehicles is very large. Another consequence of copying the data on each call to getLocation() is that the contents of the returned collection do not change even if the underlying locations change. Whether this is good or bad depends on your requirements. It could be a benefit if there are internal consistency requirements on the location set, in which case returning a consistent snapshot is critical, or a drawback if callers require up-to-date information for each vehicle and therefore need to refresh their snapshot more often.

**********************************************************************************************
***************** NOTES *************
1) Note that deepCopy() can't just wrap the Map with an unmodifiableMap, because that protects only the collection from modification; it does not prevent callers from modifying the mutable objects stored in it. For the same reason, populating the HashMap in deepCopy via a copy constructor wouldn't work either, because only the references to the points would be copied, not the point objects themselves.
2) Because deepCopy is called from a synchronized method, the tracker's intrinsic lock is held for the duration of what might be a long-running copy operation, and this could degrade the responsiveness of the user interface when many vehicles are being tracked.
3) в CountingFactorizer также важно, чтобы переменная AtomicLong была также и final, т.к. это гарантирует что ссылка на AtomicLong всегда будет одна и та же. Если бы она была не final, значит, что какой-то поток мог изменить эту ссылку, и она бы стала указывать на другой AtomicLong объект. В этом случае надо было также дополнительно удостовериться\гарантировать, что при изменении ссылки, она была видима всем другим потокам, которые работают с этим же counter, и убедиться, что не будет race condition при получении доступа к этой новой ссылке.

**********************************************************************************************
****** 2 способ VehicleTracker -- delegates to a thread-safe class **************
--- DelegatingVehicleTracker ---
We store the locations in a thread-safe Map implementation, ConcurrentHashMap. 
We also store the location using an immutable Point class instead of MutablePoint.
ImmutablePoint is thread-safe because it is immutable. Immutable values can be freely shared and published, so we no longer need to copy the locations when returning them. (т.е. убираем перформанс ишьюс при получении локейшнс)
DelegatingVehicleTracker in Listing 4.7 does not use any explicit synchronization; all access to state is managed by ConcurrentHashMap, and all the keys and values of the Map are immutable.
Т.е. не надо никакой дополнительной синхронизации при доступе к мап или точке.
Важно отметить, что поля мэп обозначены как public final, т.к. эти ссылки публикуются (возвращаются из класса вовне в другие классы), т.е. нельзя заменить ссылку у этих мэп на другие мэп с другим контентом.

If we had used the original MutablePoint class instead of ImmutablePoint, we would be breaking encapsulation by letting getLocations() publish a reference to mutable state that is not thread-safe. Notice that we've changed the behavior of the vehicle tracker class slightly; while the monitor version returned a snapshot of the locations, the delegating version returns an unmodifiable but "live" view of the vehicle locations. This means that if thread A calls getLocations() and thread B later modifies the location of some of the points, those changes are reflected in the Map returned to thread A. As we remarked earlier, this can be a benefit (more up-to-date data) or a liability (potentially inconsistent view of the fleet), depending on your requirements.

Listing 4.8. Returning a static copy of the location set instead of a "live" one.
** Почитать про 2ю версию Listing 4.8:
If an unchanging view of the fleet is required, getLocations could instead return a shallow copy of the locations map. Since the contents of the Map are immutable, only the structure of the Map, not the contents, must be copied, as shown in Listing 4.8 (which returns a plain HashMap, since getLocations() did not promise to return a thread-safe Map).
**********************************************************************************************

Independent state variables
Если есть 2 независимые переменные для хранения двух не связанных между собой состояний - то можно всю ответственность по thread-safety возложить на сами эти объекты. (н-р, ис-ть 2 потокобезопасные коллекции)
The delegation examples so far delegate to a single, thread-safe state variable. We can also delegate thread safety to more than one underlying state variable as long as those underlying state variables are independent, meaning that the composite class does not impose any invariants involving the multiple state variables.
Например, в VisualComponent есть 2 потокобезопасные коллекции:
одна для хранения key listeners и вторая -- для mouses listeners.

Небезопасно, когда AtomicIntegers зависят друг от друга:
When delegation fails (см класс NumberRange)
    // INVARIANT: lower <= upper
    private final AtomicInteger lower = new AtomicInteger(0);
    private final AtomicInteger upper = new AtomicInteger(0);

So while the underlying AtomicIntegers are thread-safe, the composite class is not. 
Because the underlying state variables "lower" and "upper" are not independent, NumberRange cannot simply delegate thread safety to its thread-safe state variables.
NumberRange could be made thread-safe by using LOCKING to maintain its invariants, such as GUARDING LOWER AND UPPER WITH A COMMON LOCK. It must also AVOID PUBLISHING lower and upper to prevent clients FROM SUBVERTING ITS INVARIANTS.
...сlass must provide its own locking to ensure that compound actions are atomic, unless the entire compound action can also be delegated to the underlying state variables.

Если у переменных нет пересекающихся\зависимых операций которые могу привести к ошибочному состоянию:
If a class is composed of multiple independent thread-safe state variables and has no operations that have any invalid state transitions, then it can delegate thread safety to the underlying state variables.

Пример, как компоненты были thread-safe, но сам класс не был thread-safe:
потому что The problem that prevented NumberRange from being thread-safe even though its state components were thread-safe is very SIMILAR to one of the rules about VOLATILE VARIABLES:
a VARIABLE is SUITABLE for being DECLARED VOLATILE only if it does NOT PARTICIPATE IN INVARIANTS involving other STATE VARIABLES.

Когда забота о thread safety передаются к внутренним переменным (к-е хранят состояние), то как можно расшарить доступ к этим переменным, чтобы другие классы также могли изменять их?
ОТВЕТ ЗАВИСИТ ОТ ТОГО, КАКИЕ ИНВАРИАНТЫ КЛАСС НАКЛАДЫВАЕТ НА ЭТИ ПЕРЕМЕННЫЕ.

Например, для счетчика на переменную накладываются доп. ограничения:
1) значение должно быть только положительным
2) новое значение должно базироваться на текущем
То в  этом случае клиенты могут испортить состояние -- и расшаривать доступ не следует.
Если же подобных ограничений нет, то в принципе тогда можно дать доступ из других классов, но есть нюансы при дальнейшем кодировании\изменении этого класса.

Идеально простая ситуация, когда можно расшарить thread-safe переменную:
If a state variable is thread-safe, does not participate in any invariants that constrain its value, and has no prohibited state transitions for any of its operations, then it can safely be published.

**********************************************************************************************
Если нужно получать 2 и более значений связанных переменных, то из метода нужно возвращать их все сразу, а не по отдельности, т.к. есть шанс нарушения целостности данных.
SafePoint in Listing 4.11 provides a getter that retrieves both the x and y values at once by returning a two-element array. If we provided separate getters for x and y, then the values could change between the time one coordinate is retrieved and the other, resulting in a caller seeing an inconsistent value: an (x,y) location where the vehicle never was.

Пример private constructor capture idiom ?
The private constructor exists to avoid the race condition that would occur if the copy constructor were implemented as "this(p.x, p.y)";
** НАЧАЛО -->
см. почему сделали private конструктор:
[THE AIM IS TO CAPTURE A TEMPORARY VALUE DURING CONSTRUCTION.
we want to capture and store the parameter that we wish to pass to the superclass constructor. In order to do so, we create a private helper constructor, which our public constructor then calls.
http://stackoverflow.com/questions/11360619/what-is-a-java-example-of-the-private-constructor-capture-idiom]

http://stackoverflow.com/questions/12028925/private-constructor-to-avoid-race-condition

** Constructors in Java can not be synchronized. Почему?
We can not implement public SafePoint(SafePoint p) as { this (p.x, p.y); } because
As we are not synchronized(and can't as we are in the constructor), during the execution of the constructor, someone may be calling SafePoint.set() from the different thread
public synchronized void set(int x, int y){
        this.x = x; //this value was changed
-->     this.y = y; //this value is not changed yet
   }
so we will read the object in the inconsistent state.
So instead we create a snapshot in a thread-safe way, and pass it to the private constructor. The stack confinement protects the reference to the array, so there's nothing to worry about.
update Ha! As for the trick everything is simple - you have missed @ThreadSafe annotation from the book in your example..
so, if the constructor which takes int array as an argument will be public or protected, the class will no longer be thread-safe, because the content of the array may change the same way as the SafePoint class(i.e. someone may change it during the constructor execution)! 
** КОНЕЦ <--

**********************************************************************************************
****** 3 способ VehicleTracker -- that publishes its underlying mutable state **************
--- PublishingVehicleTracker --- Listing 4.12

PublishingVehicleTracker derives its thread safety from delegation to an underlying ConcurrentHashMap, but this time the contents of the Map are thread-safe mutable points rather than immutable ones. The getLocation() method returns an unmodifiable copy of the underlying Map. Callers cannot add or remove vehicles, but could change the location of one of the vehicles by mutating the SafePoint values in the returned Map. 

PublishingVehicleTracker is thread-safe, but would not be so if it imposed any additional constraints on the valid values for vehicle locations. If it needed to be able to "VETO" changes to vehicle locations or to take action when a location changes, the approach taken by PublishingVehicleTracker would not be appropriate.

The requirement that the class be thread-safe implicitly adds another requirement — that operations like PUT-IF-ABSENT be atomic. Any reasonable interpretation suggests that, if you take a List that does not contain object X, and add X twice with put-if-absent, the resulting collection contains only one copy of X. But, if put-if-absent were not atomic, with some unlucky timing two threads could both see that X was not present and both add X, resulting in two copies of X.
*********************************************************************************************

4.4 Adding functionality to existing thread-safe classes
1) The safest way to add a new atomic operation is to modify the original class to support the desired operation, but this is not always possible because you may not have access to the source code or may not be free to modify it. If you can modify the original class, you need to understand the implementation's synchronization policy so that you can enhance it in a manner consistent with its original design. Adding the new method directly to the class means that all the code that implements the synchronization policy for that class is still contained in one source file, facilitating easier comprehension and maintenance.

2) Another approach is to extend the class, assuming it was designed for extension. 
Extension is more fragile than adding code directly to a class, because the implementation of the synchronization policy is now distributed over multiple, separately maintained source files. If the underlying class were to change its synchronization policy by choosing a different lock to guard its state variables, the subclass would subtly and silently break, because it no longer used the right lock to control concurrent access to the base class's state.

3) Client-side locking
A third strategy is to extend the functionality of the class without extending the class itself by placing extension code in a "helper" class.
ListHelper provides only the illusion of synchronization когда ис-ем helper класс для синхронизации.
the various list operations, while all synchronized, use different locks, which means that putIfAbsent is not atomic relative to other operations on the List.

To make this approach work, we have to use the same lock that the List uses by using client-side locking or external locking.
IN ORDER TO USE CLIENT-SIDE LOCKING, YOU MUST KNOW WHAT LOCK X USES.

If extending a class to add another atomic operation is fragile because it distributes the locking code for a class over multiple classes in an object hierarchy, client-side locking is even more fragile because it entails(влечёт за собой) putting locking code for class C into classes that are totally unrelated to C.
Client-side locking has a lot in common with class extension — they both couple the behavior of the derived(производного) class to the implementation of the base class. 
Just as extension violates encapsulation of implementation, client-side locking violates encapsulation of synchronization policy.

4) Есть более надёжный способ добавить атомик операцию к уже существующему классу, это композиция (composition) 
т.е. создание типа прокси.
но им надо поддерживать исходный интерфейс.
но теоретически, можно и не implement-ить интерфейс, но это будет геморройнее 
ImprovedList in Listing 4.16 implements the List operations by delegating them to an underlying List instance, and adds an atomic putIfAbsent method.
(Like Collections.synchronizedList and other collections wrappers, ImprovedList assumes that once a list is passed to its constructor, the client will not use the underlying list directly again, accessing it only through the wrapper\ImprovedList.)
ImprovedList adds an additional level of locking using its own intrinsic lock. It does not care whether the underlying List is thread-safe, because it provides its own consistent locking that provides thread safety even if the List is not thread-safe or changes its locking implementation.
--------------------

Один из Самых важных инструментов thread-safety -- Это Documenting synchronization policies.
Document a "class’s thread safety guarantees" for its clients; document its "synchronization policy" for its maintainers.

Надо принять много решений, чтобы создать политику по синхронизации:
Crafting a synchronization policy requires a number of decisions: 
1) which variables to make volatile, 
2) which variables to guard with locks, 
3) which lock(s) guard which variables, 
4) which variables to make immutable or confine to a thread, 
5) which operations must be atomic, 
6) etc

Как догадаться о неуказанной потокобезопасности: есть ли она в реализации?
One way to improve the quality of your guess is to interpret the specification from the perspective of someone who will implement it (such as a container or database vendor), as opposed to someone who will merely use it.

зачем писать, thread-safe класс или нет?
или ты будешь думать что он thread-safe, а на самом деле -- он нет.
