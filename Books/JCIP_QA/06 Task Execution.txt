Task Execution

** Чем отличаются Runnable от Callable?

Most concurrent applications are organized around the execution of tasks.
TASKS --> abstract, discrete units of work. (отдельные/абстрактные/разделённые единицы работы)

Dividing the work of an application into tasks имеет ряд преимуществ:
1) simplifies program organization, (упрощает организацию программы)
2) facilitates(облегчать, помогать, способствовать) error recovery(восстановлению после ошибок) by providing natural transaction boundaries, 
3) promotes concurrency by providing a natural structure(естественной структуры) for parallelizing work.

*** 6.1 Executing tasks in threads ***
The first step in organizing a program around task execution is identifying SENSIBLE TASK BOUNDARIES (разумных границ задачи). 

Ideally, TASKS ARE INDEPENDENT ACTIVITIES: 
work that DOESN'T depend on the state, result, or side effects OF OTHER TASKS. 

Independence facilitates(облегчает, помогает произойти) concurrency, as independent tasks can be executed in parallel if there are adequate processing resources. 
For greater flexibility in scheduling and load balancing tasks, each task should also represent a SMALL FRACTION of your application's processing capacity.

Server applications should exhibit (показывать, обнаруживать, проявлять) both GOOD THROUGHPUT and GOOD RESPONSIVENESS under normal load. 
(Хорошую пропускную способность/производительность и отзывчивость)

Также applications should exhibit (приятный, элегантный)GRACEFUL DEGRADATION as they become overloaded, rather than simply falling over under heavy load. 
Choosing good task boundaries, coupled with a sensible task execution policy (see Section 6.2.2), can help achieve these goals.

Most server applications offer a natural choice of task boundary: 
INDIVIDUAL CLIENT REQUESTS.

There are a number of possible policies for scheduling tasks within an application, some of which exploit the potential for concurrency better than others. 

*** 6.1.1 Executing tasks sequentially *** (+ и - у последовательной обработки.)
The simplest is to execute tasks sequentially in a single thread.
In server applications, sequential processing rarely provides either good throughput or good responsiveness. There are exceptions — such as when tasks are few and long-lived, or when the server serves a single client that makes only a single request at a time — but most server applications do not work this way.
In some situations, sequential processing may offer a SIMPLICITY OR SAFETY ADVANTAGE; most GUI frameworks process tasks sequentially using a single thread.

Processing a web request involves a MIX of computation and I/O. The server must perform socket I/O to read the request and write the response, which can block due to network congestion or connectivity problems. It may also perform file I/O or make database requests, which can also block. In a single-threaded server, blocking not only delays completing the current request, but prevents pending requests from being processed at all. If one request blocks for an unusually long time, users might think the server is unavailable because it appears unresponsive. At the same time, resource utilization is poor, since the CPU sits idle while the single thread waits for its I/O to complete.
   
Какие операции могут заблочиться:
1) socket I/O to read the request (network congestion or connectivity problems)
2) socket I/O to write the response (network congestion or connectivity problems)
3) file I/O (disc read/write)
4) user input I/O (waiting for keyress)
5) database requests (blocked by transactions)

Обработка web request выключает вычисления и io операции. Сервер может читать файл или обращаться к БД, и это может быть долго. Или могут быть проблемы с сетью или трафик сильно большой.
В таких случаях отзывчивость будет страдать, ЦПУ простаивать, некоторые ожидающие запросы так могут никогда и не выполниться, а юзер будет думать, что сайт не работает.

*** 6.1.2 Explicitly creating threads for tasks ***
A more responsive approach is to create a new thread for servicing each request.

Распараллеливание обработки запросов даёт следующие преимущества:
1) главный поток освобождается от нагрузки и может спокойно принимать след.запросы.
2) запросы обрабатываются параллельно, много запросов обр-ся одновременно.
3) код для обработки запросов\задач должен быть thread-safe.
При этом желательно чтобы частота поступления новых запросов была меньше чем способность сервера их обрабатывать -- только тогда производительность будет лучше.
>>>
1) Task processing is offloaded from the main thread, enabling the main loop to resume waiting for the next incoming connection more quickly. This enables new connections to be accepted before previous requests complete, improving responsiveness.
2) Tasks can be processed in parallel, enabling multiple requests to be serviced simultaneously. This may improve throughput if there are multiple processors, or if tasks need to block for any reason such as I/O completion, lock acquisition, or resource availability.
3) Task-handling code must be thread-safe, because it may be invoked concurrently for multiple tasks.
Under light to moderate load, the thread-per-task approach is an improvement over sequential execution. As long as the request arrival rate does not exceed the server's capacity to handle requests, this approach offers better responsiveness and throughput.

*** 6.1.3 Disadvantages of unbounded thread creation
For production use, however, the thread-per-task approach has some practical drawbacks, especially when a large number of threads may be created.

Недостатки такого распараллеливания:
1) THREAD LIFECYCLE OVERHEAD (накладные расходы, издержки). 
Создание и удаление нового потока занимает время и ресурсы. (If requests are frequent and lightweight, as in most server applications, creating a new thread for each request can consume significant computing resources.)

2) RESOURCE CONSUMPTION (расход, потребление). 
Потоки потребляют системные ресурсы, особенно -- память. А также если потоков больше чем процессоров -- то некоторые из потоков простаивают. Много простаивающих потоков могут съесть всю память, усложнить работу garbage collector, и негативно сказаться на других сторонах производительности. (Having many idle threads can tie up a lot of memory...)  If you have enough threads to keep all the CPUs busy, creating more threads won't help and may even hurt.

3) STABILITY (устойчивость, стабильность). 
Есть ограничение на максимальное кол-во потоков, которые могу быть созданы.
макс кол-во зависит от параметров запуска JVM, размера стека при создании потока, ограничения от самой ОС. When you hit this limit, то скорее всего будет OutOfMemoryError. Trying to recover from such an error is very risky; it is far easier to structure your program to avoid hitting this limit.

!!! Like other concurrency hazards, UNBOUNDED THREAD CREATION may appear to work just fine during prototyping and development, with problems surfacing only when the application is deployed and under heavy load.

--- EACH THREAD maintains two EXECUTION STACKS:
1) one for Java code 
2) one for native code. 
Typical JVM defaults yield a combined stack size (т.е. для обоих этих стэков) of around half a megabyte (512Kb). 
You can change this with the -Xss JVM flag or through the Thread constructor.
If you divide the per-thread stack size into 2в32й степени (32bitOS=4096Мб=макс ОЗУ), you get a limit of a few thousands or tens of thousands of threads (8 192 потоков = 2в32й байт разделить на 512Кб-на1поток).  4194304 Кб / 512 Кб = 8192
Other factors, such as OS limitations, may impose stricter limits.

@see https://docs.gigaspaces.com/xap/12.2/production/production-jvm-tuning.html

 *** 6.2 The Executor framework ***

TASKS   >>  are logical units of work.
THREADS >>  are a mechanism by which tasks can run asynchronously. 
SEQUENTIAL APPROACH >>  suffers from poor responsiveness and throughput. 
THREAD-PER-TASK APPROACH >>  suffers from poor resource management.

The PRIMARY ABSTRACTION for task execution in the Java class libraries is NOT Thread, but EXECUTOR.

Executor MAY BE A SIMPLE INTERFACE, but it forms the basis for a flexible and powerful framework for asynchronous task execution that supports a wide variety of task execution policies. 
It provides a standard means of (расцепление, разъединение)DECOUPLING TASK SUBMISSION(передача на рассмотрение) from TASK EXECUTION, describing tasks with Runnable. 
The Executor implementations also provide LIFECYCLE SUPPORT and HOOKS FOR ADDING STATISTICS GATHERING, APPLICATION MANAGEMENT, AND MONITORING.

Что по сути предлагает Executor:
1) Разделяет регистрацию/создание задачи от её непосредственного выполнения. 
[Разделяет передачу от выполнения (submission from execution)]
2) Поддержку жизненного цикла
3) Возможность собирать статистику
4) Управление приложение
5) Мониторинг/наблюдение

EXECUTOR IS BASED ON THE PRODUCER-CONSUMER PATTERN, where activities that submit tasks are the producers (producing units of work to be done) and the threads that execute tasks are the consumers (consuming those units of work). 
Using an Executor is usually the easiest path to implementing a producer-consumer design in your application.

public interface Executor {
	void execute(Runnable command);
}
// An object that executes submitted Runnable tasks. This interface provides a way of decoupling task submission from the mechanics of how each task will be run, including details of thread use, scheduling, etc. An Executor is normally used instead of explicitly creating threads.

Поэтому в примере переделали на ис-ие Executor, 
тут главное в коде это сделать, т.к. в коде вряд ли потом легко поменяется логика запуска обработки запросов.
А вот имплементация самого Executor может быть легко изменена в конфиге, наример. И это более частая практика.

*** 6.2.2 Execution policies ***
Разделяя передачу от выполнения (submission from execution) для текущей группы задач, вы задаёте политику выполнения (Execution policy), и также появляется возможность легко изменять эту политику.
An execution policy specifies the "what, where, when, and how" of task execution:
1) в каком потоке
2) в каком порядке (fifo, lifo, др)
3) сколько задач могут выполняться параллельно
4) сколько задач могут быть в ожидании
5) если есть перегрузка, то какую задачу убить и как об этом сообщить системе
6) какие действия выполнять до и после выполнения задачи.

Separating the specification of execution policy from task submission makes it practical to select an execution policy at deployment time that is matched to the available hardware.
EXECUTION POLICIES ARE A RESOURCE MANAGEMENT TOOL, and the optimal policy depends on the available computing resources and your quality-of-service requirements. 


*** 6.2.3 Thread pools *** пул потоков. 
-- В чём разница между процессом и потоком?
Процессы управляются на уровне ОС, и процесс управляет своими потоками.
Потоками можно управлять внутри кода процесса. 

A THREAD POOL manages a homogeneous(однородный) pool of worker threads. 
A thread pool is TIGHTLY BOUND to a WORK QUEUE HOLDING TASKS waiting to be executed. 
Worker threads have a simple life: request the next task from the work queue, execute it, and go back to waiting for another task.

Плюсы thread pool: (a number of advantages over the thread-per-task approach)
1) не тратится время и ресурсы на создание и подчистку потоков.
2) лучшая отзывчивость (responsiveness): т.к. поток уже создан, когда пришла задача.
3) оптимальное кол-во потоков эффективно ис-ет ЦПУ и память и не крэшится.
(By properly tuning the size of the thread pool, you can have enough threads to keep the processors busy while not having so many that your application runs out of memory or thrashes due to competition among threads for resources.)

** какое оптимальное кол-во потоком в зависимости от кол-во ядер в процессоре??
(N-1) И почему? Потому что всё равно нужен какое-то свободное ядро на выполнение остальных задач (ОС, других программ, и т.п.)

Пулы можно получить из static factory methods in Executors:
-------------- 1) newFixedThreadPool. -------------- 
A fixed-size thread pool creates threads as tasks are submitted, up to the maximum pool size, and then attempts to keep the pool size constant (adding new threads if a thread dies due to an unexpected Exception).
-------------- 2) newCachedThreadPool. -------------- 
A cached thread pool has more flexibility to reap(пожинать, собирать урожай) idle threads when the current size of the pool exceeds the demand for processing, and to add new threads when demand increases, but places NO BOUNDS ON THE SIZE OF THE POOL.
-------------- 3) newSingleThreadExecutor. -------------- 
A single-threaded executor creates a single worker thread to process tasks, replacing it if it dies unexpectedly. Tasks are guaranteed to be processed sequentially according to the order imposed by the task queue (FIFO, LIFO, priority order).
[Single-threaded executors also provide sufficient internal synchronization to guarantee that any memory writes made by tasks are visible to subsequent tasks; this means that objects can be safely confined to the "task thread" even though that thread may be replaced with another from time to time.]
-------------- 4) newScheduledThreadPool. -------------- 
A fixed-size thread pool that supports delayed and periodic task execution, similar to Timer. (See Section 6.2.5.)

** Посмотреть как работает таймер??

Использование TASK EXECUTION FRAMEWORK даёт ряд новых возможностей:
tuning, management, monitoring, logging, error reporting, and other possibilities..

!! While the server may not fail due to the creation of too many threads, if the TASK ARRIVAL RATE exceeds the TASK SERVICE RATE for long enough it is still possible (just harder) to run out of memory because of the GROWING QUEUE OF RUNNABLES awaiting execution. This can be addressed within the Executor framework by using a BOUNDED WORK QUEUE.

*** 6.2.4 Executor lifecycle ***
1) Всегда ли надо останавливать Executor?
!!! JVM can't exit until all the (nondaemon) threads have terminated, so failing to shut down an Executor could prevent the JVM from exiting.
2) По умолчанию Executor поддерживает управление своим жизненным циклом?
Нет, это добавлено в ExecutorService. И Executors возвращает именно ExecutorService.
3) какие ещё методы добавлены в ExecutorService?
4) В чём отличие graceful shutdown от abrupt shutdown? (для выполняемых задач)
 * * * *
Since Executors provide a service to applications, they should be able to be shut down as well, both gracefully(вежливо, прилично) and abruptly(внезапно, резко), and feed back information to the application about the status of tasks that were affected by the shutdown(выключение).

To address the issue of execution service lifecycle, the ExecutorService interface extends Executor, adding a number of methods for lifecycle management (as well as some convenience methods for task submission(передача на рассмотрение)).

The lifecycle implied by ExecutorService has three states — RUNNING, SHUTTING DOWN, AND TERMINATED. 
1) ExecutorServices are initially created in the RUNNING state. 

2) void shutdown();  >> 
method initiates a GRACEFUL shutdown: NO NEW TASKS ARE ACCEPTED but previously SUBMITTED TASKS are ALLOWED TO COMPLETE — including those that have not yet begun execution. 

@DOC: Initiates an orderly shutdown in which previously submitted tasks are executed, but no new tasks will be accepted. Invocation has no additional effect if already shut down.
This method does not wait for previously submitted tasks to complete execution. Use awaitTermination to do that.

3) List<Runnable> shutdownNow();  >> 
method initiates an ABRUPT SHUTDOWN: it attempts to cancel outstanding(нереализованный) tasks and does not start any tasks that are queued but not begun.

@DOC: Attempts to stop all actively executing tasks, halts the processing of waiting tasks, and returns a list of the tasks that were awaiting execution.
This method does not wait for actively executing tasks to terminate. Use awaitTermination to do that.
There are no guarantees beyond best-effort attempts to stop processing actively executing tasks. For example, typical implementations will cancel via Thread.interrupt, so any task that fails to respond to interrupts may never terminate.

4) Tasks submitted to an ExecutorService AFTER IT HAS BEEN SHUT DOWN are handled by the REJECTED EXECUTION HANDLER (see Section 8.3.3), which might silently discard the task or might cause execute to throw the unchecked RejectedExecutionException. 

5) Once all tasks have completed, the ExecutorService transitions to the TERMINATED state.

!!!! MEMORY CONSISTENCY EFFECTS: !!!!
Actions in a thread prior to the submission of a Runnable or Callable task to an ExecutorService happen-before any actions taken by that task, which in turn happen-before the result is retrieved via Future.get().

@see https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ExecutorService.html

>> boolean isTerminated(); >>
@DOC: Returns true if all tasks have completed following shut down. Note that isTerminated is never true unless either shutdown or shutdownNow was called first.

>> boolean awaitTermination(long timeout, TimeUnit unit) >>
@DOC: Blocks until all tasks have completed execution after a shutdown request, or the timeout occurs, or the current thread is interrupted, whichever happens first.

You can wait for an ExecutorService to reach the terminated state with .awaitTermination(), or poll(опросить) for whether it has yet terminated with .isTerminated(). 
It is common to follow .shutdown() immediately by .awaitTermination(), creating the effect of synchronously shutting down the ExecutorService. (Executor shutdown and task cancellation are covered in more detail in Chapter 7) 

The following method shuts down an ExecutorService in two phases, first by calling shutdown to reject incoming tasks, and then calling shutdownNow, if necessary, to cancel any lingering tasks:
 
 void shutdownAndAwaitTermination(ExecutorService pool) {
   pool.shutdown(); // Disable new tasks from being submitted
   try {
     // Wait a while for existing tasks to terminate
     if (!pool.awaitTermination(60, TimeUnit.SECONDS)) {
       pool.shutdownNow(); // Cancel currently executing tasks
       // Wait a while for tasks to respond to being cancelled
       if (!pool.awaitTermination(60, TimeUnit.SECONDS))
           System.err.println("Pool did not terminate");
     }
   } catch (InterruptedException ie) {
     // (Re-)Cancel if current thread also interrupted
     pool.shutdownNow();
     // Preserve interrupt status
     Thread.currentThread().interrupt();
   }
 }

*** 6.2.5 Delayed and periodic tasks ***
The Timer facility manages the execution of DEFERRED[отсроченный, отложенный] ("run this task in 100 ms") and PERIODIC[периодический, повторяющийся] ("run this task every 10 ms") tasks. 
However, Timer has some drawbacks, and ScheduledThreadPoolExecutor should be thought of as its replacement.

** Перечислить drawbacks у таймера ??
1) A Timer creates only a single thread for executing timer tasks. (Поэтому когда 1 Long-running, то выполнение других сдвигается, и может быть вызвано 4 раза подряд когда 1й наконец закончится)
2) Timer behaves poorly if a TimerTask throws an unchecked exception. The Timer thread doesn't catch the exception, поэтому оно terminates the timer thread. Timer also doesn't resurrect the thread in this situation; instead, it erroneously assumes the entire Timer was cancelled. TimerTasks that are already scheduled but not yet executed are never run, and new tasks cannot be scheduled. (This problem, called "thread leakage" is described in Section 7.3, along with techniques for avoiding it.)
3) Timer can become confused in this manner and, as confusion loves company, how the Timer shares its confusion with the next hapless caller that tries to submit a TimerTask.
4) Timer does have support for scheduling based on absolute, not relative time, so that tasks can be sensitive to changes in the system clock; 

** и как это решено в ScheduledThreadPoolExecutor ??
1) Scheduled thread pools address this limitation by letting you provide multiple threads for executing deferred and periodic tasks.
2) Видимо unchecked exception не ломает ScheduledThreadPoolExecutor.
3) Такого видимо нет.
4) ScheduledThreadPoolExecutor supports only relative time.

-- DEFERRED [отсроченный, отложенный] ("run this task in 100 ms")
-- PERIODIC [периодический, повторяющийся] ("run this task every 10 ms") tasks
** Пример плохого таймера ?? == OutOfTime.java in Listing 6.9

If you need to build your own scheduling service, you may still be able to take advantage of the library by using a DelayQueue.
DelayQueue -- это BlockingQueue implementation that provides the scheduling functionality of ScheduledThreadPoolExecutor. 
A DelayQueue manages a collection of Delayed objects. A Delayed has a delay time associated with it: DelayQueue lets you take an element only if its delay has expired. Objects are returned from a DelayQueue ordered by the time associated with their delay.

*** 6.3 Finding exploitable parallelism *** Поиск пригодного к эксплуатации параллелизма **
The Executor framework makes it easy to specify an execution policy, but in order to use an Executor, you have to be able to describe your task as a Runnable. 
In most server applications, there is an obvious task boundary: a single client request. 
But sometimes GOOD TASK BOUNDARIES ARE NOT QUITE SO OBVIOUS, as in many desktop applications. There may also be exploitable parallelism within a single client request in server applications, as is sometimes the case in database servers.

Our sample component is the page-rendering portion of a browser application, which takes a page of HTML and renders it into an image buffer.
sequential page renderer -- неэффективно.
-- RUNNABLE --
>> The Executor framework uses Runnable as its basic task representation. 
Runnable is a fairly LIMITING abstraction; run CANNOT RETURN A VALUE OR THROW CHECKED EXCEPTIONS, [поэтому используются workaround-ы вида:?] although it can have SIDE EFFECTS such as writing to a log file or placing a result in a shared data structure.
-- CALLABLE --
>> Callable expects that the main entry point, CALL, will return a value and anticipates(ожидает) that it might throw an exception.
---------------- 
Many tasks are effectively deferred(отсроченный, отложенный) computations — 
1) executing a database query, 
2) fetching a resource over the network, 
3) or computing a complicated function. 
>> For these types of tasks, Callable is a better abstraction.
Executors includes several utility methods for wrapping other types of tasks with a Callable [including Runnable and java.security.PrivilegedAction].

-- TASKS --
>> Runnable and Callable describe abstract computational TASKS. 
Tasks are usually finite(ограниченный, имеющий предел): they have a clear starting point and they eventually terminate. 
The lifecycle of a task executed by an Executor has four phases: 
1) CREATED, 
2) SUBMITTED, 
3) STARTED, 
4) and COMPLETED.
Since tasks can take a long time to run, we also want to be able to cancel a task. 
In the Executor framework, tasks that have been submitted but not yet started can always be cancelled, 
and tasks that have started can _SOMETIMES_ be cancelled if they are responsive to interruption. 
Cancelling a task that has already completed has no effect.

-- FUTURE --
Future represents the lifecycle of a task and provides methods to test whether the task has completed or been cancelled, retrieve its result, and cancel the task. 
Implicit in the specification of Future is that TASK LIFECYCLE CAN ONLY MOVE FORWARDS, NOT BACKWARDS — just like the ExecutorService lifecycle. 
Once a task is completed, it stays in that state forever.

The behavior of .get() varies depending on the task state (not yet started, running, completed). 
It returns immediately or throws an Exception if the task has already completed, but if not it blocks until the task completes. 
If the task completes by throwing an exception, get() rethrows it wrapped in an ExecutionException; 
if it was cancelled, .get() throws CancellationException. 
If .get() throws ExecutionException, the underlying exception can be retrieved with .getCause().

**To express a non-value-returning task with Callable, use Callable<Void>.
** в ExecutorService метод Future<?> submit(Runnable task); --- вернёт null при успешном завершении. т.к. Runnable не возвращает никакое значение.

There are several ways to create a Future to describe a task. 
The SUBMIT() methods in ExecutorService all return a Future, so that you can submit a Runnable or a Callable to an executor and get back a Future that can be used to retrieve the result or cancel the task. 
You can also explicitly instantiate a FutureTask for a given Runnable or Callable. (Because FutureTask implements Runnable, it can be submitted to an Executor for execution or executed directly by calling its run method.)

// public interface RunnableFuture<V> extends Runnable, Future<V> {..

** В AbstractExecutorService есть метод protected newTaskFor(..), который можно переопределить если делаешь свой ExecutorService.

--- The safe publication ensures that the object's state is visible to the new owner.. и что передаётся полностью созданный объект... 
** описать что такое safe publication ??
>> an object reference becomes visible to another thread does not necessarily mean that the state of that object is visible to the consuming thread. In order to guarantee a consistent view of the object's state, synchronization is needed.
Immutable objects, on the other hand, can be safely accessed even when synchronization is not used to publish the object reference. 
>> Objects that are not immutable must be safely published, which usually entails synchronization by both the publishing and the consuming thread.
Как ЖЕ сделать Safe publication?
>>Чтобы опубликовать объект безопасно (to safely publish any objects):
To publish an object safely, both 
1) the REFERENCE TO THE OBJECT and 
2) the OBJECT’S STATE
must be made VISIBLE TO OTHER THREADS AT THE SAME TIME. 
---

Submitting a Runnable or Callable to an Executor constitutes a SAFE PUBLICATION (see Section 3.5) of the Runnable or Callable from the submitting thread to the thread that will eventually execute the task.
Similarly, setting the result value for a Future constitutes a safe publication of the result from the thread in which it was computed to any thread that retrieves it via get().

Какие могут быть проблемы\исключения\ситуации вокруг Future.get(), которые надо специально обрабатывать?
The exception handling code surrounding Future.get() deals with two possible problems: 
1) that the task encountered an Exception, or 
2) the thread calling .get() was interrupted before the results were available.

А так в общем всё будет thread-safe:
The state-dependent nature of .get() means that the caller need NOT be aware of the state of the task, and the safe publication properties of task submission and result retrieval make this approach thread-safe. 

*** 6.3.4 Limitations of parallelizing heterogeneous tasks ***
// heterogeneous [ˏhet(ə)rə(ʊ)`ʤi:nıəs] (гетерогенный, различный; неоднородный; разнородный)
...can be tricky. 
Если задачи РАЗНОРОДНЫ, то надо больше думать как их ускорить распареллеливанием.
И не факт что это сильно удастся.

The real performance payoff of dividing a program’s workload into tasks comes when there are a large number of independent, homogeneous tasks that can be processed concurrently.
// payoff [ˈpeɪˈɔf] выигрыш, вознаграждение, платеж, расплата
хорошо если есть много независимых и однородных задач -- тогда выигрыш производительности может быть большой.

*** 6.3.5 CompletionService: Executor meets BlockingQueue ***
Если есть пачка\партия (a batch of computations) задач, который отправляются на выполнение, и мы хотим получить результат каждой задачи, как только он будет доступен --- надо ис-сть CompletionService.
** реализация ExecutorCompletionService ==> 
>> A CompletionService that uses a supplied Executor to execute tasks. This class arranges that submitted tasks are, upon completion, placed on a queue accessible using .take(). The class is lightweight enough to be suitable for transient use when processing groups of tasks.

You can submit Callable tasks to it for execution and use the queuelike methods take() and poll() to retrieve completed results, packaged as Futures, as they become available.
--The ExecutorCompletionService's  constructor creates a BlockingQueue to hold the completed results. FutureTask has a .done() method that is called when the computation completes. When a task is submitted, it is wrapped with a QueueingFuture, a subclass of FutureTask that overrides done to place the result on the BlockingQueue.

// private class QueueingFuture extends FutureTask<Void> {..
// protected void done() { completionQueue.add(task); } ..}

The take() and poll() methods delegate to the BlockingQueue, blocking if results are not yet available.
--Multiple ExecutorCompletionServices can share a single Executor, so it is perfectly sensible to create an ExecutorCompletionService that is PRIVATE TO A PARTICULAR COMPUTATION while SHARING A COMMON Executor. 
тогда потоки Executor переиспользуются.
When used in this way, a CompletionService acts as a handle for a batch of computations in much the same way that a Future acts as a handle for a single computation.
By remembering how many tasks were SUBMITTED to the CompletionService and counting how many completed results are RETRIEVED, you can know when all the results FOR A GIVEN BATCH have been retrieved, even if you use a shared Executor.

** в чём отличие Future от FutureTask ??

*** 6.3.7    Placing time limits on tasks ***
Sometimes, if an activity does not complete within a certain amount of time, the result is no longer needed and the activity can be abandoned.

Трудности, когда у задачи есть временные ограничения:
1) не ждать окончания выполнения больше чем положено, или понять за это время, что ответа не будет.
2) остановить выполнение задачи если она не завершилась в лимит отведённого времени.

The true parameter to Future.cancel() means that the task thread can be interrupted if the task is currently running;
-- boolean cancel(boolean mayInterruptIfRunning)
Attempts to cancel execution of this task. This attempt will fail if the task has already completed, has already been cancelled, or could not be cancelled for some other reason. If successful, and this task has not started when cancel is called, this task should never run. If the task has already started, then the mayInterruptIfRunning parameter determines whether the thread executing this task should be interrupted in an attempt to stop the task.
After this method returns, subsequent calls to isDone will always return true. Subsequent calls to isCancelled will always return true if this method returned true.
--The ExecutorService.invokeAll() method takes a collection of tasks and returns a collection of Futures. The two collections have identical structures; invokeAll() adds the Futures to the returned collection in the order imposed by the task collection's iterator, thus allowing the caller to associate a Future with the Callable it represents. 
--The timed version of invokeAll() will return when all the tasks have completed, the calling thread is interrupted, or the timeout expires.
Any tasks that are not complete when the timeout expires are cancelled. On return from invokeAll(), each task will have either completed normally or been cancelled; the client code can call .get() or .isCancelled() to find out which.

**6.3.8    Example: a travel reservations portal**
пример net.jcip.examples.travelQuotes.TimeBudget.java