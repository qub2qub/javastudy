09 GUI Applications 189-202
If you've tried to write even a simple GUI application using Swing, you know that GUI applications have their own peculiar(исключительно их) threading issues. 
To maintain safety, certain tasks must run in the Swing event thread. 
But you cannot execute long-running tasks in the event thread, lest(из боязни; чтобы не) the UI become unresponsive. 
And Swing data structures are not thread-safe, so you must be careful to confine them to the event thread.

В общем есть 2 потока (видимо у свинга):
1) application thread
2) event thread (обычно только 1 маин срэд)

*** 9.1 Why are GUIs single-threaded? ***
In the old days, GUI applications were single-threaded and GUI events were processed from a "main event loop".
Modern GUI frameworks use a model that is only slightly different: 
they create a dedicated EVENT DISPATCH THREAD (EDT) for handling GUI events.

обычно ис-ся SINGLE-THREADED EVENT QUEUE MODEL in which a dedicated thread fetches events off a queue and dispatches them to application-defined event handlers.

Multithreaded GUI frameworks чувствительны (susceptible) к deadlock, частично из-за неудачных взаимодействий между input event processing и чувствительных к ним object-oriented modeling of GUI components.

Причина дэдлоков в логике обработки события:
например, MouseClick сначала ловится на уровне ОС, потом передаётся приложение, там из него получается высокоуровневый ивент, листенер его как-то обрабатывает, и результат (например изменение цвета) должен обратно транслироваться на уровень ОС, чтобы она перерисовала что-то.
И где здесь дэдлок? 
т.е. разные уровни обработки, туда и назад, и видимо если б было многопоточно, то локи бы брались в разных последовательностях.

Single-threaded GUI frameworks achieve thread safety via THREAD CONFINEMENT; 
all GUI objects, including visual components and data models, are accessed EXCLUSIVELY from the EVENT THREAD. 
Of course, this just pushes some of the thread safety burden back onto the application developer, who must make sure these objects are properly confined.

*** 9.1.1    Sequential event processing ***
GUI приложения работают по принципу обработки событий.
GUI applications are oriented around processing fine-grained events such as mouse clicks, key presses, or timer expirations. Events are a kind of task; the event handling machinery provided by AWT and Swing is structurally similar to an Executor.

Because there is only a single thread for processing GUI tasks, they are processed sequentially.
Минус в том, что если какая-то задача слишком долго выполняется -- то остальные задачи просто ждут её окончания.
И если задача по взаимодействию с юзером тоже в ожидании -- то прилага зависла и ни на что не раегирует.
Therefore, tasks that execute in the event thread must return control to the event thread quickly. To initiate a long-running task such as spell-checking a large document, searching the file system, or fetching a resource over a network, you must run that task in another thread so control can return quickly to the event thread.

*** 9.1.2    Thread confinement in Swing ***
!! The Swing single-thread rule: Swing components and models should be created, modified, and queried only from the event-dispatching thread.
И есть исключения.

The Swing event thread can be thought of as a single-threaded Executor that processes tasks from the event queue. As with thread pools, sometimes the worker thread dies and is replaced by a new one, but this should be transparent to tasks. 

The Swing event thread can be thought of as a single-threaded Executor that processes tasks from the event queue. As with thread pools, sometimes the worker thread dies and is replaced by a new one, but this should be transparent to tasks. Sequential, single-threaded execution is a sensible execution policy when tasks are short-lived, scheduling predictability is not important, or it is imperative that tasks not execute concurrently.

*** 9.2 Short-running GUI tasks ***
In a GUI application, events originate in the event thread and bubble up to application-provided listeners, which will probably perform some computation that affects the presentation objects. For simple, short-running tasks, the entire action can stay in the event thread; for longer-running tasks, some of the processing should be offloaded to another thread.

This trivial example characterizes the majority of interactions between GUI applications and GUI toolkits. So long as tasks are short-lived and access only GUI objects (or other thread-confined or thread-safe application objects), you can almost totally ignore threading concerns and do everything from the event thread, AND THE RIGHT THING HAPPENS.

Swing splits most visual components into two objects, a MODEL and a VIEW. 
Т.е. данные, которые надо отобразить, хранятся в модели.
А правила, как отобразить данные, хранятся во view.
Модель может посылать события, что данные в ней изменились.
А view подписан на эти события. И соотв-но запрашивает эти новые данные из модели и перерисовывает себя если надо.

Again, control never leaves the event thread. (The Swing data model fireXxx methods always call the model listeners directly rather than submitting a new event to the event queue, so the fireXxx methods must be called only from the event thread.)

*** 9.3 Long-running GUI tasks ***
These tasks must run in another thread so that the GUI remains responsive while they run.

ListenerExamples.java
This example gets the long-running task out of the event thread in a "FIRE AND FORGET" manner, which is probably not very useful.
!!! You cannot access presentation objects from the background thread, so on completion the task must submit another task to run in the event thread to update the user interface.

The task [triggered when the button is pressed] is composed of three sequential subtasks whose execution alternates (выполнение чередуется между) between the event thread and the background thread. 
The first subtask updates the user interface to show that a long-running operation has begun and starts the second subtask in a background thread. 
Upon completion, the second subtask queues the third subtask..
third subtask to run again in the event thread, which updates the user interface to reflect that the operation has completed. This sort of "thread hopping" is typical of handling long-running tasks in GUI applications.

*** 9.3.1 Cancellation ***
Any task that takes long enough to run in another thread probably also takes long enough that the user might want to cancel it. You could implement cancellation directly using thread interruption, but it is much easier to use Future, which was designed to manage cancellable tasks.

When you call cancel on a Future with mayInterruptIfRunning set to true, the Future implementation interrupts the thread that is executing the task if it is currently running. If your task is written to be responsive to interruption, it can return early if it is cancelled. Listing 9.6 illustrates a task that polls the thread's interrupted status and returns early on interruption.

Because runningTask is confined to the event thread, no synchronization is required when setting or checking it, and the start button listener ensures that only ONE background task is running at a time. 
However, it would be better to be notified when the task completes so that, for example, the cancel button could be disabled.

*** 9.3.2    Progress and completion indication *** 
FutureTask also has a done() hook that similarly facilitates completion notification. After the background Callable completes, .done() is called. By having done trigger a completion task in the event thread, we can construct a BackgroundTask class providing an onCompletion() hook that is called in the event thread.

BackgroundTask{..} also supports progress indication. 
The compute() method can call setProgress(), indicating progress in numerical terms. 
This causes onProgress() to be called from the event thread, which can update the user interface to indicate progress visually.

*** 9.3.3    SwingWorker ***
In Swing, many of the features developed here are provided by the SwingWorker class, including cancellation, completion notification, and progress indication. Various versions of SwingWorker have been published in The Swing Connection and The Java Tutorial, and an updated version is included in Java 6.

*** 9.4 Shared data models ***
Swing presentation objects, including data model objects such as TableModel or TreeModel, are confined to the event thread. 
In simple GUI programs, all the mutable state is held in the presentation objects and the only thread besides the event thread is the main thread. 
!!!! In these programs enforcing the single-thread rule is easy: don't access the data model or presentation components from the main thread. 
More complicated programs may use other threads to move data to or from a persistent store, such as a file system or database, so as not to compromise responsiveness.

In the simplest case, the data in the data model is ENTERED BY THE USER or LOADED STATICALLY FROM A FILE OR OTHER DATA SOURCE at application startup, in which case the DATA IS NEVER TOUCHED BY ANY THREAD OTHER THAN THE EVENT THREAD. 
But sometimes the presentation model object is only a VIEW ONTO ANOTHER DATA SOURCE, such as a database, file system, or remote service. In this case, more than one thread is likely to touch the data as it goes into or out of the application.
А евент срэд не увидит эти последующие изменения, или увидит невалидное состояние.

For example, you might display the contents of a remote file system using a tree control. 
You wouldn't want to enumerate the entire file system before you can display the tree control—that would take too much time and memory. 
Instead, the tree can be lazily populated as nodes are expanded. Enumerating even a single directory on a remote volume can take a long time, so you may want to do the enumeration in a background task. When the background task completes, you have to get the data into the tree model somehow. 
Т.е. Файловая система - это данные, бэкграунд поток - это 2й кто обращается к данным кроме евент срэда.
This could be done: 
1) by using a thread-safe tree model, 
2) DATA PUSHING: by "pushing" the data from the background task to the event thread by posting a task with invokeLater (бэкграунд потом запостит этот инвоукЛатер в конце когда загрузит данные из файловой системы),
3) DATA POLLING: by having the event thread poll to see if the data is available.

__ data polling _vs_ data pushing __

*** 9.4.1    Thread-safe data models ***
Пока блокировка не сильно влияет на отзывчивость приложения, то можно использовать срэд-сэйф модель (которая как раз и будет с блокировкой).
unduly  [ˈʌnˈdjuːlɪ] чрезмерно, неоправданно, излишне, слишком
As long as responsiveness is not unduly affected by blocking, the problem of multiple threads operating on the data can be addressed with a thread-safe data model. 
If the data model supports fine-grained concurrency, the event thread and background threads should be able to share it without responsiveness problems. 
For example, DelegatingVehicleTracker on page 65 uses an underlying ConcurrentHashMap whose retrieval operations offer a high degree of concurrency. 
The downside is that it does not offer a consistent snapshot [согласованный моментальный снимок] of the data, which may or may not be a requirement. 
Thread-safe data models must also generate events when the model has been updated, so that views can be updated when the data changes.

It may sometimes be possible to get thread safety, consistency and good responsiveness with a VERSIONED DATA MODEL such as CopyOnWriteArrayList. 
When you acquire an iterator for a copy-on-write collection, that iterator traverses the collection as it existed when the iterator was created. 
However, copy-on-write collections offer GOOD PERFORMANCE ONLY WHEN TRAVERSALS GREATLY OUTNUMBER MODIFICATIONS, which would probably not be the case in, say, a vehicle tracking application. 

More specialized versioned data structures may avoid this restriction, but building VERSIONED DATA STRUCTURES that provide both efficient concurrent access and do not retain old versions of data longer than needed is not easy, and thus should be considered only when other approaches are not practical.

*** 9.4.2    Split data models ***
From the perspective of the GUI, the Swing table model classes like TableModel and TreeModel are the official repository for data to be displayed. However, these model objects are often themselves "views" of other objects managed by the application. 
--A program that has both a presentation-domain and an application-domain data model is said to have a SPLIT-MODEL DESIGN.

In a split-model design, есть сразу 2 модели данных:
1) the PRESENTATION MODEL is CONFINED to the EVENT THREAD and 
2) the OTHER MODEL=(SHARED MODEL) IS THREAD-SAFE and may be accessed by both the event thread and application threads. 
The presentation model registers listeners with the shared model so it can be notified of updates. 
The presentation model can then be updated from the shared model by: 
1) SNAPSHOT: by embedding a snapshot of the relevant state in the update message or 
2) BLOCKING: by having the presentation model retrieve the data directly from the shared model when it receives an update event.

The SNAPSHOT APPROACH is simple, but has limitations. 
It works well when the data model is small, updates are not too frequent, and the structure of the two models is similar. 
If the data model is large or updates are very frequent, or if one or both sides of the split contain information that is not visible to the other side, it can be more efficient to send INCREMENTAL UPDATES instead of entire snapshots.
SNAPSHOT APPROACH has the effect of serializing updates on the shared model and recreating them in the event thread against the presentation model. Another advantage of incremental updates is that finer-grained information about what changed can improve the perceived quality of the display — if only one vehicle moves, we don't have to repaint the entire display, just the affected regions.

!! Consider a SPLIT-MODEL DESIGN when 
1) a data model must be shared by more than one thread 
2) and implementing a thread-safe data model would be inadvisable because of blocking, consistency, or complexity reasons.
--Рассматривайте использование этой split-model design, если дата-модель должна быть расшарена между многими потоками, или когда сложно сделать одну модель thread-safe по причинам blocking, consistency, or complexity reasons.

*** 9.5 Other forms of single-threaded subsystems ***
Thread confinement is not restricted to GUIs: it can be used whenever a facility is implemented as a single-threaded subsystem. 
Sometimes thread confinement is forced on the developer for reasons that have nothing to do with avoiding synchronization or deadlock. 
For example, some native libraries require that all access to the library, even loading the library with System.loadLibrary, be made from the same thread.

Borrowing from the approach taken by GUI frameworks, you can easily create a dedicated thread or single-threaded executor for accessing the native library, and provide a proxy object that intercepts calls to the thread-confined object and submits them as tasks to the dedicated thread.
Future and newSingleThreadExecutor work together to make this easy; the proxy method can submit the task and immediately call Future.get() to wait for the result. 
(If the class to be thread-confined implements an interface, you can automate the process of having each method submit a Callable to a background thread executor and waiting for the result using dynamic proxies.)

*** Summary ***
GUI frameworks are nearly always implemented as single-threaded subsystems in which all presentation-related code runs as tasks in an event thread.
Because there is only a single event thread, long-running tasks can compromise responsiveness and so should be executed in background threads. 
Helper classes like SwingWorker or the BackgroundTask class built here, which provide support for cancellation, progress indication, and completion indication, can simplify the development of long-running tasks that have both GUI and non-GUI components.