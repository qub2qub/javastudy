CH_2
What is thread safety?
When you are asked to write a thread-safe code - what are the main concerns?
What is object's state?
What is shared variable?
What is mutable variable?
Whether an object needs to be thread-safe?
Is a thread-safe program one that is constructed entirely of thread-safe classes? 
What is thread-safe class?
Which objects are thread-safe: statefull or stateless?
When it is absolutely required to synchronize access to the variable?
What is race conditions?
The most common types of race conditions?
What is data race?
What is atomic operation?
What is compound action?
What is a built-in locking mechanism for enforcing atomicity?
What is synchronized block (consists of what)? 
What is "acquire" a lock?
What is "release" a lock?
What is MUTEXES = mutual exclusion locks ?
What is atomicity?
What is reentrancy?
Why we need a re-entrant lock?
How to synchronize a compound action?
What data needs to be guarded by locks?
What if a class has invariants that involve more than one state variable?
What is invariant?

CH_3
What is 
What is 
What is 
