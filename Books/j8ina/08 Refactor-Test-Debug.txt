08 Refactor-Test-Debug (206-185=21)
we discuss how several object-oriented design patterns including strategy, template method, observer, chain of responsibility, and factory can be made more concise thanks to lambda expressions. Finally, we explore how you can test and debug code that uses lambda expressions and the Streams API.

It’s more concise because lambda expressions let you represent a piece of behavior in a more compact form in comparison to using anonymous classes.

Your code is more flexible because lambda expressions encourage the style of behavior parameterization. Your code can use and execute multiple behaviors passed as arguments to cope with requirement changes.

8.1.1. Improving code readability
 It’s hard to define what good readability means, because it can be very subjective. The general view is that it means “how easily this code can be understood by another human.” Improving code readability means ensuring your code is understandable and maintainable by people besides you.

Java 8 features can also help improve code readability compared to previous versions:

1-You can reduce the verbosity of your code, making it easier to understand.
2-You can improve the intent of your code by using method references and the Streams API.

8.1.2. From anonymous classes to lambda expressions

By adopting lambda expressions, you produce code that is more succinct and readable.

First, the meanings of this and super are different for anonymous classes and lambda expressions. Inside an anonymous class, this refers to the anonymous class itself, but inside a lambda it refers to the enclosing class. 
Second, anonymous classes are allowed to SHADOW VARIABLES from the enclosing class. Lambda expressions can’t (they’ll cause a compile error)
Finally, converting an anonymous class to a lambda expression can make the resulting code ambiguous in the context of overloading. 

Indeed, the type of anonymous class is explicit at instantiation, but the type of the lambda depends on its context. 
Here’s an example of how this can be problematic. Let’s say you’ve declared a functional interface with the same signature as Runnable, here called Task (this might occur when you need interface names that are more meaningful in your domain model)

You can solve the ambiguity by providing an explicit cast (Task):
doSomething((Task)() -> System.out.println("Danger danger!!"));

8.1.3. From lambda expressions to method references

You can extract the lambda expression into a separate method and pass it as argument to groupingBy. The code becomes more concise and its intent is now more explicit

Moreover, for many common reduction operations such as sum, maximum there are built-in helper methods that can be combined with method references. 

For example, we showed that using the Collectors API you can find the maximum or sum in a clearer way than using a combination of a lambda expression and a lower-level reduce operation.

try using alternative built-in collectors, which state more clearly what the problem statement is. Here we use the collector summingInt (names go a long way in documenting your code):

int totalCalories = menu.stream().collect(summingInt(Dish::getCalories));

8.1.4. From imperative data processing to Streams

The Streams API expresses more clearly the intent of a data processing pipeline. 
In addition, streams can be optimized behind the scenes making use of short-circuiting and laziness, as well as leveraging your multicore architecture

8.1.5. Improving code flexibility
BEHAVIOR PARAMETERIZATION. 
You can represent multiple different behaviors with different lambdas that you can then pass around to execute. This style lets you cope with requirement changes (for example, creating multiple different ways of filtering with a Predicate or comparing with a Comparator).

First, you can’t use lambda expressions without functional interfaces. 

You should therefore start introducing them in your codebase. That sounds good, but in which situations? We discuss two common code patterns that can be refactored to leverage lambda expressions: conditional deferred execution and execute around.

CONDITIONAL DEFERRED EXECUTION
It’s common to see control-flow statements mangled inside business logic code. Typical scenarios include security checks and logging. For example, consider the following code that uses the built-in Java Logger class:

if (logger.isLoggable(Log.FINER)){
    logger.finer("Problem: " + generateDiagnostic());
}
What’s wrong with it? A couple of things:

The state of the logger (what level it supports) is exposed in the client code through the method isLoggable.
Why should you have to query the state of the logger object every time before you can log a message? It just clutters your code.
A better alternative is to make use of the log method, which internally checks to see if the logger object is set to the right level before logging the message:

logger.log(Level.FINER, "Problem: " + generateDiagnostic());

This is a better approach because your code isn’t cluttered with if checks, and the state of the logger is no longer exposed. Unfortunately, there’s still an issue with this code. The logging message is always evaluated, even if the logger isn’t enabled for the message level passed as argument.

This is where lambda expressions can help. What you need is a way to defer the construction of the message so it can be generated only under a given condition (here, when the logger level is set to FINER). It turns out that the Java 8 API designers knew about this problem and introduced an overloaded alternative to log that takes a Supplier as argument. This alternative log method has the following signature:

public void log(Level level, Supplier<String> msgSupplier)
You can now call it as follows:

logger.log(Level.FINER, () -> "Problem: " + generateDiagnostic());

The log method will internally execute the lambda passed as argument only if the logger is of the right level. 

public void log(Level level, Supplier<String> msgSupplier){
if(logger.isLoggable(level)){
log(level, msgSupplier.get()); 
}

What’s the takeaway from the story? If you see yourself querying the state of an object many times in client code (for example, the state of the logger), only to call some method on this object with arguments (for example, log a message), then consider introducing a new method that calls that method (passed as a lambda or method reference) only after internally checking the state of the object. Your code will be more readable (less clutter) and better encapsulated (the state of the object isn’t exposed in client code)!

EXECUTE AROUND
If you find yourself surrounding different code with the same preparation and cleanup phases, you can often pull that code into a lambda. The benefit is that you reuse the logic dealing with the preparation and cleanup phases, thus reducing code duplication.
---------------------

8.2. Refactoring object-oriented design patterns with lambdas

A specific class of patterns is called design patterns.
 They’re a reusable blueprint, [многоразовый план/ШАБЛОН == SET OF REUSABLE SOLUTIONS]
if you will, for a common problem when designing software. It’s a bit like how construction engineers have a set of reusable solutions to construct bridges for specific scenarios (such as suspension bridge, arch bridge, and so on). For example, the visitor design pattern is a common solution for separating an algorithm from a structure on which it needs to operate. The singleton pattern is a common solution to restrict the instantiation of a class to only one object.

They can provide alternative solutions to the problems the design patterns are tackling but often with less work and in a simpler way. Many existing object-oriented design patterns can be made redundant or written in a more concise way using lambda expressions. In this section, we explore five design patterns:
Strategy
Template method
Observer
Chain of responsibility
Factory

8.2.1. Strategy
The strategy pattern is a common solution for representing a family of algorithms and letting you choose among them at runtime. 

(1) An interface to represent some algorithm (the interface Strategy)
(2) One or more concrete implementations of that interface to represent multiple algorithms (the concrete classes ConcreteStrategyA, ConcreteStrategyB)
(3) One or more clients that use the strategy objects

Let’s say you’d like to validate whether a text input is properly formatted for different criteria (for example, it consists of only lowercase letters or is numeric). You start by defining an interface to validate the text (represented as a String):

public interface ValidationStrategy {
    boolean execute(String s);
}
Second, you define one or more implementation(s) of that interface:

public class IsAllLowerCase implements ValidationStrategy {
    public boolean execute(String s){
        return s.matches("[a-z]+");
    }
}

public class IsNumeric implements ValidationStrategy {
    public boolean execute(String s){
        return s.matches("\\d+");
    }
}
You can then use these different validation strategies in your program

As you can see, lambda expressions remove the boilerplate code inherent to the strategy design pattern. If you think about it, lambda expressions encapsulate a piece of code (or strategy), which is what the strategy design pattern was created for, so we recommend that you use lambda expressions instead for similar problems.

8.2.2. Template method

The template method design pattern is a common solution when you need to represent the outline of an algorithm and have the additional flexibility to change certain parts of it. 
Okay, it sounds a bit abstract. In other words, the template method pattern is useful when you find yourself in a situation such as “I’d love to use this algorithm but I need to change a few lines so it does what I want.”

Let’s look at an example of how this pattern works. Say you need to write a simple online banking application. Users typically enter a customer ID, and then the application fetches the customer’s details from the bank database and finally does something to make the customer happy. Different online banking applications for different banking branches may have different ways of making a customer happy (for example, adding a bonus on their account or just sending them less paperwork).

The processCustomer() method provides a sketch for the online banking algorithm: fetch the customer given its ID and then make the customer happy. Different branches can now provide different implementations of the method makeCustomerHappy by subclassing the OnlineBanking class.

Here we introduce a second argument to the method processCustomer of type Consumer<Customer> because it matches the signature of the method makeCustomerHappy defined earlier:

public void processCustomer(int id, Consumer<Customer> makeCustomerHappy){
    Customer c = Database.getCustomerWithId(id);
    makeCustomerHappy.accept(c);
}
You can now plug in different behaviors directly without subclassing the OnlineBanking class by passing lambda expressions:

new OnlineBankingLambda().processCustomer(1337, (Customer c) ->
     System.out.println("Hello " + c.getName());
---------------------------------

8.2.3. Observer

The observer design pattern is a common solution when an object (called the SUBJECT) needs to automatically notify a list of other objects (called OBSERVERS) when some event happens (for example, a state change). 

You typically come across this pattern when working with GUI applications. You register a set of observers on a GUI component such as button. If the button is clicked, the observers are notified and can execute a specific action. But the observer pattern isn’t limited to GUIs. For example, the observer design pattern is also suitable in a situation where several traders (observers) may wish to react to the change of price of a stock (subject). 

several newspaper agencies (NY Times, The Guardian, and Le Monde) are subscribed to a feed of news tweets and may want to receive a notification if a tweet contains a particular keyword.

First, you need an Observer interface that groups the different observers. It has just one method called notify that will be called by the subject (Feed) when a new tweet is available:

interface Observer {
    void notify(String tweet);
}
You can now declare different observers (here, the three newspapers) that produce a different action for each different keyword contained in a tweet

The subject can register a new observer using the registerObserver method and notify his observers of a tweet with the notifyObservers method.

the feed keeps an internal list of observers that it can then notify when a tweet arrives.

 Instead of instantiating three observer objects explicitly, you can pass a lambda expression directly to represent the behavior to execute:

Should you use lambda expressions all the time? The answer is no! In the example we described, lambda expressions work great because the behavior to execute is simple, so they’re helpful to remove boilerplate code. But the observers may be more complex: they could have state, define several methods, and the like. In those situations, you should stick with classes.
---------------

8.2.4. Chain of responsibility
The chain of responsibility pattern is a common solution to create a chain of processing objects (such as a chain of operations). 
One processing object may do some work and pass the result to another object, which then also does some work and passes it on to yet another processing object, and so on.

Generally, this pattern is implemented by defining an abstract class representing a processing object that defines a field to keep track of a successor. Once it has finished its work, the processing object hands over its work to its successor. In code it looks like this:

public abstract class ProcessingObject<T> {

    protected ProcessingObject<T> successor; // преемник, наследник, последователь, продолжатель

    public void setSuccessor(ProcessingObject<T> successor){
        this.successor = successor;
    }

    public T handle(T input){
        T r = handleWork(input);
        if(successor != null){
            return successor.handle(r);
        }
        return r;
    }

    abstract protected T handleWork(T input);
}

Here you may recognize the template method design pattern, which we discussed in section 8.2.2. The method handle provides an outline of how to deal with a piece of work. Different kinds of processing objects can be created by subclassing the class ProcessingObject and by providing an implementation for the method handleWork.

Using lambda expressions
Wait a minute! This pattern looks like chaining (that is, composing) functions! We discussed how to compose lambda expressions in chapter 3. You can represent the processing objects as an instance of Function<String, String> or more precisely a UnaryOperator<String>. To chain them you just need to compose these functions by using the andThen() method!
--------------------------

8.2.5. Factory
The factory design pattern lets you create objects without exposing the instantiation logic to the client. 
For example, let’s say you’re working for a bank and they need a way of creating different financial products: loans, bonds, stocks, and so on.

Typically you’d create a Factory class with a method that’s responsible for the creation of different objects

This is quite a neat way to make use of the Java 8 feature to achieve the same intent as the factory pattern. But this technique DOESN’T SCALE VERY WELL if the factory method createProduct needs to take multiple arguments to pass on to the product constructors! 
You’d have to provide a different functional interface than a simple Supplier.

For example, suppose you want to store constructors for products that take three arguments (two Integers and a String); you’d need to create a special functional interface TriFunction to support this. As a result, the signature of the Map becomes more complex:

public interface TriFunction<T, U, V, R>{
    R apply(T t, U u, V v);
}
Map<String, TriFunction<Integer, Integer, String, Product>> map
    = new HashMap<>();
------------------------------

8.3. Testing lambdas

8.3.1. Testing the behavior of a visible lambda
This works nicely because the method moveRightBy is public. Therefore, it can be tested inside the test case. But lambdas don’t have a name (they’re anonymous functions, after all), so it’s trickier to test them in your code because you can’t refer to them by a name!

Sometime you may have access to a lambda via a field so you can reuse it, and you’d really like to test the logic encapsulated in that lambda. What can you do? You could test the lambda just like when calling methods. For example, let’s say you add a static field compareByXAndThenY in the Point class that gives you access to a Comparator object

Remember that lambda expressions generate an instance of a functional interface. As a result, you can test the behavior of that instance. Here, you can now call the method compare() on the Comparator object compareByXAndThenY with different arguments to test that its behavior.

8.3.2. Focusing on the behavior of the method using a lambda
But the purpose of lambdas is to encapsulate a one-off piece of behavior to be used by another method. In that case you shouldn’t make lambda expressions available publicly; they’re only an implementation detail. 
Instead, we argue that YOU SHOULD TEST THE BEHAVIOR OF THE METHOD THAT USES A LAMBDA EXPRESSION.

Note that in the unit test just shown, it’s important that the Point class implement the equals() method appropriately; otherwise it will rely on the default implementation from Object!

8.3.3. Pulling complex lambdas into separate methods
Perhaps you come across a really complicated lambda expression that contains a lot of logic (for example, a technical pricing algorithm with corner cases). 
     What do you do, because you can’t refer to the lambda expression inside your test? One strategy is to CONVERT THE LAMBDA EXPRESSION INTO A METHOD REFERENCE (which involves declaring a new regular method)
You can then test the behavior of the new method in your test as you would with any regular method.
т.е. сделать отдельный метод с if-ами например, куда передаётся итерируемый объект, и этот метод вызываться там, где была бы эта лямбда.

8.3.4. Testing high-order functions
Methods that take a function as argument or return another function (so-called HIGHER-ORDER FUNCTIONS) are a little harder to deal with. One thing you can do if a method takes a lambda as argument is test its behavior with different lambdas.

What if the method that needs to be tested returns another function? You can test the behavior of that function by treating it as an instance of a functional interface, as we showed earlier with a Comparator.

Unfortunately, not everything works the first time, and your tests may report some errors related to your use of lambda expressions. So we now turn to debugging!

8.4. Debugging
When your program has stopped (for example, because an exception was thrown), the first thing you need to know is where it stopped and how it got there. This is where stack frames are useful. Each time your program performs a method call, information about the call is generated, including the location of the call in your program, the arguments of the call, and the local variables of the method being called. This information is stored on a stack frame.

When your program fails, you get a stack trace, which is a summary of how your program got to that failure, stack frame by stack frame. In other words, you get a list of valuable method calls up to when the failure appeared. This helps you understand how the problem occurred.

lambda$main$0

Note that if a method reference refers to a method declared in the same class as where it’s used, then it will appear in the stack trace. For instance, in the following example

-------------------
stream operation .peek() can help. Its purpose is to execute an action on each element of a stream as it’s consumed. But it doesn’t consume the whole stream like forEach does; it forwards the element it performed an action on to the next operation in the pipeline.
you use peek to print the intermediate value before and after each operation in the stream pipeline

8.5. Summary
Following are the key concepts you should take away from this chapter:

(1) Lambda expressions can make your code more readable and flexible.
(2) Consider converting anonymous classes to lambda expressions, but be wary of subtle semantic differences such as the meaning of the keyword this and shadowing of variables.
(3) Method references can make your code more readable compared to lambda expressions.
(4) Consider converting iterative collection processing to use the Streams API.
(5) Lambda expressions can help remove boilerplate code associated with several object-oriented design patterns such as strategy, template method, observer, chain of responsibility, and factory.
(6) Lambda expressions can be unit tested, but in general you should focus on testing the behavior of the methods where the lambda expressions appear.
(7) Consider extracting complex lambda expressions into regular methods.
(8) Lambda expressions can make stack traces less readable.
(9) The peek() method of a stream is useful to log intermediate values as they flow past at certain points in a stream pipeline.