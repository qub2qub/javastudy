09 Default methods 224-207=17

Traditionally, a Java interface groups related methods together into a contract. Any class that implements an interface must provide an implementation for each method defined by the interface or inherit the implementation from a superclass. But this causes a problem when library designers need to update an interface to add a new method. 
Indeed, existing concrete classes (which may not be under their control) need to be modified to reflect the new interface contract. This is particularly problematic because the Java 8 API introduces many new methods on existing interfaces, such as the sort method on the List interface that you used in previous chapters. 
Imagine all the angry maintainers of alternative collection frameworks such as Guava and Apache Commons who now need to modify all the classes implementing the List interface to provide an implementation for the sort method too!

But don’t worry. Java 8 introduces a new mechanism to tackle this problem. It might sound surprising, but 
    INTERFACES IN JAVA 8 CAN NOW DECLARE METHODS WITH IMPLEMENTATION CODE; this can happen in two ways. 

First, JAVA 8 ALLOWS STATIC METHODS INSIDE INTERFACES. 
Second, Java 8 introduces a new feature called DEFAULT METHODS that allows you to provide a default implementation for methods in an interface. 

In other words, interfaces can provide concrete implementation for methods. As a result, existing classes implementing an interface will automatically inherit the default implementations if they don’t provide one explicitly. This allows you to evolve interfaces nonintrusively.
--> sort() in the List interface and stream() in the Collection interface.

default void sort(Comparator<? super E> c){
    Collections.sort(this, c);
}

 Comparator .naturalOrder() method. It’s a new static method in the Comparator interface that returns a Comparator object to sort the elements in natural order (the standard alphanumerical sort).

 Are interfaces like abstract classes now? Yes and no; there are fundamental differences: The main users of default methods are library designers. As we explain later, default methods were introduced to evolve libraries such as the Java API in a compatible way.

 In a nutshell, adding a method to an interface is the source of many problems; existing classes implementing the interface need to be changed to provide an implementation for the method. If you’re in control of the interface and all the implementations, then it’s not too bad. But this is often not the case. This is the motivation for default methods: they let classes automatically inherit a default implementation from an interface.

So if you’re a library designer, this chapter is important because default methods provide a means to evolve interfaces without causing modifications to existing implementations. Also, as we explain later in the chapter, default methods can help structure your programs by providing a flexible mechanism for multiple inheritance of behavior: a class can inherit default methods from several interfaces. Therefore, you may still be interested in finding out about default methods even if you’re not a library designer.

**********************************
STATIC METHODS AND INTERFACES
A common pattern in Java is to define both an interface and a utility companion class defining many static methods for working with instances of the interface. For example, Collections is a companion class to deal with Collection objects. Now that static methods can exist inside interfaces, such utility classes in your code can go away and their static methods can be moved inside an interface. These companion classes will remain in the Java API in order to preserve backward compatibility.
**********************************

9.1. Evolving APIs
Adding a new method to an interface is BINARY COMPATIBLE; this means existing class file implementations will still run without the implementation of the new method, if there’s no attempt to recompile them. 

In this case the game will still run (unless it’s recompiled) despite adding the method setRelativeSize to the Resizable interface. Nonetheless, the user could modify the method Utils.paint in his game to use the method setRelativeSize because the paint method expects a list of Resizable objects as argument. If an Ellipse object is passed, an error will be thrown at run-time because the setRelative-Size method isn’t implemented.
----
Consequently, updating a published API creates backward incompatibilities. This is why evolving existing APIs, such as the official Java Collections API, causes problems for users of the APIs. There are alternatives to evolving an API, but they’re poor choices. For example, you could create a separate version of your API and maintain both the old and the new versions, but this is inconvenient for several reasons. First, it’s more complex for you to maintain as a library designer. Second, your users may have to use both versions of your API in the same codebase, which impacts memory space and loading time because more class files are required for their projects.

*******************************
Different types of compatibilities: binary, source, and behavioral
There are three main kinds of compatibility when introducing a change to a Java program: BINARY, SOURCE, AND BEHAVIORAL COMPATIBILITIES. (https://blogs.oracle.com/darcy/entry/kinds_of_compatibility)

You saw that adding a method to an interface is binary compatible but results in a compiler error if the class implementing the interface is recompiled. It’s good to know the different kinds of compatibilities, so let’s examine them in more detail.

BINARY COMPATIBILITY means existing binaries running without errors continue to link (which involves verification, preparation, and resolution) without error after introducing a change. For example, just adding a method to an interface is binary compatible because if it’s not called, existing methods of the interface can still run without problems.

In its simplest form, SOURCE COMPATIBILITY means an existing program will still compile after introducing a change. For example, adding a method to an interface isn’t source compatible; existing implementations won’t recompile because they need to implement the new method.

Finally, BEHAVIORAL COMPATIBILITY means running a program after a change with the same inputs results in the same behavior. For example, adding a method to an interface is behavioral compatible because the method is never called in the program (or it gets overridden by an implementation).
********************************************

9.2. Default methods in a nutshell
Default methods are a new feature added in Java 8 to help evolve APIs in a compatible way. An interface can now contain method signatures for which an implementing class doesn’t provide an implementation. So who implements them? The missing method bodies are given as part of the interface (hence default implementations) rather than in the implementing class.

It starts with a "default" modifier and contains a body just like a method declared in a class. 

adding a method to an interface with a default implementation isn’t a source incompatibility. = т.е. явл-ся SOURCE COMPATIBILITY
--------------
What happens if an implementing class also defines the same method signature or if default methods can be overridden? 

(remember, a functional interface contains only one abstract method; default methods are non-abstract methods).

***********************
Abstract classes vs. interfaces in Java 8
> First, a class can extend only from one abstract class, but a class can implement multiple interfaces.
> Second, an abstract class can enforce a common state through instance variables (fields). An interface can’t have instance variables.
***********************

9.3. Usage patterns for default methods 
--  OPTIONAL METHODS
With default methods, you can provide a default implementation for such methods, so concrete classes don’t need to explicitly provide an empty implementation.

-- MULTIPLE INHERITANCE OF BEHAVIOR == This is the ability of a class to reuse code from multiple places
Classes in Java can inherit from only one other class, but classes have always been allowed to implement multiple interfaces.
ArrayList is extending one class and implementing six interfaces. As a result, an ArrayList is a direct subtype of seven types: AbstractList, List, RandomAccess, Cloneable, Serializable, Iterable, and Collection.
Because interface methods can have implementations in Java 8, classes can inherit behavior (implementation code) from multiple interfaces.

public interface Rotatable {
    void setRotationAngle(int angleInDegrees);
    int getRotationAngle();
    default void rotateBy(int angleInDegrees) {
        setRotationAngle((getRotationAngle() + angleInDegrees) % 360);
    }
}
This technique is somewhat related to the template design pattern where a skeleton algorithm is defined in terms of other methods that need to be implemented.

Here’s another advantage of defining simple interfaces with default implementations like the ones for your game. Let’s say you need to modify the implementation of moveVertically to make it more efficient. You can now change its implementation directly in the Moveable interface, and all classes implementing it will automatically inherit the code (provided they didn’t implement the method themselves)!

******************
Inheritance considered harmful
Inheritance shouldn’t be your answer to everything when it comes down to reusing code. For example, inheriting from a class that has 100 methods and fields just to reuse one method is a bad idea, because it adds unnecessary complexity. You’d be better off using delegation: create a method that calls directly the method of the class you need via a member variable. This is why you’ll sometime find classes that are declared “final” intentionally: they can’t be inherited from to prevent this kind of antipattern or have their core behavior messed with. Note that sometimes final classes have a place; for example, String is final because we don’t want anybody to be able to interfere with such core functionality.

The same idea is applicable to interfaces with default methods. By keeping your interface minimal, you can achieve greater composition because you can select only the implementations you need.
******************

9.4. Resolution rules
in Java 8, there’s the possibility of a class inheriting more than one method with the same signature. 
what if a class implements two interfaces that have the same default method signature? Which method is the class allowed to use?

There are three rules to follow when a class inherits a method with the same signature from multiple places (such as another class or interface):

1.  CLASSES ALWAYS WIN. A method declaration in the class or a superclass takes priority over any default method declaration.
2.  Otherwise, SUB-INTERFACES WIN: the method with the same signature in the most specific default-providing interface is selected. (If B extends A, B is more specific than A).
3.  Finally, if the choice is still ambiguous, the class inheriting from multiple interfaces has to explicitly select which default method implementation to use by OVERRIDING IT AND CALLING THE DESIRED METHOD EXPLICITLY.

Rule 1 says that a method declaration in the class takes priority.
Rule 2 says that if there are no methods in the class or superclass, then the method with the most specific default-providing interface is selected. 
Rule 3 says если у тут ничего не подошло - то надо явно заоверрайдить метод и указать какой из них вызывать.

----
Let’s say now that B doesn’t extend A anymore:
Rule 2 doesn’t help you now because there’s no more-specific interface to select. Both hello methods from A and B could be valid options. 
Thus, the Java compiler will produce a compile error because it doesn’t know which method is more suitable: “Error: class C inherits unrelated defaults for hello() from types B and A.”
There aren’t many solutions to resolve the conflict between the two possible valid methods; you have to explicitly decide which method declaration you want C to use. To do this, you can override the hello method in class C and then in its body explicitly call the method you wish to use. Java 8 introduces the new syntax X.super.m(...) where X is the superinterface whose method m you want to call. 

9.4.4. Diamond problem
 	public interface A{
        default void hello(){
            System.out.println("Hello from A");
        }
    }
    public interface B extends A { }
    public interface C extends A { }
    public static class D implements B, C { }
--So what default method declaration does D inherit—the one from B or the one from C? There’s actually only one method declaration to choose from. Only A declares a default method. Because the interface is a superinterface of D, the code will print “Hello from A.”
--Now what happens if B also has a default hello method with the same signature? Rule 2 says that you select the most specific default-providing interface. Because B is more specific than A, the default method declaration from B will be selected. If both B and C declare a hello method with the same signature, you have a conflict and need to solve it explicitly, as we showed earlier.
--Just as a side note, you may be wondering what happens if you add an abstract hello method (one that’s not default) in interface C as follows (still no methods in A and B):
The new abstract hello method in C takes priority over the default hello method from interface A because C is more specific. Therefore, class D now needs to provide an explicit implementation for hello; otherwise the program won’t compile.

********************
(1) First, an EXPLICIT METHOD DECLARATION IN THE CLASS OR A SUPERCLASS takes priority over any default method declaration.
(2) Otherwise, the method with the same signature in the MOST SPECIFIC DEFAULT-PROVIDING INTERFACE is selected.
(3) Finally, if there’s still a conflict, you have to EXPLICITLY OVERRIDE THE DEFAULT METHODS and CHOOSE which one your class should use.

9.5. Summary

(1) Interfaces in Java 8 can have implementation code through default methods and static methods.
(2) Default methods start with a default keyword and contain a body like class methods do.
(3) Adding an abstract method to a published interface is a source incompatibility.
(4) Default methods help library designers evolve APIs in a backward-compatible way.
(5) Default methods can be used for creating optional methods and MULTIPLE INHERITANCE OF BEHAVIOR.
(6) There are resolution rules to resolve conflicts when a class inherits from several default methods with the same signature.
(7) A method declaration in the class or a superclass takes priority over any default method declaration. Otherwise, the method with the same signature in the most specific default-providing interface is selected.
(8) When two methods are equally specific, a class can explicitly override a method and select which one to call.