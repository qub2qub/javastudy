soap
описываются в wsdl, т.е. стандартизированный.
в нём есть ограничения только на xml, отдаёшь и принимаешь только xml.
в любом случае реквест пойдёт на сервер, и там уже проверит кэш.

в xsd можно описать разные типы.
soap framework - описываю всдл и xsd, он генерит сервис и классы(request и respose).
на том конце определяешь интерфейс impl, и дожен описать каждые метод и wsdl файла, чтобы он понял респонс, который придёт.

область применения - простой веб сервис, что-то отдаёшь что-то получаешь
приходит реквест создать пользователя, 
например прилага к-я пок-ет курсы валют, есть урл.
например в параметрах реквеста указать нужные параметры.
java app импортирую этот soap интерфейс и дёргаю его метод.
sopa должен поддерживать распределённые транзанции, у него есть transaction ID, 
===============================================
soap может не только по хттп, но и любой другой протокол, который может передавать xml, т.к. соап ис-ет xsd для описания типов, а xsd - для описания xml/
соап также может передаваться по протоколу JMS - java message service. 
SOAP = XML.
какие плюся и минусы соап.
[+-] - wikipedia - 
в java автоматом делаются объекты для соап (т.е. не так уж и сложно, поэтому при использовании java минусов как бы и нет), а например для javascript надо что-то придумывать.
1) minus - большой размер сообщения, замедляет скорость.
2) не использует http протокол полностью, поэтому не позволяет кэшировать на уровне хттп запросы: например написал request и ему задал время кэша, и браузер может его хранить, а в соап запрос полюбому пойдёт туда на сервер.
soap _ это только строки, и конвертится всё в строку, и все форматы передаются через строки.
------------------------------
rest - по максимуму используют Http протокол.
в нём можешь описать content-type, (а ля формат)
supported formats - прописываешь, и сам rest фреймворк будет преобразовать данные в эти форматы
в хттп есть кэш на уровне протокола, то например в браузере гет реквест уже закэширован.
PUT - делает update, свалится если объекта нет
POST - создаёт новый объект., свалится если объект уже есть.
оба используют body.
область применения - из ui javascript легко могу дёрнуть rest
например прилага к-я пок-ет курсы валют. например RESR get usd/rus
рест не поддерживает транзанции
===========================================
rest - он может только по хттп и использоваться, и ни по каким другим.
можно придумать любой формат передачи.
какие реализации rest servicov я знаю?
можно сделать на уровне сокетов...
а можно с использованием фреймворка какого-то, spring например. https://en.wikipedia.org/wiki/Java_API_for_RESTful_Web_Services
