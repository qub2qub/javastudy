<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<title>GitConfig</title>
	<link rel="stylesheet" href="grey.css">
</head>
<body>
<a href="http://nerderati.com/2011/03/17/simplify-your-life-with-an-ssh-config-file/">src</a>
<div class="post-content cye-lm-tag" itemprop="articleBody">
    <p class="cye-lm-tag">If you're anything like me, you probably log in and out of a half dozen remote servers (or these days, local virtual machines)
on a daily basis. And if you're even <em>more</em> like me, you have trouble remembering all of the various usernames, remote
addresses and command line options for things like specifying a non-standard connection port or forwarding local ports to the remote machine.</p>

<h3 id="shell-aliases">Shell Aliases</h3>

<p class="cye-lm-tag">Let's say that you have a remote server named <code>dev.example.com</code>, which has <em>not</em> been set up with public/private keys
for password-less logins. The username to the remote account is <em>fooey</em>, and to reduce the number of scripted login attempts,
you've decided to change the default SSH port to <code>2200</code> from the normal default of <code>22</code>. This means that a typical command would look like:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv cye-lm-tag">$ </span>ssh fooey@dev.example.com -p 22000
password: *************</code></pre></figure>

<p class="cye-lm-tag">Not too bad.</p>

<p class="cye-lm-tag">We can make things simpler and more secure by using a public/private key pair; I highly recommend using <a href="http://linux.die.net/man/1/ssh-copy-id">ssh-copy-id</a> for moving your public keys around. It will save you quite a few folder/file permission headaches.</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv cye-lm-tag">$ </span>ssh fooey@dev.example.com -p 22000
<span class="c cye-lm-tag"># Assuming your keys are properly setup…</span></code></pre></figure>

<p class="cye-lm-tag">Now this doesn't seem all that bad. To cut down on the verbosity you could create a simple alias in your shell as well:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv cye-lm-tag">$ </span><span class="nb cye-lm-tag">alias </span><span class="nv cye-lm-tag">dev</span><span class="o cye-lm-tag">=</span><span class="s1 cye-lm-tag">'ssh fooey@dev.example.com -p 22000'</span>
<span class="nv cye-lm-tag">$ </span>dev <span class="c cye-lm-tag"># To connect</span></code></pre></figure>

<p class="cye-lm-tag">This works surprisingly well: Every new server you need to connect to, just add an alias to your <code>.bashrc</code> (or <code>.zshrc</code> if you hang with the cool kids), and voilà.</p>

<h3 id="sshconfig">~/.ssh/config</h3>

<p class="cye-lm-tag">However, there's a much more elegant and flexible solution to this problem. Enter the SSH config file:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="c cye-lm-tag"># contents of $HOME/.ssh/config</span>
Host dev
    HostName dev.example.com
    Port 22000
    User fooey</code></pre></figure>

<p class="cye-lm-tag">This means that I can simply <code>$ ssh dev</code>, and the options will be read from the configuration file. Easy peasy. Let's see what else we can do with just a few simple configuration directives.</p>

<p class="cye-lm-tag">Personally, I use quite a few public/private keypairs for the various servers and services that I use, to ensure
that in the event of having one of my keys compromised the damage is as restricted as possible. For example,
I have a key that I use uniquely for my <a href="https://github.com/jperras">Github</a> account. Let's set it up so that
that particular private key is used for all my github-related operations:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">Host dev
    HostName dev.example.com
    Port 22000
    User fooey
Host github.com
    IdentityFile ~/.ssh/github.key</code></pre></figure>

<p class="cye-lm-tag">The use of <code>IdentityFile</code> allows me to specify exactly which private key I wish to use for authentification with
the given host. You can, of course, simply specify this as a command line option for "normal" connections:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv cye-lm-tag">$ </span>ssh -i ~/.ssh/blah.key username@host.com</code></pre></figure>

<p class="cye-lm-tag">but the use of a config file with <code>IdentityFile</code> is <a href="https://git.wiki.kernel.org/index.php/GitTips#How_to_pass_ssh_options_in_git.3F">pretty much your only option</a> if you want to specify which identity to use for any git commands. This also opens up the very interesting concept of further
segmenting your github keys on something like a per-project or per-organization basis:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">Host github-project1
    User git
    HostName github.com
    IdentityFile ~/.ssh/github.project1.key
Host github-org
    User git
    HostName github.com
    IdentityFile ~/.ssh/github.org.key
Host github.com
    User git
    IdentityFile ~/.ssh/github.key</code></pre></figure>

<p class="cye-lm-tag">Which means that if I want to clone a repository using my organization credentials, I would use the following:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv cye-lm-tag">$ </span>git clone git@github-org:orgname/some_repository.git</code></pre></figure>

<h3 id="going-further">Going further</h3>

<p class="cye-lm-tag">As any security-conscious developer would do, I set up firewalls on all of my servers and make them as restrictive
as possible; in many cases, this means that the only ports that I leave open are <code>80/443</code> (for webservers), and port
<code>22</code> for SSH (or whatever I might have remapped it to for obfuscation purposes). On the surface, this seems to prevent
me from using things like a desktop MySQL GUI client, which expect port <code>3306</code> to be open and accessible on the remote
server in question. The informed reader will note, however, that a simple local port forward can save you:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv cye-lm-tag">$ </span>ssh -f -N -L 9906:127.0.0.1:3306 coolio@database.example.com
<span class="c cye-lm-tag"># -f puts ssh in background</span>
<span class="c cye-lm-tag"># -N makes it not execute a remote command</span></code></pre></figure>

<p class="cye-lm-tag">This will forward all local port <code>9906</code> traffic to port <code>3306</code> on the remote <code>database.example.com</code> server, letting me
point my desktop GUI to localhost (<code>127.0.0.1:9906</code>) and have it behave exactly as if I had exposed port
<code>3306</code> on the remote server and connected directly to it.</p>

<p class="cye-lm-tag">Now I don't know about you, but remembering that sequence of flags and options for <a href="http://linux.die.net/man/1/ssh">SSH</a> can be
a complete pain. Luckily, our config file can help alleviate that:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">Host tunnel
    HostName database.example.com
    IdentityFile ~/.ssh/coolio.example.key
    LocalForward <span class="m cye-lm-tag">9906</span> 127.0.0.1:3306
    User coolio</code></pre></figure>

<p class="cye-lm-tag">Which means I can simply do:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv cye-lm-tag">$ </span>ssh -f -N tunnel</code></pre></figure>

<p class="cye-lm-tag">And my local port forwarding will be enabled using all of the configuration directives I set up for the tunnel host. Slick.</p>

<h3 id="homework">Homework</h3>

<p class="cye-lm-tag">There are quite a few configuration options that you can specify in <code>~/.ssh/config</code>, and I highly suggest consulting
the online <a href="http://linux.die.net/man/5/ssh_config">documentation</a> or the <strong>ssh_config</strong> man page. Some interesting/useful
things that you can do include: change the default number of connection attempts, specify local environment variables to be
passed to the remote server upon connection, and even the use of * and ? wildcards for matching hosts.</p>

<p class="cye-lm-tag">I hope that some of this is useful to a few of you. Leave a note in the comments if you have any cool tricks for the
SSH config file; I'm always on the lookout for fun hacks.</p>
  </div>


<br><hr>
<a href="https://superuser.com/questions/232373/how-to-tell-git-which-private-key-to-use">stackoverflow</a>

<div class="post-text" itemprop="text">
<p class="cye-lm-tag">There is <strong>no <em>direct</em> way</strong> to tell <code>git</code> which private key to use, because it relies on <code>ssh</code> for repository authentication. However, there are still a few ways to achieve your goal:</p>

<h2>Option 1: <code>ssh-agent</code></h2>

<p class="cye-lm-tag">You can use <code>ssh-agent</code> to temporarily authorize your private key.</p>

<p class="cye-lm-tag">For example:</p>

<pre><code>$ ssh-agent sh -c 'ssh-add ~/.ssh/id_rsa; git fetch user@host'
</code></pre>

<h2>Option 2: <code>GIT_SSH_COMMAND</code></h2>

<p class="cye-lm-tag">Pass the ssh arguments by using the <code>GIT_SSH_COMMAND</code> environment variable
(Git 2.3.0+).</p>

<p class="cye-lm-tag">For example:</p>

<pre><code>$ GIT_SSH_COMMAND='ssh -i ~/.ssh/id_rsa -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no' \
 git clone user@host
</code></pre>

<p class="cye-lm-tag"><sub>You can type this all on one line — leave out the <code>\</code>.</sub></p>

<h2>Option 3: <code>GIT_SSH</code></h2>

<p class="cye-lm-tag">Pass the ssh arguments by using the <code>GIT_SSH</code> environment variable.</p>

<p class="cye-lm-tag">For example:</p>

<pre><code>$ echo 'ssh -i ~/.ssh/id_rsa -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no $*' &gt; ssh
$ chmod +x ssh
$ GIT_TRACE=1 GIT_SSH='./ssh' git clone user@host
</code></pre>

<p class="cye-lm-tag"><sub>Note: The above lines are shell (terminal) command lines which you should paste into your terminal. They will create a file named <em><code>ssh</code></em>, make it executable, and (indirectly) execute it.</sub></p>

<h2>Option 4: <code>~/.ssh/config</code></h2>

<p class="cye-lm-tag">Use the <code>~/.ssh/config</code> file as suggested in other answers in order to specify the location of your private key.</p>
    </div>
</body>
</html>