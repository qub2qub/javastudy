git config --global --list
git config --global alias.po 'push origin'

Для того, чтобы добавить удалённый репозиторий и присвоить ему имя (shortname), просто выполните команду 
git remote add [shortname] [url]

$ git remote
origin
$ git remote add pb git://github.com/paulboone/ticgit.git
$ git remote -v
origin  git://github.com/schacon/ticgit.git
pb  git://github.com/paulboone/ticgit.git

https://git-scm.com/book/ru/v2/%D0%9E%D1%81%D0%BD%D0%BE%D0%B2%D1%8B-Git-%D0%A0%D0%B0%D0%B1%D0%BE%D1%82%D0%B0-%D1%81-%D1%83%D0%B4%D0%B0%D0%BB%D1%91%D0%BD%D0%BD%D1%8B%D0%BC%D0%B8-%D1%80%D0%B5%D0%BF%D0%BE%D0%B7%D0%B8%D1%82%D0%BE%D1%80%D0%B8%D1%8F%D0%BC%D0%B8
https://git-scm.com/book/en/v2/Git-Basics-Working-with-Remotes

Push
Когда вы хотите поделиться своими наработками из своей ветки, вам необходимо отправить (push) их в главный репозиторий. Команда для этого действия простая: 
			git push [удал. сервер] [своя ветка]
Чтобы отправить вашу ветку master на сервер origin (повторимся, что клонирование, как правило, настраивает оба этих имени автоматически), вы можете выполнить следующую команду для отправки наработок на сервер:

$ git push origin master

-----------------------------------------------------
https://habrahabr.ru/company/mailru/blog/318508/
1 
git config --global alias.please 'push --force-with-lease'
Git-опция --force-with-lease действует гораздо аккуратнее: она проверяет, чтобы ваша локальная копия ref’а была самой свежей, прежде чем накатить её. Это означает, что вы как минимум подтянули все изменения, которые собираетесь затоптать.


2
git config --global alias.commend 'commit --amend --no-edit'
Бывало так, что вы закоммитили и тут же сообразили, что забыли проиндексировать (stage) файл? Больше не нужно об этом беспокоиться! Алиас git commend тихо прикрепляет к последнему созданному вами коммиту все проиндексированные файлы, повторно используя уже имеющееся сообщение о коммите.

3
git config --global alias.it \
'!git init && git commit -m “root” --allow-empty'

Первому коммиту в репозитории нельзя сделать ребейз, как обычному. Поэтому рекомендуется в качестве корневого создавать пустой коммит. Алиас git it инициализирует ваш репозиторий и за одну операцию создаёт пустой корневой коммит. И когда вы в следующий раз запустите проект, то не надо просто добавлять его в систему управления версиями: выполните git it

4
$ git config --global alias.stsh 'stash --keep-index'
$ git config --global alias.staash 'stash --include-untracked'
$ git config --global alias.staaash 'stash --all'

git stash — одна из самых восхитительных и полезных Git-команд. Она регистрирует все изменения, вносимые в отслеживаемый файл в вашем рабочем дереве, и скрывает их для последующего использования, а вам показывает чистое дерево, чтобы вы могли спокойно работать с другой его частью. Но если вы создали новые файлы и ещё не проиндексировали их, то по умолчанию git stash их не тронет, поэтому у вас будет неопрятное рабочее дерево. Соответственно, по умолчанию не скрывается и содержимое неотслеживаемых или игнорируемых файлов.
Я сделал несколько удобных алиасов для разных вариантов git stash, в зависимости от того, какие биты вашего рабочего дерева нужно скрыть:

git stsh      'stash --keep-index' # скрывает только непроиндексированные изменения в отслеживаемых файлах 
git stash     # скрывает все изменения в отслеживаемых файлах 
git staash    'stash --include-untracked' # скрывает неотслеживаемые и отслеживаемые файлы 
git staaash   'stash --all' # скрывает игнорируемые, неотслеживаемые и отслеживаемые файлы
Если сомневаетесь в выборе, то самый длинный алиас (git staaash) всегда сможет восстановить рабочее дерево состояния свежего клона вашего репозитория.

6
git config --global alias.shorty 'status --short --branch'
Я запускаю git status чаще любой другой Git-команды. Встроенная помощь в Git за последние годы стала куда удобнее, что очень хорошо для начинающих, но для более опытных пользователей информация слишком многословна. Например, git status объясняет мне в 12 строках, что у меня пара индексированных, неиндексированных и неотслеживаемых изменений:

7
git config --global alias.merc 'merge --no-ff'
Если вы используете обычный рабочий процесс ветвления без ребейза, то будет не лучшим решением запускать стандартный git merge для слияния веток с фичами с мастер-веткой. Если не добавить к этой команде опции, то по умолчанию станет использоваться стратегия слияния --ff, при которой новый коммит слияния будет создан только в том случае, если в мастер-ветке нет новых изменений. В противном случае мастер-ветка просто «перемотается» до места последнего коммита в вашей ветке. Лишь иногда, создавая коммит слияния, при просмотре Git-истории бывает непросто сказать, какой код был разработан в какой ветке.

8
git config --global alias.grog 'log --graph --abbrev-commit --decorate --all --format=format:"%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(dim white) - %an%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n %C(white)%s%C(reset)"'
Мой алиас git grog (или graphical log) в последние годы разросся настолько, что я больше не уверен, будто точно знаю, что он делает. Но выглядит красиво:

9 ___ P_4_MERGE __
$> 
git config --global merge.tool p4merge
git config --global mergetool.p4merge.path "C:/Program Files/Perforce/p4merge.exe";
P4Merge can be used for doing diffs and merges. 
If using P4Merge for diffs then call:
$> git difftool
If the file you want to compare is already staged then use the –cached switch after that command.

When Git tells you that there has been conflict, to resolve it type:
$> git mergetool
This will open P4Merge and show three different versions of the file; your local version, the version you are trying to merge in (probably the master branch) and the base version. The base version is the common ancestor of the local version and the remote version. Choose which version wins or edit the merge manually and then save and quit P4Merge. Finally commit the merge and then remove any .orig files that may be left over. It should be possible to have git remove the .orig file automatically by setting mergetool.keepBackup to false in git config but I have not succeeded in getting that to work for me yet.

10 ____ core.autocrlf ___
Если вы пишете код на Windows или пользуетесь другой системой, но работаете с людьми, которые пишут на Windows, то наверняка рано или поздно столкнётесь с проблемой конца строк. Она возникает из-за того, что Windows использует для переноса строк и символ возврата каретки, и символ перехода на новую строку, в то время как в системах Mac и Linux используется только символ перехода на новую строку. Это незначительное, но невероятно раздражающее обстоятельство при кросс-платформенной работе.

Git может справиться с этим, автоматически конвертируя CRLF-концы строк в LF при коммите и в обратную сторону при выгрузке кода из репозитория на файловую систему. Данную функциональность можно включить с помощью настройки core.autocrlf. Если вы используете Windows, установите настройку в true, тогда концы строк из LF будут сконвертированы в CRLF при выгрузке кода:

$ git config --global core.autocrlf true
Если вы сидите на Linux'е или Mac'е, где используются LF-концы строк, вам не надо, чтобы Git автоматически конвертировал их при выгрузке файлов из репозитория. Однако, если вдруг случайно кто-то добавил файл с CRLF-концами строк, то хотелось бы, чтобы Git исправил это. Можно указать Git'у, чтобы он конвертировал CRLF в LF только при коммитах, установив настройку core.autocrlf в input:

$ git config --global core.autocrlf input
Такая настройка даст вам CRLF-концы в выгруженном коде на Windows-системах и LF-концы на Mac'ах и Linux'е, и в репозитории.

11 ___ Keep file in a Git repo, but don't track changes
git has a different solution to do this. First change the file you do not want to be tracked and use the following command:

git update-index --assume-unchanged FILE_NAME
and if you want to track the changes again use this command:

git update-index --no-assume-unchanged FILE_NAME

12 ___ git push origin
 Without additional configuration, pushes the current branch to the configured upstream (remote.origin.merge configuration variable) IF IT HAS THE SAME NAME AS THE CURRENT BRANCH, and errors out without pushing otherwise.
    The default behavior of this command when no <refspec> is given can be configured by setting the push option of the remote, or the "push.default" configuration variable.

git push origin master
Find a ref that matches master in the source repository (most likely, it would find refs/heads/master), and update the same ref (e.g. refs/heads/master) in origin repository with it. If master did not exist remotely, it would be created.

git push origin HEAD
A handy way to push the current branch to the same name on the remote.

git push origin HEAD:master
Push the current branch to the remote ref matching master in the origin repository. This form is convenient to push the current branch without thinking about its local name.

13 ___ ВЕТКИ
https://git-scm.com/book/ru/v2/%D0%92%D0%B5%D1%82%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5-%D0%B2-Git-%D0%A3%D0%B4%D0%B0%D0%BB%D1%91%D0%BD%D0%BD%D1%8B%D0%B5-%D0%B2%D0%B5%D1%82%D0%BA%D0%B8

Выполните git push (удал. сервер) (ветка) --> git push origin myBranch
Вы также можете выполнить git push origin serverfix:serverfix — произойдёт то же самое — здесь говорится “возьми мой serverfix и сделай его удалённым serverfix.” Можно использовать этот формат для отправки локальной ветки в удалённую ветку с другим именем.

Если вам нужна своя собственная ветка serverfix, над которой вы сможете работать, то вы можете создать её на основе удалённой ветки:
$ git checkout -b serverfix origin/serverfix
Branch serverfix set up to track remote branch serverfix from origin.
Switched to a new branch 'serverfix'

Существует общепринятая операция, которую git предоставляет, --track:
		$ git checkout --track origin/serverfix
Branch serverfix set up to track remote branch serverfix from origin

Чтобы настроить локальную ветку с именем, отличным от имени удалённой ветки, вы можете легко использовать первую версию с другим именем локальной ветки:
		$ git checkout -b mysf origin/serverfix
Branch sf set up to track remote branch serverfix from origin.
Switched to a new branch 'mysf'
Теперь ваша локальная ветка mysf будет автоматически получать (pull) изменения из origin/serverfix.

Если у вас уже есть локальная ветка и вы хотите настроить ее на удаленную ветку, которую вы только получили, или хотите изменить upstream-ветку, которую вы отслеживаете, вы можете воспользоваться ключами -u или --set-upstream-to с командой git branch, чтобы явно установить ее в любое время.
		$ git branch -u origin/serverfix
Branch serverfix set up to track remote branch serverfix from origin.

14___  Получение изменений
Команда git fetch загрузит с сервера все изменения, которых у вас еще нет, но пока не будет изменять вашу рабочую директорию. Эта команда просто получает данные для вас и позволяет вам самостоятельно сделать слияние. Тем не менее, существует команда под названием git pull, которая является по существу командой git fetch, непосредственно за которой следует команда git merge.

Удаление веток на удалённом сервере
Скажем, вы и ваши соавторы закончили с нововведением и слили его в ветку master на удалённом сервере (или в какую-то другую ветку, где хранится стабильный код). Вы можете удалить ветку на удалённом сервере, используя опцию --delete для git push. Если вы хотите удалить ветку serverfix на сервере, выполните следующее:

$ git push origin --delete serverfix
To https://github.com/schacon/simplegit
 - [deleted]         serverfix

 15 ------------------------------
 так можно сделать чекаут для файлов с длинными именами/путями
 http://stackoverflow.com/questions/21123415/git-pull-aborted-with-error-filename-too-long
 git config core.longpaths true <<< так лучше не делать

16 ----------------------
Как запушить 1 ветку в другую на сервере.
If the local branch is called "localBranch" and you want to push to branch called "anotherBranch" on the remote called "remoteName", then do the following:

git push remoteName localBranch:anotherBranch
git push -f origin US5432_Fix_Error:devbr-name

17 ---------------------------
>>>> лучше всего при первом комите пушить такой командой:
git push -u origin my_branch
>>>> (^^^ см выше команду) the first time that you push that branch. You only need to do it once, and that sets up the association between your branch and the one at origin in the same way as git branch --set-upstream does.

>>>> set upstream @DEPRECATED
git branch --set-upstream my_branch origin/my_branch

>>>> Или проще, когда надо добавить трэк для текущей ветки:
>>>> if you're on the branch "my_branch":
git branch --set-upstream-to origin/my_branch
>>>> or with the short option:
git branch -u origin/my_branch

***************** ИТОГО: You can set upstream simpler in two ways.  ******
1)First when you create the branch:
git branch -u origin/my-branch

2)or after you have created a branch, you can use this command.
git push -u origin/my-branch

3) You can also branch, check out and set upstream in a single command:
git checkout -b my-branch -t origin/my-branch

4) My personally preference is to do this in a two-step command:
git checkout -b my-branch
git push -u origin/my-branch

18 ************************************
Remove(untrack) a file from a Git repository without deleting it from the local filesystem
file >>>
>> git rm --cached mylogfile.log
For a directory >>>
>> git rm --cached -r mydirectory

19 ********************************
>> git rebase -i <after-this-commit> 
and replace "pick" on the second and subsequent commits with "squash" or "fixup",
<after-this-commit> is either the SHA1 hash or the relative location from the HEAD of the current branch from which commits are analyzed for the rebase command. 
For example, if the user wishes to view 5 commits from the current HEAD in the past the command is 
>> git rebase -i HEAD~5.

20 -----------------
You can do this fairly easily without git rebase or git merge --squash. 
In this example, we'll squash the last 3 commits.
If you want to write the new commit message from scratch, this suffices:

git reset --soft HEAD~3 &&
git commit

If you want to start editing the new commit message with a concatenation of the existing commit messages (i.e. similar to what a pick/squash/squash/…/squash git rebase -i instruction list would start you with), then you need to extract those messages and pass them to git commit:

git reset --soft HEAD~3 && 
git commit --edit -m"$(git log --format=%B --reverse HEAD..HEAD@{1})"

Both of those methods squash the last three commits into a single new commit in the same way. The soft reset just re-points HEAD to the last commit that you do not want to squash. Neither the index nor the working tree are touched by the soft reset, leaving the index in the desired state for your new commit (i.e. it already has all the changes from the commits that you are about to “throw away”).

21 ******************

КАК ВЫЧЕКАУТИТЬ ВЕТКУ ПО ТЭГУ

Lets first start by explaining what is tag in git

A tag is used to label and mark a specific commit in the history.
It is usually used to mark release points (eg. v1.0, etc.).

Although a tag may appear similar to branch, a tag however does not change.
It points directly to a specific commit in the history.
You will not be able to checkout the tags if its not locally in your repository so first you have to fetch the tags to your local repository.

First make sure that the tag exists locally by doing

# --all will fetch all the remotes.
# --tags will fetch all tags as well
git fetch --all --tags --prune
Then check out the tag by running

git checkout tags/<tag_name> -b <branch_name>
Instead of origin use the tags/ prefix.
-------------
How to create tags? ==> There are 2 ways to create tag:
# normal tag 
git tag 
# anotated tag
git tag -a
The difference between the 2 is that that the when creating annotated tag you can add meta data like you have in a git commit:
name, e-mail, date, comment & signature

22 ****************************
КАК СДЕЛАТЬ ПАТЧ НА ОСНОВЕ DIFF
исходная ветка, вторая сравниваемая
>git diff origin/master HEAD > US23849_patch.txt

Можно задать не все отличия, а до конкретных путей и файлов
> git diff origin/master HEAD -- module/src/test/java/com/git/junits path/to/file.md > onlyJunits_Patch.txt

или только для сырцов-кода
> git diff origin/master HEAD -- module/src/main > onlyCode_Patch.txt

23 ***************************
