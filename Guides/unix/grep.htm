<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<title>GREP</title>
    <link rel="stylesheet" href="../../Guides/grey.css">
    <style type="text/css">
    	div.comment-container {
    		border: 1px solid #920000;
    	}
    	dt {
    		font-weight: bold;
    		border-top: 1px solid black
    	}
    	dd {
    		border-bottom: 1px solid black
		}
    </style>
</head>
<body>
<a href="https://www.gnu.org/software/grep/manual/grep.html">src</a>
<h2>GNU Grep 3.0</h2>
<h2 class="contents-heading">Table of Contents</h2>

<div class="contents">

<ul class="no-bullet">
  <li><a name="toc-Introduction-1" href="#Introduction">1 Introduction</a></li>
  <li><a name="toc-Invoking-grep" href="#Invoking">2 Invoking <code>grep</code></a>
  <ul class="no-bullet">
    <li><a name="toc-Command_002dline-Options-1" href="#Command_002dline-Options">2.1 Command-line Options</a>
    <ul class="no-bullet">
      <li><a name="toc-Generic-Program-Information-1" href="#Generic-Program-Information">2.1.1 Generic Program Information</a></li>
      <li><a name="toc-Matching-Control-1" href="#Matching-Control">2.1.2 Matching Control</a></li>
      <li><a name="toc-General-Output-Control-1" href="#General-Output-Control">2.1.3 General Output Control</a></li>
      <li><a name="toc-Output-Line-Prefix-Control-1" href="#Output-Line-Prefix-Control">2.1.4 Output Line Prefix Control</a></li>
      <li><a name="toc-Context-Line-Control-1" href="#Context-Line-Control">2.1.5 Context Line Control</a></li>
      <li><a name="toc-File-and-Directory-Selection-1" href="#File-and-Directory-Selection">2.1.6 File and Directory Selection</a></li>
      <li><a name="toc-Other-Options-1" href="#Other-Options">2.1.7 Other Options</a></li>
    </ul></li>
    <li><a name="toc-Environment-Variables-1" href="#Environment-Variables">2.2 Environment Variables</a></li>
    <li><a name="toc-Exit-Status-1" href="#Exit-Status">2.3 Exit Status</a></li>
    <li><a name="toc-grep-Programs-1" href="#grep-Programs">2.4 <code>grep</code> Programs</a></li>
  </ul></li>
  <li><a name="toc-Regular-Expressions-1" href="#Regular-Expressions">3 Regular Expressions</a>
  <ul class="no-bullet">
    <li><a name="toc-Fundamental-Structure-1" href="#Fundamental-Structure">3.1 Fundamental Structure</a></li>
    <li><a name="toc-Character-Classes-and-Bracket-Expressions-1" href="#Character-Classes-and-Bracket-Expressions">3.2 Character Classes and Bracket Expressions</a></li>
    <li><a name="toc-The-Backslash-Character-and-Special-Expressions-1" href="#The-Backslash-Character-and-Special-Expressions">3.3 The Backslash Character and Special Expressions</a></li>
    <li><a name="toc-Anchoring-1" href="#Anchoring">3.4 Anchoring</a></li>
    <li><a name="toc-Back_002dreferences-and-Subexpressions-1" href="#Back_002dreferences-and-Subexpressions">3.5 Back-references and Subexpressions</a></li>
    <li><a name="toc-Basic-vs-Extended-Regular-Expressions" href="#Basic-vs-Extended">3.6 Basic vs Extended Regular Expressions</a></li>
  </ul></li>
  <li><a name="toc-Usage-1" href="#Usage">4 Usage</a></li>
  
</ul>
</div>

<a name="grep"></a>
<h1 class="top">grep</h1>

<p class="cye-lm-tag"><code>grep</code> prints lines that contain a match for a pattern.
</p>
<p class="cye-lm-tag">This manual is for version 3.0 of GNU Grep.
</p>
<p class="cye-lm-tag">This manual is for <code>grep</code>, a pattern matching engine.
</p>
<hr>
<h2 class="chapter">1 Introduction</h2>

<a name="index-searching-for-a-pattern"></a>

<p class="cye-lm-tag"><code>grep</code> searches input files
for lines containing a match to a given pattern list.
When it finds a match in a line,
it copies the line to standard output (by default),
or produces whatever other sort of output you have requested with options.
</p>
<p class="cye-lm-tag">Though <code>grep</code> expects to do the matching on text,
it has no limits on input line length other than available memory,
and it can match arbitrary characters within a line.
If the final byte of an input file is not a newline,
<code>grep</code> silently supplies one.
Since newline is also a separator for the list of patterns,
there is no way to match newline characters in a text.
</p>

<hr>
<a name="Invoking"></a>
<div class="header">
<p class="cye-lm-tag">
Next: <a href="#Regular-Expressions" accesskey="n" rel="next">Regular Expressions</a>, Previous: <a href="#Introduction" accesskey="p" rel="prev">Introduction</a>, Up: <a href="#Top" accesskey="u" rel="up">Top</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Invoking-grep"></a>
<h2 class="chapter">2 Invoking <code>grep</code></h2>

<p class="cye-lm-tag">The general synopsis of the <code>grep</code> command line is
</p>
<div class="example">
<pre class="example">grep <var>options</var> <var>pattern</var> <var>input_file_names</var>
</pre></div>

<p class="cye-lm-tag">There can be zero or more <var>options</var>.
<var>pattern</var> will only be seen as such
(and not as an <var>input_file_name</var>)
if it wasn’t already specified within <var>options</var>
(by using the ‘<samp>-e&nbsp;<var>pattern</var></samp>’
or ‘<samp>-f&nbsp;<var>file</var></samp>’ options).
There can be zero or more <var>input_file_names</var>.
</p>
<table class="menu" border="0" cellspacing="0">
<tbody><tr><td align="left" valign="top">• <a href="#Command_002dline-Options" accesskey="1">Command-line Options</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Short and long names, grouped by category.
</td></tr>
<tr><td align="left" valign="top">• <a href="#Environment-Variables" accesskey="2">Environment Variables</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">POSIX, GNU generic, and GNU grep specific.
</td></tr>
<tr><td align="left" valign="top">• <a href="#Exit-Status" accesskey="3">Exit Status</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Exit status returned by <code>grep</code>.
</td></tr>
<tr><td align="left" valign="top">• <a href="#grep-Programs" accesskey="4">grep Programs</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top"><code>grep</code> programs.
</td></tr>
</tbody></table>

<hr>
<a name="Command_002dline-Options"></a>
<div class="header">
<p class="cye-lm-tag">
Next: <a href="#Environment-Variables" accesskey="n" rel="next">Environment Variables</a>, Up: <a href="#Invoking" accesskey="u" rel="up">Invoking</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Command_002dline-Options-1"></a>
<h3 class="section">2.1 Command-line Options</h3>

<p class="cye-lm-tag"><code>grep</code> comes with a rich set of options:
some from POSIX and some being GNU extensions.
Long option names are always a GNU extension,
even for options that are from POSIX specifications.
Options that are specified by POSIX,
under their short names,
are explicitly marked as such
to facilitate POSIX-portable programming.
A few option names are provided
for compatibility with older or more exotic implementations.
</p>
<table class="menu" border="0" cellspacing="0">
<tbody><tr><td align="left" valign="top">• <a href="#Generic-Program-Information" accesskey="1">Generic Program Information</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">• <a href="#Matching-Control" accesskey="2">Matching Control</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">• <a href="#General-Output-Control" accesskey="3">General Output Control</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">• <a href="#Output-Line-Prefix-Control" accesskey="4">Output Line Prefix Control</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">• <a href="#Context-Line-Control" accesskey="5">Context Line Control</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">• <a href="#File-and-Directory-Selection" accesskey="6">File and Directory Selection</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">• <a href="#Other-Options" accesskey="7">Other Options</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
</tbody></table>

<p class="cye-lm-tag">Several additional options control
which variant of the <code>grep</code> matching engine is used.
See <a href="#grep-Programs">grep Programs</a>.
</p>
<hr>
<a name="Generic-Program-Information"></a>
<div class="header">
<p class="cye-lm-tag">
Next: <a href="#Matching-Control" accesskey="n" rel="next">Matching Control</a>, Up: <a href="#Command_002dline-Options" accesskey="u" rel="up">Command-line Options</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Generic-Program-Information-1"></a>
<h4 class="subsection">2.1.1 Generic Program Information</h4>

<dl compact="compact">
<dt><samp>--help</samp></dt>
<dd><a name="index-_002d_002dhelp"></a>
<a name="index-usage-summary_002c-printing"></a>
<p class="cye-lm-tag">Print a usage message briefly summarizing the command-line options
and the bug-reporting address, then exit.
</p>
</dd>
<dt><samp>-V</samp></dt>
<dt><samp>--version</samp></dt>
<dd><a name="index-_002dV"></a>
<a name="index-_002d_002dversion"></a>
<a name="index-version_002c-printing"></a>
<p class="cye-lm-tag">Print the version number of <code>grep</code> to the standard output stream.
This version number should be included in all bug reports.
</p>
</dd>
</dl>

<hr>
<a name="Matching-Control"></a>
<div class="header">
<p class="cye-lm-tag">
Next: <a href="#General-Output-Control" accesskey="n" rel="next">General Output Control</a>, Previous: <a href="#Generic-Program-Information" accesskey="p" rel="prev">Generic Program Information</a>, Up: <a href="#Command_002dline-Options" accesskey="u" rel="up">Command-line Options</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Matching-Control-1"></a>
<h4 class="subsection">2.1.2 Matching Control</h4>

<dl compact="compact">
<dt><samp>-e <var>pattern</var></samp></dt>
<dt><samp>--regexp=<var>pattern</var></samp></dt>
<dd><a name="index-_002de"></a>
<a name="index-_002d_002dregexp_003dpattern"></a>
<a name="index-pattern-list"></a>
<p class="cye-lm-tag">Use <var>pattern</var> as the pattern.
If this option is used multiple times or is combined with the
<samp>-f</samp> (<samp>--file</samp>) option, search for all patterns given.
(<samp>-e</samp> is specified by POSIX.)
</p>
</dd>
<dt><samp>-f <var>file</var></samp></dt>
<dt><samp>--file=<var>file</var></samp></dt>
<dd><a name="index-_002df"></a>
<a name="index-_002d_002dfile"></a>
<a name="index-pattern-from-file"></a>
<p class="cye-lm-tag">Obtain patterns from <var>file</var>, one per line.
If this option is used multiple times or is combined with the
<samp>-e</samp> (<samp>--regexp</samp>) option, search for all patterns given.
The empty file contains zero patterns, and therefore matches nothing.
(<samp>-f</samp> is specified by POSIX.)
</p>
</dd>
<dt><samp>-i</samp></dt>
<dt><samp>-y</samp></dt>
<dt><samp>--ignore-case</samp></dt>
<dd><a name="index-_002di"></a>
<a name="index-_002dy"></a>
<a name="index-_002d_002dignore_002dcase"></a>
<a name="index-case-insensitive-search"></a>
<p class="cye-lm-tag">Ignore case distinctions, so that characters that differ only in case
match each other.  Although this is straightforward when letters
differ in case only via lowercase-uppercase pairs, the behavior is
unspecified in other situations.  For example, uppercase “S” has an
unusual lowercase counterpart “ſ” (Unicode character U+017F, LATIN
SMALL LETTER LONG S) in many locales, and it is unspecified whether
this unusual character matches “S” or “s” even though uppercasing
it yields “S”.  Another example: the lowercase German letter “ß”
(U+00DF, LATIN SMALL LETTER SHARP S) is normally capitalized as the
two-character string “SS” but it does not match “SS”, and it might
not match the uppercase letter “ẞ” (U+1E9E, LATIN CAPITAL LETTER
SHARP S) even though lowercasing the latter yields the former.
</p>
<p class="cye-lm-tag"><samp>-y</samp> is an obsolete synonym that is provided for compatibility.
(<samp>-i</samp> is specified by POSIX.)
</p>
</dd>
<dt><samp>-v</samp></dt>
<dt><samp>--invert-match</samp></dt>
<dd><a name="index-_002dv"></a>
<a name="index-_002d_002dinvert_002dmatch"></a>
<a name="index-invert-matching"></a>
<a name="index-print-non_002dmatching-lines"></a>
<p class="cye-lm-tag">Invert the sense of matching, to select non-matching lines.
(<samp>-v</samp> is specified by POSIX.)
</p>
</dd>
<dt><samp>-w</samp></dt>
<dt><samp>--word-regexp</samp></dt>
<dd><a name="index-_002dw"></a>
<a name="index-_002d_002dword_002dregexp"></a>
<a name="index-matching-whole-words"></a>
<p class="cye-lm-tag">Select only those lines containing matches that form whole words.
The test is that the matching substring must either
be at the beginning of the line,
or preceded by a non-word constituent character.
Similarly,
it must be either at the end of the line
or followed by a non-word constituent character.
Word-constituent characters are letters, digits, and the underscore.
This option has no effect if <samp>-x</samp> is also specified.
</p>
</dd>
<dt><samp>-x</samp></dt>
<dt><samp>--line-regexp</samp></dt>
<dd><a name="index-_002dx"></a>
<a name="index-_002d_002dline_002dregexp"></a>
<a name="index-match-the-whole-line"></a>
<p class="cye-lm-tag">Select only those matches that exactly match the whole line.
For a regular expression pattern, this is like parenthesizing the
pattern and then surrounding it with ‘<samp>^</samp>’ and ‘<samp>$</samp>’.
(<samp>-x</samp> is specified by POSIX.)
</p>
</dd>
</dl>

<hr>
<a name="General-Output-Control"></a>
<div class="header">
<p class="cye-lm-tag">
Next: <a href="#Output-Line-Prefix-Control" accesskey="n" rel="next">Output Line Prefix Control</a>, Previous: <a href="#Matching-Control" accesskey="p" rel="prev">Matching Control</a>, Up: <a href="#Command_002dline-Options" accesskey="u" rel="up">Command-line Options</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="General-Output-Control-1"></a>
<h4 class="subsection">2.1.3 General Output Control</h4>

<dl compact="compact">
<dt><samp>-c</samp></dt>
<dt><samp>--count</samp></dt>
<dd><a name="index-_002dc"></a>
<a name="index-_002d_002dcount"></a>
<a name="index-counting-lines"></a>
<p class="cye-lm-tag">Suppress normal output;
instead print a count of matching lines for each input file.
With the <samp>-v</samp> (<samp>--invert-match</samp>) option,
count non-matching lines.
(<samp>-c</samp> is specified by POSIX.)
</p>
</dd>
<dt><samp>--color[=<var>WHEN</var>]</samp></dt>
<dt><samp>--colour[=<var>WHEN</var>]</samp></dt>
<dd><a name="index-_002d_002dcolor"></a>
<a name="index-_002d_002dcolour"></a>
<a name="index-highlight_002c-color_002c-colour"></a>
<p class="cye-lm-tag">Surround the matched (non-empty) strings, matching lines, context lines,
file names, line numbers, byte offsets, and separators (for fields and
groups of context lines) with escape sequences to display them in color
on the terminal.
The colors are defined by the environment variable <code>GREP_COLORS</code>
and default to ‘<samp>ms=01;31:mc=01;31:sl=:cx=:fn=35:ln=32:bn=32:se=36</samp>’
for bold red matched text, magenta file names, green line numbers,
green byte offsets, cyan separators, and default terminal colors otherwise.
The deprecated environment variable <code>GREP_COLOR</code> is still supported,
but its setting does not have priority;
it defaults to ‘<samp>01;31</samp>’ (bold red)
which only covers the color for matched text.
<var>WHEN</var> is ‘<samp>never</samp>’, ‘<samp>always</samp>’, or ‘<samp>auto</samp>’.
</p>
</dd>
<dt><samp>-L</samp></dt>
<dt><samp>--files-without-match</samp></dt>
<dd><a name="index-_002dL"></a>
<a name="index-_002d_002dfiles_002dwithout_002dmatch"></a>
<a name="index-files-which-don_0027t-match"></a>
<p class="cye-lm-tag">Suppress normal output;
instead print the name of each input file from which
no output would normally have been printed.
The scanning of each file stops on the first match.
</p>
</dd>
<dt><samp>-l</samp></dt>
<dt><samp>--files-with-matches</samp></dt>
<dd><a name="index-_002dl"></a>
<a name="index-_002d_002dfiles_002dwith_002dmatches"></a>
<a name="index-names-of-matching-files"></a>
<p class="cye-lm-tag">Suppress normal output;
instead print the name of each input file from which
output would normally have been printed.
The scanning of each file stops on the first match.
(<samp>-l</samp> is specified by POSIX.)
</p>
</dd>
<dt><samp>-m <var>num</var></samp></dt>
<dt><samp>--max-count=<var>num</var></samp></dt>
<dd><a name="index-_002dm"></a>
<a name="index-_002d_002dmax_002dcount"></a>
<a name="index-max_002dcount"></a>
<p class="cye-lm-tag">Stop reading a file after <var>num</var> matching lines.
If the input is standard input from a regular file,
and <var>num</var> matching lines are output,
<code>grep</code> ensures that the standard input is positioned
just after the last matching line before exiting,
regardless of the presence of trailing context lines.
This enables a calling process to resume a search.
For example, the following shell script makes use of it:
</p>
<div class="example">
<pre class="example">while grep -m 1 PATTERN
do
  echo xxxx
done &lt; FILE
</pre></div>

<p class="cye-lm-tag">But the following probably will not work because a pipe is not a regular
file:
</p>
<div class="example">
<pre class="example"># This probably will not work.
cat FILE |
while grep -m 1 PATTERN
do
  echo xxxx
done
</pre></div>

<a name="index-context-lines"></a>
<p class="cye-lm-tag">When <code>grep</code> stops after <var>num</var> matching lines,
it outputs any trailing context lines.
Since context does not include matching lines,
<code>grep</code> will stop when it encounters another matching line.
When the <samp>-c</samp> or <samp>--count</samp> option is also used,
<code>grep</code> does not output a count greater than <var>num</var>.
When the <samp>-v</samp> or <samp>--invert-match</samp> option is also used,
<code>grep</code> stops after outputting <var>num</var> non-matching lines.
</p>
</dd>
<dt><samp>-o</samp></dt>
<dt><samp>--only-matching</samp></dt>
<dd><a name="index-_002do"></a>
<a name="index-_002d_002donly_002dmatching"></a>
<a name="index-only-matching"></a>
<p class="cye-lm-tag">Print only the matched (non-empty) parts of matching lines,
with each such part on a separate output line.
Output lines use the same delimiters as input, and delimiters are null
bytes if <samp>-z</samp> (<samp>--null-data</samp>) is also used (see <a href="#Other-Options">Other Options</a>).
</p>
</dd>
<dt><samp>-q</samp></dt>
<dt><samp>--quiet</samp></dt>
<dt><samp>--silent</samp></dt>
<dd><a name="index-_002dq"></a>
<a name="index-_002d_002dquiet"></a>
<a name="index-_002d_002dsilent"></a>
<a name="index-quiet_002c-silent"></a>
<p class="cye-lm-tag">Quiet; do not write anything to standard output.
Exit immediately with zero status if any match is found,
even if an error was detected.
Also see the <samp>-s</samp> or <samp>--no-messages</samp> option.
(<samp>-q</samp> is specified by POSIX.)
</p>
</dd>
<dt><samp>-s</samp></dt>
<dt><samp>--no-messages</samp></dt>
<dd><a name="index-_002ds"></a>
<a name="index-_002d_002dno_002dmessages"></a>
<a name="index-suppress-error-messages"></a>
<p class="cye-lm-tag">Suppress error messages about nonexistent or unreadable files.
Portability note:
unlike GNU <code>grep</code>,
7th Edition Unix <code>grep</code> did not conform to POSIX,
because it lacked <samp>-q</samp>
and its <samp>-s</samp> option behaved like
GNU <code>grep</code>’s <samp>-q</samp> option.<a name="DOCF1" href="#FOOT1"><sup>1</sup></a>
USG-style <code>grep</code> also lacked <samp>-q</samp>
but its <samp>-s</samp> option behaved like GNU <code>grep</code>’s.
Portable shell scripts should avoid both
<samp>-q</samp> and <samp>-s</samp> and should redirect
standard and error output to <samp>/dev/null</samp> instead.
(<samp>-s</samp> is specified by POSIX.)
</p>
</dd>
</dl>

<hr>
<a name="Output-Line-Prefix-Control"></a>
<div class="header">
<p class="cye-lm-tag">
Next: <a href="#Context-Line-Control" accesskey="n" rel="next">Context Line Control</a>, Previous: <a href="#General-Output-Control" accesskey="p" rel="prev">General Output Control</a>, Up: <a href="#Command_002dline-Options" accesskey="u" rel="up">Command-line Options</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Output-Line-Prefix-Control-1"></a>
<h4 class="subsection">2.1.4 Output Line Prefix Control</h4>

<p class="cye-lm-tag">When several prefix fields are to be output,
the order is always file name, line number, and byte offset,
regardless of the order in which these options were specified.
</p>
<dl compact="compact">
<dt><samp>-b</samp></dt>
<dt><samp>--byte-offset</samp></dt>
<dd><a name="index-_002db"></a>
<a name="index-_002d_002dbyte_002doffset"></a>
<a name="index-byte-offset"></a>
<p class="cye-lm-tag">Print the 0-based byte offset within the input file
before each line of output.
If <samp>-o</samp> (<samp>--only-matching</samp>) is specified,
print the offset of the matching part itself.
When <code>grep</code> runs on MS-DOS or MS-Windows,
the printed byte offsets depend on whether
the <samp>-u</samp> (<samp>--unix-byte-offsets</samp>) option is used;
see below.
</p>
</dd>
<dt><samp>-H</samp></dt>
<dt><samp>--with-filename</samp></dt>
<dd><a name="index-_002dH"></a>
<a name="index-_002d_002dwith_002dfilename"></a>
<a name="index-with-filename-prefix"></a>
<p class="cye-lm-tag">Print the file name for each match.
This is the default when there is more than one file to search.
</p>
</dd>
<dt><samp>-h</samp></dt>
<dt><samp>--no-filename</samp></dt>
<dd><a name="index-_002dh"></a>
<a name="index-_002d_002dno_002dfilename"></a>
<a name="index-no-filename-prefix"></a>
<p class="cye-lm-tag">Suppress the prefixing of file names on output.
This is the default when there is only one file
(or only standard input) to search.
</p>
</dd>
<dt><samp>--label=<var>LABEL</var></samp></dt>
<dd><a name="index-_002d_002dlabel"></a>
<a name="index-changing-name-of-standard-input"></a>
<p class="cye-lm-tag">Display input actually coming from standard input
as input coming from file <var>LABEL</var>.  This is
especially useful when implementing tools like
<code>zgrep</code>; e.g.:
</p>
<div class="example">
<pre class="example">gzip -cd foo.gz | grep --label=foo -H something
</pre></div>

</dd>
<dt><samp>-n</samp></dt>
<dt><samp>--line-number</samp></dt>
<dd><a name="index-_002dn"></a>
<a name="index-_002d_002dline_002dnumber"></a>
<a name="index-line-numbering"></a>
<p class="cye-lm-tag">Prefix each line of output with the 1-based line number within its input file.
(<samp>-n</samp> is specified by POSIX.)
</p>
</dd>
<dt><samp>-T</samp></dt>
<dt><samp>--initial-tab</samp></dt>
<dd><a name="index-_002dT"></a>
<a name="index-_002d_002dinitial_002dtab"></a>
<a name="index-tab_002daligned-content-lines"></a>
<p class="cye-lm-tag">Make sure that the first character of actual line content lies on a tab stop,
so that the alignment of tabs looks normal.
This is useful with options that prefix their output to the actual content:
<samp>-H</samp>, <samp>-n</samp>, and <samp>-b</samp>.
This may also prepend spaces to output line numbers and byte offsets
so that lines from a single file all start at the same column.
</p>
</dd>
<dt><samp>-u</samp></dt>
<dt><samp>--unix-byte-offsets</samp></dt>
<dd><a name="index-_002du"></a>
<a name="index-_002d_002dunix_002dbyte_002doffsets"></a>
<a name="index-MS_002dDOS_002fMS_002dWindows-byte-offsets"></a>
<a name="index-byte-offsets_002c-on-MS_002dDOS_002fMS_002dWindows"></a>
<p class="cye-lm-tag">Report Unix-style byte offsets.
This option causes <code>grep</code> to report byte offsets
as if the file were a Unix-style text file,
i.e., the byte offsets ignore carriage returns that were stripped.
This will produce results identical
to running <code>grep</code> on a Unix machine.
This option has no effect unless the <samp>-b</samp> option is also used;
it has no effect on platforms other than MS-DOS and MS-Windows.
</p>
</dd>
<dt><samp>-Z</samp></dt>
<dt><samp>--null</samp></dt>
<dd><a name="index-_002dZ"></a>
<a name="index-_002d_002dnull"></a>
<a name="index-zero_002dterminated-file-names"></a>
<p class="cye-lm-tag">Output a zero byte (the ASCII NUL character)
instead of the character that normally follows a file name.
For example,
‘<samp>grep -lZ</samp>’ outputs a zero byte after each file name
instead of the usual newline.
This option makes the output unambiguous,
even in the presence of file names containing unusual characters like newlines.
This option can be used with commands like
‘<samp>find -print0</samp>’, ‘<samp>perl -0</samp>’, ‘<samp>sort -z</samp>’, and ‘<samp>xargs -0</samp>’
to process arbitrary file names,
even those that contain newline characters.
</p>
</dd>
</dl>

<hr>
<a name="Context-Line-Control"></a>
<div class="header">
<p class="cye-lm-tag">
Next: <a href="#File-and-Directory-Selection" accesskey="n" rel="next">File and Directory Selection</a>, Previous: <a href="#Output-Line-Prefix-Control" accesskey="p" rel="prev">Output Line Prefix Control</a>, Up: <a href="#Command_002dline-Options" accesskey="u" rel="up">Command-line Options</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Context-Line-Control-1"></a>
<h4 class="subsection">2.1.5 Context Line Control</h4>

<a name="index-context-lines-1"></a>
<p class="cye-lm-tag"><em>Context lines</em> are non-matching lines that are near a matching line.
They are output only if one of the following options are used.
Regardless of how these options are set,
<code>grep</code> never outputs any given line more than once.
If the <samp>-o</samp> (<samp>--only-matching</samp>) option is specified,
these options have no effect and a warning is given upon their use.
</p>
<dl compact="compact">
<dt><samp>-A <var>num</var></samp></dt>
<dt><samp>--after-context=<var>num</var></samp></dt>
<dd><a name="index-_002dA"></a>
<a name="index-_002d_002dafter_002dcontext"></a>
<a name="index-after-context"></a>
<a name="index-context-lines_002c-after-match"></a>
<p class="cye-lm-tag">Print <var>num</var> lines of trailing context after matching lines.
</p>
</dd>
<dt><samp>-B <var>num</var></samp></dt>
<dt><samp>--before-context=<var>num</var></samp></dt>
<dd><a name="index-_002dB"></a>
<a name="index-_002d_002dbefore_002dcontext"></a>
<a name="index-before-context"></a>
<a name="index-context-lines_002c-before-match"></a>
<p class="cye-lm-tag">Print <var>num</var> lines of leading context before matching lines.
</p>
</dd>
<dt><samp>-C <var>num</var></samp></dt>
<dt><samp>-<var>num</var></samp></dt>
<dt><samp>--context=<var>num</var></samp></dt>
<dd><a name="index-_002dC"></a>
<a name="index-_002d_002dcontext"></a>
<a name="index-_002dnum"></a>
<a name="index-context-lines-2"></a>
<p class="cye-lm-tag">Print <var>num</var> lines of leading and trailing output context.
</p>
</dd>
<dt><samp>--group-separator=<var>string</var></samp></dt>
<dd><a name="index-_002d_002dgroup_002dseparator"></a>
<a name="index-group-separator"></a>
<p class="cye-lm-tag">When <samp>-A</samp>, <samp>-B</samp> or <samp>-C</samp> are in use,
print <var>string</var> instead of <samp>--</samp> between groups of lines.
</p>
</dd>
<dt><samp>--no-group-separator</samp></dt>
<dd><a name="index-_002d_002dgroup_002dseparator-1"></a>
<a name="index-group-separator-1"></a>
<p class="cye-lm-tag">When <samp>-A</samp>, <samp>-B</samp> or <samp>-C</samp> are in use,
do not print a separator between groups of lines.
</p>
</dd>
</dl>

<p class="cye-lm-tag">Here are some points about how <code>grep</code> chooses
the separator to print between prefix fields and line content:
</p>
<ul>
<li> Matching lines normally use ‘<samp>:</samp>’ as a separator
between prefix fields and actual line content.

</li><li> Context (i.e., non-matching) lines use ‘<samp>-</samp>’ instead.

</li><li> When context is not specified,
matching lines are simply output one right after another.

</li><li> When context is specified,
lines that are adjacent in the input form a group
and are output one right after another, while
by default a separator appears between non-adjacent groups.

</li><li> The default separator
is a ‘<samp>--</samp>’ line; its presence and appearance
can be changed with the options above.

</li><li> Each group may contain
several matching lines when they are close enough to each other
that two adjacent groups connect and can merge into a single
contiguous one.
</li></ul>

<hr>
<a name="File-and-Directory-Selection"></a>
<div class="header">
<p class="cye-lm-tag">
Next: <a href="#Other-Options" accesskey="n" rel="next">Other Options</a>, Previous: <a href="#Context-Line-Control" accesskey="p" rel="prev">Context Line Control</a>, Up: <a href="#Command_002dline-Options" accesskey="u" rel="up">Command-line Options</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="File-and-Directory-Selection-1"></a>
<h4 class="subsection">2.1.6 File and Directory Selection</h4>

<dl compact="compact">
<dt><samp>-a</samp></dt>
<dt><samp>--text</samp></dt>
<dd><a name="index-_002da"></a>
<a name="index-_002d_002dtext"></a>
<a name="index-suppress-binary-data"></a>
<a name="index-binary-files"></a>
<p class="cye-lm-tag">Process a binary file as if it were text;
this is equivalent to the ‘<samp>--binary-files=text</samp>’ option.
</p>
</dd>
<dt><samp>--binary-files=<var>type</var></samp></dt>
<dd><a name="index-_002d_002dbinary_002dfiles"></a>
<a name="index-binary-files-1"></a>
<p class="cye-lm-tag">If a file’s data or metadata
indicate that the file contains binary data,
assume that the file is of type <var>type</var>.
Non-text bytes indicate binary data; these are either output bytes that are
improperly encoded for the current locale (see <a href="#Environment-Variables">Environment Variables</a>), or null input bytes when the
<samp>-z</samp> (<samp>--null-data</samp>) option is not given (see <a href="#Other-Options">Other Options</a>).
</p>
<p class="cye-lm-tag">By default, <var>type</var> is ‘<samp>binary</samp>’, and <code>grep</code>
suppresses output afer null input binary data is discovered,
and suppresses output lines that contain improperly encoded data.
When some output is suppressed, <code>grep</code> follows any output
with a one-line message saying that a binary file matches.
</p>
<p class="cye-lm-tag">If <var>type</var> is ‘<samp>without-match</samp>’,
when <code>grep</code> discovers null input binary data
it assumes that the rest of the file does not match;
this is equivalent to the <samp>-I</samp> option.
</p>
<p class="cye-lm-tag">If <var>type</var> is ‘<samp>text</samp>’,
<code>grep</code> processes binary data as if it were text;
this is equivalent to the <samp>-a</samp> option.
</p>
<p class="cye-lm-tag">When <var>type</var> is ‘<samp>binary</samp>’, <code>grep</code> may treat non-text
bytes as line terminators even without the <samp>-z</samp>
(<samp>--null-data</samp>) option.  This means choosing ‘<samp>binary</samp>’
versus ‘<samp>text</samp>’ can affect whether a pattern matches a file.  For
example, when <var>type</var> is ‘<samp>binary</samp>’ the pattern ‘<samp>q$</samp>’ might
match ‘<samp>q</samp>’ immediately followed by a null byte, even though this
is not matched when <var>type</var> is ‘<samp>text</samp>’.  Conversely, when
<var>type</var> is ‘<samp>binary</samp>’ the pattern ‘<samp>.</samp>’ (period) might not
match a null byte.
</p>
<p class="cye-lm-tag"><em>Warning:</em> The <samp>-a</samp> (<samp>--binary-files=text</samp>) option
might output binary garbage, which can have nasty side effects if the
output is a terminal and if the terminal driver interprets some of it
as commands.  On the other hand, when reading files whose text
encodings are unknown, it can be helpful to use <samp>-a</samp> or to set
‘<samp>LC_ALL='C'</samp>’ in the environment, in order to find more matches
even if the matches are unsafe for direct display.
</p>
</dd>
<dt><samp>-D <var>action</var></samp></dt>
<dt><samp>--devices=<var>action</var></samp></dt>
<dd><a name="index-_002dD"></a>
<a name="index-_002d_002ddevices"></a>
<a name="index-device-search"></a>
<p class="cye-lm-tag">If an input file is a device, FIFO, or socket, use <var>action</var> to process it.
If <var>action</var> is ‘<samp>read</samp>’,
all devices are read just as if they were ordinary files.
If <var>action</var> is ‘<samp>skip</samp>’,
devices, FIFOs, and sockets are silently skipped.
By default, devices are read if they are on the command line or if the
<samp>-R</samp> (<samp>--dereference-recursive</samp>) option is used, and are
skipped if they are encountered recursively and the <samp>-r</samp>
(<samp>--recursive</samp>) option is used.
This option has no effect on a file that is read via standard input.
</p>
</dd>
<dt><samp>-d <var>action</var></samp></dt>
<dt><samp>--directories=<var>action</var></samp></dt>
<dd><a name="index-_002dd"></a>
<a name="index-_002d_002ddirectories"></a>
<a name="index-directory-search"></a>
<a name="index-symbolic-links"></a>
<p class="cye-lm-tag">If an input file is a directory, use <var>action</var> to process it.
By default, <var>action</var> is ‘<samp>read</samp>’,
which means that directories are read just as if they were ordinary files
(some operating systems and file systems disallow this,
and will cause <code>grep</code>
to print error messages for every directory or silently skip them).
If <var>action</var> is ‘<samp>skip</samp>’, directories are silently skipped.
If <var>action</var> is ‘<samp>recurse</samp>’,
<code>grep</code> reads all files under each directory, recursively,
following command-line symbolic links and skipping other symlinks;
this is equivalent to the <samp>-r</samp> option.
</p>
</dd>
<dt><samp>--exclude=<var>glob</var></samp></dt>
<dd><a name="index-_002d_002dexclude"></a>
<a name="index-exclude-files"></a>
<a name="index-searching-directory-trees"></a>
<p class="cye-lm-tag">Skip any command-line file with a name suffix that matches the pattern
<var>glob</var>, using wildcard matching; a name suffix is either the whole
name, or any suffix starting after a ‘<samp>/</samp>’ and before a
non-‘<samp>/</samp>’.  When searching recursively, skip any subfile whose base
name matches <var>glob</var>; the base name is the part after the last
‘<samp>/</samp>’.  A pattern can use
‘<samp>*</samp>’, ‘<samp>?</samp>’, and ‘<samp>[</samp>’...‘<samp>]</samp>’ as wildcards,
and <code>\</code> to quote a wildcard or backslash character literally.
</p>
</dd>
<dt><samp>--exclude-from=<var>file</var></samp></dt>
<dd><a name="index-_002d_002dexclude_002dfrom"></a>
<a name="index-exclude-files-1"></a>
<a name="index-searching-directory-trees-1"></a>
<p class="cye-lm-tag">Skip files whose name matches any of the patterns
read from <var>file</var> (using wildcard matching as described
under <samp>--exclude</samp>).
</p>
</dd>
<dt><samp>--exclude-dir=<var>glob</var></samp></dt>
<dd><a name="index-_002d_002dexclude_002ddir"></a>
<a name="index-exclude-directories"></a>
<p class="cye-lm-tag">Skip any command-line directory with a name suffix that matches the
pattern <var>glob</var>.  When searching recursively, skip any subdirectory
whose base name matches <var>glob</var>.  Ignore any redundant trailing
slashes in <var>glob</var>.
</p>
</dd>
<dt><samp>-I</samp></dt>
<dd><p class="cye-lm-tag">Process a binary file as if it did not contain matching data;
this is equivalent to the ‘<samp>--binary-files=without-match</samp>’ option.
</p>
</dd>
<dt><samp>--include=<var>glob</var></samp></dt>
<dd><a name="index-_002d_002dinclude"></a>
<a name="index-include-files"></a>
<a name="index-searching-directory-trees-2"></a>
<p class="cye-lm-tag">Search only files whose name matches <var>glob</var>,
using wildcard matching as described under <samp>--exclude</samp>.
</p>
</dd>
<dt><samp>-r</samp></dt>
<dt><samp>--recursive</samp></dt>
<dd><a name="index-_002dr"></a>
<a name="index-_002d_002drecursive"></a>
<a name="index-recursive-search"></a>
<a name="index-searching-directory-trees-3"></a>
<a name="index-symbolic-links-1"></a>
<p class="cye-lm-tag">For each directory operand,
read and process all files in that directory, recursively.
Follow symbolic links on the command line, but skip symlinks
that are encountered recursively.
Note that if no file operand is given, grep searches the working directory.
This is the same as the ‘<samp>--directories=recurse</samp>’ option.
</p>
</dd>
<dt><samp>-R</samp></dt>
<dt><samp>--dereference-recursive</samp></dt>
<dd><a name="index-_002dR"></a>
<a name="index-_002d_002ddereference_002drecursive"></a>
<a name="index-recursive-search-1"></a>
<a name="index-searching-directory-trees-4"></a>
<a name="index-symbolic-links-2"></a>
<p class="cye-lm-tag">For each directory operand, read and process all files in that
directory, recursively, following all symbolic links.
</p>
</dd>
</dl>

<hr>
<a name="Other-Options"></a>
<div class="header">
<p class="cye-lm-tag">
Previous: <a href="#File-and-Directory-Selection" accesskey="p" rel="prev">File and Directory Selection</a>, Up: <a href="#Command_002dline-Options" accesskey="u" rel="up">Command-line Options</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Other-Options-1"></a>
<h4 class="subsection">2.1.7 Other Options</h4>

<dl compact="compact">
<dt><samp>--line-buffered</samp></dt>
<dd><a name="index-_002d_002dline_002dbuffered"></a>
<a name="index-line-buffering"></a>
<p class="cye-lm-tag">Use line buffering on output.
This can cause a performance penalty.
</p>
</dd>
<dt><samp>-U</samp></dt>
<dt><samp>--binary</samp></dt>
<dd><a name="index-_002dU"></a>
<a name="index-_002d_002dbinary"></a>
<a name="index-MS_002dDOS_002fMS_002dWindows-binary-files"></a>
<a name="index-binary-files_002c-MS_002dDOS_002fMS_002dWindows"></a>
<p class="cye-lm-tag">Treat the file(s) as binary.
By default, under MS-DOS and MS-Windows,
<code>grep</code> guesses whether a file is text or binary
as described for the <samp>--binary-files</samp> option.
If <code>grep</code> decides the file is a text file,
it strips carriage returns from the original file contents
(to make regular expressions with <code>^</code> and <code>$</code> work correctly).
Specifying <samp>-U</samp> overrules this guesswork,
causing all files to be read and passed to the matching mechanism verbatim;
if the file is a text file with <code>CR/LF</code> pairs at the end of each line,
this will cause some regular expressions to fail.
This option has no effect
on platforms other than MS-DOS and MS-Windows.
</p>
</dd>
<dt><samp>-z</samp></dt>
<dt><samp>--null-data</samp></dt>
<dd><a name="index-_002dz"></a>
<a name="index-_002d_002dnull_002ddata"></a>
<a name="index-zero_002dterminated-lines"></a>
<p class="cye-lm-tag">Treat input and output data as sequences of lines, each terminated by
a zero byte (the ASCII NUL character) instead of a newline.
Like the <samp>-Z</samp> or <samp>--null</samp> option,
this option can be used with commands like
‘<samp>sort -z</samp>’ to process arbitrary file names.
</p>
</dd>
</dl>

<hr>
<a name="Environment-Variables"></a>
<div class="header">
<p class="cye-lm-tag">
Next: <a href="#Exit-Status" accesskey="n" rel="next">Exit Status</a>, Previous: <a href="#Command_002dline-Options" accesskey="p" rel="prev">Command-line Options</a>, Up: <a href="#Invoking" accesskey="u" rel="up">Invoking</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Environment-Variables-1"></a>
<h3 class="section">2.2 Environment Variables</h3>

<p class="cye-lm-tag">The behavior of <code>grep</code> is affected
by the following environment variables.
</p>
<a name="index-LANGUAGE-environment-variable"></a>
<a name="index-LC_005fALL-environment-variable"></a>
<a name="index-LC_005fMESSAGES-environment-variable"></a>
<a name="index-LANG-environment-variable"></a>
<p class="cye-lm-tag">The locale for category <code><span class="nolinebreak cye-lm-tag">LC_</span><var>foo</var></code><!-- /@w -->
is specified by examining the three environment variables
<code>LC_ALL</code>, <code><span class="nolinebreak cye-lm-tag">LC_</span><var>foo</var></code><!-- /@w -->, and <code>LANG</code>,
in that order.
The first of these variables that is set specifies the locale.
For example, if <code>LC_ALL</code> is not set,
but <code>LC_COLLATE</code> is set to ‘<samp>pt_BR</samp>’,
then the Brazilian Portuguese locale is used
for the <code>LC_COLLATE</code> category.
As a special case for <code>LC_MESSAGES</code> only, the environment variable
<code>LANGUAGE</code> can contain a colon-separated list of languages that
overrides the three environment variables that ordinarily specify
the <code>LC_MESSAGES</code> category.
The ‘<samp>C</samp>’ locale is used if none of these environment variables are set,
if the locale catalog is not installed,
or if <code>grep</code> was not compiled
with national language support (NLS).
The shell command <code>locale -a</code> lists locales that are currently available.
</p>
<p class="cye-lm-tag">Many of the environment variables in the following list let you
control highlighting using
Select Graphic Rendition (SGR)
commands interpreted by the terminal or terminal emulator.
(See the
section
in the documentation of your text terminal
for permitted values and their meanings as character attributes.)
These substring values are integers in decimal representation
and can be concatenated with semicolons.
<code>grep</code> takes care of assembling the result
into a complete SGR sequence (‘<samp>\33[</samp>’...‘<samp>m</samp>’).
Common values to concatenate include
‘<samp>1</samp>’ for bold,
‘<samp>4</samp>’ for underline,
‘<samp>5</samp>’ for blink,
‘<samp>7</samp>’ for inverse,
‘<samp>39</samp>’ for default foreground color,
‘<samp>30</samp>’ to ‘<samp>37</samp>’ for foreground colors,
‘<samp>90</samp>’ to ‘<samp>97</samp>’ for 16-color mode foreground colors,
‘<samp>38;5;0</samp>’ to ‘<samp>38;5;255</samp>’
for 88-color and 256-color modes foreground colors,
‘<samp>49</samp>’ for default background color,
‘<samp>40</samp>’ to ‘<samp>47</samp>’ for background colors,
‘<samp>100</samp>’ to ‘<samp>107</samp>’ for 16-color mode background colors,
and ‘<samp>48;5;0</samp>’ to ‘<samp>48;5;255</samp>’
for 88-color and 256-color modes background colors.
</p>
<p class="cye-lm-tag">The two-letter names used in the <code>GREP_COLORS</code> environment variable
(and some of the others) refer to terminal “capabilities,” the ability
of a terminal to highlight text, or change its color, and so on.
These capabilities are stored in an online database and accessed by
the <code>terminfo</code> library.
</p>
<a name="index-environment-variables"></a>

<dl compact="compact">
<dt><code>GREP_OPTIONS</code></dt>
<dd><a name="index-GREP_005fOPTIONS-environment-variable"></a>
<a name="index-default-options-environment-variable"></a>
<p class="cye-lm-tag">This variable specifies default options to be placed in front of any
explicit options.
As this causes problems when writing portable scripts, this feature
will be removed in a future release of <code>grep</code>, and <code>grep</code>
warns if it is used.  Please use an alias or script instead.
For example, if <code>grep</code> is in the directory ‘<samp>/usr/bin</samp>’ you
can prepend <samp>$HOME/bin</samp> to your <code>PATH</code> and create an
executable script <samp>$HOME/bin/grep</samp> containing the following:
</p>
<div class="example">
<pre class="example">#! /bin/sh
export PATH=/usr/bin
exec grep --color=auto --devices=skip "$@"
</pre></div>

</dd>
<dt><code>GREP_COLOR</code></dt>
<dd><a name="index-GREP_005fCOLOR-environment-variable"></a>
<a name="index-highlight-markers"></a>
<p class="cye-lm-tag">This variable specifies the color used to highlight matched (non-empty) text.
It is deprecated in favor of <code>GREP_COLORS</code>, but still supported.
The ‘<samp>mt</samp>’, ‘<samp>ms</samp>’, and ‘<samp>mc</samp>’ capabilities of <code>GREP_COLORS</code>
have priority over it.
It can only specify the color used to highlight
the matching non-empty text in any matching line
(a selected line when the <samp>-v</samp> command-line option is omitted,
or a context line when <samp>-v</samp> is specified).
The default is ‘<samp>01;31</samp>’,
which means a bold red foreground text on the terminal’s default background.
</p>
</dd>
<dt><code>GREP_COLORS</code></dt>
<dd><a name="index-GREP_005fCOLORS-environment-variable"></a>
<a name="index-highlight-markers-1"></a>
<p class="cye-lm-tag">This variable specifies the colors and other attributes
used to highlight various parts of the output.
Its value is a colon-separated list of <code>terminfo</code> capabilities
that defaults to ‘<samp>ms=01;31:mc=01;31:sl=:cx=:fn=35:ln=32:bn=32:se=36</samp>’
with the ‘<samp>rv</samp>’ and ‘<samp>ne</samp>’ boolean capabilities omitted (i.e., false).
Supported capabilities are as follows.
</p>
<dl compact="compact">
<dt><code>sl=</code></dt>
<dd><a name="index-sl-GREP_005fCOLORS-capability"></a>
<p class="cye-lm-tag">SGR substring for whole selected lines
(i.e.,
matching lines when the <samp>-v</samp> command-line option is omitted,
or non-matching lines when <samp>-v</samp> is specified).
If however the boolean ‘<samp>rv</samp>’ capability
and the <samp>-v</samp> command-line option are both specified,
it applies to context matching lines instead.
The default is empty (i.e., the terminal’s default color pair).
</p>
</dd>
<dt><code>cx=</code></dt>
<dd><a name="index-cx-GREP_005fCOLORS-capability"></a>
<p class="cye-lm-tag">SGR substring for whole context lines
(i.e.,
non-matching lines when the <samp>-v</samp> command-line option is omitted,
or matching lines when <samp>-v</samp> is specified).
If however the boolean ‘<samp>rv</samp>’ capability
and the <samp>-v</samp> command-line option are both specified,
it applies to selected non-matching lines instead.
The default is empty (i.e., the terminal’s default color pair).
</p>
</dd>
<dt><code>rv</code></dt>
<dd><a name="index-rv-GREP_005fCOLORS-capability"></a>
<p class="cye-lm-tag">Boolean value that reverses (swaps) the meanings of
the ‘<samp>sl=</samp>’ and ‘<samp>cx=</samp>’ capabilities
when the <samp>-v</samp> command-line option is specified.
The default is false (i.e., the capability is omitted).
</p>
</dd>
<dt><code>mt=01;31</code></dt>
<dd><a name="index-mt-GREP_005fCOLORS-capability"></a>
<p class="cye-lm-tag">SGR substring for matching non-empty text in any matching line
(i.e.,
a selected line when the <samp>-v</samp> command-line option is omitted,
or a context line when <samp>-v</samp> is specified).
Setting this is equivalent to setting both ‘<samp>ms=</samp>’ and ‘<samp>mc=</samp>’
at once to the same value.
The default is a bold red text foreground over the current line background.
</p>
</dd>
<dt><code>ms=01;31</code></dt>
<dd><a name="index-ms-GREP_005fCOLORS-capability"></a>
<p class="cye-lm-tag">SGR substring for matching non-empty text in a selected line.
(This is used only when the <samp>-v</samp> command-line option is omitted.)
The effect of the ‘<samp>sl=</samp>’ (or ‘<samp>cx=</samp>’ if ‘<samp>rv</samp>’) capability
remains active when this takes effect.
The default is a bold red text foreground over the current line background.
</p>
</dd>
<dt><code>mc=01;31</code></dt>
<dd><a name="index-mc-GREP_005fCOLORS-capability"></a>
<p class="cye-lm-tag">SGR substring for matching non-empty text in a context line.
(This is used only when the <samp>-v</samp> command-line option is specified.)
The effect of the ‘<samp>cx=</samp>’ (or ‘<samp>sl=</samp>’ if ‘<samp>rv</samp>’) capability
remains active when this takes effect.
The default is a bold red text foreground over the current line background.
</p>
</dd>
<dt><code>fn=35</code></dt>
<dd><a name="index-fn-GREP_005fCOLORS-capability"></a>
<p class="cye-lm-tag">SGR substring for file names prefixing any content line.
The default is a magenta text foreground over the terminal’s default background.
</p>
</dd>
<dt><code>ln=32</code></dt>
<dd><a name="index-ln-GREP_005fCOLORS-capability"></a>
<p class="cye-lm-tag">SGR substring for line numbers prefixing any content line.
The default is a green text foreground over the terminal’s default background.
</p>
</dd>
<dt><code>bn=32</code></dt>
<dd><a name="index-bn-GREP_005fCOLORS-capability"></a>
<p class="cye-lm-tag">SGR substring for byte offsets prefixing any content line.
The default is a green text foreground over the terminal’s default background.
</p>
</dd>
<dt><code>se=36</code></dt>
<dd><a name="index-fn-GREP_005fCOLORS-capability-1"></a>
<p class="cye-lm-tag">SGR substring for separators that are inserted
between selected line fields (‘<samp>:</samp>’),
between context line fields (‘<samp>-</samp>’),
and between groups of adjacent lines
when nonzero context is specified (‘<samp>--</samp>’).
The default is a cyan text foreground over the terminal’s default background.
</p>
</dd>
<dt><code>ne</code></dt>
<dd><a name="index-ne-GREP_005fCOLORS-capability"></a>
<p class="cye-lm-tag">Boolean value that prevents clearing to the end of line
using Erase in Line (EL) to Right (‘<samp>\33[K</samp>’)
each time a colorized item ends.
This is needed on terminals on which EL is not supported.
It is otherwise useful on terminals
for which the <code>back_color_erase</code>
(<code>bce</code>) boolean <code>terminfo</code> capability does not apply,
when the chosen highlight colors do not affect the background,
or when EL is too slow or causes too much flicker.
The default is false (i.e., the capability is omitted).
</p></dd>
</dl>

<p class="cye-lm-tag">Note that boolean capabilities have no ‘<samp>=</samp>’... part.
They are omitted (i.e., false) by default and become true when specified.
</p>

</dd>
<dt><code>LC_ALL</code></dt>
<dt><code>LC_COLLATE</code></dt>
<dt><code>LANG</code></dt>
<dd><a name="index-LC_005fALL-environment-variable-1"></a>
<a name="index-LC_005fCOLLATE-environment-variable"></a>
<a name="index-LANG-environment-variable-1"></a>
<a name="index-character-type"></a>
<a name="index-national-language-support"></a>
<a name="index-NLS"></a>
<p class="cye-lm-tag">These variables specify the locale for the <code>LC_COLLATE</code> category,
which might affect how range expressions like ‘<samp>[a-z]</samp>’ are
interpreted.
</p>
</dd>
<dt><code>LC_ALL</code></dt>
<dt><code>LC_CTYPE</code></dt>
<dt><code>LANG</code></dt>
<dd><a name="index-LC_005fALL-environment-variable-2"></a>
<a name="index-LC_005fCTYPE-environment-variable"></a>
<a name="index-LANG-environment-variable-2"></a>
<p class="cye-lm-tag">These variables specify the locale for the <code>LC_CTYPE</code> category,
which determines the type of characters,
e.g., which characters are whitespace.
This category also determines the character encoding, that is, whether
text is encoded in UTF-8, ASCII, or some other encoding.  In the
‘<samp>C</samp>’ or ‘<samp>POSIX</samp>’ locale, all characters are encoded as a
single byte and every byte is a valid character.
</p>
</dd>
<dt><code>LANGUAGE</code></dt>
<dt><code>LC_ALL</code></dt>
<dt><code>LC_MESSAGES</code></dt>
<dt><code>LANG</code></dt>
<dd><a name="index-LANGUAGE-environment-variable-1"></a>
<a name="index-LC_005fALL-environment-variable-3"></a>
<a name="index-LC_005fMESSAGES-environment-variable-1"></a>
<a name="index-LANG-environment-variable-3"></a>
<a name="index-language-of-messages"></a>
<a name="index-message-language"></a>
<a name="index-national-language-support-1"></a>
<a name="index-translation-of-message-language"></a>
<p class="cye-lm-tag">These variables specify the locale for the <code>LC_MESSAGES</code> category,
which determines the language that <code>grep</code> uses for messages.
The default ‘<samp>C</samp>’ locale uses American English messages.
</p>
</dd>
<dt><code>POSIXLY_CORRECT</code></dt>
<dd><a name="index-POSIXLY_005fCORRECT-environment-variable"></a>
<p class="cye-lm-tag">If set, <code>grep</code> behaves as POSIX requires; otherwise,
<code>grep</code> behaves more like other GNU programs.
POSIX
requires that options that
follow file names must be treated as file names;
by default,
such options are permuted to the front of the operand list
and are treated as options.
Also, <code>POSIXLY_CORRECT</code> disables special handling of an
invalid bracket expression.  See <a href="#invalid_002dbracket_002dexpr">invalid-bracket-expr</a>.
</p>
</dd>
<dt><code>_<var>N</var>_GNU_nonoption_argv_flags_</code></dt>
<dd><a name="index-_005fN_005fGNU_005fnonoption_005fargv_005fflags_005f-environment-variable"></a>
<p class="cye-lm-tag">(Here <code><var>N</var></code> is <code>grep</code>’s numeric process ID.)
If the <var>i</var>th character of this environment variable’s value is ‘<samp>1</samp>’,
do not consider the <var>i</var>th operand of <code>grep</code> to be an option,
even if it appears to be one.
A shell can put this variable in the environment for each command it runs,
specifying which operands are the results of file name wildcard expansion
and therefore should not be treated as options.
This behavior is available only with the GNU C library,
and only when <code>POSIXLY_CORRECT</code> is not set.
</p>
</dd>
</dl>


<hr>
<a name="Exit-Status"></a>
<div class="header">
<p class="cye-lm-tag">
Next: <a href="#grep-Programs" accesskey="n" rel="next">grep Programs</a>, Previous: <a href="#Environment-Variables" accesskey="p" rel="prev">Environment Variables</a>, Up: <a href="#Invoking" accesskey="u" rel="up">Invoking</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Exit-Status-1"></a>
<h3 class="section">2.3 Exit Status</h3>
<a name="index-exit-status"></a>
<a name="index-return-status"></a>

<p class="cye-lm-tag">Normally the exit status is 0 if a line is selected, 1 if no lines
were selected, and 2 if an error occurred.  However, if the
<samp>-q</samp> or <samp>--quiet</samp> or <samp>--silent</samp> option is used
and a line is selected, the exit status is 0 even if an error
occurred.  Other <code>grep</code> implementations may exit with status
greater than 2 on error.
</p>
<hr>
<a name="grep-Programs"></a>
<div class="header">
<p class="cye-lm-tag">
Previous: <a href="#Exit-Status" accesskey="p" rel="prev">Exit Status</a>, Up: <a href="#Invoking" accesskey="u" rel="up">Invoking</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="grep-Programs-1"></a>
<h3 class="section">2.4 <code>grep</code> Programs</h3>
<a name="index-grep-programs"></a>
<a name="index-variants-of-grep"></a>

<p class="cye-lm-tag"><code>grep</code> searches the named input files
for lines containing a match to the given pattern.
By default, <code>grep</code> prints the matching lines.
A file named <samp>-</samp> stands for standard input.
If no input is specified, <code>grep</code> searches the working
directory <samp>.</samp> if given a command-line option specifying
recursion; otherwise, <code>grep</code> searches standard input.
There are four major variants of <code>grep</code>,
controlled by the following options.
</p>
<dl compact="compact">
<dt><samp>-G</samp></dt>
<dt><samp>--basic-regexp</samp></dt>
<dd><a name="index-_002dG"></a>
<a name="index-_002d_002dbasic_002dregexp"></a>
<a name="index-matching-basic-regular-expressions"></a>
<p class="cye-lm-tag">Interpret the pattern as a basic regular expression (BRE).
This is the default.
</p>
</dd>
<dt><samp>-E</samp></dt>
<dt><samp>--extended-regexp</samp></dt>
<dd><a name="index-_002dE"></a>
<a name="index-_002d_002dextended_002dregexp"></a>
<a name="index-matching-extended-regular-expressions"></a>
<p class="cye-lm-tag">Interpret the pattern as an extended regular expression (ERE).
(<samp>-E</samp> is specified by POSIX.)
</p>
</dd>
<dt><samp>-F</samp></dt>
<dt><samp>--fixed-strings</samp></dt>
<dd><a name="index-_002dF"></a>
<a name="index-_002d_002dfixed_002dstrings"></a>
<a name="index-matching-fixed-strings"></a>
<p class="cye-lm-tag">Interpret the pattern as a list of fixed strings (instead of regular
expressions), separated by newlines, any of which is to be matched.
(<samp>-F</samp> is specified by POSIX.)
</p>
</dd>
<dt><samp>-P</samp></dt>
<dt><samp>--perl-regexp</samp></dt>
<dd><a name="index-_002dP"></a>
<a name="index-_002d_002dperl_002dregexp"></a>
<a name="index-matching-Perl_002dcompatible-regular-expressions"></a>
<p class="cye-lm-tag">Interpret the pattern as a Perl-compatible regular expression (PCRE).
This is highly experimental, particularly when combined with
the <samp>-z</samp> (<samp>--null-data</samp>) option, and
‘<samp>grep&nbsp;-P</samp>’ may warn of unimplemented features.
See <a href="#Other-Options">Other Options</a>.
</p>
</dd>
</dl>

<p class="cye-lm-tag">In addition,
two variant programs <code>egrep</code> and <code>fgrep</code> are available.
<code>egrep</code> is the same as ‘<samp>grep&nbsp;-E</samp>’.
<code>fgrep</code> is the same as ‘<samp>grep&nbsp;-F</samp>’.
Direct invocation as either
<code>egrep</code> or <code>fgrep</code> is deprecated,
but is provided to allow historical applications
that rely on them to run unmodified.
</p>

<hr>
<a name="Regular-Expressions"></a>
<div class="header">
<p class="cye-lm-tag">
Next: <a href="#Usage" accesskey="n" rel="next">Usage</a>, Previous: <a href="#Invoking" accesskey="p" rel="prev">Invoking</a>, Up: <a href="#Top" accesskey="u" rel="up">Top</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Regular-Expressions-1"></a>
<h2 class="chapter">3 Regular Expressions</h2>
<a name="index-regular-expressions"></a>

<p class="cye-lm-tag">A <em>regular expression</em> is a pattern that describes a set of strings.
Regular expressions are constructed analogously to arithmetic expressions,
by using various operators to combine smaller expressions.
<code>grep</code> understands
three different versions of regular expression syntax:
“basic” (BRE), “extended” (ERE) and “perl” (PCRE).
In GNU <code>grep</code>,
there is no difference in available functionality between the basic and
extended syntaxes.
In other implementations, basic regular expressions are less powerful.
The following description applies to extended regular expressions;
differences for basic regular expressions are summarized afterwards.
Perl-compatible regular expressions give additional functionality, and
are documented in the <i>pcresyntax</i>(3) and <i>pcrepattern</i>(3) manual
pages, but work only if PCRE is available in the system.
</p>
<table class="menu" border="0" cellspacing="0">
<tbody><tr><td align="left" valign="top">• <a href="#Fundamental-Structure" accesskey="1">Fundamental Structure</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">• <a href="#Character-Classes-and-Bracket-Expressions" accesskey="2">Character Classes and Bracket Expressions</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">• <a href="#The-Backslash-Character-and-Special-Expressions" accesskey="3">The Backslash Character and Special Expressions</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">• <a href="#Anchoring" accesskey="4">Anchoring</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">• <a href="#Back_002dreferences-and-Subexpressions" accesskey="5">Back-references and Subexpressions</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
<tr><td align="left" valign="top">• <a href="#Basic-vs-Extended" accesskey="6">Basic vs Extended</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
</td></tr>
</tbody></table>

<hr>
<a name="Fundamental-Structure"></a>
<div class="header">
<p class="cye-lm-tag">
Next: <a href="#Character-Classes-and-Bracket-Expressions" accesskey="n" rel="next">Character Classes and Bracket Expressions</a>, Up: <a href="#Regular-Expressions" accesskey="u" rel="up">Regular Expressions</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Fundamental-Structure-1"></a>
<h3 class="section">3.1 Fundamental Structure</h3>

<p class="cye-lm-tag">The fundamental building blocks are the regular expressions that match
a single character.
Most characters, including all letters and digits,
are regular expressions that match themselves.
Any meta-character
with special meaning may be quoted by preceding it with a backslash.
</p>
<p class="cye-lm-tag">A regular expression may be followed by one of several
repetition operators:
</p>
<dl compact="compact">
<dt>‘<samp>.</samp>’</dt>
<dd><a name="index-_002e"></a>
<a name="index-dot"></a>
<a name="index-period"></a>
<p class="cye-lm-tag">The period ‘<samp>.</samp>’ matches any single character.
</p>
</dd>
<dt>‘<samp>?</samp>’</dt>
<dd><a name="index-_003f"></a>
<a name="index-question-mark"></a>
<a name="index-match-expression-at-most-once"></a>
<p class="cye-lm-tag">The preceding item is optional and will be matched at most once.
</p>
</dd>
<dt>‘<samp>*</samp>’</dt>
<dd><a name="index-_002a"></a>
<a name="index-asterisk"></a>
<a name="index-match-expression-zero-or-more-times"></a>
<p class="cye-lm-tag">The preceding item will be matched zero or more times.
</p>
</dd>
<dt>‘<samp>+</samp>’</dt>
<dd><a name="index-_002b"></a>
<a name="index-plus-sign"></a>
<a name="index-match-expression-one-or-more-times"></a>
<p class="cye-lm-tag">The preceding item will be matched one or more times.
</p>
</dd>
<dt>‘<samp>{<var>n</var>}</samp>’</dt>
<dd><a name="index-_007bn_007d"></a>
<a name="index-braces_002c-one-argument"></a>
<a name="index-match-expression-n-times"></a>
<p class="cye-lm-tag">The preceding item is matched exactly <var>n</var> times.
</p>
</dd>
<dt>‘<samp>{<var>n</var>,}</samp>’</dt>
<dd><a name="index-_007bn_002c_007d"></a>
<a name="index-braces_002c-second-argument-omitted"></a>
<a name="index-match-expression-n-or-more-times"></a>
<p class="cye-lm-tag">The preceding item is matched <var>n</var> or more times.
</p>
</dd>
<dt>‘<samp>{,<var>m</var>}</samp>’</dt>
<dd><a name="index-_007b_002cm_007d"></a>
<a name="index-braces_002c-first-argument-omitted"></a>
<a name="index-match-expression-at-most-m-times"></a>
<p class="cye-lm-tag">The preceding item is matched at most <var>m</var> times.
This is a GNU extension.
</p>
</dd>
<dt>‘<samp>{<var>n</var>,<var>m</var>}</samp>’</dt>
<dd><a name="index-_007bn_002cm_007d"></a>
<a name="index-braces_002c-two-arguments"></a>
<a name="index-match-expression-from-n-to-m-times"></a>
<p class="cye-lm-tag">The preceding item is matched at least <var>n</var> times, but not more than
<var>m</var> times.
</p>
</dd>
</dl>

<p class="cye-lm-tag">The empty regular expression matches the empty string.
Two regular expressions may be concatenated;
the resulting regular expression
matches any string formed by concatenating two substrings
that respectively match the concatenated expressions.
</p>
<p class="cye-lm-tag">Two regular expressions may be joined by the infix operator ‘<samp>|</samp>’;
the resulting regular expression
matches any string matching either alternate expression.
</p>
<p class="cye-lm-tag">Repetition takes precedence over concatenation,
which in turn takes precedence over alternation.
A whole expression may be enclosed in parentheses
to override these precedence rules and form a subexpression.
An unmatched ‘<samp>)</samp>’ matches just itself.
</p>
<hr>
<a name="Character-Classes-and-Bracket-Expressions"></a>
<div class="header">
<p class="cye-lm-tag">
Next: <a href="#The-Backslash-Character-and-Special-Expressions" accesskey="n" rel="next">The Backslash Character and Special Expressions</a>, Previous: <a href="#Fundamental-Structure" accesskey="p" rel="prev">Fundamental Structure</a>, Up: <a href="#Regular-Expressions" accesskey="u" rel="up">Regular Expressions</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Character-Classes-and-Bracket-Expressions-1"></a>
<h3 class="section">3.2 Character Classes and Bracket Expressions</h3>

<a name="index-bracket-expression"></a>
<a name="index-character-class"></a>
<p class="cye-lm-tag">A <em>bracket expression</em> is a list of characters enclosed by ‘<samp>[</samp>’ and
‘<samp>]</samp>’.
It matches any single character in that list;
if the first character of the list is the caret ‘<samp>^</samp>’,
then it matches any character <strong>not</strong> in the list.
For example, the regular expression
‘<samp>[0123456789]</samp>’ matches any single digit.
</p>
<a name="index-range-expression"></a>
<p class="cye-lm-tag">Within a bracket expression, a <em>range expression</em> consists of two
characters separated by a hyphen.
It matches any single character that
sorts between the two characters, inclusive.
In the default C locale, the sorting sequence is the native character
order; for example, ‘<samp>[a-d]</samp>’ is equivalent to ‘<samp>[abcd]</samp>’.
In other locales, the sorting sequence is not specified, and
‘<samp>[a-d]</samp>’ might be equivalent to ‘<samp>[abcd]</samp>’ or to
‘<samp>[aBbCcDd]</samp>’, or it might fail to match any character, or the set of
characters that it matches might even be erratic.
To obtain the traditional interpretation
of bracket expressions, you can use the ‘<samp>C</samp>’ locale by setting the
<code>LC_ALL</code> environment variable to the value ‘<samp>C</samp>’.
</p>
<p class="cye-lm-tag">Finally, certain named classes of characters are predefined within
bracket expressions, as follows.
Their interpretation depends on the <code>LC_CTYPE</code> locale;
for example, ‘<samp>[[:alnum:]]</samp>’ means the character class of numbers and letters
in the current locale.
</p>
<a name="index-classes-of-characters"></a>
<a name="index-character-classes"></a>
<dl compact="compact">
<dt>‘<samp>[:alnum:]</samp>’</dt>
<dd><a name="index-alnum-character-class"></a>
<a name="index-alphanumeric-characters"></a>
<p class="cye-lm-tag">Alphanumeric characters:
‘<samp>[:alpha:]</samp>’ and ‘<samp>[:digit:]</samp>’; in the ‘<samp>C</samp>’ locale and ASCII
character encoding, this is the same as ‘<samp>[0-9A-Za-z]</samp>’.
</p>
</dd>
<dt>‘<samp>[:alpha:]</samp>’</dt>
<dd><a name="index-alpha-character-class"></a>
<a name="index-alphabetic-characters"></a>
<p class="cye-lm-tag">Alphabetic characters:
‘<samp>[:lower:]</samp>’ and ‘<samp>[:upper:]</samp>’; in the ‘<samp>C</samp>’ locale and ASCII
character encoding, this is the same as ‘<samp>[A-Za-z]</samp>’.
</p>
</dd>
<dt>‘<samp>[:blank:]</samp>’</dt>
<dd><a name="index-blank-character-class"></a>
<a name="index-blank-characters"></a>
<p class="cye-lm-tag">Blank characters:
space and tab.
</p>
</dd>
<dt>‘<samp>[:cntrl:]</samp>’</dt>
<dd><a name="index-cntrl-character-class"></a>
<a name="index-control-characters"></a>
<p class="cye-lm-tag">Control characters.
In ASCII, these characters have octal codes 000
through 037, and 177 (DEL).
In other character sets, these are
the equivalent characters, if any.
</p>
</dd>
<dt>‘<samp>[:digit:]</samp>’</dt>
<dd><a name="index-digit-character-class"></a>
<a name="index-digit-characters"></a>
<a name="index-numeric-characters"></a>
<p class="cye-lm-tag">Digits: <code>0 1 2 3 4 5 6 7 8 9</code>.
</p>
</dd>
<dt>‘<samp>[:graph:]</samp>’</dt>
<dd><a name="index-graph-character-class"></a>
<a name="index-graphic-characters"></a>
<p class="cye-lm-tag">Graphical characters:
‘<samp>[:alnum:]</samp>’ and ‘<samp>[:punct:]</samp>’.
</p>
</dd>
<dt>‘<samp>[:lower:]</samp>’</dt>
<dd><a name="index-lower-character-class"></a>
<a name="index-lower_002dcase-letters"></a>
<p class="cye-lm-tag">Lower-case letters; in the ‘<samp>C</samp>’ locale and ASCII character
encoding, this is
<code>a b c d e f g h i j k l m n o p q r s t u v w x y z</code>.
</p>
</dd>
<dt>‘<samp>[:print:]</samp>’</dt>
<dd><a name="index-print-character-class"></a>
<a name="index-printable-characters"></a>
<p class="cye-lm-tag">Printable characters:
‘<samp>[:alnum:]</samp>’, ‘<samp>[:punct:]</samp>’, and space.
</p>
</dd>
<dt>‘<samp>[:punct:]</samp>’</dt>
<dd><a name="index-punct-character-class"></a>
<a name="index-punctuation-characters"></a>
<p class="cye-lm-tag">Punctuation characters; in the ‘<samp>C</samp>’ locale and ASCII character
encoding, this is
<code>! " # $ % &amp; ' ( ) * + , - . / : ; &lt; = &gt; ? @ [ \ ] ^ _ ` { | } ~</code>.
</p>
</dd>
<dt>‘<samp>[:space:]</samp>’</dt>
<dd><a name="index-space-character-class"></a>
<a name="index-space-characters"></a>
<a name="index-whitespace-characters"></a>
<p class="cye-lm-tag">Space characters: in the ‘<samp>C</samp>’ locale, this is
tab, newline, vertical tab, form feed, carriage return, and space.
See <a href="#Usage">Usage</a>, for more discussion of matching newlines.
</p>
</dd>
<dt>‘<samp>[:upper:]</samp>’</dt>
<dd><a name="index-upper-character-class"></a>
<a name="index-upper_002dcase-letters"></a>
<p class="cye-lm-tag">Upper-case letters: in the ‘<samp>C</samp>’ locale and ASCII character
encoding, this is
<code>A B C D E F G H I J K L M N O P Q R S T U V W X Y Z</code>.
</p>
</dd>
<dt>‘<samp>[:xdigit:]</samp>’</dt>
<dd><a name="index-xdigit-character-class"></a>
<a name="index-xdigit-class"></a>
<a name="index-hexadecimal-digits"></a>
<p class="cye-lm-tag">Hexadecimal digits:
<code>0 1 2 3 4 5 6 7 8 9 A B C D E F a b c d e f</code>.
</p>
</dd>
</dl>
<p class="cye-lm-tag">Note that the brackets in these class names are
part of the symbolic names, and must be included in addition to
the brackets delimiting the bracket expression.
</p>
<a name="invalid_002dbracket_002dexpr"></a><p class="cye-lm-tag">If you mistakenly omit the outer brackets, and search for say, ‘<samp>[:upper:]</samp>’,
GNU <code>grep</code> prints a diagnostic and exits with status 2, on
the assumption that you did not intend to search for the nominally
equivalent regular expression: ‘<samp>[:epru]</samp>’.
Set the <code>POSIXLY_CORRECT</code> environment variable to disable this feature.
</p>
<p class="cye-lm-tag">Most meta-characters lose their special meaning inside bracket expressions.
</p>
<dl compact="compact">
<dt>‘<samp>]</samp>’</dt>
<dd><p class="cye-lm-tag">ends the bracket expression if it’s not the first list item.
So, if you want to make the ‘<samp>]</samp>’ character a list item,
you must put it first.
</p>
</dd>
<dt>‘<samp>[.</samp>’</dt>
<dd><p class="cye-lm-tag">represents the open collating symbol.
</p>
</dd>
<dt>‘<samp>.]</samp>’</dt>
<dd><p class="cye-lm-tag">represents the close collating symbol.
</p>
</dd>
<dt>‘<samp>[=</samp>’</dt>
<dd><p class="cye-lm-tag">represents the open equivalence class.
</p>
</dd>
<dt>‘<samp>=]</samp>’</dt>
<dd><p class="cye-lm-tag">represents the close equivalence class.
</p>
</dd>
<dt>‘<samp>[:</samp>’</dt>
<dd><p class="cye-lm-tag">represents the open character class symbol, and should be followed by a
valid character class name.
</p>
</dd>
<dt>‘<samp>:]</samp>’</dt>
<dd><p class="cye-lm-tag">represents the close character class symbol.
</p>
</dd>
<dt>‘<samp>-</samp>’</dt>
<dd><p class="cye-lm-tag">represents the range if it’s not first or last in a list or the ending point
of a range.
</p>
</dd>
<dt>‘<samp>^</samp>’</dt>
<dd><p class="cye-lm-tag">represents the characters not in the list.
If you want to make the ‘<samp>^</samp>’
character a list item, place it anywhere but first.
</p>
</dd>
</dl>

<hr>
<a name="The-Backslash-Character-and-Special-Expressions"></a>
<div class="header">
<p class="cye-lm-tag">
Next: <a href="#Anchoring" accesskey="n" rel="next">Anchoring</a>, Previous: <a href="#Character-Classes-and-Bracket-Expressions" accesskey="p" rel="prev">Character Classes and Bracket Expressions</a>, Up: <a href="#Regular-Expressions" accesskey="u" rel="up">Regular Expressions</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="The-Backslash-Character-and-Special-Expressions-1"></a>
<h3 class="section">3.3 The Backslash Character and Special Expressions</h3>
<a name="index-backslash"></a>

<p class="cye-lm-tag">The ‘<samp>\</samp>’ character,
when followed by certain ordinary characters,
takes a special meaning:
</p>
<dl compact="compact">
<dt>‘<samp>\b</samp>’</dt>
<dd><p class="cye-lm-tag">Match the empty string at the edge of a word.
</p>
</dd>
<dt>‘<samp>\B</samp>’</dt>
<dd><p class="cye-lm-tag">Match the empty string provided it’s not at the edge of a word.
</p>
</dd>
<dt>‘<samp>\&lt;</samp>’</dt>
<dd><p class="cye-lm-tag">Match the empty string at the beginning of word.
</p>
</dd>
<dt>‘<samp>\&gt;</samp>’</dt>
<dd><p class="cye-lm-tag">Match the empty string at the end of word.
</p>
</dd>
<dt>‘<samp>\w</samp>’</dt>
<dd><p class="cye-lm-tag">Match word constituent, it is a synonym for ‘<samp>[_[:alnum:]]</samp>’.
</p>
</dd>
<dt>‘<samp>\W</samp>’</dt>
<dd><p class="cye-lm-tag">Match non-word constituent, it is a synonym for ‘<samp>[^_[:alnum:]]</samp>’.
</p>
</dd>
<dt>‘<samp>\s</samp>’</dt>
<dd><p class="cye-lm-tag">Match whitespace, it is a synonym for ‘<samp>[[:space:]]</samp>’.
</p>
</dd>
<dt>‘<samp>\S</samp>’</dt>
<dd><p class="cye-lm-tag">Match non-whitespace, it is a synonym for ‘<samp>[^[:space:]]</samp>’.
</p>
</dd>
</dl>

<p class="cye-lm-tag">For example, ‘<samp>\brat\b</samp>’ matches the separate word ‘<samp>rat</samp>’,
‘<samp>\Brat\B</samp>’ matches ‘<samp>crate</samp>’ but not ‘<samp>furry rat</samp>’.
</p>
<hr>
<a name="Anchoring"></a>
<div class="header">
<p class="cye-lm-tag">
Next: <a href="#Back_002dreferences-and-Subexpressions" accesskey="n" rel="next">Back-references and Subexpressions</a>, Previous: <a href="#The-Backslash-Character-and-Special-Expressions" accesskey="p" rel="prev">The Backslash Character and Special Expressions</a>, Up: <a href="#Regular-Expressions" accesskey="u" rel="up">Regular Expressions</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Anchoring-1"></a>
<h3 class="section">3.4 Anchoring</h3>
<a name="index-anchoring"></a>

<p class="cye-lm-tag">The caret ‘<samp>^</samp>’ and the dollar sign ‘<samp>$</samp>’ are meta-characters that
respectively match the empty string at the beginning and end of a line.
They are termed <em>anchors</em>, since they force the match to be “anchored”
to beginning or end of a line, respectively.
</p>
<hr>
<a name="Back_002dreferences-and-Subexpressions"></a>
<div class="header">
<p class="cye-lm-tag">
Next: <a href="#Basic-vs-Extended" accesskey="n" rel="next">Basic vs Extended</a>, Previous: <a href="#Anchoring" accesskey="p" rel="prev">Anchoring</a>, Up: <a href="#Regular-Expressions" accesskey="u" rel="up">Regular Expressions</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Back_002dreferences-and-Subexpressions-1"></a>
<h3 class="section">3.5 Back-references and Subexpressions</h3>
<a name="index-subexpression"></a>
<a name="index-back_002dreference"></a>

<p class="cye-lm-tag">The back-reference ‘<samp>\<var>n</var></samp>’, where <var>n</var> is a single digit, matches
the substring previously matched by the <var>n</var>th parenthesized subexpression
of the regular expression.
For example, ‘<samp>(a)\1</samp>’ matches ‘<samp>aa</samp>’.
When used with alternation, if the group does not participate in the match then
the back-reference makes the whole match fail.
For example, ‘<samp>a(.)|b\1</samp>’
will not match ‘<samp>ba</samp>’.
When multiple regular expressions are given with
<samp>-e</samp> or from a file (‘<samp>-f <var>file</var></samp>’),
back-references are local to each expression.
</p>
<hr>
<a name="Basic-vs-Extended"></a>
<div class="header">
<p class="cye-lm-tag">
Previous: <a href="#Back_002dreferences-and-Subexpressions" accesskey="p" rel="prev">Back-references and Subexpressions</a>, Up: <a href="#Regular-Expressions" accesskey="u" rel="up">Regular Expressions</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Basic-vs-Extended-Regular-Expressions"></a>
<h3 class="section">3.6 Basic vs Extended Regular Expressions</h3>
<a name="index-basic-regular-expressions"></a>

<p class="cye-lm-tag">In basic regular expressions the meta-characters ‘<samp>?</samp>’, ‘<samp>+</samp>’,
‘<samp>{</samp>’, ‘<samp>|</samp>’, ‘<samp>(</samp>’, and ‘<samp>)</samp>’ lose their special meaning;
instead use the backslashed versions ‘<samp>\?</samp>’, ‘<samp>\+</samp>’, ‘<samp>\{</samp>’,
‘<samp>\|</samp>’, ‘<samp>\(</samp>’, and ‘<samp>\)</samp>’.
</p>
<a name="index-interval-specifications"></a>
<p class="cye-lm-tag">Traditional <code>egrep</code> did not support the ‘<samp>{</samp>’ meta-character,
and some <code>egrep</code> implementations support ‘<samp>\{</samp>’ instead, so
portable scripts should avoid ‘<samp>{</samp>’ in ‘<samp>grep&nbsp;-E</samp>’ patterns and
should use ‘<samp>[{]</samp>’ to match a literal ‘<samp>{</samp>’.
</p>
<p class="cye-lm-tag">GNU <code>grep&nbsp;-E</code> attempts to support traditional usage by
assuming that ‘<samp>{</samp>’ is not special if it would be the start of an
invalid interval specification.
For example, the command
‘<samp>grep&nbsp;-E&nbsp;'{1'</samp>’ searches for the two-character string ‘<samp>{1</samp>’
instead of reporting a syntax error in the regular expression.
POSIX allows this behavior as an extension, but portable scripts
should avoid it.
</p>

<hr>
<a name="Usage"></a>
<div class="header">
<p class="cye-lm-tag">
Next: <a href="#Reporting-Bugs" accesskey="n" rel="next">Reporting Bugs</a>, Previous: <a href="#Regular-Expressions" accesskey="p" rel="prev">Regular Expressions</a>, Up: <a href="#Top" accesskey="u" rel="up">Top</a> &nbsp; [<a href="#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="#Index" title="Index" rel="index">Index</a>]</p>
</div>
<a name="Usage-1"></a>
<h2 class="chapter">4 Usage</h2>

<a name="index-usage_002c-examples"></a>
<p class="cye-lm-tag">Here is an example command that invokes GNU <code>grep</code>:
</p>
<div class="example">
<pre class="example">grep -i 'hello.*world' menu.h main.c
</pre></div>

<p class="cye-lm-tag">This lists all lines in the files <samp>menu.h</samp> and <samp>main.c</samp> that
contain the string ‘<samp>hello</samp>’ followed by the string ‘<samp>world</samp>’;
this is because ‘<samp>.*</samp>’ matches zero or more characters within a line.
See <a href="#Regular-Expressions">Regular Expressions</a>.
The <samp>-i</samp> option causes <code>grep</code>
to ignore case, causing it to match the line ‘<samp>Hello, world!</samp>’, which
it would not otherwise match.
See <a href="#Invoking">Invoking</a>, for more details about
how to invoke <code>grep</code>.
</p>
<a name="index-using-grep_002c-Q_0026A"></a>
<a name="index-FAQ-about-grep-usage"></a>
<p class="cye-lm-tag">Here are some common questions and answers about <code>grep</code> usage.
</p>
<ol>
<li> How can I list just the names of matching files?

<div class="example">
<pre class="example">grep -l 'main' *.c
</pre></div>

<p class="cye-lm-tag">lists the names of all C files in the current directory whose contents
mention ‘<samp>main</samp>’.
</p>
</li><li> How do I search directories recursively?

<div class="example">
<pre class="example">grep -r 'hello' /home/gigi
</pre></div>

<p class="cye-lm-tag">searches for ‘<samp>hello</samp>’ in all files
under the <samp>/home/gigi</samp> directory.
For more control over which files are searched,
use <code>find</code>, <code>grep</code>, and <code>xargs</code>.
For example, the following command searches only C files:
</p>
<div class="example">
<pre class="example">find /home/gigi -name '*.c' -print0 | xargs -0r grep -H 'hello'
</pre></div>

<p class="cye-lm-tag">This differs from the command:
</p>
<div class="example">
<pre class="example">grep -H 'hello' *.c
</pre></div>

<p class="cye-lm-tag">which merely looks for ‘<samp>hello</samp>’ in all files in the current
directory whose names end in ‘<samp>.c</samp>’.
The ‘<samp>find ...</samp>’ command line above is more similar to the command:
</p>
<div class="example">
<pre class="example">grep -rH --include='*.c' 'hello' /home/gigi
</pre></div>

</li><li> What if a pattern has a leading ‘<samp>-</samp>’?

<div class="example">
<pre class="example">grep -e '--cut here--' *
</pre></div>

<p class="cye-lm-tag">searches for all lines matching ‘<samp>--cut here--</samp>’.
Without <samp>-e</samp>,
<code>grep</code> would attempt to parse ‘<samp>--cut here--</samp>’ as a list of
options.
</p>
</li><li> Suppose I want to search for a whole word, not a part of a word?

<div class="example">
<pre class="example">grep -w 'hello' *
</pre></div>

<p class="cye-lm-tag">searches only for instances of ‘<samp>hello</samp>’ that are entire words;
it does not match ‘<samp>Othello</samp>’.
For more control, use ‘<samp>\&lt;</samp>’ and
‘<samp>\&gt;</samp>’ to match the start and end of words.
For example:
</p>
<div class="example">
<pre class="example">grep 'hello\&gt;' *
</pre></div>

<p class="cye-lm-tag">searches only for words ending in ‘<samp>hello</samp>’, so it matches the word
‘<samp>Othello</samp>’.
</p>
</li><li> How do I output context around the matching lines?

<div class="example">
<pre class="example">grep -C 2 'hello' *
</pre></div>

<p class="cye-lm-tag">prints two lines of context around each matching line.
</p>
</li><li> How do I force <code>grep</code> to print the name of the file?

<p class="cye-lm-tag">Append <samp>/dev/null</samp>:
</p>
<div class="example">
<pre class="example">grep 'eli' /etc/passwd /dev/null
</pre></div>

<p class="cye-lm-tag">gets you:
</p>
<div class="example">
<pre class="example">/etc/passwd:eli:x:2098:1000:Eli Smith:/home/eli:/bin/bash
</pre></div>

<p class="cye-lm-tag">Alternatively, use <samp>-H</samp>, which is a GNU extension:
</p>
<div class="example">
<pre class="example">grep -H 'eli' /etc/passwd
</pre></div>

</li><li> Why do people use strange regular expressions on <code>ps</code> output?

<div class="example">
<pre class="example">ps -ef | grep '[c]ron'
</pre></div>

<p class="cye-lm-tag">If the pattern had been written without the square brackets, it would
have matched not only the <code>ps</code> output line for <code>cron</code>,
but also the <code>ps</code> output line for <code>grep</code>.
Note that on some platforms,
<code>ps</code> limits the output to the width of the screen;
<code>grep</code> does not have any limit on the length of a line
except the available memory.
</p>
</li><li> Why does <code>grep</code> report “Binary file matches”?

<p class="cye-lm-tag">If <code>grep</code> listed all matching “lines” from a binary file, it
would probably generate output that is not useful, and it might even
muck up your display.
So GNU <code>grep</code> suppresses output from
files that appear to be binary files.
To force GNU <code>grep</code>
to output lines even from files that appear to be binary, use the
<samp>-a</samp> or ‘<samp>--binary-files=text</samp>’ option.
To eliminate the
“Binary file matches” messages, use the <samp>-I</samp> or
‘<samp>--binary-files=without-match</samp>’ option.
</p>
</li><li> Why doesn’t ‘<samp>grep -lv</samp>’ print non-matching file names?

<p class="cye-lm-tag">‘<samp>grep -lv</samp>’ lists the names of all files containing one or more
lines that do not match.
To list the names of all files that contain no
matching lines, use the <samp>-L</samp> or <samp>--files-without-match</samp>
option.
</p>
</li><li> I can do “OR” with ‘<samp>|</samp>’, but what about “AND”?

<div class="example">
<pre class="example">grep 'paul' /etc/motd | grep 'franc,ois'
</pre></div>

<p class="cye-lm-tag">finds all lines that contain both ‘<samp>paul</samp>’ and ‘<samp>franc,ois</samp>’.
</p>
</li><li> Why does the empty pattern match every input line?

<p class="cye-lm-tag">The <code>grep</code> command searches for lines that contain strings
that match a pattern.  Every line contains the empty string, so an
empty pattern causes <code>grep</code> to find a match on each line.  It
is not the only such pattern: ‘<samp>^</samp>’, ‘<samp>$</samp>’, ‘<samp>.*</samp>’, and many
other patterns cause <code>grep</code> to match every line.
</p>
<p class="cye-lm-tag">To match empty lines, use the pattern ‘<samp>^$</samp>’.  To match blank
lines, use the pattern ‘<samp>^[[:blank:]]*$</samp>’.  To match no lines at
all, use the command ‘<samp>grep -f /dev/null</samp>’.
</p>
</li><li> How can I search in both standard input and in files?

<p class="cye-lm-tag">Use the special file name ‘<samp>-</samp>’:
</p>
<div class="example">
<pre class="example">cat /etc/passwd | grep 'alain' - /etc/motd
</pre></div>

</li><li> <a name="index-palindromes"></a>
How to express palindromes in a regular expression?

<p class="cye-lm-tag">It can be done by using back-references;
for example,
a palindrome of 4 characters can be written with a BRE:
</p>
<div class="example">
<pre class="example">grep -w -e '\(.\)\(.\).\2\1' file
</pre></div>

<p class="cye-lm-tag">It matches the word “radar” or “civic.”
</p>
<p class="cye-lm-tag">Guglielmo Bondioni proposed a single RE
that finds all palindromes up to 19 characters long
using 9&nbsp;subexpressions<!-- /@w --> and 9&nbsp;<span class="nolinebreak cye-lm-tag">back-references</span><!-- /@w -->:
</p>
<div class="smallexample">
<pre class="smallexample">grep -E -e '^(.?)(.?)(.?)(.?)(.?)(.?)(.?)(.?)(.?).?\9\8\7\6\5\4\3\2\1$' file
</pre></div>

<p class="cye-lm-tag">Note this is done by using GNU ERE extensions;
it might not be portable to other implementations of <code>grep</code>.
</p>
</li><li> Why is this back-reference failing?

<div class="example">
<pre class="example">echo 'ba' | grep -E '(a)\1|b\1'
</pre></div>

<p class="cye-lm-tag">This gives no output, because the first alternate ‘<samp>(a)\1</samp>’ does not match,
as there is no ‘<samp>aa</samp>’ in the input, so the ‘<samp>\1</samp>’ in the second alternate
has nothing to refer back to, meaning it will never match anything.
(The second alternate in this example can only match
if the first alternate has matched—making the second one superfluous.)
</p>
</li><li> How can I match across lines?

<p class="cye-lm-tag">Standard grep cannot do this, as it is fundamentally line-based.
Therefore, merely using the <code>[:space:]</code> character class does not
match newlines in the way you might expect.
</p>
<p class="cye-lm-tag">With the GNU <code>grep</code> option <samp>-z</samp> (<samp>--null-data</samp>), each
input and output “line” is null-terminated; see <a href="#Other-Options">Other Options</a>.  Thus,
you can match newlines in the input, but typically if there is a match
the entire input is output, so this usage is often combined with
output-suppressing options like <samp>-q</samp>, e.g.:
</p>
<div class="example">
<pre class="example">printf 'foo\nbar\n' | grep -z -q 'foo[[:space:]]\+bar'
</pre></div>

<p class="cye-lm-tag">If this does not suffice, you can transform the input
before giving it to <code>grep</code>, or turn to <code>awk</code>,
<code>sed</code>, <code>perl</code>, or many other utilities that are
designed to operate across lines.
</p>
</li><li> What do <code>grep</code>, <code>fgrep</code>, and <code>egrep</code> stand for?

<p class="cye-lm-tag">The name <code>grep</code> comes from the way line editing was done on Unix.
For example,
<code>ed</code> uses the following syntax
to print a list of matching lines on the screen:
</p>
<div class="example">
<pre class="example">global/regular expression/print
g/re/p
</pre></div>

<p class="cye-lm-tag"><code>fgrep</code> stands for Fixed <code>grep</code>;
<code>egrep</code> stands for Extended <code>grep</code>.
</p>
</li></ol>


<br><hr>
</body>
</html>