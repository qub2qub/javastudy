<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<title>unix 10 cmd</title>
	<link rel="stylesheet" href="../grey.css">
    <style type="text/css">
    	div.comment-container {
    		border: 1px solid #920000;
    	}
    	code {
			background-color: #999;
		}
    </style>
    
</head>
<body>
<div class="blogPost cye-lm-tag">
<h2>1. ls</h2>

<p class="cye-lm-tag">The ls command - the list command - functions in the Linux terminal to show all of the major directories filed under a given file system. For example, the command:</p>
<p class="cye-lm-tag"><b>ls /applications</b></p>
<p class="cye-lm-tag">...will show the user all of the folders stored in the overall applications folder.</p>
<p class="cye-lm-tag">The ls command is used for viewing files, folders and directories.</p>
<h2>2. cd</h2>

<p class="cye-lm-tag"> The cd command - change directory - will allow the user to change between file directories. As the name command name suggest, you would use the cd command to circulate between two different directories. For example, if you wanted to change from the home directory to the Arora directory, you would input the following command:</p>
<p class="cye-lm-tag"><b>cd /arora/applications</b></p>
<p class="cye-lm-tag">As you might have noted, the path name listed lists in reverse order. Logically <b>cd /arora/applications</b> reads change to the arora directory which is stored in the applications directory. All Linux commands follow a logical path.</p>
<h2>3. mv</h2>
<p class="cye-lm-tag">The mv command - move - allows a user to move a file to another folder or directory. Just like dragging a file located on a PC desktop to a folder stored within the "Documents" folder, the mv command functions in the same manner. An example of the mv command is:</p>
<p class="cye-lm-tag"><b class="cye-lm-tag">mv /arora/applications/majorapps /arora/applications/minorapps</b></p>

<p class="cye-lm-tag">The first part of the command <b>mv /arora/applications/majorapps</b> lists the application to be moved. In this case, arora. The second part of the command <b>/arora/applications/minorapps</b> lists where arora will be moved to - from majorapps to minorapps.</p>
<h2>4. man</h2>
<p class="cye-lm-tag">The man command - the manual command - is used to show the manual of the inputted command. Just like a film on the nature of film, the man command is the meta command of the Linux CLI. Inputting the man command will show you all information about the command you are using. An example:</p>
<p class="cye-lm-tag"><b>man cd</b></p>
<p class="cye-lm-tag">The inputting command will show the manual or all relevant information for the change directory command.</p>
<h2>5. mkdir</h2>
<p class="cye-lm-tag">The mkdir - make directory - command allows the user to make a new directory. Just like making a new directory within a PC or Mac desktop environment, the mkdir command makes new directories in a Linux environment. An example of the mkdir command</p>
<p class="cye-lm-tag"><b>mkdir testdirectory</b></p>
<p class="cye-lm-tag">The example command made the directory "testdirectory".</p>
<h2>6. rmdir</h2>
<p class="cye-lm-tag">The rmdir - remove directory - command allows the user to remove an existing command using the Linux CLI. An example of the rmdir command:</p>
<p class="cye-lm-tag"><b>rmdir testdirectory</b></p>



<br>

<p class="cye-lm-tag">The example command removed the directory "testdirectory". </p>
<p class="cye-lm-tag"><b>It should be noted: both the mkdir and rmdir commands make and remove directories. They do not make files and they will also not remove a directory which has files in it. The mkdir will make an empty directory and the rmdir command will remove an empty directory.</b></p>
<p class="cye-lm-tag"><b><br>
</b></p>


<h2>7. touch</h2>
<p class="cye-lm-tag">The touch command - a.k.a. the make file command - allows users to make files using the Linux CLI. Just as the mkdir command makes directories, the touch command makes files. Just as you would make a .doc or a .txt using a PC desktop, the touch command makes empty files. An example of the touch command:</p>
<p class="cye-lm-tag"><b>touch testfile.txt</b></p>
<p class="cye-lm-tag">The example touch command effectively created the file testfile.txt. As noted by the extension, the file created is a .txt or text file. To equate, a .txt file in Linux is akin to a .txt notebook file within a Windows or Mac OS.</p>


<br>


<h2>8. rm</h2>
<p class="cye-lm-tag">The rm command - remove - like the rmdir command is meant to remove files from your Linux OS. Whereas the <b>rmdir</b> command will remove <u>only empty directories </u>, the <b>rm</b> command will <u>delete created files (or dirs with files within)</u>. An example of the rm command:</p>
<p class="cye-lm-tag"><b>rm testfile.txt</b></p>
<p class="cye-lm-tag">The aforementioned command removed testfile.txt. Interestingly, whereas the rmdir command will only delete an empty directory, the rm command will remove both files and directories with files in it. This said, the rm command carries more weight than the rmdir command and should be used with more specificity.</p>
<h2>9. locate</h2>
<p class="cye-lm-tag">The locate - a.k.a. find - command is meant to find a file within the Linux OS. If you don't know the name of a certain file or you aren't sure where the file is saved and stored, the locate command comes in handy. A locate command example:</p>
<p class="cye-lm-tag"><b>locate -i *red*house**city*</b></p>
<p class="cye-lm-tag">The stated command will locate an file with the a file name containing "Red", "House" and "City". A note on the input: the use of "-i" tells the system to search for a file unspecific of capitalization (Linux functions in lower case). The use of the asterik "*" signifies searching for a wildcard. A wildcard tells the system to pull any and all files containing the search criteria.</p>
<p class="cye-lm-tag">By specifying -i with wildcards, the locate CLI command will pull back all files containing your search criteria effectivley casting the widest search net the system will allow.</p>
<h2>10. clear</h2>
<p class="cye-lm-tag">The clear command does exactly what it says. When your Linux CLI gets all mucked up with various readouts and information, the clear command clears the screen and wipes the board clean. Using the clear command will take the user back to the start prompt of whatever directory you are currently operating in. To use the clear command simply type <b>clear</b>. 
</p>
<h2>Getting to Know Linux: Vital Information</h2>

<div>Having a basic understanding on Linux CLI commands will allow any user to navigate around the Linux shell. This said, there are some basic things about Linux you need to know to more fully operate in the shell. These basics are as follows:</div>

<div>- <b>All Linux operating systems function in lower case</b>. The basic idea of Linux is to utilize a simple easy to use operating system. The use of lower case comes out of this. While you can name files, folders and directories using upper case, the system functions in lower case. This means unless you specify -i (negate case lock), all files, folders and directories named with an upper case will not be shown. Thus, the command</div>

<div><b>locate thekillersadustlandfairytale.mp3</b></div>
<div><b><br>
</b></div>
<div>Will not locate the file TheKillersADustLandFairyTale.mp3</div>

<div>In Linux, upper and lower case matter.</div>

<div>- <b>Be very careful using the rm command</b>. The rm command, as noted above, carries more weight than the rmdir command. Using the rm command can wipe out entire directories full of files. Be careful using it. Moreover, if a buddy jokingly tells you to input the command:</div>

<div><b>rm -rf/</b></div>
<div><b><br>
</b></div>
<div>Do not do it. The rm -rf/ command means remove (rm) - recursive (r) force (f) home (/). Spelled out logically, the rm -rf/ command will delete every folder, file and directory within your Linux OS. It is the equivalent of wiping your entire hard drive clean. Use the rm-rf/ command at your own peril.&nbsp;</div>

<div>- <b>/ means root</b>. For the vast majority of PC's the home prompt in the Command Prompt (CMD) is some variation on:</div>

</div>

<div>The PC user in command prompt will start from the C:\ hard drive. In Linux your CLI starting point - your root directory - is /. / represents your starting point. / is where all other files, folders and directories are stored within.</div>

<div>- <b>Passwords are kept in the dark</b>. The first time I logged into a Linux server, I instantly became confused when prompted for my password. This is because when you type in your password into the Linux CLI, the password is kept dark. While typing, you will see nothing. The Linux CLI operates with the assumption that the user typing in the password knows what he/she is typing and thus, for security reasons, has no need to view it while it is input.&nbsp;</div>

<div>&nbsp; Don't freak out when you do not see your password or little asterisks to hide your input. The Linux system is recording every key tap.&nbsp;</div>

<div>- <b>Master Linux foundations before advancing</b>. Just like learning new branches of Mathematics, to build higher, your foundation must be strong. Linux operates in the same fashion. If you do not master Linux basics, you will quickly become confused when trying to complete complex tasks and will, like many first time users do, become frustrated and quit. To write a new script, to install a script or to install a basic word editor, you first must know how to move between directories, how to copy (cp command) files and how to make/remove files and directories.&nbsp;</div>
<div>&nbsp;&nbsp;</div>
<div>Before you move to more advanced Linux tasks, master the basics.</div>

<div>- <b>Remember, Linux Web Operations are free</b>. Maybe the best thing about Linux is that it an open source platform meaning the operating systems and all <a href="http://www.informit.com/store/linux-web-operations-livelessons-video-training-downloadable-9780133927627">Linux web operations</a> you may perform are free. Don't get scammed into buying an operating system. It's free.&nbsp;</div>

<div>- <b>Pick a more User Friendly Linux OS</b>. The last bit of advice I can dole out is if you are a first time Linux user, pick an operating system which is considered "beginner friendly". Most users consider <a href="http://www.informit.com/store/official-ubuntu-book-9780133905397">Ubuntu</a>, Fedora and Mint to all fit the bill. I'd recommend choosing one and working from there.</div>



</div>
<br><hr>

<section class="post-content">
    
<p>In this era of cloud computing, containers, serverless and being a cloud-native citizen there are still servers who need attention. If you are a full-stack developer, my humble opinion is part of your toolkit is know you way around Linux. This blog post is a collection of some very handy, ten to be precise, Linux command to make your DevOps life easy. </p>

<p>Although most servers are Linux-centric, you can apply those commands also to your developer box if you run MacOS. </p>

<p>Win-Win. </p>

<p><strong>NOTE:</strong> At Cloud 66 we provision your servers with <em>Ubuntu 16.04</em></p>

<h3 id="1accesstheserver">1. Access the server</h3>

<p>Before you can even run a command on your server. You need to access the server. Best practice is to access your server using SSH with private key authentication and port (22) should only be accessible from your IP address. </p>

<p>If your are running MacOS, open your terminal and run the command:</p>

<p><code>$ ssh [username]@[ip-address-server] -i [path_to_private_key.pem]</code></p>

<p>Or if you are using <a href="http://help.cloud66.com/toolbelt/toolbelt-introduction">cx</a> our toolbelt:</p>

<p><code>$ cx ssh -s [stack_name] [server_type]</code></p>

<p><strong>NOTE:</strong> Don't forget to open up your firewall is your are not using <code>cx ssh</code></p>

<h3 id="2superpowers">2. Superpowers</h3>

<p>By default, you only got access your userspace. If you want to install something, change some system-wide settings or access restricted resources you need get those privileges. </p>

<p>Having elevated privileges all the time is dangerous! You can easily f$%k-up your system. That is why you should use <code>sudo</code> every time you run a potentially dangerous command. </p>

<p><em>For example;</em> Killing a running process can be dangerous. Use this following line with cautious. </p>

<p><code>$ sudo kill -9 [process_id]</code></p>

<p>When your run the <code>sudo</code> command Linux will run your command in another process and your environment variables are not preserved. To make sure you preserve the environment variables, use <code>sudo -E</code></p>

<p>With great <code>sudo</code> power comes great responsibility.</p>

<h3 id="3nolifewithoutapackagemanager">3. No life without a package manager</h3>

<p>Some of the commands in this post are not installed by default and you should use a package manager to get those installed. The Ubuntu distro is equipped with the package manager called <strong>APT</strong>.</p>

<p>Before you install new packages make sure the package manager is up-to-date, run the update command first.</p>

<p><code>$ sudo apt-get update</code></p>

<p>To install a package, like <em>htop</em>, run the following command:</p>

<p><code>$ sudo apt-get install htop</code></p>

<p>Upgrading your installed packages.</p>

<p><code>$ sudo apt-get install upgrade</code></p>

<p>Read the <a href="https://help.ubuntu.com/community/AptGet/Howto">manual</a> of apt-get to known all the very nice features of <strong>APT</strong> package manager.</p>

<h4 id="yourserverneedsattention">Your server needs attention</h4>

<p>A server gives you the resources your need to run your application and those can be drained during the lifecycle of your application. Of course, you have monitoring systems in place to alert if the server run low on disk space, has high CPU utilization or lag because of network congestion. As a developer, it's always good to have some tools you can use for debugging and pin-point the bottleneck.</p>

<h3 id="4wheredidmydiskspacego">4. Where did my diskspace go?</h3>

<p>The <code>df</code> (<em>disk free</em>) command reports the amount of available disk space being used by file systems. The <code>du</code> (<em>disk usage</em>) command reports the sizes of directory trees inclusive of all of their contents and the sizes of individual files. </p>

<p>The aim is to make sure you are not overshooting the 80% threshold. If you exceed the threshold it's time to scale or clean-up the mess, because running out of resources you have the change your application show some fickle behavior.</p>

<p>To check in a human readable format:</p>

<p><code>$ sudo df -h</code></p>

<p>But in most cases, you want to check which part of your system is consuming lots of disk space. Use the following command:</p>

<p><code>$ sudo du -h -d 1 /var/</code></p>

<p>You need to use <code>du</code> recursively to pin-point the directory which causing the most disk usage. After running <code>du -h -d 1 /var/</code> maybe a subdirectory like <code>/var/deploy</code> using the most space.  For inspection, run:</p>

<p><code>$ sudo du -h -d 1 /var/deploy</code></p>

<p>Or change the <strong>depth</strong> of recursing to 2, run:</p>

<p><code>$ sudo du -h -d 2 /var/</code></p>

<h3 id="5whoeatallmyresources">5. Who eat all my resources?</h3>

<p>Often you want to know when your server is creating smoke due to heavy load which process consumes what? Hopefully is all due to the increase of happy customers hitting your service and you only need to scale. </p>

<p>A really nice tool which you can help to see how your process are consuming memory, cpu and which cores are under pressure, use <code>htop</code>.</p>

<p>Just run:</p>

<p><code>$ sudo htop</code></p>

<p>Hit the <code>F5</code> key to show all process in a tree view, to debug the subprocesses.</p>

<h3 id="6pidtotherescue">6. PID to the rescue</h3>

<p>Every process in Linux has a unique ID and can be seen using the command <code>ps</code>. </p>

<p><code>$ sudo ps aux</code></p>

<ul>
<li><strong>a</strong> = show processes for all users</li>
<li><strong>u</strong> = display the process's user/owner</li>
<li><strong>x</strong> = also show processes not attached to a terminal</li>
</ul>

<h3 id="7showmethecontents">7. Show me the contents</h3>

<p>Part of debugging your services is to check for anomalies in your log files. Sometimes you want to hit the endpoint of our service and check what is going on in your log file without scanning through the whole file. Use <code>tail</code> for this, it will output the last part of files. </p>

<p><code>$ tail -f /var/log/somelog.log</code></p>

<p><code>-f</code> option will follow the file and when the file grows if will append to the console output. </p>

<p>To output a file or concatenate some files for outputting to the console, use <code>cat</code></p>

<p><code>$ cat /var/log/somelog.log</code></p>

<h3 id="8filtercrapwithgrep">8. Filter crap with grep</h3>

<p>When showing contents (<code>tail</code>), scanning for anomalies (<code>cat</code>) or find the right process (<code>ps aux</code>) you need some kind of filter. </p>

<p>In Linux, you can combine two things to make life easier. A piece of pipe <code>|</code> and some <code>grep</code>. A <code>|</code> in Linux will send the output of the left-hand command to the right-hand command. You can create pipelines of commands to achieve your goal. </p>

<p>To show only the request with a HTTP 404 status codes:</p>

<p><code>$ sudo tail -f /var/log/somelog.log | grep 404</code></p>

<p>Getting the PID (process id) of a Ruby process:</p>

<p><code>$ sudo ps aux | grep ruby</code></p>

<p><code>grep</code> is a very powerful tool and can filter/match lots of things to help you. Read the <a href="https://www.gnu.org/software/grep/manual/grep.html">manual</a> of <code>grep</code> to level-up your Linux skills.</p>

<h3 id="9containersareusingresourcestoo">9. Containers are using resources too.</h3>

<p>Containers are great to run isolated processes and should also be treated like processes and not as a VM. Containers are using resources too, it's good practice to check how much CPU and memory they are using on a regular basis. This command helps you to show the status of your running containers.</p>

<p><code>$ sudo docker stats $(docker ps | awk '{if(NR&gt;1) print $NF}')</code></p>

<p>Yes! This command shows the CPU load, memory usage and network utilization.</p>

<p>You can see some serious pipelining with <code>awk</code>. <code>awk</code> is a programming language designed for text processing and typically used for data extraction and reporting tool. It is a standard feature of most Unix-like operating systems.</p>

<h3 id="10starwarsandsomefortune">10. Star Wars and some fortune</h3>

<p>And after a very productive day of work your probably want to go home and watch a movie. If you don't want to leave your terminal unattended, why don't you want Star Wars from your terminal:</p>

<p><code>$ telnet towel.blinkenlights.nl</code></p>

<p>or you want some random fortune?</p>

<p><code>$ sudo apt-get install fortune</code></p>

<p><code>$ fortune</code></p>

<p>Happy coding and love Linux commands.</p>
        </section>
<br><hr>

<div class="entry-content cye-lm-tag" itemprop="text"><p class="cye-lm-tag"><img src="http://immense.wpengine.com/wp-content/uploads/2010/11/blog-unix-commands-banner.png" alt="10 Unix Commands Every Web Developer Should Know" title="10 Unix Commands Every Web Developer Should Know" width="611" height="174" class="alignnone size-full wp-image-2739" srcset="https://immense.net/wp-content/uploads/2010/11/blog-unix-commands-banner.png 611w, https://immense.net/wp-content/uploads/2010/11/blog-unix-commands-banner-300x85.png 300w, https://immense.net/wp-content/uploads/2010/11/blog-unix-commands-banner-450x128.png 450w" sizes="(max-width: 611px) 100vw, 611px"></p>
<p class="cye-lm-tag">Unix servers run the internet, and, as a web developer, you should know how to use this powerful operating system. In the beginning, Unix can be a little intimidating, especially for someone coming from a strictly graphics-oriented OS. There’s no magical ‘undo’ button that can fix a mistake you made and there are not very many “Are you sure you want to remove ‘test.txt’?” messages unless you specify the tag to do so (‘rm -i test.txt’ would ask for confirmation before deleting). I’ve compiled a list of useful commands and examples of situations to use them in. I’m going to assume you know the very basics (ls, cp, mv, mkdir, rm, cd, etc.) so I’ll skip over these.</p>
<h2>Searching in Unix</h2>
<p class="cye-lm-tag">Our first two commands deal with searching in Unix involving both file names and the contents in a file. The following commands take string literals or <a href="http://www.regular-expressions.info/" title="Regular Expressions">regular expressions</a> as the search string, another tool every web developer must know.</p>
<h3>1. find</h3>
<p class="cye-lm-tag">Locating a file by name inside the current directory and all subdirectories</p>
<pre class="code"><code class="cpp">
find . -type f -name 'nameofthefile.txt'
</code></pre>
<p class="cye-lm-tag">You can also use the * metacharacter if you want to find every file ending in .txt</p>
<pre class="code">
find . -type f -name '*.txt'
</pre>
<p class="cye-lm-tag">Find can also search for directory names using the ‘d’ flag</p>
<pre class="code"><code class="cpp">
find /usr -type d -name 'bin'
</code></pre>
<h3>2. grep</h3>
<p class="cye-lm-tag">Grep is useful when you need to search for content within a file. The following command will search through every file in the current directory and all files in subdirectories and return the line in the file that matches the regular expression. I escape the period to tell grep I want to find a literal period and to not use the dot regular expression metacharacter.</p>
<pre class="code"><code class="cpp">
grep -r 'immense\.net' .
</code></pre>
<p class="cye-lm-tag">Grep and find can work together to search the contents of the files that are found using the find command. The following two commands are different ways to do the same thing: search through all php files looking for the string ‘propel’.</p>
<pre class="code"><code class="cpp">
find . -type f -name '*.php' -exec grep 'propel' '{}' \;
find . -type f -name '*.php' | xargs grep 'propel'
</code></pre>
<p class="cye-lm-tag">If you don’t understand how <a href="http://en.wikipedia.org/wiki/Pipeline_(Unix)" title="Unix pipes">pipes</a> work you should learn how to use them.</p>
<h3>3. sed</h3>
<p class="cye-lm-tag">Sed is a very powerful “stream-oriented” editor. In conjunction with regular expressions and the find command, you can perform some complex search and replace functions across a set of files. Consider a file named “testing.txt” which contains the text “This is only a test”. The following command would alter the word “test” to “disaster”.</p>
<pre class="code"><code class="cpp">
sed -i '' s/test/disaster/g testing.txt
</code></pre>
<p class="cye-lm-tag">The -i flag means “edit in place”. You may optionally pass a parameter to this flag which will make a backup copy of the file(s) you are modifying and append the extension you pass it. Consider our original file and original content; the following command will replace the word “test” for “disaster” and will make a copy of the original file called “testing.txt.orig” in its untouched state.</p>
<pre class="code"><code class="cpp">
sed -i '.orig' s/test/disaster/g testing.txt
</code></pre>
<p class="cye-lm-tag"></p>
<p class="cye-lm-tag">Sed is an extremely powerful editor, and it can modify many files simultaneously when combined with the ‘find’ command from above. The following command will search through the current directory and all subdirectories and replace the string “http://” with the string “https://” in each html file.</p>
<pre class="code"><code class="cpp">
find . -type f -name '*.html' -exec sed -i 's/http\:\/\//https\:\/\//g' {} \;
</code></pre>
<p class="cye-lm-tag">Notice that certain characters must be escaped in the search parameters of sed. The curly braces “{}” pass each filename returned from ‘find’ as an argument into ‘sed’ and the “\;” is required by exec as a termination character. This is only one small sample of what sed can do and I highly recommend reading the <a href="http://unixhelp.ed.ac.uk/CGI/man-cgi?sed" title="Sed man page">sed man page</a> to learn more options.</p>
<h2>File Manipulation and Examination</h2>
<p class="cye-lm-tag">Every entity in the Unix operating system is a file. It may be called a directory, socket, or stream, but they all have inode numbers and they are all files. As such, file manipulation and examination is an extremely important topic. Below are just a few of the many very important file handling programs.</p>
<h3>4. tail</h3>
<p class="cye-lm-tag">Tail is very simple. It shows you the tail end of a file; just the last few lines. This is invaluable when it comes to error logs. You can use the ‘f’ flag to “follow” the end of the file so every time a program writes to that log you see it instantly. Use “CTRL+C” to end execution of tail.</p>
<pre class="code"><code class="cpp">
tail -f /var/log/php.log
</code></pre>
<h3>5. more</h3>
<p class="cye-lm-tag">‘More’ is a command that shows you the contents of a file. You can also use ‘cat’ to view a file but ‘more’ will paginate it and give you some options. To begin reading a file:</p>
<pre class="code"><code class="cpp">
more filename.txt
</code></pre>
<p class="cye-lm-tag">This will launch the ‘more’ program and you will see “–MORE–(#%)” at the bottom of your screen if your file has more lines than can fit on your terminal screen. Hitting the ‘Return’ key will move the screen down one line, ‘Spacebar’ will move a page forward, ‘b’ will move a page backward, ‘=’ will display your current line number, ‘v’ will launch the vi text editor (covered next) at the current line, ‘q’ will quit and ‘/’ will allow you to enter a regular expression to search for. Remember that a regex can be as simple as a plain string.</p>
<h3>6. vi</h3>
<p class="cye-lm-tag">Vi is a great text editor. People will argue that emacs is a better option or that pico is easier, but I find that vi is a great solution for doing quick text modifications. Emacs is the big mature Unix editor and pico is a little too simple, so I use vi most of the time because it offers a lot of solid features without a huge learning curve. After reading this article you should <a href="http://web.eng.hawaii.edu/Tutor/vi.html" title="Mastering the vi editor">read more about vi</a>.</p>
<p class="cye-lm-tag">Start vi with a new or existing filename:</p>
<pre class="code"><code class="cpp">
vi filename.php
</code></pre>
<p class="cye-lm-tag">You’re now in the editor. Within the editor are two modes: <i>command</i> and <i>insert</i>. To enter command mode at any point hit the ‘ESC’ key. Most commands are prefixed with a colon ‘:’ so to quit out of the program enter command mode and type ‘:q’ (without quotes) followed by the ‘Return’ key. Fire up vi again and, this time, go into insert mode by pressing the ‘a’ key. You can start typing whatever you need just like in any other text editor. To save and quit hit the ‘ESC’ key to enter command mode and type ‘:wq’. The ‘w’ means write the file and ‘q’ means quit vi. If you wanted to quit and not save your changes you could type ‘:q!’ in command mode. There are hundreds and hundreds of good keyboard shortcuts to use while in command and insert mode and you can read about them in the article I linked to above.</p>
<h2>Backups and Transfers</h2>
<p class="cye-lm-tag">As a web developer, backing up files and transferring data is critical. Sometimes you just need to move a ton of files from one server to your local machine but sometimes you need to transfer them to another server. This section covers archiving files with tar, backing up a MySQL database with mysqldump and transferring files to another machine with scp.</p>
<h3>7. tar</h3>
<p class="cye-lm-tag">Tar is a program that archives files into a single package that you can move around easily. After using the tar command ,you are left with a single tar file which is referred to as a ‘tarball’. A tarball is compressed ,but you can compress it further by adding the ‘z’ flag which gzips it into a smaller file. This is how I typically use tar:</p>
<pre class="code"><code class="cpp">
tar cvzf mytarball.tgz .
</code></pre>
<p class="cye-lm-tag">
<ul>
<li>The ‘c’ flag means “create a tarball”, </li>
<li>the ‘v’ flag stands for “verbose mode” or “show every file that is compressed as it happens”, </li>
<li>the ‘z’ flag means “gzip the tarball further (hence the .tgz extension instead of .tar)” </li>
<li>and the ‘f’ flag means “use the tarfile argument as the name of the tarfile”. </li>
<li>The argument ‘mytarball.tgz’ is the name of the file. </li>
</ul>
You can name it whatever you like; the extension does not matter – I just like using .tgz. The last argument ‘.’ means include all files in the current directory and all subdirectories. After running this command you now have a compressed ‘mytarball.tgz’ file. You can move this file around wherever you need it. If I needed to download an entire site via FTP I would run this command and then just download the single tarball rather than downloading many files individually.</p>
<p class="cye-lm-tag">The opposite of archiving is unarchiving (o rly?). To unarchive a gzipped tarball use the following:</p>
<pre class="code"><code class="cpp">
tar xvzf mytarball.tgz
</code></pre>
<p class="cye-lm-tag">It’s that simple. The flags are the same except you use ‘x’ instead of ‘c’ which means ‘extract’. This will uncompress your tarball in the current directory you are in, maintaining the original directory hierarchy.</p>
<h3>8. scp</h3>
<p class="cye-lm-tag">Scp is useful in conjunction with tar. It allows you to securely copy a file from one server to another. To do this you must know the address of your destination server and you must have a username and password for a user with write privileges in the location you want to put the file. For this example, say I want to move that tarball I created earlier to a server ‘someserver.com’ and I have write privileges with the user ‘myuser’ and password ‘mypassword’:</p>
<pre class="code"><code class="cpp">
scp mytarball.tgz myuser@someserver.com:/home/myuser
</code></pre>
<p class="cye-lm-tag">You would then be prompted for the password of ‘myuser’. This would copy the file to the directory /home/myuser on the host server. If you were on the host server already and wanted to copy a file from a remote server you would do:</p>
<pre class="code"><code class="cpp">
scp anotheruser@someotherserver.com:/home/anotheruser/filetocopy.txt .
</code></pre>
<p class="cye-lm-tag">You would then be prompted for that users password. This would copy the file ‘filetocopy.txt’ from a remote server to your current director. This is essentially ‘getting’ a file whereas the first example was ‘putting’ a file.</p>
<h3>9. mysqldump</h3>
<p class="cye-lm-tag">This command is biased towards those developers who use MySQL. I’m positive there are identical commands for other RDBMS. Say you needed to move an entire site with it’s database from one server to another. You’ve tarred up all the files, and you’ve moved them to the new server via scp, but how do you get the database? It’s simple:</p>
<pre class="code"><code class="cpp">
mysqldump -uroot -p databasename &gt; dumpfile.sql
</code></pre>
<p class="cye-lm-tag">You will then be prompted for a password and, depending how large the database is, it may take a few seconds to return you to the command prompt. Substitute the ‘root’ parameter for whatever username has access to the database you are trying to dump. The ‘&gt;’ redirects standard output to standard input and places the dumped data in the file ‘dumpfile.sql’. You can then scp that file to your new server and use the ‘mysql’ command to import the dumpfile.sql contents into whatever new database you want:</p>
<pre class="code"><code class="cpp">
mysql -uroot -p newdatabase &lt; dumpfile.sql
</code></pre>
<p class="cye-lm-tag">The database ‘newdatabase’ must already exist. Notice the reverse ‘&lt; ' redirection operator which will send the contents of the dumpfile.sql file into the database specified.</p>
<h2>Process Control</h2>
<h3>10. top</h3>
<p class="cye-lm-tag"></p>
<p class="cye-lm-tag">Think of top like ‘Task Manager’ in Windows or ‘Activity Monitor’ in Mac OS X. Simply run:</p>
<pre class="code"><code class="cpp">
top
</code></pre>
<p class="cye-lm-tag">And you are shown your running processes. It is a realtime view unlike ‘ps’ which also shows your running processes. To quit top hit the ‘q’ key. The first column displayed in top is the PID. Every process has a unique ID and you use this ID if you need to kill a process. Do not just kill processes for fun you should only do this if you know for sure there won’t be any adverse effects:</p>
<pre class="code"><code class="cpp">
kill -9 1234
</code></pre>
<p class="cye-lm-tag">Where the -9 flag is the SIGKILL signal that no process can ignore. It will force quit the process with PID ‘1234’. There are many other signals you can use on a process that you can see <a href="http://www.cs.pitt.edu/~alanjawi/cs449/code/shell/UnixSignals.htm" title="Unix Signals">here</a>.</p>
</div>
<h3>Unix Signals</h3>
<table cellspacing="0" cellpadding="0" width="100%" border="1" id="table2">
					<tbody><tr>
						<td width="122">SIGHUP</td>
						<td width="30"><font>1</font></td>
						<td width="68"><font >Exit</font></td>
						<td width="358"><font >Hangup</font></td>
					</tr>
					<tr>
						<td width="122">SIGINT</td>
						<td width="30"><font>2</font></td>
						<td width="68"><font >Exit</font></td>
						<td width="358"><font >Interrupt</font></td>
					</tr>
					<tr>
						<td width="122">SIGQUIT</td>
						<td width="30"><font>3</font></td>
						<td width="68"><font >Core</font></td>
						<td width="358"><font >Quit</font></td>
					</tr>
					<tr>
						<td width="122">SIGILL</td>
						<td width="30"><font>4</font></td>
						<td width="68"><font >Core</font></td>
						<td width="358"><font >Illegal Instruction</font></td>
					</tr>
					<tr>
						<td width="122">SIGTRAP</td>
						<td width="30"><font>5</font></td>
						<td width="68"><font >Core</font></td>
						<td width="358"><font >Trace/Breakpoint Trap</font></td>
					</tr>
					<tr>
						<td width="122">SIGABRT</td>
						<td width="30"><font>6</font></td>
						<td width="68"><font >Core</font></td>
						<td width="358"><font >Abort</font></td>
					</tr>
					<tr>
						<td width="122">SIGEMT</td>
						<td width="30"><font>7</font></td>
						<td width="68"><font >Core</font></td>
						<td width="358"><font >Emulation Trap</font></td>
					</tr>
					<tr>
						<td width="122">SIGFPE</td>
						<td width="30"><font>8</font></td>
						<td width="68"><font >Core</font></td>
						<td width="358"><font >Arithmetic Exception</font></td>
					</tr>
					<tr>
						<td width="122">SIGKILL</td>
						<td width="30"><font>9</font></td>
						<td width="68"><font >Exit</font></td>
						<td width="358"><font >Killed</font></td>
					</tr>
					<tr>
						<td width="122">SIGBUS</td>
						<td width="30"><font>10</font></td>
						<td width="68"><font >Core</font></td>
						<td width="358"><font >Bus Error</font></td>
					</tr>
					<tr>
						<td width="122">SIGSEGV</td>
						<td width="30"><font>11</font></td>
						<td width="68"><font >Core</font></td>
						<td width="358"><font >Segmentation Fault</font></td>
					</tr>
					<tr>
						<td width="122">SIGSYS</td>
						<td width="30"><font>12</font></td>
						<td width="68"><font >Core</font></td>
						<td width="358"><font >Bad System Call</font></td>
					</tr>
					<tr>
						<td width="122">SIGPIPE</td>
						<td width="30"><font>13</font></td>
						<td width="68"><font >Exit</font></td>
						<td width="358"><font >Broken Pipe</font></td>
					</tr>
					<tr>
						<td width="122">SIGALRM</td>
						<td width="30"><font>14</font></td>
						<td width="68"><font >Exit</font></td>
						<td width="358"><font >Alarm Clock</font></td>
					</tr>
					<tr>
						<td width="122">SIGTERM</td>
						<td width="30"><font>15</font></td>
						<td width="68"><font >Exit</font></td>
						<td width="358"><font >Terminated</font></td>
					</tr>
					<tr>
						<td width="122">SIGUSR1</td>
						<td width="30"><font>16</font></td>
						<td width="68"><font >Exit</font></td>
						<td width="358"><font >User Signal 1</font></td>
					</tr>
					<tr>
						<td width="122">SIGUSR2</td>
						<td width="30"><font>17</font></td>
						<td width="68"><font >Exit</font></td>
						<td width="358"><font >User Signal 2</font></td>
					</tr>
					<tr>
						<td width="122">SIGCHLD</td>
						<td width="30"><font>18</font></td>
						<td width="68"><font >Ignore</font></td>
						<td width="358"><font >Child Status</font></td>
					</tr>
					<tr>
						<td width="122">SIGPWR</td>
						<td width="30"><font>19</font></td>
						<td width="68"><font >Ignore</font></td>
						<td width="358"><font >Power Fail/Restart</font></td>
					</tr>
					<tr>
						<td width="122">SIGWINCH</td>
						<td width="30"><font>20</font></td>
						<td width="68"><font >Ignore</font></td>
						<td width="358"><font >Window Size Change</font></td>
					</tr>
					<tr>
						<td width="122">SIGURG</td>
						<td width="30"><font>21</font></td>
						<td width="68"><font >Ignore</font></td>
						<td width="358"><font >Urgent Socket Condition</font></td>
					</tr>
					<tr>
						<td width="122">SIGPOLL</td>
						<td width="30"><font>22</font></td>
						<td width="68"><font >Ignore</font></td>
						<td width="358"><font >Socket I/O Possible</font></td>
					</tr>
					<tr>
						<td width="122">SIGSTOP</td>
						<td width="30"><font>23</font></td>
						<td width="68"><font >Stop</font></td>
						<td width="358"><font >Stopped (signal)</font></td>
					</tr>
					<tr>
						<td width="122">SIGTSTP</td>
						<td width="30"><font>24</font></td>
						<td width="68"><font >Stop</font></td>
						<td width="358"><font >Stopped (user)</font></td>
					</tr>
					<tr>
						<td width="122">SIGCONT</td>
						<td width="30"><font>25</font></td>
						<td width="68"><font >Ignore</font></td>
						<td width="358"><font >Continued</font></td>
					</tr>
					<tr>
						<td width="122">SIGTTIN</td>
						<td width="30"><font>26</font></td>
						<td width="68"><font >Stop</font></td>
						<td width="358"><font >Stopped (tty input)</font></td>
					</tr>
					<tr>
						<td width="122">SIGTTOU</td>
						<td width="30"><font>27</font></td>
						<td width="68"><font >Stop</font></td>
						<td width="358"><font >Stopped (tty output)</font></td>
					</tr>
					<tr>
						<td width="122">SIGVTALRM</td>
						<td width="30"><font>28</font></td>
						<td width="68"><font >Exit</font></td>
						<td width="358"><font >Virtual Timer Expired</font></td>
					</tr>
					<tr>
						<td width="122">SIGPROF</td>
						<td width="30"><font>29</font></td>
						<td width="68"><font >Exit</font></td>
						<td width="358"><font >Profiling Timer Expired</font></td>
					</tr>
					<tr>
						<td width="122">SIGXCPU</td>
						<td width="30"><font>30</font></td>
						<td width="68"><font >Core</font></td>
						<td width="358"><font >CPU time limit exceeded</font></td>
					</tr>
					<tr>
						<td width="122">SIGXFSZ</td>
						<td width="30"><font>31</font></td>
						<td width="68"><font >Core</font></td>
						<td width="358"><font >File size limit exceeded</font></td>
					</tr>
					<tr>
						<td width="122">SIGWAITING</td>
						<td width="30"><font>32</font></td>
						<td width="68"><font >Ignore</font></td>
						<td width="358"><font >All LWPs blocked</font></td>
					</tr>
					<tr>
						<td width="122">SIGLWP</td>
						<td width="30"><font>33</font></td>
						<td width="68"><font >Ignore</font></td>
						<td width="358"><font >Virtual Interprocessor 
						Interrupt for Threads Library</font></td>
					</tr>
					<tr>
						<td width="122">SIGAIO</td>
						<td width="30"><font>34</font></td>
						<td width="68"><font >Ignore</font></td>
						<td width="358"><font >Asynchronous I/O</font></td>
					</tr>
				</tbody></table>
<br><hr>

<div class="entry-content">
 
<p class="cye-lm-tag">At some point in you developer career , you will have to work with Linux Systems and you will be looking for information regarding Linux commands. In this post I will explain the use of 10 Linux commands you should know as a developer.</p>
<h2>10 Linux Commands For Developers</h2>
<p class="cye-lm-tag">Following are the&nbsp; list of ten commands you will learn about in this post</p>
<pre> man
 touch, cat and less
 sort and grep
 cut
 sed
 tar
 find
 diff
 uniq
 chmod
</pre>
<p class="cye-lm-tag">Lets get started.</p>
<h3>1. man</h3>
<p class="cye-lm-tag">The first command you should learn in Linux is “man”. Using this command you can get the usage and description of all&nbsp; Linux commands. For example, if you want to know about “ls” command and its options, just execute “man ls” command in the terminal to list its usage and description.</p>
<pre>Syntax: man &lt;command name&gt;
man ls</pre>
<pre>root@devopscube:~# man ls
LS(1)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; User Commands&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; LS(1)
NAME
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ls - list directory contents
SYNOPSIS
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ls [OPTION]... [FILE]...
DESCRIPTION
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; List&nbsp; information&nbsp; about&nbsp; the FILEs (the current directory by default).
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Sort entries alphabetically if none of -cftuvSUX nor --sort&nbsp; is&nbsp; speciâ
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fied.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Mandatory&nbsp; arguments&nbsp; to&nbsp; long&nbsp; options are mandatory for short options
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; too.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -a, --all
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; do not ignore entries starting with .</pre>

<h2>2. touch, cat and less</h2>
<p class="cye-lm-tag">Touch command is used to create any type of file in Linux systems with “0” size. As a developer , when working with Linux you might want to create files in the server. You can make use of touch command to do that.</p>
<pre>Syntax: touch &lt;filename&gt;
touch demo.txt

root@devopscube:~# touch demo.txt
root@devopscube:~# ls
demo.txt</pre>
<p class="cye-lm-tag">Cat command is used to view the contents of a file. You cannot edit the contents of the file using cat. It just gives a view of the file. cat doesn’t support scrolling using keyboard.</p>
<p class="cye-lm-tag"><em>Note: To work the commands given below, copy any content to the demo.txt file using your favorite vi or nano editor. For our examples, i have copied the boot.log file contents on to demo.txt file using ” cat /var/log/boot.log &gt;&gt; demo.txt” command. You can also do the same.</em></p>
<pre>Syntax: cat &lt;filename&gt;
cat demo.txt</pre>
<p class="cye-lm-tag">Less command also gives the view of a file. less is very fast and you can use the arrow keys to scroll up and down to know the start and end of the file. There is also “more” command, which is used to view the file.</p>
<pre>Syntax: less &lt;filename&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; more &lt;filename&gt;</pre>
<pre>less demo.txt
more demo.txt
</pre>
<h2>3. sort and grep</h2>
<p class="cye-lm-tag">Sort is used to sort the contents of a file. Create a file named test.txt and copy the following contents on to the file to test the sort command.</p>
<pre>1 mike level intermediate jan
10 lucy level beginer mar
45 Dave level expert dec
4 dennis start beginner jul
7 Megan employee trainee feb
58 Mathew Head CEO nov</pre>
<p class="cye-lm-tag">In the above example, second column has the names. So if you want to sort the names alphabetically use “-k” flag with the column location. It would be “-k2”.</p>
<pre>Syntax: sort


<options> <filename>
sort -k2 test.txt</filename></options></pre>
<pre>root@devopscube:~# sort -k2 test.txt
45 Dave level expert dec
4 dennis start beginner jul
10 lucy level beginer mar
58 Mathew Head CEO nov
7 Megan employee trainee feb
1 mike level intermediate jan</pre>
<p class="cye-lm-tag">The first column has numbers. If you want to sort numbers, use&nbsp; “-h” flag. If the numbers are in different column, you can use the “-k” flag along with “-h” flag.</p>
<pre>root@devopscube:~# sort -h test.txt  
1 mike level intermediate jan
4 dennis start beginner jul
7 Megan employee trainee feb
10 lucy level beginer mar
45 Dave level expert dec
58 Mathew Head CEO nov</pre>
<p class="cye-lm-tag">The last column has months. You can sort a file based on month using “-M” flag.</p>
<pre>root@devopscube:~# sort -k5 -M test.txt
1 mike level intermediate jan
7 Megan employee trainee feb
10 lucy level beginer mar
4 dennis start beginner jul
58 Mathew Head CEO nov
45 Dave level expert dec</pre>
<p class="cye-lm-tag"><em>Note: If you want to eliminate the duplicate lines , you can use “-u” flag along with the sort command.</em></p>
<p class="cye-lm-tag">To sort the file in descending order, use “-r” flag.</p>
<pre>root@devopscube:~# sort -h -r test.txt
58 Mathew Head CEO nov
45 Dave level expert dec
10 lucy level beginer mar
7 Megan employee trainee feb
4 dennis start beginner jul
1 mike level intermediate jan</pre>
<h3>Grep:</h3>
<p class="cye-lm-tag">Grep is a powerful command and will be used by sysadmins quite often. Grep command is used for searching specific string patterns in a file as well as the standard output (STDIN). We will look into few file based operations . Other uses of grep is out of scope of this post.</p>
<pre>Syntax: grep "&lt;search string&gt;" &lt;filename&gt; 
        grep "Mathew" test.txt</pre>
<pre>root@devopscube:~# grep "dennis" test.txt
4 dennis start beginner jul</pre>
<p class="cye-lm-tag">The above command gives the output including the sub-string. If you want to search for individual words, you need to add “-i” flag to the grep command. Also you can search for a string or a pattern in multiple files using a single grep command. For example,</p>
<pre>grep "dennis" test1.txt test2.txt test3.txt</pre>
<p class="cye-lm-tag">You can also use regular expressions for matching the string.</p>

<h2>4. cut</h2>
<p class="cye-lm-tag">Cut command is used for extracting a portion of a file using columns and delimiters. If you want to list everything in a selected column, use the “-c” flag with cut command. For example, lets select the first two columns from our test.txt file.</p>
<pre>cut -c1-2 test.txt</pre>
<pre>root@devopscube:~# cut -c1-2 test.txt
1
10
45
4
7
58</pre>
<p class="cye-lm-tag">If you want to extract specific strings from a file, you can used the delimiter “-d” flag and “-f” flag to select the field. For example, if you wan to extract all the names from our test.txt file you can use the following command.</p>
<pre>cut -d' ' -f2 test.txt</pre>
<pre>root@devopscube:~# cut -d' ' -f2 test.txt
mike
lucy
Dave
dennis
Megan
Mathew</pre>
<p class="cye-lm-tag">The following example extracts the users from /etc/passd file using ‘:” delimiter.</p>
<pre>cut -d':' -f1 /etc/passwd</pre>
<h2>5. sed</h2>
<p class="cye-lm-tag">sed is a text-editor which can perform editing operations in a non-interactive way. Sed command gets its input from a standard input or a file to perform the editing operation on a file. Sed is a very powerful utility and you can do a lot of file manipulations using sed. I will explain the important operation you might want to do with text file.</p>
<p class="cye-lm-tag">I you want to replace a text in a file by searching it in a file, you can use the&nbsp; sed&nbsp; command with substitute “s” flag to search for the specific pattern and change it.</p>
<pre>Syntax: sed 's/&lt;old-word&gt;/&lt;new-word&gt;/' test.txt</pre>
<p class="cye-lm-tag">For example, lets replace&nbsp; “mike” in test.txt file to “michael</p>
<pre>sed 's/mike/michael/' test.txt</pre>
<pre>root@devopscube:~# sed 's/mike/michael/' test.txt
1 michael level intermediate jan
10 lucy level beginer mar
45 Dave level expert dec
4 dennis start beginner jul
7 Megan employee trainee feb
58 Mathew Head CEO nov</pre>
<p class="cye-lm-tag">In the above example we used “/” as a delimiter for string substitution. You can use any character as a delimiter for substitution. For example, if you want to make changes to a url, you need to have a different delimiter because the url already have slashes. So you can substitute like the following.</p>
<pre>echo "http://www.example.uk/main.html" | sed 's_uk/main_com/index_'</pre>
<pre>root@devopscube:~# echo "http://www.example.uk/main.html" | sed 's_uk/main_com/index_'
http://www.example.com/index.html
</pre>
<p class="cye-lm-tag">You can also replace a line by matching a string pattern in the line. “-c” flag is used for replacing text using sed. Lets replace the first line in our test.txt file using the following command.</p>
<pre>&nbsp;sed '/1 mike/c 1 michael start beginner mar' test.txt</pre>
<pre>root@devopscube:~# sed '/1 mike/c 1 michael start beginner mar' test.txt
1 michael start beginner mar
10 lucy level beginer mar
45 Dave level expert dec
4 dennis start beginner jul
7 Megan employee trainee feb
58 Mathew Head CEO nov</pre>
<h2>6. tar</h2>
<p class="cye-lm-tag">tar command is used to create and extract archive files. “-cf” and “-xf” flags are used for creating and extracting archives.</p>
<pre>Syntax: tar &lt;options&gt; &lt;archive-name&gt; &lt;file/folder name&gt;</pre>
<p class="cye-lm-tag">Lets&nbsp; create a tar archive out of test.txt file</p>
<pre>tar -cf test.tar test.txt</pre>
<pre>root@devopscube:~# tar -cf test.tar test.txt
root@devopscube:~# ls
test.tar&nbsp; test.txt</pre>
<p class="cye-lm-tag">Lets extract the test.tar archive to the destination folder “demo” using “-C” flag.</p>
<pre>tar -xf test.tar -C /root/demo/</pre>
<pre>root@devopscube:~# tar -xf test.tar -C /root/demo/
root@devopscube:~# cd demo/
root@devopscube:~/demo# ls
test.txt</pre>
<h2>7. find</h2>
<p class="cye-lm-tag">find command is used for finding files. You can find the files using its name with “-name” flag.</p>
<pre>find -name <filename> find -name test.txt</filename></pre>
<pre>root@devopscube:/home/ubuntu# cd ~
root@devopscube:~# find -name test.txt
./demo/test.txt
./test.txt</pre>
<p class="cye-lm-tag">You can also find folder using its name by using”/ -name” flag.</p>
<pre>find / -name passwd</pre>
<pre>root@devopscube:~# find / -name passwd
/etc/cron.daily/passwd
/etc/pam.d/passwd
/etc/passwd
/usr/share/lintian/overrides/passwd</pre>
<h2>8. diff</h2>
<p class="cye-lm-tag">diff command is used to find the difference between two files. Diff command analyses the files and prints the lines which are different. Lets say we have two files test and test1. you can find the difference between the two files using the following command.</p>
<pre>Syntax: diff &lt;filename1&gt; &lt;filename2&gt;
        diff test.txt test1.txt</pre>
<pre>root@devopscube:~# diff test.txt test1.txt
7c7
&lt; 59 sdfsd
---
&gt; 59 sdfsd&nbsp; CTO dec</pre>
<h2>9. Uniq</h2>
<p class="cye-lm-tag">uniq command is used for filtering out the duplicate line in a file.</p>
<pre>Syntax: uniq <filename>
uniq test.txt</filename></pre>
<pre>root@devopscube:~# uniq test.txt
1 mike level intermediate jan
10 lucy level beginer mar
45 Dave level expert dec
4 dennis start beginner jul
7 Megan employee trainee feb
58 Mathew Head CEO nov</pre>
<h2>10. chmod</h2>
<p class="cye-lm-tag">chmod command is used for changing the read/write/execute permissions of a file. Permissions are represented in numbers as follows.</p>
<pre>4 - read permission</pre>
<pre>2 - write permission</pre>
<pre>1 - execute permission</pre>
<pre>0 - no permission</pre>
<p class="cye-lm-tag">To give all permissions on test.txt file, you can use the following chmod command.</p>
<pre>chmod 755 test.txt</pre>
<p class="cye-lm-tag">&nbsp;</p>

</div>
<br><hr>

</body>
</html>