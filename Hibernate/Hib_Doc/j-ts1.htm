<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<title>j-ts1</title>
    <link rel="stylesheet" href="grey.css">
</head>
<body>
<a href="https://www.ibm.com/developerworks/library/j-ts1/">src1</a>
<div class="ibm-col-6-4">
                                        <h1 id="ibm-pagetitle-h1" class="ibm-h1">Understanding transaction pitfalls</h1><p class="dw-article-subhead">Beware of these common mistakes when implementing transactions in the
            Java platform</p>
                                        <!-- Article Top Bar -->
                                                <div class="ibm-columns dw-article-topbar">
                                                    <!-- Author and article info. -->
                                                    <div class="ibm-col-6-2 ibm-col-medium-6-4 dw-article-metadata">
                                                        <div class="dw-article-avatar"><img width="42" height="42" src="//www.ibm.com/developerworks/i/p-mrichards.jpg" alt="Mark Richards"></div><div class="dw-article-authordate">Mark Richards<br><span class="dw-article-pubdate">Published on February 03,  2009</span></div>
                                                    </div>
                                                    <!-- Social -->
                                                    <div class="ibm-col-6-2 ibm-col-medium-6-4 ibm-col-small-6-2 dw-article-social">
                                                        <!-- Sharing links -->
                                                        <div id="dw-article-share-inline">
                                                            <div class="dw-article-sharelink-inline">
                                                                <div class="ibm-sharethispage"><h4 class="ibm-bold">Share this page</h4><p class="ibm-icononly"><a class="ibm-facebook-encircled-link" href="http://www.facebook.com/sharer.php?u=http%3A%2F%2Fwww.ibm.com%2Fdeveloperworks%2Flibrary%2Fj-ts1%2Findex.html&amp;t=Transaction%20strategies%3A%20Understanding%20transaction%20pitfalls" data-id="facebook" onclick="return IBMCore.common.module.sharethispage.gotoUrl(window.open(), this);">Facebook</a><a class="ibm-twitter-encircled-link" href="https://twitter.com/intent/tweet?url=http%3A%2F%2Fibm.co%2F2j2UX3e&amp;text=Transaction%20strategies%3A%20Understanding%20transaction%20pitfalls&amp;via=developerWorks" data-id="twitter" onclick="return IBMCore.common.module.sharethispage.gotoUrl(window.open(), this);">Twitter</a><a class="ibm-linkedin-encircled-link" href="http://www.linkedin.com/shareArticle?mini=true&amp;url=http%3A%2F%2Fwww.ibm.com%2Fdeveloperworks%2Flibrary%2Fj-ts1%2Findex.html&amp;title=Transaction%20strategies%3A%20Understanding%20transaction%20pitfalls" data-id="linkedin" onclick="return IBMCore.common.module.sharethispage.gotoUrl(window.open(), this);">Linked In</a><a class="ibm-googleplus-encircled-link" href="https://plus.google.com/share?url=http%3A%2F%2Fwww.ibm.com%2Fdeveloperworks%2Flibrary%2Fj-ts1%2Findex.html&amp;t=Transaction%20strategies%3A%20Understanding%20transaction%20pitfalls" data-id="googleplus" onclick="return IBMCore.common.module.sharethispage.gotoUrl(window.open(), this);">Google+</a><a class="ibm-email-encircled-link" href="mailto:?subject=Transaction%20strategies%3A%20Understanding%20transaction%20pitfalls&amp;body=http%3A%2F%2Fwww.ibm.com%2Fdeveloperworks%2Flibrary%2Fj-ts1%2Findex.html" data-id="email" onclick="">E-mail this page</a></p></div>
                                                            </div>
                                                        </div>
                                                        <!-- Number of comments and link to comments -->
                                                        <div id="dw-article-cmts">
                                                            <div class="dw-article-cmtslink">
                                                                <a onclick="tocLink('#icomments')" href="#icomments" role="link" tabindex="0" aria-label="Comments">
                                                                    <img src="//dw1.s81c.com/developerworks/i/v18/article/dw-article-cmt-icon.png" width="29" height="29" alt="Comments">
                                                                </a>
                                                            </div>
                                                            <div class="dw-article-cmtslink">
                                                                <a onclick="tocLink('#icomments')" href="#icomments" role="link" tabindex="0">
                                                                    <div id="nCmts">7</div>
                                                                </a>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
<div id="dw-series-container" style="display: block;"><h3 class="ibm-h3" id="dw-series-heading">Content series:</h3><div data-widget="showhide" data-type="panel" class="ibm-show-hide ibm-widget-processed"><h2 id="dw-series-show-hide"><a href="javascript:void();">This content is part of the series: <span id="dw-series-title-alt">Transaction
            strategies</span></a></h2><div class="ibm-container-body" id="dw-series-links" style="display: none;"><ul id="dw-series-list"><li class="dw-series-item"><a href="http://www.ibm.com/developerworks/library/j-ts2/index.html?ca=drs-" class="dw-series-article-link">Models and strategies overview</a></li><li class="dw-series-item"><a href="http://www.ibm.com/developerworks/library/j-ts3/index.html?ca=drs-" class="dw-series-article-link">The API Layer strategy</a></li><li class="dw-series-item"><a href="http://www.ibm.com/developerworks/library/j-ts4/index.html?ca=drs-" class="dw-series-article-link">The Client Orchestration strategy</a></li><li class="dw-series-item"><a href="http://www.ibm.com/developerworks/library/j-ts5/index.html?ca=drs-" class="dw-series-article-link">The High Concurrency strategy</a></li><li class="dw-series-item"><a href="http://www.ibm.com/developerworks/library/j-ts6/index.html?ca=drs-" class="dw-series-article-link">The High Performance strategy</a></li><li class="dw-series-item">Understanding transaction pitfalls</li><li class="dw-series-item"><a href="http://www.ibm.com/developerworks/library/j-springwebflow/index.html?ca=drs-" class="dw-series-article-link">ow-managed persistence in Spring Web Flow 2</a></li></ul></div></div></div>
                                        <!-- Article Body -->
                                        
                                        <div class="dw-article-sidebar ibm-background-cool-white-20"><p><strong>Learn more. Develop more. Connect more.</strong></p><p>The new <a href="https://www.ibm.com/us-en/marketplace/developer-program?cm_sp=dwpremium-_-j-ts1-_-sidebar" id="article-main-dwpremium-marketplace-txt" onclick="trkOBL('https://www.ibm.com/us-en/marketplace/developer-program?cm_sp=dwpremium-_-j-ts1-_-sidebar','article-main-dwpremium-marketplace-txt'); return false;">developerWorks Premium</a> membership program provides an
                    all-access pass to powerful development tools and resources, including
                    500 top technical titles (dozens specifically for Java developers)
                    through Safari Books Online, deep discounts on premier developer
                    events, video replays of recent O'Reilly conferences, and more. <a href="https://www.ibm.com/us-en/marketplace/developer-program?cm_sp=dwpremium-_-j-ts1-_-sidebar" id="article-main-dwpremium-marketplace-txt-1" onclick="trkOBL('https://www.ibm.com/us-en/marketplace/developer-program?cm_sp=dwpremium-_-j-ts1-_-sidebar','article-main-dwpremium-marketplace-txt-1'); return false;">Sign up today</a>.</p></div><p>The most common reason for using transactions in an application is to
                maintain a high degree of data integrity and consistency. If you're
                unconcerned about the quality of your data, you needn't concern yourself
                with transactions. After all, transaction support in the Java platform can
                kill performance, introduce locking issues and database concurrency
                problems, and add complexity to your application.</p><p>But developers who don't concern themselves with transactions do so at
                their own peril. Almost all business-related applications require a high
                degree of data quality. The financial investment industry alone wastes
                tens of billions of dollars on failed trades, with bad data being the
                second-leading cause. Although
                lack of transaction support is only one factor leading to bad data (albeit
                a major one), a safe inference is that billions of dollars are wasted in
                the financial investment industry alone as a result of nonexistent or poor
                transaction support. </p><div class="dw-article-sidebar ibm-background-cool-white-20"><p><strong>About this series</strong></p><p>Transactions improve the quality, integrity, and consistency of your
                    data and make your applications more robust. Implementation of
                    successful transaction processing in Java applications is not a
                    trivial exercise, and it's about design as much as about coding. In
                    this new <a href="http://www.ibm.com/developerworks/views/java/libraryview.jsp?search_by=transaction+strategies:">series</a>, Mark Richards is your guide to designing an effective
                    transaction strategy for use cases ranging from simple applications to
                    high-performance transaction processing.</p></div><p>Ignorance about transaction support is another source of problems. All too
                often I hear claims like "we don't need transaction support in our
                applications because they never fail." Right. I have witnessed some
                applications that in fact rarely or never throw exceptions. These
                applications bank on well-written code, well-written validation routines,
                and full testing and code coverage support to avoid the performance costs
                and complexity associated with transaction processing. The problem with
                this type of thinking is that it takes into account only one
                characteristic of transaction support: <em> atomicity</em>. Atomicity
                ensures that all updates are treated as a single unit and are either all
                committed or all rolled back. But rolling back or coordinating updates
                isn't the only aspect of transaction support. Another aspect,
                    <em>isolation</em>, ensures that one unit of work is isolated from
                other units of work. Without proper transaction isolation, other units of
                work can access updates made by an ongoing unit of work, even though that
                unit of work is incomplete. As a result, business decisions might be made
                on the basis of partial data, which could cause failed trades or other
                negative (or costly) outcomes. </p><div class="dw-article-sidebar ibm-background-cool-white-20"><p><strong>Better late than never</strong></p><p>I started to appreciate the problems with transaction processing in
                    early 2000 when, while working at a client site, I noticed a line item
                    on the project plan right above the system testing task. It read
                        <em>implement transaction support</em>. Sure, easy enough to add
                    transaction support to a major application when it is almost ready for
                    system testing, right? Unfortunately, this approach is all too common.
                    At least this project, unlike most, <em>was</em> implementing
                    transaction support, albeit at the end of the development cycle. </p></div><p>So, given the high cost and negative impact of bad data and the basic
                knowledge that transactions are important (and necessary), you need to use
                transactions and learn how to deal with the issues that can arise. You
                press on and add transaction support to your applications. And that's
                where the problem often begins. Transactions don't always seem to work as
                promised in the Java platform. This article is an exploration of the
                reasons why. With the help of code examples, I'll introduce some of the
                common transaction pitfalls I continually see and experience in the field,
                in most cases in production environments.</p><p>Although most of this article's code examples use the Spring Framework
                (version 2.5), the transaction concepts are the same as for the EJB 3.0
                specification. In most cases, it is simply a matter of replacing the
                Spring Framework <code>@Transactional</code> annotation with the
                <code>@TransactionAttribute</code> annotation found in the EJB 3.0
                specification. Where the two frameworks differ in concept and technique, I
                have included both Spring Framework and EJB 3.0 source code examples.</p><h2 id="N1009B" class="ibm-h2">Local transaction pitfalls</h2><p>A good place to start is with the easiest scenario: the use of <em>local
                    transactions</em>, also commonly referred to as <em>database
                    transactions</em>. In the early days of database persistence (for
                example, JDBC), we commonly delegated transaction processing to the
                database. After all, isn't that what the database is supposed to do? Local
                transactions work fine for logical units of work (LUW) that perform a
                single insert, update, or delete statement. For example, consider the
                simple JDBC code in Listing 1, which performs an insert of a stock-trade
                order to a <code>TRADE</code> table:</p><h5 id="listing1" class="ibm-h5"> Listing 1. Simple database insert
                    using
                JDBC</h5><div class="ibm-syntax-container"><div><div id="highlighter_778618" class="syntaxhighlighter  htmlscript"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div class="line number23 index22 alt2">23</div><div class="line number24 index23 alt1">24</div><div class="line number25 index24 alt2">25</div><div class="line number26 index25 alt1">26</div><div class="line number27 index26 alt2">27</div><div class="line number28 index27 alt1">28</div><div class="line number29 index28 alt2">29</div><div class="line number30 index29 alt1">30</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">@Stateless</code></div><div class="line number2 index1 alt1"><code class="htmlscript plain">public class TradingServiceImpl implements TradingService {</code></div><div class="line number3 index2 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">@Resource SessionContext ctx;</code></div><div class="line number4 index3 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">@Resource(mappedName="java:jdbc/tradingDS") DataSource ds;</code></div><div class="line number5 index4 alt2">&nbsp;</div><div class="line number6 index5 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">public long insertTrade(TradeData trade) throws Exception {</code></div><div class="line number7 index6 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">Connection dbConnection = ds.getConnection();</code></div><div class="line number8 index7 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">try {</code></div><div class="line number9 index8 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">Statement sql = dbConnection.createStatement();</code></div><div class="line number10 index9 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">String stmt =</code></div><div class="line number11 index10 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">"INSERT INTO TRADE (ACCT_ID, SIDE, SYMBOL, SHARES, PRICE, STATE)"</code></div><div class="line number12 index11 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">+ "VALUES ("</code></div><div class="line number13 index12 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">+ trade.getAcct() + "','"</code></div><div class="line number14 index13 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">+ trade.getAction() + "','"</code></div><div class="line number15 index14 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">+ trade.getSymbol() + "',"</code></div><div class="line number16 index15 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">+ trade.getShares() + ","</code></div><div class="line number17 index16 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">+ trade.getPrice() + ",'"</code></div><div class="line number18 index17 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">+ trade.getState() + "')";</code></div><div class="line number19 index18 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">sql.executeUpdate(stmt, Statement.RETURN_GENERATED_KEYS);</code></div><div class="line number20 index19 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">ResultSet rs = sql.getGeneratedKeys();</code></div><div class="line number21 index20 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">if (rs.next()) {</code></div><div class="line number22 index21 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">return rs.getBigDecimal(1).longValue();</code></div><div class="line number23 index22 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">} else {</code></div><div class="line number24 index23 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">throw new Exception("Trade Order Insert Failed");</code></div><div class="line number25 index24 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></div><div class="line number26 index25 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">} finally {</code></div><div class="line number27 index26 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">if (dbConnection != null) dbConnection.close();</code></div><div class="line number28 index27 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></div><div class="line number29 index28 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></div><div class="line number30 index29 alt1"><code class="htmlscript plain">}</code></div></div></td></tr></tbody></table></div></div></div><p>The JDBC code in Listing 1 includes no transaction logic, yet it persists
                the trade order in the <code>TRADE</code> table in the database. In this
                case, the database handles the transaction logic. </p><p>This is all well and good for a single database maintenance action in the
                LUW. But suppose you need to update the account balance at the same time
                you insert the trade order into the database, as shown in Listing 2:</p><h5 id="listing2" class="ibm-h5"> Listing 2. Performing multiple
                    table updates in the same
                method</h5><div class="ibm-syntax-container"><div><div id="highlighter_127916" class="syntaxhighlighter  htmlscript"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">public TradeData placeTrade(TradeData trade) throws Exception {</code></div><div class="line number2 index1 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">try {</code></div><div class="line number3 index2 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">insertTrade(trade);</code></div><div class="line number4 index3 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">updateAcct(trade);</code></div><div class="line number5 index4 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">return trade;</code></div><div class="line number6 index5 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">} catch (Exception up) {</code></div><div class="line number7 index6 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">//log the error</code></div><div class="line number8 index7 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">throw up;</code></div><div class="line number9 index8 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></div><div class="line number10 index9 alt1"><code class="htmlscript plain">}</code></div></div></td></tr></tbody></table></div></div></div><p>In this case, the <code>insertTrade()</code> and <code>updateAcct()</code>
                methods use standard JDBC code without transactions. Once the
                <code>insertTrade()</code> method ends, the database has persisted (and
                committed) the trade order. If the <code>updateAcct()</code> method should
                fail for any reason, the trade order would remain in the
                <code>TRADE</code> table at the end of the <code>placeTrade()</code>
                method, resulting in inconsistent data in the database. If the
                <code>placeTrade()</code> method had used transactions, both of these
                activities would have been included in a single LUW, and the trade order
                would have been rolled back if the account update failed.</p><p>With the popularity of Java persistence frameworks like Hibernate, TopLink,
                and the Java Persistence API (JPA) on the rise, we rarely write straight
                JDBC code anymore. More commonly, we use the newer object-relational
                mapping (ORM) frameworks to make our lives easier by replacing all of that
                nasty JDBC code with a few simple method calls. For example, to insert the
                trade order from the JDBC code example in <a href="#listing1">Listing
                    1</a>, using the Spring Framework with JPA, you'd map the
                <code>TradeData</code> object to the <code>TRADE</code> table and replace
                all of that JDBC code with the JPA code in Listing 3:</p><h5 id="listing3" class="ibm-h5"> Listing 3. Simple insert using
                    JPA</h5><div class="ibm-syntax-container"><div><div id="highlighter_529858" class="syntaxhighlighter  htmlscript"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">public class TradingServiceImpl {</code></div><div class="line number2 index1 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">@PersistenceContext(unitName="trading") EntityManager em;</code></div><div class="line number3 index2 alt2">&nbsp;</div><div class="line number4 index3 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">public long insertTrade(TradeData trade) throws Exception {</code></div><div class="line number5 index4 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">em.persist(trade);</code></div><div class="line number6 index5 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">return trade.getTradeId();</code></div><div class="line number7 index6 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></div><div class="line number8 index7 alt1"><code class="htmlscript plain">}</code></div></div></td></tr></tbody></table></div></div></div><p>Notice that Listing 3 invokes the <code>persist()</code> method on the
                <code>EntityManager</code> to insert the trade order. Simple, right? Not
                really. This code will not insert the trade order into the
                <code>TRADE</code> table as expected, nor will it throw an exception. It
                will simply return a value of <code>0</code> as the key to the trade order
                without changing the database. This is one of the first major pitfalls of
                transaction processing: <em>ORM-based frameworks require a transaction in
                    order to trigger the synchronization between the object cache and the
                    database</em>. It is through a transaction commit that the SQL code is
                generated and the database affected by the desired action (that is,
                insert, update, delete). Without a transaction there is no trigger for the
                ORM to generate SQL code and persist the changes, so the method simply
                ends — no exceptions, no updates. If you are using an ORM-based
                framework, you must use transactions. You can no longer rely on the
                database to manage the connections and commit the work. </p><p>These simple examples should make it clear that transactions are necessary
                in order to maintain data integrity and consistency. But they only begin
                to scratch the surface of the complexity and pitfalls associated with
                implementing transactions in the Java platform. </p><h2 id="N100FF" class="ibm-h2">Spring Framework
                <code>@Transactional</code>
                annotation pitfalls</h2><p>So, you test the code in <a href="#listing3">Listing 3</a> and discover
                that the <code>persist()</code> method didn't work without a transaction.
                As a result, you view a few links from a simple Internet search and find
                that with the Spring Framework, you need to use the
                <code>@Transactional</code> annotation. So you add the annotation to your
                code as shown in Listing 4:</p><h5 id="listing4" class="ibm-h5"> Listing 4. Using the
                    <code>@Transactional</code>
                annotation</h5><div class="ibm-syntax-container"><div><div id="highlighter_281150" class="syntaxhighlighter  htmlscript"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">public class TradingServiceImpl {</code></div><div class="line number2 index1 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">@PersistenceContext(unitName="trading") EntityManager em;</code></div><div class="line number3 index2 alt2">&nbsp;</div><div class="line number4 index3 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">@Transactional</code></div><div class="line number5 index4 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">public long insertTrade(TradeData trade) throws Exception {</code></div><div class="line number6 index5 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">em.persist(trade);</code></div><div class="line number7 index6 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">return trade.getTradeId();</code></div><div class="line number8 index7 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></div><div class="line number9 index8 alt2"><code class="htmlscript plain">}</code></div></div></td></tr></tbody></table></div></div></div><p>You retest your code, and you find it still doesn't work. The problem is
                that you must tell the Spring Framework that you are using annotations for
                your transaction management. Unless you are doing full unit testing, this
                pitfall is sometimes hard to discover. It usually leads to developers
                simply adding the transaction logic in the Spring configuration files
                rather than through annotations. </p><p>When using the <code>@Transactional</code> annotation in Spring, you must
                add the following line to your Spring configuration file: </p><div class="ibm-syntax-container"><div><div id="highlighter_202076" class="syntaxhighlighter  htmlscript"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">&lt;</code><code class="htmlscript keyword">tx:annotation-driven</code> <code class="htmlscript color1">transaction-manager</code><code class="htmlscript plain">=</code><code class="htmlscript string">"transactionManager"</code><code class="htmlscript plain">/&gt;</code></div></div></td></tr></tbody></table></div></div></div><p>The <code>transaction-manager</code> property holds a reference to the
                transaction manager bean defined in the Spring configuration file. This
                code tells Spring to use the <code>@Transaction</code> annotation when
                applying the transaction interceptor. Without it, the
                <code>@Transactional</code> annotation is ignored, resulting in no
                transaction being used in your code.</p><p>Getting the basic <code>@Transactional</code> annotation to work in the
                code in <a href="#listing4">Listing 4</a> is only the beginning. Notice
                that Listing 4 uses the <code>@Transactional</code> annotation without
                specifying any additional annotation parameters. I've found that many
                developers use the <code>@Transactional</code> annotation without taking
                the time to understand fully what it does. For example, when using the
                <code>@Transactional</code> annotation by itself as I do in Listing 4,
                what is the transaction propagation mode set to? What is the read-only
                flag set to? What is the transaction isolation level set to? More
                important, when should the transaction roll back the work? Understanding
                how this annotation is used is important to ensuring that you have the
                proper level of transaction support in your application. To answer the
                questions I've just asked: when using the <code>@Transactional</code>
                annotation by itself without any parameters, the propagation mode is set
                to <code>REQUIRED</code>, the read-only flag is set to <code>false</code>,
                the transaction isolation level is set to the database default (usually
                <code>READ_COMMITTED</code>), and the transaction will not roll back on a
                checked exception.</p><h2 id="N10153" class="ibm-h2"><code>@Transactional</code>
                read-only flag pitfalls</h2><p>A common pitfall I frequently come across in my travels is the improper use
                of the read-only flag on the Spring <code>@Transactional</code>
                annotation. Here is a quick quiz for you: When using standard JDBC code
                for Java persistence, what does the <code>@Transactional</code> annotation
                in Listing 5 do when the read-only flag is set to <code>true</code> and
                the propagation mode set to <code>SUPPORTS</code>?</p><h5 id="listing5" class="ibm-h5">Listing 5. Using read-only with
                    <code>SUPPORTS</code> propagation mode —
                JDBC</h5><div class="ibm-syntax-container"><div><div id="highlighter_761454" class="syntaxhighlighter  htmlscript"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">@Transactional(readOnly = true, propagation=Propagation.SUPPORTS)</code></div><div class="line number2 index1 alt1"><code class="htmlscript plain">public long insertTrade(TradeData trade) throws Exception {</code></div><div class="line number3 index2 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">//JDBC Code...</code></div><div class="line number4 index3 alt1"><code class="htmlscript plain">}</code></div></div></td></tr></tbody></table></div></div></div><p>When the <code>insertTrade()</code> method in Listing 5 executes, does
                it:</p><ul class="ibm-bullet-list" type="A"><li>Throw a read-only connection exception</li><li>Correctly insert the trade order and commit the data</li><li>Do nothing because the propagation level is set to
                    <code>SUPPORTS</code></li></ul><p>Give up? The correct answer is B. The trade order is correctly inserted
                into the database, even though the read-only flag is set to
                <code>true</code> and the transaction propagation set to
                <code>SUPPORTS</code>. But how can that be? No transaction is started
                because of the <code>SUPPORTS</code> propagation mode, so the method
                effectively uses a local (database) transaction. The read-only flag is
                applied only if a transaction is started. In this case, no transaction was
                started, so the read-only flag is ignored.</p><p>Okay, so if that is the case, what does the <code>@Transactional</code>
                annotation do in Listing 6 when the read-only flag is set and the
                propagation mode is set to <code>REQUIRED</code>?</p><h5 id="listing6" class="ibm-h5"> Listing 6. Using read-only with
                    <code>REQUIRED</code> propagation mode —
                JDBC</h5><div class="ibm-syntax-container"><div><div id="highlighter_744726" class="syntaxhighlighter  htmlscript"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">@Transactional(readOnly = true, propagation=Propagation.REQUIRED)</code></div><div class="line number2 index1 alt1"><code class="htmlscript plain">public long insertTrade(TradeData trade) throws Exception {</code></div><div class="line number3 index2 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">//JDBC code...</code></div><div class="line number4 index3 alt1"><code class="htmlscript plain">}</code></div></div></td></tr></tbody></table></div></div></div><p>When executed, does the <code>insertTrade()</code> method in Listing 6:</p><ul class="ibm-bullet-list" type="A"><li>Throw a read-only connection exception</li><li>Correctly insert the trade order and commit the data</li><li>Do nothing because the read-only flag is set to <code>true</code></li></ul><p>This one should be easy to answer given the prior explanation. The correct
                answer here is A. An exception will be thrown, indicating that you are
                trying to perform an update operation on a read-only connection. Because a
                transaction is started (<code>REQUIRED</code>), the connection is set to
                read-only. Sure enough, when you try to execute the SQL statement, you get
                an exception telling you that the connection is a read-only connection. </p><p>The odd thing about the read-only flag is that you need to start a
                transaction in order to use it. Why would you need a transaction if you
                are only reading data? The answer is that you don't. Starting a
                transaction to perform a read-only operation adds to the overhead of the
                processing thread and can cause shared read locks on the database
                (depending on what type of database you are using and what the isolation
                level is set to). The bottom line is that the read-only flag is somewhat
                meaningless when you use it for JDBC-based Java persistence and causes
                additional overhead when an unnecessary transaction is started.</p><p>What about when you use an ORM-based framework? In keeping with the quiz
                format, can you guess what the result of the <code>@Transactional</code>
                annotation in Listing 7 would be if the <code>insertTrade()</code> method
                were invoked using JPA with Hibernate?</p><h5 id="listing7" class="ibm-h5">Listing 7. Using read-only with
                    <code>REQUIRED</code> propagation mode —
                JPA</h5><div class="ibm-syntax-container"><div><div id="highlighter_567622" class="syntaxhighlighter  htmlscript"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">@Transactional(readOnly = true, propagation=Propagation.REQUIRED)</code></div><div class="line number2 index1 alt1"><code class="htmlscript plain">public long insertTrade(TradeData trade) throws Exception {</code></div><div class="line number3 index2 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">em.persist(trade);</code></div><div class="line number4 index3 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">return trade.getTradeId();</code></div><div class="line number5 index4 alt2"><code class="htmlscript plain">}</code></div></div></td></tr></tbody></table></div></div></div><p>Does the <code>insertTrade()</code> method in Listing 7:</p><ul class="ibm-bullet-list" type="A"><li>Throw a read-only connection exception</li><li>Correctly insert the trade order and commit the data</li><li>Do nothing because the <code>readOnly</code> flag is set to true</li></ul><p>The answer to this question is a bit more tricky. In some cases the answer
                is C, but in most cases (particularly when using JPA) the answer is B. The
                trade order is correctly inserted into the database without error. Wait a
                minute — the preceding example shows that a read-only connection exception
                would be thrown when the <code>REQUIRED</code> propagation mode is used.
                That is true when you use JDBC. However, when you use an ORM-based
                framework, the read-only flag works a bit differently. When you are
                generating a key on an insert, the ORM framework will go to the database
                to obtain the key and subsequently perform the insert. For some vendors,
                such as Hibernate, the flush mode will be set to <code>MANUAL</code>, and
                no insert will occur for inserts with non-generated keys. The same holds
                true for updates. However, other vendors, like TopLink, will always
                perform inserts and updates when the read-only flag is set to true.
                Although this is both vendor and version specific, the point here is that
                you cannot be guaranteed that the insert or update will not occur when the
                read-only flag is set, particularly when using JPA as it is
                vendor-agnostic.</p><p>Which brings me to another major pitfall I frequently encounter. Given all
                you've read so far, what do you suppose the code in Listing 8 would do if
                you only set the read-only flag on the <code>@Transactional</code>
                annotation?</p><h5 id="listing8" class="ibm-h5">Listing 8. Using read-only —
                    JPA</h5><div class="ibm-syntax-container"><div><div id="highlighter_177737" class="syntaxhighlighter  htmlscript"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">@Transactional(readOnly = true)</code></div><div class="line number2 index1 alt1"><code class="htmlscript plain">public TradeData getTrade(long tradeId) throws Exception {</code></div><div class="line number3 index2 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">return em.find(TradeData.class, tradeId);</code></div><div class="line number4 index3 alt1"><code class="htmlscript plain">}</code></div></div></td></tr></tbody></table></div></div></div><p>Does the <code>getTrade()</code> method in Listing 8:</p><ul class="ibm-bullet-list" type="A"><li>Start a transaction, get the trade order, then commit the
                    transaction</li><li>Get the trade order without starting a transaction</li></ul><div class="dw-article-sidebar ibm-background-cool-white-20"><p><strong>Never say never</strong></p><p>At certain times you may want to start a transaction for a database
                    read operation — for example, when isolating your read
                    operations for consistency or setting a specific transaction isolation
                    level for the read operation. However, these situations are rare in
                    business applications, and unless you're faced with one, you should
                    avoid starting a transaction for database read operations, as they are
                    unnecessary and can lead to database deadlocks, poor performance, and
                    poor throughput.</p></div><p>The correct answer here is A. A transaction is started and committed. Don't
                forget: the default propagation mode for the <code>@Transactional</code>
                annotation is <code>REQUIRED</code>. This means that a transaction is
                started when in fact one is not required (see <a href="#never">Never say
                    never</a>). . Depending on the database you are using, this can cause
                unnecessary shared locks, resulting in possible deadlock situations in the
                database. In addition, unnecessary processing time and resources are being
                consumed starting and stopping the transaction. The bottom line is that
                when you use an ORM-based framework, the read-only flag is quite useless
                and in most cases is ignored. But if you still insist on using it, always
                set the propagation mode to <code>SUPPORTS</code>, as shown in Listing 9,
                so no transaction is started:</p><h5 id="listing9" class="ibm-h5">Listing 9. Using read-only and
                    <code>SUPPORTS</code> propagation mode for select
                operation</h5><div class="ibm-syntax-container"><div><div id="highlighter_887760" class="syntaxhighlighter  htmlscript"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">@Transactional(readOnly = true, propagation=Propagation.SUPPORTS)</code></div><div class="line number2 index1 alt1"><code class="htmlscript plain">public TradeData getTrade(long tradeId) throws Exception {</code></div><div class="line number3 index2 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">return em.find(TradeData.class, tradeId);</code></div><div class="line number4 index3 alt1"><code class="htmlscript plain">}</code></div></div></td></tr></tbody></table></div></div></div><p>Better yet, just avoid using the <code>@Transactional</code> annotation
                altogether when doing read operations, as shown in Listing 10:</p><h5 id="listing10" class="ibm-h5">Listing 10. Removing the
                    <code>@Transactional</code> annotation for select
                operations</h5><div class="ibm-syntax-container"><div><div id="highlighter_591971" class="syntaxhighlighter  htmlscript"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">public TradeData getTrade(long tradeId) throws Exception {</code></div><div class="line number2 index1 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">return em.find(TradeData.class, tradeId);</code></div><div class="line number3 index2 alt2"><code class="htmlscript plain">}</code></div></div></td></tr></tbody></table></div></div></div><h2 id="N1022F" class="ibm-h2"><code>REQUIRES_NEW </code>
                transaction attribute pitfalls</h2><p>Whether you're using the Spring Framework or EJB, use of the
                <code>REQUIRES_NEW</code> transaction attribute can have negative results
                and lead to corrupt and inconsistent data. The <code>REQUIRES_NEW</code>
                transaction attribute always starts a new transaction when the method is
                started, whether or not an existing transaction is present. Many
                developers use the <code>REQUIRES_NEW</code> attribute incorrectly,
                assuming it is the correct way to make sure that a transaction is started.
                Consider the two methods in Listing 11:</p><h5 id="listing11" class="ibm-h5"> Listing 11. Using the
                    <code>REQUIRES_NEW</code> transaction
                attribute</h5><div class="ibm-syntax-container"><div><div id="highlighter_749035" class="syntaxhighlighter  htmlscript"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">@Transactional(propagation=Propagation.REQUIRES_NEW)</code></div><div class="line number2 index1 alt1"><code class="htmlscript plain">public long insertTrade(TradeData trade) throws Exception {...}</code></div><div class="line number3 index2 alt2">&nbsp;</div><div class="line number4 index3 alt1"><code class="htmlscript plain">@Transactional(propagation=Propagation.REQUIRES_NEW)</code></div><div class="line number5 index4 alt2"><code class="htmlscript plain">public void updateAcct(TradeData trade) throws Exception {...}</code></div></div></td></tr></tbody></table></div></div></div><p>Notice in Listing 11 that both of these methods are public, implying that
                they can be invoked independently from each other. Problems occur with the
                <code>REQUIRES_NEW</code> attribute when methods using it are invoked
                within the same logical unit of work via inter-service communication or
                through orchestration. For example, suppose in Listing 11 that you can
                invoke the <code>updateAcct()</code> method independently of any other
                method in some use cases, but there's also the case where the
                <code>updateAcct()</code> method is also invoked in the
                <code>insertTrade()</code> method. Now, if an exception occurs after the
                <code>updateAcct()</code> method call, the trade order would be rolled
                back, but the account updates would be committed to the database, as shown
                in Listing 12:</p><h5 id="listing12" class="ibm-h5"> Listing 12. Multiple updates using
                    the <code>REQUIRES_NEW</code> transaction
                attribute</h5><div class="ibm-syntax-container"><div><div id="highlighter_610167" class="syntaxhighlighter  htmlscript"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">@Transactional(propagation=Propagation.REQUIRES_NEW)</code></div><div class="line number2 index1 alt1"><code class="htmlscript plain">public long insertTrade(TradeData trade) throws Exception {</code></div><div class="line number3 index2 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">em.persist(trade);</code></div><div class="line number4 index3 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">updateAcct(trade);</code></div><div class="line number5 index4 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">//exception occurs here! Trade rolled back but account update is not!</code></div><div class="line number6 index5 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">...</code></div><div class="line number7 index6 alt2"><code class="htmlscript plain">}</code></div></div></td></tr></tbody></table></div></div></div><p>This happens because a new transaction is started in the
                <code>updateAcct()</code> method, so that transaction commits once the
                <code>updateAcct()</code> method ends. When you use the
                <code>REQUIRES_NEW</code> transaction attribute, if an existing
                transaction context is present, the current transaction is suspended and a
                new transaction started. Once that method ends, the new transaction
                commits and the original transaction resumes. </p><p>Because of this behavior, the <code>REQUIRES_NEW</code> transaction
                attribute should be used only if the database action in the method being
                invoked needs to be saved to the database regardless of the outcome of the
                overlaying transaction. For example, suppose that every stock trade that
                was attempted had to be recorded in an audit database. This information
                needs to be persisted whether or not the trade failed because of
                validation errors, insufficient funds, or some other reason. If you did
                not use the <code>REQUIRES_NEW</code> attribute on the audit method, the
                audit record would be rolled back along with the attempted trade. Using
                the <code>REQUIRES_NEW</code> attribute guarantees that the audit data is
                saved regardless of the initial transaction's outcome. The main point here
                is always to use either the <code>MANDATORY</code> or
                <code>REQUIRED</code> attribute instead of <code>REQUIRES_NEW</code>
                unless you have a reason to use it for reasons similar those to the audit
                example.</p><h2 id="N10286" class="ibm-h2">Transaction rollback
                pitfalls</h2><p>I've saved the most common transaction pitfall for last. Unfortunately, I
                see this one in production code more times than not. I'll start with the
                Spring Framework and then move on to EJB 3.</p><p>So far, the code you have been looking at looks something like Listing 13: </p><h5 id="listing13" class="ibm-h5"> Listing 13. No rollback
                    support</h5><div class="ibm-syntax-container"><div><div id="highlighter_953631" class="syntaxhighlighter  htmlscript"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">@Transactional(propagation=Propagation.REQUIRED)</code></div><div class="line number2 index1 alt1"><code class="htmlscript plain">public TradeData placeTrade(TradeData trade) throws Exception {</code></div><div class="line number3 index2 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">try {</code></div><div class="line number4 index3 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">insertTrade(trade);</code></div><div class="line number5 index4 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">updateAcct(trade);</code></div><div class="line number6 index5 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">return trade;</code></div><div class="line number7 index6 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">} catch (Exception up) {</code></div><div class="line number8 index7 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">//log the error</code></div><div class="line number9 index8 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">throw up;</code></div><div class="line number10 index9 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></div><div class="line number11 index10 alt2"><code class="htmlscript plain">}</code></div></div></td></tr></tbody></table></div></div></div><p>Suppose the account does not have enough funds to purchase the stock in
                question or is not set up to purchase or sell stock yet and throws a
                checked exception (for example, <code>FundsNotAvailableException</code>).
                Does the trade order get persisted in the database or is the entire
                logical unit of work rolled back? The answer, surprisingly, is that upon a
                checked exception (either in the Spring Framework or EJB), the transaction
                commits any work that has not yet been committed. Using Listing 13, this
                means that if a checked exception occurs during the
                <code>updateAcct()</code> method, the trade order is persisted, but the
                account isn't updated to reflect the trade.</p><p>This is perhaps the primary data-integrity and consistency issue when
                transactions are used. Run-time exceptions (that is, unchecked exceptions)
                automatically force the entire logical unit of work to roll back, but
                checked exceptions do not. Therefore, the code in Listing 13 is useless
                from a transaction standpoint; although it appears that it uses
                transactions to maintain atomicity and consistency, in fact it does not. </p><p>Although this sort of behavior may seem strange, transactions behave this
                way for some good reasons. First of all, not all checked exceptions are
                bad; they might be used for event notification or to redirect processing
                based on certain conditions. But more to the point, the application code
                may be able to take corrective action on some types of checked exceptions,
                thereby allowing the transaction to complete. For example, consider the
                scenario in which you are writing the code for an online book retailer. To
                complete the book order, you need to send an e-mail confirmation as part
                of the order process. If the e-mail server is down, you would send some
                sort of SMTP checked exception indicating that the message cannot be sent.
                If checked exceptions caused an automatic rollback, the entire book order
                would be rolled back just because the e-mail server was down. By not
                automatically rolling back on checked exceptions, you can catch that
                exception and perform some sort of corrective action (such as sending the
                message to a pending queue) and commit the rest of the order.</p><p>When you use the Declarative transaction model (described in more detail in
                Part 2 of this series), you must specify how the container or framework
                should handle checked exceptions. In the Spring Framework you specify this
                through the <code>rollbackFor</code> parameter in the
                <code>@Transactional</code> annotation, as shown in Listing 14:</p><h5 id="listing14" class="ibm-h5"> Listing 14. Adding transaction
                    rollback support —
                Spring</h5><div class="ibm-syntax-container"><div><div id="highlighter_106305" class="syntaxhighlighter  htmlscript"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">@Transactional(propagation=Propagation.REQUIRED, rollbackFor=Exception.class)</code></div><div class="line number2 index1 alt1"><code class="htmlscript plain">public TradeData placeTrade(TradeData trade) throws Exception {</code></div><div class="line number3 index2 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">try {</code></div><div class="line number4 index3 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">insertTrade(trade);</code></div><div class="line number5 index4 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">updateAcct(trade);</code></div><div class="line number6 index5 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">return trade;</code></div><div class="line number7 index6 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">} catch (Exception up) {</code></div><div class="line number8 index7 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">//log the error</code></div><div class="line number9 index8 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">throw up;</code></div><div class="line number10 index9 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></div><div class="line number11 index10 alt2"><code class="htmlscript plain">}</code></div></div></td></tr></tbody></table></div></div></div><p>Notice the use of the <code>rollbackFor</code> parameter in the
                <code>@Transactional</code> annotation. This parameter accepts either a
                single exception class or an array of exception classes, or you can use
                the <code>rollbackForClassName</code> parameter to specify the names of
                the exceptions as Java <code>String</code> types. You can also use the
                negative version of this property (<code>noRollbackFor</code>) to specify
                that all exceptions should force a rollback except certain ones. Typically
                most developers specify <code>Exception.class</code> as the value,
                indicating that all exceptions in this method should force a rollback. </p><p>EJBs work a little bit differently from the Spring Framework with regard to
                rolling back a transaction. The <code>@TransactionAttribute</code>
                annotation found in the EJB 3.0 specification does not include directives
                to specify the rollback behavior. Rather, you must use the
                <code>SessionContext.setRollbackOnly()</code> method to mark the
                transaction for rollback, as illustrated in Listing 15: </p><h5 id="listing15" class="ibm-h5"> Listing 15. Adding transaction
                    rollback support —
                EJB</h5><div class="ibm-syntax-container"><div><div id="highlighter_396078" class="syntaxhighlighter  htmlscript"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">@TransactionAttribute(TransactionAttributeType.REQUIRED)</code></div><div class="line number2 index1 alt1"><code class="htmlscript plain">public TradeData placeTrade(TradeData trade) throws Exception {</code></div><div class="line number3 index2 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">try {</code></div><div class="line number4 index3 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">insertTrade(trade);</code></div><div class="line number5 index4 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">updateAcct(trade);</code></div><div class="line number6 index5 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">return trade;</code></div><div class="line number7 index6 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">} catch (Exception up) {</code></div><div class="line number8 index7 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">//log the error</code></div><div class="line number9 index8 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">sessionCtx.setRollbackOnly();</code></div><div class="line number10 index9 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">throw up;</code></div><div class="line number11 index10 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></div><div class="line number12 index11 alt1"><code class="htmlscript plain">}</code></div></div></td></tr></tbody></table></div></div></div><p>Once the <code>setRollbackOnly()</code> method is invoked, you cannot
                change your mind; the only possible outcome is to roll back the
                transaction upon completion of the method that started the transaction.
                The transaction strategies described in future articles in the series will
                provide guidance on when and where to use the rollback directives and on
                when to use the <code>REQUIRED</code> vs. <code>MANDATORY</code>
                transaction attributes.</p><h2 id="N102E3" class="ibm-h2">Conclusion</h2><p>The code used to implement transactions in the Java platform is not overly
                complex; however, how you use and configure it can get somewhat complex.
                Many pitfalls are associated with implementing transaction support in the
                Java platform (including some less common ones that I haven't discussed
                here). The biggest issue with most of them is that no compiler warnings or
                run-time errors tell you that the transaction implementation is incorrect.
                Furthermore, contrary to the assumption reflected in the "<a href="#anecdote">Better late than never</a>" anecdote at the start of
                this article, implementing transaction support is not only a coding
                exercise. A significant amount of design effort goes into developing an
                overall transaction strategy. The rest of the <em>Transaction
                    strategies</em> series will help guide you in terms of how to design
                an effective transaction strategy for use cases ranging from simple
                applications to high-performance transaction processing.</p><!--CMA ID: 367505--><!--Site ID: 1--><!--XSLT stylesheet used to transform this file: dw-document-html-8.0.xsl--> 
                                        <!-- Article Resources -->
                                        <div class="ibm-alternate-rule"><hr></div><h4 id="artdownload" class="ibm-h4">Downloadable resources</h4><ul class="ibm-link-list"><li><a class="ibm-pdf-link" href="j-ts1-pdf.pdf">PDF</a></li></ul><div class="ibm-alternate-rule"><hr></div><h4 id="artrelatedtopics" class="ibm-h4">Related topic</h4><ul class="ibm-plain-list"><li><a href="http://static.springframework.org/spring/docs/2.5.x/reference/transaction.html">Spring
                Framework 2.5 documentation: Chapter 9. Transaction management</a></li></ul>
                                        <!-- Commenting -->
<!-- INLINE_COMMENTS_BEGIN: -->
<div class="ibm-alternate-rule"><hr></div>
<div id="dw-article-cmts-top" class="ibm-columns">
    <div class="ibm-col-6-2">
        <h4 id="icomments" class="ibm-h4">Comments</h4>
        <div id="dw-article-cmts-login">
            <p><a onclick="window.location=userLinks[0].url;" tabindex="0" role="link">Sign in</a> or 
                <a onclick="window.location=userLinks[1].url;" tabindex="0" role="link">register</a> to add and subscribe to comments.</p>
        </div>
    </div>    
    <div class="ibm-col-6-2" id="dw-notify"> 
        <input type="checkbox" value="1" name="comment_notification" id="comment_notification" disabled="">
        <label for="comment_notification" style="color: rgb(204, 204, 204);">Subscribe me to comment notifications</label>	   
    </div>
</div>

<div class="dw-article-cmts-container">       
    <div class="ibm-no-print jquery-comments read-only" id="dw-icomments-container"><div class="commenting-field main"><img src="/developerworks/maverick/image/user/user-icon.png" alt="" class="profile-picture round by-current-user"><div class="textarea-wrapper"><span class="close" style="display: none;"><span class="left"></span><span class="right"></span></span><div class="textarea" data-placeholder="Add a comment" contenteditable="true" style="height: 3.65em;"></div><div class="control-row" style="display: none;"><span class="send save highlight-background">Submit</span></div></div></div><ul class="navigation"><div class="navigation-wrapper"><li data-sort-key="newest" data-container-name="comments" class="active">Newest</li><li data-sort-key="oldest" data-container-name="comments">Oldest</li><li data-sort-key="popularity" data-container-name="comments">Popular</li></div><div class="navigation-wrapper responsive"><li class="title active"><header>Newest</header></li><ul class="dropdown"><li data-sort-key="newest" data-container-name="comments" class="active">Newest</li><li data-sort-key="oldest" data-container-name="comments">Oldest</li><li data-sort-key="popularity" data-container-name="comments">Popular</li></ul></div></ul><div class="data-container" data-container="comments"><ul id="comment-list" class="main"><li data-id="24607" class="comment"><div class="comment-wrapper"><img src="/developerworks/maverick/image/user/user-icon.png" alt="" class="profile-picture round"><time data-original="1458758009414">23 Mar 2016</time><div class="name"><a href="https://www.ibm.com/developerworks/community/profiles/user/SatyaPentapati">SatyaPentapati</a></div><div class="wrapper"><div class="content">I stumbled into this article.   I have a question regarding read-only queries not requiring transactions.

Even though it is a read operation, you don't want to perform a DIRTY READ.  The only way you eliminate this is by initiating transaction with isolation level of READ COMMITTED.

Am I missing something here?</div><span class="actions"><button class="action reply" type="button">Reply</button><span class="separator">·</span><button class="action upvote"><span class="upvote-count">0</span><i class="fa fa-thumbs-up"></i></button><span class="separator">·</span><a class="action reply" href="/developerworks/community/report?lang=en&amp;referingURL=https%3A%2F%2Fwww.ibm.com%2Fdeveloperworks%2Flibrary%2Fj-ts1%2F&amp;mymessage=Comment%3A%20I%20stumbled%20into%20this%20article.%20%20%20I%20have%20a%20question%20regarding%20read-only%20queries%20not%20requiring%20transactions.%0A%0AEven%20though%20it%20is%20a%20read%20operation%2C%20you%20don't%20want%20to%20perform%20a%20DIRTY%20READ.%20%20The%20only%20way%20you%20eliminate%20this%20is%20by%20initiating%20transaction%20with%20isolation%20level%20of%20READ%20COMMITTED.%0A%0AAm%20I%20missing%20something%20here%3F%0DPosted%20by%20SatyaPentapati%20on%2023%20Mar%202016%0D%0D---%20Add%20any%20comments%20below%20this%20line%20---" target="_blank">Report Abuse<i class="fa image" style="background-image: url(&quot;/developerworks/maverick/image/report-abuse.png&quot;);"></i></a></span></div></div><ul class="child-comments"></ul></li><li data-id="18293" class="comment"><div class="comment-wrapper"><img src="/developerworks/maverick/image/user/user-icon.png" alt="" class="profile-picture round"><time data-original="1315555200000">09 Sep 2011</time><div class="name"><a href="https://www.ibm.com/developerworks/community/profiles/user/fakeid">fakeid</a></div><div class="wrapper"><div class="content">Hi Mark,\nI am using Websphere 7.0 with Spring 3.0. I am not using any Java Persistence Framework. I am configuring the WebSphere specific transaction manager. But when I am testing my transactions are not rolling back properly. What I see is my first transaction is successful but my second one is a failure, ideally both should roll back, but I find the first one is getting committed. Any ideas?</div><span class="actions"><button class="action reply" type="button">Reply</button><span class="separator">·</span><button class="action upvote"><span class="upvote-count">0</span><i class="fa fa-thumbs-up"></i></button><span class="separator">·</span><a class="action reply" href="/developerworks/community/report?lang=en&amp;referingURL=https%3A%2F%2Fwww.ibm.com%2Fdeveloperworks%2Flibrary%2Fj-ts1%2F&amp;mymessage=Comment%3A%20Hi%20Mark%2C%5CnI%20am%20using%20Websphere%207.0%20with%20Spring%203.0.%20I%20am%20not%20using%20any%20Java%20Persistence%20Framework.%20I%20am%20configuring%20the%20WebSphere%20specific%20transaction%20manager.%20But%20when%20I%20am%20testing%20my%20transactions%20are%20not%20rolling%20back%20properly.%20What%20I%20see%20is%20my%20first%20transaction%20is%20successful%20but%20my%20second%20one%20is%20a%20failure%2C%20ideally%20both%20should%20roll%20back%2C%20but%20I%20find%20the%20first%20one%20is%20getting%20committed.%20Any%20ideas%3F%0DPosted%20by%20fakeid%20on%2009%20Sep%202011%0D%0D---%20Add%20any%20comments%20below%20this%20line%20---" target="_blank">Report Abuse<i class="fa image" style="background-image: url(&quot;/developerworks/maverick/image/report-abuse.png&quot;);"></i></a></span></div></div><ul class="child-comments"></ul></li><li data-id="18292" class="comment"><div class="comment-wrapper"><img src="/developerworks/maverick/image/user/user-icon.png" alt="" class="profile-picture round"><time data-original="1291802400000">08 Dec 2010</time><div class="name"><a href="https://www.ibm.com/developerworks/community/profiles/user/SebastienTardif">SebastienTardif</a></div><div class="wrapper"><div class="content">Just by what you demonstrated, the effect of the read-only attribute is too much random for well designed software. It's probably better to use a custom annotation, like this implementation will be explicit and understood.\n\nWhen used with EclipseLink, if like Hibernate the impl. end-up to set ORM read-only feature that will enable EclipseLink unthread safe implementation of read-only support: https:\/\/bugs.eclipse.org\/bugs\/show_bug.cgi?id=245726\n\nAlso with EclipseLink if code my mistake modify the read-only persistent objects that will corrupt the second level cache. Some books argue that it's slower trying to skip transaction, because in many case that will end-up creation many transactions instead of just one during a single business transaction (like one http request). Mention of more DB locks related to read-only using transaction doesn't apply with 99.99% of the application configured with the most popular db, which is Oracle, so it's likely an anti-pattern to try to skip tx.</div><span class="actions"><button class="action reply" type="button">Reply</button><span class="separator">·</span><button class="action upvote"><span class="upvote-count">0</span><i class="fa fa-thumbs-up"></i></button><span class="separator">·</span><a class="action reply" href="/developerworks/community/report?lang=en&amp;referingURL=https%3A%2F%2Fwww.ibm.com%2Fdeveloperworks%2Flibrary%2Fj-ts1%2F&amp;mymessage=Comment%3A%20Just%20by%20what%20you%20demonstrated%2C%20the%20effect%20of%20the%20read-only%20attribute%20is%20too%20much%20random%20for%20well%20designed%20software.%20It's%20probably%20better%20to%20use%20a%20custom%20annotation%2C%20like%20this%20implementation%20will%20be%20explicit%20and%20understood.%5Cn%5CnWhen%20used%20with%20EclipseLink%2C%20if%20like%20Hibernate%20the%20impl.%20end-up%20to%20set%20ORM%20read-only%20feature%20that%20will%20enable%20EclipseLink%20unthread%20safe%20implementation%20of%20read-only%20support%3A%20https%3A%5C%2F%5C%2Fbugs.eclipse.org%5C%2Fbugs%5C%2Fshow_bug.cgi%3Fid%3D245726%5Cn%5CnAlso%20with%20EclipseLink%20if%20code%20my%20mistake%20modify%20the%20read-only%20persistent%20objects%20that%20will%20corrupt%20the%20second%20level%20cache.%20Some%20books%20argue%20that%20it's%20slower%20trying%20to%20skip%20transaction%2C%20because%20in%20many%20case%20that%20will%20end-up%20creation%20many%20transactions%20instead%20of%20just%20one%20during%20a%20single%20business%20transaction%20(like%20one%20http%20request).%20Mention%20of%20more%20DB%20locks%20related%20to%20read-only%20using%20transaction%20doesn't%20apply%20with%2099.99%25%20of%20the%20application%20configured%20with%20the%20most%20popular%20db%2C%20which%20is%20Oracle%2C%20so%20it's%20likely%20an%20anti-pattern%20to%20try%20to%20skip%20tx.%0DPosted%20by%20SebastienTardif%20on%2008%20Dec%202010%0D%0D---%20Add%20any%20comments%20below%20this%20line%20---" target="_blank">Report Abuse<i class="fa image" style="background-image: url(&quot;/developerworks/maverick/image/report-abuse.png&quot;);"></i></a></span></div></div><ul class="child-comments"></ul></li><li data-id="18291" class="comment"><div class="comment-wrapper"><img src="/developerworks/maverick/image/user/user-icon.png" alt="" class="profile-picture round"><time data-original="1289556000000">12 Nov 2010</time><div class="name"><a href="https://www.ibm.com/developerworks/community/profiles/user/ValentinBrasov">ValentinBrasov</a></div><div class="wrapper"><div class="content">About the problem exposed in listing 12 (that the account is updated, but the trade is not persisted): that does not happen because updateAcct(trade) is not called through the proxy that spring puts in front of spring beans (in order to apply its AOP for transaction management and other concerns), so updateAcct(trade) is included in the same transaction that is started for insertTrade(TradeData trade). So the result of that code is that really all the work is rolled back (both the persistence of the trade and the update of the account)!</div><span class="actions"><button class="action reply" type="button">Reply</button><span class="separator">·</span><button class="action upvote"><span class="upvote-count">0</span><i class="fa fa-thumbs-up"></i></button><span class="separator">·</span><a class="action reply" href="/developerworks/community/report?lang=en&amp;referingURL=https%3A%2F%2Fwww.ibm.com%2Fdeveloperworks%2Flibrary%2Fj-ts1%2F&amp;mymessage=Comment%3A%20About%20the%20problem%20exposed%20in%20listing%2012%20(that%20the%20account%20is%20updated%2C%20but%20the%20trade%20is%20not%20persisted)%3A%20that%20does%20not%20happen%20because%20updateAcct(trade)%20is%20not%20called%20through%20the%20proxy%20that%20spring%20puts%20in%20front%20of%20spring%20beans%20(in%20order%20to%20apply%20its%20AOP%20for%20transaction%20management%20and%20other%20concerns)%2C%20so%20updateAcct(trade)%20is%20included%20in%20the%20same%20transaction%20that%20is%20started%20for%20insertTrade(TradeData%20trade).%20So%20the%20result%20of%20that%20code%20is%20that%20really%20all%20the%20work%20is%20rolled%20back%20(both%20the%20persistence%20of%20the%20trade%20and%20the%20update%20of%20the%20account)!%0DPosted%20by%20ValentinBrasov%20on%2012%20Nov%202010%0D%0D---%20Add%20any%20comments%20below%20this%20line%20---" target="_blank">Report Abuse<i class="fa image" style="background-image: url(&quot;/developerworks/maverick/image/report-abuse.png&quot;);"></i></a></span></div></div><ul class="child-comments"></ul></li><li data-id="18290" class="comment"><div class="comment-wrapper"><img src="/developerworks/maverick/image/user/user-icon.png" alt="" class="profile-picture round"><time data-original="1289469600000">11 Nov 2010</time><div class="name"><a href="https://www.ibm.com/developerworks/community/profiles/user/bzaidi">bzaidi</a></div><div class="wrapper"><div class="content">Excellent article but i am unable to understand the Listing 7 portion which tells in case of ORM's, it behaves differently. Over-all a nice article to read.</div><span class="actions"><button class="action reply" type="button">Reply</button><span class="separator">·</span><button class="action upvote"><span class="upvote-count">0</span><i class="fa fa-thumbs-up"></i></button><span class="separator">·</span><a class="action reply" href="/developerworks/community/report?lang=en&amp;referingURL=https%3A%2F%2Fwww.ibm.com%2Fdeveloperworks%2Flibrary%2Fj-ts1%2F&amp;mymessage=Comment%3A%20Excellent%20article%20but%20i%20am%20unable%20to%20understand%20the%20Listing%207%20portion%20which%20tells%20in%20case%20of%20ORM's%2C%20it%20behaves%20differently.%20Over-all%20a%20nice%20article%20to%20read.%0DPosted%20by%20bzaidi%20on%2011%20Nov%202010%0D%0D---%20Add%20any%20comments%20below%20this%20line%20---" target="_blank">Report Abuse<i class="fa image" style="background-image: url(&quot;/developerworks/maverick/image/report-abuse.png&quot;);"></i></a></span></div></div><ul class="child-comments"></ul></li><li data-id="18289" class="comment"><div class="comment-wrapper"><img src="/developerworks/maverick/image/user/user-icon.png" alt="" class="profile-picture round"><time data-original="1262599200000">04 Jan 2010</time><div class="name"><a href="https://www.ibm.com/developerworks/community/profiles/user/fakeid">fakeid</a></div><div class="wrapper"><div class="content">Actually, regarding the readOnly and the exception being thrown in case of a updating transaction, this is only partially correct. Depending on the jdbc driver, different things might happen. The jdbc spec only states it is a hint for optimization. As such, one can argue that drivers that throw exceptions are actually stretching the spec a bit. Anyway, in my experience, with many jdbc drivers (jtds for sybase) the transaction will update the db silently.\n\nAlso, if you have a @Transactional(REQIURED) class that calls a @Transactional(REQUIRED, readOnly=true), the read only flag will be ignored, as one is not allowed to set read only on a connection object during a transaction.\n\nA bit surprised that developerworks have not caught this before publishing the article. Other than that, it is an interesting read.</div><span class="actions"><button class="action reply" type="button">Reply</button><span class="separator">·</span><button class="action upvote"><span class="upvote-count">0</span><i class="fa fa-thumbs-up"></i></button><span class="separator">·</span><a class="action reply" href="/developerworks/community/report?lang=en&amp;referingURL=https%3A%2F%2Fwww.ibm.com%2Fdeveloperworks%2Flibrary%2Fj-ts1%2F&amp;mymessage=Comment%3A%20Actually%2C%20regarding%20the%20readOnly%20and%20the%20exception%20being%20thrown%20in%20case%20of%20a%20updating%20transaction%2C%20this%20is%20only%20partially%20correct.%20Depending%20on%20the%20jdbc%20driver%2C%20different%20things%20might%20happen.%20The%20jdbc%20spec%20only%20states%20it%20is%20a%20hint%20for%20optimization.%20As%20such%2C%20one%20can%20argue%20that%20drivers%20that%20throw%20exceptions%20are%20actually%20stretching%20the%20spec%20a%20bit.%20Anyway%2C%20in%20my%20experience%2C%20with%20many%20jdbc%20drivers%20(jtds%20for%20sybase)%20the%20transaction%20will%20update%20the%20db%20silently.%5Cn%5CnAlso%2C%20if%20you%20have%20a%20%40Transactional(REQIURED)%20class%20that%20calls%20a%20%40Transactional(REQUIRED%2C%20readOnly%3Dtrue)%2C%20the%20read%20only%20flag%20will%20be%20ignored%2C%20as%20one%20is%20not%20allowed%20to%20set%20read%20only%20on%20a%20connection%20object%20during%20a%20transaction.%5Cn%5CnA%20bit%20surprised%20that%20developerworks%20have%20not%20caught%20this%20before%20publishing%20the%20article.%20Other%20than%20that%2C%20it%20is%20an%20interesting%20read.%0DPosted%20by%20fakeid%20on%2004%20Jan%202010%0D%0D---%20Add%20any%20comments%20below%20this%20line%20---" target="_blank">Report Abuse<i class="fa image" style="background-image: url(&quot;/developerworks/maverick/image/report-abuse.png&quot;);"></i></a></span></div></div><ul class="child-comments"></ul></li><li data-id="18288" class="comment"><div class="comment-wrapper"><img src="/developerworks/maverick/image/user/user-icon.png" alt="" class="profile-picture round"><time data-original="1254556800000">03 Oct 2009</time><div class="name"><a href="https://www.ibm.com/developerworks/community/profiles/user/fakeid">fakeid</a></div><div class="wrapper"><div class="content">One of the worst articles that I ever have read at the DeveloperWorks. It is based on way too many silent assumptions. For example that JDBC connection used is in auto-commit mode (and article indirectly attributes this mode to Database rather to JDBC driver). Or that the method from listing 5 executes outside of any existing transaction. And so on, and so on.</div><span class="actions"><button class="action reply" type="button">Reply</button><span class="separator">·</span><button class="action upvote"><span class="upvote-count">0</span><i class="fa fa-thumbs-up"></i></button><span class="separator">·</span><a class="action reply" href="/developerworks/community/report?lang=en&amp;referingURL=https%3A%2F%2Fwww.ibm.com%2Fdeveloperworks%2Flibrary%2Fj-ts1%2F&amp;mymessage=Comment%3A%20One%20of%20the%20worst%20articles%20that%20I%20ever%20have%20read%20at%20the%20DeveloperWorks.%20It%20is%20based%20on%20way%20too%20many%20silent%20assumptions.%20For%20example%20that%20JDBC%20connection%20used%20is%20in%20auto-commit%20mode%20(and%20article%20indirectly%20attributes%20this%20mode%20to%20Database%20rather%20to%20JDBC%20driver).%20Or%20that%20the%20method%20from%20listing%205%20executes%20outside%20of%20any%20existing%20transaction.%20And%20so%20on%2C%20and%20so%20on.%0DPosted%20by%20fakeid%20on%2003%20Oct%202009%0D%0D---%20Add%20any%20comments%20below%20this%20line%20---" target="_blank">Report Abuse<i class="fa image" style="background-image: url(&quot;/developerworks/maverick/image/report-abuse.png&quot;);"></i></a></span></div></div><ul class="child-comments"></ul></li></ul><div class="no-comments no-data"><i class="fa fa-comments fa-2x"></i><br>Be the first to add a comment</div></div></div>
</div>
<!-- INLINE_COMMENTS_END -->                                        <!-- CENTER_6_4_CONTENT_COLUMN_END -->
                                    </div>
</body>
</html>