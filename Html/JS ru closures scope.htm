<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<title>JS ru closures scope</title>
    <link rel="stylesheet" href="../Guides/grey.css">
    <style type="text/css">
		div.task__answer-content {
			border: 1px solid #920000;
		}
    </style>
</head>
<body>
<a href="https://github.com/azat-io/you-dont-know-js-ru">you-dont-know-js-ru</a>
<a href="http://javascript.ru/basic/closure">src1</a>
<a href="https://learn.javascript.ru/functions-closures">src2</a>
<a href="http://dklab.ru/chicken/nablas/39.html">one more ru lesson</a>
<h2>Замыкания, область видимости</h2>
<h2>Глобальный объект</h2>
<div class="content"><article itemscope="" itemtype="http://schema.org/TechArticle"><meta itemprop="name" content="Глобальный объект"><div itemprop="author" itemscope="" itemtype="http://schema.org/Person"><meta itemprop="email" content="iliakan@gmail.com"><meta itemprop="name" content="Ilya Kantor"></div><div itemprop="articleBody"><p class="cye-lm-tag">Механизм работы функций и переменных в JavaScript очень отличается от большинства языков.</p>
<p class="cye-lm-tag">Чтобы его понять, мы в этой главе рассмотрим переменные и функции в глобальной области. А в следующей – пойдём дальше.</p>
<cut>
<h2><a class="main__anchor" name="глобальный-объект" href="#глобальный-объект">Глобальный объект</a></h2><p class="cye-lm-tag"><em>Глобальными</em> называют переменные и функции, которые не находятся внутри какой-то функции. То есть, иными словами, если переменная или функция не находятся внутри конструкции <code>function</code>, то они – «глобальные».</p>
<p class="cye-lm-tag"><strong>В JavaScript все глобальные переменные и функции являются свойствами специального объекта, который называется <em>«глобальный объект»</em> (<code>global object</code>).</strong></p>
<p class="cye-lm-tag">В браузере этот объект явно доступен под именем <code>window</code>. Объект <code>window</code> одновременно является глобальным объектом и содержит ряд свойств и методов для работы с окном браузера, но нас здесь интересует только его роль как глобального объекта.</p>
<p class="cye-lm-tag">В других окружениях, например Node.JS, глобальный объект может быть недоступен в явном виде, но суть происходящего от этого не изменяется, поэтому далее для обозначения глобального объекта мы будем использовать <code>"window"</code>.</p>
<p class="cye-lm-tag"><strong>Присваивая или читая глобальную переменную, мы, фактически, работаем со свойствами <code>window</code>.</strong></p>
<p class="cye-lm-tag">Например:</p>
<div data-trusted="0" class="code-example" data-no-strict="1" data-refresh="1" data-prism-done="1">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers  language-javascript"><code class=" language-javascript"><span class="token keyword cye-lm-tag">var</span> a <span class="token operator cye-lm-tag">=</span> <span class="token number cye-lm-tag">5</span><span class="token punctuation cye-lm-tag">;</span> <span class="token comment cye-lm-tag" spellcheck="true">// объявление var создаёт свойство window.a</span>
<span class="token function cye-lm-tag">alert</span><span class="token punctuation cye-lm-tag">(</span> window<span class="token punctuation cye-lm-tag">.</span>a <span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span> <span class="token comment cye-lm-tag" spellcheck="true">// 5</span></code><span class="line-numbers-rows cye-lm-tag"><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span></span></pre>
        </div>
      </div>
      
      </div><p class="cye-lm-tag">Создать переменную можно и явным присваиванием в <code>window</code>:</p>
<div data-trusted="0" class="code-example" data-refresh="1" data-prism-done="1">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers  language-javascript"><code class=" language-javascript">window<span class="token punctuation cye-lm-tag">.</span>a <span class="token operator cye-lm-tag">=</span> <span class="token number cye-lm-tag">5</span><span class="token punctuation cye-lm-tag">;</span>
<span class="token function cye-lm-tag">alert</span><span class="token punctuation cye-lm-tag">(</span> a <span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span> <span class="token comment cye-lm-tag" spellcheck="true">// 5</span></code><span class="line-numbers-rows cye-lm-tag"><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span></span></pre>
        </div>
      </div>
      
      </div><h2><a class="main__anchor" name="порядок-инициализации" href="#порядок-инициализации">Порядок инициализации</a></h2><p class="cye-lm-tag">Выполнение скрипта происходит в две фазы:</p>
<ol>
<li>
<p class="cye-lm-tag">На первой фазе происходит инициализация, подготовка к запуску.</p>
<p class="cye-lm-tag">Во время инициализации скрипт сканируется на предмет объявления функций вида <a href="/function-declaration-expression">Function Declaration</a>, а затем – на предмет объявления переменных <code>var</code>. Каждое такое объявление добавляется в <code>window</code>.</p>
<p class="cye-lm-tag"><strong>Функции, объявленные как Function Declaration, создаются сразу работающими, а переменные – равными <code>undefined</code>.</strong></p>
</li>
<li>
<p class="cye-lm-tag">На второй фазе – собственно, выполнение.</p>
<p class="cye-lm-tag">Присваивание (<code>=</code>) значений переменных происходит, когда поток выполнения доходит до соответствующей строчки кода, до этого они <code>undefined</code>.</p>
</li>
</ol>
<p class="cye-lm-tag">В коде ниже указано содержание глобального объекта на момент инициализации и далее последовательно по коду:</p>
<div data-trusted="1" class="code-example" data-highlight-inline="4:27-31,10:36-44" data-prism-done="1">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers  language-javascript"><code class=" language-javascript"><span class="token comment cye-lm-tag" spellcheck="true">// На момент инициализации, до выполнения кода:</span>
<span class="token comment cye-lm-tag" spellcheck="true">// window = { f: function, a: undefined, g: undefined }</span>

<span class="token keyword cye-lm-tag">var</span> a <span class="token operator cye-lm-tag">=</span> <span class="token number cye-lm-tag">5</span><span class="token punctuation cye-lm-tag">;</span>
<span class="token comment cye-lm-tag" spellcheck="true">// window = { f: function, a: 5, g: undefined }</span>

<span class="token keyword cye-lm-tag">function</span> <span class="token function cye-lm-tag">f</span><span class="token punctuation cye-lm-tag">(</span>arg<span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">{</span> <span class="token comment cye-lm-tag" spellcheck="true">/*...*/</span> <span class="token punctuation cye-lm-tag">}</span>
<span class="token comment cye-lm-tag" spellcheck="true">// window = { f: function, a: 5, g: undefined } без изменений, f обработана ранее</span>

<span class="token keyword cye-lm-tag">var</span> g <span class="token operator cye-lm-tag">=</span> <span class="token keyword cye-lm-tag">function</span><span class="token punctuation cye-lm-tag">(</span>arg<span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">{</span> <span class="token comment cye-lm-tag" spellcheck="true">/*...*/</span> <span class="token punctuation cye-lm-tag">}</span><span class="token punctuation cye-lm-tag">;</span>
<span class="token comment cye-lm-tag" spellcheck="true">// window = { f: function, a: 5, g: function }</span></code><span class="line-numbers-rows cye-lm-tag"><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span></span></pre>
        </div>
      </div>
      
      </div><p class="cye-lm-tag">Кстати, тот факт, что к началу выполнения кода переменные и функции <em>уже</em> содержатся в <code>window</code>, можно легко проверить, выведя их:</p>
<div data-trusted="0" class="code-example" data-refresh="1" data-highlight-inline="0:25-29,1:19-28,2:13-25,3:13-22" data-prism-done="1">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers  language-javascript"><code class=" language-javascript"><span class="token function cye-lm-tag">alert</span><span class="token punctuation cye-lm-tag">(</span><span class="token string cye-lm-tag">"a"</span> <span class="token keyword cye-lm-tag">in</span> window<span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span> <span class="token comment cye-lm-tag" spellcheck="true">// true,  т.к. есть свойство window.a</span>
<span class="token function cye-lm-tag">alert</span><span class="token punctuation cye-lm-tag">(</span>a<span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span> <span class="token comment cye-lm-tag" spellcheck="true">// равно undefined,  присваивание будет выполнено далее</span>
<span class="token function cye-lm-tag">alert</span><span class="token punctuation cye-lm-tag">(</span>f<span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span> <span class="token comment cye-lm-tag" spellcheck="true">// function ...,  готовая к выполнению функция</span>
<span class="token function cye-lm-tag">alert</span><span class="token punctuation cye-lm-tag">(</span>g<span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span> <span class="token comment cye-lm-tag" spellcheck="true">// undefined, т.к. это переменная, а не Function Declaration</span>

<span class="token keyword cye-lm-tag">var</span> a <span class="token operator cye-lm-tag">=</span> <span class="token number cye-lm-tag">5</span><span class="token punctuation cye-lm-tag">;</span>
<span class="token keyword cye-lm-tag">function</span> <span class="token function cye-lm-tag">f</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">{</span> <span class="token comment cye-lm-tag" spellcheck="true">/*...*/</span> <span class="token punctuation cye-lm-tag">}</span>
<span class="token keyword cye-lm-tag">var</span> g <span class="token operator cye-lm-tag">=</span> <span class="token keyword cye-lm-tag">function</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">{</span> <span class="token comment cye-lm-tag" spellcheck="true">/*...*/</span> <span class="token punctuation cye-lm-tag">}</span><span class="token punctuation cye-lm-tag">;</span></code><span class="line-numbers-rows cye-lm-tag"><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span></span></pre>
        </div>
      </div>
      
      </div><div class="important important_smart">
            <div class="important__header"><span class="important__type cye-lm-tag">Присвоение переменной без объявления</span></div>
            <div class="important__content"><p class="cye-lm-tag">В старом стандарте JavaScript переменную можно было создать и без объявления <code>var</code>:</p>
<div data-trusted="1" class="code-example" data-prism-done="1">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers  language-javascript"><code class=" language-javascript">a <span class="token operator cye-lm-tag">=</span> <span class="token number cye-lm-tag">5</span><span class="token punctuation cye-lm-tag">;</span>

<span class="token function cye-lm-tag">alert</span><span class="token punctuation cye-lm-tag">(</span> a <span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span> <span class="token comment cye-lm-tag" spellcheck="true">// 5</span></code><span class="line-numbers-rows cye-lm-tag"><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span></span></pre>
        </div>
      </div>
      
      </div><p class="cye-lm-tag">Такое присвоение, как и <code>var a = 5</code>, создает свойство <code>window.a = 5</code>. Отличие от <code>var a = 5</code> – в том, что переменная будет создана не на этапе входа в область видимости, а в момент присвоения.</p>
<p class="cye-lm-tag">Сравните два кода ниже.</p>
<p class="cye-lm-tag">Первый выведет <code>undefined</code>, так как переменная была добавлена в <code>window</code> на фазе инициализации:</p>
<div data-trusted="0" class="code-example" data-refresh="1" data-highlight-block="0-0" data-prism-done="1">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers  language-javascript"><code class=" language-javascript"><span class="token function cye-lm-tag">alert</span><span class="token punctuation cye-lm-tag">(</span> a <span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span> <span class="token comment cye-lm-tag" spellcheck="true">// undefined</span>

<span class="token keyword cye-lm-tag">var</span> a <span class="token operator cye-lm-tag">=</span> <span class="token number cye-lm-tag">5</span><span class="token punctuation cye-lm-tag">;</span></code><span class="line-numbers-rows cye-lm-tag"><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span></span></pre>
        </div>
      </div>
      
      </div><p class="cye-lm-tag">Второй код выведет ошибку, так как переменной ещё не существует:</p>
<div data-trusted="0" class="code-example" data-refresh="1" data-highlight-block="0-0" data-prism-done="1">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers  language-javascript"><code class=" language-javascript"><span class="token function cye-lm-tag">alert</span><span class="token punctuation cye-lm-tag">(</span> a <span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span> <span class="token comment cye-lm-tag" spellcheck="true">// error, a is not defined</span>

a <span class="token operator cye-lm-tag">=</span> <span class="token number cye-lm-tag">5</span><span class="token punctuation cye-lm-tag">;</span></code><span class="line-numbers-rows cye-lm-tag"><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span></span></pre>
        </div>
      </div>
      
      </div><p class="cye-lm-tag">Это, конечно, для общего понимания, мы всегда объявляем переменные через <code>var</code>.</p>
</div></div>
<div class="important important_smart">
            <div class="important__header"><span class="important__type cye-lm-tag">Конструкции <code>for, if...</code> не влияют на видимость переменных</span></div>
            <div class="important__content"><p class="cye-lm-tag">Фигурные скобки, которые используются в <code>for, while, if</code>, в отличие от объявлений функции, имеют «декоративный» характер.</p>
<p class="cye-lm-tag">В JavaScript нет разницы между объявлением вне блока:</p>
<div data-trusted="1" class="code-example" data-highlight-inline="0:0-3" data-prism-done="1">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers  language-javascript"><code class=" language-javascript"><span class="token keyword cye-lm-tag">var</span> i<span class="token punctuation cye-lm-tag">;</span>
<span class="token punctuation cye-lm-tag">{</span>
  i <span class="token operator cye-lm-tag">=</span> <span class="token number cye-lm-tag">5</span><span class="token punctuation cye-lm-tag">;</span>
<span class="token punctuation cye-lm-tag">}</span></code><span class="line-numbers-rows cye-lm-tag"><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span></span></pre>
        </div>
      </div>
      
      </div><p class="cye-lm-tag">…И внутри него:</p>
<div data-trusted="1" class="code-example" data-highlight-inline="2:2-5" data-prism-done="1">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers  language-javascript"><code class=" language-javascript">i <span class="token operator cye-lm-tag">=</span> <span class="token number cye-lm-tag">5</span><span class="token punctuation cye-lm-tag">;</span>
<span class="token punctuation cye-lm-tag">{</span>
  <span class="token keyword cye-lm-tag">var</span> i<span class="token punctuation cye-lm-tag">;</span>
<span class="token punctuation cye-lm-tag">}</span></code><span class="line-numbers-rows cye-lm-tag"><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span></span></pre>
        </div>
      </div>
      
      </div><p class="cye-lm-tag"><strong>Также нет разницы между объявлением в цикле и вне его:</strong></p>
<div data-trusted="0" class="code-example" data-refresh="1" data-highlight-inline="0:5-8" data-prism-done="1">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers  language-javascript"><code class=" language-javascript"><span class="token keyword cye-lm-tag">for</span> <span class="token punctuation cye-lm-tag">(</span><span class="token keyword cye-lm-tag">var</span> i <span class="token operator cye-lm-tag">=</span> <span class="token number cye-lm-tag">0</span><span class="token punctuation cye-lm-tag">;</span> i <span class="token operator cye-lm-tag">&lt;</span> <span class="token number cye-lm-tag">5</span><span class="token punctuation cye-lm-tag">;</span> i<span class="token operator cye-lm-tag">++</span><span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">{</span> <span class="token punctuation cye-lm-tag">}</span></code><span class="line-numbers-rows cye-lm-tag"><span class="cye-lm-tag"></span></span></pre>
        </div>
      </div>
      
      </div><p class="cye-lm-tag">Идентичный по функциональности код:</p>
<div data-trusted="0" class="code-example" data-refresh="1" data-highlight-inline="0:0-6" data-prism-done="1">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers  language-javascript"><code class=" language-javascript"><span class="token keyword cye-lm-tag">var</span> i<span class="token punctuation cye-lm-tag">;</span>
<span class="token keyword cye-lm-tag">for</span> <span class="token punctuation cye-lm-tag">(</span>i <span class="token operator cye-lm-tag">=</span> <span class="token number cye-lm-tag">0</span><span class="token punctuation cye-lm-tag">;</span> i <span class="token operator cye-lm-tag">&lt;</span> <span class="token number cye-lm-tag">5</span><span class="token punctuation cye-lm-tag">;</span> i<span class="token operator cye-lm-tag">++</span><span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">{</span> <span class="token punctuation cye-lm-tag">}</span></code><span class="line-numbers-rows cye-lm-tag"><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span></span></pre>
        </div>
      </div>
      
      </div><p class="cye-lm-tag">В обоих случаях переменная будет создана до выполнения цикла, на стадии инициализации, и ее значение будет сохранено после окончания цикла.</p>
</div></div>
<div class="important important_smart">
            <div class="important__header"><span class="important__type cye-lm-tag">Не важно, где и сколько раз объявлена переменная</span></div>
            <div class="important__content"><p class="cye-lm-tag">Объявлений <code>var</code> может быть сколько угодно:</p>
<div data-trusted="1" class="code-example" data-prism-done="1">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers  language-javascript"><code class=" language-javascript"><span class="token keyword cye-lm-tag">var</span> i <span class="token operator cye-lm-tag">=</span> <span class="token number cye-lm-tag">10</span><span class="token punctuation cye-lm-tag">;</span>

<span class="token keyword cye-lm-tag">for</span> <span class="token punctuation cye-lm-tag">(</span><span class="token keyword cye-lm-tag">var</span> i <span class="token operator cye-lm-tag">=</span> <span class="token number cye-lm-tag">0</span><span class="token punctuation cye-lm-tag">;</span> i <span class="token operator cye-lm-tag">&lt;</span> <span class="token number cye-lm-tag">20</span><span class="token punctuation cye-lm-tag">;</span> i<span class="token operator cye-lm-tag">++</span><span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">{</span>
  <span class="token operator cye-lm-tag">...</span>
<span class="token punctuation cye-lm-tag">}</span>

<span class="token keyword cye-lm-tag">var</span> i <span class="token operator cye-lm-tag">=</span> <span class="token number cye-lm-tag">5</span><span class="token punctuation cye-lm-tag">;</span></code><span class="line-numbers-rows cye-lm-tag"><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span></span></pre>
        </div>
      </div>
      
      </div><p class="cye-lm-tag"><strong>Все <code>var</code> будут обработаны один раз, на фазе инициализации.</strong></p>
<p class="cye-lm-tag">На фазе исполнения объявления <code>var</code> будут проигнорированы: они уже были обработаны. Зато будут выполнены присваивания.</p>
</div></div>
<div class="important important_warn">
            <div class="important__header"><span class="important__type cye-lm-tag">Ошибки при работе с <code>window</code> в IE8-</span></div>
            <div class="important__content"><p class="cye-lm-tag">В старых IE есть две забавные ошибки при работе с переменными в <code>window</code>:</p>
<ol>
<li>
<p class="cye-lm-tag">Переопределение переменной, у которой такое же имя, как и <code>id</code> элемента, приведет к ошибке:</p>
<div data-trusted="1" class="code-example" data-prism-done="1">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="показать" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers  language-markup"><code class=" language-markup"><span class="token tag cye-lm-tag"><span class="token tag cye-lm-tag"><span class="token punctuation cye-lm-tag">&lt;</span>div</span> <span class="token attr-name cye-lm-tag">id</span><span class="token attr-value cye-lm-tag"><span class="token punctuation cye-lm-tag">=</span><span class="token punctuation cye-lm-tag">"</span>a<span class="token punctuation cye-lm-tag">"</span></span><span class="token punctuation cye-lm-tag">&gt;</span></span>...<span class="token tag cye-lm-tag"><span class="token tag cye-lm-tag"><span class="token punctuation cye-lm-tag">&lt;/</span>div</span><span class="token punctuation cye-lm-tag">&gt;</span></span>
<span class="token tag cye-lm-tag"><span class="token tag cye-lm-tag"><span class="token punctuation cye-lm-tag">&lt;</span>script</span><span class="token punctuation cye-lm-tag">&gt;</span></span><span class="token script language-javascript cye-lm-tag">
  a <span class="token operator cye-lm-tag">=</span> <span class="token number cye-lm-tag">5</span><span class="token punctuation cye-lm-tag">;</span> <span class="token comment cye-lm-tag" spellcheck="true">// ошибка в IE8-! Правильно будет "var a = 5"</span>
  <span class="token function cye-lm-tag">alert</span><span class="token punctuation cye-lm-tag">(</span> a <span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span> <span class="token comment cye-lm-tag" spellcheck="true">// никогда не сработает</span>
</span><span class="token tag cye-lm-tag"><span class="token tag cye-lm-tag"><span class="token punctuation cye-lm-tag">&lt;/</span>script</span><span class="token punctuation cye-lm-tag">&gt;</span></span></code><span class="line-numbers-rows cye-lm-tag"><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span></span></pre>
        </div>
      </div>
      
      </div><p class="cye-lm-tag">А если сделать через <code>var</code>, то всё будет хорошо.</p>
<p class="cye-lm-tag">Это была реклама того, что надо везде ставить <code>var</code>.</p>
</li>
<li>
<p class="cye-lm-tag">Ошибка при рекурсии через функцию-свойство <code>window</code>. Следующий код «умрет» в IE8-:</p>
<div data-trusted="1" class="code-example" data-prism-done="1">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="показать" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers  language-markup"><code class=" language-markup"><span class="token tag cye-lm-tag"><span class="token tag cye-lm-tag"><span class="token punctuation cye-lm-tag">&lt;</span>script</span><span class="token punctuation cye-lm-tag">&gt;</span></span><span class="token script language-javascript cye-lm-tag">
  <span class="token comment cye-lm-tag" spellcheck="true">// рекурсия через функцию, явно записанную в window</span>
  window<span class="token punctuation cye-lm-tag">.</span>recurse <span class="token operator cye-lm-tag">=</span> <span class="token keyword cye-lm-tag">function</span><span class="token punctuation cye-lm-tag">(</span>times<span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">{</span>
    <span class="token keyword cye-lm-tag">if</span> <span class="token punctuation cye-lm-tag">(</span>times <span class="token operator cye-lm-tag">!==</span> <span class="token number cye-lm-tag">0</span><span class="token punctuation cye-lm-tag">)</span> <span class="token function cye-lm-tag">recurse</span><span class="token punctuation cye-lm-tag">(</span>times <span class="token operator cye-lm-tag">-</span> <span class="token number cye-lm-tag">1</span><span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span>
  <span class="token punctuation cye-lm-tag">}</span>

  <span class="token function cye-lm-tag">recurse</span><span class="token punctuation cye-lm-tag">(</span><span class="token number cye-lm-tag">13</span><span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span>
</span><span class="token tag cye-lm-tag"><span class="token tag cye-lm-tag"><span class="token punctuation cye-lm-tag">&lt;/</span>script</span><span class="token punctuation cye-lm-tag">&gt;</span></span></code><span class="line-numbers-rows cye-lm-tag"><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span></span></pre>
        </div>
      </div>
      
      </div><p class="cye-lm-tag">Проблема здесь возникает из-за того, что функция напрямую присвоена в <code>window.recurse = ...</code>. Ее не будет при обычном объявлении функции.</p>
<p class="cye-lm-tag"><strong>Этот пример выдаст ошибку только в настоящем IE8!</strong> Не IE9 в режиме эмуляции. Вообще, режим эмуляции позволяет отлавливать где-то 95% несовместимостей и проблем, а для оставшихся 5% вам нужен будет настоящий IE8 в виртуальной машине.</p>
</li>
</ol>
</div></div>
<h2><a class="main__anchor" name="итого" href="#итого">Итого</a></h2><p class="cye-lm-tag">В результате инициализации, к началу выполнения кода:</p>
<ol>
<li>Функции, объявленные как <code>Function Declaration</code>, создаются полностью и готовы к использованию.</li>
<li>Переменные объявлены, но равны <code>undefined</code>. Присваивания выполнятся позже, когда выполнение дойдет до них.</li>
</ol>
</cut></div></article><div class="tasks"><h2 id="tasks" class="tasks__title"><a href="#tasks" class="main__anchor main__anchor_noicon tasks__title-anchor">Задачи</a></h2><div class="task tasks__task"><div class="task__header"><div class="task__title-wrap"><h3 class="task__title"><a href="#window-и-переменная" name="window-и-переменная" class="main__anchor">Window и переменная</a></h3><a href="/task/window-and-variable" target="_blank" class="task__open-link"></a></div><div class="task__header-note"><span title="Насколько эта задача важна для освоения материала, от 1 до 5" class="task__importance cye-lm-tag">важность: 5</span></div><div class="task__content"><p class="cye-lm-tag">Каков будет результат кода?</p>
<div data-trusted="1" class="code-example" data-prism-done="1">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers  language-javascript"><code class=" language-javascript"><span class="token keyword cye-lm-tag">if</span> <span class="token punctuation cye-lm-tag">(</span><span class="token string cye-lm-tag">"a"</span> <span class="token keyword cye-lm-tag">in</span> window<span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">{</span>
  <span class="token keyword cye-lm-tag">var</span> a <span class="token operator cye-lm-tag">=</span> <span class="token number cye-lm-tag">1</span><span class="token punctuation cye-lm-tag">;</span>
<span class="token punctuation cye-lm-tag">}</span>
<span class="token function cye-lm-tag">alert</span><span class="token punctuation cye-lm-tag">(</span> a <span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span></code><span class="line-numbers-rows cye-lm-tag"><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span></span></pre>
        </div>
      </div>
      
      </div><div class="task__answer"><div class="task__answer-content"><p class="cye-lm-tag">Ответ: <code>1</code>.</p>
<div data-trusted="0" class="code-example" data-no-strict="1" data-refresh="1" data-prism-done="1">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers  language-javascript"><code class=" language-javascript"><span class="token keyword cye-lm-tag">if</span> <span class="token punctuation cye-lm-tag">(</span><span class="token string cye-lm-tag">"a"</span> <span class="token keyword cye-lm-tag">in</span> window<span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">{</span>
  <span class="token keyword cye-lm-tag">var</span> a <span class="token operator cye-lm-tag">=</span> <span class="token number cye-lm-tag">1</span><span class="token punctuation cye-lm-tag">;</span>
<span class="token punctuation cye-lm-tag">}</span>
<span class="token function cye-lm-tag">alert</span><span class="token punctuation cye-lm-tag">(</span> a <span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span></code><span class="line-numbers-rows cye-lm-tag"><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span></span></pre>
        </div>
      </div>
      
      </div><p class="cye-lm-tag">Посмотрим, почему.</p>
<p class="cye-lm-tag">На стадии подготовки к выполнению, из <code>var a</code> создается <code>window.a</code>:</p>
<div data-trusted="1" class="code-example" data-prism-done="1">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers  language-javascript"><code class=" language-javascript"><span class="token comment cye-lm-tag" spellcheck="true">// window = {a:undefined}</span>

<span class="token keyword cye-lm-tag">if</span> <span class="token punctuation cye-lm-tag">(</span><span class="token string cye-lm-tag">"a"</span> <span class="token keyword cye-lm-tag">in</span> window<span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">{</span> <span class="token comment cye-lm-tag" spellcheck="true">// в if видно что window.a уже есть</span>
  <span class="token keyword cye-lm-tag">var</span> a <span class="token operator cye-lm-tag">=</span> <span class="token number cye-lm-tag">1</span><span class="token punctuation cye-lm-tag">;</span> <span class="token comment cye-lm-tag" spellcheck="true">// поэтому эта строка сработает</span>
<span class="token punctuation cye-lm-tag">}</span>
<span class="token function cye-lm-tag">alert</span><span class="token punctuation cye-lm-tag">(</span> a <span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span></code><span class="line-numbers-rows cye-lm-tag"><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span></span></pre>
        </div>
      </div>
      
      </div><p class="cye-lm-tag">В результате <code>a</code> становится <code>1</code>.</p>
</div></div></div></div></div><div class="task tasks__task"><div class="task__header"><div class="task__title-wrap"><h3 class="task__title"><a href="#window-и-переменная-2" name="window-и-переменная-2" class="main__anchor">Window и переменная 2</a></h3><a href="/task/window-and-variable-2" target="_blank" class="task__open-link"></a></div><div class="task__header-note"><span title="Насколько эта задача важна для освоения материала, от 1 до 5" class="task__importance cye-lm-tag">важность: 5</span></div><div class="task__content"><p class="cye-lm-tag">Каков будет результат (перед <code>a</code> нет <code>var</code>)?</p>
<div data-trusted="1" class="code-example" data-prism-done="1">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers  language-javascript"><code class=" language-javascript"><span class="token keyword cye-lm-tag">if</span> <span class="token punctuation cye-lm-tag">(</span><span class="token string cye-lm-tag">"a"</span> <span class="token keyword cye-lm-tag">in</span> window<span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">{</span>
  a <span class="token operator cye-lm-tag">=</span> <span class="token number cye-lm-tag">1</span><span class="token punctuation cye-lm-tag">;</span>
<span class="token punctuation cye-lm-tag">}</span>
<span class="token function cye-lm-tag">alert</span><span class="token punctuation cye-lm-tag">(</span> a <span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span></code><span class="line-numbers-rows cye-lm-tag"><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span></span></pre>
        </div>
      </div>
      
      </div><div class="task__answer"><div class="task__answer-content"><p class="cye-lm-tag">Ответ: <strong>ошибка</strong>.</p>
<p class="cye-lm-tag">Переменной <code>a</code> нет, так что условие <code>"a" in window</code> не выполнится. В результате на последней строчке – обращение к неопределенной переменной.</p>
<div data-trusted="0" class="code-example" data-refresh="1" data-prism-done="1">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers  language-javascript"><code class=" language-javascript"><span class="token keyword cye-lm-tag">if</span> <span class="token punctuation cye-lm-tag">(</span><span class="token string cye-lm-tag">"a"</span> <span class="token keyword cye-lm-tag">in</span> window<span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">{</span>
  a <span class="token operator cye-lm-tag">=</span> <span class="token number cye-lm-tag">1</span><span class="token punctuation cye-lm-tag">;</span>
<span class="token punctuation cye-lm-tag">}</span>
<span class="token function cye-lm-tag">alert</span><span class="token punctuation cye-lm-tag">(</span> a <span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span> <span class="token comment cye-lm-tag" spellcheck="true">// &lt;-- error!</span></code><span class="line-numbers-rows cye-lm-tag"><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span></span></pre>
        </div>
      </div>
      
      </div></div></div></div></div></div><div class="task tasks__task"><div class="task__header"><div class="task__title-wrap"><h3 class="task__title"><a href="#window-и-переменная-3" name="window-и-переменная-3" class="main__anchor">Window и переменная 3</a></h3><a href="/task/window-and-variable-3" target="_blank" class="task__open-link"></a></div><div class="task__header-note"><span title="Насколько эта задача важна для освоения материала, от 1 до 5" class="task__importance cye-lm-tag">важность: 5</span></div><div class="task__content"><p class="cye-lm-tag">Каков будет результат (перед <code>a</code> нет <code>var</code>, а ниже есть)?</p>
<div data-trusted="1" class="code-example" data-prism-done="1">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers  language-javascript"><code class=" language-javascript"><span class="token keyword cye-lm-tag">if</span> <span class="token punctuation cye-lm-tag">(</span><span class="token string cye-lm-tag">"a"</span> <span class="token keyword cye-lm-tag">in</span> window<span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">{</span>
  a <span class="token operator cye-lm-tag">=</span> <span class="token number cye-lm-tag">1</span><span class="token punctuation cye-lm-tag">;</span>
<span class="token punctuation cye-lm-tag">}</span>
<span class="token keyword cye-lm-tag">var</span> a<span class="token punctuation cye-lm-tag">;</span>

<span class="token function cye-lm-tag">alert</span><span class="token punctuation cye-lm-tag">(</span> a <span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span></code><span class="line-numbers-rows cye-lm-tag"><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span></span></pre>
        </div>
      </div>
      
      </div><div class="task__answer"><div class="task__answer-content"><p class="cye-lm-tag">Ответ: <code>1</code>.</p>
<p class="cye-lm-tag">Переменная <code>a</code> создается до начала выполнения кода, так что условие <code>"a" in window</code> выполнится и сработает <code>a = 1</code>.</p>
<div data-trusted="0" class="code-example" data-no-strict="1" data-refresh="1" data-prism-done="1">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers  language-javascript"><code class=" language-javascript"><span class="token keyword cye-lm-tag">if</span> <span class="token punctuation cye-lm-tag">(</span><span class="token string cye-lm-tag">"a"</span> <span class="token keyword cye-lm-tag">in</span> window<span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">{</span>
  a <span class="token operator cye-lm-tag">=</span> <span class="token number cye-lm-tag">1</span><span class="token punctuation cye-lm-tag">;</span>
<span class="token punctuation cye-lm-tag">}</span>
<span class="token keyword cye-lm-tag">var</span> a<span class="token punctuation cye-lm-tag">;</span>

<span class="token function cye-lm-tag">alert</span><span class="token punctuation cye-lm-tag">(</span> a <span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span> <span class="token comment cye-lm-tag" spellcheck="true">// 1</span></code><span class="line-numbers-rows cye-lm-tag"><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span></span></pre>
        </div>
      </div>
      
      </div></div></div></div></div></div></div><div class="banner-bottom" style="display: block;"><a rel="nofollow" href="https://ad.doubleclick.net/ddm/jump/N366601.1915072JAVASCRIPT.RU/B9719141.132291290;sz=200x200;ord=[timestamp]?" class="banner-bottom__link" luuktvo="" hidden=""><div class="banner-bottom__logo"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 242 44.36" enable-background="new 0 0 242 44.36"><g fill="#2988B5"><path d="M79.396 38.227l-6.392-25.194h3.439l2.991 12.746c.747 3.14 1.42 6.28 1.869 8.71h.075c.411-2.504 1.195-5.494 2.055-8.746l3.365-12.71h3.401l3.066 12.784c.71 2.99 1.383 5.98 1.757 8.635h.075c.522-2.766 1.233-5.568 2.018-8.709l3.327-12.71h3.327l-7.141 25.194h-3.401l-3.177-13.119c-.785-3.216-1.308-5.683-1.644-8.225h-.076c-.449 2.505-1.009 4.973-1.943 8.225l-3.589 13.119h-3.402zM107.385 29.778c.075 4.448 2.916 6.28 6.206 6.28 2.354 0 3.774-.412 5.007-.934l.562 2.354c-1.159.523-3.141 1.122-6.018 1.122-5.569 0-8.897-3.664-8.897-9.122 0-5.455 3.215-9.756 8.485-9.756 5.907 0 7.476 5.196 7.476 8.522 0 .673-.075 1.197-.111 1.533h-12.71zm9.644-2.354c.038-2.093-.859-5.346-4.56-5.346-3.327 0-4.785 3.065-5.045 5.346h9.605zM124.128 38.227c.074-1.233.149-3.065.149-4.673v-21.867h3.252v11.364h.074c1.159-2.02 3.254-3.328 6.168-3.328 4.487 0 7.664 3.738 7.626 9.234 0 6.465-4.075 9.68-8.111 9.68-2.617 0-4.71-1.008-6.055-3.4h-.113l-.149 2.99h-2.841zm3.401-7.252c0 .411.074.822.149 1.195.637 2.281 2.542 3.851 4.934 3.851 3.44 0 5.497-2.803 5.497-6.952 0-3.626-1.871-6.728-5.384-6.728-2.242 0-4.335 1.533-5.009 4.037-.074.374-.188.822-.188 1.347v3.25zM145.465 32.358c1.532.784 3.889 1.569 6.317 1.569 2.616 0 4-1.084 4-2.729 0-1.57-1.195-2.467-4.225-3.551-4.187-1.458-6.914-3.775-6.914-7.439 0-4.298 3.587-7.588 9.53-7.588 2.842 0 4.935.599 6.431 1.271l-1.271 4.599c-1.01-.486-2.803-1.197-5.271-1.197-2.467 0-3.664 1.123-3.664 2.43 0 1.608 1.422 2.318 4.674 3.553 4.448 1.644 6.541 3.961 6.541 7.512 0 4.225-3.253 7.813-10.167 7.813-2.878 0-5.719-.748-7.141-1.532l1.16-4.711zM171.44 14.715v5.232h4.074v4.188h-4.074v6.615c0 2.205.523 3.216 2.242 3.216.71 0 1.271-.075 1.683-.149l.036 4.297c-.746.3-2.093.487-3.7.487-1.83 0-3.363-.637-4.261-1.571-1.048-1.084-1.569-2.841-1.569-5.419v-7.476h-2.431v-4.188h2.431v-3.961l5.569-1.271zM196.669 28.883c0 6.689-4.748 9.754-9.644 9.754-5.347 0-9.458-3.512-9.458-9.419s3.887-9.681 9.756-9.681c5.608 0 9.346 3.85 9.346 9.346zm-13.233.185c0 3.141 1.309 5.494 3.737 5.494 2.206 0 3.626-2.204 3.626-5.494 0-2.729-1.046-5.494-3.626-5.494-2.728 0-3.737 2.803-3.737 5.494zM200.179 25.967c0-2.691-.075-4.449-.15-6.02h4.896l.186 3.363h.149c.937-2.653 3.18-3.774 4.935-3.774.523 0 .786 0 1.197.075v5.346c-.411-.074-.898-.149-1.533-.149-2.093 0-3.515 1.12-3.887 2.878-.074.373-.113.822-.113 1.271v9.27h-5.68v-12.26zM214.379 25.778c0-2.279-.075-4.223-.15-5.831h4.785l.261 2.468h.111c.786-1.159 2.393-2.878 5.532-2.878 2.356 0 4.225 1.196 5.01 3.103h.074c.674-.934 1.495-1.684 2.356-2.206 1.009-.599 2.129-.897 3.476-.897 3.513 0 6.166 2.468 6.166 7.924v10.766h-5.531v-9.943c0-2.652-.859-4.186-2.691-4.186-1.308 0-2.242.896-2.616 1.98-.149.412-.225 1.008-.225 1.457v10.691h-5.533v-10.242c0-2.317-.82-3.887-2.614-3.887-1.458 0-2.317 1.12-2.655 2.055-.187.449-.225.973-.225 1.422v10.652h-5.53v-12.448z"></path></g><path fill="#2988B5" d="M30.947 42.933c.538-.675 1.173-1.412 1.925-2.28l.375-.432c.468-.541.858-.959 1.232-1.365.744-.802 1.388-1.494 2.563-3.096 1.153-1.57 1.899-2.754 1.777-4.781-.059-1.044-.101-1.76-.781-2.6-.409-.505-1.168-1.238-1.973-2.014-.872-.84-1.629-1.64-2.656-2.709-1.028-1.066-2.356-3.792-2.356-3.792-.396-.902-1.135-2.776-1.341-4.519l-3.02-15.482h-8.602l-4.209 19.526-3.726-19.527h-10.155l9.162 44.359h8.554l4.276-19.202 3.782 19.202h3.971l1.202-1.288z"></path><path fill="#F7941E" d="M48.852 2.517c.898-1.041 1.639-1.885 2.247-2.652h-13.646c-.812 1.036-2.459 3.035-3.401 4.808-1.243 2.346-2.266 4.107-2.367 8.427l.045 1.392c0 2.059 1.473 5.083 1.473 5.083.23.536 1.009 1.671 1.508 2.361h-.012l.272.358c1.47 1.685 3.696 3.567 4.678 4.776 1.148 1.418 1.179 2.748 1.241 3.783.166 2.796-.965 4.481-2.175 6.133-1.83 2.496-2.489 2.958-3.898 4.59-.898 1.04-1.638 1.883-2.247 2.646h14.097c.827-1.062 2.004-3.021 2.949-4.804 1.244-2.347 2.268-4.107 2.368-8.424l-.046-1.393c0-2.062-1.473-5.087-1.473-5.087-.23-.536-1.01-1.664-1.509-2.361h.012l-.271-.357c-1.469-1.686-3.697-3.567-4.677-4.776-1.148-1.421-1.18-2.75-1.241-3.784-.166-2.793.965-4.482 2.177-6.133 1.829-2.49 2.487-2.957 3.896-4.586z"></path></svg></div><div class="banner-bottom__slogan">Умная JavaScript IDE<br>за&nbsp;разумные деньги</div></a><a href="#" onclick="localStorage.bannerBottomDisabled=1;this.parentNode.remove();return false" class="banner-bottom__disable">не показывать</a><img src="https://ad.doubleclick.net/ddm/ad/N366601.1915072JAVASCRIPT.RU/B9719141.132291290;sz=200x200;ord=[timestamp];dc_lat=;dc_rdid=;tag_for_child_directed_treatment=?" style="width: 0px; height: 0px; opacity: 0; display: none !important;" hidden=""></div><script>!function(){/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)||screen.width<1024||"bannerBottomDisabled"in localStorage||(localStorage.bannerBottomShownCount||(localStorage.bannerBottomShownCount=1),document.querySelector(".banner-bottom").style.display="block")}();</script></div>
<br><hr>
<h2>Замыкания, функции изнутри</h2>
<div class="content"><article itemscope="" itemtype="http://schema.org/TechArticle"><meta itemprop="name" content="Замыкания, функции изнутри"><div itemprop="author" itemscope="" itemtype="http://schema.org/Person"><meta itemprop="email" content="iliakan@gmail.com"><meta itemprop="name" content="Ilya Kantor"></div><div itemprop="articleBody"><p class="cye-lm-tag">В этой главе мы продолжим рассматривать, как работают переменные, и, как следствие, познакомимся с замыканиями. От глобального объекта мы переходим к работе внутри функций.</p>
<cut>
<h2><a class="main__anchor" name="лексическое-окружение" href="#лексическое-окружение">Лексическое окружение</a></h2><p class="cye-lm-tag">Все переменные внутри функции – это свойства специального внутреннего объекта <code>LexicalEnvironment</code>, который создаётся при её запуске.</p>
<p class="cye-lm-tag">Мы будем называть этот объект «лексическое окружение» или просто «объект переменных».</p>
<p class="cye-lm-tag">При запуске функция создает объект <code>LexicalEnvironment</code>, записывает туда аргументы, функции и переменные. Процесс инициализации выполняется в том же порядке, что и для глобального объекта, который, вообще говоря, является частным случаем лексического окружения.</p>
<p class="cye-lm-tag">В отличие от <code>window</code>, объект <code>LexicalEnvironment</code> является внутренним, он скрыт от прямого доступа.</p>
<h3><a class="main__anchor" name="пример" href="#пример">Пример</a></h3><p class="cye-lm-tag">Посмотрим пример, чтобы лучше понимать, как это работает:</p>
<div data-trusted="1" class="code-example" data-prism-done="1">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers  language-javascript"><code class=" language-javascript"><span class="token keyword cye-lm-tag">function</span> <span class="token function cye-lm-tag">sayHi</span><span class="token punctuation cye-lm-tag">(</span>name<span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">{</span>
  <span class="token keyword cye-lm-tag">var</span> phrase <span class="token operator cye-lm-tag">=</span> <span class="token string cye-lm-tag">"Привет, "</span> <span class="token operator cye-lm-tag">+</span> name<span class="token punctuation cye-lm-tag">;</span>
  <span class="token function cye-lm-tag">alert</span><span class="token punctuation cye-lm-tag">(</span> phrase <span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span>
<span class="token punctuation cye-lm-tag">}</span>

<span class="token function cye-lm-tag">sayHi</span><span class="token punctuation cye-lm-tag">(</span><span class="token string cye-lm-tag">'Вася'</span><span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span></code><span class="line-numbers-rows cye-lm-tag"><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span></span></pre>
        </div>
      </div>
      
      </div><p class="cye-lm-tag">При вызове функции:</p>
<ol>
<li>
<p class="cye-lm-tag">До выполнения первой строчки её кода, на стадии инициализации, интерпретатор создает пустой объект <code>LexicalEnvironment</code> и заполняет его.</p>
<p class="cye-lm-tag">В данном случае туда попадает аргумент <code>name</code> и единственная переменная <code>phrase</code>:</p>
<div data-trusted="1" class="code-example" data-highlight-block="1-1" data-prism-done="1">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers  language-javascript"><code class=" language-javascript"><span class="token keyword cye-lm-tag">function</span> <span class="token function cye-lm-tag">sayHi</span><span class="token punctuation cye-lm-tag">(</span>name<span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">{</span>
  <span class="token comment cye-lm-tag" spellcheck="true">// LexicalEnvironment = { name: 'Вася', phrase: undefined }</span>
  <span class="token keyword cye-lm-tag">var</span> phrase <span class="token operator cye-lm-tag">=</span> <span class="token string cye-lm-tag">"Привет, "</span> <span class="token operator cye-lm-tag">+</span> name<span class="token punctuation cye-lm-tag">;</span>
  <span class="token function cye-lm-tag">alert</span><span class="token punctuation cye-lm-tag">(</span> phrase <span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span>
<span class="token punctuation cye-lm-tag">}</span>

<span class="token function cye-lm-tag">sayHi</span><span class="token punctuation cye-lm-tag">(</span><span class="token string cye-lm-tag">'Вася'</span><span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span></code><span class="line-numbers-rows cye-lm-tag"><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span></span></pre>
        </div>
      </div>
      
      </div></li>
<li>
<p class="cye-lm-tag">Функция выполняется.</p>
<p class="cye-lm-tag">Во время выполнения происходит присвоение локальной переменной <code>phrase</code>, то есть, другими словами, присвоение свойству <code>LexicalEnvironment.phrase</code> нового значения:</p>
<div data-trusted="1" class="code-example" data-highlight-block="4-4" data-prism-done="1">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers  language-javascript"><code class=" language-javascript"><span class="token keyword cye-lm-tag">function</span> <span class="token function cye-lm-tag">sayHi</span><span class="token punctuation cye-lm-tag">(</span>name<span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">{</span>
  <span class="token comment cye-lm-tag" spellcheck="true">// LexicalEnvironment = { name: 'Вася', phrase: undefined }</span>
  <span class="token keyword cye-lm-tag">var</span> phrase <span class="token operator cye-lm-tag">=</span> <span class="token string cye-lm-tag">"Привет, "</span> <span class="token operator cye-lm-tag">+</span> name<span class="token punctuation cye-lm-tag">;</span>

  <span class="token comment cye-lm-tag" spellcheck="true">// LexicalEnvironment = { name: 'Вася', phrase: 'Привет, Вася'}</span>
  <span class="token function cye-lm-tag">alert</span><span class="token punctuation cye-lm-tag">(</span> phrase <span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span>
<span class="token punctuation cye-lm-tag">}</span>

<span class="token function cye-lm-tag">sayHi</span><span class="token punctuation cye-lm-tag">(</span><span class="token string cye-lm-tag">'Вася'</span><span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span></code><span class="line-numbers-rows cye-lm-tag"><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span></span></pre>
        </div>
      </div>
      
      </div></li>
<li>
<p class="cye-lm-tag">В конце выполнения функции объект с переменными обычно выбрасывается и память очищается. В примерах выше так и происходит. Через некоторое время мы рассмотрим более сложные ситуации, при которых объект с переменными сохраняется и после завершения функции.</p>
</li>
</ol>
<div class="important important_smart">
            <div class="important__header"><span class="important__type cye-lm-tag">Тонкости спецификации</span></div>
            <div class="important__content"><p class="cye-lm-tag">Если почитать спецификацию ECMA-262, то мы увидим, что речь идёт о двух объектах: <code>VariableEnvironment</code> и <code>LexicalEnvironment</code>.</p>
<p class="cye-lm-tag">Но там же замечено, что в реализациях эти два объекта могут быть объединены. Так что мы избегаем лишних деталей и используем везде термин <code>LexicalEnvironment</code>, это достаточно точно позволяет описать происходящее.</p>
<p class="cye-lm-tag">Более формальное описание находится в спецификации ECMA-262, секции 10.2-10.5 и 13.</p>
</div></div>
<h2><a class="main__anchor" name="доступ-ко-внешним-переменным" href="#доступ-ко-внешним-переменным">Доступ ко внешним переменным</a></h2><p class="cye-lm-tag">Из функции мы можем обратиться не только к локальной переменной, но и к внешней:</p>
<div data-trusted="1" class="code-example" data-prism-done="1">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers  language-javascript"><code class=" language-javascript"><span class="token keyword cye-lm-tag">var</span> userName <span class="token operator cye-lm-tag">=</span> <span class="token string cye-lm-tag">"Вася"</span><span class="token punctuation cye-lm-tag">;</span>

<span class="token keyword cye-lm-tag">function</span> <span class="token function cye-lm-tag">sayHi</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">{</span>
  <span class="token function cye-lm-tag">alert</span><span class="token punctuation cye-lm-tag">(</span> userName <span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span> <span class="token comment cye-lm-tag" spellcheck="true">// "Вася"</span>
<span class="token punctuation cye-lm-tag">}</span></code><span class="line-numbers-rows cye-lm-tag"><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span></span></pre>
        </div>
      </div>
      
      </div><p class="cye-lm-tag"><strong>Интерпретатор, при доступе к переменной, сначала пытается найти переменную в текущем <code>LexicalEnvironment</code>, а затем, если её нет – ищет во внешнем объекте переменных. В данном случае им является <code>window</code>.</strong></p>
<p class="cye-lm-tag">Такой порядок поиска возможен благодаря тому, что ссылка на внешний объект переменных хранится в специальном внутреннем свойстве функции, которое называется <code>[[Scope]]</code>. Это свойство закрыто от прямого доступа, но знание о нём очень важно для понимания того, как работает JavaScript.</p>
<p class="cye-lm-tag"><strong>При создании функция получает скрытое свойство <code>[[Scope]]</code>, которое ссылается на лексическое окружение, в котором она была создана.</strong></p>
<p class="cye-lm-tag">В примере выше таким окружением является <code>window</code>, так что создаётся свойство:</p>
<div data-trusted="1" class="code-example" data-prism-done="1">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers  language-javascript"><code class=" language-javascript">sayHi<span class="token punctuation cye-lm-tag">.</span><span class="token punctuation cye-lm-tag">[</span><span class="token punctuation cye-lm-tag">[</span>Scope<span class="token punctuation cye-lm-tag">]</span><span class="token punctuation cye-lm-tag">]</span> <span class="token operator cye-lm-tag">=</span> window</code><span class="line-numbers-rows cye-lm-tag"><span class="cye-lm-tag"></span></span></pre>
        </div>
      </div>
      
      </div><p class="cye-lm-tag">Это свойство никогда не меняется. Оно всюду следует за функцией, привязывая её, таким образом, к месту своего рождения.</p>
<p class="cye-lm-tag">При запуске функции её объект переменных <code>LexicalEnvironment</code> получает ссылку на «внешнее лексическое окружение» со значением из <code>[[Scope]]</code>.</p>
<p class="cye-lm-tag">Если переменная не найдена в функции – она будет искаться снаружи.</p>
<p class="cye-lm-tag">Именно благодаря этой механике в примере выше <code>alert(userName)</code> выводит внешнюю переменную. На уровне кода это выглядит как поиск во внешней области видимости, вне функции.</p>
<p class="cye-lm-tag">Если обобщить:</p>
<ul>
<li>Каждая функция при создании получает ссылку <code>[[Scope]]</code> на объект с переменными, в контексте которого была создана.</li>
<li>При запуске функции создаётся новый объект с переменными <code>LexicalEnvironment</code>. Он получает ссылку на внешний объект переменных из <code>[[Scope]]</code>.</li>
<li>При поиске переменных он осуществляется сначала в текущем объекте переменных, а потом – по этой ссылке.</li>
</ul>
<p class="cye-lm-tag">Выглядит настолько просто, что непонятно – зачем вообще говорить об этом <code>[[Scope]]</code>, об объектах переменных. Сказали бы: «Функция читает переменные снаружи» – и всё. Но знание этих деталей позволит нам легко объяснить и понять более сложные ситуации, с которыми мы столкнёмся далее.</p>
<h2><a class="main__anchor" name="всегда-текущее-значение" href="#всегда-текущее-значение">Всегда текущее значение</a></h2><p class="cye-lm-tag">Значение переменной из внешней области берётся всегда текущее. Оно может быть уже не то, что было на момент создания функции.</p>
<p class="cye-lm-tag">Например, в коде ниже функция <code>sayHi</code> берёт <code>phrase</code> из внешней области:</p>
<div data-trusted="1" class="code-example" data-highlight-block="6-6,10-10" data-prism-done="1">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers  language-javascript"><code class=" language-javascript"><span class="token keyword cye-lm-tag">var</span> phrase <span class="token operator cye-lm-tag">=</span> <span class="token string cye-lm-tag">'Привет'</span><span class="token punctuation cye-lm-tag">;</span>

<span class="token keyword cye-lm-tag">function</span> <span class="token function cye-lm-tag">sayHi</span><span class="token punctuation cye-lm-tag">(</span>name<span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">{</span>
  <span class="token function cye-lm-tag">alert</span><span class="token punctuation cye-lm-tag">(</span>phrase <span class="token operator cye-lm-tag">+</span> <span class="token string cye-lm-tag">', '</span> <span class="token operator cye-lm-tag">+</span> name<span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span>
<span class="token punctuation cye-lm-tag">}</span>

<span class="token function cye-lm-tag">sayHi</span><span class="token punctuation cye-lm-tag">(</span><span class="token string cye-lm-tag">'Вася'</span><span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span>  <span class="token comment cye-lm-tag" spellcheck="true">// Привет, Вася (*)</span>

phrase <span class="token operator cye-lm-tag">=</span> <span class="token string cye-lm-tag">'Пока'</span><span class="token punctuation cye-lm-tag">;</span>

<span class="token function cye-lm-tag">sayHi</span><span class="token punctuation cye-lm-tag">(</span><span class="token string cye-lm-tag">'Вася'</span><span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span> <span class="token comment cye-lm-tag" spellcheck="true">// Пока, Вася (**)</span></code><span class="line-numbers-rows cye-lm-tag"><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span></span></pre>
        </div>
      </div>
      
      </div><p class="cye-lm-tag">На момент первого запуска <code>(*)</code>, переменная <code>phrase</code> имела значение <code>'Привет'</code>, а ко второму <code>(**)</code> изменила его на <code>'Пока'</code>.</p>
<p class="cye-lm-tag">Это естественно, ведь для доступа к внешней переменной функция по ссылке <code>[[Scope]]</code> обращается во внешний объект переменных и берёт то значение, которое там есть на момент обращения.</p>
<h2><a class="main__anchor" name="вложенные-функции" href="#вложенные-функции">Вложенные функции</a></h2><p class="cye-lm-tag">Внутри функции можно объявлять не только локальные переменные, но и другие функции.</p>
<p class="cye-lm-tag">К примеру, вложенная функция может помочь лучше организовать код:</p>
<div data-trusted="1" class="code-example" data-highlight-block="5-7" data-prism-done="1">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers  language-javascript"><code class=" language-javascript"><span class="token keyword cye-lm-tag">function</span> <span class="token function cye-lm-tag">sayHiBye</span><span class="token punctuation cye-lm-tag">(</span>firstName<span class="token punctuation cye-lm-tag">,</span> lastName<span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">{</span>

  <span class="token function cye-lm-tag">alert</span><span class="token punctuation cye-lm-tag">(</span> <span class="token string cye-lm-tag">"Привет, "</span> <span class="token operator cye-lm-tag">+</span> <span class="token function cye-lm-tag">getFullName</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span>
  <span class="token function cye-lm-tag">alert</span><span class="token punctuation cye-lm-tag">(</span> <span class="token string cye-lm-tag">"Пока, "</span> <span class="token operator cye-lm-tag">+</span> <span class="token function cye-lm-tag">getFullName</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span>

  <span class="token keyword cye-lm-tag">function</span> <span class="token function cye-lm-tag">getFullName</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">{</span>
      <span class="token keyword cye-lm-tag">return</span> firstName <span class="token operator cye-lm-tag">+</span> <span class="token string cye-lm-tag">" "</span> <span class="token operator cye-lm-tag">+</span> lastName<span class="token punctuation cye-lm-tag">;</span>
    <span class="token punctuation cye-lm-tag">}</span>

<span class="token punctuation cye-lm-tag">}</span>

<span class="token function cye-lm-tag">sayHiBye</span><span class="token punctuation cye-lm-tag">(</span><span class="token string cye-lm-tag">"Вася"</span><span class="token punctuation cye-lm-tag">,</span> <span class="token string cye-lm-tag">"Пупкин"</span><span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span> <span class="token comment cye-lm-tag" spellcheck="true">// Привет, Вася Пупкин ; Пока, Вася Пупкин</span></code><span class="line-numbers-rows cye-lm-tag"><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span></span></pre>
        </div>
      </div>
      
      </div><p class="cye-lm-tag">Здесь, для удобства, создана вспомогательная функция <code>getFullName()</code>.</p>
<p class="cye-lm-tag">Вложенные функции получают <code>[[Scope]]</code> так же, как и глобальные. В нашем случае:</p>
<div data-trusted="1" class="code-example" data-prism-done="1">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers  language-javascript"><code class=" language-javascript">getFullName<span class="token punctuation cye-lm-tag">.</span><span class="token punctuation cye-lm-tag">[</span><span class="token punctuation cye-lm-tag">[</span>Scope<span class="token punctuation cye-lm-tag">]</span><span class="token punctuation cye-lm-tag">]</span> <span class="token operator cye-lm-tag">=</span> объект переменных текущего запуска sayHiBye</code><span class="line-numbers-rows cye-lm-tag"><span class="cye-lm-tag"></span></span></pre>
        </div>
      </div>
      
      </div><p class="cye-lm-tag">Благодаря этому <code>getFullName()</code> получает снаружи <code>firstName</code> и <code>lastName</code>.</p>
<p class="cye-lm-tag">Заметим, что если переменная не найдена во внешнем объекте переменных, то она ищется в ещё более внешнем (через <code>[[Scope]]</code> внешней функции), то есть, такой пример тоже будет работать:</p>
<div data-trusted="1" class="code-example" data-prism-done="1">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers  language-javascript"><code class=" language-javascript"><span class="token keyword cye-lm-tag">var</span> phrase <span class="token operator cye-lm-tag">=</span> <span class="token string cye-lm-tag">'Привет'</span><span class="token punctuation cye-lm-tag">;</span>

<span class="token keyword cye-lm-tag">function</span> <span class="token function cye-lm-tag">say</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">{</span>

  <span class="token keyword cye-lm-tag">function</span> <span class="token function cye-lm-tag">go</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">{</span>
    <span class="token function cye-lm-tag">alert</span><span class="token punctuation cye-lm-tag">(</span> phrase <span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span> <span class="token comment cye-lm-tag" spellcheck="true">// найдёт переменную снаружи</span>
  <span class="token punctuation cye-lm-tag">}</span>

  <span class="token function cye-lm-tag">go</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span>
<span class="token punctuation cye-lm-tag">}</span>

<span class="token function cye-lm-tag">say</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span></code><span class="line-numbers-rows cye-lm-tag"><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span></span></pre>
        </div>
      </div>
      
      </div><h2><a class="main__anchor" name="возврат-функции" href="#возврат-функции">Возврат функции</a></h2><p class="cye-lm-tag">Рассмотрим более «продвинутый» вариант, при котором внутри одной функции создаётся другая и возвращается в качестве результата.</p>
<p class="cye-lm-tag">В разработке интерфейсов это совершенно стандартный приём, функция затем может назначаться как обработчик действий посетителя.</p>
<p class="cye-lm-tag">Здесь мы будем создавать функцию-счётчик, которая считает свои вызовы и возвращает их текущее число.</p>
<p class="cye-lm-tag">В примере ниже <code>makeCounter</code> создает такую функцию:</p>
<div data-trusted="1" class="code-example" data-highlight-block="1-1" data-prism-done="1">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers  language-javascript"><code class=" language-javascript"><span class="token keyword cye-lm-tag">function</span> <span class="token function cye-lm-tag">makeCounter</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">{</span>
  <span class="token keyword cye-lm-tag">var</span> currentCount <span class="token operator cye-lm-tag">=</span> <span class="token number cye-lm-tag">1</span><span class="token punctuation cye-lm-tag">;</span>

  <span class="token keyword cye-lm-tag">return</span> <span class="token keyword cye-lm-tag">function</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">{</span> <span class="token comment cye-lm-tag" spellcheck="true">// (**)</span>
    <span class="token keyword cye-lm-tag">return</span> currentCount<span class="token operator cye-lm-tag">++</span><span class="token punctuation cye-lm-tag">;</span>
  <span class="token punctuation cye-lm-tag">}</span><span class="token punctuation cye-lm-tag">;</span>
<span class="token punctuation cye-lm-tag">}</span>

<span class="token keyword cye-lm-tag">var</span> counter <span class="token operator cye-lm-tag">=</span> <span class="token function cye-lm-tag">makeCounter</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span> <span class="token comment cye-lm-tag" spellcheck="true">// (*)</span>

<span class="token comment cye-lm-tag" spellcheck="true">// каждый вызов увеличивает счётчик и возвращает результат</span>
<span class="token function cye-lm-tag">alert</span><span class="token punctuation cye-lm-tag">(</span> <span class="token function cye-lm-tag">counter</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span> <span class="token comment cye-lm-tag" spellcheck="true">// 1</span>
<span class="token function cye-lm-tag">alert</span><span class="token punctuation cye-lm-tag">(</span> <span class="token function cye-lm-tag">counter</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span> <span class="token comment cye-lm-tag" spellcheck="true">// 2</span>
<span class="token function cye-lm-tag">alert</span><span class="token punctuation cye-lm-tag">(</span> <span class="token function cye-lm-tag">counter</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span> <span class="token comment cye-lm-tag" spellcheck="true">// 3</span>

<span class="token comment cye-lm-tag" spellcheck="true">// создать другой счётчик, он будет независим от первого</span>
<span class="token keyword cye-lm-tag">var</span> counter2 <span class="token operator cye-lm-tag">=</span> <span class="token function cye-lm-tag">makeCounter</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span>
<span class="token function cye-lm-tag">alert</span><span class="token punctuation cye-lm-tag">(</span> <span class="token function cye-lm-tag">counter2</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span> <span class="token comment cye-lm-tag" spellcheck="true">// 1</span></code><span class="line-numbers-rows cye-lm-tag"><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span></span></pre>
        </div>
      </div>
      
      </div><p class="cye-lm-tag">Как видно, мы получили два независимых счётчика <code>counter</code> и <code>counter2</code>, каждый из которых незаметным снаружи образом сохраняет текущее количество вызовов.</p>
<p class="cye-lm-tag">Где? Конечно, во внешней переменной <code>currentCount</code>, которая у каждого счётчика своя.</p>
<p class="cye-lm-tag">Если подробнее описать происходящее:</p>
<ol>
<li>
<p class="cye-lm-tag">В строке <code>(*)</code> запускается <code>makeCounter()</code>. При этом создаётся <code>LexicalEnvironment</code> для переменных текущего вызова. В функции есть одна переменная <code>var currentCount</code>, которая станет свойством этого объекта. Она изначально инициализуется в <code>undefined</code>, затем, в процессе  выполнения, получит значение <code>1</code>:</p>
<div data-trusted="1" class="code-example" data-highlight-block="1-1,5-5" data-prism-done="1">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers  language-javascript"><code class=" language-javascript"><span class="token keyword cye-lm-tag">function</span> <span class="token function cye-lm-tag">makeCounter</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">{</span>
  <span class="token comment cye-lm-tag" spellcheck="true">// LexicalEnvironment = { currentCount: undefined }</span>

  <span class="token keyword cye-lm-tag">var</span> currentCount <span class="token operator cye-lm-tag">=</span> <span class="token number cye-lm-tag">1</span><span class="token punctuation cye-lm-tag">;</span>

  <span class="token comment cye-lm-tag" spellcheck="true">// LexicalEnvironment = { currentCount: 1 }</span>

  <span class="token keyword cye-lm-tag">return</span> <span class="token keyword cye-lm-tag">function</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">{</span> <span class="token comment cye-lm-tag" spellcheck="true">// [[Scope]] -&gt; LexicalEnvironment (**)</span>
    <span class="token keyword cye-lm-tag">return</span> currentCount<span class="token operator cye-lm-tag">++</span><span class="token punctuation cye-lm-tag">;</span>
  <span class="token punctuation cye-lm-tag">}</span><span class="token punctuation cye-lm-tag">;</span>
<span class="token punctuation cye-lm-tag">}</span>

<span class="token keyword cye-lm-tag">var</span> counter <span class="token operator cye-lm-tag">=</span> <span class="token function cye-lm-tag">makeCounter</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span> <span class="token comment cye-lm-tag" spellcheck="true">// (*)</span></code><span class="line-numbers-rows cye-lm-tag"><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span></span></pre>
        </div>
      </div>
      
      </div></li>
<li>
<p class="cye-lm-tag">В процессе выполнения <code>makeCounter()</code> создаёт функцию в строке <code>(**)</code>. При создании эта функция получает внутреннее свойство <code>[[Scope]]</code> со ссылкой на текущий <code>LexicalEnvironment</code>.</p>
</li>
<li>
<p class="cye-lm-tag">Далее вызов <code>makeCounter()</code> завершается и функция <code>(**)</code> возвращается и сохраняется во внешней переменной <code>counter</code> <code>(*)</code>.</p>
</li>
</ol>
<p class="cye-lm-tag">На этом создание «счётчика» завершено.</p>
<p class="cye-lm-tag">Итоговым значением, записанным в переменную <code>counter</code>, является функция:</p>
<div data-trusted="1" class="code-example" data-prism-done="1">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers  language-javascript"><code class=" language-javascript"><span class="token keyword cye-lm-tag">function</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">{</span> <span class="token comment cye-lm-tag" spellcheck="true">// [[Scope]] -&gt; {currentCount: 1}</span>
  <span class="token keyword cye-lm-tag">return</span> currentCount<span class="token operator cye-lm-tag">++</span><span class="token punctuation cye-lm-tag">;</span>
<span class="token punctuation cye-lm-tag">}</span><span class="token punctuation cye-lm-tag">;</span></code><span class="line-numbers-rows cye-lm-tag"><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span></span></pre>
        </div>
      </div>
      
      </div><p class="cye-lm-tag">Возвращённая из <code>makeCounter()</code> функция <code>counter</code> помнит (через <code>[[Scope]]</code>) о том, в каком окружении была создана.</p>
<p class="cye-lm-tag">Это и используется для хранения текущего значения счётчика.</p>
<p class="cye-lm-tag">Далее, когда-нибудь, функция <code>counter</code> будет вызвана. Мы не знаем, когда это произойдёт. Может быть, прямо  сейчас, но, вообще говоря, совсем не факт.</p>
<p class="cye-lm-tag">Эта функция состоит из одной строки: <code>return currentCount++</code>, ни переменных ни параметров в ней нет, поэтому её собственный объект переменных, для краткости назовём его <code>LE</code> –  будет пуст.</p>
<p class="cye-lm-tag">Однако, у неё есть свойство <code>[[Scope]]</code>, которое указывает на внешнее окружение. Чтобы увеличить и вернуть <code>currentCount</code>, интерпретатор ищет в текущем объекте переменных <code>LE</code>, не находит, затем идёт во внешний объект, там находит, изменяет и возвращает новое значение:</p>
<div data-trusted="1" class="code-example" data-prism-done="1">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers  language-javascript"><code class=" language-javascript"><span class="token keyword cye-lm-tag">function</span> <span class="token function cye-lm-tag">makeCounter</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">{</span>
  <span class="token keyword cye-lm-tag">var</span> currentCount <span class="token operator cye-lm-tag">=</span> <span class="token number cye-lm-tag">1</span><span class="token punctuation cye-lm-tag">;</span>

  <span class="token keyword cye-lm-tag">return</span> <span class="token keyword cye-lm-tag">function</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">{</span>
    <span class="token keyword cye-lm-tag">return</span> currentCount<span class="token operator cye-lm-tag">++</span><span class="token punctuation cye-lm-tag">;</span>
  <span class="token punctuation cye-lm-tag">}</span><span class="token punctuation cye-lm-tag">;</span>
<span class="token punctuation cye-lm-tag">}</span>

<span class="token keyword cye-lm-tag">var</span> counter <span class="token operator cye-lm-tag">=</span> <span class="token function cye-lm-tag">makeCounter</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span> <span class="token comment cye-lm-tag" spellcheck="true">// [[Scope]] -&gt; {currentCount: 1}</span>

<span class="token function cye-lm-tag">alert</span><span class="token punctuation cye-lm-tag">(</span> <span class="token function cye-lm-tag">counter</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span> <span class="token comment cye-lm-tag" spellcheck="true">// 1, [[Scope]] -&gt; {currentCount: 1}</span>
<span class="token function cye-lm-tag">alert</span><span class="token punctuation cye-lm-tag">(</span> <span class="token function cye-lm-tag">counter</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span> <span class="token comment cye-lm-tag" spellcheck="true">// 2, [[Scope]] -&gt; {currentCount: 2}</span>
<span class="token function cye-lm-tag">alert</span><span class="token punctuation cye-lm-tag">(</span> <span class="token function cye-lm-tag">counter</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span> <span class="token comment cye-lm-tag" spellcheck="true">// 3, [[Scope]] -&gt; {currentCount: 3}</span></code><span class="line-numbers-rows cye-lm-tag"><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span></span></pre>
        </div>
      </div>
      
      </div><p class="cye-lm-tag"><strong>Переменную во внешней области видимости можно не только читать, но и изменять.</strong></p>
<p class="cye-lm-tag">В примере выше было создано несколько счётчиков. Все они взаимно независимы:</p>
<div data-trusted="1" class="code-example" data-highlight-inline="8:27-46" data-prism-done="1">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers  language-javascript"><code class=" language-javascript"><span class="token keyword cye-lm-tag">var</span> counter <span class="token operator cye-lm-tag">=</span> <span class="token function cye-lm-tag">makeCounter</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span>

<span class="token keyword cye-lm-tag">var</span> counter2 <span class="token operator cye-lm-tag">=</span> <span class="token function cye-lm-tag">makeCounter</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span>

<span class="token function cye-lm-tag">alert</span><span class="token punctuation cye-lm-tag">(</span> <span class="token function cye-lm-tag">counter</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span> <span class="token comment cye-lm-tag" spellcheck="true">// 1</span>
<span class="token function cye-lm-tag">alert</span><span class="token punctuation cye-lm-tag">(</span> <span class="token function cye-lm-tag">counter</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span> <span class="token comment cye-lm-tag" spellcheck="true">// 2</span>
<span class="token function cye-lm-tag">alert</span><span class="token punctuation cye-lm-tag">(</span> <span class="token function cye-lm-tag">counter</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span> <span class="token comment cye-lm-tag" spellcheck="true">// 3</span>

<span class="token function cye-lm-tag">alert</span><span class="token punctuation cye-lm-tag">(</span> <span class="token function cye-lm-tag">counter2</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span> <span class="token comment cye-lm-tag" spellcheck="true">// 1, счётчики независимы</span></code><span class="line-numbers-rows cye-lm-tag"><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span></span></pre>
        </div>
      </div>
      
      </div><p class="cye-lm-tag">Они независимы, потому что при каждом запуске <code>makeCounter</code> создаётся свой объект переменных <code>LexicalEnvironment</code>, со своим свойством <code>currentCount</code>, на который новый счётчик получит ссылку <code>[[Scope]]</code>.</p>
<h2><a class="main__anchor" name="свойства-функции" href="#свойства-функции">Свойства функции</a></h2><p class="cye-lm-tag">Функция в JavaScript является объектом, поэтому можно присваивать свойства прямо к ней, вот так:</p>
<div data-trusted="1" class="code-example" data-prism-done="1">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers  language-javascript"><code class=" language-javascript"><span class="token keyword cye-lm-tag">function</span> <span class="token function cye-lm-tag">f</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">{</span><span class="token punctuation cye-lm-tag">}</span>

f<span class="token punctuation cye-lm-tag">.</span>test <span class="token operator cye-lm-tag">=</span> <span class="token number cye-lm-tag">5</span><span class="token punctuation cye-lm-tag">;</span>
<span class="token function cye-lm-tag">alert</span><span class="token punctuation cye-lm-tag">(</span> f<span class="token punctuation cye-lm-tag">.</span>test <span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span></code><span class="line-numbers-rows cye-lm-tag"><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span></span></pre>
        </div>
      </div>
      
      </div><p class="cye-lm-tag">Свойства функции не стоит путать с переменными и параметрами. Они совершенно никак не связаны. Переменные доступны только внутри функции, они создаются в процессе её выполнения. Это – использование функции «как функции».</p>
<p class="cye-lm-tag">А свойство у функции – доступно отовсюду и всегда. Это – использование функции «как объекта».</p>
<p class="cye-lm-tag">Если хочется привязать значение к функции, то можно им воспользоваться вместо внешних переменных.</p>
<p class="cye-lm-tag">В качестве демонстрации, перепишем пример со счётчиком:</p>
<div data-trusted="1" class="code-example" data-highlight-block="1-4" data-prism-done="1">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers  language-javascript"><code class=" language-javascript"><span class="token keyword cye-lm-tag">function</span> <span class="token function cye-lm-tag">makeCounter</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">{</span>
  <span class="token keyword cye-lm-tag">function</span> <span class="token function cye-lm-tag">counter</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">{</span>
    <span class="token keyword cye-lm-tag">return</span> counter<span class="token punctuation cye-lm-tag">.</span>currentCount<span class="token operator cye-lm-tag">++</span><span class="token punctuation cye-lm-tag">;</span>
  <span class="token punctuation cye-lm-tag">}</span><span class="token punctuation cye-lm-tag">;</span>
  counter<span class="token punctuation cye-lm-tag">.</span>currentCount <span class="token operator cye-lm-tag">=</span> <span class="token number cye-lm-tag">1</span><span class="token punctuation cye-lm-tag">;</span>

  <span class="token keyword cye-lm-tag">return</span> counter<span class="token punctuation cye-lm-tag">;</span>
<span class="token punctuation cye-lm-tag">}</span>

<span class="token keyword cye-lm-tag">var</span> counter <span class="token operator cye-lm-tag">=</span> <span class="token function cye-lm-tag">makeCounter</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span>
<span class="token function cye-lm-tag">alert</span><span class="token punctuation cye-lm-tag">(</span> <span class="token function cye-lm-tag">counter</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span> <span class="token comment cye-lm-tag" spellcheck="true">// 1</span>
<span class="token function cye-lm-tag">alert</span><span class="token punctuation cye-lm-tag">(</span> <span class="token function cye-lm-tag">counter</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span> <span class="token comment cye-lm-tag" spellcheck="true">// 2</span></code><span class="line-numbers-rows cye-lm-tag"><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span></span></pre>
        </div>
      </div>
      
      </div><p class="cye-lm-tag">При запуске пример работает также.</p>
<p class="cye-lm-tag">Принципиальная разница – во внутренней механике и в том, что свойство функции, в отличие от переменной из замыкания – общедоступно, к нему имеет доступ любой, у кого есть объект функции.</p>
<p class="cye-lm-tag">Например, можно взять и поменять счётчик из внешнего кода:</p>
<div data-trusted="1" class="code-example" data-highlight-block="3-3" data-prism-done="1">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers  language-javascript"><code class=" language-javascript"><span class="token keyword cye-lm-tag">var</span> counter <span class="token operator cye-lm-tag">=</span> <span class="token function cye-lm-tag">makeCounter</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span>
<span class="token function cye-lm-tag">alert</span><span class="token punctuation cye-lm-tag">(</span> <span class="token function cye-lm-tag">counter</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span> <span class="token comment cye-lm-tag" spellcheck="true">// 1</span>

counter<span class="token punctuation cye-lm-tag">.</span>currentCount <span class="token operator cye-lm-tag">=</span> <span class="token number cye-lm-tag">5</span><span class="token punctuation cye-lm-tag">;</span>

<span class="token function cye-lm-tag">alert</span><span class="token punctuation cye-lm-tag">(</span> <span class="token function cye-lm-tag">counter</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span> <span class="token comment cye-lm-tag" spellcheck="true">// 5</span></code><span class="line-numbers-rows cye-lm-tag"><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span></span></pre>
        </div>
      </div>
      
      </div><div class="important important_smart">
            <div class="important__header"><span class="important__type cye-lm-tag">Статические переменные</span></div>
            <div class="important__content"><p class="cye-lm-tag">Иногда свойства, привязанные к функции, называют «статическими переменными».</p>
<p class="cye-lm-tag">В некоторых языках программирования можно объявлять переменную, которая сохраняет значение между вызовами функции. В JavaScript ближайший аналог – такое вот свойство функции.</p>
</div></div>
<h2><a class="main__anchor" name="итого-замыкания" href="#итого-замыкания">Итого: замыкания</a></h2><p class="cye-lm-tag"><a href="http://en.wikipedia.org/wiki/Closure_(computer_science)">Замыкание</a> – это функция вместе со всеми внешними переменными, которые ей доступны.</p>
<p class="cye-lm-tag">Таково стандартное определение, которое есть в Wikipedia и большинстве серьёзных источников по программированию. То есть, замыкание – это функция + внешние переменные.</p>
<p class="cye-lm-tag">Тем не менее, в JavaScript есть небольшая терминологическая особенность.</p>
<p class="cye-lm-tag"><strong>Обычно, говоря «замыкание функции», подразумевают не саму эту функцию, а именно внешние переменные.</strong></p>
<p class="cye-lm-tag">Иногда говорят «переменная берётся из замыкания». Это означает – из внешнего объекта переменных.</p>
<div class="important important_smart">
            <div class="important__header"><span class="important__type cye-lm-tag">Что это такое – «понимать замыкания?»</span></div>
            <div class="important__content"><p class="cye-lm-tag">Иногда говорят «Вася молодец, понимает замыкания!». Что это такое – «понимать замыкания», какой смысл обычно вкладывают в эти слова?</p>
<p class="cye-lm-tag">«Понимать замыкания» в JavaScript означает понимать следующие вещи:</p>
<ol>
<li>Все переменные и параметры функций являются свойствами объекта переменных <code>LexicalEnvironment</code>. Каждый запуск функции создает новый такой объект. На верхнем уровне им является «глобальный объект», в браузере – <code>window</code>.</li>
<li>При создании функция получает системное свойство <code>[[Scope]]</code>, которое ссылается на <code>LexicalEnvironment</code>, в котором она была создана.</li>
<li>При вызове функции, куда бы её ни передали в коде – она будет искать переменные сначала у себя, а затем во внешних <code>LexicalEnvironment</code> с места своего «рождения».</li>
</ol>
<p class="cye-lm-tag">В следующих главах мы углубим это понимание дополнительными примерами, а также рассмотрим, что происходит с памятью.</p>
</div></div>
</cut></div></article><div class="tasks"><h2 id="tasks" class="tasks__title"><a href="#tasks" class="main__anchor main__anchor_noicon tasks__title-anchor">Задачи</a></h2><div class="task tasks__task"><div class="task__header"><div class="task__title-wrap"><h3 class="task__title"><a href="#что-выведет-say-в-начале-кода" name="что-выведет-say-в-начале-кода" class="main__anchor">Что выведет say в начале кода?</a></h3><a href="/task/say-phrase-first" target="_blank" class="task__open-link"></a></div><div class="task__header-note"><span title="Насколько эта задача важна для освоения материала, от 1 до 5" class="task__importance cye-lm-tag">важность: 5</span></div><div class="task__content"><p class="cye-lm-tag">Что будет, если вызов <code>say('Вася');</code> стоит в самом-самом начале, в первой строке кода?</p>
<div data-trusted="1" class="code-example" data-highlight-block="0-0" data-prism-done="1">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers  language-javascript"><code class=" language-javascript"><span class="token function cye-lm-tag">say</span><span class="token punctuation cye-lm-tag">(</span><span class="token string cye-lm-tag">'Вася'</span><span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span> <span class="token comment cye-lm-tag" spellcheck="true">// Что выведет? Не будет ли ошибки?</span>

<span class="token keyword cye-lm-tag">var</span> phrase <span class="token operator cye-lm-tag">=</span> <span class="token string cye-lm-tag">'Привет'</span><span class="token punctuation cye-lm-tag">;</span>

<span class="token keyword cye-lm-tag">function</span> <span class="token function cye-lm-tag">say</span><span class="token punctuation cye-lm-tag">(</span>name<span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">{</span>
  <span class="token function cye-lm-tag">alert</span><span class="token punctuation cye-lm-tag">(</span> name <span class="token operator cye-lm-tag">+</span> <span class="token string cye-lm-tag">", "</span> <span class="token operator cye-lm-tag">+</span> phrase <span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span>
<span class="token punctuation cye-lm-tag">}</span></code><span class="line-numbers-rows cye-lm-tag"><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span></span></pre>
        </div>
      </div>
      
      </div><div class="task__answer"><div class="task__answer-content"><p class="cye-lm-tag">Ошибки не будет, выведет <code>"Вася, undefined"</code>.</p>
<div data-trusted="1" class="code-example" data-highlight-block="0-0" data-prism-done="1">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers  language-javascript"><code class=" language-javascript"><span class="token function cye-lm-tag">say</span><span class="token punctuation cye-lm-tag">(</span><span class="token string cye-lm-tag">'Вася'</span><span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span> <span class="token comment cye-lm-tag" spellcheck="true">// Что выведет? Не будет ли ошибки?</span>

<span class="token keyword cye-lm-tag">var</span> phrase <span class="token operator cye-lm-tag">=</span> <span class="token string cye-lm-tag">'Привет'</span><span class="token punctuation cye-lm-tag">;</span>

<span class="token keyword cye-lm-tag">function</span> <span class="token function cye-lm-tag">say</span><span class="token punctuation cye-lm-tag">(</span>name<span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">{</span>
  <span class="token function cye-lm-tag">alert</span><span class="token punctuation cye-lm-tag">(</span> name <span class="token operator cye-lm-tag">+</span> <span class="token string cye-lm-tag">", "</span> <span class="token operator cye-lm-tag">+</span> phrase <span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span>
<span class="token punctuation cye-lm-tag">}</span></code><span class="line-numbers-rows cye-lm-tag"><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span></span></pre>
        </div>
      </div>
      
      </div><p class="cye-lm-tag">Переменная как таковая существует, вот только на момент запуска функции она равна <code>undefined</code>.</p>
</div></div></div></div></div><div class="task tasks__task"><div class="task__header"><div class="task__title-wrap"><h3 class="task__title"><a href="#в-какую-переменную-будет-присвоено-значение" name="в-какую-переменную-будет-присвоено-значение" class="main__anchor">В какую переменную будет присвоено значение?</a></h3><a href="/task/which-value-is-modified" target="_blank" class="task__open-link"></a></div><div class="task__header-note"><span title="Насколько эта задача важна для освоения материала, от 1 до 5" class="task__importance cye-lm-tag">важность: 5</span></div><div class="task__content"><p class="cye-lm-tag">Каков будет результат выполнения этого кода?</p>
<div data-trusted="1" class="code-example" data-prism-done="1">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers  language-javascript"><code class=" language-javascript"><span class="token keyword cye-lm-tag">var</span> value <span class="token operator cye-lm-tag">=</span> <span class="token number cye-lm-tag">0</span><span class="token punctuation cye-lm-tag">;</span>

<span class="token keyword cye-lm-tag">function</span> <span class="token function cye-lm-tag">f</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">{</span>
  <span class="token keyword cye-lm-tag">if</span> <span class="token punctuation cye-lm-tag">(</span><span class="token number cye-lm-tag">1</span><span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">{</span>
    value <span class="token operator cye-lm-tag">=</span> <span class="token boolean cye-lm-tag">true</span><span class="token punctuation cye-lm-tag">;</span>
  <span class="token punctuation cye-lm-tag">}</span> <span class="token keyword cye-lm-tag">else</span> <span class="token punctuation cye-lm-tag">{</span>
    <span class="token keyword cye-lm-tag">var</span> value <span class="token operator cye-lm-tag">=</span> <span class="token boolean cye-lm-tag">false</span><span class="token punctuation cye-lm-tag">;</span>
  <span class="token punctuation cye-lm-tag">}</span>

  <span class="token function cye-lm-tag">alert</span><span class="token punctuation cye-lm-tag">(</span> value <span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span>
<span class="token punctuation cye-lm-tag">}</span>

<span class="token function cye-lm-tag">f</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span></code><span class="line-numbers-rows cye-lm-tag"><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span></span></pre>
        </div>
      </div>
      
      </div><p class="cye-lm-tag">Изменится ли внешняя переменная <code>value</code> ?</p>
<p class="cye-lm-tag">P.S. Какими будут ответы, если из строки <code>var value = false</code> убрать <code>var</code>?</p>
<div class="task__answer"><div class="task__answer-content"><p class="cye-lm-tag"><strong>Результатом будет <code>true</code></strong>, т.к. <code>var</code> обработается и переменная будет создана до выполнения кода.</p>
<p class="cye-lm-tag">Соответственно, присвоение <code>value=true</code> сработает на локальной переменной, и <code>alert</code> выведет <code>true</code>.</p>
<p class="cye-lm-tag"><strong>Внешняя переменная не изменится.</strong></p>
<p class="cye-lm-tag">P.S. Если <code>var</code> нет, то в функции переменная не будет найдена. Интерпретатор обратится за ней в <code>window</code> и изменит её там.</p>
<p class="cye-lm-tag"><strong>Так что без <code>var</code> результат будет также <code>true</code>, но внешняя переменная изменится.</strong></p>
</div></div></div></div></div><div class="task tasks__task"><div class="task__header"><div class="task__title-wrap"><h3 class="task__title"><a href="#var-window" name="var-window" class="main__anchor">var window</a></h3><a href="/task/var-window" target="_blank" class="task__open-link"></a></div><div class="task__header-note"><span title="Насколько эта задача важна для освоения материала, от 1 до 5" class="task__importance cye-lm-tag">важность: 5</span></div><div class="task__content"><p class="cye-lm-tag">Каков будет результат выполнения этого кода? Почему?</p>
<div data-trusted="1" class="code-example" data-prism-done="1">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers  language-javascript"><code class=" language-javascript"><span class="token keyword cye-lm-tag">function</span> <span class="token function cye-lm-tag">test</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">{</span>

  <span class="token function cye-lm-tag">alert</span><span class="token punctuation cye-lm-tag">(</span> window <span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span>

  <span class="token keyword cye-lm-tag">var</span> window <span class="token operator cye-lm-tag">=</span> <span class="token number cye-lm-tag">5</span><span class="token punctuation cye-lm-tag">;</span>

  <span class="token function cye-lm-tag">alert</span><span class="token punctuation cye-lm-tag">(</span> window <span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span>
<span class="token punctuation cye-lm-tag">}</span>

<span class="token function cye-lm-tag">test</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span></code><span class="line-numbers-rows cye-lm-tag"><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span></span></pre>
        </div>
      </div>
      
      </div><div class="task__answer"><div class="task__answer-content"><p class="cye-lm-tag">Результатом будет <code>undefined</code>, затем <code>5</code>.</p>
<div data-trusted="1" class="code-example" data-prism-done="1">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers  language-javascript"><code class=" language-javascript"><span class="token keyword cye-lm-tag">function</span> <span class="token function cye-lm-tag">test</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">{</span>

  <span class="token function cye-lm-tag">alert</span><span class="token punctuation cye-lm-tag">(</span> window <span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span>

  <span class="token keyword cye-lm-tag">var</span> window <span class="token operator cye-lm-tag">=</span> <span class="token number cye-lm-tag">5</span><span class="token punctuation cye-lm-tag">;</span>

  <span class="token function cye-lm-tag">alert</span><span class="token punctuation cye-lm-tag">(</span> window <span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span>
<span class="token punctuation cye-lm-tag">}</span>

<span class="token function cye-lm-tag">test</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span></code><span class="line-numbers-rows cye-lm-tag"><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span></span></pre>
        </div>
      </div>
      
      </div><p class="cye-lm-tag">Такой результат получился потому, что <code>window</code> – это глобальная переменная, но ничто не мешает объявить такую же локальную.</p>
<p class="cye-lm-tag">Директива <code>var window</code> обработается до начала выполнения кода функции и будет создана локальная переменная, т.е. свойство <code>LexicalEnvironment.window</code>:</p>
<div data-trusted="1" class="code-example" data-prism-done="1">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers  language-javascript"><code class=" language-javascript">LexicalEnvironment <span class="token operator cye-lm-tag">=</span> <span class="token punctuation cye-lm-tag">{</span>
  window<span class="token punctuation cye-lm-tag">:</span> undefined
<span class="token punctuation cye-lm-tag">}</span></code><span class="line-numbers-rows cye-lm-tag"><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span></span></pre>
        </div>
      </div>
      
      </div><p class="cye-lm-tag">Когда выполнение кода начнется и сработает <code>alert</code>, он выведет уже локальную переменную, которая на тот момент равна <code>undefined</code>.</p>
<p class="cye-lm-tag">Затем сработает присваивание, и второй <code>alert</code> выведет уже <code>5</code>.</p>
</div></div></div></div></div><div class="task tasks__task"><div class="task__header"><div class="task__title-wrap"><h3 class="task__title"><a href="#вызов-на-месте" name="вызов-на-месте" class="main__anchor">Вызов "на месте"</a></h3><a href="/task/call-inplace" target="_blank" class="task__open-link"></a></div><div class="task__header-note"><span title="Насколько эта задача важна для освоения материала, от 1 до 5" class="task__importance cye-lm-tag">важность: 4</span></div><div class="task__content"><p class="cye-lm-tag">Каков будет результат выполнения кода? Почему?</p>
<div data-trusted="1" class="code-example" data-prism-done="1">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers  language-javascript"><code class=" language-javascript"><span class="token keyword cye-lm-tag">var</span> a <span class="token operator cye-lm-tag">=</span> <span class="token number cye-lm-tag">5</span>

<span class="token punctuation cye-lm-tag">(</span><span class="token keyword cye-lm-tag">function</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">{</span>
  <span class="token function cye-lm-tag">alert</span><span class="token punctuation cye-lm-tag">(</span>a<span class="token punctuation cye-lm-tag">)</span>
<span class="token punctuation cye-lm-tag">}</span><span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span></code><span class="line-numbers-rows cye-lm-tag"><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span></span></pre>
        </div>
      </div>
      
      </div><p class="cye-lm-tag">P.S. <em>Подумайте хорошо! Здесь все ошибаются!</em>
P.P.S. <em>Внимание, здесь подводный камень! Ок, вы предупреждены.</em></p>
<div class="task__answer"><div class="task__answer-content"><p class="cye-lm-tag">Результат – <strong>ошибка</strong>. Попробуйте:</p>
<div data-trusted="1" class="code-example" data-prism-done="1">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers  language-javascript"><code class=" language-javascript"><span class="token keyword cye-lm-tag">var</span> a <span class="token operator cye-lm-tag">=</span> <span class="token number cye-lm-tag">5</span>

<span class="token punctuation cye-lm-tag">(</span><span class="token keyword cye-lm-tag">function</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">{</span>
  <span class="token function cye-lm-tag">alert</span><span class="token punctuation cye-lm-tag">(</span>a<span class="token punctuation cye-lm-tag">)</span>
<span class="token punctuation cye-lm-tag">}</span><span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span></code><span class="line-numbers-rows cye-lm-tag"><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span></span></pre>
        </div>
      </div>
      
      </div><p class="cye-lm-tag">Дело в том, что после <code>var a = 5</code> нет точки с запятой.</p>
<p class="cye-lm-tag">JavaScript воспринимает этот код как если бы перевода строки не было:</p>
<div data-trusted="1" class="code-example" data-prism-done="1">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers  language-javascript"><code class=" language-javascript"><span class="token keyword cye-lm-tag">var</span> a <span class="token operator cye-lm-tag">=</span> <span class="token number cye-lm-tag">5</span><span class="token punctuation cye-lm-tag">(</span><span class="token keyword cye-lm-tag">function</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">{</span>
  <span class="token function cye-lm-tag">alert</span><span class="token punctuation cye-lm-tag">(</span>a<span class="token punctuation cye-lm-tag">)</span>
<span class="token punctuation cye-lm-tag">}</span><span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span></code><span class="line-numbers-rows cye-lm-tag"><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span></span></pre>
        </div>
      </div>
      
      </div><p class="cye-lm-tag">То есть, он пытается вызвать <em>функцию</em> <code>5</code>, что и приводит к ошибке.</p>
<p class="cye-lm-tag">Если точку с запятой поставить, все будет хорошо:</p>
<div data-trusted="1" class="code-example" data-prism-done="1">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers  language-javascript"><code class=" language-javascript"><span class="token keyword cye-lm-tag">var</span> a <span class="token operator cye-lm-tag">=</span> <span class="token number cye-lm-tag">5</span><span class="token punctuation cye-lm-tag">;</span>

<span class="token punctuation cye-lm-tag">(</span><span class="token keyword cye-lm-tag">function</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">{</span>
  <span class="token function cye-lm-tag">alert</span><span class="token punctuation cye-lm-tag">(</span>a<span class="token punctuation cye-lm-tag">)</span>
<span class="token punctuation cye-lm-tag">}</span><span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span></code><span class="line-numbers-rows cye-lm-tag"><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span></span></pre>
        </div>
      </div>
      
      </div><p class="cye-lm-tag">Это один из наиболее частых и опасных подводных камней, приводящих к ошибкам тех, кто <em>не</em> ставит точки с запятой.</p>
</div></div></div></div></div><div class="task tasks__task"><div class="task__header"><div class="task__title-wrap"><h3 class="task__title"><a href="#перекрытие-переменной" name="перекрытие-переменной" class="main__anchor">Перекрытие переменной</a></h3><a href="/task/access-outer-variable" target="_blank" class="task__open-link"></a></div><div class="task__header-note"><span title="Насколько эта задача важна для освоения материала, от 1 до 5" class="task__importance cye-lm-tag">важность: 4</span></div><div class="task__content"><p class="cye-lm-tag">Если во внутренней функции есть своя переменная с именем <code>currentCount</code> – можно ли в ней получить <code>currentCount</code> из внешней функции?</p>
<div data-trusted="1" class="code-example" data-prism-done="1">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers  language-javascript"><code class=" language-javascript"><span class="token keyword cye-lm-tag">function</span> <span class="token function cye-lm-tag">makeCounter</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">{</span>
  <span class="token keyword cye-lm-tag">var</span> currentCount <span class="token operator cye-lm-tag">=</span> <span class="token number cye-lm-tag">1</span><span class="token punctuation cye-lm-tag">;</span>

  <span class="token keyword cye-lm-tag">return</span> <span class="token keyword cye-lm-tag">function</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">{</span>
    <span class="token keyword cye-lm-tag">var</span> currentCount<span class="token punctuation cye-lm-tag">;</span>
    <span class="token comment cye-lm-tag" spellcheck="true">// можно ли здесь вывести currentCount из внешней функции (равный 1)?</span>
  <span class="token punctuation cye-lm-tag">}</span><span class="token punctuation cye-lm-tag">;</span>
<span class="token punctuation cye-lm-tag">}</span></code><span class="line-numbers-rows cye-lm-tag"><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span></span></pre>
        </div>
      </div>
      
      </div><div class="task__answer"><div class="task__answer-content"><p class="cye-lm-tag">Нет, нельзя.</p>
<p class="cye-lm-tag">Локальная переменная полностью перекрывает внешнюю.</p>
</div></div></div></div></div><div class="task tasks__task"><div class="task__header"><div class="task__title-wrap"><h3 class="task__title"><a href="#глобальный-счётчик" name="глобальный-счётчик" class="main__anchor">Глобальный счётчик</a></h3><a href="/task/counter-window-variable" target="_blank" class="task__open-link"></a></div><div class="task__header-note"><span title="Насколько эта задача важна для освоения материала, от 1 до 5" class="task__importance cye-lm-tag">важность: 5</span></div><div class="task__content"><p class="cye-lm-tag">Что выведут эти вызовы, если переменная <code>currentCount</code> находится вне <code>makeCounter</code>?</p>
<div data-trusted="1" class="code-example" data-highlight-block="11-12,14-15" data-prism-done="1">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers  language-javascript"><code class=" language-javascript"><span class="token keyword cye-lm-tag">var</span> currentCount <span class="token operator cye-lm-tag">=</span> <span class="token number cye-lm-tag">1</span><span class="token punctuation cye-lm-tag">;</span>

<span class="token keyword cye-lm-tag">function</span> <span class="token function cye-lm-tag">makeCounter</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">{</span>
  <span class="token keyword cye-lm-tag">return</span> <span class="token keyword cye-lm-tag">function</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">{</span>
    <span class="token keyword cye-lm-tag">return</span> currentCount<span class="token operator cye-lm-tag">++</span><span class="token punctuation cye-lm-tag">;</span>
  <span class="token punctuation cye-lm-tag">}</span><span class="token punctuation cye-lm-tag">;</span>
<span class="token punctuation cye-lm-tag">}</span>

<span class="token keyword cye-lm-tag">var</span> counter <span class="token operator cye-lm-tag">=</span> <span class="token function cye-lm-tag">makeCounter</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span>
<span class="token keyword cye-lm-tag">var</span> counter2 <span class="token operator cye-lm-tag">=</span> <span class="token function cye-lm-tag">makeCounter</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span>

<span class="token function cye-lm-tag">alert</span><span class="token punctuation cye-lm-tag">(</span> <span class="token function cye-lm-tag">counter</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span> <span class="token comment cye-lm-tag" spellcheck="true">// ?</span>
<span class="token function cye-lm-tag">alert</span><span class="token punctuation cye-lm-tag">(</span> <span class="token function cye-lm-tag">counter</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span> <span class="token comment cye-lm-tag" spellcheck="true">// ?</span>

<span class="token function cye-lm-tag">alert</span><span class="token punctuation cye-lm-tag">(</span> <span class="token function cye-lm-tag">counter2</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span> <span class="token comment cye-lm-tag" spellcheck="true">// ?</span>
<span class="token function cye-lm-tag">alert</span><span class="token punctuation cye-lm-tag">(</span> <span class="token function cye-lm-tag">counter2</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span> <span class="token comment cye-lm-tag" spellcheck="true">// ?</span></code><span class="line-numbers-rows cye-lm-tag"><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span></span></pre>
        </div>
      </div>
      
      </div><div class="task__answer"><div class="task__answer-content"><p class="cye-lm-tag">Выведут <strong>1,2,3,4.</strong></p>
<p class="cye-lm-tag">Здесь внутренняя функция будет искать – и находить <code>currentCount</code> каждый раз в самом внешнем объекте переменных: глобальном объекте <code>window</code>.</p>
<p class="cye-lm-tag">В результате все счётчики будут разделять единое, глобальное текущее значение.</p>
<div data-trusted="1" class="code-example" data-highlight-block="11-12,14-15" data-prism-done="1">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers  language-javascript"><code class=" language-javascript"><span class="token keyword cye-lm-tag">var</span> currentCount <span class="token operator cye-lm-tag">=</span> <span class="token number cye-lm-tag">1</span><span class="token punctuation cye-lm-tag">;</span>

<span class="token keyword cye-lm-tag">function</span> <span class="token function cye-lm-tag">makeCounter</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">{</span>
  <span class="token keyword cye-lm-tag">return</span> <span class="token keyword cye-lm-tag">function</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">{</span>
    <span class="token keyword cye-lm-tag">return</span> currentCount<span class="token operator cye-lm-tag">++</span><span class="token punctuation cye-lm-tag">;</span>
  <span class="token punctuation cye-lm-tag">}</span><span class="token punctuation cye-lm-tag">;</span>
<span class="token punctuation cye-lm-tag">}</span>

<span class="token keyword cye-lm-tag">var</span> counter <span class="token operator cye-lm-tag">=</span> <span class="token function cye-lm-tag">makeCounter</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span>
<span class="token keyword cye-lm-tag">var</span> counter2 <span class="token operator cye-lm-tag">=</span> <span class="token function cye-lm-tag">makeCounter</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span>

<span class="token function cye-lm-tag">alert</span><span class="token punctuation cye-lm-tag">(</span> <span class="token function cye-lm-tag">counter</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span> <span class="token comment cye-lm-tag" spellcheck="true">// ?</span>
<span class="token function cye-lm-tag">alert</span><span class="token punctuation cye-lm-tag">(</span> <span class="token function cye-lm-tag">counter</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span> <span class="token comment cye-lm-tag" spellcheck="true">// ?</span>

<span class="token function cye-lm-tag">alert</span><span class="token punctuation cye-lm-tag">(</span> <span class="token function cye-lm-tag">counter2</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span> <span class="token comment cye-lm-tag" spellcheck="true">// ?</span>
<span class="token function cye-lm-tag">alert</span><span class="token punctuation cye-lm-tag">(</span> <span class="token function cye-lm-tag">counter2</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span> <span class="token comment cye-lm-tag" spellcheck="true">// ?</span></code><span class="line-numbers-rows cye-lm-tag"><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span></span></pre>
        </div>
      </div>
      
      </div></div></div></div></div></div></div><div class="banner-bottom" style="display: block;"><a rel="nofollow" href="https://ad.doubleclick.net/ddm/jump/N366601.1915072JAVASCRIPT.RU/B9719141.132291290;sz=200x200;ord=[timestamp]?" class="banner-bottom__link" tq7p5sz="" hidden=""><div class="banner-bottom__logo"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 242 44.36" enable-background="new 0 0 242 44.36"><g fill="#2988B5"><path d="M79.396 38.227l-6.392-25.194h3.439l2.991 12.746c.747 3.14 1.42 6.28 1.869 8.71h.075c.411-2.504 1.195-5.494 2.055-8.746l3.365-12.71h3.401l3.066 12.784c.71 2.99 1.383 5.98 1.757 8.635h.075c.522-2.766 1.233-5.568 2.018-8.709l3.327-12.71h3.327l-7.141 25.194h-3.401l-3.177-13.119c-.785-3.216-1.308-5.683-1.644-8.225h-.076c-.449 2.505-1.009 4.973-1.943 8.225l-3.589 13.119h-3.402zM107.385 29.778c.075 4.448 2.916 6.28 6.206 6.28 2.354 0 3.774-.412 5.007-.934l.562 2.354c-1.159.523-3.141 1.122-6.018 1.122-5.569 0-8.897-3.664-8.897-9.122 0-5.455 3.215-9.756 8.485-9.756 5.907 0 7.476 5.196 7.476 8.522 0 .673-.075 1.197-.111 1.533h-12.71zm9.644-2.354c.038-2.093-.859-5.346-4.56-5.346-3.327 0-4.785 3.065-5.045 5.346h9.605zM124.128 38.227c.074-1.233.149-3.065.149-4.673v-21.867h3.252v11.364h.074c1.159-2.02 3.254-3.328 6.168-3.328 4.487 0 7.664 3.738 7.626 9.234 0 6.465-4.075 9.68-8.111 9.68-2.617 0-4.71-1.008-6.055-3.4h-.113l-.149 2.99h-2.841zm3.401-7.252c0 .411.074.822.149 1.195.637 2.281 2.542 3.851 4.934 3.851 3.44 0 5.497-2.803 5.497-6.952 0-3.626-1.871-6.728-5.384-6.728-2.242 0-4.335 1.533-5.009 4.037-.074.374-.188.822-.188 1.347v3.25zM145.465 32.358c1.532.784 3.889 1.569 6.317 1.569 2.616 0 4-1.084 4-2.729 0-1.57-1.195-2.467-4.225-3.551-4.187-1.458-6.914-3.775-6.914-7.439 0-4.298 3.587-7.588 9.53-7.588 2.842 0 4.935.599 6.431 1.271l-1.271 4.599c-1.01-.486-2.803-1.197-5.271-1.197-2.467 0-3.664 1.123-3.664 2.43 0 1.608 1.422 2.318 4.674 3.553 4.448 1.644 6.541 3.961 6.541 7.512 0 4.225-3.253 7.813-10.167 7.813-2.878 0-5.719-.748-7.141-1.532l1.16-4.711zM171.44 14.715v5.232h4.074v4.188h-4.074v6.615c0 2.205.523 3.216 2.242 3.216.71 0 1.271-.075 1.683-.149l.036 4.297c-.746.3-2.093.487-3.7.487-1.83 0-3.363-.637-4.261-1.571-1.048-1.084-1.569-2.841-1.569-5.419v-7.476h-2.431v-4.188h2.431v-3.961l5.569-1.271zM196.669 28.883c0 6.689-4.748 9.754-9.644 9.754-5.347 0-9.458-3.512-9.458-9.419s3.887-9.681 9.756-9.681c5.608 0 9.346 3.85 9.346 9.346zm-13.233.185c0 3.141 1.309 5.494 3.737 5.494 2.206 0 3.626-2.204 3.626-5.494 0-2.729-1.046-5.494-3.626-5.494-2.728 0-3.737 2.803-3.737 5.494zM200.179 25.967c0-2.691-.075-4.449-.15-6.02h4.896l.186 3.363h.149c.937-2.653 3.18-3.774 4.935-3.774.523 0 .786 0 1.197.075v5.346c-.411-.074-.898-.149-1.533-.149-2.093 0-3.515 1.12-3.887 2.878-.074.373-.113.822-.113 1.271v9.27h-5.68v-12.26zM214.379 25.778c0-2.279-.075-4.223-.15-5.831h4.785l.261 2.468h.111c.786-1.159 2.393-2.878 5.532-2.878 2.356 0 4.225 1.196 5.01 3.103h.074c.674-.934 1.495-1.684 2.356-2.206 1.009-.599 2.129-.897 3.476-.897 3.513 0 6.166 2.468 6.166 7.924v10.766h-5.531v-9.943c0-2.652-.859-4.186-2.691-4.186-1.308 0-2.242.896-2.616 1.98-.149.412-.225 1.008-.225 1.457v10.691h-5.533v-10.242c0-2.317-.82-3.887-2.614-3.887-1.458 0-2.317 1.12-2.655 2.055-.187.449-.225.973-.225 1.422v10.652h-5.53v-12.448z"></path></g><path fill="#2988B5" d="M30.947 42.933c.538-.675 1.173-1.412 1.925-2.28l.375-.432c.468-.541.858-.959 1.232-1.365.744-.802 1.388-1.494 2.563-3.096 1.153-1.57 1.899-2.754 1.777-4.781-.059-1.044-.101-1.76-.781-2.6-.409-.505-1.168-1.238-1.973-2.014-.872-.84-1.629-1.64-2.656-2.709-1.028-1.066-2.356-3.792-2.356-3.792-.396-.902-1.135-2.776-1.341-4.519l-3.02-15.482h-8.602l-4.209 19.526-3.726-19.527h-10.155l9.162 44.359h8.554l4.276-19.202 3.782 19.202h3.971l1.202-1.288z"></path><path fill="#F7941E" d="M48.852 2.517c.898-1.041 1.639-1.885 2.247-2.652h-13.646c-.812 1.036-2.459 3.035-3.401 4.808-1.243 2.346-2.266 4.107-2.367 8.427l.045 1.392c0 2.059 1.473 5.083 1.473 5.083.23.536 1.009 1.671 1.508 2.361h-.012l.272.358c1.47 1.685 3.696 3.567 4.678 4.776 1.148 1.418 1.179 2.748 1.241 3.783.166 2.796-.965 4.481-2.175 6.133-1.83 2.496-2.489 2.958-3.898 4.59-.898 1.04-1.638 1.883-2.247 2.646h14.097c.827-1.062 2.004-3.021 2.949-4.804 1.244-2.347 2.268-4.107 2.368-8.424l-.046-1.393c0-2.062-1.473-5.087-1.473-5.087-.23-.536-1.01-1.664-1.509-2.361h.012l-.271-.357c-1.469-1.686-3.697-3.567-4.677-4.776-1.148-1.421-1.18-2.75-1.241-3.784-.166-2.793.965-4.482 2.177-6.133 1.829-2.49 2.487-2.957 3.896-4.586z"></path></svg></div><div class="banner-bottom__slogan">Умная JavaScript IDE<br>за&nbsp;разумные деньги</div></a><a href="#" onclick="localStorage.bannerBottomDisabled=1;this.parentNode.remove();return false" class="banner-bottom__disable">не показывать</a><img src="https://ad.doubleclick.net/ddm/ad/N366601.1915072JAVASCRIPT.RU/B9719141.132291290;sz=200x200;ord=[timestamp];dc_lat=;dc_rdid=;tag_for_child_directed_treatment=?" style="width: 0px; height: 0px; opacity: 0; display: none !important;" hidden=""></div><script>!function(){/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)||screen.width<1024||"bannerBottomDisabled"in localStorage||(localStorage.bannerBottomShownCount||(localStorage.bannerBottomShownCount=1),document.querySelector(".banner-bottom").style.display="block")}();</script></div>
<br><hr>
<h2>[[Scope]] для new Function</h2>
<div itemprop="articleBody"><h2><a class="main__anchor" name="scope-Function" href="#scope-Function">Присвоение [[Scope]] для new Function</a></h2><p class="cye-lm-tag">Есть одно исключение из общего правила присвоения <code>[[Scope]]</code>, которое мы рассматривали в предыдущей главе.</p>
<p class="cye-lm-tag">При создании функции с использованием  <code>new Function</code>, её свойство <code>[[Scope]]</code> ссылается не на текущий <code>LexicalEnvironment</code>, а на <code>window</code>.</p>
<h2><a class="main__anchor" name="пример" href="#пример">Пример</a></h2><p class="cye-lm-tag">Следующий пример демонстрирует как функция, созданная <code>new Function</code>, игнорирует внешнюю переменную <code>a</code> и выводит глобальную вместо неё:</p>
<div data-trusted="0" class="code-example" data-refresh="1" data-highlight-block="5-5" data-highlight-inline="10:16-17" data-prism-done="1">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers  language-javascript"><code class=" language-javascript"><span class="token keyword cye-lm-tag">var</span> a <span class="token operator cye-lm-tag">=</span> <span class="token number cye-lm-tag">1</span><span class="token punctuation cye-lm-tag">;</span>

<span class="token keyword cye-lm-tag">function</span> <span class="token function cye-lm-tag">getFunc</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">{</span>
  <span class="token keyword cye-lm-tag">var</span> a <span class="token operator cye-lm-tag">=</span> <span class="token number cye-lm-tag">2</span><span class="token punctuation cye-lm-tag">;</span>

  <span class="token keyword cye-lm-tag">var</span> func <span class="token operator cye-lm-tag">=</span> <span class="token keyword cye-lm-tag">new</span> <span class="token class-name cye-lm-tag">Function</span><span class="token punctuation cye-lm-tag">(</span><span class="token string cye-lm-tag">''</span><span class="token punctuation cye-lm-tag">,</span> <span class="token string cye-lm-tag">'alert(a)'</span><span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span>

  <span class="token keyword cye-lm-tag">return</span> func<span class="token punctuation cye-lm-tag">;</span>
<span class="token punctuation cye-lm-tag">}</span>

<span class="token function cye-lm-tag">getFunc</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span> <span class="token comment cye-lm-tag" spellcheck="true">// 1, из window</span></code><span class="line-numbers-rows cye-lm-tag"><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span></span></pre>
        </div>
      </div>
      
      </div><p class="cye-lm-tag">Сравним с обычным поведением:</p>
<div data-trusted="0" class="code-example" data-refresh="1" data-highlight-block="5-5" data-highlight-inline="10:16-17" data-prism-done="1">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers  language-javascript"><code class=" language-javascript"><span class="token keyword cye-lm-tag">var</span> a <span class="token operator cye-lm-tag">=</span> <span class="token number cye-lm-tag">1</span><span class="token punctuation cye-lm-tag">;</span>

<span class="token keyword cye-lm-tag">function</span> <span class="token function cye-lm-tag">getFunc</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">{</span>
  <span class="token keyword cye-lm-tag">var</span> a <span class="token operator cye-lm-tag">=</span> <span class="token number cye-lm-tag">2</span><span class="token punctuation cye-lm-tag">;</span>

  <span class="token keyword cye-lm-tag">var</span> func <span class="token operator cye-lm-tag">=</span> <span class="token keyword cye-lm-tag">function</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">{</span> <span class="token function cye-lm-tag">alert</span><span class="token punctuation cye-lm-tag">(</span>a<span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span> <span class="token punctuation cye-lm-tag">}</span><span class="token punctuation cye-lm-tag">;</span>

  <span class="token keyword cye-lm-tag">return</span> func<span class="token punctuation cye-lm-tag">;</span>
<span class="token punctuation cye-lm-tag">}</span>

<span class="token function cye-lm-tag">getFunc</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span> <span class="token comment cye-lm-tag" spellcheck="true">// 2, из LexicalEnvironment функции getFunc</span></code><span class="line-numbers-rows cye-lm-tag"><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span></span></pre>
        </div>
      </div>
      
      </div><h2><a class="main__anchor" name="почему-так-сделано" href="#почему-так-сделано">Почему так сделано?</a></h2><div class="important important_warn">
            <div class="important__header"><span class="important__type cye-lm-tag">Продвинутые знания</span></div>
            <div class="important__content"><p class="cye-lm-tag">Содержимое этой секции содержит продвинутую информацию теоретического характера, которая прямо сейчас не обязательна для дальнейшего изучения JavaScript.</p>
</div></div>
<p class="cye-lm-tag">Эта особенность <code>new Function</code>, хоть и выглядит странно, на самом деле весьма полезна.</p>
<p class="cye-lm-tag">Представьте себе, что нам действительно нужно создать функцию из строки кода. Текст кода этой функции неизвестен на момент написания скрипта (иначе зачем <code>new Function</code>), но станет известен позже, например получен с сервера или из других источников данных.</p>
<p class="cye-lm-tag">Предположим, что этому коду надо будет взаимодействовать с внешними переменными основного скрипта.</p>
<p class="cye-lm-tag">Но проблема в том, что JavaScript при выкладывании на «боевой сервер» предварительно сжимается минификатором – специальной программой, которая уменьшает размер кода, убирая из него лишние комментарии, пробелы, что очень важно – переименовывает локальные переменные на более короткие.</p>
<p class="cye-lm-tag">То есть, если внутри функции есть <code>var userName</code>, то минификатор заменит её на <code>var a</code> (или другую букву, чтобы не было конфликта), предполагая, что так как переменная видна только внутри функции, то этого всё равно никто не заметит, а код станет короче. И обычно проблем нет.</p>
<p class="cye-lm-tag">…Но если бы <code>new Function</code> могла обращаться к внешним переменным, то при попытке доступа к <code>userName</code> в сжатом коде была бы ошибка, так как минификатор переименовал её.</p>
<p class="cye-lm-tag"><strong>Получается, что даже если бы мы захотели использовать локальные переменные в <code>new Function</code>, то после сжатия были бы проблемы, так как минификатор переименовывает локальные переменные.</strong></p>
<p class="cye-lm-tag">Описанная особенность <code>new Function</code> просто-таки спасает нас от ошибок.</p>
<p class="cye-lm-tag">Ну а если внутри функции, создаваемой через <code>new Function</code>, всё же нужно использовать какие-то данные – без проблем, нужно всего лишь предусмотреть соответствующие параметры и передавать их явным образом, например так:</p>
<div data-trusted="0" class="code-example" data-refresh="1" data-highlight-block="0-0,4-4" data-prism-done="1">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers  language-javascript"><code class=" language-javascript"><span class="token keyword cye-lm-tag">var</span> sum <span class="token operator cye-lm-tag">=</span> <span class="token keyword cye-lm-tag">new</span> <span class="token class-name cye-lm-tag">Function</span><span class="token punctuation cye-lm-tag">(</span><span class="token string cye-lm-tag">'a, b'</span><span class="token punctuation cye-lm-tag">,</span> <span class="token string cye-lm-tag">' return a + b; '</span><span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span>

<span class="token keyword cye-lm-tag">var</span> a <span class="token operator cye-lm-tag">=</span> <span class="token number cye-lm-tag">1</span><span class="token punctuation cye-lm-tag">,</span> b <span class="token operator cye-lm-tag">=</span> <span class="token number cye-lm-tag">2</span><span class="token punctuation cye-lm-tag">;</span>

<span class="token function cye-lm-tag">alert</span><span class="token punctuation cye-lm-tag">(</span> <span class="token function cye-lm-tag">sum</span><span class="token punctuation cye-lm-tag">(</span>a<span class="token punctuation cye-lm-tag">,</span> b<span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span> <span class="token comment cye-lm-tag" spellcheck="true">// 3</span></code><span class="line-numbers-rows cye-lm-tag"><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span></span></pre>
        </div>
      </div>
      
      </div><h2><a class="main__anchor" name="итого" href="#итого">Итого</a></h2><ul>
<li>Функции, создаваемые через <code>new Function</code>, имеют значением <code>[[Scope]]</code> не внешний объект переменных, а <code>window</code>.</li>
<li>Следствие – такие функции не могут использовать замыкание. Но это хорошо, так как бережёт от ошибок проектирования, да и при сжатии JavaScript проблем не будет. Если же внешние переменные реально нужны – их можно передать в качестве параметров.</li>
</ul>
</div>
<br><hr>
<h2>Локальные переменные для объекта</h2>
<div itemprop="articleBody"><p class="cye-lm-tag">Замыкания можно использовать сотнями способов. Иногда люди сами не замечают, что использовали замыкания – настолько это просто и естественно.</p>
<p class="cye-lm-tag">В этой главе мы рассмотрим дополнительные примеры использования замыканий и задачи на эту тему.</p>
<cut>
<h2><a class="main__anchor" name="счётчик-объект" href="#счётчик-объект">Счётчик-объект</a></h2><p class="cye-lm-tag">Ранее мы сделали счётчик.</p>
<p class="cye-lm-tag">Напомню, как он выглядел:</p>
<div data-trusted="1" class="code-example" data-prism-done="1">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers  language-javascript"><code class=" language-javascript"><span class="token keyword cye-lm-tag">function</span> <span class="token function cye-lm-tag">makeCounter</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">{</span>
  <span class="token keyword cye-lm-tag">var</span> currentCount <span class="token operator cye-lm-tag">=</span> <span class="token number cye-lm-tag">1</span><span class="token punctuation cye-lm-tag">;</span>

  <span class="token keyword cye-lm-tag">return</span> <span class="token keyword cye-lm-tag">function</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">{</span>
    <span class="token keyword cye-lm-tag">return</span> currentCount<span class="token operator cye-lm-tag">++</span><span class="token punctuation cye-lm-tag">;</span>
  <span class="token punctuation cye-lm-tag">}</span><span class="token punctuation cye-lm-tag">;</span>
<span class="token punctuation cye-lm-tag">}</span>

<span class="token keyword cye-lm-tag">var</span> counter <span class="token operator cye-lm-tag">=</span> <span class="token function cye-lm-tag">makeCounter</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span>

<span class="token comment cye-lm-tag" spellcheck="true">// каждый вызов возвращает результат, увеличивая счётчик</span>
<span class="token function cye-lm-tag">alert</span><span class="token punctuation cye-lm-tag">(</span> <span class="token function cye-lm-tag">counter</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span> <span class="token comment cye-lm-tag" spellcheck="true">// 1</span>
<span class="token function cye-lm-tag">alert</span><span class="token punctuation cye-lm-tag">(</span> <span class="token function cye-lm-tag">counter</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span> <span class="token comment cye-lm-tag" spellcheck="true">// 2</span>
<span class="token function cye-lm-tag">alert</span><span class="token punctuation cye-lm-tag">(</span> <span class="token function cye-lm-tag">counter</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span> <span class="token comment cye-lm-tag" spellcheck="true">// 3</span></code><span class="line-numbers-rows cye-lm-tag"><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span></span></pre>
        </div>
      </div>
      
      </div><p class="cye-lm-tag">Счётчик получился вполне рабочий, но вот только возможностей ему не хватает. Хорошо бы, чтобы можно было сбрасывать значение счётчика или начинать отсчёт с другого значения вместо <code>1</code> или… Да много чего можно захотеть от простого счётчика и, тем более, в более сложных проектах.</p>
<p class="cye-lm-tag"><strong>Чтобы добавить счётчику возможностей – перейдём с функции на полноценный объект:</strong></p>
<div data-trusted="1" class="code-example" data-prism-done="1">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers  language-javascript"><code class=" language-javascript"><span class="token keyword cye-lm-tag">function</span> <span class="token function cye-lm-tag">makeCounter</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">{</span>
  <span class="token keyword cye-lm-tag">var</span> currentCount <span class="token operator cye-lm-tag">=</span> <span class="token number cye-lm-tag">1</span><span class="token punctuation cye-lm-tag">;</span>

  <span class="token keyword cye-lm-tag">return</span> <span class="token punctuation cye-lm-tag">{</span> <span class="token comment cye-lm-tag" spellcheck="true">// возвратим объект вместо функции</span>
    getNext<span class="token punctuation cye-lm-tag">:</span> <span class="token keyword cye-lm-tag">function</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">{</span>
      <span class="token keyword cye-lm-tag">return</span> currentCount<span class="token operator cye-lm-tag">++</span><span class="token punctuation cye-lm-tag">;</span>
    <span class="token punctuation cye-lm-tag">}</span><span class="token punctuation cye-lm-tag">,</span>

    <span class="token keyword cye-lm-tag">set</span><span class="token punctuation cye-lm-tag">:</span> <span class="token keyword cye-lm-tag">function</span><span class="token punctuation cye-lm-tag">(</span>value<span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">{</span>
      currentCount <span class="token operator cye-lm-tag">=</span> value<span class="token punctuation cye-lm-tag">;</span>
    <span class="token punctuation cye-lm-tag">}</span><span class="token punctuation cye-lm-tag">,</span>

    reset<span class="token punctuation cye-lm-tag">:</span> <span class="token keyword cye-lm-tag">function</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">{</span>
      currentCount <span class="token operator cye-lm-tag">=</span> <span class="token number cye-lm-tag">1</span><span class="token punctuation cye-lm-tag">;</span>
    <span class="token punctuation cye-lm-tag">}</span>
  <span class="token punctuation cye-lm-tag">}</span><span class="token punctuation cye-lm-tag">;</span>
<span class="token punctuation cye-lm-tag">}</span>

<span class="token keyword cye-lm-tag">var</span> counter <span class="token operator cye-lm-tag">=</span> <span class="token function cye-lm-tag">makeCounter</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span>

<span class="token function cye-lm-tag">alert</span><span class="token punctuation cye-lm-tag">(</span> counter<span class="token punctuation cye-lm-tag">.</span><span class="token function cye-lm-tag">getNext</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span> <span class="token comment cye-lm-tag" spellcheck="true">// 1</span>
<span class="token function cye-lm-tag">alert</span><span class="token punctuation cye-lm-tag">(</span> counter<span class="token punctuation cye-lm-tag">.</span><span class="token function cye-lm-tag">getNext</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span> <span class="token comment cye-lm-tag" spellcheck="true">// 2</span>

counter<span class="token punctuation cye-lm-tag">.</span><span class="token keyword cye-lm-tag">set</span><span class="token punctuation cye-lm-tag">(</span><span class="token number cye-lm-tag">5</span><span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span>
<span class="token function cye-lm-tag">alert</span><span class="token punctuation cye-lm-tag">(</span> counter<span class="token punctuation cye-lm-tag">.</span><span class="token function cye-lm-tag">getNext</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span> <span class="token comment cye-lm-tag" spellcheck="true">// 5</span></code><span class="line-numbers-rows cye-lm-tag"><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span></span></pre>
        </div>
      </div>
      
      </div><p class="cye-lm-tag">Теперь функция <code>makeCounter</code> возвращает не одну функцию, а объект с несколькими методами:</p>
<ul>
<li><code>getNext()</code> – получить следующее значение, то, что раньше делал вызов <code>counter()</code>.</li>
<li><code>set(value)</code> – поставить значение.</li>
<li><code>reset()</code> – обнулить счётчик.</li>
</ul>
<p class="cye-lm-tag">Все они получают ссылку <code>[[Scope]]</code> на текущий (внешний) объект переменных. Поэтому вызов любого из этих методов будет получать или модифицировать одно и то же внешнее значение <code>currentCount</code>.</p>
<h2><a class="main__anchor" name="объект-счётчика-функция" href="#объект-счётчика-функция">Объект счётчика + функция</a></h2><p class="cye-lm-tag">Изначально, счётчик делался функцией во многом ради красивого вызова: <code>counter()</code>, который увеличивал значение и возвращал результат.</p>
<p class="cye-lm-tag">К сожалению, при переходе на объект короткий вызов пропал, вместо него теперь <code>counter.getNext()</code>. Но он ведь был таким простым и удобным…</p>
<p class="cye-lm-tag">Поэтому давайте вернём его!</p>
<div data-trusted="1" class="code-example" data-highlight-block="3-6,22-26" data-prism-done="1">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers  language-javascript"><code class=" language-javascript"><span class="token keyword cye-lm-tag">function</span> <span class="token function cye-lm-tag">makeCounter</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">{</span>
  <span class="token keyword cye-lm-tag">var</span> currentCount <span class="token operator cye-lm-tag">=</span> <span class="token number cye-lm-tag">1</span><span class="token punctuation cye-lm-tag">;</span>

  <span class="token comment cye-lm-tag" spellcheck="true">// возвращаемся к функции</span>
  <span class="token keyword cye-lm-tag">function</span> <span class="token function cye-lm-tag">counter</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">{</span>
      <span class="token keyword cye-lm-tag">return</span> currentCount<span class="token operator cye-lm-tag">++</span><span class="token punctuation cye-lm-tag">;</span>
    <span class="token punctuation cye-lm-tag">}</span>

  <span class="token comment cye-lm-tag" spellcheck="true">// ...и добавляем ей методы!</span>
  counter<span class="token punctuation cye-lm-tag">.</span><span class="token keyword cye-lm-tag">set</span> <span class="token operator cye-lm-tag">=</span> <span class="token keyword cye-lm-tag">function</span><span class="token punctuation cye-lm-tag">(</span>value<span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">{</span>
    currentCount <span class="token operator cye-lm-tag">=</span> value<span class="token punctuation cye-lm-tag">;</span>
  <span class="token punctuation cye-lm-tag">}</span><span class="token punctuation cye-lm-tag">;</span>

  counter<span class="token punctuation cye-lm-tag">.</span>reset <span class="token operator cye-lm-tag">=</span> <span class="token keyword cye-lm-tag">function</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">{</span>
    currentCount <span class="token operator cye-lm-tag">=</span> <span class="token number cye-lm-tag">1</span><span class="token punctuation cye-lm-tag">;</span>
  <span class="token punctuation cye-lm-tag">}</span><span class="token punctuation cye-lm-tag">;</span>

  <span class="token keyword cye-lm-tag">return</span> counter<span class="token punctuation cye-lm-tag">;</span>
<span class="token punctuation cye-lm-tag">}</span>

<span class="token keyword cye-lm-tag">var</span> counter <span class="token operator cye-lm-tag">=</span> <span class="token function cye-lm-tag">makeCounter</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span>

<span class="token function cye-lm-tag">alert</span><span class="token punctuation cye-lm-tag">(</span> <span class="token function cye-lm-tag">counter</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span> <span class="token comment cye-lm-tag" spellcheck="true">// 1</span>
<span class="token function cye-lm-tag">alert</span><span class="token punctuation cye-lm-tag">(</span> <span class="token function cye-lm-tag">counter</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span> <span class="token comment cye-lm-tag" spellcheck="true">// 2</span>

counter<span class="token punctuation cye-lm-tag">.</span><span class="token keyword cye-lm-tag">set</span><span class="token punctuation cye-lm-tag">(</span><span class="token number cye-lm-tag">5</span><span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span>
<span class="token function cye-lm-tag">alert</span><span class="token punctuation cye-lm-tag">(</span> <span class="token function cye-lm-tag">counter</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span> <span class="token comment cye-lm-tag" spellcheck="true">// 5</span></code><span class="line-numbers-rows cye-lm-tag"><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span></span></pre>
        </div>
      </div>
      
      </div><p class="cye-lm-tag">Красиво, не правда ли? Получился полноценный объект, который можно вдобавок ещё и вызывать.</p>
<p class="cye-lm-tag">Этот трюк часто используется при разработке JavaScript-библиотек. Например, популярная библиотека <a href="http://jquery.com">jQuery</a> предоставляет глобальную переменную с именем <a href="http://api.jquery.com/jQuery/">jQuery</a> (доступна также под коротким именем <code>$</code>), которая с одной стороны является функцией и может вызываться как <code>jQuery(...)</code>, а с другой – у неё есть различные методы, например <code>jQuery.type(123)</code> возвращает тип аргумента.</p>
<p class="cye-lm-tag">Далее вы найдёте различные задачи на понимание замыканий. Рекомендуется их сделать самостоятельно.</p>
</cut></div>
<br><hr>
<h2>Модули через замыкания</h2>
<div itemprop="articleBody"><p class="cye-lm-tag">Приём программирования «модуль» имеет громадное количество вариаций. Он немного похож на счётчик, который мы рассматривали ранее, использует аналогичный приём, но на уровне выше.</p>
<p class="cye-lm-tag">Его цель – скрыть внутренние детали реализации скрипта. В том числе: временные переменные, константы, вспомогательные мини-функции и т.п.</p>
<h2><a class="main__anchor" name="зачем-нужен-модуль" href="#зачем-нужен-модуль">Зачем нужен модуль?</a></h2><p class="cye-lm-tag">Допустим, мы хотим разработать скрипт, который делает что-то полезное на странице.</p>
<p class="cye-lm-tag">Умея работать со страницей, мы могли бы сделать много чего, но так как пока этого не было (скоро научимся), то пусть скрипт просто выводит сообщение:</p>
<p class="cye-lm-tag">Файл <code>hello.js</code></p>
<div data-trusted="1" class="code-example" data-prism-done="1">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers  language-javascript"><code class=" language-javascript"><span class="token comment cye-lm-tag" spellcheck="true">// глобальная переменная нашего скрипта</span>
<span class="token keyword cye-lm-tag">var</span> message <span class="token operator cye-lm-tag">=</span> <span class="token string cye-lm-tag">"Привет"</span><span class="token punctuation cye-lm-tag">;</span>

<span class="token comment cye-lm-tag" spellcheck="true">// функция для вывода этой переменной</span>
<span class="token keyword cye-lm-tag">function</span> <span class="token function cye-lm-tag">showMessage</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">{</span>
  <span class="token function cye-lm-tag">alert</span><span class="token punctuation cye-lm-tag">(</span> message <span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span>
<span class="token punctuation cye-lm-tag">}</span>

<span class="token comment cye-lm-tag" spellcheck="true">// выводим сообщение</span>
<span class="token function cye-lm-tag">showMessage</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span></code><span class="line-numbers-rows cye-lm-tag"><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span></span></pre>
        </div>
      </div>
      
      </div><p class="cye-lm-tag">У этого скрипта есть свои внутренние переменные и функции.</p>
<p class="cye-lm-tag">В данном случае это <code>message</code> и <code>showMessage</code>.</p>
<p class="cye-lm-tag">Предположим, что мы хотели бы распространять этот скрипт в виде библиотеки. Каждый, кто хочет, чтобы посетителям выдавалось «Привет» – может просто подключить этот скрипт. Достаточно скачать и подключить, например, как внешний файл <code>hello.js</code> – и готово.</p>
<p class="cye-lm-tag"><strong>Если подключить подобный скрипт к странице «как есть», то возможен конфликт с переменными, которые она использует.</strong></p>
<p class="cye-lm-tag">То есть, при подключении к такой странице он её «сломает»:</p>
<div data-trusted="1" class="code-example" data-prism-done="1">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers  language-markup"><code class=" language-markup"><span class="token tag cye-lm-tag"><span class="token tag cye-lm-tag"><span class="token punctuation cye-lm-tag">&lt;</span>script</span><span class="token punctuation cye-lm-tag">&gt;</span></span><span class="token script language-javascript cye-lm-tag">
  <span class="token keyword cye-lm-tag">var</span> message <span class="token operator cye-lm-tag">=</span> <span class="token string cye-lm-tag">"Пожалуйста, нажмите на кнопку"</span><span class="token punctuation cye-lm-tag">;</span>
</span><span class="token tag cye-lm-tag"><span class="token tag cye-lm-tag"><span class="token punctuation cye-lm-tag">&lt;/</span>script</span><span class="token punctuation cye-lm-tag">&gt;</span></span>
<span class="token tag cye-lm-tag"><span class="token tag cye-lm-tag"><span class="token punctuation cye-lm-tag">&lt;</span>script</span> <span class="token attr-name cye-lm-tag">src</span><span class="token attr-value cye-lm-tag"><span class="token punctuation cye-lm-tag">=</span><span class="token punctuation cye-lm-tag">"</span>hello.js<span class="token punctuation cye-lm-tag">"</span></span><span class="token punctuation cye-lm-tag">&gt;</span></span><span class="token script language-javascript cye-lm-tag"></span><span class="token tag cye-lm-tag"><span class="token tag cye-lm-tag"><span class="token punctuation cye-lm-tag">&lt;/</span>script</span><span class="token punctuation cye-lm-tag">&gt;</span></span>

<span class="token tag cye-lm-tag"><span class="token tag cye-lm-tag"><span class="token punctuation cye-lm-tag">&lt;</span>button</span><span class="token punctuation cye-lm-tag">&gt;</span></span>Кнопка<span class="token tag cye-lm-tag"><span class="token tag cye-lm-tag"><span class="token punctuation cye-lm-tag">&lt;/</span>button</span><span class="token punctuation cye-lm-tag">&gt;</span></span>
<span class="token tag cye-lm-tag"><span class="token tag cye-lm-tag"><span class="token punctuation cye-lm-tag">&lt;</span>script</span><span class="token punctuation cye-lm-tag">&gt;</span></span><span class="token script language-javascript cye-lm-tag">
  <span class="token comment cye-lm-tag" spellcheck="true">// ожидается сообщение из переменной выше...</span>
  <span class="token function cye-lm-tag">alert</span><span class="token punctuation cye-lm-tag">(</span> message <span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span> <span class="token comment cye-lm-tag" spellcheck="true">// но на самом деле будет выведено "Привет"</span>
</span><span class="token tag cye-lm-tag"><span class="token tag cye-lm-tag"><span class="token punctuation cye-lm-tag">&lt;/</span>script</span><span class="token punctuation cye-lm-tag">&gt;</span></span></code><span class="line-numbers-rows cye-lm-tag"><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span></span></pre>
        </div>
      </div>
      
      </div><a class="edit" target="_blank" href="http://plnkr.co/edit/EXjWz8rYIduCMVSKf3rJ?p=preview">открыть в песочнице</a><p class="cye-lm-tag">Автор страницы ожидает, что библиотека <code>"hello.js"</code> просто отработает, без побочных эффектов. А она вместе с этим переопределила <code>message</code> в <code>"Привет"</code>.</p>
<p class="cye-lm-tag">Если же убрать скрипт <code>hello.js</code>, то страница будет выводить правильное сообщение.</p>
<p class="cye-lm-tag">Зная внутреннее устройство <code>hello.js</code> нам, конечно, понятно, что проблема возникла потому, что переменная <code>message</code> из скрипта <code>hello.js</code> перезаписала объявленную на странице.</p>
<h2><a class="main__anchor" name="приём-проектирования-модуль" href="#приём-проектирования-модуль">Приём проектирования «Модуль»</a></h2><p class="cye-lm-tag">Чтобы проблемы не было, всего-то нужно, чтобы у скрипта была <em>своя собственная область видимости</em>, чтобы его переменные не попали на страницу.</p>
<p class="cye-lm-tag">Для этого мы завернём всё его содержимое в функцию, которую тут же запустим.</p>
<p class="cye-lm-tag">Файл <code>hello.js</code>, оформленный как модуль:</p>
<div data-trusted="1" class="code-example" data-prism-done="1">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers  language-javascript"><code class=" language-javascript"><span class="token punctuation cye-lm-tag">(</span><span class="token keyword cye-lm-tag">function</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">{</span>

  <span class="token comment cye-lm-tag" spellcheck="true">// глобальная переменная нашего скрипта</span>
  <span class="token keyword cye-lm-tag">var</span> message <span class="token operator cye-lm-tag">=</span> <span class="token string cye-lm-tag">"Привет"</span><span class="token punctuation cye-lm-tag">;</span>

  <span class="token comment cye-lm-tag" spellcheck="true">// функция для вывода этой переменной</span>
  <span class="token keyword cye-lm-tag">function</span> <span class="token function cye-lm-tag">showMessage</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">{</span>
    <span class="token function cye-lm-tag">alert</span><span class="token punctuation cye-lm-tag">(</span> message <span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span>
  <span class="token punctuation cye-lm-tag">}</span>

  <span class="token comment cye-lm-tag" spellcheck="true">// выводим сообщение</span>
  <span class="token function cye-lm-tag">showMessage</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span>

<span class="token punctuation cye-lm-tag">}</span><span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span></code><span class="line-numbers-rows cye-lm-tag"><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span></span></pre>
        </div>
      </div>
      
      </div><a class="edit" target="_blank" href="http://plnkr.co/edit/ULYeG4f5Q3tEDx0faTPr?p=preview">открыть в песочнице</a><p class="cye-lm-tag">Этот скрипт при подключении к той же странице будет работать корректно.</p>
<p class="cye-lm-tag">Будет выводиться «Привет», а затем «Пожалуйста, нажмите на кнопку».</p>
<h3><a class="main__anchor" name="зачем-скобки-вокруг-функции" href="#зачем-скобки-вокруг-функции">Зачем скобки вокруг функции?</a></h3><p class="cye-lm-tag">В примере выше объявление модуля выглядит так:</p>
<div data-trusted="1" class="code-example" data-prism-done="1">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers  language-javascript"><code class=" language-javascript"><span class="token punctuation cye-lm-tag">(</span><span class="token keyword cye-lm-tag">function</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">{</span>

  <span class="token function cye-lm-tag">alert</span><span class="token punctuation cye-lm-tag">(</span> <span class="token string cye-lm-tag">"объявляем локальные переменные, функции, работаем"</span> <span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span>
  <span class="token comment cye-lm-tag" spellcheck="true">// ...</span>

<span class="token punctuation cye-lm-tag">}</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span></code><span class="line-numbers-rows cye-lm-tag"><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span></span></pre>
        </div>
      </div>
      
      </div><p class="cye-lm-tag">В начале и в конце стоят скобки, так как иначе была бы ошибка.</p>
<p class="cye-lm-tag">Вот, для сравнения, неверный вариант:</p>
<div data-trusted="1" class="code-example" data-prism-done="1">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers  language-javascript"><code class=" language-javascript"><span class="token keyword cye-lm-tag">function</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">{</span>
  <span class="token comment cye-lm-tag" spellcheck="true">// будет ошибка</span>
<span class="token punctuation cye-lm-tag">}</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span></code><span class="line-numbers-rows cye-lm-tag"><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span></span></pre>
        </div>
      </div>
      
      </div><p class="cye-lm-tag">Ошибка при его запуске произойдет потому, что браузер, видя ключевое слово <code>function</code> в основном потоке кода, попытается прочитать <code>Function Declaration</code>, а здесь имени нет.</p>
<p class="cye-lm-tag">Впрочем, даже если имя поставить, то работать тоже не будет:</p>
<div data-trusted="1" class="code-example" data-prism-done="1">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers  language-javascript"><code class=" language-javascript"><span class="token keyword cye-lm-tag">function</span> <span class="token function cye-lm-tag">work</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">{</span>
  <span class="token comment cye-lm-tag" spellcheck="true">// ...</span>
<span class="token punctuation cye-lm-tag">}</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span> <span class="token comment cye-lm-tag" spellcheck="true">// syntax error</span></code><span class="line-numbers-rows cye-lm-tag"><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span></span></pre>
        </div>
      </div>
      
      </div><p class="cye-lm-tag"><strong>Дело в том, что «на месте» разрешено вызывать <em>только</em> <code>Function Expression</code>.</strong></p>
<p class="cye-lm-tag">Общее правило таково:</p>
<ul>
<li>Если браузер видит <code>function</code> в основном потоке кода – он считает, что это <code>Function Declaration</code>.</li>
<li>Если же <code>function</code> идёт в составе более сложного выражения, то он считает, что это <code>Function Expression</code>.</li>
</ul>
<p class="cye-lm-tag">Для этого и нужны скобки – показать, что у нас <code>Function Expression</code>, который по правилам JavaScript можно вызвать «на месте».</p>
<p class="cye-lm-tag">Можно показать это другим способом, например поставив перед функцией оператор:</p>
<div data-trusted="1" class="code-example" data-prism-done="1">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers  language-javascript"><code class=" language-javascript"><span class="token operator cye-lm-tag">+</span><span class="token keyword cye-lm-tag">function</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">{</span>
  <span class="token function cye-lm-tag">alert</span><span class="token punctuation cye-lm-tag">(</span><span class="token string cye-lm-tag">'Вызов на месте'</span><span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span>
<span class="token punctuation cye-lm-tag">}</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span>

<span class="token operator cye-lm-tag">!</span><span class="token keyword cye-lm-tag">function</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">{</span>
  <span class="token function cye-lm-tag">alert</span><span class="token punctuation cye-lm-tag">(</span><span class="token string cye-lm-tag">'Так тоже будет работать'</span><span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span>
<span class="token punctuation cye-lm-tag">}</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span></code><span class="line-numbers-rows cye-lm-tag"><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span></span></pre>
        </div>
      </div>
      
      </div><h2><a class="main__anchor" name="экспорт-значения" href="#экспорт-значения">Экспорт значения</a></h2><p class="cye-lm-tag">Приём «модуль» используется почти во всех современных библиотеках.</p>
<p class="cye-lm-tag">Ведь что такое библиотека? Это полезные функции, ради которых её подключают, плюс временные переменные и вспомогательные функции, которые библиотека использует внутри себя.</p>
<p class="cye-lm-tag">Посмотрим, к примеру, на библиотеку <a href="http://lodash.com/">Lodash</a>, хотя могли бы и <a href="http://jquery.com/">jQuery</a>, там почти то же самое.</p>
<p class="cye-lm-tag">Если её подключить, то появится специальная переменная <code>lodash</code> (короткое имя <code>_</code>),  которую можно использовать как функцию, и кроме того в неё записаны различные полезные свойства, например:</p>
<ul>
<li><code>_.defaults(src, dst1, dst2...)</code> – копирует в объект <code>src</code> те свойства из объектов <code>dst1</code>, <code>dst2</code> и других, которых там нет.</li>
<li><code>_.cloneDeep(obj)</code> – делает глубокое копирование объекта <code>obj</code>, создавая полностью независимый клон.</li>
<li><code>_.size(obj)</code> – возвращает количество свойств в объекте, полиморфная функция: можно передать массив или даже 1 значение.</li>
</ul>
<p class="cye-lm-tag">Есть и много других функций, подробнее описанных в <a href="https://lodash.com/docs">документации</a>.</p>
<p class="cye-lm-tag">Пример использования:</p>
<div data-trusted="1" class="code-example" data-highlight-block="9-12" data-prism-done="1">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="показать" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers  language-markup"><code class=" language-markup"><span class="token tag cye-lm-tag"><span class="token tag cye-lm-tag"><span class="token punctuation cye-lm-tag">&lt;</span>p</span><span class="token punctuation cye-lm-tag">&gt;</span></span>Подключим библиотеку<span class="token tag cye-lm-tag"><span class="token tag cye-lm-tag"><span class="token punctuation cye-lm-tag">&lt;/</span>p</span><span class="token punctuation cye-lm-tag">&gt;</span></span>
<span class="token tag cye-lm-tag"><span class="token tag cye-lm-tag"><span class="token punctuation cye-lm-tag">&lt;</span>script</span> <span class="token attr-name cye-lm-tag">src</span><span class="token attr-value cye-lm-tag"><span class="token punctuation cye-lm-tag">=</span><span class="token punctuation cye-lm-tag">"</span>https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.3.0/lodash.js<span class="token punctuation cye-lm-tag">"</span></span><span class="token punctuation cye-lm-tag">&gt;</span></span><span class="token script language-javascript cye-lm-tag"></span><span class="token tag cye-lm-tag"><span class="token tag cye-lm-tag"><span class="token punctuation cye-lm-tag">&lt;/</span>script</span><span class="token punctuation cye-lm-tag">&gt;</span></span>

<span class="token tag cye-lm-tag"><span class="token tag cye-lm-tag"><span class="token punctuation cye-lm-tag">&lt;</span>p</span><span class="token punctuation cye-lm-tag">&gt;</span></span>Функция <span class="token tag cye-lm-tag"><span class="token tag cye-lm-tag"><span class="token punctuation cye-lm-tag">&lt;</span>code</span><span class="token punctuation cye-lm-tag">&gt;</span></span>_.defaults()<span class="token tag cye-lm-tag"><span class="token tag cye-lm-tag"><span class="token punctuation cye-lm-tag">&lt;/</span>code</span><span class="token punctuation cye-lm-tag">&gt;</span></span> добавляет отсутствующие свойства.<span class="token tag cye-lm-tag"><span class="token tag cye-lm-tag"><span class="token punctuation cye-lm-tag">&lt;/</span>p</span><span class="token punctuation cye-lm-tag">&gt;</span></span>
<span class="token tag cye-lm-tag"><span class="token tag cye-lm-tag"><span class="token punctuation cye-lm-tag">&lt;</span>script</span><span class="token punctuation cye-lm-tag">&gt;</span></span><span class="token script language-javascript cye-lm-tag">
  <span class="token keyword cye-lm-tag">var</span> user <span class="token operator cye-lm-tag">=</span> <span class="token punctuation cye-lm-tag">{</span>
    name<span class="token punctuation cye-lm-tag">:</span> <span class="token string cye-lm-tag">'Вася'</span>
  <span class="token punctuation cye-lm-tag">}</span><span class="token punctuation cye-lm-tag">;</span>

  _<span class="token punctuation cye-lm-tag">.</span><span class="token function cye-lm-tag">defaults</span><span class="token punctuation cye-lm-tag">(</span>user<span class="token punctuation cye-lm-tag">,</span> <span class="token punctuation cye-lm-tag">{</span>
    name<span class="token punctuation cye-lm-tag">:</span> <span class="token string cye-lm-tag">'Не указано'</span><span class="token punctuation cye-lm-tag">,</span>
    employer<span class="token punctuation cye-lm-tag">:</span> <span class="token string cye-lm-tag">'Не указан'</span>
  <span class="token punctuation cye-lm-tag">}</span><span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span>

  <span class="token function cye-lm-tag">alert</span><span class="token punctuation cye-lm-tag">(</span> user<span class="token punctuation cye-lm-tag">.</span>name <span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span> <span class="token comment cye-lm-tag" spellcheck="true">// Вася</span>
  <span class="token function cye-lm-tag">alert</span><span class="token punctuation cye-lm-tag">(</span> user<span class="token punctuation cye-lm-tag">.</span>employer <span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span> <span class="token comment cye-lm-tag" spellcheck="true">// Не указан</span>
  <span class="token function cye-lm-tag">alert</span><span class="token punctuation cye-lm-tag">(</span> _<span class="token punctuation cye-lm-tag">.</span><span class="token function cye-lm-tag">size</span><span class="token punctuation cye-lm-tag">(</span>user<span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span> <span class="token comment cye-lm-tag" spellcheck="true">// 2</span>
</span><span class="token tag cye-lm-tag"><span class="token tag cye-lm-tag"><span class="token punctuation cye-lm-tag">&lt;/</span>script</span><span class="token punctuation cye-lm-tag">&gt;</span></span></code><span class="line-numbers-rows cye-lm-tag"><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span></span></pre>
        </div>
      </div>
      
      </div><p class="cye-lm-tag">Здесь нам не важно, какие функции или методы библиотеки используются, нас интересует именно как описана эта библиотека, как в ней применяется приём «модуль».</p>
<p class="cye-lm-tag">Вот примерная выдержка из исходного файла:</p>
<div data-trusted="1" class="code-example" data-highlight-block="2-2,7-7,11-11,16-16,21-21" data-prism-done="1">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers  language-javascript"><code class=" language-javascript"><span class="token punctuation cye-lm-tag">;</span><span class="token punctuation cye-lm-tag">(</span><span class="token keyword cye-lm-tag">function</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">{</span>

  <span class="token comment cye-lm-tag" spellcheck="true">// lodash - основная функция для библиотеки</span>
  <span class="token keyword cye-lm-tag">function</span> <span class="token function cye-lm-tag">lodash</span><span class="token punctuation cye-lm-tag">(</span>value<span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">{</span>
    <span class="token comment cye-lm-tag" spellcheck="true">// ...</span>
  <span class="token punctuation cye-lm-tag">}</span>

  <span class="token comment cye-lm-tag" spellcheck="true">// вспомогательная переменная</span>
  <span class="token keyword cye-lm-tag">var</span> version <span class="token operator cye-lm-tag">=</span> <span class="token string cye-lm-tag">'2.4.1'</span><span class="token punctuation cye-lm-tag">;</span>
  <span class="token comment cye-lm-tag" spellcheck="true">// ... другие вспомогательные переменные и функции</span>

  <span class="token comment cye-lm-tag" spellcheck="true">// код функции size, пока что доступен только внутри</span>
  <span class="token keyword cye-lm-tag">function</span> <span class="token function cye-lm-tag">size</span><span class="token punctuation cye-lm-tag">(</span>collection<span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">{</span>
    <span class="token keyword cye-lm-tag">return</span> Object<span class="token punctuation cye-lm-tag">.</span><span class="token function cye-lm-tag">keys</span><span class="token punctuation cye-lm-tag">(</span>collection<span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">.</span>length<span class="token punctuation cye-lm-tag">;</span>
  <span class="token punctuation cye-lm-tag">}</span>

  <span class="token comment cye-lm-tag" spellcheck="true">// присвоим в lodash size и другие функции, которые нужно вынести из модуля</span>
  lodash<span class="token punctuation cye-lm-tag">.</span>size <span class="token operator cye-lm-tag">=</span> size
  <span class="token comment cye-lm-tag" spellcheck="true">// lodash.defaults = ...</span>
  <span class="token comment cye-lm-tag" spellcheck="true">// lodash.cloneDeep = ...</span>

  <span class="token comment cye-lm-tag" spellcheck="true">// "экспортировать" lodash наружу из модуля</span>
  window<span class="token punctuation cye-lm-tag">.</span>_ <span class="token operator cye-lm-tag">=</span> lodash<span class="token punctuation cye-lm-tag">;</span> <span class="token comment cye-lm-tag" spellcheck="true">// в оригинальном коде здесь сложнее, но смысл тот же</span>

<span class="token punctuation cye-lm-tag">}</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span></code><span class="line-numbers-rows cye-lm-tag"><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span></span></pre>
        </div>
      </div>
      
      </div><p class="cye-lm-tag">Внутри внешней функции:</p>
<ol>
<li>Происходит что угодно, объявляются свои локальные переменные, функции.</li>
<li>В <code>window</code> выносится то, что нужно снаружи.</li>
</ol>
<p class="cye-lm-tag">Технически, мы могли бы вынести в <code>window</code> не только <code>lodash</code>, но и вообще все объекты и функции. На практике, как раз наоборот, всё прячут внутри модуля, глобальную область во избежание конфликтов хранят максимально чистой.</p>
<div class="important important_smart">
            <div class="important__header"><span class="important__type cye-lm-tag">Зачем точка с запятой в начале?</span></div>
            <div class="important__content"><p class="cye-lm-tag">В начале кода выше находится точка с запятой <code>;</code> – это не опечатка, а особая «защита от дураков».</p>
<p class="cye-lm-tag">Если получится, что несколько JS-файлов объединены в один (и, скорее всего, сжаты минификатором, но это не важно), и программист забыл поставить точку с запятой, то будет ошибка.</p>
<p class="cye-lm-tag">Например, первый файл <code>a.js</code>:</p>
<div data-trusted="1" class="code-example" data-prism-done="1">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers  language-javascript"><code class=" language-javascript"><span class="token keyword cye-lm-tag">var</span> a <span class="token operator cye-lm-tag">=</span> <span class="token number cye-lm-tag">5</span></code><span class="line-numbers-rows cye-lm-tag"><span class="cye-lm-tag"></span></span></pre>
        </div>
      </div>
      
      </div><p class="cye-lm-tag">Второй файл <code>lib.js</code>:</p>
<div data-trusted="1" class="code-example" data-prism-done="1">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers  language-javascript"><code class=" language-javascript"><span class="token punctuation cye-lm-tag">(</span><span class="token keyword cye-lm-tag">function</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">{</span>
  <span class="token comment cye-lm-tag" spellcheck="true">// без точки с запятой в начале</span>
<span class="token punctuation cye-lm-tag">}</span><span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span></code><span class="line-numbers-rows cye-lm-tag"><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span></span></pre>
        </div>
      </div>
      
      </div><p class="cye-lm-tag">После объединения в один файл:</p>
<div data-trusted="1" class="code-example" data-highlight-block="0-0" data-prism-done="1">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers  language-javascript"><code class=" language-javascript"><span class="token keyword cye-lm-tag">var</span> a <span class="token operator cye-lm-tag">=</span> <span class="token number cye-lm-tag">5</span>

<span class="token comment cye-lm-tag" spellcheck="true">// библиотека</span>
<span class="token punctuation cye-lm-tag">(</span><span class="token keyword cye-lm-tag">function</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">{</span>
  <span class="token comment cye-lm-tag" spellcheck="true">// ...</span>
<span class="token punctuation cye-lm-tag">}</span><span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span></code><span class="line-numbers-rows cye-lm-tag"><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span></span></pre>
        </div>
      </div>
      
      </div><p class="cye-lm-tag">При запуске будет ошибка, потому что интерпретатор перед скобкой сам не вставит точку с запятой. Он просто поймёт код как <code>var a = 5(function ...)</code>, то есть пытается вызвать число <code>5</code> как функцию.</p>
<p class="cye-lm-tag">Таковы правила языка, и поэтому рекомендуется явно ставить точку с запятой. В данном случае автор lodash ставит <code>;</code> перед функцией, чтобы предупредить эту ошибку.</p>
</div></div>
<h2><a class="main__anchor" name="экспорт-через-return" href="#экспорт-через-return">Экспорт через return</a></h2><p class="cye-lm-tag">Можно оформить модуль и чуть по-другому, например передать значение через <code>return</code>:</p>
<div data-trusted="1" class="code-example" data-prism-done="1">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers  language-javascript"><code class=" language-javascript"><span class="token keyword cye-lm-tag">var</span> lodash <span class="token operator cye-lm-tag">=</span> <span class="token punctuation cye-lm-tag">(</span><span class="token keyword cye-lm-tag">function</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">{</span>

  <span class="token keyword cye-lm-tag">var</span> version<span class="token punctuation cye-lm-tag">;</span>
  <span class="token keyword cye-lm-tag">function</span> <span class="token function cye-lm-tag">assignDefaults</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">{</span> <span class="token operator cye-lm-tag">...</span> <span class="token punctuation cye-lm-tag">}</span>

  <span class="token keyword cye-lm-tag">return</span> <span class="token punctuation cye-lm-tag">{</span>
    defaults<span class="token punctuation cye-lm-tag">:</span> <span class="token keyword cye-lm-tag">function</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">{</span>  <span class="token punctuation cye-lm-tag">}</span>
  <span class="token punctuation cye-lm-tag">}</span>

<span class="token punctuation cye-lm-tag">}</span><span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span></code><span class="line-numbers-rows cye-lm-tag"><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span></span></pre>
        </div>
      </div>
      
      </div><p class="cye-lm-tag">Здесь, кстати, скобки вокруг внешней <code>function() { ... }</code> не обязательны, ведь функция и так объявлена внутри выражения присваивания, а значит – является Function Expression.</p>
<p class="cye-lm-tag">Тем не менее, лучше их ставить, для улучшения читаемости кода, чтобы было сразу видно, что это не простое присвоение функции.</p>
<h2><a class="main__anchor" name="итого" href="#итого">Итого</a></h2><p class="cye-lm-tag">Модуль при помощи замыканий – это оборачивание пакета функционала в единую внешнюю функцию, которая тут же выполняется.</p>
<p class="cye-lm-tag">Все функции модуля будут иметь доступ к другим переменным и внутренним функциям этого же модуля через замыкание.</p>
<p class="cye-lm-tag">Например, <code>defaults</code> из примера выше имеет доступ к <code>assignDefaults</code>.</p>
<p class="cye-lm-tag">Но снаружи программист, использующий модуль, может обращаться напрямую только к тем переменным и функциям, которые экспортированы. Благодаря этому будут скрыты внутренние аспекты реализации, которые нужны только разработчику модуля.</p>
<p class="cye-lm-tag">Можно придумать и много других вариаций такого подхода. В конце концов, «модуль» – это всего лишь функция-обёртка для скрытия переменных.</p>
</div>
<br><hr>
<h2>Управление памятью в JavaScript</h2>
<div itemprop="articleBody"><p class="cye-lm-tag">Управление памятью в JavaScript обычно происходит незаметно. Мы создаём примитивы, объекты, функции… Всё это занимает память.</p>
<p class="cye-lm-tag">Что происходит с объектом, когда он становится «не нужен»? Возможно ли «переполнение» памяти? Для ответа на эти вопросы – залезем «под капот» интерпретатора.</p>
<cut>
<h2><a class="main__anchor" name="управление-памятью-в-javascript" href="#управление-памятью-в-javascript">Управление памятью в JavaScript</a></h2><p class="cye-lm-tag">Главной концепцией управления памятью в JavaScript является принцип  <em>достижимости</em> (англ. reachability).</p>
<ol>
<li>Определённое множество значений считается достижимым изначально, в частности:</li>
</ol>
<ul>
<li>
<p class="cye-lm-tag">Значения, ссылки на которые содержатся в стеке вызова, то есть – все локальные переменные и параметры функций, которые в настоящий момент выполняются или находятся в ожидании окончания вложенного вызова.</p>
</li>
<li>
<p class="cye-lm-tag">Все глобальные переменные.</p>
<p class="cye-lm-tag">Эти значения гарантированно хранятся в памяти. Мы будем называть их <em>корнями</em>.</p>
</li>
</ul>
<ol start="2">
<li><strong>Любое другое значение сохраняется в памяти лишь до тех пор, пока доступно из корня по ссылке или цепочке ссылок.</strong></li>
</ol>
<p class="cye-lm-tag">Для очистки памяти от недостижимых значений в браузерах используется автоматический <a href="https://en.wikipedia.org/wiki/Garbage_collection_(computer_science)">Сборщик мусора</a> (англ. Garbage collection, GC), встроенный в интерпретатор, который наблюдает за объектами и время от времени удаляет недостижимые.</p>
<p class="cye-lm-tag">Самая простая ситуация здесь с примитивами. При присвоении они копируются целиком, ссылок на них не создаётся, так что если в переменной была одна строка, а её заменили на другую, то предыдущую можно смело выбросить.</p>
<p class="cye-lm-tag">Именно объекты требуют специального «сборщика мусора», который наблюдает за ссылками, так как на один объект может быть много ссылок из разных переменных и, при перезаписи одной из них, объект может быть всё ещё доступен из другой.</p>
<p class="cye-lm-tag">Далее мы посмотрим ряд примеров, которые помогут в этом разобраться.</p>
<h3><a class="main__anchor" name="достижимость-и-наличие-ссылок" href="#достижимость-и-наличие-ссылок">Достижимость и наличие ссылок</a></h3><p class="cye-lm-tag">Есть одно упрощение для работы с памятью: «значение остаётся в памяти, пока на него есть хотя бы одна ссылка».</p>
<p class="cye-lm-tag">Но такое упрощение будет верным лишь в одну сторону.</p>
<ul>
<li>
<p class="cye-lm-tag"><strong>Верно – в том плане, что если ссылок на значение нет, то память из-под него очищается.</strong></p>
<p class="cye-lm-tag">Например, была создана ссылка в переменной, и эту переменную тут же перезаписали:</p>
<div data-trusted="1" class="code-example" data-prism-done="1">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers  language-javascript"><code class=" language-javascript"><span class="token keyword cye-lm-tag">var</span> user <span class="token operator cye-lm-tag">=</span> <span class="token punctuation cye-lm-tag">{</span>
  name<span class="token punctuation cye-lm-tag">:</span> <span class="token string cye-lm-tag">"Вася"</span>
<span class="token punctuation cye-lm-tag">}</span><span class="token punctuation cye-lm-tag">;</span>
user <span class="token operator cye-lm-tag">=</span> <span class="token keyword cye-lm-tag">null</span><span class="token punctuation cye-lm-tag">;</span></code><span class="line-numbers-rows cye-lm-tag"><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span></span></pre>
        </div>
      </div>
      
      </div><p class="cye-lm-tag">Теперь объект <code>{ name: "Вася" }</code> более недоступен. Память будет освобождена.</p>
</li>
<li>
<p class="cye-lm-tag"><strong>Неверно – в другую сторону: наличие ссылки не гарантирует, что значение останется в памяти.</strong></p>
<p class="cye-lm-tag">Такая ситуация возникает с объектами, которые ссылаются друг на друга:</p>
<div data-trusted="1" class="code-example" data-prism-done="1">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers  language-javascript"><code class=" language-javascript"><span class="token keyword cye-lm-tag">var</span> vasya <span class="token operator cye-lm-tag">=</span> <span class="token punctuation cye-lm-tag">{</span><span class="token punctuation cye-lm-tag">}</span><span class="token punctuation cye-lm-tag">;</span>
<span class="token keyword cye-lm-tag">var</span> petya <span class="token operator cye-lm-tag">=</span> <span class="token punctuation cye-lm-tag">{</span><span class="token punctuation cye-lm-tag">}</span><span class="token punctuation cye-lm-tag">;</span>
vasya<span class="token punctuation cye-lm-tag">.</span>friend <span class="token operator cye-lm-tag">=</span> petya<span class="token punctuation cye-lm-tag">;</span>
petya<span class="token punctuation cye-lm-tag">.</span>friend <span class="token operator cye-lm-tag">=</span> vasya<span class="token punctuation cye-lm-tag">;</span>

vasya <span class="token operator cye-lm-tag">=</span> petya <span class="token operator cye-lm-tag">=</span> <span class="token keyword cye-lm-tag">null</span><span class="token punctuation cye-lm-tag">;</span></code><span class="line-numbers-rows cye-lm-tag"><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span></span></pre>
        </div>
      </div>
      
      </div><p class="cye-lm-tag">Несмотря на то, что на объекты <code>vasya</code>, <code>petya</code> ссылаются друг на друга через ссылку <code>friend</code>, то есть можно сказать, что на каждый из них есть ссылка, последняя строка делает эти объекты в совокупности недостижимыми.</p>
<p class="cye-lm-tag">Поэтому они будут удалены из памяти.</p>
<p class="cye-lm-tag">Здесь как раз и играет роль «достижимость» – оба этих объекта становятся недостижимы из корней, в первую очередь, из глобальной области, стека.</p>
</li>
</ul>
<p class="cye-lm-tag"><a href="https://ru.wikipedia.org/wiki/%D0%A1%D0%B1%D0%BE%D1%80%D0%BA%D0%B0_%D0%BC%D1%83%D1%81%D0%BE%D1%80%D0%B0_(%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5)">Сборщик мусора</a> отслеживает такие ситуации и очищает память.</p>
<h2><a class="main__anchor" name="алгоритм-сборки-мусора" href="#алгоритм-сборки-мусора">Алгоритм сборки мусора</a></h2><p class="cye-lm-tag">Сборщик мусора идёт от корня по ссылкам и запоминает все найденные объекты. По окончанию – он смотрит, какие объекты в нём отсутствуют и удаляет их.</p>
<p class="cye-lm-tag">Например, рассмотрим пример объекта «семья»:</p>
<div data-trusted="1" class="code-example" data-prism-done="1">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers  language-javascript"><code class=" language-javascript"><span class="token keyword cye-lm-tag">function</span> <span class="token function cye-lm-tag">marry</span><span class="token punctuation cye-lm-tag">(</span>man<span class="token punctuation cye-lm-tag">,</span> woman<span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">{</span>
  woman<span class="token punctuation cye-lm-tag">.</span>husband <span class="token operator cye-lm-tag">=</span> man<span class="token punctuation cye-lm-tag">;</span>
  man<span class="token punctuation cye-lm-tag">.</span>wife <span class="token operator cye-lm-tag">=</span> woman<span class="token punctuation cye-lm-tag">;</span>

  <span class="token keyword cye-lm-tag">return</span> <span class="token punctuation cye-lm-tag">{</span>
    father<span class="token punctuation cye-lm-tag">:</span> man<span class="token punctuation cye-lm-tag">,</span>
    mother<span class="token punctuation cye-lm-tag">:</span> woman
  <span class="token punctuation cye-lm-tag">}</span>
<span class="token punctuation cye-lm-tag">}</span>

<span class="token keyword cye-lm-tag">var</span> family <span class="token operator cye-lm-tag">=</span> <span class="token function cye-lm-tag">marry</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">{</span>
  name<span class="token punctuation cye-lm-tag">:</span> <span class="token string cye-lm-tag">"Василий"</span>
<span class="token punctuation cye-lm-tag">}</span><span class="token punctuation cye-lm-tag">,</span> <span class="token punctuation cye-lm-tag">{</span>
  name<span class="token punctuation cye-lm-tag">:</span> <span class="token string cye-lm-tag">"Мария"</span>
<span class="token punctuation cye-lm-tag">}</span><span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span></code><span class="line-numbers-rows cye-lm-tag"><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span></span></pre>
        </div>
      </div>
      
      </div><p class="cye-lm-tag">Функция <code>marry</code> принимает два объекта, даёт им ссылки друг на друга и возвращает третий, содержащий ссылки на оба.</p>
<p class="cye-lm-tag">Получившийся объект <code>family</code> можно изобразить так:</p>
<figure><div class="image" style="width:337px">
      <div class="image__ratio" style="padding-top:63.798219584569736%"></div>
      <img src="https://learn.javascript.ru/article/memory-management/family@2x.png" alt="" width="337" height="215" class="image__image">
      </div></figure><p class="cye-lm-tag">Здесь стрелочками показаны ссылки, а вот свойство <code>name</code> ссылкой не является, там хранится примитив, поэтому оно внутри самого объекта.</p>
<p class="cye-lm-tag">Чтобы запустить сборщик мусора, удалим две ссылки:</p>
<div data-trusted="1" class="code-example" data-prism-done="1">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers  language-none"><code class=" language-none">delete family.father;
delete family.mother.husband;</code><span class="line-numbers-rows cye-lm-tag"><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span></span></pre>
        </div>
      </div>
      
      </div><p class="cye-lm-tag">Обратим внимание, удаление только одной из этих ссылок ни к чему бы не привело. Пока до объекта можно добраться из корня <code>window</code>, объект остаётся жив.</p>
<p class="cye-lm-tag">А если две, то получается, что от бывшего <code>family.father</code> ссылки выходят, но в него – ни одна не идёт:</p>
<figure><div class="image" style="width:399px">
      <div class="image__ratio" style="padding-top:60.6516290726817%"></div>
      <img src="https://learn.javascript.ru/article/memory-management/family-no-father@2x.png" alt="" width="399" height="242" class="image__image">
      </div></figure><p class="cye-lm-tag"><strong>Совершенно неважно, что из объекта выходят какие-то ссылки, они не влияют на достижимость этого объекта.</strong></p>
<p class="cye-lm-tag">Бывший <code>family.father</code> стал недостижимым и будет удалён вместе со своими данными, которые также более недоступны из программы.</p>
<figure><div class="image" style="width:144px">
      <div class="image__ratio" style="padding-top:156.25%"></div>
      <img src="https://learn.javascript.ru/article/memory-management/family-no-father-2@2x.png" alt="" width="144" height="225" class="image__image">
      </div></figure><p class="cye-lm-tag">А теперь – рассмотрим более сложный случай. Что будет, если удалить главную ссылку <code>family</code>?</p>
<p class="cye-lm-tag">Исходный объект – тот же, что и в начале, а затем:</p>
<div data-trusted="1" class="code-example" data-prism-done="1">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers  language-javascript"><code class=" language-javascript">window<span class="token punctuation cye-lm-tag">.</span>family <span class="token operator cye-lm-tag">=</span> <span class="token keyword cye-lm-tag">null</span><span class="token punctuation cye-lm-tag">;</span></code><span class="line-numbers-rows cye-lm-tag"><span class="cye-lm-tag"></span></span></pre>
        </div>
      </div>
      
      </div><p class="cye-lm-tag">Результат:</p>
<figure><div class="image" style="width:420px">
      <div class="image__ratio" style="padding-top:66.42857142857143%"></div>
      <img src="https://learn.javascript.ru/article/memory-management/family-no-family@2x.png" alt="" width="420" height="279" class="image__image">
      </div></figure><p class="cye-lm-tag">Как видим, объекты в конструкции всё ещё связаны между собой. Однако, поиск от корня их не находит, они не достижимы, и значит сборщик мусора удалит их из памяти.</p>
<div class="important important_smart">
            <div class="important__header"><span class="important__type cye-lm-tag">Оптимизации</span></div>
            <div class="important__content"><p class="cye-lm-tag">Проблема описанного алгоритма – в больших задержках. Если объектов много, то на поиск всех достижимых  уйдёт довольно много времени. А ведь выполнение скрипта при этом должно быть остановлено, уже просканированные объекты не должны поменяться до окончания процесса. Получаются небольшие, но неприятные паузы-зависания в работе скрипта.</p>
<p class="cye-lm-tag">Поэтому современные интерпретаторы применяют различные оптимизации.</p>
<p class="cye-lm-tag">Самая частая – это деление объектов на два вида «старые» и «новые». Для каждого типа выделяется своя область памяти. Каждый объект создаётся в «новой» области и, если прожил достаточно долго, мигрирует в старую. «Новая» область обычно небольшая. Она очищается часто. «Старая» – редко.</p>
<p class="cye-lm-tag">На практике получается эффективно, обычно большинство объектов создаются и умирают почти сразу, к примеру, служа локальными переменными функции:</p>
<div data-trusted="1" class="code-example" data-prism-done="1">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers  language-javascript"><code class=" language-javascript"><span class="token keyword cye-lm-tag">function</span> <span class="token function cye-lm-tag">showTime</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">{</span>
  <span class="token function cye-lm-tag">alert</span><span class="token punctuation cye-lm-tag">(</span> <span class="token keyword cye-lm-tag">new</span> <span class="token class-name cye-lm-tag">Date</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span> <span class="token comment cye-lm-tag" spellcheck="true">// этот объект будет создан и умрёт сразу</span>
<span class="token punctuation cye-lm-tag">}</span></code><span class="line-numbers-rows cye-lm-tag"><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span></span></pre>
        </div>
      </div>
      
      </div><p class="cye-lm-tag">Если вы знаете низкоуровневые языки программирования, то более подробно об организации сборки мусора в V8 можно почитать, например, в статье <a href="http://jayconrod.com/posts/55/a-tour-of-v8-garbage-collection">A tour of V8: Garbage Collection</a>.</p>
</div></div>
<h2><a class="main__anchor" name="замыкания" href="#замыкания">Замыкания</a></h2><p class="cye-lm-tag">Объекты переменных, о которых шла речь ранее, в главе про замыкания, также подвержены сборке мусора. Они следуют тем же правилам, что и обычные объекты.</p>
<p class="cye-lm-tag">Объект переменных внешней функции существует в памяти до тех пор, пока существует хоть одна внутренняя функция, ссылающаяся на него через свойство <code>[[Scope]]</code>.</p>
<p class="cye-lm-tag">Например:</p>
<ul>
<li>
<p class="cye-lm-tag">Обычно объект переменных удаляется по завершении работы функции. Даже если в нём есть объявление внутренней функции:</p>
<div data-trusted="1" class="code-example" data-prism-done="1">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers  language-javascript"><code class=" language-javascript"><span class="token keyword cye-lm-tag">function</span> <span class="token function cye-lm-tag">f</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">{</span>
  <span class="token keyword cye-lm-tag">var</span> value <span class="token operator cye-lm-tag">=</span> <span class="token number cye-lm-tag">123</span><span class="token punctuation cye-lm-tag">;</span>

  <span class="token keyword cye-lm-tag">function</span> <span class="token function cye-lm-tag">g</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">{</span><span class="token punctuation cye-lm-tag">}</span> <span class="token comment cye-lm-tag" spellcheck="true">// g видна только изнутри</span>
<span class="token punctuation cye-lm-tag">}</span>

<span class="token function cye-lm-tag">f</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span></code><span class="line-numbers-rows cye-lm-tag"><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span></span></pre>
        </div>
      </div>
      
      </div><p class="cye-lm-tag">В коде выше <code>value</code> и <code>g</code> являются свойствами объекта переменных. Во время выполнения <code>f()</code> её объект переменных находится в текущем стеке выполнения, поэтому жив. По окончанию, он станет недостижимым и будет убран из памяти вместе с остальными локальными переменными.</p>
</li>
<li>
<p class="cye-lm-tag">…А вот в этом случае лексическое окружение, включая переменную <code>value</code>, будет сохранено:</p>
<div data-trusted="1" class="code-example" data-highlight-block="5-5" data-prism-done="1">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers  language-javascript"><code class=" language-javascript"><span class="token keyword cye-lm-tag">function</span> <span class="token function cye-lm-tag">f</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">{</span>
  <span class="token keyword cye-lm-tag">var</span> value <span class="token operator cye-lm-tag">=</span> <span class="token number cye-lm-tag">123</span><span class="token punctuation cye-lm-tag">;</span>

  <span class="token keyword cye-lm-tag">function</span> <span class="token function cye-lm-tag">g</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">{</span><span class="token punctuation cye-lm-tag">}</span>

  <span class="token keyword cye-lm-tag">return</span> g<span class="token punctuation cye-lm-tag">;</span>
<span class="token punctuation cye-lm-tag">}</span>

<span class="token keyword cye-lm-tag">var</span> g <span class="token operator cye-lm-tag">=</span> <span class="token function cye-lm-tag">f</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span> <span class="token comment cye-lm-tag" spellcheck="true">// функция g будет жить и сохранит ссылку на объект переменных</span></code><span class="line-numbers-rows cye-lm-tag"><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span></span></pre>
        </div>
      </div>
      
      </div><p class="cye-lm-tag">В скрытом свойстве <code>g.[[Scope]]</code> находится ссылка на объект переменных, в котором была создана <code>g</code>. Поэтому этот объект переменных останется в памяти, а в нём – и <code>value</code>.</p>
</li>
<li>
<p class="cye-lm-tag">Если <code>f()</code> будет вызываться много раз, а полученные функции будут сохраняться, например, складываться в массив, то будут сохраняться и объекты <code>LexicalEnvironment</code> с соответствующими значениями  <code>value</code>:</p>
<div data-trusted="1" class="code-example" data-prism-done="1">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers  language-javascript"><code class=" language-javascript"><span class="token keyword cye-lm-tag">function</span> <span class="token function cye-lm-tag">f</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">{</span>
  <span class="token keyword cye-lm-tag">var</span> value <span class="token operator cye-lm-tag">=</span> Math<span class="token punctuation cye-lm-tag">.</span><span class="token function cye-lm-tag">random</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span>

  <span class="token keyword cye-lm-tag">return</span> <span class="token keyword cye-lm-tag">function</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">{</span><span class="token punctuation cye-lm-tag">}</span><span class="token punctuation cye-lm-tag">;</span>
<span class="token punctuation cye-lm-tag">}</span>

<span class="token comment cye-lm-tag" spellcheck="true">// 3 функции, каждая ссылается на свой объект переменных,</span>
<span class="token comment cye-lm-tag" spellcheck="true">// каждый со своим значением value</span>
<span class="token keyword cye-lm-tag">var</span> arr <span class="token operator cye-lm-tag">=</span> <span class="token punctuation cye-lm-tag">[</span><span class="token function cye-lm-tag">f</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">,</span> <span class="token function cye-lm-tag">f</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">,</span> <span class="token function cye-lm-tag">f</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">]</span><span class="token punctuation cye-lm-tag">;</span></code><span class="line-numbers-rows cye-lm-tag"><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span></span></pre>
        </div>
      </div>
      
      </div></li>
<li>
<p class="cye-lm-tag">Объект <code>LexicalEnvironment</code> живёт ровно до тех пор, пока на него существуют ссылки. В коде ниже после удаления ссылки на <code>g</code> умирает:</p>
<div data-trusted="1" class="code-example" data-prism-done="1">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers  language-javascript"><code class=" language-javascript"><span class="token keyword cye-lm-tag">function</span> <span class="token function cye-lm-tag">f</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">{</span>
  <span class="token keyword cye-lm-tag">var</span> value <span class="token operator cye-lm-tag">=</span> <span class="token number cye-lm-tag">123</span><span class="token punctuation cye-lm-tag">;</span>

  <span class="token keyword cye-lm-tag">function</span> <span class="token function cye-lm-tag">g</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">{</span><span class="token punctuation cye-lm-tag">}</span>

  <span class="token keyword cye-lm-tag">return</span> g<span class="token punctuation cye-lm-tag">;</span>
<span class="token punctuation cye-lm-tag">}</span>

<span class="token keyword cye-lm-tag">var</span> g <span class="token operator cye-lm-tag">=</span> <span class="token function cye-lm-tag">f</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span> <span class="token comment cye-lm-tag" spellcheck="true">// функция g жива</span>
<span class="token comment cye-lm-tag" spellcheck="true">// а значит в памяти остается соответствующий объект переменных f()</span>

g <span class="token operator cye-lm-tag">=</span> <span class="token keyword cye-lm-tag">null</span><span class="token punctuation cye-lm-tag">;</span> <span class="token comment cye-lm-tag" spellcheck="true">// ..а вот теперь память будет очищена</span></code><span class="line-numbers-rows cye-lm-tag"><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span></span></pre>
        </div>
      </div>
      
      </div></li>
</ul>
<h3><a class="main__anchor" name="оптимизация-в-v8-и-её-последствия" href="#оптимизация-в-v8-и-её-последствия">Оптимизация в V8 и её последствия</a></h3><p class="cye-lm-tag">Современные JS-движки делают оптимизации замыканий по памяти. Они анализируют использование переменных и в случае, когда переменная из замыкания абсолютно точно не используется, удаляют её.</p>
<p class="cye-lm-tag">В коде выше переменная <code>value</code> никак не используется. Поэтому она будет удалена из памяти.</p>
<p class="cye-lm-tag"><strong>Важный побочный эффект в V8 (Chrome, Opera) состоит в том, что удалённая переменная станет недоступна и при отладке!</strong></p>
<p class="cye-lm-tag">Попробуйте запустить пример ниже с открытой консолью Chrome. Когда он остановится, в консоли наберите <code>alert(value)</code>.</p>
<div data-trusted="1" class="code-example" data-prism-done="1">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers  language-javascript"><code class=" language-javascript"><span class="token keyword cye-lm-tag">function</span> <span class="token function cye-lm-tag">f</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">{</span>
  <span class="token keyword cye-lm-tag">var</span> value <span class="token operator cye-lm-tag">=</span> Math<span class="token punctuation cye-lm-tag">.</span><span class="token function cye-lm-tag">random</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span>

  <span class="token keyword cye-lm-tag">function</span> <span class="token function cye-lm-tag">g</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">{</span>
    <span class="token keyword cye-lm-tag">debugger</span><span class="token punctuation cye-lm-tag">;</span> <span class="token comment cye-lm-tag" spellcheck="true">// выполните в консоли alert( value ); Нет такой переменной!</span>
  <span class="token punctuation cye-lm-tag">}</span>

  <span class="token keyword cye-lm-tag">return</span> g<span class="token punctuation cye-lm-tag">;</span>
<span class="token punctuation cye-lm-tag">}</span>

<span class="token keyword cye-lm-tag">var</span> g <span class="token operator cye-lm-tag">=</span> <span class="token function cye-lm-tag">f</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span>
<span class="token function cye-lm-tag">g</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span></code><span class="line-numbers-rows cye-lm-tag"><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span></span></pre>
        </div>
      </div>
      
      </div><p class="cye-lm-tag">Как вы могли увидеть – нет такой переменной! Недоступна она изнутри <code>g</code>. Интерпретатор решил, что она нам не понадобится и удалил.</p>
<p class="cye-lm-tag">Это может привести к забавным казусам при отладке, вплоть до того что вместо этой переменной будет другая, внешняя:</p>
<div data-trusted="1" class="code-example" data-prism-done="1">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers  language-javascript"><code class=" language-javascript"><span class="token keyword cye-lm-tag">var</span> value <span class="token operator cye-lm-tag">=</span> <span class="token string cye-lm-tag">"Сюрприз"</span><span class="token punctuation cye-lm-tag">;</span>

<span class="token keyword cye-lm-tag">function</span> <span class="token function cye-lm-tag">f</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">{</span>
  <span class="token keyword cye-lm-tag">var</span> value <span class="token operator cye-lm-tag">=</span> <span class="token string cye-lm-tag">"самое близкое значение"</span><span class="token punctuation cye-lm-tag">;</span>

  <span class="token keyword cye-lm-tag">function</span> <span class="token function cye-lm-tag">g</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">{</span>
    <span class="token keyword cye-lm-tag">debugger</span><span class="token punctuation cye-lm-tag">;</span> <span class="token comment cye-lm-tag" spellcheck="true">// выполните в консоли alert( value ); Сюрприз!</span>
  <span class="token punctuation cye-lm-tag">}</span>

  <span class="token keyword cye-lm-tag">return</span> g<span class="token punctuation cye-lm-tag">;</span>
<span class="token punctuation cye-lm-tag">}</span>

<span class="token keyword cye-lm-tag">var</span> g <span class="token operator cye-lm-tag">=</span> <span class="token function cye-lm-tag">f</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span>
<span class="token function cye-lm-tag">g</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span></code><span class="line-numbers-rows cye-lm-tag"><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span></span></pre>
        </div>
      </div>
      
      </div><div class="important important_warn">
            <div class="important__header"><span class="important__type cye-lm-tag">Ещё увидимся</span></div>
            <div class="important__content"><p class="cye-lm-tag">Об этой особенности важно знать. Если вы отлаживаете под Chrome/Opera, то наверняка рано или поздно с ней встретитесь!</p>
<p class="cye-lm-tag">Это не глюк отладчика, а особенность работы V8, которая, возможно, будет когда-нибудь изменена. Вы всегда сможете проверить, не изменилось ли чего, запустив примеры на этой странице.</p>
</div></div>
<h2><a class="main__anchor" name="влияние-управления-памятью-на-скорость" href="#влияние-управления-памятью-на-скорость">Влияние управления памятью на скорость</a></h2><p class="cye-lm-tag">На создание новых объектов и их удаление тратится время. Это важно иметь в виду в случае, когда важна производительность.</p>
<p class="cye-lm-tag">В качестве примера рассмотрим рекурсию. При вложенных вызовах каждый раз создаётся новый объект с переменными и помещается в стек. Потом память из-под него нужно очистить. Поэтому рекурсивный код будет всегда медленнее использующего цикл, но насколько?</p>
<p class="cye-lm-tag">Пример ниже тестирует сложение чисел до данного через рекурсию по сравнению с обычным циклом:</p>
<div data-trusted="1" class="code-example" data-prism-done="1">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers  language-javascript"><code class=" language-javascript"><span class="token keyword cye-lm-tag">function</span> <span class="token function cye-lm-tag">sumTo</span><span class="token punctuation cye-lm-tag">(</span>n<span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">{</span> <span class="token comment cye-lm-tag" spellcheck="true">// обычный цикл 1+2+...+n</span>
  <span class="token keyword cye-lm-tag">var</span> result <span class="token operator cye-lm-tag">=</span> <span class="token number cye-lm-tag">0</span><span class="token punctuation cye-lm-tag">;</span>
  <span class="token keyword cye-lm-tag">for</span> <span class="token punctuation cye-lm-tag">(</span><span class="token keyword cye-lm-tag">var</span> i <span class="token operator cye-lm-tag">=</span> <span class="token number cye-lm-tag">1</span><span class="token punctuation cye-lm-tag">;</span> i <span class="token operator cye-lm-tag">&lt;=</span> n<span class="token punctuation cye-lm-tag">;</span> i<span class="token operator cye-lm-tag">++</span><span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">{</span>
    result <span class="token operator cye-lm-tag">+</span><span class="token operator cye-lm-tag">=</span> i<span class="token punctuation cye-lm-tag">;</span>
  <span class="token punctuation cye-lm-tag">}</span>
  <span class="token keyword cye-lm-tag">return</span> result<span class="token punctuation cye-lm-tag">;</span>
<span class="token punctuation cye-lm-tag">}</span>

<span class="token keyword cye-lm-tag">function</span> <span class="token function cye-lm-tag">sumToRec</span><span class="token punctuation cye-lm-tag">(</span>n<span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">{</span> <span class="token comment cye-lm-tag" spellcheck="true">// рекурсия sumToRec(n) = n+SumToRec(n-1)</span>
  <span class="token keyword cye-lm-tag">return</span> n <span class="token operator cye-lm-tag">==</span> <span class="token number cye-lm-tag">1</span> <span class="token operator cye-lm-tag">?</span> <span class="token number cye-lm-tag">1</span> <span class="token punctuation cye-lm-tag">:</span> n <span class="token operator cye-lm-tag">+</span> <span class="token function cye-lm-tag">sumToRec</span><span class="token punctuation cye-lm-tag">(</span>n <span class="token operator cye-lm-tag">-</span> <span class="token number cye-lm-tag">1</span><span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span>
<span class="token punctuation cye-lm-tag">}</span>

<span class="token keyword cye-lm-tag">var</span> timeLoop <span class="token operator cye-lm-tag">=</span> performance<span class="token punctuation cye-lm-tag">.</span><span class="token function cye-lm-tag">now</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span>
<span class="token keyword cye-lm-tag">for</span> <span class="token punctuation cye-lm-tag">(</span><span class="token keyword cye-lm-tag">var</span> i <span class="token operator cye-lm-tag">=</span> <span class="token number cye-lm-tag">1</span><span class="token punctuation cye-lm-tag">;</span> i <span class="token operator cye-lm-tag">&lt;</span> <span class="token number cye-lm-tag">1000</span><span class="token punctuation cye-lm-tag">;</span> i<span class="token operator cye-lm-tag">++</span><span class="token punctuation cye-lm-tag">)</span> <span class="token function cye-lm-tag">sumTo</span><span class="token punctuation cye-lm-tag">(</span><span class="token number cye-lm-tag">1000</span><span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span> <span class="token comment cye-lm-tag" spellcheck="true">// цикл</span>
timeLoop <span class="token operator cye-lm-tag">=</span> performance<span class="token punctuation cye-lm-tag">.</span><span class="token function cye-lm-tag">now</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span> <span class="token operator cye-lm-tag">-</span> timeLoop<span class="token punctuation cye-lm-tag">;</span>

<span class="token keyword cye-lm-tag">var</span> timeRecursion <span class="token operator cye-lm-tag">=</span> performance<span class="token punctuation cye-lm-tag">.</span><span class="token function cye-lm-tag">now</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span>
<span class="token keyword cye-lm-tag">for</span> <span class="token punctuation cye-lm-tag">(</span><span class="token keyword cye-lm-tag">var</span> i <span class="token operator cye-lm-tag">=</span> <span class="token number cye-lm-tag">1</span><span class="token punctuation cye-lm-tag">;</span> i <span class="token operator cye-lm-tag">&lt;</span> <span class="token number cye-lm-tag">1000</span><span class="token punctuation cye-lm-tag">;</span> i<span class="token operator cye-lm-tag">++</span><span class="token punctuation cye-lm-tag">)</span> <span class="token function cye-lm-tag">sumToRec</span><span class="token punctuation cye-lm-tag">(</span><span class="token number cye-lm-tag">1000</span><span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span> <span class="token comment cye-lm-tag" spellcheck="true">// рекурсия</span>
timeRecursion <span class="token operator cye-lm-tag">=</span> performance<span class="token punctuation cye-lm-tag">.</span><span class="token function cye-lm-tag">now</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span> <span class="token operator cye-lm-tag">-</span> timeRecursion<span class="token punctuation cye-lm-tag">;</span>

<span class="token function cye-lm-tag">alert</span><span class="token punctuation cye-lm-tag">(</span> <span class="token string cye-lm-tag">"Разница в "</span> <span class="token operator cye-lm-tag">+</span> <span class="token punctuation cye-lm-tag">(</span>timeRecursion <span class="token operator cye-lm-tag">/</span> timeLoop<span class="token punctuation cye-lm-tag">)</span> <span class="token operator cye-lm-tag">+</span> <span class="token string cye-lm-tag">" раз"</span> <span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span></code><span class="line-numbers-rows cye-lm-tag"><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span></span></pre>
        </div>
      </div>
      
      </div><p class="cye-lm-tag">Различие в скорости на таком примере может составлять, в зависимости от интерпретатора, 2-10 раз.</p>
<p class="cye-lm-tag">Вообще, этот пример – не показателен. Ещё раз обращаю ваше внимание на то, что такие искусственные «микротесты» часто врут. Правильно их делать – отдельная наука, которая выходит за рамки этой главы. Но и на практике ускорение в 2-10 раз оптимизацией по количеству объектов (и вообще, любых значений) – отнюдь не миф, а вполне достижимо.</p>
<p class="cye-lm-tag">В реальной жизни в большинстве ситуаций такая оптимизация несущественна, просто потому что «JavaScript и так достаточно быстр». Но она может быть эффективной для «узких мест» кода.</p>
</cut></div>
<br><hr>
<h2>Устаревшая конструкция "with"</h2>
<div itemprop="articleBody"><p class="cye-lm-tag">Конструкция <code>with</code> позволяет использовать в качестве области видимости для переменных произвольный объект.</p>
<p class="cye-lm-tag">В современном JavaScript от этой конструкции отказались. С <code>use strict</code> она не работает, но её ещё можно найти в старом коде, так что стоит познакомиться с ней, чтобы если что – понимать, о чём речь.</p>
<cut>
<p class="cye-lm-tag">Синтаксис:</p>
<div data-trusted="1" class="code-example" data-prism-done="1">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers  language-javascript"><code class=" language-javascript"><span class="token keyword cye-lm-tag">with</span><span class="token punctuation cye-lm-tag">(</span>obj<span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">{</span>
  <span class="token operator cye-lm-tag">...</span>код<span class="token operator cye-lm-tag">...</span>
<span class="token punctuation cye-lm-tag">}</span></code><span class="line-numbers-rows cye-lm-tag"><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span></span></pre>
        </div>
      </div>
      
      </div><p class="cye-lm-tag">Любое обращение к переменной внутри <code>with</code> сначала ищет её среди свойств <code>obj</code>, а только потом – вне <code>with</code>.</p>
<h2><a class="main__anchor" name="пример" href="#пример">Пример</a></h2><p class="cye-lm-tag">В примере ниже переменная будет взята не из глобальной области, а из <code>obj</code>:</p>
<div data-trusted="1" class="code-example" data-no-strict="1" data-highlight-block="6-8" data-prism-done="1">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers  language-javascript"><code class=" language-javascript"><span class="token keyword cye-lm-tag">var</span> a <span class="token operator cye-lm-tag">=</span> <span class="token number cye-lm-tag">5</span><span class="token punctuation cye-lm-tag">;</span>

<span class="token keyword cye-lm-tag">var</span> obj <span class="token operator cye-lm-tag">=</span> <span class="token punctuation cye-lm-tag">{</span>
  a<span class="token punctuation cye-lm-tag">:</span> <span class="token number cye-lm-tag">10</span>
<span class="token punctuation cye-lm-tag">}</span><span class="token punctuation cye-lm-tag">;</span>

<span class="token keyword cye-lm-tag">with</span><span class="token punctuation cye-lm-tag">(</span>obj<span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">{</span>
    <span class="token function cye-lm-tag">alert</span><span class="token punctuation cye-lm-tag">(</span> a <span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span> <span class="token comment cye-lm-tag" spellcheck="true">// 10, из obj</span>
  <span class="token punctuation cye-lm-tag">}</span></code><span class="line-numbers-rows cye-lm-tag"><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span></span></pre>
        </div>
      </div>
      
      </div><p class="cye-lm-tag">Попробуем получить переменную, которой в <code>obj</code> нет:</p>
<div data-trusted="1" class="code-example" data-no-strict="1" data-highlight-block="6-8" data-prism-done="1">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers  language-javascript"><code class=" language-javascript"><span class="token keyword cye-lm-tag">var</span> b <span class="token operator cye-lm-tag">=</span> <span class="token number cye-lm-tag">1</span><span class="token punctuation cye-lm-tag">;</span>

<span class="token keyword cye-lm-tag">var</span> obj <span class="token operator cye-lm-tag">=</span> <span class="token punctuation cye-lm-tag">{</span>
  a<span class="token punctuation cye-lm-tag">:</span> <span class="token number cye-lm-tag">10</span>
<span class="token punctuation cye-lm-tag">}</span><span class="token punctuation cye-lm-tag">;</span>

<span class="token keyword cye-lm-tag">with</span><span class="token punctuation cye-lm-tag">(</span>obj<span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">{</span>
    <span class="token function cye-lm-tag">alert</span><span class="token punctuation cye-lm-tag">(</span> b <span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span> <span class="token comment cye-lm-tag" spellcheck="true">// 1, из window</span>
  <span class="token punctuation cye-lm-tag">}</span></code><span class="line-numbers-rows cye-lm-tag"><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span></span></pre>
        </div>
      </div>
      
      </div><p class="cye-lm-tag">Здесь интерпретатор сначала проверяет наличие <code>obj.b</code>, не находит и идет вне <code>with</code>.</p>
<p class="cye-lm-tag">Особенно забавно выглядит применение вложенных <code>with</code>:</p>
<div data-trusted="1" class="code-example" data-no-strict="1" data-highlight-block="10-10" data-prism-done="1">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers  language-javascript"><code class=" language-javascript"><span class="token keyword cye-lm-tag">var</span> obj <span class="token operator cye-lm-tag">=</span> <span class="token punctuation cye-lm-tag">{</span>
  weight<span class="token punctuation cye-lm-tag">:</span> <span class="token number cye-lm-tag">10</span><span class="token punctuation cye-lm-tag">,</span>
  size<span class="token punctuation cye-lm-tag">:</span> <span class="token punctuation cye-lm-tag">{</span>
    width<span class="token punctuation cye-lm-tag">:</span> <span class="token number cye-lm-tag">5</span><span class="token punctuation cye-lm-tag">,</span>
    height<span class="token punctuation cye-lm-tag">:</span> <span class="token number cye-lm-tag">7</span>
  <span class="token punctuation cye-lm-tag">}</span>
<span class="token punctuation cye-lm-tag">}</span><span class="token punctuation cye-lm-tag">;</span>

<span class="token keyword cye-lm-tag">with</span><span class="token punctuation cye-lm-tag">(</span>obj<span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">{</span>
  <span class="token keyword cye-lm-tag">with</span><span class="token punctuation cye-lm-tag">(</span>size<span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">{</span> <span class="token comment cye-lm-tag" spellcheck="true">// size будет взят из obj</span>
    <span class="token function cye-lm-tag">alert</span><span class="token punctuation cye-lm-tag">(</span> width <span class="token operator cye-lm-tag">*</span> height <span class="token operator cye-lm-tag">/</span> weight <span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span> <span class="token comment cye-lm-tag" spellcheck="true">// width,height из size, weight из obj</span>
  <span class="token punctuation cye-lm-tag">}</span>
<span class="token punctuation cye-lm-tag">}</span></code><span class="line-numbers-rows cye-lm-tag"><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span></span></pre>
        </div>
      </div>
      
      </div><p class="cye-lm-tag">Свойства из разных объектов используются как обычные переменные… Магия! Порядок поиска переменных в выделенном коде: <code>size =&gt; obj =&gt; window</code>.</p>
<h2><a class="main__anchor" name="изменения-переменной" href="#изменения-переменной">Изменения переменной</a></h2><p class="cye-lm-tag">При использовании <code>with</code>, как и во вложенных функциях – переменная изменяется в той области, где была найдена.</p>
<p class="cye-lm-tag">Например:</p>
<div data-trusted="1" class="code-example" data-no-strict="1" data-highlight-block="4-6" data-prism-done="1">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers  language-javascript"><code class=" language-javascript"><span class="token keyword cye-lm-tag">var</span> obj <span class="token operator cye-lm-tag">=</span> <span class="token punctuation cye-lm-tag">{</span>
  a<span class="token punctuation cye-lm-tag">:</span> <span class="token number cye-lm-tag">10</span>
<span class="token punctuation cye-lm-tag">}</span>

<span class="token keyword cye-lm-tag">with</span><span class="token punctuation cye-lm-tag">(</span>obj<span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">{</span>
    a <span class="token operator cye-lm-tag">=</span> <span class="token number cye-lm-tag">20</span><span class="token punctuation cye-lm-tag">;</span>
  <span class="token punctuation cye-lm-tag">}</span>
<span class="token function cye-lm-tag">alert</span><span class="token punctuation cye-lm-tag">(</span> obj<span class="token punctuation cye-lm-tag">.</span>a <span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span> <span class="token comment cye-lm-tag" spellcheck="true">// 20, переменная была изменена в объекте</span></code><span class="line-numbers-rows cye-lm-tag"><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span></span></pre>
        </div>
      </div>
      
      </div><h2><a class="main__anchor" name="почему-отказались-от-with" href="#почему-отказались-от-with">Почему отказались от with?</a></h2><p class="cye-lm-tag">Есть несколько причин.</p>
<ol>
<li>
<p class="cye-lm-tag">В современном стандарте <code>JavaScript</code> отказались от <code>with</code>, потому что конструкция <code>with</code> подвержена ошибкам и непрозрачна.</p>
<p class="cye-lm-tag">Проблемы возникают в том случае, когда в <code>with(obj)</code> присваивается переменная, которая по замыслу должна быть в свойствах <code>obj</code>, но ее там нет.</p>
<p class="cye-lm-tag">Например:</p>
<div data-trusted="1" class="code-example" data-no-strict="1" data-prism-done="1">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers  language-javascript"><code class=" language-javascript"><span class="token keyword cye-lm-tag">var</span> obj <span class="token operator cye-lm-tag">=</span> <span class="token punctuation cye-lm-tag">{</span>
  weight<span class="token punctuation cye-lm-tag">:</span> <span class="token number cye-lm-tag">10</span>
<span class="token punctuation cye-lm-tag">}</span><span class="token punctuation cye-lm-tag">;</span>

<span class="token keyword cye-lm-tag">with</span><span class="token punctuation cye-lm-tag">(</span>obj<span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">{</span>
  weight <span class="token operator cye-lm-tag">=</span> <span class="token number cye-lm-tag">20</span><span class="token punctuation cye-lm-tag">;</span> <span class="token comment cye-lm-tag" spellcheck="true">// (1)</span>
  size <span class="token operator cye-lm-tag">=</span> <span class="token number cye-lm-tag">35</span><span class="token punctuation cye-lm-tag">;</span> <span class="token comment cye-lm-tag" spellcheck="true">// (2)</span>
<span class="token punctuation cye-lm-tag">}</span>

<span class="token function cye-lm-tag">alert</span><span class="token punctuation cye-lm-tag">(</span> obj<span class="token punctuation cye-lm-tag">.</span>size <span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span>
<span class="token function cye-lm-tag">alert</span><span class="token punctuation cye-lm-tag">(</span> window<span class="token punctuation cye-lm-tag">.</span>size <span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span></code><span class="line-numbers-rows cye-lm-tag"><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span></span></pre>
        </div>
      </div>
      
      </div><p class="cye-lm-tag">В строке <code>(2)</code> присваивается свойство, отсутствующее в <code>obj</code>. В результате интерпретатор, не найдя его, создает новую глобальную переменную <code>window.size</code>.</p>
<p class="cye-lm-tag">Такие ошибки редки, но очень сложны в отладке, особенно если <code>size</code> изменилась не в <code>window</code>, а где-нибудь во внешнем <code>LexicalEnvironment</code>.</p>
</li>
<li>
<p class="cye-lm-tag">Еще одна причина – алгоритмы сжатия JavaScript не любят <code>with</code>. Перед выкладкой на сервер JavaScript сжимают. Для этого есть много инструментов, например <a href="http://code.google.com/intl/ru-RU/closure/compiler/">Closure Compiler</a> и <a href="https://github.com/mishoo/UglifyJS">UglifyJS</a>. Обычно они переименовывают локальные переменные в более короткие имена, но не свойства объектов. С конструкцией <code>with</code> до запуска кода непонятно – откуда будет взята переменная. Поэтому выходит, что, на всякий случай (если это свойство), лучше её не переименовывать. Таким образом, качество сжатия кода страдает.</p>
</li>
<li>
<p class="cye-lm-tag">Ну и, наконец, производительность – усложнение поиска переменной из-за <code>with</code> влечет дополнительные накладные расходы.</p>
<p class="cye-lm-tag">Современные движки применяют много внутренних оптимизаций, ряд которых не могут быть применены к коду, в котором есть <code>with</code>.</p>
<p class="cye-lm-tag">Вот, к примеру, запустите этот код в современном браузере. Производительность функции <code>fast</code> существенно отличается <code>slow</code> с пустым(!) <code>with</code>. И дело тут именно в <code>with</code>, т.к. наличие этой конструкции препятствует оптимизации.</p>
<div data-trusted="1" class="code-example" data-no-strict="1" data-prism-done="1">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers  language-javascript"><code class=" language-javascript"><span class="token keyword cye-lm-tag">var</span> i <span class="token operator cye-lm-tag">=</span> <span class="token number cye-lm-tag">0</span><span class="token punctuation cye-lm-tag">;</span>

<span class="token keyword cye-lm-tag">function</span> <span class="token function cye-lm-tag">fast</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">{</span>
  i<span class="token operator cye-lm-tag">++</span><span class="token punctuation cye-lm-tag">;</span>
<span class="token punctuation cye-lm-tag">}</span>

<span class="token keyword cye-lm-tag">function</span> <span class="token function cye-lm-tag">slow</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">{</span>
  <span class="token keyword cye-lm-tag">with</span><span class="token punctuation cye-lm-tag">(</span>i<span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">{</span><span class="token punctuation cye-lm-tag">}</span>
  i<span class="token operator cye-lm-tag">++</span><span class="token punctuation cye-lm-tag">;</span>
<span class="token punctuation cye-lm-tag">}</span>

<span class="token keyword cye-lm-tag">var</span> time <span class="token operator cye-lm-tag">=</span> performance<span class="token punctuation cye-lm-tag">.</span><span class="token function cye-lm-tag">now</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span>
<span class="token keyword cye-lm-tag">while</span> <span class="token punctuation cye-lm-tag">(</span>i <span class="token operator cye-lm-tag">&lt;</span> <span class="token number cye-lm-tag">1000000</span><span class="token punctuation cye-lm-tag">)</span> <span class="token function cye-lm-tag">fast</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span>
<span class="token function cye-lm-tag">alert</span><span class="token punctuation cye-lm-tag">(</span> <span class="token string cye-lm-tag">"Без with: "</span> <span class="token operator cye-lm-tag">+</span> <span class="token punctuation cye-lm-tag">(</span>performance<span class="token punctuation cye-lm-tag">.</span><span class="token function cye-lm-tag">now</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span> <span class="token operator cye-lm-tag">-</span> time<span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span>

<span class="token keyword cye-lm-tag">var</span> time <span class="token operator cye-lm-tag">=</span> performance<span class="token punctuation cye-lm-tag">.</span><span class="token function cye-lm-tag">now</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span>
i <span class="token operator cye-lm-tag">=</span> <span class="token number cye-lm-tag">0</span><span class="token punctuation cye-lm-tag">;</span>
<span class="token keyword cye-lm-tag">while</span> <span class="token punctuation cye-lm-tag">(</span>i <span class="token operator cye-lm-tag">&lt;</span> <span class="token number cye-lm-tag">1000000</span><span class="token punctuation cye-lm-tag">)</span> <span class="token function cye-lm-tag">slow</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span>
<span class="token function cye-lm-tag">alert</span><span class="token punctuation cye-lm-tag">(</span> <span class="token string cye-lm-tag">"С with: "</span> <span class="token operator cye-lm-tag">+</span> <span class="token punctuation cye-lm-tag">(</span>performance<span class="token punctuation cye-lm-tag">.</span><span class="token function cye-lm-tag">now</span><span class="token punctuation cye-lm-tag">(</span><span class="token punctuation cye-lm-tag">)</span> <span class="token operator cye-lm-tag">-</span> time<span class="token punctuation cye-lm-tag">)</span> <span class="token punctuation cye-lm-tag">)</span><span class="token punctuation cye-lm-tag">;</span></code><span class="line-numbers-rows cye-lm-tag"><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span></span></pre>
        </div>
      </div>
      
      </div></li>
</ol>
<h3><a class="main__anchor" name="замена-with" href="#замена-with">Замена with</a></h3><p class="cye-lm-tag">Вместо <code>with</code> рекомендуется использовать временную переменную, например:</p>
<div data-trusted="1" class="code-example" data-prism-done="1">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers  language-javascript"><code class=" language-javascript"><span class="token comment cye-lm-tag" spellcheck="true">/* вместо
with(elem.style) {
  top = '10px';
  left = '20px';
}
*/</span>

<span class="token keyword cye-lm-tag">var</span> s <span class="token operator cye-lm-tag">=</span> elem<span class="token punctuation cye-lm-tag">.</span>style<span class="token punctuation cye-lm-tag">;</span>

s<span class="token punctuation cye-lm-tag">.</span>top <span class="token operator cye-lm-tag">=</span> <span class="token string cye-lm-tag">'10px'</span><span class="token punctuation cye-lm-tag">;</span>
s<span class="token punctuation cye-lm-tag">.</span>left <span class="token operator cye-lm-tag">=</span> <span class="token string cye-lm-tag">'0'</span><span class="token punctuation cye-lm-tag">;</span></code><span class="line-numbers-rows cye-lm-tag"><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span><span class="cye-lm-tag"></span></span></pre>
        </div>
      </div>
      
      </div><p class="cye-lm-tag">Это не так элегантно, но убирает лишний уровень вложенности и абсолютно точно понятно, что будет происходить и куда присвоятся свойства.</p>
<h2><a class="main__anchor" name="итого" href="#итого">Итого</a></h2><ul>
<li>Конструкция <code>with(obj) { ... }</code> использует <code>obj</code> как дополнительную область видимости. Все переменные, к которым идет обращение внутри блока, сначала ищутся в <code>obj</code>.</li>
<li>Конструкция <code>with</code> устарела и не рекомендуется по ряду причин. Избегайте её.</li>
</ul>
</cut></div>
<br><hr>
</body>
</html>