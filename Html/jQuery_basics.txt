код подключения лучше брать прямо из Google - 
https://developers.google.com/speed/libraries/#jquery

<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.1.1/jquery.min.js"></script>
*************************************
http://veynik.ru/jquery/jquery-selectors/
jQuery селекторы
Здесь я напишу о том, что такое JQuery селекторы и как они работают.

jQuery Селекторы надо указывать следующим способом $('.селектор');

Ниже я перечислю наиболее популярные, а может даже и все виды jQuery селекторов:

$('div'); 			// выбрать все div-ы
$('#id_name'); 		// выбрать элемент с id="id_name"
$('.class_name'); 	// выбрать элемент с class="class_name"
$('div#id_name'); 	// выбрать все div-ы с id="id_name"
$('div.class_name'); // выбрать все div-ы с class="class_name

$('div h1'); 			// выбрать все h1 которые находятся в любых div-ах
$('#id_name .test'); 	// выбрать все элементы с class="test" в ЭЛЕМЕНТЕ с id="id_name"
$('.class_name, .test'); // выбрать все элементы с class="class_name" и с class="test"

(Заметьте, во второй строке я написал "в элементе" а не в "элементах", т.к. атрибут ID может быть указан только у одного элемента, а атрибут CLASS у скольких угодно).
А теперь еще сложней:

$('*'); 			// выбрать ВСЕ элементы
$('div *'); 		// выбрать все элементы во всех div-ах
$('div > h1'); 		// выбор всех h1 элементов в элементах div, где h1 является прямым потомком div-a
$('div > *'); и $('div').children(); // выбор всех потомков элемента div
$('div').parent(); 					// выбор всех предков элемента div
$('* > div'); и $('div').parents(); // выбор всех предков элементов div
$('div').parents('h1'); // выбор всех предков h1, элемента div
// в методе parents() можно тоже указать любой селектор.

*******************************

http://veynik.ru/jquery/jquery-filtering/
jQuery фильтры

jQuery фильтры, это почти тоже самое что и jQuery селекторы.
С помощью jQuery фильтров можно делать более сложные выборки данных, переходим к примерам:

$('h1:first'); 		// выбрать первый элемент h1
$('h1:last'); 		// выбрать последний элемент h1
$('h1:not(#test)'); // выбрать элемент h1 в котором нет id="test"
// где "#test" - можно написать любой селектор
$('h1:even'); 		// выбрать четные h1
$('h1:odd'); 		// выбрать нечетные h1
$('h1:eq(3)'); 		// выбрать третий h1
$('h1:gt(5)'); 		// выбрать все h1, номер которых больше 5
$('h1:lt(5)'); 		// выбрать все h1, номер которых меньше 5
$(':header'); 		// выбор всех h1, h2, h3, h4, h5, h6
$('h1:animated'); 	// выбор h1 которые в данный момент анимированы

jQuery фильтрация по контенту:

$('h1:contains(text)'); // взять все элементы содержащие "text"
$('h1:empty'); 			// взять все пустые элементы
$('h1:has(b)'); 		// взять все h1 содержащие b
$('h1:parent'); 		// взять все h1 которые содержат контент
// последнее не точно, если кто знает отпишите

jQuery фильтрация по видимости:

$('h1:hidden'); 	// взять все невидимые h1
$('h1:visible'); 	// взять все видимые h1
// Зависит от CSS стиля display: block или none

jQuery фильтрация по иерархии:

$('table td'); 		// взять все td которые находятся в table
$('table > td'); 	// взять все td которые являются прямыми потомками table
$('table + div'); 	// взять все div-ы, которые идут перед table
$('table ~ div'); 	// взять все div-ы, которые идут после table
// в последних двух примерах, берутся только те div-ы
// которые находятся на одном уровне с table, то есть
// например
<table></table>
<div id="a">
   <div id="b"></div>
</div>
// тут будет выбран только div где id="a".

jQuery фильтрация по потомкам:

$('table td:nth-child(3)'); 	// выбрать каждый 3-ий td во всех table
$('table td:first-child'); 		// выбрать каждый первый td во всех table
$('table td:last-child'); 		// выбрать каждый последний td во всех table
$('table td:only-child'); 		// выбрать только прямые дочерние td во всех table

jQuery фильтрация по атрибутам:

$('[href]'); 			// выбрать все элементы содержащие атрибут href
$('[class="blue"]'); 	// выбрать все элементы где class="blue"
$('[class!="blue"]'); 	// выбрать все элементы где class не равно blue
$('[href^="#"]'); 		// выбрать все элементы, где атрибут href начинается с "#"
// это пример того как выбрать все ссылки которые не перенаправляют на другие страницы.

$('[href$=".jpg"]'); 	// выбрать все элементы, у которых значение атрибута
// href заканчивается на ".jpg" (так можно выбрать все ссылки ведущие на JPEG-картинки)

$('[class*="text"]'); 	// выбрать все элементы где class содержит "text"
$('[class|="text"]'); 	// выбрать все элементы, где class равно либо содержит "text"
$('[class~="text"]'); 	// выбрать все элементы, где атрибут class содержит text
// в списке значений разделенных пробелом

$('[class][href]'); 	// выбрать все элементы, которые содержат два атрибута class и href

jQuery фильтрация по формам:
<input type="button|checkbox|file|hidden|image|password|radio|reset|submit|text">
$(':input'); 	// выбрать все элементы input
$(':text'); 	// выбрать все элементы input, где type="text"
$(':password'); // выбрать все элементы input, где type="password"
$(':radio'); 	// выбрать все элементы input, где type="radio"
$(':checkbox'); // выбрать все элементы input, где type="checkbox"
$(':submit'); 	// выбрать все элементы input, где type="submit"
$(':image'); 	// выбрать все элементы input, где type="image"
$(':reset'); 	// выбрать все элементы input, где type="reset"
$(':button'); 	// выбрать все элементы input, где type="button"
$(':file'); 	// выбрать все элементы input, где type="file"

Другие jQuery фильтрации по формам:

$(':enabled'); 		// взять все активные
$(':disabled'); 	// взять все неактивные
$(':checked'); 		// взять все включенные
$(':selected'); 	// взять все выбранные

Можно придумывать самые разные методы получения тегов, вот примеры для чего это может понадобиться:

// Таким образом можно всем ссылкам добавить класс "image" которые ведут на картинки:
$('a[href$=".jpg"], a[href$=".jpeg"], a[href$=".gif"], a[href$=".png"]').addClass('image');
 
// Так выбираем все исходящие ссылки (например в википедии добавляются картиночки,
// которые оповещают о том, что эта ссылка ведет за пределы их сайта)
$('a[target="_blank"]').addClass('имя_класса');
 
// Так мы выбираем все ссылки, которые ведут на JPG картинки, у которых еще есть атрибут
// "mypictures" (заметьте, такого атрибута не существует в HTML, но все равно работает ).
$('a[href$=".jpg"][mypictures]').любая_функция();
 
В Самом верху статьи я всегда приписывал H1 ($('h1:empty');) 
а можно и не приписывать:
$(':empty').css({ border: '#f00 4px solid' }); 
 всем пустым элементам делаем рамку
 и такие манипуляции можно проводить с любыми перечисленными фильтрациями

В фильтры можно еще обычным способом внедрять JS переменные, создавая сложные интерфейсы и т.п.

******************

jQuery Ajax для новичков
В данной статье я вам расскажу как элементарно просто использовать в JQuery Ajax.

Пример кода:

$.ajax(
{
    url: '/test.php', 	// адрес вызываемой страницы
    type: 'post', 		// тип отправки данных
    dataType: 'html', 	// тип получения данных
    data: { var1: 'test', var2: 'test2' }, // отправляемые данные
    success: function(data) // если передача успешна
    {
        alert(data); // вывести полученные данные
    }
});
Приведен элементарный способ отправить запрос на какую либо страницу и получить из нее данные в переменную «data», и содержимое этой переменной выведется alert-ом на экран.

type можно задавать ‘post’ или ‘get.
dataType можно задавать ‘html’, ‘json’ или ‘xml’.

************************


