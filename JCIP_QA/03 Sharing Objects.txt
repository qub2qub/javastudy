INVARIANT -- it's a property of the program state that is always true. A function or method that ensures that the invariant holds is said to maintain the invariant.
For instance, a binary search tree might have the invariant that for every node, the key of the node's left child is less than the node's own key. A correctly written insertion function for this tree will maintain that invariant.
--
In OOP, an INVARIANT is a set of assertions that must always hold true during the life of an object for the program to be valid. It should hold true from the end of the constructor to the start of the destructor whenever the object is not currently executing a method that changes its state.
An example of invariant could be that exactly one of two member variables should be null. Or that if one has a given value, then the set of allowed values for the other is this or that...
-------------------------------
Синхронизация имеет и 2й важный аспект -- это видимость памяти, т.е. после того как 1 потом изменит значение переменной, 2й поток должен увидеть эти изменения.

Что такое stale data?
Если несколько потоков несинхронизированно обращаются к одной переменной, то они могут видеть её несвежее состояние, т.к. они могут кэшировать её значение в регистрах.
одни переменных могут быть актуальные а другие stale, возможно из-за оптимизации JVM.

In the absence of synchronization, the compiler, processor, and runtime can do some downright weird things to the order in which operations appear to execute. Attempts to reason about the order in which memory actions “must” happen in insufficiently synchronized multithreaded programs will almost certainly be incorrect.
Поэтому -- always use the proper synchronization whenever data is shared across threads.

Reading data without synchronization is analogous to using the READ_UNCOMMITTED isolation level in a database, where you are willing to trade accuracy for performance.

Не делает ли компилятор reordering когда указан synchronized блок?

нужно синхронизировать и геттеры и сеттеры, чтобы гет не кэшировал значение.

можно сделать чтобы 1 потом писал а все остальные читали, тогда можно не делать синхронизацию, какие ещё особенности? 

3.1.2    Nonatomic 64-bit operations
When a thread reads a variable without synchronization, it may see a stale value, but at least it sees a value that was actually placed there by some thread rather than some random value. 
This safety guarantee is called OUT-OF-THIN-AIR safety.
Out-of-thin-air safety applies to all variables, with one exception: 64-bit numeric variables (double and long) that are not declared volatile.

для дебита и кредита валотайл не подойдёт, т.к. нужен синхр. блок как для атомарной операции.

Intrinsic locking can be used to guarantee that one thread sees the effects of another in a predictable manner. Without synchronization, there is no such guarantee.

Зачем использовать 1 и тот же объект для lock ?
Locking is not just about mutual exclusion; it is also about memory visibility. To ensure that all threads see the most up-to-date values of shared mutable variables, the reading and writing threads must synchronize on a common lock.

Что такое volatile variables? и зачем они нужны?
volatile variables - это weaker form of synchronization.
When a field is declared volatile, the compiler and runtime are put on notice that this variable is shared and that operations on it should not be reordered with other memory operations.
Volatile variables are not cached in registers or in caches where they are hidden from other processors, so a read of a volatile variable always returns the most recent write by any thread.

volatile НЕ гарантирует инкрементов и декрементов.

В чём более широкий эффект volatile variables?
When thread A writes to a volatile variable and subsequently thread B reads that same variable, the values of all variables that were visible to A prior to writing to the volatile variable become visible to B after reading the volatile variable. 
Т.Е... So from a memory visibility perspective, writing a volatile variable is like exiting a synchronized block and reading a volatile variable is like entering a synchronized block. 
НО.. However, we do not recommend relying too heavily on volatile variables for visibility; code that relies on volatile variables for visibility of arbitrary state is more fragile and harder to understand than code that uses locking.

 Use volatile variables only when they simplify implementing and verifying your synchronization policy; avoid using volatile variables when veryfing correctness would require subtle reasoning about visibility. Good uses of volatile variables include ensuring the visibility of their own state, that of the object they refer to, or indicating that an important lifecycle event (such as initialization or shutdown) has occurred.

Когда чаще всего применяются volatile variables?
как флаг!
The most common use for volatile variables is as a completion, interruption, or status flag.

Ограничения volatile variable
s?пе
Locking can guarantee both visibility and atomicity; volatile variables can only guarantee visibility.

Когда можно использовать volatile variables?
You can use volatile variables only when all the following criteria are met:
• Writes to the variable do not depend on its current value, or you can ensure that only a single thread ever updates the value;
• The variable does not participate in invariants with other state variables;
• Locking is not required for any other reason while the variable is being accessed.

Что такое Publishing?
1) Publishing an object means making it available to code outside of its current scope, such as by storing a reference to it where other code can find it, returning it from a nonprivate method, or passing it to a method in another class. 
An object that is published when it should not have been is said to have escaped. 
2) Any object that is reachable from a published object by following some chain of nonprivate field references and method calls has also been published.
3) A final mechanism by which an object or its internal state can be published is to publish an inner class instance, because inner class instances contain a hidden reference to the enclosing instance.
4) Passing an object to an alien method must also be considered publishing that object.

Как получить ссулку на родительский класс из inner класса?
OuterClassName.this

Что такое alien method?
an alien method is one whose behavior is not fully specified by Class "С".
This includes methods in other classes as well as overrideable methods (neither private nor final) in C itself.
Passing an object to an alien method must also be considered publishing that object.

Когда when the this references escapes during construction?
When the inner EventListener instance is published, so is[также публикуется] the enclosing ThisEscape instance. 
But an object is in a predictable, consistent state only after its constructor returns, so publishing an object from within its constructor can publish an incompletely constructed object.
This is true even if the publication is the last statement in the constructor. IF THE THIS REFERENCE ESCAPES DURING CONSTRUCTION, THE OBJECT IS CONSIDERED NOT PROPERLY CONSTRUCTED.
DO NOT ALLOW THE THIS REFERENCE TO ESCAPE DURING CONSTRUCTION.

Пример когда "убегает" this reference?
1) A common mistake that can let the this reference escape during construction is TO START A THREAD FROM A CONSTRUCTOR. When an object creates a thread from its constructor, it almost always shares its this reference with the new thread, either explicitly (by passing it to the constructor) or implicitly (because the Thread or Runnable is an inner class of the owning object).
**There's nothing wrong with creating a thread in a constructor, but it is best not to start the thread immediately. Instead, expose a start or initialize method that starts the owned thread.
2) Calling an override-able instance method (one that is neither private nor final) from the constructor can also allow the this reference to escape.
**If you are tempted to register an event listener or start a thread from a constructor, you can avoid the improper construction by using a private constructor and a public factory method.

Если класс final -- то от него нельзя наследоваться.

3.3 Thread confinement -- ограничение использования только 1 потоком.
Accessing shared, mutable data requires using synchronization; one way to avoid this requirement is to not share. If data is only accessed from a single thread, no synchronization is needed. This technique, thread confinement.
т.е. объект не предоставляется для совместного использования несколькими потоками. Вместо это его использовать может только 1 поток: например, swing или connection from the pool.
1) The Swing visual components and data model objects are not thread safe; instead, safety is achieved by confining them to the Swing event dispatch thread. To use Swing properly, code running in threads other than the event thread should not access these objects.
2) In typical server applications, a thread acquires a connection from the pool, uses it for processing a single request, and returns it. The pool will not dispense the same connection to another thread until it has been returned.

Thread confinement is an element of your program's design that must be enforced by its implementation.
можно использовать local variables and the ThreadLocal class—but even with these, it is still the programmer's responsibility to ensure that thread-confined objects do not escape from their intended thread.

3.3.1 Ad-hoc thread confinement -- решение использовать "ограничение потока" является следствием решения реализовать какую-то специальную подсистему, например GUI. Single-threaded subsystems can sometimes offer a simplicity benefit that outweighs the fragility of ad-hoc thread confinement.

Когда запись в volatile переменную может делать только 1 поток.
A special case of thread confinement applies to volatile variables. It is safe to perform read-modify-write operations on shared volatile variables as long as you ensure that the volatile variable is only written from a single thread. In this case, you are confining the modification to a single thread to prevent race conditions, and the visibility guarantees for volatile variables ensure that other threads see the most up-to-date value.

Что такое 3.3.2 Stack confinement ?
Это когда объект может быть доступен только через локальныую переменную.
Stack confinement is a special case of thread confinement in which an object can only be reached through local variables. Just as encapsulation can make it easier to preserve invariants, local variables can make it easier to confine objects to a thread.
LOCAL VARIABLES are intrinsically confined to the executing thread; they exist on the executing thread's stack, which is not accessible to other threads. Stack confinement (also called WITHIN-THREAD or THREAD-LOCAL usage, but not to be confused with the ThreadLocal library class) is simpler to maintain and less fragile than ad-hoc thread confinement.

Что такое 3.3.3 ThreadLocal ?
A more formal means of maintaining thread confinement is ThreadLocal, which allows you to associate a per-thread value with a value-holding object. Thread-Local provides get and set accessor methods that maintain a separate copy of the value for each thread that uses it, so a get returns the most recent value passed to set from the currently executing thread.
-If you are porting a single-threaded application to a multithreaded environment, you can preserve thread safety by converting shared global variables into ThreadLocals, if the semantics of the shared globals permits this; an applicationwide cache would not be as useful if it were turned into a number of thread-local caches.
-It is easy to abuse ThreadLocal by treating its thread confinement property as a license to use global variables or as a means of creating "hidden" method arguments. Like global variables, thread-local variables can detract from reusability and introduce hidden couplings among classes, and should therefore be used with care.

Что такое immutable objects [Immutability] ?
An immutable object is one whose state cannot be changed after construction. Immutable objects are inherently thread-safe; their invariants are established by the constructor, and if their state cannot be changed, these invariants always hold.
IMMUTABLE OBJECTS ARE ALWAYS THREAD-SAFE.
Passing a MUTABLE object to untrusted code, or otherwise publishing it where untrusted code could find it, is dangerous— the untrusted code might modify its state, or, worse, retain a reference to it and modify its state later from another thread.

Что такое Immutability ?
Neither the Java Language Specification nor the Java Memory Model formally defines immutability, but immutability is not equivalent to simply declaring all fields of an object final. An object whose fields are all final may still be mutable, since final fields can hold references to mutable objects.

Условия для immutable objects ?
An object is immutable if:
•1• Its state cannot be modified after construction;
•2• All its fields are final;
•3• It is properly constructed (the this reference does not escape during construction).

There is a difference between an OBJECT being immutable and the REFERENCE to it being immutable. Program state stored in immutable objects can still be updated by "replacing" immutable objects with a new instance holding new state;

Что такое Final fields?
Final fields can't be modified (хотя the objects they refer to can be modified if they are mutable), but they also have special semantics under the Java Memory Model. 
It is the use of final fields that makes possible the guarantee of initialization safety (see Section 3.5.2) that lets immutable objects be freely accessed and shared without synchronization.

Just as it is a GOOD PRACTICE to make ALL FIELDS PRIVATE unless they need greater visibility, it is a good practice to make ALL FIELDS FINAL unless they need to be mutable.

Опасно ис-ть volatile для >2 несинхронизированных операций:
для двух переменных которые ис-ся в 1 инварианте.
but this was not thread-safe because we could not fetch or update the two related values atomically. Using volatile variables for these values would not be thread-safe for the same reason.

ДО инициализации в конструкторе полям присваиваются какие-то дефолтные значения, до того как конструктор завершился.
Найти как это было описано в главе**16сноска стр 51

Race conditions in accessing or updating multiple related variables can be eliminated by using an immutable object to hold all the variables. With a mutable ©Immutable "holder object", you would have to use locking to ensure atomicity; with an immutable one, once a thread acquires a reference to it, it need never worry about another thread modifying its state. If the variables are to be updated, a new holder object is created, but any threads working with the previous holder still see it in a consistent state.
-- VolatileCachedFactorizer --
When a thread sets the volatile cache field to reference a new OneValueCache, the new cached data becomes immediately visible to other threads. 
 The cache-related operations cannot interfere with each other because One-ValueCache is immutable and the cache field is accessed only once in each of the relevant code paths. This combination of an immutable holder object for multiple state variables related by an invariant, and a volatile reference used to ensure its timely visibility, allows VolatileCachedFactorizer to be thread-safe even though it does no explicit locking.

Что такое Safe publication?
 sometimes we do want to share objects across threads, and in this case we must do so safely. Unfortunately, simply storing a reference to an object into a public field, as in Listing 3.14, is not enough to publish that object safely. Потому что improper publication could allow another thread to observe a partially constructed object.
 
Какие 2 проблемы могут быть при неправильно расшаренных переменных?
1) Other threads could see a stale value for the holder field, and thus see a null reference or other older value even though a value has been placed in holder. (ссылка самого холдера плохая)
2) other threads could see an up-to-date value for the holder reference, but stale values for the state of the Holder. (т.е. для ошибочные значения у переменных внутри холдера)

Что за a special guarantee of initialization safety for sharing immutable objects от JMM ?
-Если выполнены все условия по неизменяемости:
[1]unmodifiable state, [2]all fields are final, [3]and proper construction.
ТО Immutable objects can be safely accessed even when synchronization is not used to publish the object reference.
-Immutable objects can be used safely by any thread without additional synchronization, even when synchronization is not used to publish them.
-This guarantee extends to the values of all final fields of properly constructed objects; final fields can be safely accessed without additional synchronization. However, if final fields refer to mutable objects, synchronization is still required to access the state of the objects they refer to.

Как сделать Safe publication?
Что нужно сделать, чтобы опубликовать объект безопасно (to safely publish any objects)?
To publish an object safely, both the reference to the object and the object’s state must be made visible to other threads at the same time. A properly constructed object can be safely published by:
•1• Initializing an object reference from a static initializer;
•2• Storing a reference to it into a volatile field or AtomicReference;
•3• Storing a reference to it into a final field of a properly constructed object; or
•4• Storing a reference to it into a field that is properly guarded by a lock.

-The internal synchronization in thread-safe collections means that placing an object in a thread-safe collection, such as a Vector or synchronizedLi st, fulfills the last of these requirements.
The thread-safe library collections offer the following safe publication guarantees, even if the Javadoc is less than clear on the subject:
•    Placing a key or value in a Hashtable, synchronizedMap, or Concurrent-Map safely publishes it to any thread that retrieves it from the Map (whether directly or via an iterator);
•    Placing an element in a Vector, CopyOnWriteArrayList, CopyOnWrite-ArraySet, synchronizedList, or synchronizedSet safely publishes it to any thread that retrieves it from the collection;
•    Placing an element on a BlockingQueue or a ConcurrentLinkedQueue safely publishes it to any thread that retrieves it from the queue.

-Other handoff mechanisms in the class library (such as Future and Exchanger) also constitute safe publication;
-Using a static initializer is often the easiest and safest way to publish objects that can be statically constructed:
              public static Holder holder = new Holder(42);
Static initializers are executed by the JVM at class initialization time; because of internal synchronization in the JVM, this mechanism is guaranteed to safely publish any objects initialized in this way

Что гарантирует Safe publication?
Safe publication is sufficient for other threads to safely access objects that are not going to be modified after publication without additional synchronization. The safe publication mechanisms all guarantee that the as-published state of an object is visible to all accessing threads as soon as the reference to it is visible, and if that state is not going to be changed again, this is sufficient to ensure that any access is safe.

Какие объекты являются Effectively immutable objects?
Objects that are NOT TECHNICALLY IMMUTABLE, but whose state will not be modified after publication, are called effectively immutable. They do not need to meet the strict definition of immutability(3 пункта). they merely need to be treated by the program as if they were immutable after they are published. Using effectively immutable objects can simplify development and improve performance by reducing the need for synchronization.
[Collections.synchronizedMap(new HashMap<String, Date>());
If the Date values are not modified after they are placed in the Map, then the synchronization in the synchronizedMap implementation is sufficient to publish the Date values safely, and no additional synchronization is needed when accessing them.]

SAFELY PUBLISHED EFFECTIVELY IMMUTABLE OBJECTS CAN BE USED SAFELY BY ANY THREAD WITHOUT ADDITIONAL SYNCHRONIZATION.

3.5.5 Mutable objects
If an object may be modified after construction, safe publication ensures only the VISIBILITY of the AS-PUBLISHED STATE. Synchronization must be used not only to publish a mutable object, but also every time the object is accessed to ensure visibility of subsequent modifications. To share mutable objects safely, they must be safely published and be either thread-safe or guarded by a lock.

The publication requirements for an object depend on its mutability:
• Immutable objects can be published through any mechanism;
• Effectively immutable objects must be safely published;
• Mutable objects must be safely published, and must be either thread-safe or guarded by a lock.

Как правильно и безопасно шарить объекты в многотпоточном приложении?
Sharing objects safely.
The most useful policies for using and sharing objects in a concurrent program are:
1) THREAD-CONFINED. A thread-confined object is owned exclusively by and confined to one thread, and can be modified by its owning thread.
2) SHARED READ-ONLY. A shared read-only object can be accessed concurrently by multiple threads without additional synchronization, but cannot be modified by any thread. Shared read-only objects include immutable and effectively immutable objects.
3) SHARED THREAD-SAFE. A thread-safe object performs synchronization internally, so multiple threads can freely access it through its public interface without further synchronization.
4) GUARDED. A guarded object can be accessed only with a specific lock held. 
Guarded objects include those:
  4a) that are encapsulated within other thread-safe objects and 
  4b) published objects that are known to be guarded by a specific lock.