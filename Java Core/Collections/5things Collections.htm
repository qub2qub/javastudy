<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<title>Java 6 Collections API</title>
    <link rel="stylesheet" href="../../Guides/grey.css">
    <style type="text/css">

    </style>
</head>
<body>
<a href="https://www.ibm.com/developerworks/java/library/j-5things2/index.html">src1</a>
<a href="https://www.ibm.com/developerworks/java/library/j-5things3/index.html">src2</a>
<h2>Java 6 Collections API</h2>
<div class="ibm-col-6-4">
<p class="dw-article-series-head">5 things you didn't know about ...</p>
<h1 id="ibm-pagetitle-h1" class="ibm-h1">The Java 6 Collections API, Part 1</h1><p class="dw-article-subhead">Customize and extend Java Collections</p>
<p>The Java Collections API came to many Java developers as a much needed
                replacement for the standard Java array and all of its shortcomings.
                Associating Collections primarily with <code>ArrayList</code> isn't a
                mistake, but there's much more to the Collections for those who go
                looking.</p><div class="dw-article-sidebar ibm-background-cool-white-20"><h5>About this series</h5><p>So you think you know about Java programming? The fact is, most
                    developers scratch the surface of the Java platform, learning just
                    enough to get the job done. In this series, Ted Neward digs beneath the core functionality of the
                    Java platform to uncover little known facts that could help you solve
                    even the stickiest programming challenges.</p></div><p>Similarly, while the <code>Map</code> (and its oft-chosen implementation,
                <code>HashMap</code>) are great for doing name-value or key-value pairs,
                there's no reason to limit yourself to these familiar tools. You can fix a
                lot of error prone code with the right API, or even the right
                Collection.</p><p>This second article in the <a href="http://www.ibm.com/developerworks/views/java/libraryview.jsp?search_by=5+things+you+did"><em>5 things</em> series</a> is the first of several devoted to
                Collections, because they're so central to what we do in Java programming.
                I'll start at the beginning with a look at the quickest (but possibly not
                the most common) ways to do everyday things, like swapping out
                <code>Array</code>s for <code>List</code>s. After that we'll delve into
                lesser known stuff, like writing a custom Collections class and extending
                the Java Collections API.</p><h2 id="N1007F" class="ibm-h2">1. Collections trump arrays</h2><p>Developers new to Java technology may not know that arrays were originally
                included in the language to head-off performance criticism from C++
                developers back in the early 1990s. Well, we've come a long way since
                then, and the array's performance advantages generally come up short when
                weighed against those of the Java Collections libraries.</p><p>Dumping array contents into a string, for example, requires iterating
                through the array and concatenating the contents together into a
                <code>String</code>; whereas, the Collections implementations all have a
                viable <code>toString()</code> implementation.</p><p>Except for rare cases, it's good practice to convert any array that comes
                your way to a collection as quickly as possible. Which then begs the
                question, what's the easiest way to make the switch? As it turns out, the
                Java Collections API makes it easy, as shown in Listing 1:</p><h5 id="listing1" class="ibm-h5">Listing 1.
                ArrayToList</h5><span class="dw-code-nohighlight"><div class="ibm-syntax-container"><div><div id="highlighter_757088" class="syntaxhighlighter  htmlscript"><table border="0" cellpadding="0" cellspacing="0" role="none"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">import java.util.*;</code></div><div class="line number2 index1 alt1">&nbsp;</div><div class="line number3 index2 alt2"><code class="htmlscript plain">public class ArrayToList</code></div><div class="line number4 index3 alt1"><code class="htmlscript plain">{</code></div><div class="line number5 index4 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">public static void main(String[] args)</code></div><div class="line number6 index5 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">{</code></div><div class="line number7 index6 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">// This gives us nothing good</code></div><div class="line number8 index7 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">System.out.println(args);</code></div><div class="line number9 index8 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number10 index9 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">// Convert args to a List of String</code></div><div class="line number11 index10 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">List&lt;</code><code class="htmlscript plain">String</code><code class="htmlscript plain">&gt; argList = Arrays.asList(args);</code></div><div class="line number12 index11 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number13 index12 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">// Print them out</code></div><div class="line number14 index13 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">System.out.println(argList);</code></div><div class="line number15 index14 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></div><div class="line number16 index15 alt1"><code class="htmlscript plain">}</code></div></div></td></tr></tbody></table></div></div></div></span><p>Note that the returned <code>List</code> is unmodifiable, so attempts to
                add new elements to it will throw an
                <code>UnsupportedOperationException</code>.</p><p>And, because <code>Arrays.asList()</code> uses a <em>varargs</em> parameter
                for elements to add into the <code>List</code>, you can also use it to
                easily create <code>List</code>s out of <code>new</code>ed objects.</p><h2 id="N100B0" class="ibm-h2">2. Iterating is inefficient</h2><p>It's not uncommon to want to move the contents of one collection
                (particularly one that was manufactured out of an array) over into another
                collection or to remove a small collection of objects from a larger
                one.</p><p>You might be tempted to simply iterate through the collection and add or
                remove each element as it's found, but don't.</p><p>Iterating, in this case, has major disadvantages:</p><ul class="ibm-bullet-list"><li>It would be inefficient to resize the collection with each add or
                    remove.</li><li> There's a potential concurrency nightmare in acquiring a lock, doing
                    the operation, and releasing the lock each time.</li><li>There's the race condition caused by other threads banging on your
                    collection while the add or remove is taking place.</li></ul><p>You can avoid all of these problems by using <code>addAll</code> or
                <code>removeAll</code> to pass in the collection containing the elements
                you want to add or remove.</p><h2 id="N100CA" class="ibm-h2">3. For loop through any
                Iterable</h2><p>The enhanced for loop, one of the great conveniences added to the Java
                language in Java 5, removed the last barrier to working with Java
                Collections.</p><p>Before, developers had to manually obtain an <code>Iterator</code>, use
                <code>next()</code> to obtain the object pointed to from the
                <code>Iterator</code>, and check to see if more objects were available via
                <code>hasNext()</code>. Post Java 5, we're free to use a for-loop variant
                that handles all of the above silently.</p><p>Actually, this enhancement works with <em>any object</em> that implements
                the <code>Iterable</code> interface, not just
                <code>Collections</code>.</p><p>Listing 2 shows one approach to making a list of children from a
                <code>Person</code> object available as an <code>Iterator</code>. Rather
                than handing out a reference to the internal <code>List</code> (which
                would enable callers outside the <code>Person</code> to add kids to your
                family — something most parents would find uncool), the
                <code>Person</code> type implements <code>Iterable</code>. This approach
                also enables the enhanced for loop to walk through the children.</p><h5 id="listing2" class="ibm-h5">Listing 2. Ehanced for loop: Show me your
                    children</h5><span class="dw-code-nohighlight"><div class="ibm-syntax-container"><div><div id="highlighter_818812" class="syntaxhighlighter  htmlscript"><table border="0" cellpadding="0" cellspacing="0" role="none"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div class="line number23 index22 alt2">23</div><div class="line number24 index23 alt1">24</div><div class="line number25 index24 alt2">25</div><div class="line number26 index25 alt1">26</div><div class="line number27 index26 alt2">27</div><div class="line number28 index27 alt1">28</div><div class="line number29 index28 alt2">29</div><div class="line number30 index29 alt1">30</div><div class="line number31 index30 alt2">31</div><div class="line number32 index31 alt1">32</div><div class="line number33 index32 alt2">33</div><div class="line number34 index33 alt1">34</div><div class="line number35 index34 alt2">35</div><div class="line number36 index35 alt1">36</div><div class="line number37 index36 alt2">37</div><div class="line number38 index37 alt1">38</div><div class="line number39 index38 alt2">39</div><div class="line number40 index39 alt1">40</div><div class="line number41 index40 alt2">41</div><div class="line number42 index41 alt1">42</div><div class="line number43 index42 alt2">43</div><div class="line number44 index43 alt1">44</div><div class="line number45 index44 alt2">45</div><div class="line number46 index45 alt1">46</div><div class="line number47 index46 alt2">47</div><div class="line number48 index47 alt1">48</div><div class="line number49 index48 alt2">49</div><div class="line number50 index49 alt1">50</div><div class="line number51 index50 alt2">51</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">// Person.java</code></div><div class="line number2 index1 alt1"><code class="htmlscript plain">import java.util.*;</code></div><div class="line number3 index2 alt2">&nbsp;</div><div class="line number4 index3 alt1"><code class="htmlscript plain">public class Person</code></div><div class="line number5 index4 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">implements Iterable&lt;</code><code class="htmlscript plain">Person</code><code class="htmlscript plain">&gt;</code></div><div class="line number6 index5 alt1"><code class="htmlscript plain">{</code></div><div class="line number7 index6 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">public Person(String fn, String ln, int a, Person... kids)</code></div><div class="line number8 index7 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">{</code></div><div class="line number9 index8 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">this.firstName = fn; this.lastName = ln; this.age = a;</code></div><div class="line number10 index9 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">for (Person child : kids)</code></div><div class="line number11 index10 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">children.add(child);</code></div><div class="line number12 index11 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></div><div class="line number13 index12 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">public String getFirstName() { return this.firstName; }</code></div><div class="line number14 index13 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">public String getLastName() { return this.lastName; }</code></div><div class="line number15 index14 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">public int getAge() { return this.age; }</code></div><div class="line number16 index15 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number17 index16 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">public Iterator&lt;</code><code class="htmlscript plain">Person</code><code class="htmlscript plain">&gt; iterator() { return children.iterator(); }</code></div><div class="line number18 index17 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number19 index18 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">public void setFirstName(String value) { this.firstName = value; }</code></div><div class="line number20 index19 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">public void setLastName(String value) { this.lastName = value; }</code></div><div class="line number21 index20 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">public void setAge(int value) { this.age = value; }</code></div><div class="line number22 index21 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number23 index22 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">public String toString() { </code></div><div class="line number24 index23 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">return "[Person: " +</code></div><div class="line number25 index24 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">"firstName=" + firstName + " " +</code></div><div class="line number26 index25 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">"lastName=" + lastName + " " +</code></div><div class="line number27 index26 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">"age=" + age + "]";</code></div><div class="line number28 index27 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></div><div class="line number29 index28 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number30 index29 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">private String firstName;</code></div><div class="line number31 index30 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">private String lastName;</code></div><div class="line number32 index31 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">private int age;</code></div><div class="line number33 index32 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">private List&lt;</code><code class="htmlscript plain">Person</code><code class="htmlscript plain">&gt; children = new ArrayList&lt;</code><code class="htmlscript plain">Person</code><code class="htmlscript plain">&gt;();</code></div><div class="line number34 index33 alt1"><code class="htmlscript plain">}</code></div><div class="line number35 index34 alt2">&nbsp;</div><div class="line number36 index35 alt1"><code class="htmlscript plain">// App.java</code></div><div class="line number37 index36 alt2"><code class="htmlscript plain">public class App</code></div><div class="line number38 index37 alt1"><code class="htmlscript plain">{</code></div><div class="line number39 index38 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">public static void main(String[] args)</code></div><div class="line number40 index39 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">{</code></div><div class="line number41 index40 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">Person ted = new Person("Ted", "Neward", 39,</code></div><div class="line number42 index41 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">new Person("Michael", "Neward", 16),</code></div><div class="line number43 index42 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">new Person("Matthew", "Neward", 10));</code></div><div class="line number44 index43 alt1">&nbsp;</div><div class="line number45 index44 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">// Iterate over the kids</code></div><div class="line number46 index45 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">for (Person kid : ted)</code></div><div class="line number47 index46 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">{</code></div><div class="line number48 index47 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">System.out.println(kid.getFirstName());</code></div><div class="line number49 index48 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></div><div class="line number50 index49 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></div><div class="line number51 index50 alt2"><code class="htmlscript plain">}</code></div></div></td></tr></tbody></table></div></div></div></span><p>Using <code>Iterable</code> has some obvious drawbacks when domain
                modeling, because only one such collection of objects can be so
                "implicitly" supported via the <code>iterator()</code> method. For cases
                where the child collection is obvious and apparent, however,
                <code>Iterable</code> makes programming against the domain type much
                easier and more obvious.</p><h2 id="N10112" class="ibm-h2">4. Classic and custom
                algorithms</h2><p>Have you ever wanted to walk a <code>Collection</code>, but in reverse?
                That's where a classic Java Collections algorithm comes in handy.</p><p>The children of <code>Person</code> in <a href="#listing2">Listing 2</a>
                above, are listed in the order that they were passed in; but, now you want
                to list them in the reverse order. While you could write another for loop
                to insert each object into a new <code>ArrayList</code> in the opposite
                order, the coding would grow tedious after the third or fourth time.</p><p>That's where the underused algorithm in Listing 3 comes in:</p><h5 id="listing3" class="ibm-h5">Listing 3. ReverseIterator
                </h5><span class="dw-code-nohighlight"><div class="ibm-syntax-container"><div><div id="highlighter_969043" class="syntaxhighlighter  htmlscript"><table border="0" cellpadding="0" cellspacing="0" role="none"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">public class ReverseIterator</code></div><div class="line number2 index1 alt1"><code class="htmlscript plain">{</code></div><div class="line number3 index2 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">public static void main(String[] args)</code></div><div class="line number4 index3 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">{</code></div><div class="line number5 index4 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">Person ted = new Person("Ted", "Neward", 39,</code></div><div class="line number6 index5 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">new Person("Michael", "Neward", 16),</code></div><div class="line number7 index6 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">new Person("Matthew", "Neward", 10));</code></div><div class="line number8 index7 alt1">&nbsp;</div><div class="line number9 index8 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">// Make a copy of the List</code></div><div class="line number10 index9 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">List&lt;</code><code class="htmlscript plain">Person</code><code class="htmlscript plain">&gt; kids = new ArrayList&lt;</code><code class="htmlscript plain">Person</code><code class="htmlscript plain">&gt;(ted.getChildren());</code></div><div class="line number11 index10 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">// Reverse it</code></div><div class="line number12 index11 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">Collections.reverse(kids);</code></div><div class="line number13 index12 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">// Display it</code></div><div class="line number14 index13 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">System.out.println(kids);</code></div><div class="line number15 index14 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></div><div class="line number16 index15 alt1"><code class="htmlscript plain">}</code></div></div></td></tr></tbody></table></div></div></div></span><p>The <code>Collections</code> class has a number of these "algorithms,"
                static methods that are implemented to take <code>Collections</code> as
                parameters and provide implementation-independent behavior on the
                collection as a whole.</p><p>What's more, the algorithms present on the <code>Collections</code> class
                certainly aren't the final word in great API design — I prefer
                methods that don't modify the contents (of the Collection passed in)
                directly, for example. So it's a good thing you can write custom
                algorithms of your own, like the one shown in Listing 4:</p><h5 id="listing4" class="ibm-h5">Listing 4. ReverseIterator made
                simpler</h5><span class="dw-code-nohighlight"><div class="ibm-syntax-container"><div><div id="highlighter_189392" class="syntaxhighlighter  htmlscript"><table border="0" cellpadding="0" cellspacing="0" role="none"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">class MyCollections</code></div><div class="line number2 index1 alt1"><code class="htmlscript plain">{</code></div><div class="line number3 index2 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">public static &lt;</code><code class="htmlscript plain">T</code><code class="htmlscript plain">&gt; List&lt;</code><code class="htmlscript plain">T</code><code class="htmlscript plain">&gt; reverse(List&lt;</code><code class="htmlscript plain">T</code><code class="htmlscript plain">&gt; src)</code></div><div class="line number4 index3 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">{</code></div><div class="line number5 index4 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">List&lt;</code><code class="htmlscript plain">T</code><code class="htmlscript plain">&gt; results = new ArrayList&lt;</code><code class="htmlscript plain">T</code><code class="htmlscript plain">&gt;(src);</code></div><div class="line number6 index5 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">Collections.reverse(results);</code></div><div class="line number7 index6 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">return results;</code></div><div class="line number8 index7 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></div><div class="line number9 index8 alt2"><code class="htmlscript plain">}</code></div></div></td></tr></tbody></table></div></div></div></span><h2 id="N10147" class="ibm-h2">5. Extend the Collections
                API</h2><p>The customized algorithm above illustrates a final point about the Java
                Collections API: that it was always intended to be extended and morphed to
                suit developers' specific purposes.</p><p>So, for example, say you needed the list of children in the
                <code>Person</code> class to always be sorted by age. While you could
                write code to sort the children over and over again (using the
                <code>Collections.sort</code> method, perhaps), it would be far better to
                have a <code>Collection</code> class that sorted it for you.</p><p>In fact, you might not even care about preserving the order in which the
                objects were inserted into the <code>Collection</code> (which is the
                principal rationale for a <code>List</code>). You might just want to keep
                them in a sorted order.</p><p>No <code>Collection</code> class within <code>java.util</code> fulfills
                these requirements, but it's trivial to write one. All you need to do is
                create an interface that describes the abstract behavior the
                <code>Collection</code> should provide. In the case of a
                <code>SortedCollection</code>, the intent is entirely behavioral.</p><h5 id="listing5" class="ibm-h5">Listing 5.
                SortedCollection</h5><span class="dw-code-nohighlight"><div class="ibm-syntax-container"><div><div id="highlighter_408396" class="syntaxhighlighter  htmlscript"><table border="0" cellpadding="0" cellspacing="0" role="none"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">public interface SortedCollection&lt;</code><code class="htmlscript plain">E</code><code class="htmlscript plain">&gt; extends Collection&lt;</code><code class="htmlscript plain">E</code><code class="htmlscript plain">&gt;</code></div><div class="line number2 index1 alt1"><code class="htmlscript plain">{</code></div><div class="line number3 index2 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">public Comparator&lt;</code><code class="htmlscript plain">E</code><code class="htmlscript plain">&gt; getComparator();</code></div><div class="line number4 index3 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">public void setComparator(Comparator&lt;</code><code class="htmlscript plain">E</code><code class="htmlscript plain">&gt; comp);</code></div><div class="line number5 index4 alt2"><code class="htmlscript plain">}</code></div></div></td></tr></tbody></table></div></div></div></span><p>It's almost anticlimactic to write an implementation of this new
                interface:</p><h5 id="listing6" class="ibm-h5">Listing 6.
                ArraySortedCollection</h5><span class="dw-code-nohighlight"><div class="ibm-syntax-container"><div><div id="highlighter_435047" class="syntaxhighlighter  htmlscript"><table border="0" cellpadding="0" cellspacing="0" role="none"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div class="line number23 index22 alt2">23</div><div class="line number24 index23 alt1">24</div><div class="line number25 index24 alt2">25</div><div class="line number26 index25 alt1">26</div><div class="line number27 index26 alt2">27</div><div class="line number28 index27 alt1">28</div><div class="line number29 index28 alt2">29</div><div class="line number30 index29 alt1">30</div><div class="line number31 index30 alt2">31</div><div class="line number32 index31 alt1">32</div><div class="line number33 index32 alt2">33</div><div class="line number34 index33 alt1">34</div><div class="line number35 index34 alt2">35</div><div class="line number36 index35 alt1">36</div><div class="line number37 index36 alt2">37</div><div class="line number38 index37 alt1">38</div><div class="line number39 index38 alt2">39</div><div class="line number40 index39 alt1">40</div><div class="line number41 index40 alt2">41</div><div class="line number42 index41 alt1">42</div><div class="line number43 index42 alt2">43</div><div class="line number44 index43 alt1">44</div><div class="line number45 index44 alt2">45</div><div class="line number46 index45 alt1">46</div><div class="line number47 index46 alt2">47</div><div class="line number48 index47 alt1">48</div><div class="line number49 index48 alt2">49</div><div class="line number50 index49 alt1">50</div><div class="line number51 index50 alt2">51</div><div class="line number52 index51 alt1">52</div><div class="line number53 index52 alt2">53</div><div class="line number54 index53 alt1">54</div><div class="line number55 index54 alt2">55</div><div class="line number56 index55 alt1">56</div><div class="line number57 index56 alt2">57</div><div class="line number58 index57 alt1">58</div><div class="line number59 index58 alt2">59</div><div class="line number60 index59 alt1">60</div><div class="line number61 index60 alt2">61</div><div class="line number62 index61 alt1">62</div><div class="line number63 index62 alt2">63</div><div class="line number64 index63 alt1">64</div><div class="line number65 index64 alt2">65</div><div class="line number66 index65 alt1">66</div><div class="line number67 index66 alt2">67</div><div class="line number68 index67 alt1">68</div><div class="line number69 index68 alt2">69</div><div class="line number70 index69 alt1">70</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">import java.util.*;</code></div><div class="line number2 index1 alt1">&nbsp;</div><div class="line number3 index2 alt2"><code class="htmlscript plain">public class ArraySortedCollection&lt;</code><code class="htmlscript plain">E</code><code class="htmlscript plain">&gt;</code></div><div class="line number4 index3 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">implements SortedCollection&lt;</code><code class="htmlscript plain">E</code><code class="htmlscript plain">&gt;, Iterable&lt;</code><code class="htmlscript plain">E</code><code class="htmlscript plain">&gt;</code></div><div class="line number5 index4 alt2"><code class="htmlscript plain">{</code></div><div class="line number6 index5 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">private Comparator&lt;</code><code class="htmlscript plain">E</code><code class="htmlscript plain">&gt; comparator;</code></div><div class="line number7 index6 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">private ArrayList&lt;</code><code class="htmlscript plain">E</code><code class="htmlscript plain">&gt; list;</code></div><div class="line number8 index7 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number9 index8 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">public ArraySortedCollection(Comparator&lt;</code><code class="htmlscript plain">E</code><code class="htmlscript plain">&gt; c)</code></div><div class="line number10 index9 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">{</code></div><div class="line number11 index10 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">this.list = new ArrayList&lt;</code><code class="htmlscript plain">E</code><code class="htmlscript plain">&gt;();</code></div><div class="line number12 index11 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">this.comparator = c;</code></div><div class="line number13 index12 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></div><div class="line number14 index13 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">public ArraySortedCollection(Collection&lt;? </code><code class="htmlscript plain">extends</code> <code class="htmlscript plain">E&gt; src, Comparator&lt;</code><code class="htmlscript plain">E</code><code class="htmlscript plain">&gt; c)</code></div><div class="line number15 index14 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">{</code></div><div class="line number16 index15 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">this.list = new ArrayList&lt;</code><code class="htmlscript plain">E</code><code class="htmlscript plain">&gt;(src);</code></div><div class="line number17 index16 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">this.comparator = c;</code></div><div class="line number18 index17 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">sortThis();</code></div><div class="line number19 index18 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></div><div class="line number20 index19 alt1">&nbsp;</div><div class="line number21 index20 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">public Comparator&lt;</code><code class="htmlscript plain">E</code><code class="htmlscript plain">&gt; getComparator() { return comparator; }</code></div><div class="line number22 index21 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">public void setComparator(Comparator&lt;</code><code class="htmlscript plain">E</code><code class="htmlscript plain">&gt; cmp) { comparator = cmp; sortThis(); }</code></div><div class="line number23 index22 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number24 index23 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">public boolean add(E e)</code></div><div class="line number25 index24 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">{ boolean r = list.add(e); sortThis(); return r; }</code></div><div class="line number26 index25 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">public boolean addAll(Collection&lt;? </code><code class="htmlscript plain">extends</code> <code class="htmlscript plain">E&gt; ec) </code></div><div class="line number27 index26 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">{ boolean r = list.addAll(ec); sortThis(); return r; }</code></div><div class="line number28 index27 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">public boolean remove(Object o)</code></div><div class="line number29 index28 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">{ boolean r = list.remove(o); sortThis(); return r; }</code></div><div class="line number30 index29 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">public boolean removeAll(Collection&lt;?&gt; c)</code></div><div class="line number31 index30 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">{ boolean r = list.removeAll(c); sortThis(); return r; }</code></div><div class="line number32 index31 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">public boolean retainAll(Collection&lt;?&gt; ec)</code></div><div class="line number33 index32 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">{ boolean r = list.retainAll(ec); sortThis(); return r; }</code></div><div class="line number34 index33 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number35 index34 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">public void clear() { list.clear(); }</code></div><div class="line number36 index35 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">public boolean contains(Object o) { return list.contains(o); }</code></div><div class="line number37 index36 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">public boolean containsAll(Collection &lt;?&gt; c) { return list.containsAll(c); }</code></div><div class="line number38 index37 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">public boolean isEmpty() { return list.isEmpty(); }</code></div><div class="line number39 index38 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">public Iterator&lt;</code><code class="htmlscript plain">E</code><code class="htmlscript plain">&gt; iterator() { return list.iterator(); }</code></div><div class="line number40 index39 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">public int size() { return list.size(); }</code></div><div class="line number41 index40 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">public Object[] toArray() { return list.toArray(); }</code></div><div class="line number42 index41 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">public &lt;</code><code class="htmlscript plain">T</code><code class="htmlscript plain">&gt; T[] toArray(T[] a) { return list.toArray(a); }</code></div><div class="line number43 index42 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number44 index43 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">public boolean equals(Object o)</code></div><div class="line number45 index44 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">{</code></div><div class="line number46 index45 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">if (o == this)</code></div><div class="line number47 index46 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">return true;</code></div><div class="line number48 index47 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number49 index48 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">if (o instanceof ArraySortedCollection)</code></div><div class="line number50 index49 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">{</code></div><div class="line number51 index50 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">ArraySortedCollection&lt;</code><code class="htmlscript plain">E</code><code class="htmlscript plain">&gt; rhs = (ArraySortedCollection&lt;</code><code class="htmlscript plain">E</code><code class="htmlscript plain">&gt;)o;</code></div><div class="line number52 index51 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">return this.list.equals(rhs.list);</code></div><div class="line number53 index52 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></div><div class="line number54 index53 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number55 index54 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">return false;</code></div><div class="line number56 index55 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></div><div class="line number57 index56 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">public int hashCode()</code></div><div class="line number58 index57 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">{</code></div><div class="line number59 index58 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">return list.hashCode();</code></div><div class="line number60 index59 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></div><div class="line number61 index60 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">public String toString()</code></div><div class="line number62 index61 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">{</code></div><div class="line number63 index62 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">return list.toString();</code></div><div class="line number64 index63 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></div><div class="line number65 index64 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number66 index65 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">private void sortThis()</code></div><div class="line number67 index66 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">{</code></div><div class="line number68 index67 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">Collections.sort(list, comparator);</code></div><div class="line number69 index68 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></div><div class="line number70 index69 alt1"><code class="htmlscript plain">}</code></div></div></td></tr></tbody></table></div></div></div></span><p>This quick-and-dirty implementation, written with no optimizations in mind,
                could obviously stand some refactoring. But the point is, the Java
                Collections API was never intended to be the final word in all things
                collection-related. It both needs and encourages extensions. </p><p>Certainly, some extensions will be of the "heavy-duty" variety, such as
                those introduced in <code>java.util.concurrent</code>. But others will be
                as simple as writing a custom algorithm or a simple extension to an
                existing <code>Collection</code> class.</p><p>Extending the Java Collections API might seem overwhelming, but once you
                start doing it, you'll find it's nowhere near as hard as you thought.</p><h2 id="N1018B" class="ibm-h2">Conclusion</h2><p>Like Java Serialization, the Java Collections API is full of unexplored
                nooks and crannies — which is why we're not done with this subject.
                The next article in the <em>5 things</em> series will give you five more ways to do
                even more with the Java 6 Collections API.</p><!--CMA ID: 482819--><!--Site ID: 1--><!--XSLT stylesheet used to transform this file: dw-document-html-8.0.xsl-->
<!-- Article Quiz -->

<!-- Article Resources -->
<div class="ibm-alternate-rule"><hr></div><h4 id="artdownload" class="ibm-h4">Downloadable resources</h4><ul class="ibm-link-list"><li><a class="ibm-document-link" href="j-5things2-pdf.pdf">PDF of this content</a></li><li><a class="ibm-download-link" href="http://www.ibm.com/developerworks/apps/download/index.jsp?contentid=482819&amp;filename=j-5things2-src.zip&amp;method=http&amp;locale=">Sample code for this article</a> (j-5things2-src.zip | 10KB)</li></ul><div class="ibm-alternate-rule"><hr></div><h4 id="artrelatedtopics" class="ibm-h4">Related topics</h4><ul><li>Develop and deploy your next app on the <a href="https://console.bluemix.net/?cm_sp=dw-bluemix-_-j-5things2-_-article">IBM Bluemix cloud
                    platform</a>.</li><li>"<a href="http://www.ibm.com/developerworks/java/library/j-jtp07233.html">Java theory and practice: Concurrent collections classes</a>"
                    (Brian Goetz, developerWorks, July 2003): Learn how Doug Lea's
                    <code>util.concurrent</code> package revitalizes standard collection
                    types <code>List</code> and <code>Map</code>.</li><li>"<a href="http://www.ibm.com/developerworks/java/library/j-collections.html">Spice up collections with generics and concurrency</a>" (John
                    Zukowski, developerWorks, April 2008): Introduces changes to the Java
                    Collections Framework in Java 6.</li></ul>

                                   </div>
<br><hr>

<div class="ibm-col-6-4">
<p class="dw-article-series-head">5 things you didn't know about ...</p>
<h1 id="ibm-pagetitle-h1" class="ibm-h1">The Java 6 Collections API, Part 2</h1><p class="dw-article-subhead">Mutables to watch out for</p>

<p>The Collections classes in <code>java.util</code> were designed to help,
                namely by replacing arrays and, thus, improving Java performance. As you
                learned in the <a href="http://www.ibm.com/developerworks/java/library/j-5things2.html">previous article</a>, they're also malleable, willing to be
                customized and extended in all kinds of ways, in service of good, clean
                code.</p><p>Collections are also powerful, however, and mutable: use them with care and
                abuse them at your own risk.</p><h2 id="N10073" class="ibm-h2">1. Lists aren't the same as
                arrays</h2><p>Java developers frequently make the mistake of assuming that
                <code>ArrayList</code> is simply a replacement for the Java array.
                Collections are backed by arrays, which leads to good performance when
                looking up items randomly within a collection. And, like arrays,
                collections use integer-ordinals to obtain particular items. Still, a
                collection isn't a drop-in replacement for an array.</p><p>The trick to differentiating collections from arrays is knowing the
                difference between <em>order</em> and <em>position</em>. For example,
                <code>List</code> is an interface that preserves the <em>order</em> in
                which items are placed into a collection, as Listing 1 shows:</p><h5 id="listing1" class="ibm-h5">Listing 1. Mutable
                keys</h5><span class="dw-code-nohighlight"><div class="ibm-syntax-container"><div><div id="highlighter_450400" class="syntaxhighlighter  htmlscript"><table border="0" cellpadding="0" cellspacing="0" role="none"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div class="line number23 index22 alt2">23</div><div class="line number24 index23 alt1">24</div><div class="line number25 index24 alt2">25</div><div class="line number26 index25 alt1">26</div><div class="line number27 index26 alt2">27</div><div class="line number28 index27 alt1">28</div><div class="line number29 index28 alt2">29</div><div class="line number30 index29 alt1">30</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">import java.util.*;</code></div><div class="line number2 index1 alt1">&nbsp;</div><div class="line number3 index2 alt2"><code class="htmlscript plain">public class OrderAndPosition</code></div><div class="line number4 index3 alt1"><code class="htmlscript plain">{</code></div><div class="line number5 index4 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">public static &lt;</code><code class="htmlscript plain">T</code><code class="htmlscript plain">&gt; void dumpArray(T[] array)</code></div><div class="line number6 index5 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">{</code></div><div class="line number7 index6 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">System.out.println("=============");</code></div><div class="line number8 index7 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">for (int i=0; i&lt;</code><code class="htmlscript plain">array.length</code><code class="htmlscript plain">; i++)</code></div><div class="line number9 index8 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">System.out.println("Position " + i + ": " + array[i]);</code></div><div class="line number10 index9 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></div><div class="line number11 index10 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">public static &lt;T&gt; void dumpList(List&lt;</code><code class="htmlscript plain">T</code><code class="htmlscript plain">&gt; list)</code></div><div class="line number12 index11 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">{</code></div><div class="line number13 index12 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">System.out.println("=============");</code></div><div class="line number14 index13 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">for (int i=0; i&lt;</code><code class="htmlscript plain">list.size</code><code class="htmlscript plain">(); i++)</code></div><div class="line number15 index14 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">System.out.println("Ordinal " + i + ": " + list.get(i));</code></div><div class="line number16 index15 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></div><div class="line number17 index16 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number18 index17 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">public static void main(String[] args)</code></div><div class="line number19 index18 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">{</code></div><div class="line number20 index19 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">List&lt;String&gt; argList = new ArrayList&lt;</code><code class="htmlscript plain">String</code><code class="htmlscript plain">&gt;(Arrays.asList(args));</code></div><div class="line number21 index20 alt2">&nbsp;</div><div class="line number22 index21 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">dumpArray(args);</code></div><div class="line number23 index22 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">args[1] = null;</code></div><div class="line number24 index23 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">dumpArray(args);</code></div><div class="line number25 index24 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number26 index25 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">dumpList(argList);</code></div><div class="line number27 index26 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">argList.remove(1);</code></div><div class="line number28 index27 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">dumpList(argList);</code></div><div class="line number29 index28 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></div><div class="line number30 index29 alt1"><code class="htmlscript plain">}</code></div></div></td></tr></tbody></table></div></div></div></span><p>When the third element is removed from the above <code>List</code>, the
                other items "behind" it slide up to fill the empty slots. Clearly, this
                collections behavior differs from that of an array. (In fact, removing an
                item from an array is itself not quite the same thing as removing it from
                a <code>List</code>— "removing" an item from an array means
                overwriting its index slot with a new reference or null.)</p><h2 id="N1009B" class="ibm-h2">2. <code>Iterator</code>, you surprise
                me!</h2><p>There's no doubt that Java developers love the Java Collections
                <code>Iterator</code>, but when was the last time you really looked at the
                <code>Iterator</code> interface? Most of the time, we just slap
                <code>Iterator</code> inside a <code>for()</code> loop or enhanced
                <code>for()</code> loop and move on, so to speak.</p><p>But, for those who go digging, <code>Iterator</code> has two surprises in
                store.</p><div class="dw-article-sidebar ibm-background-cool-white-20"><h5>About this series</h5><p>So you think you know about Java programming? The fact is, most
                    developers scratch the surface of the Java platform, learning just
                    enough to get the job done. In this series, Ted Neward digs beneath the core functionality of the
                    Java platform to uncover little-known facts that could help you solve
                    even the stickiest programming challenges.</p></div><p>First, <code>Iterator</code> supports the ability to remove an object from
                a source collection safely, by calling <code>remove()</code> on the
                <code>Iterator</code> itself. The point here is to avoid a
                <code>ConcurrentModifiedException</code>, which signals precisely what its
                name implies: that a collection was modified while an
                <code>Iterator</code> was open against it. Some collections will let you
                get away with removing or adding elements to a <code>Collection</code>
                while iterating across it, but calling <code>remove()</code> on the
                <code>Iterator</code> is a safer practice.</p><p>Second, <code>Iterator</code> supports a derived (and arguably more
                powerful) cousin. <code>ListIterator</code>, only available from
                <code>List</code>s, supports both adding and removing from a
                <code>List</code> during iteration, as well as bidirectional scrolling
                through <code>List</code>s.</p><p>Bidirectional scrolling can be particularly powerful for scenarios such as
                the ubiquitous "sliding set of results," showing 10 of many results
                retrieved from a database or other collection. It can also be used to
                "walk backwards" through a collection or list, rather than trying to do
                everything from the front. Dropping in a <code>ListIterator</code> is much
                easier than using downward-counting integer parameters to
                <code>List.get()</code> to "walk backwards" through a
                <code>List</code>.</p><h2 id="N100F6" class="ibm-h2">3. Not all <code>Iterable</code>s come
                from collections</h2><p>Ruby and Groovy developers like to brag about how they can iterate across a
                text file and print its contents to the console with a single line of
                code. Most of the time, they say, doing the same thing in Java programming
                takes dozens of lines of code: open a <code>FileReader</code>, then a
                <code>BufferedReader</code>, then create a <code>while()</code> loop to
                call <code>getLine()</code> until it comes back <em>null</em>. And, of
                course, you have to do all this in a <code>try/catch/finally</code> block
                that will handle exceptions and close the file handle when finished.</p><p>It may seem like a silly and pedantic argument, but it does have some
                merit.</p><p>What they (and quite a few Java developers) don't know is that not all
                <code>Iterable</code>s have to come from collections. Instead, an
                <code>Iterable</code> can create an <code>Iterator</code> that knows how
                to manufacture the next element out of thin air, rather than blindly
                handing it back from a pre-existing <code>Collection</code>:</p><h5 id="listing2" class="ibm-h5">Listing 2. Iterating a
                file</h5><span class="dw-code-nohighlight"><div class="ibm-syntax-container"><div><div id="highlighter_347799" class="syntaxhighlighter  htmlscript"><table border="0" cellpadding="0" cellspacing="0" role="none"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div class="line number23 index22 alt2">23</div><div class="line number24 index23 alt1">24</div><div class="line number25 index24 alt2">25</div><div class="line number26 index25 alt1">26</div><div class="line number27 index26 alt2">27</div><div class="line number28 index27 alt1">28</div><div class="line number29 index28 alt2">29</div><div class="line number30 index29 alt1">30</div><div class="line number31 index30 alt2">31</div><div class="line number32 index31 alt1">32</div><div class="line number33 index32 alt2">33</div><div class="line number34 index33 alt1">34</div><div class="line number35 index34 alt2">35</div><div class="line number36 index35 alt1">36</div><div class="line number37 index36 alt2">37</div><div class="line number38 index37 alt1">38</div><div class="line number39 index38 alt2">39</div><div class="line number40 index39 alt1">40</div><div class="line number41 index40 alt2">41</div><div class="line number42 index41 alt1">42</div><div class="line number43 index42 alt2">43</div><div class="line number44 index43 alt1">44</div><div class="line number45 index44 alt2">45</div><div class="line number46 index45 alt1">46</div><div class="line number47 index46 alt2">47</div><div class="line number48 index47 alt1">48</div><div class="line number49 index48 alt2">49</div><div class="line number50 index49 alt1">50</div><div class="line number51 index50 alt2">51</div><div class="line number52 index51 alt1">52</div><div class="line number53 index52 alt2">53</div><div class="line number54 index53 alt1">54</div><div class="line number55 index54 alt2">55</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">// FileUtils.java</code></div><div class="line number2 index1 alt1"><code class="htmlscript plain">import java.io.*;</code></div><div class="line number3 index2 alt2"><code class="htmlscript plain">import java.util.*;</code></div><div class="line number4 index3 alt1">&nbsp;</div><div class="line number5 index4 alt2"><code class="htmlscript plain">public class FileUtils</code></div><div class="line number6 index5 alt1"><code class="htmlscript plain">{</code></div><div class="line number7 index6 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">public static Iterable&lt;</code><code class="htmlscript plain">String</code><code class="htmlscript plain">&gt; readlines(String filename)</code></div><div class="line number8 index7 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">throws IOException</code></div><div class="line number9 index8 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">{</code></div><div class="line number10 index9 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">final FileReader fr = new FileReader(filename);</code></div><div class="line number11 index10 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">final BufferedReader br = new BufferedReader(fr);</code></div><div class="line number12 index11 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number13 index12 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">return new Iterable&lt;</code><code class="htmlscript plain">String</code><code class="htmlscript plain">&gt;() {</code></div><div class="line number14 index13 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">public &lt;</code><code class="htmlscript plain">code</code><code class="htmlscript plain">&gt;Iterator&lt;/</code><code class="htmlscript plain">code</code><code class="htmlscript plain">&gt;&lt;</code><code class="htmlscript plain">String</code><code class="htmlscript plain">&gt; iterator() {</code></div><div class="line number15 index14 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">return new &lt;</code><code class="htmlscript plain">code</code><code class="htmlscript plain">&gt;Iterator&lt;/</code><code class="htmlscript plain">code</code><code class="htmlscript plain">&gt;&lt;</code><code class="htmlscript plain">String</code><code class="htmlscript plain">&gt;() {</code></div><div class="line number16 index15 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">public boolean hasNext() {</code></div><div class="line number17 index16 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">return line != null;</code></div><div class="line number18 index17 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></div><div class="line number19 index18 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">public String next() {</code></div><div class="line number20 index19 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">String retval = line;</code></div><div class="line number21 index20 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">line = getLine();</code></div><div class="line number22 index21 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">return retval;</code></div><div class="line number23 index22 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></div><div class="line number24 index23 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">public void remove() {</code></div><div class="line number25 index24 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">throw new UnsupportedOperationException();</code></div><div class="line number26 index25 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></div><div class="line number27 index26 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">String getLine() {</code></div><div class="line number28 index27 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">String line = null;</code></div><div class="line number29 index28 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">try {</code></div><div class="line number30 index29 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">line = br.readLine();</code></div><div class="line number31 index30 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></div><div class="line number32 index31 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">catch (IOException ioEx) {</code></div><div class="line number33 index32 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">line = null;</code></div><div class="line number34 index33 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></div><div class="line number35 index34 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">return line;</code></div><div class="line number36 index35 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></div><div class="line number37 index36 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">String line = getLine();</code></div><div class="line number38 index37 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">};</code></div><div class="line number39 index38 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">}&nbsp;&nbsp; </code></div><div class="line number40 index39 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">};</code></div><div class="line number41 index40 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></div><div class="line number42 index41 alt1"><code class="htmlscript plain">}</code></div><div class="line number43 index42 alt2">&nbsp;</div><div class="line number44 index43 alt1"><code class="htmlscript plain">//DumpApp.java</code></div><div class="line number45 index44 alt2"><code class="htmlscript plain">import java.util.*;</code></div><div class="line number46 index45 alt1">&nbsp;</div><div class="line number47 index46 alt2"><code class="htmlscript plain">public class DumpApp</code></div><div class="line number48 index47 alt1"><code class="htmlscript plain">{</code></div><div class="line number49 index48 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">public static void main(String[] args)</code></div><div class="line number50 index49 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">throws Exception</code></div><div class="line number51 index50 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">{</code></div><div class="line number52 index51 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">for (String line : FileUtils.readlines(args[0]))</code></div><div class="line number53 index52 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">System.out.println(line);</code></div><div class="line number54 index53 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></div><div class="line number55 index54 alt2"><code class="htmlscript plain">}</code></div></div></td></tr></tbody></table></div></div></div></span><p>This approach has the advantage of not holding the entire contents of a
                file in memory, but with the caveat that, as written, it doesn't
                <code>close()</code> the underlying file handle. (You could fix this by
                closing whenever <code>readLine()</code> returns null, but that won't
                solve cases where <code>Iterator</code> doesn't run to completion.)</p><h2 id="N10134" class="ibm-h2">4. Beware the mutable
                <code>hashCode()</code></h2><p><code>Map</code> is a wonderful collection, bringing us the niftiness of
                key/value pair collections often found in other languages like Perl. And
                the JDK gives us a great <code>Map</code> implementation in the form of
                the <code>HashMap</code>, which uses hashtables internally to support fast
                key lookups for corresponding values. But therein lies a subtle problem:
                Keys that support hash codes dependent on the contents of mutable fields
                are vulnerable to a bug that will drive even the most patient Java
                developer batty.</p><p>Assuming the <code>Person</code> object in Listing 3 has a typical
                <code>hashCode()</code> (which uses the <code>firstName</code>,
                <code>lastName</code>, and <code>age</code> fields — all non-final
                — to calculate the <code>hashCode()</code>), the <code>get()</code>
                call to <code>Map</code> will fail and return <code>null</code>:</p><h5 id="listing3" class="ibm-h5">Listing 3. Mutable <code>hashCode()</code> drives
                    me
                buggy</h5><span class="dw-code-nohighlight"><div class="ibm-syntax-container"><div><div id="highlighter_817980" class="syntaxhighlighter  htmlscript"><table border="0" cellpadding="0" cellspacing="0" role="none"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div class="line number23 index22 alt2">23</div><div class="line number24 index23 alt1">24</div><div class="line number25 index24 alt2">25</div><div class="line number26 index25 alt1">26</div><div class="line number27 index26 alt2">27</div><div class="line number28 index27 alt1">28</div><div class="line number29 index28 alt2">29</div><div class="line number30 index29 alt1">30</div><div class="line number31 index30 alt2">31</div><div class="line number32 index31 alt1">32</div><div class="line number33 index32 alt2">33</div><div class="line number34 index33 alt1">34</div><div class="line number35 index34 alt2">35</div><div class="line number36 index35 alt1">36</div><div class="line number37 index36 alt2">37</div><div class="line number38 index37 alt1">38</div><div class="line number39 index38 alt2">39</div><div class="line number40 index39 alt1">40</div><div class="line number41 index40 alt2">41</div><div class="line number42 index41 alt1">42</div><div class="line number43 index42 alt2">43</div><div class="line number44 index43 alt1">44</div><div class="line number45 index44 alt2">45</div><div class="line number46 index45 alt1">46</div><div class="line number47 index46 alt2">47</div><div class="line number48 index47 alt1">48</div><div class="line number49 index48 alt2">49</div><div class="line number50 index49 alt1">50</div><div class="line number51 index50 alt2">51</div><div class="line number52 index51 alt1">52</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">// Person.java</code></div><div class="line number2 index1 alt1"><code class="htmlscript plain">import java.util.*;</code></div><div class="line number3 index2 alt2">&nbsp;</div><div class="line number4 index3 alt1"><code class="htmlscript plain">public class Person</code></div><div class="line number5 index4 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">implements Iterable&lt;</code><code class="htmlscript plain">Person</code><code class="htmlscript plain">&gt;</code></div><div class="line number6 index5 alt1"><code class="htmlscript plain">{</code></div><div class="line number7 index6 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">public Person(String fn, String ln, int a, Person... kids)</code></div><div class="line number8 index7 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">{</code></div><div class="line number9 index8 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">this.firstName = fn; this.lastName = ln; this.age = a;</code></div><div class="line number10 index9 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">for (Person kid : kids)</code></div><div class="line number11 index10 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">children.add(kid);</code></div><div class="line number12 index11 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></div><div class="line number13 index12 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number14 index13 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">// ...</code></div><div class="line number15 index14 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number16 index15 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">public void setFirstName(String value) { this.firstName = value; }</code></div><div class="line number17 index16 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">public void setLastName(String value) { this.lastName = value; }</code></div><div class="line number18 index17 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">public void setAge(int value) { this.age = value; }</code></div><div class="line number19 index18 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number20 index19 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">public int hashCode() {</code></div><div class="line number21 index20 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">return firstName.hashCode() &amp; lastName.hashCode() &amp; age;</code></div><div class="line number22 index21 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></div><div class="line number23 index22 alt2">&nbsp;</div><div class="line number24 index23 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">// ...</code></div><div class="line number25 index24 alt2">&nbsp;</div><div class="line number26 index25 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">private String firstName;</code></div><div class="line number27 index26 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">private String lastName;</code></div><div class="line number28 index27 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">private int age;</code></div><div class="line number29 index28 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">private List&lt;</code><code class="htmlscript plain">Person</code><code class="htmlscript plain">&gt; children = new ArrayList&lt;</code><code class="htmlscript plain">Person</code><code class="htmlscript plain">&gt;();</code></div><div class="line number30 index29 alt1"><code class="htmlscript plain">}</code></div><div class="line number31 index30 alt2">&nbsp;</div><div class="line number32 index31 alt1">&nbsp;</div><div class="line number33 index32 alt2"><code class="htmlscript plain">// MissingHash.java</code></div><div class="line number34 index33 alt1"><code class="htmlscript plain">import java.util.*;</code></div><div class="line number35 index34 alt2">&nbsp;</div><div class="line number36 index35 alt1"><code class="htmlscript plain">public class MissingHash</code></div><div class="line number37 index36 alt2"><code class="htmlscript plain">{</code></div><div class="line number38 index37 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">public static void main(String[] args)</code></div><div class="line number39 index38 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">{</code></div><div class="line number40 index39 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">Person p1 = new Person("Ted", "Neward", 39);</code></div><div class="line number41 index40 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">Person p2 = new Person("Charlotte", "Neward", 38);</code></div><div class="line number42 index41 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">System.out.println(p1.hashCode());</code></div><div class="line number43 index42 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number44 index43 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">Map&lt;</code><code class="htmlscript plain">Person</code><code class="htmlscript plain">, Person&gt; map = new HashMap&lt;</code><code class="htmlscript plain">Person</code><code class="htmlscript plain">, Person&gt;();</code></div><div class="line number45 index44 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">map.put(p1, p2);</code></div><div class="line number46 index45 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number47 index46 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">p1.setLastName("Finkelstein");</code></div><div class="line number48 index47 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">System.out.println(p1.hashCode());</code></div><div class="line number49 index48 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number50 index49 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">System.out.println(map.get(p1));</code></div><div class="line number51 index50 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></div><div class="line number52 index51 alt1"><code class="htmlscript plain">}</code></div></div></td></tr></tbody></table></div></div></div></span><p>Clearly, this approach is a pain but the solution is easy: Never use a
                mutable object type as a key in a <code>HashMap</code>.</p><h2 id="N10175" class="ibm-h2">5. <code>equals()</code> vs
                <code>Comparable</code></h2><p>When cruising through the Javadocs, Java developers frequently happen
                across the <code>SortedSet</code> type (and its lone implementation in the
                JDK, the <code>TreeSet</code>). Because <code>SortedSet</code> is the only
                <code>Collection</code> in the <code>java.util</code> package that offers
                any sorting behavior, developers often begin using it without questioning
                the details too closely. Listing 4 demonstrates:</p><h5 id="listing4" class="ibm-h5">Listing 4. <code>SortedSet</code>, I'm so glad I
                    found
                you!</h5><span class="dw-code-nohighlight"><div class="ibm-syntax-container"><div><div id="highlighter_519631" class="syntaxhighlighter  htmlscript"><table border="0" cellpadding="0" cellspacing="0" role="none"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">import java.util.*;</code></div><div class="line number2 index1 alt1">&nbsp;</div><div class="line number3 index2 alt2"><code class="htmlscript plain">public class UsingSortedSet</code></div><div class="line number4 index3 alt1"><code class="htmlscript plain">{</code></div><div class="line number5 index4 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">public static void main(String[] args)</code></div><div class="line number6 index5 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">{</code></div><div class="line number7 index6 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">List&lt;</code><code class="htmlscript plain">Person</code><code class="htmlscript plain">&gt; persons = Arrays.asList(</code></div><div class="line number8 index7 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">new Person("Ted", "Neward", 39),</code></div><div class="line number9 index8 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">new Person("Ron", "Reynolds", 39),</code></div><div class="line number10 index9 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">new Person("Charlotte", "Neward", 38),</code></div><div class="line number11 index10 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">new Person("Matthew", "McCullough", 18)</code></div><div class="line number12 index11 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">);</code></div><div class="line number13 index12 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">SortedSet ss = new TreeSet(new Comparator&lt;</code><code class="htmlscript plain">Person</code><code class="htmlscript plain">&gt;() {</code></div><div class="line number14 index13 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">public int compare(Person lhs, Person rhs) {</code></div><div class="line number15 index14 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">return lhs.getLastName().compareTo(rhs.getLastName());</code></div><div class="line number16 index15 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></div><div class="line number17 index16 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">});</code></div><div class="line number18 index17 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">ss.addAll(perons);</code></div><div class="line number19 index18 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">System.out.println(ss);</code></div><div class="line number20 index19 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></div><div class="line number21 index20 alt2"><code class="htmlscript plain">}</code></div></div></td></tr></tbody></table></div></div></div></span><p>After working with this code for a while, you might discover one of the
                <code>Set</code>'s core features: that it disallows duplicates. This
                feature is actually described in the <code>Set</code> Javadoc. A
                <code>Set</code> is a "collection that contains no duplicate elements.
                More formally, sets contain no pair of elements e1 and e2 such that
                e1.equals(e2), and at most one null element." </p><p>But this doesn't actually seem to be the case — although none of the
                <code>Person</code> objects in <a href="#listing4">Listing 4</a> are equal
                (according to the <code>equals()</code> implementation on
                <code>Person</code>), only three objects are present within the
                <code>TreeSet</code> when printed.</p><p>Contrary to the stated nature of the set, the <code>TreeSet</code>, which
                requires objects to either implement <code>Comparable</code> directly or
                have a <code>Comparator</code> passed in at the time of construction,
                doesn't use <code>equals()</code> to compare the objects; it uses the
                <code>compare</code> or <code>compareTo</code> methods of
                <code>Comparator/Comparable</code>. </p><p>So, objects stored in a <code>Set</code> will have two potential means of
                determining equality: the expected <code>equals()</code> method and the
                <code>Comparable/Comparator</code> method, depending on the context of who
                is asking.</p><p>What's worse, it isn't sufficient to simply declare that the two should be
                identical, because comparison for the purpose of sorting isn't the same as
                comparison for the purpose of equality: It may be perfectly acceptable to
                consider two <code>Person</code>s equal when sorting by last name, but not
                equal in terms of their contents.</p><p>Always ensure that the difference between <code>equals()</code> and the
                <code>Comparable.compareTo()</code>-returning-0 is clear when implementing
                <code>Set</code>. By extension, the difference should also be clear in
                your documentation.</p><h2 id="N101EB" class="ibm-h2">Conclusion</h2><p>The Java Collections library is scattered with tidbits that can make your
                life much easier and more productive, if only you know about them.
                Unearthing tidbits often involves some complexity, however, like
                discovering that you can have your way with <code>HashMap</code>, just as
                long as you never use a mutable object type as its key.</p><!--CMA ID: 486957--><!--Site ID: 1--><!--XSLT stylesheet used to transform this file: dw-document-html-8.0.xsl-->
<!-- Article Quiz -->

<!-- Article Resources -->
<div class="ibm-alternate-rule"><hr></div><h4 id="artdownload" class="ibm-h4">Downloadable resources</h4><ul class="ibm-link-list"><li><a class="ibm-document-link" href="j-5things3-pdf.pdf">PDF of this content</a></li><li><a class="ibm-download-link" href="http://www.ibm.com/developerworks/apps/download/index.jsp?contentid=486957&amp;filename=j-5things3-src.zip&amp;method=http&amp;locale=">Source code for the places application</a> (j-5things3-src.zip | 15KB)</li></ul><div class="ibm-alternate-rule"><hr></div><h4 id="artrelatedtopics" class="ibm-h4">Related topics</h4><ul><li>Develop and deploy your next app on the <a href="https://console.bluemix.net/?cm_sp=dw-bluemix-_-j-5things3-_-article">IBM Bluemix cloud
                    platform</a>.</li><li>"<a href="http://www.ibm.com/developerworks/java/library/j-jtp07233.html">Java theory and practice: Concurrent collections classes</a>"
                    (Brian Goetz, developerWorks, July 2003): Learn how Doug Lea's
                    <code>util.concurrent</code> package revitalizes standard collection
                    types <code>List</code> and <code>Map</code>.</li><li>"<a href="http://www.ibm.com/developerworks/java/library/j-collections.html">Spice up collections with generics and concurrency</a>" (John
                    Zukowski, developerWorks, April 2008): Introduces changes to the Java
                    Collections Framework in Java 6.</li><li>"<a href="http://www.ibm.com/developerworks/java/library/j-jtp07233.html"><em>Java theory and practice</em>: Concurrent collections
                        classes</a>" (Brian Goetz, developerWorks, July 2003): Learn how
                    Doug Lea's <code>util.concurrent</code> package revitalizes standard
                    collection types like <code>List</code> and
                    <code>Map</code>.</li><li>"<a href="http://www.ibm.com/developerworks/java/library/j-collections.html">Spice up collections with generics and concurrency</a>" (John
                    Zukowski, developerWorks, April 2008): Introduces changes to the Java
                    Collections Framework in Java 6.</li></ul>
                                    </div>
</body>
</html>