<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<title>Multithreaded Java programming</title>
    <link rel="stylesheet" href="../../Guides/grey.css">
    <style type="text/css">

    </style>
</head>
<body>
<a href="https://www.ibm.com/developerworks/java/library/j-5things15/index.html">src</a>
<h2>Multithreaded Java programming</h2>
<div class="ibm-col-6-4">
            <p class="dw-article-series-head">5 things you didn't know about ...</p>
        <h1 id="ibm-pagetitle-h1" class="ibm-h1">Multithreaded Java programming</h1><p class="dw-article-subhead">On the subtleties of high-performance threading</p>
        
        <div class="dw-article-sidebar ibm-background-cool-white-20"><h5>About this series</h5><p>So you think you know about Java programming? The fact is, most
    developers scratch the surface of the Java platform, learning just
    enough to get the job done. In this ongoing series, Java technology sleuths dig beneath the core
    functionality of the Java platform, turning up tips and tricks that
    could help solve even your stickiest programming challenges.</p></div><p>While few Javaâ„¢ developers can afford to ignore multithreaded
programming and the Java platform libraries that support it, even fewer
have time to study threads in depth. Instead, we learn about threads ad
hoc, adding new tips and techniques to our toolboxes as we need them. It's
possible to build and run decent applications this way, but you can do
better. Understanding the threading idiosyncrasies of the Java compiler
and the JVM will help you write more efficient, better performing Java
code.</p><p>In this installment of the <em>5 things</em> series, I introduce some of the subtler
aspects of multithreaded programming with synchronized methods, volatile
variables, and atomic classes. My discussion focuses especially on how
some of these constructs interact with the JVM and Java compiler, and how
the different interactions could affect Java application performance.</p><h2 id="N10073" class="ibm-h2">1. Synchronized method or synchronized
block?</h2><p>You may have occasionally pondered whether to synchronize an entire method
call or only the thread-safe subset of that method. In these situations,
it is helpful to know that when the Java compiler converts your source
code to byte code, it handles synchronized methods and synchronized blocks
very differently.</p><p>When the JVM executes a synchronized method, the executing thread
identifies that the method's <code>method_info</code> structure has the
<code>ACC_SYNCHRONIZED</code> flag set, then it automatically acquires the
object's lock, calls the method, and releases the lock. If an exception
occurs, the thread automatically releases the lock.</p><p> Synchronizing a method block, on the other hand, bypasses the JVM's
built-in support for acquiring an object's lock and exception handling and
requires that the functionality be explicitly written in byte code. If you
read the byte code for a method with a synchronized block, you will see
more than a dozen additional operations to manage this functionality.
Listing 1 shows calls to generate both a synchronized method and a
synchronized block:</p><h5 id="listing1" class="ibm-h5">Listing 1. Two approaches to
    synchronization</h5><span class="dw-code-nohighlight"><div class="ibm-syntax-container"><div><div id="highlighter_225857" class="syntaxhighlighter  htmlscript"><table border="0" cellpadding="0" cellspacing="0" role="none"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">package com.geekcap;</code></div><div class="line number2 index1 alt1">&nbsp;</div><div class="line number3 index2 alt2"><code class="htmlscript plain">public class SynchronizationExample {</code></div><div class="line number4 index3 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">private int i;</code></div><div class="line number5 index4 alt2">&nbsp;</div><div class="line number6 index5 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">public synchronized int synchronizedMethodGet() {</code></div><div class="line number7 index6 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">return i;</code></div><div class="line number8 index7 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></div><div class="line number9 index8 alt2">&nbsp;</div><div class="line number10 index9 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">public int synchronizedBlockGet() {</code></div><div class="line number11 index10 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">synchronized( this ) {</code></div><div class="line number12 index11 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">return i;</code></div><div class="line number13 index12 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></div><div class="line number14 index13 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></div><div class="line number15 index14 alt2"><code class="htmlscript plain">}</code></div></div></td></tr></tbody></table></div></div></div></span><p>The <code>synchronizedMethodGet()</code> method generates the following
byte code:</p><span class="dw-code-nohighlight"><div class="ibm-syntax-container"><div><div id="highlighter_218003" class="syntaxhighlighter  htmlscript"><table border="0" cellpadding="0" cellspacing="0" role="none"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">0:&nbsp; aload_0</code></div><div class="line number2 index1 alt1"><code class="htmlscript plain">1:&nbsp; getfield</code></div><div class="line number3 index2 alt2"><code class="htmlscript plain">2:&nbsp; nop</code></div><div class="line number4 index3 alt1"><code class="htmlscript plain">3:&nbsp; iconst_m1</code></div><div class="line number5 index4 alt2"><code class="htmlscript plain">4:&nbsp; ireturn</code></div></div></td></tr></tbody></table></div></div></div></span><p>And here's the byte code from the <code>synchronizedBlockGet()</code>
method:</p><span class="dw-code-nohighlight"><div class="ibm-syntax-container"><div><div id="highlighter_900929" class="syntaxhighlighter  htmlscript"><table border="0" cellpadding="0" cellspacing="0" role="none"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">0:&nbsp; aload_0</code></div><div class="line number2 index1 alt1"><code class="htmlscript plain">1:&nbsp; dup</code></div><div class="line number3 index2 alt2"><code class="htmlscript plain">2:&nbsp; astore_1</code></div><div class="line number4 index3 alt1"><code class="htmlscript plain">3:&nbsp; monitorenter</code></div><div class="line number5 index4 alt2"><code class="htmlscript plain">4:&nbsp; aload_0</code></div><div class="line number6 index5 alt1"><code class="htmlscript plain">5:&nbsp; getfield</code></div><div class="line number7 index6 alt2"><code class="htmlscript plain">6:&nbsp; nop</code></div><div class="line number8 index7 alt1"><code class="htmlscript plain">7:&nbsp; iconst_m1</code></div><div class="line number9 index8 alt2"><code class="htmlscript plain">8:&nbsp; aload_1</code></div><div class="line number10 index9 alt1"><code class="htmlscript plain">9:&nbsp; monitorexit</code></div><div class="line number11 index10 alt2"><code class="htmlscript plain">10: ireturn</code></div><div class="line number12 index11 alt1"><code class="htmlscript plain">11: astore_2</code></div><div class="line number13 index12 alt2"><code class="htmlscript plain">12: aload_1</code></div><div class="line number14 index13 alt1"><code class="htmlscript plain">13: monitorexit</code></div><div class="line number15 index14 alt2"><code class="htmlscript plain">14: aload_2</code></div><div class="line number16 index15 alt1"><code class="htmlscript plain">15: athrow</code></div></div></td></tr></tbody></table></div></div></div></span><p>Creating the synchronized block yielded 16 lines of bytecode, whereas
synchronizing the method returned just 5.</p><h2 id="N1009F" class="ibm-h2">2. ThreadLocal variables</h2><p>If you want to maintain a single instance of a variable for all instances
of a class, you will use static-class member variables to do it. If you
want to maintain an instance of a variable on a per-thread basis, you'll
use thread-local variables. <code>ThreadLocal</code> variables are
different from normal variables in that each thread has its own
individually initialized instance of the variable, which it accesses via
<code>get()</code> or <code>set()</code> methods.</p><p>Let's say you're developing a multithreaded code tracer whose goal is to
uniquely identify each thread's path through your code. The challenge is
that you need to coordinate multiple methods in multiple classes across
multiple threads. Without <code>ThreadLocal</code>, this would be a
complex problem. When a thread started executing, it would need to
generate a unique token to identify it in the tracer and then pass that
unique token to each method in the trace.</p><p>With <code>ThreadLocal</code>, things are simpler. The thread initializes
the thread-local variable at the start of execution and then accesses it
from each method in each class, with assurance that the variable will only
host trace information for the currently executing thread. When it's done
executing, the thread can pass its thread-specific trace to a management
object responsible for maintaining all traces.</p><p>Using <code>ThreadLocal</code> makes sense when you need to store variable
instances on a per-thread basis.</p><h2 id="N100BE" class="ibm-h2">3. Volatile variables</h2><p>I estimate that roughly half of all Java developers know that the Java
language includes the keyword <code>volatile</code>. Of those, only about
10 percent know what it means, and even fewer know how to use it
effectively. In short, identifying a variable with the
<code>volatile</code> keyword means that the variable's value will be
modified by different threads. To fully understand what the
<code>volatile</code> keyword does, it's first helpful to understand how
threads treat non-volatile variables.</p><p>In order to enhance performance, the Java language specification permits
the JRE to maintain a local copy of a variable in each thread that
references it. You could consider these "thread-local" copies of variables
to be similar to a cache, helping the thread avoid checking main memory
each time it needs to access the variable's value.</p><p>But consider what happens in the following scenario: two threads start and
the first reads variable A as 5 and the second reads variable A as 10. If
variable A has changed from 5 to 10, then the first thread will not be
aware of the change, so it will have the wrong value for A. If variable A
were marked as being <code>volatile</code>, however, then any time a
thread read the value of A, it would refer back to the master copy of A
and read its current value.</p><p>If the variables in your applications are not going to change, then a
thread-local cache makes sense. Otherwise, it's very helpful to know what
the <code>volatile</code> keyword can do for you. </p><h2 id="N100DA" class="ibm-h2">4. Volatile versus
synchronized</h2><p>If a variable is declared as <code>volatile</code>, it means that it is
expected to be modified by multiple threads. Naturally, you would expect
the JRE to impose some form of synchronization for volatile variables. As
luck would have it, the JRE does implicitly provide synchronization when
accessing volatile variables, but with one very big caveat: reading a
volatile variable is synchronized and writing to a volatile variable is
synchronized, but non-atomic operations are not.</p><p>What this means is that the following code is not thread safe: </p><span class="dw-code-nohighlight"><div class="ibm-syntax-container"><div><div id="highlighter_628004" class="syntaxhighlighter  htmlscript"><table border="0" cellpadding="0" cellspacing="0" role="none"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">myVolatileVar++;</code></div></div></td></tr></tbody></table></div></div></div></span><p>The previous statement could also be written as follows:</p><span class="dw-code-nohighlight"><div class="ibm-syntax-container"><div><div id="highlighter_763208" class="syntaxhighlighter  htmlscript"><table border="0" cellpadding="0" cellspacing="0" role="none"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">int temp = 0;</code></div><div class="line number2 index1 alt1"><code class="htmlscript plain">synchronize( myVolatileVar ) {</code></div><div class="line number3 index2 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">temp = myVolatileVar;</code></div><div class="line number4 index3 alt1"><code class="htmlscript plain">}</code></div><div class="line number5 index4 alt2">&nbsp;</div><div class="line number6 index5 alt1"><code class="htmlscript plain">temp++;</code></div><div class="line number7 index6 alt2">&nbsp;</div><div class="line number8 index7 alt1"><code class="htmlscript plain">synchronize( myVolatileVar ) {</code></div><div class="line number9 index8 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;</code><code class="htmlscript plain">myVolatileVar = temp;</code></div><div class="line number10 index9 alt1"><code class="htmlscript plain">}</code></div></div></td></tr></tbody></table></div></div></div></span><p>In other words, if a volatile variable is updated such that, under the
hood, the value is read, modified, and then assigned a new value, the
result will be a non-thread-safe operation performed between two
synchronous operations. You can then decide whether to use synchronization
or rely on the JRE's support for automatically synchronizing volatile
variables. The better approach depends on your use case: If the assigned
value of the volatile variable depends on its current value (such as
during an increment operation), then you must use synchronization if you
want that operation to be thread safe.</p><h2 id="N100F2" class="ibm-h2">5. Atomic field updaters</h2><p>When incrementing or decrementing a primitive type in a multithreaded
environment, you're far better off using one of the atomic classes
found in the <code>java.util.concurrent.atomic</code> package than you
would be writing your own synchronized code block. The atomic classes
guarantee that certain operations will be performed in a thread-safe
manner, such as incrementing and decrementing a value, updating a value,
and adding a value. The list of atomic classes includes
<code>AtomicInteger</code>, <code>AtomicBoolean</code>,
<code>AtomicLong</code>, <code>AtomicIntegerArray</code>, and so
forth. The latest additions to the atomic package are
<code>DoubleAccumulator</code>, <code>DoubleAdder</code>,
<code>LongAccumulator</code> and <code>LongAdder</code> classes. 
They maintain a set of internal variables in order to reduce contention and operate around the given lambda expression.</p><p>The challenge of using atomic classes is that all class operations,
including <code>get</code>, <code>set</code>, and the family of
<code>get-set</code> operations, are rendered atomic. This means that
<code>read</code> and <code>write</code> operations that do not modify the
value of an atomic variable are synchronized, not just the important
<code>read-update-write</code> operations. The workaround, if you want
more fine-grained control over the deployment of synchronized code, is to
use an atomic field updater.</p><h3 id="N10128" class="ibm-h3">Using atomic updates</h3><p>Atomic field updaters like <code>AtomicIntegerFieldUpdater</code>,
<code>AtomicLongFieldUpdater</code>, and
<code>AtomicReferenceFieldUpdater</code> are basically wrappers applied to
a volatile field. Internally, the Java class libraries make use of them.
While they are not widely used in application code, there's no reason you
can't use them too.</p><p>Listing 2 presents an example of a class that uses atomic updates to change
the book that someone is reading:</p><h5 id="listing2" class="ibm-h5">Listing 2. Book
class</h5><span class="dw-code-nohighlight"><div class="ibm-syntax-container"><div><div id="highlighter_671393" class="syntaxhighlighter  htmlscript"><table border="0" cellpadding="0" cellspacing="0" role="none"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div class="line number23 index22 alt2">23</div><div class="line number24 index23 alt1">24</div><div class="line number25 index24 alt2">25</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">package com.geeckap.atomicexample;</code></div><div class="line number2 index1 alt1">&nbsp;</div><div class="line number3 index2 alt2"><code class="htmlscript plain">public class Book</code></div><div class="line number4 index3 alt1"><code class="htmlscript plain">{</code></div><div class="line number5 index4 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">private String name;</code></div><div class="line number6 index5 alt1">&nbsp;</div><div class="line number7 index6 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">public Book()</code></div><div class="line number8 index7 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">{</code></div><div class="line number9 index8 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></div><div class="line number10 index9 alt1">&nbsp;</div><div class="line number11 index10 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">public Book( String name )</code></div><div class="line number12 index11 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">{</code></div><div class="line number13 index12 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">this.name = name;</code></div><div class="line number14 index13 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></div><div class="line number15 index14 alt2">&nbsp;</div><div class="line number16 index15 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">public String getName()</code></div><div class="line number17 index16 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">{</code></div><div class="line number18 index17 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">return name;</code></div><div class="line number19 index18 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></div><div class="line number20 index19 alt1">&nbsp;</div><div class="line number21 index20 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">public void setName( String name )</code></div><div class="line number22 index21 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">{</code></div><div class="line number23 index22 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">this.name = name;</code></div><div class="line number24 index23 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></div><div class="line number25 index24 alt2"><code class="htmlscript plain">}</code></div></div></td></tr></tbody></table></div></div></div></span><p>The <code>Book</code> class is just a POJO (plain old Java object) that has
a single field: name.</p><h5 id="listing3" class="ibm-h5">Listing 3. MyObject
class</h5><span class="dw-code-nohighlight"><div class="ibm-syntax-container"><div><div id="highlighter_600882" class="syntaxhighlighter  htmlscript"><table border="0" cellpadding="0" cellspacing="0" role="none"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div class="line number23 index22 alt2">23</div><div class="line number24 index23 alt1">24</div><div class="line number25 index24 alt2">25</div><div class="line number26 index25 alt1">26</div><div class="line number27 index26 alt2">27</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">package com.geeckap.atomicexample;</code></div><div class="line number2 index1 alt1">&nbsp;</div><div class="line number3 index2 alt2"><code class="htmlscript plain">import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;</code></div><div class="line number4 index3 alt1">&nbsp;</div><div class="line number5 index4 alt2"><code class="htmlscript plain">/**</code></div><div class="line number6 index5 alt1"><code class="htmlscript spaces">&nbsp;</code><code class="htmlscript plain">*</code></div><div class="line number7 index6 alt2"><code class="htmlscript spaces">&nbsp;</code><code class="htmlscript plain">* @author shaines</code></div><div class="line number8 index7 alt1"><code class="htmlscript spaces">&nbsp;</code><code class="htmlscript plain">*/</code></div><div class="line number9 index8 alt2"><code class="htmlscript plain">public class MyObject</code></div><div class="line number10 index9 alt1"><code class="htmlscript plain">{</code></div><div class="line number11 index10 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">private volatile Book whatImReading;</code></div><div class="line number12 index11 alt1">&nbsp;</div><div class="line number13 index12 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">private static final AtomicReferenceFieldUpdater&lt;</code><code class="htmlscript plain">MyObject</code><code class="htmlscript plain">,Book&gt; updater =</code></div><div class="line number14 index13 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">AtomicReferenceFieldUpdater.newUpdater( </code></div><div class="line number15 index14 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">MyObject.class, Book.class, "whatImReading" );</code></div><div class="line number16 index15 alt1">&nbsp;</div><div class="line number17 index16 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">public Book getWhatImReading()</code></div><div class="line number18 index17 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">{</code></div><div class="line number19 index18 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">return whatImReading;</code></div><div class="line number20 index19 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></div><div class="line number21 index20 alt2">&nbsp;</div><div class="line number22 index21 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">public void setWhatImReading( Book whatImReading )</code></div><div class="line number23 index22 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">{</code></div><div class="line number24 index23 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">//this.whatImReading = whatImReading;</code></div><div class="line number25 index24 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">updater.compareAndSet( this, this.whatImReading, whatImReading );</code></div><div class="line number26 index25 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></div><div class="line number27 index26 alt2"><code class="htmlscript plain">}</code></div></div></td></tr></tbody></table></div></div></div></span><p>The <code>MyObject</code> class in <a href="#listing3">Listing 3</a>
exposes its <code>whatAmIReading</code> property as you would expect, with
<code>get</code> and <code>set</code> methods, but the <code>set</code>
method does something a little different. Instead of simply assigning its
internal <code>Book</code> reference to the specified <code>Book</code>
(which would be accomplished using the code that is commented out in <a href="#listing3">Listing 3</a>), it uses an
<code>AtomicReferenceFieldUpdater</code>.</p><h3 id="N1016F" class="ibm-h3">AtomicReferenceFieldUpdater</h3><p>The Javadoc for <code>AtomicReferenceFieldUpdater</code> defines it as
follows:</p><blockquote><em>A reflection-based utility that enables atomic updates to
    designated volatile reference fields of designated classes. This class
    is designed for use in atomic data structures in which several
    reference fields of the same node are independently subject to atomic
    updates.</em></blockquote><p>In <a href="#listing3">Listing 3</a>, the
<code>AtomicReferenceFieldUpdater</code> is created by a call to its
static <code>newUpdater</code> method, which accepts three parameters:</p><ul class="ibm-bullet-list"><li>The class of the object containing the field (in this case,
    <code>MyObject</code>)</li><li>The class of the object that will be updated atomically (in this case,
    <code>Book</code>)</li><li>The name of the field to be updated atomically</li></ul><p>The real value here is that the <code>getWhatImReading</code> method is
executed without synchronization of any kind, whereas the
<code>setWhatImReading</code> is executed as an atomic operation.</p><p>Listing 4 illustrates how to use the <code>setWhatImReading()</code> method
and asserts that the value changes correctly:</p><h5 id="listing4" class="ibm-h5">Listing 4. Test case that exercises the atomic
    update</h5><span class="dw-code-nohighlight"><div class="ibm-syntax-container"><div><div id="highlighter_578114" class="syntaxhighlighter  htmlscript"><table border="0" cellpadding="0" cellspacing="0" role="none"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div class="line number23 index22 alt2">23</div><div class="line number24 index23 alt1">24</div><div class="line number25 index24 alt2">25</div><div class="line number26 index25 alt1">26</div><div class="line number27 index26 alt2">27</div><div class="line number28 index27 alt1">28</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">package com.geeckap.atomicexample;</code></div><div class="line number2 index1 alt1">&nbsp;</div><div class="line number3 index2 alt2"><code class="htmlscript plain">import org.junit.Assert;</code></div><div class="line number4 index3 alt1"><code class="htmlscript plain">import org.junit.Before;</code></div><div class="line number5 index4 alt2"><code class="htmlscript plain">import org.junit.Test;</code></div><div class="line number6 index5 alt1">&nbsp;</div><div class="line number7 index6 alt2"><code class="htmlscript plain">public class AtomicExampleTest</code></div><div class="line number8 index7 alt1"><code class="htmlscript plain">{</code></div><div class="line number9 index8 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">private MyObject obj;</code></div><div class="line number10 index9 alt1">&nbsp;</div><div class="line number11 index10 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">@Before</code></div><div class="line number12 index11 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">public void setUp()</code></div><div class="line number13 index12 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">{</code></div><div class="line number14 index13 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">obj = new MyObject();</code></div><div class="line number15 index14 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">obj.setWhatImReading( new Book( "Java 2 From Scratch" ) );</code></div><div class="line number16 index15 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></div><div class="line number17 index16 alt2">&nbsp;</div><div class="line number18 index17 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">@Test</code></div><div class="line number19 index18 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">public void testUpdate()</code></div><div class="line number20 index19 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">{</code></div><div class="line number21 index20 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">obj.setWhatImReading( new Book( </code></div><div class="line number22 index21 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">"Pro Java EE 5 Performance Management and Optimization" ) );</code></div><div class="line number23 index22 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">Assert.assertEquals( "Incorrect book name", </code></div><div class="line number24 index23 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">"Pro Java EE 5 Performance Management and Optimization", </code></div><div class="line number25 index24 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">obj.getWhatImReading().getName() );</code></div><div class="line number26 index25 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></div><div class="line number27 index26 alt2">&nbsp;</div><div class="line number28 index27 alt1"><code class="htmlscript plain">}</code></div></div></td></tr></tbody></table></div></div></div></span><p>See <a href="#artrelatedtopics">Related topics</a> to learn more about
atomic classes.</p><h2 id="N101AF" class="ibm-h2">Conclusion</h2><p>Multithreaded programming is always challenging, but as the Java platform
has evolved, it has gained support that simplifies some multithreaded
programming tasks. In this article, I discussed five things that you may
not have known about writing multithreaded applications on the Java
platform, including the difference between synchronizing methods versus
synchronizing code blocks, the value of employing <code>ThreadLocal</code>
variables for per-thread storage, the widely misunderstood
<code>volatile</code> keyword (including the dangers of relying on
<code>volatile</code> for your synchronization needs), and a brief look at
the intricacies of atomic classes.</p><!--CMA ID: 570034--><!--Site ID: 1--><!--XSLT stylesheet used to transform this file: dw-document-html-8.0.xsl-->
        <!-- Article Quiz -->
        
        <!-- Article Resources -->
        <div class="ibm-alternate-rule"><hr></div><h4 id="artdownload" class="ibm-h4">Downloadable resources</h4><ul class="ibm-link-list"><li><a class="ibm-document-link" href="j-5things15-pdf.pdf">PDF of this content</a></li></ul><div class="ibm-alternate-rule"><hr></div><h4 id="artrelatedtopics" class="ibm-h4">Related topics</h4><ul><li>Develop and deploy your next app on the <a href="https://console.bluemix.net/?cm_sp=dw-bluemix-_-j-5things15-_-article">IBM Bluemix cloud
        platform</a>.</li><li><a href="http://www.javaconcurrencyinpractice.com/">Java
        Concurrency in Practice</a> (Brian Goetz, et. al. Addison-Wesley,
    2006): Brian's remarkable ability to distill complex concepts for
    readers makes this book a must on any Java developer's
    bookshelf.</li><li>"<a href="http://www.ibm.com/developerworks/ibm/library/it-haggar_bytecode/">Java bytecode: Understanding bytecode makes you a better
        programmer</a>" (Peter Haggar, developerWorks, July 2001): A
    tutorial introduction to the byways of bytecode, including an earlier
    example illustrating the difference between synchronized methods and
    synchronized blocks.</li><li>"<a href="http://www.ibm.com/developerworks/java/library/j-jtp11234/"><em>Java theory and practice</em>: Going atomic</a>" (Brian
    Goetz, developerWorks, November 2004): Explains how atomic classes
    enable the development of highly scalable nonblocking algorithms in
    the Java language.</li><li>"<a href="http://www.ibm.com/developerworks/java/library/j-jtp1126.html"><em>Java theory and practice</em>: Concurrency made simple
        (sort of)</a>" (Brian Goetz, developerWorks, November 2002):
    Guides you through the <code>java.util.concurrent</code>
    package.</li><li>"<a href="http://www.ibm.com/developerworks/java/library/j-5things4.html"><em>5 things you didn't know about</em> ...
        java.util.concurrent, Part 1</a>" (Ted Neward, developerWorks, May
    2010): Get introduced to five concurrent collections classes, which
    retrofit standard collections classes for your concurrency programming
    needs.</li></ul>
    </div>
<br><hr>
</body>
</html>