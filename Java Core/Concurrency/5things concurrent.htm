<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<title>Document</title>
    <link rel="stylesheet" href="../../Guides/grey.css">
    <style type="text/css">

    </style>
</head>
<body>
<a href="https://www.ibm.com/developerworks/java/library/j-5things4/index.html">src1</a>
<a href="https://www.ibm.com/developerworks/java/library/j-5things5/index.html">src2</a>
<h2>java.util.concurrent</h2>
<div class="ibm-col-6-4">
            <p class="dw-article-series-head">5 things you didn't know about ...</p>
        <h1 id="ibm-pagetitle-h1" class="ibm-h1">java.util.concurrent, Part 1</h1><p class="dw-article-subhead">Multithreaded programming with concurrent Collections</p>
        
        
        <p>Concurrent Collections were a huge addition to Java™, but many Java
developers avoid this package because they assume that it, like the
problems it seeks to solve, must be complicated.</p><p>In fact, <code>java.util.concurrent</code> contains many classes that
effectively resolve common concurrency problems, without requiring you to
break a sweat. Read on to learn how <code>java.util.concurrent</code>
classes like <code>CopyOnWriteArrayList</code> and
<code>BlockingQueue</code> help you solve the pernicious challenges of
multithreaded programming.</p><h2 id="N10097" class="ibm-h2">1. TimeUnit</h2><div class="dw-article-sidebar ibm-background-cool-white-20"><h5>About this series</h5><p>So you think you know about Java programming? The fact is, most
    developers scratch the surface of the Java platform, learning just
    enough to get the job done. In this series, Ted Neward digs beneath the core functionality of the
    Java platform to uncover little-known facts that could help you solve
    even the stickiest programming challenges.</p></div><p>While it's not a Collections class, <em>per se</em>, the
<code>java.util.concurrent.TimeUnit</code> enumeration makes code vastly
easier to read. Using <code>TimeUnit</code> frees developers using your
method or API from the tyranny of the millisecond.</p><p><code>TimeUnit</code> incorporates all units of time, ranging from
<code>MILLISECONDS</code> and <code>MICROSECONDS</code> up through
<code>DAYS</code> and <code>HOURS</code>, which means it handles almost
all time-span types that a developer might need. And, thanks to conversion
methods declared on the enum, it's even trivial to convert
<code>HOURS</code> back to <code>MILLISECONDS</code> when time speeds
up.</p><h2 id="N100C4" class="ibm-h2">2. CopyOnWriteArrayList</h2><p>Making a fresh copy of an array is too expensive an operation, in terms of
both time and memory overhead, to consider for ordinary use; developers
often resort to using a synchronized <code>ArrayList</code> instead.
That's also a costly option, however, because every time you iterate
across the contents of the collection, you have to synchronize all
operations, including read and write, to ensure consistency.</p><p>This puts the cost structure backward for scenarios where numerous readers
are reading the <code>ArrayList</code> but few are modifying it.</p><p><code>CopyOnWriteArrayList</code> is the amazing little jewel that solves
this problem. Its Javadoc defines <code>CopyOnWriteArrayList</code> as a
"thread-safe variant of <code>ArrayList</code> in which all mutative
operations (add, set, and so on) are implemented by making a fresh copy of
the array."</p><p>The collection internally copies its contents over to a new array upon any
modification, so readers accessing the contents of the array incur no
synchronization costs (because they're never operating on mutable
data).</p><p>Essentially, <code>CopyOnWriteArrayList</code> is ideal for the exact
scenario where <code>ArrayList</code> fails us: read-often, write-rarely
collections such as the <code>Listener</code>s for a JavaBean event.</p><h2 id="N100EA" class="ibm-h2">3. BlockingQueue</h2><p>The <code>BlockingQueue</code> interface states that it is a
<code>Queue</code>, meaning that its items are stored in first in, first
out (FIFO) order. Items inserted in a particular order are retrieved in
that same order — but with the added guarantee that any attempt to
retrieve an item from an empty queue will block the calling thread until
the item is ready to be retrieved. Likewise, any attempt to insert an item
into a queue that is full will block the calling thread until space
becomes available in the queue's storage.</p><p><code>BlockingQueue</code> neatly solves the problem of how to "hand off"
items gathered by one thread to another thread for processing, without
explicit concern for synchronization issues. The Guarded Blocks trail in
the Java Tutorial is a good example. It builds a single-slot bounded
buffer using manual synchronization and
<code>wait()</code>/<code>notifyAll()</code> to signal between threads
when a new item is available for consumption, and when the slot is ready
to be filled with a new item. (See the <a href="http://java.sun.com/docs/books/tutorial/essential/concurrency/guardmeth.html">Guarded Blocks implementation</a> for details.)</p><p>Despite the fact that the code in the Guarded Blocks tutorial works, it's
long, messy, and not entirely intuitive. Back in the early days of the
Java platform, yes, Java developers had to tangle with such code; but
surely things have improved?</p><p>Listing 1 shows a rewritten version of the Guarded Blocks code where I've
employed an <code>ArrayBlockingQueue</code> instead of the hand-written
<code>Drop</code>.</p><h5 id="listing1" class="ibm-h5">Listing 1.
BlockingQueue</h5><span class="dw-code-nohighlight"><div class="ibm-syntax-container"><div><div id="highlighter_267070" class="syntaxhighlighter  htmlscript"><table border="0" cellpadding="0" cellspacing="0" role="none"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div class="line number23 index22 alt2">23</div><div class="line number24 index23 alt1">24</div><div class="line number25 index24 alt2">25</div><div class="line number26 index25 alt1">26</div><div class="line number27 index26 alt2">27</div><div class="line number28 index27 alt1">28</div><div class="line number29 index28 alt2">29</div><div class="line number30 index29 alt1">30</div><div class="line number31 index30 alt2">31</div><div class="line number32 index31 alt1">32</div><div class="line number33 index32 alt2">33</div><div class="line number34 index33 alt1">34</div><div class="line number35 index34 alt2">35</div><div class="line number36 index35 alt1">36</div><div class="line number37 index36 alt2">37</div><div class="line number38 index37 alt1">38</div><div class="line number39 index38 alt2">39</div><div class="line number40 index39 alt1">40</div><div class="line number41 index40 alt2">41</div><div class="line number42 index41 alt1">42</div><div class="line number43 index42 alt2">43</div><div class="line number44 index43 alt1">44</div><div class="line number45 index44 alt2">45</div><div class="line number46 index45 alt1">46</div><div class="line number47 index46 alt2">47</div><div class="line number48 index47 alt1">48</div><div class="line number49 index48 alt2">49</div><div class="line number50 index49 alt1">50</div><div class="line number51 index50 alt2">51</div><div class="line number52 index51 alt1">52</div><div class="line number53 index52 alt2">53</div><div class="line number54 index53 alt1">54</div><div class="line number55 index54 alt2">55</div><div class="line number56 index55 alt1">56</div><div class="line number57 index56 alt2">57</div><div class="line number58 index57 alt1">58</div><div class="line number59 index58 alt2">59</div><div class="line number60 index59 alt1">60</div><div class="line number61 index60 alt2">61</div><div class="line number62 index61 alt1">62</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">import java.util.*;</code></div><div class="line number2 index1 alt1"><code class="htmlscript plain">import java.util.concurrent.*;</code></div><div class="line number3 index2 alt2">&nbsp;</div><div class="line number4 index3 alt1"><code class="htmlscript plain">class Producer</code></div><div class="line number5 index4 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">implements Runnable</code></div><div class="line number6 index5 alt1"><code class="htmlscript plain">{</code></div><div class="line number7 index6 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">private BlockingQueue&lt;</code><code class="htmlscript plain">String</code><code class="htmlscript plain">&gt; drop;</code></div><div class="line number8 index7 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">List&lt;</code><code class="htmlscript plain">String</code><code class="htmlscript plain">&gt; messages = Arrays.asList(</code></div><div class="line number9 index8 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">"Mares eat oats",</code></div><div class="line number10 index9 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">"Does eat oats",</code></div><div class="line number11 index10 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">"Little lambs eat ivy",</code></div><div class="line number12 index11 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">"Wouldn't you eat ivy too?");</code></div><div class="line number13 index12 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number14 index13 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">public Producer(BlockingQueue&lt;</code><code class="htmlscript plain">String</code><code class="htmlscript plain">&gt; d) { this.drop = d; }</code></div><div class="line number15 index14 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number16 index15 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">public void run()</code></div><div class="line number17 index16 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">{</code></div><div class="line number18 index17 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">try</code></div><div class="line number19 index18 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">{</code></div><div class="line number20 index19 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">for (String s : messages)</code></div><div class="line number21 index20 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">drop.put(s);</code></div><div class="line number22 index21 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">drop.put("DONE");</code></div><div class="line number23 index22 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></div><div class="line number24 index23 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">catch (InterruptedException intEx)</code></div><div class="line number25 index24 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">{</code></div><div class="line number26 index25 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">System.out.println("Interrupted! " + </code></div><div class="line number27 index26 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">"Last one out, turn out the lights!");</code></div><div class="line number28 index27 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></div><div class="line number29 index28 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">}&nbsp;&nbsp;&nbsp; </code></div><div class="line number30 index29 alt1"><code class="htmlscript plain">}</code></div><div class="line number31 index30 alt2">&nbsp;</div><div class="line number32 index31 alt1"><code class="htmlscript plain">class Consumer</code></div><div class="line number33 index32 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">implements Runnable</code></div><div class="line number34 index33 alt1"><code class="htmlscript plain">{</code></div><div class="line number35 index34 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">private BlockingQueue&lt;</code><code class="htmlscript plain">String</code><code class="htmlscript plain">&gt; drop;</code></div><div class="line number36 index35 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">public Consumer(BlockingQueue&lt;</code><code class="htmlscript plain">String</code><code class="htmlscript plain">&gt; d) { this.drop = d; }</code></div><div class="line number37 index36 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number38 index37 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">public void run()</code></div><div class="line number39 index38 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">{</code></div><div class="line number40 index39 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">try</code></div><div class="line number41 index40 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">{</code></div><div class="line number42 index41 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">String msg = null;</code></div><div class="line number43 index42 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">while (!((msg = drop.take()).equals("DONE")))</code></div><div class="line number44 index43 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">System.out.println(msg);</code></div><div class="line number45 index44 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></div><div class="line number46 index45 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">catch (InterruptedException intEx)</code></div><div class="line number47 index46 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">{</code></div><div class="line number48 index47 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">System.out.println("Interrupted! " + </code></div><div class="line number49 index48 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">"Last one out, turn out the lights!");</code></div><div class="line number50 index49 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></div><div class="line number51 index50 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></div><div class="line number52 index51 alt1"><code class="htmlscript plain">}</code></div><div class="line number53 index52 alt2">&nbsp;</div><div class="line number54 index53 alt1"><code class="htmlscript plain">public class ABQApp</code></div><div class="line number55 index54 alt2"><code class="htmlscript plain">{</code></div><div class="line number56 index55 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">public static void main(String[] args)</code></div><div class="line number57 index56 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">{</code></div><div class="line number58 index57 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">BlockingQueue&lt;</code><code class="htmlscript plain">String</code><code class="htmlscript plain">&gt; drop = new ArrayBlockingQueue(1, true);</code></div><div class="line number59 index58 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">(new Thread(new Producer(drop))).start();</code></div><div class="line number60 index59 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">(new Thread(new Consumer(drop))).start();</code></div><div class="line number61 index60 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></div><div class="line number62 index61 alt1"><code class="htmlscript plain">}</code></div></div></td></tr></tbody></table></div></div></div></span><p>The <code>ArrayBlockingQueue</code> also honors "fairness" — meaning
that it can give reader and writer threads first in, first out access. The
alternative would be a more efficient policy that risks starving out some
threads. (That is, it would be more efficient to allow readers to run
while other readers held the lock, but you'd risk a constant stream of
reader threads keeping the writer from ever doing its job.)</p><div class="dw-article-sidebar ibm-background-cool-white-20"><h5>Bug watch!</h5><p>By the way, you're right if you noticed that Guarded Blocks contains a
    huge bug — what would happen if a developer synchronized on the
    <code>Drop</code> instance inside of <code>main()</code>?</p></div><p><code>BlockingQueue</code> also supports methods that take a time
parameter, indicating how long the thread should block before returning to
signal failure to insert or retrieve the item in question. Doing this
avoids an unbounded wait, which can be death to a production system, given
an unbounded wait can all too easily turn into a system hang requiring a
reboot.</p><h2 id="N10132" class="ibm-h2">4. ConcurrentMap</h2><p><code>Map</code> hosts a subtle concurrency bug that has led many an unwary
Java developer astray. <code>ConcurrentMap</code> is the easy
solution.</p><p>When a <code>Map</code> is accessed from multiple threads, it's common to
use either <code>containsKey()</code> or <code>get()</code> to find out
whether a given key is present before storing the key/value pair. But even
with a synchronized <code>Map</code>, a thread could sneak in during this
process and seize control of the <code>Map</code>. The problem is that the
lock is acquired at the start of <code>get()</code>, then released before
the lock can be acquired again, in the call to <code>put()</code>. The
result is a race condition: it's a race between the two threads, and the
outcome will be different based on who runs first.</p><p>If two threads call a method at exactly the same moment, each will test and
each will put, losing the first thread's value in the process.
Fortunately, the <code>ConcurrentMap</code> interface supports a number of
additional methods that are designed to do two things under a single lock:
<code>putIfAbsent()</code>, for instance, does the test first, then does a
put only if the key isn't stored in the <code>Map</code>.</p><h2 id="N10160" class="ibm-h2">5. SynchronousQueues</h2><p><code>SynchronousQueue</code> is an interesting creature, according to the
Javadoc:</p><blockquote> A blocking queue in which each insert operation must wait for a
corresponding remove operation by another thread, and vice versa. A
synchronous queue does not have any internal capacity, not even a capacity
of one. </blockquote><p>Essentially, <code>SynchronousQueue</code> is another implementation of the
aforementioned <code>BlockingQueue</code>. It gives us an extremely
lightweight way to exchange single elements from one thread to another,
using the blocking semantics used by <code>ArrayBlockingQueue</code>. In
Listing 2, I've rewritten the code from <a href="#listing1">Listing 1</a>
using <code>SynchronousQueue</code> instead of
<code>ArrayBlockingQueue</code>:</p><h5 id="listing2" class="ibm-h5">Listing 2.
SynchronousQueue</h5><span class="dw-code-nohighlight"><div class="ibm-syntax-container"><div><div id="highlighter_147827" class="syntaxhighlighter  htmlscript"><table border="0" cellpadding="0" cellspacing="0" role="none"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div class="line number23 index22 alt2">23</div><div class="line number24 index23 alt1">24</div><div class="line number25 index24 alt2">25</div><div class="line number26 index25 alt1">26</div><div class="line number27 index26 alt2">27</div><div class="line number28 index27 alt1">28</div><div class="line number29 index28 alt2">29</div><div class="line number30 index29 alt1">30</div><div class="line number31 index30 alt2">31</div><div class="line number32 index31 alt1">32</div><div class="line number33 index32 alt2">33</div><div class="line number34 index33 alt1">34</div><div class="line number35 index34 alt2">35</div><div class="line number36 index35 alt1">36</div><div class="line number37 index36 alt2">37</div><div class="line number38 index37 alt1">38</div><div class="line number39 index38 alt2">39</div><div class="line number40 index39 alt1">40</div><div class="line number41 index40 alt2">41</div><div class="line number42 index41 alt1">42</div><div class="line number43 index42 alt2">43</div><div class="line number44 index43 alt1">44</div><div class="line number45 index44 alt2">45</div><div class="line number46 index45 alt1">46</div><div class="line number47 index46 alt2">47</div><div class="line number48 index47 alt1">48</div><div class="line number49 index48 alt2">49</div><div class="line number50 index49 alt1">50</div><div class="line number51 index50 alt2">51</div><div class="line number52 index51 alt1">52</div><div class="line number53 index52 alt2">53</div><div class="line number54 index53 alt1">54</div><div class="line number55 index54 alt2">55</div><div class="line number56 index55 alt1">56</div><div class="line number57 index56 alt2">57</div><div class="line number58 index57 alt1">58</div><div class="line number59 index58 alt2">59</div><div class="line number60 index59 alt1">60</div><div class="line number61 index60 alt2">61</div><div class="line number62 index61 alt1">62</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">import java.util.*;</code></div><div class="line number2 index1 alt1"><code class="htmlscript plain">import java.util.concurrent.*;</code></div><div class="line number3 index2 alt2">&nbsp;</div><div class="line number4 index3 alt1"><code class="htmlscript plain">class Producer</code></div><div class="line number5 index4 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">implements Runnable</code></div><div class="line number6 index5 alt1"><code class="htmlscript plain">{</code></div><div class="line number7 index6 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">private BlockingQueue&lt;</code><code class="htmlscript plain">String</code><code class="htmlscript plain">&gt; drop;</code></div><div class="line number8 index7 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">List&lt;</code><code class="htmlscript plain">String</code><code class="htmlscript plain">&gt; messages = Arrays.asList(</code></div><div class="line number9 index8 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">"Mares eat oats",</code></div><div class="line number10 index9 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">"Does eat oats",</code></div><div class="line number11 index10 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">"Little lambs eat ivy",</code></div><div class="line number12 index11 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">"Wouldn't you eat ivy too?");</code></div><div class="line number13 index12 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number14 index13 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">public Producer(BlockingQueue&lt;</code><code class="htmlscript plain">String</code><code class="htmlscript plain">&gt; d) { this.drop = d; }</code></div><div class="line number15 index14 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number16 index15 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">public void run()</code></div><div class="line number17 index16 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">{</code></div><div class="line number18 index17 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">try</code></div><div class="line number19 index18 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">{</code></div><div class="line number20 index19 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">for (String s : messages)</code></div><div class="line number21 index20 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">drop.put(s);</code></div><div class="line number22 index21 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">drop.put("DONE");</code></div><div class="line number23 index22 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></div><div class="line number24 index23 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">catch (InterruptedException intEx)</code></div><div class="line number25 index24 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">{</code></div><div class="line number26 index25 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">System.out.println("Interrupted! " + </code></div><div class="line number27 index26 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">"Last one out, turn out the lights!");</code></div><div class="line number28 index27 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></div><div class="line number29 index28 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">}&nbsp;&nbsp;&nbsp; </code></div><div class="line number30 index29 alt1"><code class="htmlscript plain">}</code></div><div class="line number31 index30 alt2">&nbsp;</div><div class="line number32 index31 alt1"><code class="htmlscript plain">class Consumer</code></div><div class="line number33 index32 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">implements Runnable</code></div><div class="line number34 index33 alt1"><code class="htmlscript plain">{</code></div><div class="line number35 index34 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">private BlockingQueue&lt;</code><code class="htmlscript plain">String</code><code class="htmlscript plain">&gt; drop;</code></div><div class="line number36 index35 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">public Consumer(BlockingQueue&lt;</code><code class="htmlscript plain">String</code><code class="htmlscript plain">&gt; d) { this.drop = d; }</code></div><div class="line number37 index36 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number38 index37 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">public void run()</code></div><div class="line number39 index38 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">{</code></div><div class="line number40 index39 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">try</code></div><div class="line number41 index40 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">{</code></div><div class="line number42 index41 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">String msg = null;</code></div><div class="line number43 index42 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">while (!((msg = drop.take()).equals("DONE")))</code></div><div class="line number44 index43 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">System.out.println(msg);</code></div><div class="line number45 index44 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></div><div class="line number46 index45 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">catch (InterruptedException intEx)</code></div><div class="line number47 index46 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">{</code></div><div class="line number48 index47 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">System.out.println("Interrupted! " + </code></div><div class="line number49 index48 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">"Last one out, turn out the lights!");</code></div><div class="line number50 index49 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></div><div class="line number51 index50 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></div><div class="line number52 index51 alt1"><code class="htmlscript plain">}</code></div><div class="line number53 index52 alt2">&nbsp;</div><div class="line number54 index53 alt1"><code class="htmlscript plain">public class SynQApp</code></div><div class="line number55 index54 alt2"><code class="htmlscript plain">{</code></div><div class="line number56 index55 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">public static void main(String[] args)</code></div><div class="line number57 index56 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">{</code></div><div class="line number58 index57 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">BlockingQueue&lt;</code><code class="htmlscript plain">String</code><code class="htmlscript plain">&gt; drop = new SynchronousQueue&lt;</code><code class="htmlscript plain">String</code><code class="htmlscript plain">&gt;();</code></div><div class="line number59 index58 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">(new Thread(new Producer(drop))).start();</code></div><div class="line number60 index59 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">(new Thread(new Consumer(drop))).start();</code></div><div class="line number61 index60 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></div><div class="line number62 index61 alt1"><code class="htmlscript plain">}</code></div></div></td></tr></tbody></table></div></div></div></span><p>The implementation code looks almost identical, but the application has an
added benefit, in that <code>SynchronousQueue</code> will allow an insert
into the queue only if there is a thread waiting to consume it.</p><p>In practice, <code>SynchronousQueue</code> is similar to the "rendezvous
channels" available in languages like Ada or CSP. These are also sometimes
known as "joins" in other environments, including .NET (see <a href="#artrelatedtopics">Related topics</a>).</p><h2 id="N10196" class="ibm-h2">Conclusion</h2><p>Why struggle with introducing concurrency to your Collections classes when
the Java runtime library offers handy, prebuilt equivalents? <a href="https://www.ibm.com/developerworks/java/library/j-5things5.html">The next article</a> in this series explores even more of the
<code>java.util.concurrent</code> namespace.</p><!--CMA ID: 490327--><!--Site ID: 1--><!--XSLT stylesheet used to transform this file: dw-document-html-8.0.xsl-->
        <!-- Article Quiz -->
        
        <!-- Article Resources -->
        <div class="ibm-alternate-rule"><hr></div><h4 id="artdownload" class="ibm-h4">Downloadable resources</h4><ul class="ibm-link-list"><li><a class="ibm-document-link" href="j-5things4-pdf.pdf">PDF of this content</a></li><li><a class="ibm-download-link" href="http://www.ibm.com/developerworks/apps/download/index.jsp?contentid=490327&amp;filename=j-5things4-src.zip&amp;method=http&amp;locale=">Sample code for this article</a> (j-5things4-src.zip | 23KB)</li></ul><div class="ibm-alternate-rule"><hr></div><h4 id="artrelatedtopics" class="ibm-h4">Related topics</h4><ul><li>Develop and deploy your next app on the <a href="https://console.bluemix.net/?cm_sp=dw-bluemix-_-j-5things4-_-article">IBM Bluemix cloud
    platform</a>.</li><li>"<a href="http://www.ibm.com/developerworks/java/library/j-jtp07233.html"><em>Java theory and practice</em>: Concurrent collections
        classes</a>" (Brian Goetz, developerWorks, July 2003): Learn how
    Doug Lea's <code>util.concurrent</code> package revitalizes standard
    collection types <code>List</code> and <code>Map</code>.</li><li><a href="http://www.javaconcurrencyinpractice.com/">Java
        Concurrency in Practice</a> (Brian Goetz, et. al. Addison-Wesley,
    2006): Brian's remarkable ability to distill complex concepts for
    readers makes this book a must on any Java developer's
    bookshelf.</li><li>"<a href="http://www.ibm.com/developerworks/java/library/j-collections.html">Spice up collections with generics and concurrency</a>" (John
    Zukowski, developerWorks, April 2008): Introduces changes to the Java
    Collections Framework in Java 6.</li><li><a href="http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/package-summary.html"><em>Package java.util.concurrent, Java platform SE
    8</em></a>: Learn more about the utility classes discussed in this
    article.</li><li><a href="http://java.sun.com/docs/books/tutorial/essential/concurrency/guardmeth.html">Guarded Blocks</a>: The most common idiom for coordinating
    threads.</li><li><a href="https://www.microsoft.com/en-us/research/publication/the-joins-concurrency-library/">The Joins Concurrency Library</a>: Microsoft® Research put
    out this library implementing the <em>joins</em> concept as a
    synchronization mechanism; the associated research paper (in PDF) is a
    good source for learning about the theory behind joins.</li></ul>
  <!-- CENTER_6_4_CONTENT_COLUMN_END -->
    </div>
<br><hr>

<div class="ibm-col-6-4">
            <p class="dw-article-series-head">5 things you didn't know about ...</p>
        <h1 id="ibm-pagetitle-h1" class="ibm-h1">java.util.concurrent, Part 2</h1><p class="dw-article-subhead">Concurrent programming means working smarter, not harder</p>
        
        <p>Concurrent Collections make concurrent programming easier by providing
thread-safe, well-tuned data structures. In some cases, however,
developers need to go one step further, and think about regulating and/or
throttling thread execution. Given that the whole point of
<code>java.util.concurrent</code> is to simplify multithreaded
programming, you might hope the package would include synchronization
utilities — and it does.</p><p>This article, a follow-up to <a href="https://www.ibm.com/developerworks/java/library/j-5things4.html">Part 1</a>, introduces several synchronization constructs that are a
higher level than the core language primitives (monitors), but not so high
that they're buried inside a Collection class. Using these locks and gates
is fairly straightforward once you know what they're for.</p><div class="dw-article-sidebar ibm-background-cool-white-20"><h5>About this series</h5><p>So you think you know about Java programming? The fact is, most
    developers scratch the surface of the Java platform, learning just
    enough to get the job done. In this series, Ted Neward digs beneath the core functionality of the
    Java platform to uncover little-known facts that could help you solve
    even the stickiest programming challenges.</p></div><h2 id="N10093" class="ibm-h2">1. Semaphore</h2><p>In some enterprise systems, it's not uncommon for developers to need to
throttle the number of open requests (threads/actions) against a
particular resource — in fact, throttling can sometimes improve the
throughput of a system by reducing the amount of contention against that
particular resource. While it's certainly possible to try to write the
throttling code by hand, it's easier to use the semaphore class, which
takes care of throttling for you, as shown in Listing 1:</p><h5 id="listing1" class="ibm-h5">Listing 1. Use Semaphore to
throttle</h5><span class="dw-code-nohighlight"><div class="ibm-syntax-container"><div><div id="highlighter_948236" class="syntaxhighlighter  htmlscript"><table border="0" cellpadding="0" cellspacing="0" role="none"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div class="line number23 index22 alt2">23</div><div class="line number24 index23 alt1">24</div><div class="line number25 index24 alt2">25</div><div class="line number26 index25 alt1">26</div><div class="line number27 index26 alt2">27</div><div class="line number28 index27 alt1">28</div><div class="line number29 index28 alt2">29</div><div class="line number30 index29 alt1">30</div><div class="line number31 index30 alt2">31</div><div class="line number32 index31 alt1">32</div><div class="line number33 index32 alt2">33</div><div class="line number34 index33 alt1">34</div><div class="line number35 index34 alt2">35</div><div class="line number36 index35 alt1">36</div><div class="line number37 index36 alt2">37</div><div class="line number38 index37 alt1">38</div><div class="line number39 index38 alt2">39</div><div class="line number40 index39 alt1">40</div><div class="line number41 index40 alt2">41</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">import java.util.*;import java.util.concurrent.*;</code></div><div class="line number2 index1 alt1">&nbsp;</div><div class="line number3 index2 alt2"><code class="htmlscript plain">public class SemApp</code></div><div class="line number4 index3 alt1"><code class="htmlscript plain">{</code></div><div class="line number5 index4 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">public static void main(String[] args)</code></div><div class="line number6 index5 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">{</code></div><div class="line number7 index6 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">Runnable limitedCall = new Runnable() {</code></div><div class="line number8 index7 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">final Random rand = new Random();</code></div><div class="line number9 index8 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">final Semaphore available = new Semaphore(3);</code></div><div class="line number10 index9 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">int count = 0;</code></div><div class="line number11 index10 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">public void run()</code></div><div class="line number12 index11 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">{</code></div><div class="line number13 index12 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">int time = rand.nextInt(15);</code></div><div class="line number14 index13 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">int num = count++;</code></div><div class="line number15 index14 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number16 index15 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">try</code></div><div class="line number17 index16 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">{</code></div><div class="line number18 index17 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">available.acquire();</code></div><div class="line number19 index18 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number20 index19 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">System.out.println("Executing " + </code></div><div class="line number21 index20 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">"long-running action for " + </code></div><div class="line number22 index21 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">time + " seconds... #" + num);</code></div><div class="line number23 index22 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number24 index23 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">Thread.sleep(time * 1000);</code></div><div class="line number25 index24 alt2">&nbsp;</div><div class="line number26 index25 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">System.out.println("Done with #" + </code></div><div class="line number27 index26 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">num + "!");</code></div><div class="line number28 index27 alt1">&nbsp;</div><div class="line number29 index28 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">available.release();</code></div><div class="line number30 index29 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></div><div class="line number31 index30 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">catch (InterruptedException intEx)</code></div><div class="line number32 index31 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">{</code></div><div class="line number33 index32 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">intEx.printStackTrace();</code></div><div class="line number34 index33 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></div><div class="line number35 index34 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></div><div class="line number36 index35 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">};</code></div><div class="line number37 index36 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number38 index37 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">for (int i=0; i&lt;10; i++)</code></div><div class="line number39 index38 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">new Thread(limitedCall).start();</code></div><div class="line number40 index39 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></div><div class="line number41 index40 alt2"><code class="htmlscript plain">}</code></div></div></td></tr></tbody></table></div></div></div></span><p>Even though the 10 threads in this sample are running (which you can verify
by executing <code>jstack</code> against the Java process running
<code>SemApp</code>), only three are active. The other seven are held at
bay until one of the semaphore counts is released. (Actually, the
<code>Semaphore</code> class supports acquiring and releasing more than
one <em>permit</em> at a time, but that wouldn't make sense in this
scenario.)</p><h2 id="N100B1" class="ibm-h2">2. CountDownLatch</h2><p>If <code>Semaphore</code> is the concurrency class designed to allow
threads "in" one at a time (perhaps evoking memories of bouncers at
popular nightclubs), then <code>CountDownLatch</code> is the starting gate
at a horse race. This class holds all threads at bay until a particular
condition is met, at which point it releases them all at once.</p><h5 id="listing2" class="ibm-h5">Listing 2. CountDownLatch: Let's go to the
    races!</h5><span class="dw-code-nohighlight"><div class="ibm-syntax-container"><div><div id="highlighter_718689" class="syntaxhighlighter  htmlscript"><table border="0" cellpadding="0" cellspacing="0" role="none"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div class="line number23 index22 alt2">23</div><div class="line number24 index23 alt1">24</div><div class="line number25 index24 alt2">25</div><div class="line number26 index25 alt1">26</div><div class="line number27 index26 alt2">27</div><div class="line number28 index27 alt1">28</div><div class="line number29 index28 alt2">29</div><div class="line number30 index29 alt1">30</div><div class="line number31 index30 alt2">31</div><div class="line number32 index31 alt1">32</div><div class="line number33 index32 alt2">33</div><div class="line number34 index33 alt1">34</div><div class="line number35 index34 alt2">35</div><div class="line number36 index35 alt1">36</div><div class="line number37 index36 alt2">37</div><div class="line number38 index37 alt1">38</div><div class="line number39 index38 alt2">39</div><div class="line number40 index39 alt1">40</div><div class="line number41 index40 alt2">41</div><div class="line number42 index41 alt1">42</div><div class="line number43 index42 alt2">43</div><div class="line number44 index43 alt1">44</div><div class="line number45 index44 alt2">45</div><div class="line number46 index45 alt1">46</div><div class="line number47 index46 alt2">47</div><div class="line number48 index47 alt1">48</div><div class="line number49 index48 alt2">49</div><div class="line number50 index49 alt1">50</div><div class="line number51 index50 alt2">51</div><div class="line number52 index51 alt1">52</div><div class="line number53 index52 alt2">53</div><div class="line number54 index53 alt1">54</div><div class="line number55 index54 alt2">55</div><div class="line number56 index55 alt1">56</div><div class="line number57 index56 alt2">57</div><div class="line number58 index57 alt1">58</div><div class="line number59 index58 alt2">59</div><div class="line number60 index59 alt1">60</div><div class="line number61 index60 alt2">61</div><div class="line number62 index61 alt1">62</div><div class="line number63 index62 alt2">63</div><div class="line number64 index63 alt1">64</div><div class="line number65 index64 alt2">65</div><div class="line number66 index65 alt1">66</div><div class="line number67 index66 alt2">67</div><div class="line number68 index67 alt1">68</div><div class="line number69 index68 alt2">69</div><div class="line number70 index69 alt1">70</div><div class="line number71 index70 alt2">71</div><div class="line number72 index71 alt1">72</div><div class="line number73 index72 alt2">73</div><div class="line number74 index73 alt1">74</div><div class="line number75 index74 alt2">75</div><div class="line number76 index75 alt1">76</div><div class="line number77 index76 alt2">77</div><div class="line number78 index77 alt1">78</div><div class="line number79 index78 alt2">79</div><div class="line number80 index79 alt1">80</div><div class="line number81 index80 alt2">81</div><div class="line number82 index81 alt1">82</div><div class="line number83 index82 alt2">83</div><div class="line number84 index83 alt1">84</div><div class="line number85 index84 alt2">85</div><div class="line number86 index85 alt1">86</div><div class="line number87 index86 alt2">87</div><div class="line number88 index87 alt1">88</div><div class="line number89 index88 alt2">89</div><div class="line number90 index89 alt1">90</div><div class="line number91 index90 alt2">91</div><div class="line number92 index91 alt1">92</div><div class="line number93 index92 alt2">93</div><div class="line number94 index93 alt1">94</div><div class="line number95 index94 alt2">95</div><div class="line number96 index95 alt1">96</div><div class="line number97 index96 alt2">97</div><div class="line number98 index97 alt1">98</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">import java.util.*;</code></div><div class="line number2 index1 alt1"><code class="htmlscript plain">import java.util.concurrent.*;</code></div><div class="line number3 index2 alt2">&nbsp;</div><div class="line number4 index3 alt1"><code class="htmlscript plain">class Race</code></div><div class="line number5 index4 alt2"><code class="htmlscript plain">{</code></div><div class="line number6 index5 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">private Random rand = new Random();</code></div><div class="line number7 index6 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number8 index7 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">private int distance = rand.nextInt(250);</code></div><div class="line number9 index8 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">private CountDownLatch start;</code></div><div class="line number10 index9 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">private CountDownLatch finish;</code></div><div class="line number11 index10 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number12 index11 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">private List&lt;</code><code class="htmlscript plain">String</code><code class="htmlscript plain">&gt; horses = new ArrayList&lt;</code><code class="htmlscript plain">String</code><code class="htmlscript plain">&gt;();</code></div><div class="line number13 index12 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number14 index13 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">public Race(String... names)</code></div><div class="line number15 index14 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">{</code></div><div class="line number16 index15 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">this.horses.addAll(Arrays.asList(names));</code></div><div class="line number17 index16 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></div><div class="line number18 index17 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number19 index18 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">public void run()</code></div><div class="line number20 index19 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">throws InterruptedException</code></div><div class="line number21 index20 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">{</code></div><div class="line number22 index21 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">System.out.println("And the horses are stepping up to the gate...");</code></div><div class="line number23 index22 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">final CountDownLatch start = new CountDownLatch(1);</code></div><div class="line number24 index23 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">final CountDownLatch finish = new CountDownLatch(horses.size());</code></div><div class="line number25 index24 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">final List&lt;</code><code class="htmlscript plain">String</code><code class="htmlscript plain">&gt; places = </code></div><div class="line number26 index25 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">Collections.synchronizedList(new ArrayList&lt;</code><code class="htmlscript plain">String</code><code class="htmlscript plain">&gt;());</code></div><div class="line number27 index26 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number28 index27 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">for (final String h : horses)</code></div><div class="line number29 index28 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">{</code></div><div class="line number30 index29 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">new Thread(new Runnable() {</code></div><div class="line number31 index30 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">public void run() {</code></div><div class="line number32 index31 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">try</code></div><div class="line number33 index32 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">{</code></div><div class="line number34 index33 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">System.out.println(h + </code></div><div class="line number35 index34 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">" stepping up to the gate...");</code></div><div class="line number36 index35 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">start.await();</code></div><div class="line number37 index36 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number38 index37 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">int traveled = 0;</code></div><div class="line number39 index38 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">while (traveled &lt; distance)</code></div><div class="line number40 index39 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">{</code></div><div class="line number41 index40 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">// In a 0-2 second period of time....</code></div><div class="line number42 index41 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">Thread.sleep(rand.nextInt(3) * 1000);</code></div><div class="line number43 index42 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number44 index43 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">// ... a horse travels 0-14 lengths</code></div><div class="line number45 index44 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">traveled += rand.nextInt(15);</code></div><div class="line number46 index45 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">System.out.println(h + </code></div><div class="line number47 index46 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">" advanced to " + traveled + "!");</code></div><div class="line number48 index47 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></div><div class="line number49 index48 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">finish.countDown();</code></div><div class="line number50 index49 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">System.out.println(h + </code></div><div class="line number51 index50 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">" crossed the finish!");</code></div><div class="line number52 index51 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">places.add(h);</code></div><div class="line number53 index52 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></div><div class="line number54 index53 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">catch (InterruptedException intEx)</code></div><div class="line number55 index54 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">{</code></div><div class="line number56 index55 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">System.out.println("ABORTING RACE!!!");</code></div><div class="line number57 index56 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">intEx.printStackTrace();</code></div><div class="line number58 index57 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></div><div class="line number59 index58 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></div><div class="line number60 index59 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">}).start();</code></div><div class="line number61 index60 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></div><div class="line number62 index61 alt1">&nbsp;</div><div class="line number63 index62 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">System.out.println("And... they're off!");</code></div><div class="line number64 index63 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">start.countDown();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </code></div><div class="line number65 index64 alt2">&nbsp;</div><div class="line number66 index65 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">finish.await();</code></div><div class="line number67 index66 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">System.out.println("And we have our winners!");</code></div><div class="line number68 index67 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">System.out.println(places.get(0) + " took the gold...");</code></div><div class="line number69 index68 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">System.out.println(places.get(1) + " got the silver...");</code></div><div class="line number70 index69 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">System.out.println("and " + places.get(2) + " took home the bronze.");</code></div><div class="line number71 index70 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></div><div class="line number72 index71 alt1"><code class="htmlscript plain">}</code></div><div class="line number73 index72 alt2">&nbsp;</div><div class="line number74 index73 alt1"><code class="htmlscript plain">public class CDLApp</code></div><div class="line number75 index74 alt2"><code class="htmlscript plain">{</code></div><div class="line number76 index75 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">public static void main(String[] args)</code></div><div class="line number77 index76 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">throws InterruptedException, java.io.IOException</code></div><div class="line number78 index77 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">{</code></div><div class="line number79 index78 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">System.out.println("Prepping...");</code></div><div class="line number80 index79 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number81 index80 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">Race r = new Race(</code></div><div class="line number82 index81 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">"Beverly Takes a Bath",</code></div><div class="line number83 index82 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">"RockerHorse",</code></div><div class="line number84 index83 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">"Phineas",</code></div><div class="line number85 index84 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">"Ferb",</code></div><div class="line number86 index85 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">"Tin Cup",</code></div><div class="line number87 index86 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">"I'm Faster Than a Monkey",</code></div><div class="line number88 index87 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">"Glue Factory Reject"</code></div><div class="line number89 index88 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">);</code></div><div class="line number90 index89 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number91 index90 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">System.out.println("It's a race of " + r.getDistance() + " lengths");</code></div><div class="line number92 index91 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number93 index92 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">System.out.println("Press Enter to run the race....");</code></div><div class="line number94 index93 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">System.in.read();</code></div><div class="line number95 index94 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number96 index95 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">r.run();</code></div><div class="line number97 index96 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></div><div class="line number98 index97 alt1"><code class="htmlscript plain">}</code></div></div></td></tr></tbody></table></div></div></div></span><p>Notice in <a href="#listing2">Listing 2</a> that
<code>CountDownLatch</code> serves two purposes: First it releases all of
the threads simultaneously, simulating the start of the race; but later a
different latch simulates the end of the race, essentially so that the
"main" thread can print out the results. For a race with more commentary,
you could add <code>CountDownLatch</code>es at the "turns" and "halfway"
points of the race, as horses crossed the quarter, half, and three-quarter
values in the distance.</p><h2 id="N100D1" class="ibm-h2">3. Executor</h2><p>The examples in <a href="#listing1">Listing 1</a> and <a href="#listing2">Listing 2</a> both suffer from a fairly frustrating flaw, in that
they force you to create <code>Thread</code> objects directly. This is a
recipe for trouble because in some JVMs, creating a <code>Thread</code> is
a heavyweight operation, and it's far better to reuse existing
<code>Thread</code>s than to create new ones. In other JVMs, however, it's
exactly the opposite: <code>Thread</code>s are pretty lightweight, and
it's far better to just <code>new</code>-up one when you need it. Of
course, if Murphy has his way (which he usually does), whichever approach
you use will be exactly the wrong one for the platform you end up
deploying on.</p><p>The JSR-166 expert group (see <a href="#artrelatedtopics">Related
    topics</a>) anticipated this situation, to some degree. Rather than
have Java developers create <code>Thread</code>s directly, they introduced
the <code>Executor</code> interface, an abstraction for making new
threads. As shown in Listing 3, <code>Executor</code> allows you to create
threads without having to <code>new</code> the <code>Thread</code> objects
yourself:</p><h5 id="listing3" class="ibm-h5">Listing 3.
Executor</h5><span class="dw-code-nohighlight"><div class="ibm-syntax-container"><div><div id="highlighter_829699" class="syntaxhighlighter  htmlscript"><table border="0" cellpadding="0" cellspacing="0" role="none"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">Executor exec = getAnExecutorFromSomeplace();</code></div><div class="line number2 index1 alt1"><code class="htmlscript plain">exec.execute(new Runnable() { ... });</code></div></div></td></tr></tbody></table></div></div></div></span><p>The main drawback to using <code>Executor</code> is the same one we
encounter with all factories: the factory has to come from someplace.
Unfortunately, unlike the CLR, the JVM doesn't ship with a standard
VM-wide thread pool.</p><p>The <code>Executor</code> class <em>does</em> serve as a common place to
get <code>Executor</code>-implementing instances, but it only has
<code>new</code> methods (to create a new thread pool, for example); it
doesn't have precreated instances. So you are on your own if you want to
create and use <code>Executor</code> instances throughout your code. (Or,
in some cases, you will be able to use an instance provided by your
container/platform of choice.)</p><h3 id="N10121" class="ibm-h3">ExecutorService, at your
service</h3><p>As useful as it is to not have to worry about where <code>Thread</code>s
come from, the <code>Executor</code> interface lacks some functionality
that a Java developer might expect, such as the ability to kick off a
thread designed to produce a result and wait in a non-blocking fashion
until that result becomes available. (This is a common need in desktop
applications, where a user will execute a UI operation that requires
accessing a database, and yet could want to cancel the operation before it
completes if it takes too long.)</p><p>For this, the JSR-166 experts created a far more useful abstraction, the
<code>ExecutorService</code> interface, which models the thread-starting
factory as a service that can be controlled collectively. For example,
rather than calling <code>execute()</code> once for each task, the
<code>ExecutorService</code> could take a collection of tasks and return a
    <em>List of Futures</em> representing the future results of each of
those tasks.</p><h2 id="N1013C" class="ibm-h2">4. ScheduledExecutorServices</h2><p>As great as the <code>ExecutorService</code> interface is, certain tasks
need to be done in a scheduled fashion, such as executing a given task at
determined intervals or at a specific time. This is the province of the
<code>ScheduledExecutorService</code>, which extends
<code>ExecutorService</code>.</p><p>If your goal was to create a "heartbeat" command that "pinged" every five
seconds, <code>ScheduledExecutorService</code> would make it as simple as
what you see in Listing 4:</p><h5 id="listing4" class="ibm-h5">Listing 4. ScheduledExecutorService 'pings' on
    schedule</h5><span class="dw-code-nohighlight"><div class="ibm-syntax-container"><div><div id="highlighter_452722" class="syntaxhighlighter  htmlscript"><table border="0" cellpadding="0" cellspacing="0" role="none"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">import java.util.concurrent.*;</code></div><div class="line number2 index1 alt1">&nbsp;</div><div class="line number3 index2 alt2"><code class="htmlscript plain">public class Ping</code></div><div class="line number4 index3 alt1"><code class="htmlscript plain">{</code></div><div class="line number5 index4 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">public static void main(String[] args)</code></div><div class="line number6 index5 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">{</code></div><div class="line number7 index6 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">ScheduledExecutorService ses =</code></div><div class="line number8 index7 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">Executors.newScheduledThreadPool(1);</code></div><div class="line number9 index8 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">Runnable pinger = new Runnable() {</code></div><div class="line number10 index9 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">public void run() {</code></div><div class="line number11 index10 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">System.out.println("PING!");</code></div><div class="line number12 index11 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></div><div class="line number13 index12 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">};</code></div><div class="line number14 index13 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">ses.scheduleAtFixedRate(pinger, 5, 5, TimeUnit.SECONDS);</code></div><div class="line number15 index14 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></div><div class="line number16 index15 alt1"><code class="htmlscript plain">}</code></div></div></td></tr></tbody></table></div></div></div></span><p>How about that? No fussing with threads, no fussing with what to do if the
user wants to cancel the heartbeat, no explicitly marking threads as
foreground or background; just leave all those scheduling details to
<code>ScheduledExecutorService</code>.</p><p>Incidentally, if a user did want to cancel the heartbeat, the return from
the <code>scheduleAtFixedRate</code> call would be a
<code>ScheduledFuture</code> instance, which not only wraps around the
result if there is one, but also has a <code>cancel</code> method to shut
down the scheduled operation.</p><h2 id="N10168" class="ibm-h2">5. Timeout methods</h2><p>The ability to put a concrete timeout around blocking operations (and thus
avoid deadlocks) is one of the great advances of the
<code>java.util.concurrent</code> library over its older concurrency
cousins, such as monitors for locking.</p><p>These methods are almost always overloaded with an
<code>int</code>/<code>TimeUnit</code> pair, indicating how long the
method should wait before bailing out and returning control to the
program. It requires more work on the part of the developer — how
will you recover if the lock isn't acquired? — but the results are
almost always more correct: fewer deadlocks and more production-safe code.
(For more about writing production-ready code, see Michael Nygard's
    <em>Release It!</em> in <a href="#artrelatedtopics">Related
topics</a>.)</p><h2 id="N10185" class="ibm-h2">Conclusion</h2><p>The <code>java.util.concurrent</code> package contains many more nifty
utilities that extend well beyond Collections, particularly in the
<code>.locks</code> and <code>.atomic</code> packages. Dig in and you'll
also find useful control structures like <code>CyclicBarrier</code> and
more. </p><p>Like many aspects of the Java platform, you don't need to look very hard to
find infrastructure code that can be tremendously helpful. Whenever you're
writing multithreaded code, remember the utilities discussed in this and
the <a href="http://www.ibm.com/developerworks/java/library/j-5things4.html">previous article</a>. </p><!--CMA ID: 493553--><!--Site ID: 1--><!--XSLT stylesheet used to transform this file: dw-document-html-8.0.xsl-->
        <!-- Article Quiz -->
        
        <!-- Article Resources -->
        <div class="ibm-alternate-rule"><hr></div><h4 id="artdownload" class="ibm-h4">Downloadable resources</h4><ul class="ibm-link-list"><li><a class="ibm-document-link" href="j-5things5-pdf.pdf">PDF of this content</a></li><li><a class="ibm-download-link" href="http://www.ibm.com/developerworks/apps/download/index.jsp?contentid=493553&amp;filename=5things5-src.zip&amp;method=http&amp;locale=">Sample code for this article</a> (5things5-src.zip | 10KB)</li></ul><div class="ibm-alternate-rule"><hr></div><h4 id="artrelatedtopics" class="ibm-h4">Related topics</h4><ul><li>Develop and deploy your next app on the <a href="https://console.bluemix.net/?cm_sp=dw-bluemix-_-j-5things5-_-article">IBM Bluemix cloud
    platform</a>.</li><li>"<a href="http://www.ibm.com/developerworks/java/library/j-5things4.html">5 things you didn't know about ... java.util.concurrent, Part
        1</a>" (Ted Neward, developerworks, May 2010): Get introduced to
    five concurrency classes that revitalize traditional Collections like
    <code>List</code> and <code>Map</code>.</li><li>"<a href="http://pragprog.com/titles/mnee/release-it"><em>Release it!</em></a> (Michael Nygard, March 2007,
    Pragmatic Programmers): Design and architect your applications for
    maximum uptime, performance, and return on investment.</li><li><a href="http://jcp.org/en/jsr/detail?id=166">JSR 166</a>:
    Learn more about the <code>Executor</code> interface and other changes
    introduced through this JSR.</li><li>"<a href="http://www.ibm.com/developerworks/java/library/j-jtp07233.html"><em>Java theory and practice</em>: Concurrent collections
        classes</a>" (Brian Goetz, developerWorks, July 2003): Learn how
    Doug Lea's util.concurrent package revitalizes standard collection
    types <code>List</code> and <code>Map</code>.</li><li>"<a href="http://www.ibm.com/developerworks/java/library/j-collections.html">Spice up collections with generics and concurrency</a>" (John
    Zukowski, developerWorks, April 2008): Introduces changes to the Java
    Collections Framework in Java 6.</li><li><a href="http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/package-summary.html">Package java.util.concurrent, Java platform SE 8</a>: Learn more
    about the utility classes discussed in this article.</li></ul>
       
    </div>
</body>
</html>