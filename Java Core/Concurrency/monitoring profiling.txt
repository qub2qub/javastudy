ДЕМО 1
1) смотреть логи
2) снять thread dump
	jstack
	visualvm
	SIGQUIT - сигнал ос - kill -3 ctrl+break
3) jps -l найти ид джава процесса
4) jstack PID
внутри у него
jvm умеет обнаруживать классические проблемы: типа дедлока
и в самом низу будет написано какие трэды на чём заблокировались
5) visualvm, выбрать мой java процесс, и вкладка threads
6) visualvm + плагин thread inspector
в нём можно посмотреть подробности по тредам
**************************
ДЕМО 2

1) jstack - выводит все сервисные потоки джавы
либо по именам либо по стэктрейсам их можно идентифицировать
-parking to wait for LOCK
2й поток ждёт лока - а его никто вроде и не держит
2) visualvm - смотри трэды
visualvm показал что 1й поток держит этот лок,
у reentrant lock - есть инфа какие потоки его держат,
а у потока нет инфы какие локи он держит.
чтобы связать локи и трэду надо пробежать по памяти найти все локи, сопоставить их с трэдами - и тогда вывести эту подробную инфу.

visualvm ис-ет java api для генерации стэк трейса
Thread(JMX???)MBean.getThreadInfo() ??? и оно выводит подробную инфу.
а чтобы jstack показал полную инфу - надо указать спец ключ="-l" long listing

3) но непонятно почему же висим?
1 застрял, 2й ждёт, 
поэтому надо делать серию трэд дампом за раз, как минимум 3:
может состояние меняется очень быстро, или чуть позже,
или же стоит понаблюдать какое-то время, может 1 потом висит в каком-то действии и будет спать вечно.

Память утекает за счет объектов http сессии, её держал session manager, 
... объект к-й запускал session listener, висит на локе для другого приложения
когда юзер логинится в 1 приложение - то также логинить и в другое


**************************
ДЕМО 3
jstack КЛЮЧ -f
если повис сам jvm
jstackу по умолчанию нужна работающая jvm чтобы собрать инфу
jstack подключается к jvm ч/з механизм dynamic attach/unix socket
jstack создаёт временный маркер-файл, посылает сигнал SIGQUIT в jvm, она провереят маркео файл,
и создаёт dynamic attach...
работает это только для того же unix юзера который запускал само приложение, т.к. для создания сокета нужен одинаковый юзер для обоих процессов

jstack -f стэктрейс собирает само приложение jstack,
в jvm есть механизм serviceability agent - нужен для дебага самой jvm,
позволяет отправлять туда системные call,
jstack сканирует весь heap, собирает структура приложения, и строит весь стэк трейс - туда не попадают данные о локах... но это последний шанс хоть что-то собрать.

jmap -f делает примерно такое же

**************************
кипят процессоры - что делать?
процесс грузит CPU на 100%,
как найти какое приложение виновато?

1) снимем трэд дамп - посмотрим вообще не все процессы
там нет инфы какой поток грузит ЦПУ, но есть поле "nid" - это native id потока в ОС, nid=0x2a54
processExplorer > properties > threads
TID - ид потока
2) на прод можно сходить по jmx
можем снять стэк трейс через jmx? -- НЕТ!!

3) если снимаем потоки через jmx - то ис-ся java api чтобы снять трэд дамп
и в нём нет native id, они туда не попадают
что делать?

**************************
4) то можно заюзать visualvm - и в нём есть профайлеры
- sampler -- сэмплирует - он каджые 10/100/200 сенимает трэд дампы с прилаги, собрав их достаточное кол-во, анализирует какие потоки грузят проц больше всего.
- profiler -- инструментирующий - подключится к процессу и будет через java agent инструментировать все методы доп байт кодом, чтобы собрать инфу сколько они ранались -- это повысит нагрузку на и так дымящемся проде.
на продакшене надо ис-ть , т.к. сэмплирующий - т.к. меньше overhead

потом сделать snapshot - чтобы он свёл 2 вкладки воедино
и главное ОСТАНОВИТ СЭМПЛЕР, чтобы он не грузил прод

минусы сэмплирования: профайлеры врут + оверхэд
даже если потоки грузятся на 100% - то это может быть не так.
может он ждёт ввода, ожидает на сокете, его стэйт - ранабл, хотя он просто ждёт данный из сети.
что-то может пропустить , т.е. трэд дампы снимаются только в опред момент времени, когда jvm можно безопасно остановить течение потока (save points): в слипах, в момент выхода из метода, их мало.

большой инлайн код который занимает сложной математикой - большая вероятность тчо он просто не попадёт в трэд дамп.

есть более честные профайлеры - java mission control - он платный.

все 4 потока грузят одинаково- смотрим во внутрь - там метод ран с бесконечным циклом --- он грузит также как и random.getNextInt -- т.е. 1 как бы ничего не делаем и другоей реально грузит - но в сэмплере они будут показаны как одинаково грузящие ЦПУ
**************************

можно в 3rdParty заюзать багованый код, который может выпасть в вечный цикл.
плохо
**************************
ДЕМО 4

загрузил страницу - нажал кнопку - юзер ничего не получил
а мы - OutOfMemoryError: Java Heap Space
появился gc.log и java_pid1234.hprof
чтобы они появились надо на старте прописать спец ключи: 40:42

как узнать что случилось: 
Java Heap Space - утечка памяти? - НЕТ -- может быть что угодно, может рпосто много юзеров набежало и всем не хватило
memory analyzer 
shallow heap - сам объект и его поля
retained heap  - сколько памяти освободится если объ умрет (сам объект и его поля и всё другое что с ним связано)

короче ищем самый жирный объ по retained heap
открываем retained set -- список объектов и сколько они занимают памяти.
узнаём что за инстансы занимают много памяти,
потом жмём immediate dominators -- и находит тот объ к-й их держит
там например список с кучей интов (зачем-то их нагенерил их и держит)

мемори лик - это понятие бизнесовое -- может и нужно некоторые большие объекты.

у этого объекта выбираем path to gc roots -- чтобы понять почему он не убивается
он лежит в синглетоне, который в спринге, т.е. просто лежит и ничего не делает.
или же он полезный - то мы просто добавляем больше памяти..
