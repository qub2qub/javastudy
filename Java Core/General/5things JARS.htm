<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<title>JARS</title>
    <link rel="stylesheet" href="../../Guides/grey.css">
    <style type="text/css">

    </style>
</head>
<body>
<a href="https://www.ibm.com/developerworks/java/library/j-5things6/index.html">src</a>
<h2>JARS</h2>
<div class="ibm-col-6-4">
            <p class="dw-article-series-head">5 things you didn't know about ...</p>
        <h1 id="ibm-pagetitle-h1" class="ibm-h1">JARs</h1><p class="dw-article-subhead">A Java Archive is more than just a bundle of classes</p>
        
        <p>For most Java developers, JAR files and their specialized cousins, WARs and
EARs, are simply the end result of a long Ant or Maven process. It's
standard procedure to copy the JAR to the right place on the server (or,
more rarely, the user's machine) and forget about it.</p><p>Actually, JARs can do more than store source code, but you have to know
what else is possible, and how to ask for it. The tips in this installment
of the <em>5 things</em> series will show you how to make the most of Java
Archive files (and in some cases WARs and EARs, too), especially at
deployment time.</p><p>Because so many Java developers use Spring (and because the Spring
framework presents some particular challenges to our traditional use of
JARs), several of the tips specifically address JARs in Spring
applications.</p><div class="dw-article-sidebar ibm-background-cool-white-20"><p><strong>About this series</strong></p><p>So you think you know about Java programming? The fact is, most
    developers scratch the surface of the Java platform, learning just
    enough to get the job done. In this series, Ted Neward digs beneath the core functionality of the
    Java platform to uncover little-known facts that could help you solve
    even the stickiest programming challenges.</p></div><p>I'll start out with a quick example of a standard Java Archive file
procedure, which will serve as a foundation for the tips that follow.</p><h2 id="N1008F" class="ibm-h2">Put it in a JAR</h2><p>Normally, you build a JAR file after your code source has been compiled,
collecting the Java code (which has been segregated by package) into a
single collection via either the <code>jar</code> command-line utility, or
more commonly, the Ant <code>jar</code> task. The process is
straightforward enough that I won't demonstrate it here, though later in
the article we'll return to the topic of how JARs are constructed. For
now, we just need to archive <code>Hello</code>, a stand-alone console
utility that does the incredibly useful task of printing a message to the
console, shown in Listing 1:</p><h5 id="listing1" class="ibm-h5">Listing 1. Archiving the console
    utility</h5><span class="dw-code-nohighlight"><div class="ibm-syntax-container"><div><div id="highlighter_260095" class="syntaxhighlighter  htmlscript"><table border="0" cellpadding="0" cellspacing="0" role="none"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">package com.tedneward.jars;</code></div><div class="line number2 index1 alt1">&nbsp;</div><div class="line number3 index2 alt2"><code class="htmlscript plain">public class Hello {</code></div><div class="line number4 index3 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">public static void main(String[] args) {</code></div><div class="line number5 index4 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">System.out.println("Howdy!");</code></div><div class="line number6 index5 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></div><div class="line number7 index6 alt2"><code class="htmlscript plain">}</code></div></div></td></tr></tbody></table></div></div></div></span><p>The <code>Hello</code> utility isn't much, but it's a useful scaffold for
exploring JAR files, starting with executing the code.</p><h2 id="N100AC" class="ibm-h2">1. JARs are executable</h2><p>Languages like .NET and C++ have historically had the advantage of being
OS-friendly, in that simply referencing their name at the command-line
(<code>helloWorld.exe</code>) or double-clicking their icon in the GUI
shell would launch the application. In Java programming, however, a
launcher application —<code>java</code>— bootstraps the JVM
into the process, and we have to pass a command-line argument
(<code>com.tedneward.Hello</code>) indicating the class whose
<code>main()</code> method we want to launch.</p><p>These additional steps make it harder to create user-friendly applications
in Java. Not only does the end user have to type all of these elements at
the command-line, which many end users would rather avoid, but chances are
good that he or she will somehow fat-finger it and get an obscure error
back.</p><p>The solution is to make the JAR file "executable" so that the Java launcher
will automatically know which class to launch when executing the JAR file.
All we have to do is introduce an entry into the JAR file's manifest
(<code>MANIFEST.MF</code> in the JAR's <code>META-INF</code>
subdirectory), like so:</p><h5 id="listing2" class="ibm-h5">Listing 2. Show me the
    entrypoint!</h5><span class="dw-code-nohighlight"><div class="ibm-syntax-container"><div><div id="highlighter_787012" class="syntaxhighlighter  htmlscript"><table border="0" cellpadding="0" cellspacing="0" role="none"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">Main-Class: com.tedneward.jars.Hello</code></div></div></td></tr></tbody></table></div></div></div></span><p>The manifest is just a set of name-value pairs. Because the manifest can
sometimes be touchy about carriage returns and whitespace, it's easiest to
use Ant to generate it when building the JAR. In Listing 3, I've used the
<code>manifest</code> element of the Ant <code>jar</code> task to specify
the manifest:</p><h5 id="listing3" class="ibm-h5">Listing 3. Build me the
    entrypoint!</h5><span class="dw-code-nohighlight"><div class="ibm-syntax-container"><div><div id="highlighter_129563" class="syntaxhighlighter  htmlscript"><table border="0" cellpadding="0" cellspacing="0" role="none"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">&lt;</code><code class="htmlscript plain">target</code> <code class="htmlscript color1">name</code><code class="htmlscript plain">=</code><code class="htmlscript plain">"jar"</code> <code class="htmlscript color1">depends</code><code class="htmlscript plain">=</code><code class="htmlscript plain">"build"</code><code class="htmlscript plain">&gt;</code></div><div class="line number2 index1 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">&lt;</code><code class="htmlscript plain">jar</code> <code class="htmlscript color1">destfile</code><code class="htmlscript plain">=</code><code class="htmlscript plain">"outapp.jar"</code> <code class="htmlscript color1">basedir</code><code class="htmlscript plain">=</code><code class="htmlscript plain">"classes"</code><code class="htmlscript plain">&gt;</code></div><div class="line number3 index2 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">&lt;</code><code class="htmlscript plain">manifest</code><code class="htmlscript plain">&gt;</code></div><div class="line number4 index3 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">&lt;</code><code class="htmlscript plain">attribute</code> <code class="htmlscript color1">name</code><code class="htmlscript plain">=</code><code class="htmlscript plain">"Main-Class"</code> <code class="htmlscript color1">value</code><code class="htmlscript plain">=</code><code class="htmlscript plain">"com.tedneward.jars.Hello"</code> <code class="htmlscript plain">/&gt;</code></div><div class="line number5 index4 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">&lt;/</code><code class="htmlscript plain">manifest</code><code class="htmlscript plain">&gt;</code></div><div class="line number6 index5 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">&lt;/</code><code class="htmlscript plain">jar</code><code class="htmlscript plain">&gt;</code></div><div class="line number7 index6 alt2"><code class="htmlscript plain">&lt;/</code><code class="htmlscript plain">target</code><code class="htmlscript plain">&gt;</code></div></div></td></tr></tbody></table></div></div></div></span><p>All a user has to do to execute the JAR file now is specify its filename on
the command-line, via <code>java -jar outapp.jar</code>. In the case of
some GUI shells, double-clicking the JAR file works just as well.</p><h2 id="N100E9" class="ibm-h2">2. JARs can include dependency
information</h2><p>It seems that word of the <code>Hello</code> utility has spread, and so the
need to vary the implementation has emerged. Dependency injection (DI)
containers like Spring or Guice handle many of the details for us, but
there's still a hitch: modifying code to include the use of a DI container
can lead to results like what you see in Listing 4:</p><h5 id="listing4" class="ibm-h5">Listing 4. Hello, Spring
    world!</h5><span class="dw-code-nohighlight"><div class="ibm-syntax-container"><div><div id="highlighter_810522" class="syntaxhighlighter  htmlscript"><table border="0" cellpadding="0" cellspacing="0" role="none"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">package com.tedneward.jars;</code></div><div class="line number2 index1 alt1">&nbsp;</div><div class="line number3 index2 alt2"><code class="htmlscript plain">import org.springframework.context.annotation.AnnotationConfigApplicationContext;</code></div><div class="line number4 index3 alt1">&nbsp;</div><div class="line number5 index4 alt2"><code class="htmlscript plain">public class Hello {</code></div><div class="line number6 index5 alt1">&nbsp;</div><div class="line number7 index6 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">public static void main(String... args)&nbsp; {</code></div><div class="line number8 index7 alt1">&nbsp;</div><div class="line number9 index8 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">AnnotationConfigApplicationContext context </code></div><div class="line number10 index9 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">= new AnnotationConfigApplicationContext(AppConfig.class);</code></div><div class="line number11 index10 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number12 index11 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">Speaker speaker = context.getBean("speaker", Speaker.class);</code></div><div class="line number13 index12 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">System.out.println(speaker.sayHello());</code></div><div class="line number14 index13 alt1">&nbsp;</div><div class="line number15 index14 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></div><div class="line number16 index15 alt1"><code class="htmlscript plain">}</code></div></div></td></tr></tbody></table></div></div></div></span><div class="dw-article-sidebar ibm-background-cool-white-20"><p><strong>More about Spring</strong></p><p>This tip assumes you are familiar with dependency injection and the
    Spring framework. </p></div><p>Because the <code>-jar</code> option to the launcher overwrites whatever
happens to be in the <code>-classpath</code> command-line option, Spring
needs to be on the <code>CLASSPATH</code> and in the environment variable
when you run this code. Fortunately, JARs permit a declaration of other
JAR dependencies to appear in the manifest, which implicitly creates the
CLASSPATH without you having to declare it, shown in Listing 5:</p><h5 id="listing5" class="ibm-h5">Listing 5. Hello, Spring
    CLASSPATH!</h5><span class="dw-code-nohighlight"><div class="ibm-syntax-container"><div><div id="highlighter_236755" class="syntaxhighlighter  htmlscript"><table border="0" cellpadding="0" cellspacing="0" role="none"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">&lt;</code><code class="htmlscript plain">target</code> <code class="htmlscript color1">name</code><code class="htmlscript plain">=</code><code class="htmlscript plain">"jar"</code> <code class="htmlscript color1">depends</code><code class="htmlscript plain">=</code><code class="htmlscript plain">"build"</code><code class="htmlscript plain">&gt;</code></div><div class="line number2 index1 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">&lt;</code><code class="htmlscript plain">jar</code> <code class="htmlscript color1">destfile</code><code class="htmlscript plain">=</code><code class="htmlscript plain">"outapp.jar"</code> <code class="htmlscript color1">basedir</code><code class="htmlscript plain">=</code><code class="htmlscript plain">"classes"</code><code class="htmlscript plain">&gt;</code></div><div class="line number3 index2 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">&lt;</code><code class="htmlscript plain">manifest</code><code class="htmlscript plain">&gt;</code></div><div class="line number4 index3 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">&lt;</code><code class="htmlscript plain">attribute</code> <code class="htmlscript color1">name</code><code class="htmlscript plain">=</code><code class="htmlscript plain">"Main-Class"</code> <code class="htmlscript color1">value</code><code class="htmlscript plain">=</code><code class="htmlscript plain">"com.tedneward.jars.Hello"</code> <code class="htmlscript plain">/&gt;</code></div><div class="line number5 index4 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">&lt;</code><code class="htmlscript plain">attribute</code> <code class="htmlscript color1">name</code><code class="htmlscript plain">=</code><code class="htmlscript plain">"Class-Path"</code></div><div class="line number6 index5 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">value="./lib/org.spring-aop-5.0.0.BUILD-SNAPSHOT.jar </code></div><div class="line number7 index6 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">./lib/spring-beans-5.0.0.BUILD-SNAPSHOT.jar </code></div><div class="line number8 index7 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">./lib/spring-context-5.0.0.BUILD-SNAPSHOT.jar </code></div><div class="line number9 index8 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">./lib/spring-core-5.0.0.BUILD-SNAPSHOT.jar </code></div><div class="line number10 index9 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">./lib/spring-expression-5.0.0.BUILD-SNAPSHOT.jar </code></div><div class="line number11 index10 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">./lib/commons-logging-1.2.jar" /&gt;</code></div><div class="line number12 index11 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">&lt;/</code><code class="htmlscript plain">manifest</code><code class="htmlscript plain">&gt;</code></div><div class="line number13 index12 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">&lt;/</code><code class="htmlscript plain">jar</code><code class="htmlscript plain">&gt;</code></div><div class="line number14 index13 alt1"><code class="htmlscript plain">&lt;/</code><code class="htmlscript plain">target</code><code class="htmlscript plain">&gt;</code></div></div></td></tr></tbody></table></div></div></div></span><p>Notice that the <code>Class-Path</code> attribute contains a relative
reference to the JAR files that the application depends on. You could also
write this as an absolute reference or without a prefix entirely, in which
case it would be assumed that the JAR files were in the same directory as
the application JAR.</p><p>Unfortunately, the <code>value</code> attribute to the Ant
<code>Class-Path</code> attribute has to appear in one line, because the
JAR manifest can't cope with the idea of multiple <code>Class-Path</code>
attributes. So, all of those dependencies have to appear on one line in
the manifest file. Sure, it's ugly, but being able to
<code>java -jar outapp.jar</code> is worth it!</p><h2 id="N10128" class="ibm-h2">3. JARs can be implicitly
referenced</h2><p>If you have several different command-line utilities (or other
applications) that make use of the Spring framework, it might be easier to
put the Spring JAR files into a common location that all of the utilities
can reference. Doing so avoids having multiple copies of JARs popping up
all over the filesystem. The Java runtime's common location for JARs,
known as the "extension directory," is by default located in the
<code>lib/ext</code> subdirectory, underneath the installed JRE
location.</p><p>The JRE is a customizable location, but it is so rarely customized within a
given Java environment that it's entirely safe to assume that
<code>lib/ext</code> is a safe place to store JARs, and that they will be
implicitly available on the Java environment's <code>CLASSPATH</code>.</p><h2 id="N1013A" class="ibm-h2">4. Classpath wildcards
allowed</h2><p>In an effort to avoid huge <code>CLASSPATH</code> environment variables
(which Java developers should have left behind years ago) and/or
command-line <code>-classpath</code> parameters, Java 6 introduced the
notion of the <em>classpath wildcard</em>. Rather than having to launch
with each and every JAR file explicitly listed on an argument, the
classpath wildcard lets you specify <code>lib/*</code>, and all of the JAR
files listed in that directory (not recursively), in the classpath. </p><p>Unfortunately, the classpath wildcard doesn't hold for the previously
discussed <code>Class-Path</code> attribute manifest entry. But it does
make it easier to launch Java applications (including servers) for
developer tasks such as code-gen tools or analysis tools.</p><h2 id="N10152" class="ibm-h2">5. JARs hold more than code</h2><p>So many parts of the Java ecosystem, depend on configuration files that
describes how the environment should be established and it's entirely
common for developers to forget to copy the configuration file alongside
the JAR file.</p><p>Some configuration files are editable by a sysadmin, but a significant
number of them are well outside of the sysadmin's domain, which leads to
deployment bugs. A sensible solution would be to package the config file
together with the code — and it's doable because a JAR is basically
a ZIP in disguise. Just include config files in the Ant task or the
<code>jar</code> command-line when building a JAR.</p><p>JARs can also include other types of files, not just configuration files.
For instance, if my <code>SpeakEnglish</code> component wanted to access a
properties file, I could set that up like Listing 6:</p><h5 id="listing6" class="ibm-h5">Listing 6. Respond at
    random</h5><span class="dw-code-nohighlight"><div class="ibm-syntax-container"><div><div id="highlighter_728300" class="syntaxhighlighter  htmlscript"><table border="0" cellpadding="0" cellspacing="0" role="none"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">package com.tedneward.jars;</code></div><div class="line number2 index1 alt1">&nbsp;</div><div class="line number3 index2 alt2"><code class="htmlscript plain">import java.util.*;</code></div><div class="line number4 index3 alt1">&nbsp;</div><div class="line number5 index4 alt2"><code class="htmlscript plain">public class SpeakEnglish implements ISpeak {</code></div><div class="line number6 index5 alt1">&nbsp;</div><div class="line number7 index6 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">Properties responses = new Properties();</code></div><div class="line number8 index7 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">Random random = new Random();</code></div><div class="line number9 index8 alt2">&nbsp;</div><div class="line number10 index9 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">public String sayHello() {</code></div><div class="line number11 index10 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number12 index11 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">// Pick a response at random</code></div><div class="line number13 index12 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">int which = random.nextInt(5);</code></div><div class="line number14 index13 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number15 index14 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">return responses.getProperty("response." + which);</code></div><div class="line number16 index15 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></div><div class="line number17 index16 alt2"><code class="htmlscript plain">}</code></div></div></td></tr></tbody></table></div></div></div></span><p>Putting <code>responses.properties</code> into the JAR file means that
there's one less file to worry about deploying alongside the JAR file.
Doing that just requires including the <code>responses.properties</code>
file during the JAR step.</p><p>Once you've stored your properties in a JAR, though, you might wonder how
to get them back. If the data desired is co-located inside the same JAR
file, as it is in the previous example, then don't bother trying to figure
out the file location of the JAR and crack it open with a
<code>JarFile</code> object. Instead, let the class's
<code>ClassLoader</code> find it as a "resource" within the JAR file,
using the <code>ClassLoader getResourceAsStream()</code> method shown in
Listing 7:</p><h5 id="listing7" class="ibm-h5">Listing 7. ClassLoader locates a
    Resource</h5><span class="dw-code-nohighlight"><div class="ibm-syntax-container"><div><div id="highlighter_318938" class="syntaxhighlighter  htmlscript"><table border="0" cellpadding="0" cellspacing="0" role="none"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div class="line number23 index22 alt2">23</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">package com.tedneward.jars;</code></div><div class="line number2 index1 alt1">&nbsp;</div><div class="line number3 index2 alt2"><code class="htmlscript plain">import java.util.*;</code></div><div class="line number4 index3 alt1">&nbsp;</div><div class="line number5 index4 alt2"><code class="htmlscript plain">public class SpeakEnglish implements ISpeak {</code></div><div class="line number6 index5 alt1">&nbsp;</div><div class="line number7 index6 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">Properties responses = new Properties();</code></div><div class="line number8 index7 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">// ...</code></div><div class="line number9 index8 alt2">&nbsp;</div><div class="line number10 index9 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">public SpeakEnglish() {</code></div><div class="line number11 index10 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number12 index11 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">try {</code></div><div class="line number13 index12 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">ClassLoader myCL = SpeakEnglish.class.getClassLoader();</code></div><div class="line number14 index13 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">responses.load(</code></div><div class="line number15 index14 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">myCL.getResourceAsStream(</code></div><div class="line number16 index15 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">"com/tedneward/jars/responses.properties"));</code></div><div class="line number17 index16 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">} catch (Exception x)&nbsp; {</code></div><div class="line number18 index17 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">x.printStackTrace();</code></div><div class="line number19 index18 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></div><div class="line number20 index19 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></div><div class="line number21 index20 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number22 index21 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">// ...</code></div><div class="line number23 index22 alt2"><code class="htmlscript plain">}</code></div></div></td></tr></tbody></table></div></div></div></span><p>You can follow this procedure for any kind of resource: configuration file,
audio file, graphics file, you name it. Virtually any file type can be
bundled into a JAR, obtained as an <code>InputStream</code> (via the
<code>ClassLoader</code>) and used in whatever fashion suits your
fancy.</p><h2 id="N10190" class="ibm-h2">Conclusion</h2><p>This article has covered the top five things most Java developers don't
know about JARs — at least based on history and anecdotal evidence.
Note that all of these JARs-related tips are equally true for WARs. Some
tips (the <code>Class-Path</code> and <code>Main-Class</code> attributes
in particular) are less exciting in the case of WARs, because the servlet
environment picks up the entire contents of a directory and has a
predefined entry point. Still, taken collectively, these tips move us
beyond the paradigm of "Okay, start by copying everything in this
directory ..." In so doing, they also make deploying Java applications
much simpler.</p><!--CMA ID: 495828--><!--Site ID: 1--><!--XSLT stylesheet used to transform this file: dw-document-html-8.0.xsl-->
        <!-- Article Quiz -->
        
        <!-- Article Resources -->
        <div class="ibm-alternate-rule"><hr></div><h4 id="artdownload" class="ibm-h4">Downloadable resources</h4><ul class="ibm-link-list"><li><a class="ibm-document-link" href="j-5things6-pdf.pdf">PDF of this content</a></li><li><a class="ibm-download-link" href="http://www.ibm.com/developerworks/apps/download/index.jsp?contentid=495828&amp;filename=j-5things6-src.zip&amp;method=http&amp;locale=">Sample code for this article</a> (j-5things6-src.zip | 10KB)</li></ul><div class="ibm-alternate-rule"><hr></div><h4 id="artrelatedtopics" class="ibm-h4">Related topics</h4><ul class="ibm-plain-list"><li><a href="http://www.ibm.com/developerworks/library/j-jar/index.html">JAR files revealed</a></li><li><a href="http://java.sun.com/docs/books/tutorial/deployment/jar/index.html">Packaging programs in JAR files</a></li><li><a href="http://www.springsource.org/">Spring</a></li><li><a href="http://www.ibm.com/developerworks/java/library/j-guice.html">Dependency injection with Guice</a></li><li><a href="http://www.javaworld.com/javaworld/javatips/jw-javatip127.html">See JARs run</a></li></ul>
        </div>
<br><hr>
</body>
</html>