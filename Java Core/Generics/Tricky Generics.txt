https://youtu.be/H5WlE8BK5sI
https://youtu.be/mNyQYTp-Njw

Компилятор стирает информцию о дженериках. И вместо типа у них становится Object.

Type Erasure - процедура стирания инфы о дженериках на этапе компиляции:
1) компилятор где надо вставляет "cast"
2) компилятор где надо вставляет "bridge"
Это он делает для того чтобы без дженериков в runtime сохранялась та же семантика, которую вложил программист.

Можно получить информацию о generic-ах на уровне класса.
Нельзя параметризовывать:
 1) классы, имеющие в предках Throwable
 2) anonymous classes
 3) Enum

HEAP POLLUTION
Это ситуация когда параметризованный тип ссылается на объект, параметризованный другим типом.
Лист стрингов ссылается на листи интежеров.

Массивы ковариантны - если отношение справедливо для типов, то справедливо и для массивов таких элементов.
Number[] numbers = new Integer[5];
т.е. массивы не type safe - т.е. можно написать код, который на runtime будет кидать исключение.

А generic-и инварианты - для них так НЕ работает.

===================================
В List<? extends Number> extendsNumber = new ArrayList<>();
можно положить только null, потому что компилятор смотрит на левую часть:
List<? extends Number> extendsNumber = ...
и в неё в runtime можно присовить лист, параметризованный любым типом равным "? extends Number", т.е.:
new ArrayList<Integer>() / new ArrayList<Long>() / new ArrayList<Double>()
компилятор не знает какая имплементаци приедет, поэтому чтобы точно гарантирвоать безопасное выполнение, компиляттор запрещает туда что-то писать кроме null.
Т.е. в неё можно присвоить листы различных типов Number-а, и считывать их, read only.

===================================
В List<? super Number> superNumber = new ArrayList<>(); 
можно покласть любой объект, который "Y extends Number"
		superNumber.add(null);
        superNumber.add(1);
        superNumber.add(1f);
        superNumber.add(1L);
        superNumber.add(1d);
Почему?
Компилятор смотрит только на левую часть: 
List<? super Number> superNumber = ...
и понимает, что туда можно присвоить любой лис параметризованный типом "? super Number", а это:
new ArrayList<Object>() или new ArrayList<Number>()

===================================

public static <T extends Object & Comparable<? super T>> T max(Collection<? extends T> coll)

Generic-и стираются в левую границу, буквально: здесь стоит T extends Object поэтому
type erasure сделает тип равыный Object, если бы этого не было, то 
в результате бы был тип Comparable

PECS
Если параметризированный тип выступает как ПРОИЗВОДИТЕЛЬ - то пиши <? extends T>
Если параметризированный тип выступает как ПОТРЕБИТЕЛЬ - то пиши <? super T>

т.о. в методе T max(Collection<? extends T> coll, Copmarator<? super T> comp)
коллекция из параметра выступает как производитель, т.к. она даёт нам элемнты для сравнения,
из неё мы берём элеменеты, она их "производит" как бы, поэтому "? extends T".
А компаратор потребляет эти элементы, поэтому "? super T"
это даёт гибкость:
Collections.max( List<Integer>, Comparator<Number> )
Collections.max(  List<String>, Comparator<Object> )
==============================================

Рекурсивные Generics

BaseStream<T, S extends BaseStream<T, S>>
S sequential();
S parallel();

Stream<T> extends BaseStream<T, Stream<T>>
<R> Stream<R> map(Function<? super T, ? extends R> mapper);

т.е. выходит что в коде нужно вызвать 1 метод из BaseStream, 
а следующий -- из его наследника Stream.
это даёт удобство использования методов из потомка, как будто бы они находятся в родителе.

==============================================
Ковариантность возвращаемого значения
Например, есть родительский класс и его метод возвращает Number.
Мы унаследовались и переоределили метод, он возвращает Integer.
