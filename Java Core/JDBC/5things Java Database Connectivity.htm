<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<title>Java Database Connectivity</title>
    <link rel="stylesheet" href="../../Guides/grey.css">
    <style type="text/css">

    </style>
</head>
<body>
<a href="https://www.ibm.com/developerworks/java/library/j-5things10/index.html">src</a>
<h2>Java Database Connectivity</h2>
<div class="ibm-col-6-4">
                                            <p class="dw-article-series-head">5 things you didn't know about ...</p>
                                        <h1 id="ibm-pagetitle-h1" class="ibm-h1">Java Database Connectivity</h1><p class="dw-article-subhead">Update your relationship to the JDBC API</p>
                                        <p>Many Java developers today know the Java Database Connectivity (JDBC) API
                by way of a data-access platform such as Hibernate or Spring. But JDBC is
                more than a background player in database connectivity. The more you know
                about it, the more efficient your RDBMS interactions will be.</p><p>In this installment, I'll demonstrate several 
                 features introduced in recent versions of JDBC. Designed with
                modern software development challenges in mind, these features support
                application scalability and developer productivity — two of the
                common challenges facing Java developers today.</p><h2 id="N1007E" class="ibm-h2">1. Scalar functions</h2><p>Different RDBMS implementations offer irregular support for SQL and/or
                value-added features designed to make the developer's life easier. It's
                well known, for example, that SQL provides a scalar operation,
                <code>COUNT()</code>, to return the number of rows that meet a particular
                SQL filter criteria (that is, <code>WHERE</code> predicate). But beyond
                that, trying to modify values returned by SQL can be tricky — and
                trying to get the current date and time from the database could drive even
                the most patient JDBC developer mad (and potentially bald, too).</p><div class="dw-article-sidebar ibm-background-cool-white-20"><h5>About this series</h5><p>So you think you know about Java programming? The fact is, most
                    developers scratch the surface of the Java platform, learning just
                    enough to get the job done. In this series, Ted Neward digs beneath the core functionality of the
                    Java platform to uncover little-known facts that could help you solve
                    even the stickiest programming challenges.</p></div><p>Toward that end, the JDBC specification provides for a degree of
                isolation/adaptation against different RDBMS implementations, via scalar
                functions. The JDBC specification includes a list of supported operations
                that JDBC drivers should recognize and adapt as necessary to their
                particular database implementation. Thus, for a database that supported
                returning the current date and/or time, it could be as simple as Listing
                1:</p><h5 id="listing1" class="ibm-h5">Listing 1. What time is
                it?</h5><span class="dw-code-nohighlight"><div class="ibm-syntax-container"><div><div id="highlighter_75712" class="syntaxhighlighter  htmlscript"><table border="0" cellpadding="0" cellspacing="0" role="none"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">Connection conn = ...; // get it from someplace</code></div><div class="line number2 index1 alt1"><code class="htmlscript plain">Statement stmt = conn.createStatement();</code></div><div class="line number3 index2 alt2"><code class="htmlscript plain">ResultSet rs = stmt.executeQuery(“{fn CURRENT_DATE()}”);</code></div></div></td></tr></tbody></table></div></div></div></span><p>The full list of scalar functions recognized by the JDBC API is given in
                the appendix of the JDBC specification (see <a href="#artrelatedtopics">Related topics</a>), but the full list might not be supported by a
                given driver or database. You can use the <code>DatabaseMetaData</code>
                object returned from <code>Connection</code> to obtain the functions
                supported by a given JDBC implementation, as shown in Listing 2:</p><h5 id="listing2" class="ibm-h5">Listing 2. What can you do for
                me?</h5><span class="dw-code-nohighlight"><div class="ibm-syntax-container"><div><div id="highlighter_770818" class="syntaxhighlighter  htmlscript"><table border="0" cellpadding="0" cellspacing="0" role="none"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">Connection conn = ...; // get it from someplace</code></div><div class="line number2 index1 alt1"><code class="htmlscript plain">DatabaseMetaData dbmd = conn.getMetaData();</code></div></div></td></tr></tbody></table></div></div></div></span><p>The list of scalar functions is a comma-separated <code>String</code>
                returned from a variety of <code>DatabaseMetaData</code> methods. For
                example, all the numeric scalars are listed via the
                <code>getNumericFunctions()</code> call. Do a <code>String.split()</code>
                on the result and —<em>voilà!</em>— instant
                <code>equals()-testable</code> list.</p><p>It’s worth mentioning, as an aside, that one of the improvements added to JDBC 4 was the safe removal of the <code>Class.forName("some driver class")</code> statement. </p><h2 id="N100CB" class="ibm-h2">2. Scrollable ResultSets</h2><p>It's a very common procedure in JDBC to create a <code>Connection</code>
                object (or obtain an existing one) and use it to create a
                <code>Statement</code>. The <code>Statement</code>, being fed an
                <code>SQL SELECT</code>, returns a <code>ResultSet</code>. The
                <code>ResultSet</code> is then fed through a <code>while</code> loop (not
                unlike an <code>Iterator</code>) until the <code>ResultSet</code> says
                it's empty, with the body of the loop extracting one column at a time in
                left-to-right order.</p><p>This whole operation is so common that is has become almost sacred: it's
                done that way simply because that's the way it's done. Alas, it's
                completely unnecessary.</p><h3 id="N100EF" class="ibm-h3">Introducing the scrollable
                ResultSet</h3><p>Many developers are unaware of the fact that JDBC has been considerably
                enhanced over the years, even though those enhancements are reflected in
                new version numbers and releases. As of writing this, JDBC stands at
                version 4.2.</p><p>One of the interesting (though frequently ignored) enhancements
                is the ability to "scroll" through the <code>ResultSet</code>, meaning we
                can go forward or backward, or even both, as need dictates. Doing so
                requires a bit of forward-thinking, however — the JDBC call must
                indicate that it wants a scrollable <code>ResultSet</code> at the time the
                <code>Statement</code> is created.</p><div class="dw-article-sidebar ibm-background-cool-white-20"><h5>Verifying ResultSet type</h5><p>If you suspect a driver may not actually support scrollable
                    <code>ResultSet</code>s, despite what it says in the
                    <code>DatabaseMetaData</code>, you can verify the
                    <code>ResultSet</code> type by calling <code>getType()</code>. Of
                    course, if you're that paranoid, you might not trust the return value
                    of <code>getType()</code>, either. Suffice it to say, if
                    <code>getType()</code> lies about the <code>ResultSet</code> returned,
                    they really <em>are</em> out to get you.</p></div><p>If the underlying JDBC driver supports scrolling, a scrollable
                <code>ResultSet</code> will be returned from that <code>Statement</code>,
                but it's best to figure out if the driver supports scrollability before
                asking for it. You can ask about scrolling via the
                <code>DatabaseMetaData</code> object, which can be obtained from any
                <code>Connection</code>, as described previously. </p><p>Once you have a <code>DatabaseMetaData</code> object, a call to
                <code>getJDBCMajorVersion()</code> will retrieve the major JDBC version number for this driver. Of course, a driver could
                lie about its level of support for a given specification, so to play it
                particularly safe, call the <code>supportsResultSetType()</code> method
                with the desired <code>ResultSet</code> type. (It's a constant on the
                <code>ResultSet</code> class; we'll talk about the values of each in just
                a second.)</p><h5 id="listing3" class="ibm-h5">Listing 3. Can you
                scroll?</h5><span class="dw-code-nohighlight"><div class="ibm-syntax-container"><div><div id="highlighter_400794" class="syntaxhighlighter  htmlscript"><table border="0" cellpadding="0" cellspacing="0" role="none"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">int JDBCVersion = dbmd.getJDBCMajorVersion();</code></div><div class="line number2 index1 alt1"><code class="htmlscript plain">boolean srs = dbmd.supportsResultSetType(ResultSet.TYPE_SCROLL_INSENSITIVE);</code></div><div class="line number3 index2 alt2"><code class="htmlscript plain">if (JDBCVersion &gt; 2 || srs == true)</code></div><div class="line number4 index3 alt1"><code class="htmlscript plain">{</code></div><div class="line number5 index4 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">// scroll, baby, scroll!</code></div><div class="line number6 index5 alt1"><code class="htmlscript plain">}</code></div></div></td></tr></tbody></table></div></div></div></span><h3 id="N10148" class="ibm-h3">Requesting a scrollable
                ResultSet</h3><p>Assuming your driver says yes (if it doesn't, you need a new driver or
                database), you can request a scrollable <code>ResultSet</code> by passing
                two parameters to the <code>Connection.createStatement()</code> call,
                shown in Listing 4:</p><h5 id="listing4" class="ibm-h5">Listing 4. I want to
                scroll!</h5><span class="dw-code-nohighlight"><div class="ibm-syntax-container"><div><div id="highlighter_186503" class="syntaxhighlighter  htmlscript"><table border="0" cellpadding="0" cellspacing="0" role="none"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">Statement stmt = con.createStatement(</code></div><div class="line number2 index1 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">ResultSet.TYPE_SCROLL_INSENSITIVE, </code></div><div class="line number3 index2 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">ResultSet.CONCUR_READ_ONLY);</code></div><div class="line number4 index3 alt1"><code class="htmlscript plain">ResultSet scrollingRS = stmt.executeQuery("SELECT * FROM whatever");</code></div></div></td></tr></tbody></table></div></div></div></span><p>You have to be particularly careful when calling
                <code>createStatement()</code> because its first and second parameters are
                both <code>int</code>s. Any <code>int</code> value (including the wrong
                constant value) will work with <code>createStatement()</code>.</p><p>The first parameter, indicating the "scrollability" desired in the
                <code>ResultSet</code>, can be one of three accepted values:</p><ul class="ibm-bullet-list"><li><code>ResultSet.TYPE_FORWARD_ONLY</code>: This is the default,
                    firehose-style cursor that we know and love.</li><li><code>ResultSet.TYPE_SCROLL_INSENSITIVE</code>: This
                    <code>ResultSet</code> enables backward iteration as well as forward,
                    but if the data in the database changes, the <code>ResultSet</code>
                    won't reflect it. This scrollable <code>ResultSet</code> is probably
                    the most commonly desired type.</li><li><code>ResultSet.TYPE_SCROLL_SENSITIVE</code>: The
                    <code>ResultSet</code> created will not only allow for bidirectional
                    iteration, but will also give a "live" view of the data in the
                    database as it changes.</li></ul><p>The second parameter is discussed in the next tip, so hang on.</p><h3 id="N1018A" class="ibm-h3">Directional scrolling</h3><p>Once you've obtained a <code>ResultSet</code> from the
                <code>Statement</code>, scrolling backward through it is just a matter of
                calling <code>previous()</code>, which goes backward a row instead of
                forward, as <code>next()</code> would. Or you could call
                <code>first()</code> to go back to the beginning of the
                <code>ResultSet</code>, or call <code>last()</code> to go to the end of
                the <code>ResultSet</code>, or ... well, you get the idea.</p><p>The <code>relative()</code> and <code>absolute()</code> methods can also be
                helpful: the first moves the specified number of rows (forward if the
                value is positive, backward if the value is negative), and the latter
                moves to the specified row in the <code>ResultSet</code> regardless of
                where the cursor is. Of course, the current row number is available via
                <code>getRow()</code>.</p><p>If you plan on doing a lot of scrolling in a particular direction, you can
                help the <code>ResultSet</code> by specifying that direction, by calling
                <code>setFetchDirection()</code>. (A <code>ResultSet</code> will work
                regardless of its scrolling direction but knowing beforehand allows it to
                optimize its data retrieval.)</p><h2 id="N101C2" class="ibm-h2">3. Updateable ResultSets</h2><p>JDBC doesn't just support bidirectional <code>ResultSet</code>s, it also
                supports in-place updates to <code>ResultSet</code>s. This means that
                rather than create a new SQL statement to change the values currently
                stored in the database, you can just modify the value held inside the
                <code>ResultSet</code>, and it will be automatically sent to the database
                for that column of that row.</p><p>Asking for an updateable <code>ResultSet</code> is similar to the process
                involved in asking for a scrollable <code>ResultSet</code>. In fact, it's
                where you'll use the second parameter to <code>createStatement()</code>.
                Instead of specifying <code>ResultSet.CONCUR_READ_ONLY</code> for the
                second parameter, send <code>ResultSet.CONCUR_UPDATEABLE</code>, as shown
                in Listing 5:</p><h5 id="listing5" class="ibm-h5">Listing 5. I'd like an updateable ResultSet,
                    please</h5><span class="dw-code-nohighlight"><div class="ibm-syntax-container"><div><div id="highlighter_28143" class="syntaxhighlighter  htmlscript"><table border="0" cellpadding="0" cellspacing="0" role="none"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">Statement stmt = con.createStatement(</code></div><div class="line number2 index1 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">ResultSet.TYPE_SCROLL_INSENSITIVE, </code></div><div class="line number3 index2 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">ResultSet.CONCUR_UPDATABLE);</code></div><div class="line number4 index3 alt1"><code class="htmlscript plain">ResultSet scrollingRS = stmt.executeQuery("SELECT * FROM whatever");</code></div></div></td></tr></tbody></table></div></div></div></span><p>Assuming your driver supports updateable cursors (that's another feature of
                the JDBC specification, which most "real-world" databases will
                support), you can update any given value in a <code>ResultSet</code> by
                navigating to that row and calling one of the <code>update...()</code>
                methods on it (shown in Listing 6). Like the <code>get...()</code> methods
                on <code>ResultSet</code>, <code>update...()</code> is overloaded for the
                actual column type in the <code>ResultSet</code>. So to change the
                floating-point column named "<code>PRICE</code>", call
                <code>updateFloat("PRICE")</code>. Doing so only updates the value in the
                <code>ResultSet</code>, however. To push the value to the database backing
                it, call <code>updateRow()</code>. If the user changes his or her mind
                about changing the price, a call to <code>cancelRowUpdates()</code> will
                kill all pending updates.</p><h5 id="listing6" class="ibm-h5">Listing 6. A better
                way</h5><span class="dw-code-nohighlight"><div class="ibm-syntax-container"><div><div id="highlighter_495263" class="syntaxhighlighter  htmlscript"><table border="0" cellpadding="0" cellspacing="0" role="none"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">Statement stmt = con.createStatement(</code></div><div class="line number2 index1 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">ResultSet.TYPE_SCROLL_INSENSITIVE, </code></div><div class="line number3 index2 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">ResultSet.CONCUR_UPDATABLE);</code></div><div class="line number4 index3 alt1"><code class="htmlscript plain">ResultSet scrollingRS = </code></div><div class="line number5 index4 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">stmt.executeQuery("SELECT * FROM lineitem WHERE id=1");</code></div><div class="line number6 index5 alt1"><code class="htmlscript plain">scrollingRS.first();</code></div><div class="line number7 index6 alt2"><code class="htmlscript plain">scrollingRS.udpateFloat("PRICE", 121.45f);</code></div><div class="line number8 index7 alt1"><code class="htmlscript plain">// ...</code></div><div class="line number9 index8 alt2"><code class="htmlscript plain">if (userSaidOK)</code></div><div class="line number10 index9 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">scrollingRS.updateRow();</code></div><div class="line number11 index10 alt2"><code class="htmlscript plain">else</code></div><div class="line number12 index11 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">scrollingRS.cancelRowUpdates();</code></div></div></td></tr></tbody></table></div></div></div></span><p>JDBC 4.0 supports more than just updates. If the user wants to add a
                completely new row, rather than create a new <code>Statement</code> and
                execute an <code>INSERT</code>, just call <code>moveToInsertRow()</code>,
                call <code>update...()</code> for each column, then call
                <code>insertRow()</code> to complete the work. If a column value isn't
                specified, it's assumed to be an <code>SQL NULL</code> (which might
                trigger an <code>SQLException</code> if the database schema doesn't allow
                <code>NULL</code>s for that column).</p><p>Naturally, if the <code>ResultSet</code> supports updating a row, it must
                also support deleting one, via <code>deleteRow()</code>.</p><p>Oh, and before I forget, all of this scrollability and updateability
                applies equally to <code>PreparedStatement</code> (by passing those
                parameters to the <code>prepareStatement()</code> method), which is
                infinitely preferable to a regular <code>Statement</code> due to the
                constant danger of SQL injection attacks.</p><h2 id="N10241" class="ibm-h2">4. Rowsets</h2><p>If all this functionality has been in JDBC for the better part of a decade,
                why are most developers still stuck on forward-scrolling
                <code>ResultSet</code>s and disconnected access?</p><p>The main culprit is scalability. Keeping database connections to a minimum
                is key to supporting the massive numbers of users that the Internet can
                bring to a company's web site. Because scrolling and/or updating
                <code>ResultSet</code>s usually requires an open network connection, many
                developers will not (or cannot) use them.</p><p>Fortunately, there is an alternative that lets you do many of
                the same things you would with a <code>ResultSet</code>, without
                necessarily needing to keep the database connection open.</p><p>In concept, a <code>Rowset</code> is essentially a <code>ResultSet</code>,
                but one which allows for either a connected or disconnected model. All you
                need to do is create a <code>Rowset</code>, point it at a
                <code>ResultSet</code>, and when it's done populating itself, use it as
                you would a <code>ResultSet</code>, shown in Listing 7: </p><h5 id="listing7" class="ibm-h5">Listing 7. Rowset replaces
                ResultSet</h5><span class="dw-code-nohighlight"><div class="ibm-syntax-container"><div><div id="highlighter_58849" class="syntaxhighlighter  htmlscript"><table border="0" cellpadding="0" cellspacing="0" role="none"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">Statement stmt = con.createStatement(</code></div><div class="line number2 index1 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">ResultSet.TYPE_SCROLL_INSENSITIVE, </code></div><div class="line number3 index2 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">ResultSet.CONCUR_UPDATABLE);</code></div><div class="line number4 index3 alt1"><code class="htmlscript plain">ResultSet scrollingRS = stmt.executeQuery("SELECT * FROM whatever");</code></div><div class="line number5 index4 alt2"><code class="htmlscript plain">if (wantsConnected)</code></div><div class="line number6 index5 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">JdbcRowSet rs = new JdbcRowSet(scrollingRS); // connected</code></div><div class="line number7 index6 alt2"><code class="htmlscript plain">else</code></div><div class="line number8 index7 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">CachedRowSetImpl crs = new CachedRowSetImpl();&nbsp; // disconnected</code></div><div class="line number9 index8 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">cachedRowSet.populate(scrollingRS);</code></div></div></td></tr></tbody></table></div></div></div></span><p>JDBC comes with five "implementations" (meaning extended interfaces) of the
                <code>Rowset</code> interface. <code>JdbcRowSet</code> is a connected
                <code>Rowset</code> implementation; the remaining four are
                disconnected:</p><ul class="ibm-bullet-list"><li><code>CachedRowSet</code> is just a disconnected
                    <code>Rowset</code>.</li><li><code>WebRowSet</code> is a subclass of <code>CachedRowSet</code> that
                    knows how to transform its results to XML and back again.</li><li><code>JoinRowSet</code> is a <code>WebRowSet</code> that also knows
                    how to form the equivalent of an <code>SQL JOIN</code> without having
                    to connect back to the database.</li><li><code>FilteredRowSet</code> is a <code>WebRowSet</code> that also
                    knows how to further filter the data handed back without having to
                    connect back to the database.</li></ul><p><code>Rowsets</code> are full JavaBeans, meaning they support
                listener-style events, so any modifications to the <code>Rowset</code> can
                be caught, examined, and acted upon, if desired. In fact,
                <code>Rowset</code> can even manage the complete act against the database
                if it has its <code>Username</code>, <code>Password</code>,
                <code>URL</code>, and <code>DatasourceName</code> properties set (which
                means it will create a connection using
                <code>DriverManager.getConnection()</code>) or its <code>Datasource</code>
                property set (which was probably obtained via JNDI). You would then
                specify the SQL to execute in the <code>Command</code> property, call
                <code>execute()</code>, and start working with the results — no
                further work required.</p><p><code>Rowset</code> implementations are generally provided by the JDBC
                driver, so the actual name and/or package will depend on what JDBC driver
                you use. <code>Rowset</code> implementations have been a part of the
                standard distribution for sometime, so you should be able to just create a
                <code>...RowsetImpl()</code> and go. (In the unlikely event that your
                driver doesn't provide one, Sun offers a reference implementation; see <a href="#artrelatedtopics">Related topics</a> for the link.) </p><h2 id="N102CA" class="ibm-h2">5. Batch updates</h2><p>Despite their usefulness, <code>Rowset</code>s sometimes just don't meet
                all your needs, and you may need to fall back to writing straight SQL
                statements. In those situations, particularly when you're facing a slew of
                work, you might appreciate the ability to do batch updates, executing more
                than one SQL statement against the database as part of one network
                round-trip.</p><p>To determine whether the JDBC driver supports batch updates, a quick call
                to the <code>DatabaseMetaData.supportsBatchUpdates()</code> yields a
                boolean telling the story. Assuming batch updates are supported (indicated
                by anything non-<code>SELECT</code>), queue one up and release it in a
                blast, like in Listing 8:</p><h5 id="listing8" class="ibm-h5">Listing 8. Let the database have
                it!</h5><span class="dw-code-nohighlight"><div class="ibm-syntax-container"><div><div id="highlighter_254609" class="syntaxhighlighter  htmlscript"><table border="0" cellpadding="0" cellspacing="0" role="none"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">conn.setAutoCommit(false);</code></div><div class="line number2 index1 alt1">&nbsp;</div><div class="line number3 index2 alt2"><code class="htmlscript plain">PreparedStatement pstmt = conn.prepareStatement("INSERT INTO lineitems VALUES(?,?,?,?)");</code></div><div class="line number4 index3 alt1"><code class="htmlscript plain">pstmt.setInt(1, 1);</code></div><div class="line number5 index4 alt2"><code class="htmlscript plain">pstmt.setString(2, "52919-49278");</code></div><div class="line number6 index5 alt1"><code class="htmlscript plain">pstmt.setFloat(3, 49.99);</code></div><div class="line number7 index6 alt2"><code class="htmlscript plain">pstmt.setBoolean(4, true);</code></div><div class="line number8 index7 alt1"><code class="htmlscript plain">pstmt.addBatch();</code></div><div class="line number9 index8 alt2">&nbsp;</div><div class="line number10 index9 alt1"><code class="htmlscript plain">// rinse, lather, repeat</code></div><div class="line number11 index10 alt2">&nbsp;</div><div class="line number12 index11 alt1"><code class="htmlscript plain">int[] updateCount = pstmt.executeBatch();</code></div><div class="line number13 index12 alt2"><code class="htmlscript plain">conn.commit();</code></div><div class="line number14 index13 alt1"><code class="htmlscript plain">conn.setAutoCommit(true);</code></div></div></td></tr></tbody></table></div></div></div></span><p>The call to <code>setAutoCommit()</code> is necessary because by default,
                the driver will try to commit every statement that it is fed. Other than
                that, the rest of the code is pretty straightforward: do the usual SQL
                thing with the <code>Statement</code> or <code>PreparedStatement</code>,
                but instead of calling <code>execute()</code>, invoke
                <code>executeBatch()</code>, which queues the call instead of sending it
                right away.</p><p>When the whole mess of statements is ready to go, fire them all at the
                database with <code>executeBatch()</code>, which returns an array of
                integer values, each of which holds the same result as if
                <code>executeUpdate()</code> had been used.</p><p>In the event that a statement in the batch fails, if the driver doesn't
                support batch updates, or if a statement in the batch returns a
                <code>ResultSet</code>, the driver will throw a
                <code>BatchUpdateException</code>. In some cases, the driver may have
                tried to continue executing statements after an exception was thrown. The
                JDBC specification doesn't mandate particular behavior, so you are advised
                to experiment with your driver beforehand, so that you know exactly how it
                behaves. (But of course you'll be running unit tests, so you'll discover
                the error long before it becomes a problem, right?)</p><h2 id="N10304" class="ibm-h2">Conclusion</h2><p>As a staple of Java development, the JDBC API is something that every Java
                developer should know like the back of his or her hand. The funny thing
                is, most developers haven't kept up with enhancements to the API over the
                years, and so they miss out on the time-saving tricks described in this
                article.</p><p>Whether you decide to use JDBC's newer features is up to you, of course. A
                key aspect to consider will be the scalability of the system you're
                working on. The higher it needs to scale, the more constrained your use of
                the database will be, and thus the more you'll need to reduce network
                traffic against it. <code>Rowset</code>s, scalar calls, and batch updates
                will be your friends here. Otherwise, try the scrollable and updateable
                <code>ResultSet</code>s (which don't consume as much memory as
                <code>Rowset</code>s do), and measure the scalability hit. It probably
                won't be as bad as you expect.</p><!--CMA ID: 505541--><!--Site ID: 1--><!--XSLT stylesheet used to transform this file: dw-document-html-8.0.xsl-->
                                        <!-- Article Quiz -->
                                        
                                        <!-- Article Resources -->
                                        <div class="ibm-alternate-rule"><hr></div><h4 id="artdownload" class="ibm-h4">Downloadable resources</h4><ul class="ibm-link-list"><li><a class="ibm-document-link" href="j-5things10-pdf.pdf">PDF of this content</a></li></ul><div class="ibm-alternate-rule"><hr></div><h4 id="artrelatedtopics" class="ibm-h4">Related topics</h4><ul><li>Develop and deploy your next app on the <a href="https://console.bluemix.net/?cm_sp=dw-bluemix-_-j-5things10-_-article">IBM Bluemix cloud
                    platform</a>.</li><li><a href="http://docs.oracle.com/javase/8/docs/technotes/guides/jdbc/index.html">JDBC
                        4.2 API Specification</a>: Get the latest JDBC specification and
                    learn it like the back of your own hand.</li><li><a href="http://docs.oracle.com/javase/tutorial/jdbc/basics/index.html">JDBC Tutorial</a>: Offical JDBC basics tutorial from Oracle.</li></ul>
                                        
                                    </div>
<br><hr>
</body>
</html>