jmm касается шарэд переменных в многопоточных приложениях.
jmm строит все возмоные варианты выполнения программы, отбрасывает невалидные варианты, все остальные перестроения разрешены.(только для шарэд, не для локальных).

проблемы с лонг и дабл (8byte) на 32 бит: их чтение и запись НЕатомарны на 32бит платформах.
64бита=8байт, на х64 есть команда которая может читать за раз 64 бита.
Чтобы обеспечить их атомарность надо объявить их volatile.

Word Tearing запрещён!!
операции над независимыми элементами независимы.(поля, элементы массива и т.п.)

****************************
при разработке спецификации JMM пацаны хотели иметь возможность оптимизировать код (компилятором, hardware), и чтобы результат работы кода был предсказуемым(какой-то порядок выполнения). Цель - соблюсти баланс.

Была оставлена Sequential consistency и сделана более строгой.
Основные функции:
1) Program order - порядок действий внутри одного потока.
(но это не порядок операторов)(это не тот код, который пишут прогеры)
он связывает операции между собой. 
Например, для кода:
if(a!=42) x = 42 else x = a
будут такие операции:
read(a) -> compare(a,12) -> write(x,a)

Ввели synchronized actions:
1) локи и анлоки,
2) чтение/запись волатайл переменных
3) действия для старта потока
4) действия чтобы определить, что поток закончен
Благодаря им строиться synchronization order: какие действия перед какими выполняются(happens before для старта потока, захват монитора, последняя операция завершится перед выходом из синх.блока, и т.п.).


когда захватывает монитор - то создаётся happens before условие:
последующее чтение увидит послденюю запись, которая была сделана из синхронизированого блока.
т.е. появляется Sequential consistency -- это значит что поведение программы всё-таки можно объяснить какой-то последовательностью операций.
потому что synchronized actions дают нам определённый порядок, который мы не можем разрушить.

SC-DRF = Sequential consistency DATA RACE FREE
Правильно синхронизированные программы имеют постоянство в последовательности операций.

Out-of-thin-air запрещёно!!
Если мы что-то прочитали - значит кто-то его туда записал.
Все действия группируются в комиты,
комиты выстраиваются в строгий порядок,
если какое-то действие в комите нарушит порядок(вызовет race condition) - то такой комит запрещён

*************************
final переменные.
jmm гарантирует что файнал переменные будут проинициализированы при обращении к ним.
