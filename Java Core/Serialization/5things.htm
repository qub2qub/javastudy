<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<title>5things</title>
    <link rel="stylesheet" href="../../Guides/grey.css">
</head>
<body>
<div class="ibm-col-1-1">

<p>Несколько лет назад, работая с командой разработчиков, создававшей Java-приложение, мне пригодилось то, что я знал о сериализации Java-объектов немного больше, чем обычный программист. 
 </p><div class="dw-sidebar ibm-inset"><h2 id="N10056">Об этой серии статей</h2><p>Вы думаете, что знаете, как программировать на Java? На самом деле большинство разработчиков лишь поверхностно знакомятся с платформой Java, узнавая лишь то, что необходимо для выполнения работы. В этом 
 <a href="http://www.ibm.com/developerworks/ru/views/java/libraryview.jsp?search_by=5+Java-объектов">цикле</a>
        статей Тед Ньювард углубляется в основную функциональность платформы Java, чтобы рассказать о малоизвестных фактах, знание которых может помочь при решении самых сложных задач программирования.
        </p></div><p>Примерно за год до этого разработчик, ответственный за управление пользовательскими настройками приложения, принял решение хранить их (настройки) на жестком диске в объекте класса <code>Hashtable</code>. Когда пользователь изменял свои настройки, этот <code>Hashtable</code> просто перезаписывался на диск.
</p><p>Это была элегантная и изменяемая система настроек до тех пор, пока команда не решила перейти с <code>Hashtable</code> на класс из библиотеки коллекций Java – <code>HashMap</code>.
</p><p><code>Hashtable</code> и <code>HashMap</code> при записи на диск принимают различные формы, не совместимые друг с другом. Если не рассматривать вариант запуска какой-либо утилиты для конвертации данных на каждом наборе пользовательских настроек (монументальная задача), то казалось, что <code>Hashtable</code> останется форматом хранения данных приложения на всю его оставшуюся жизнь.
</p><p>Разработчики зашли в тупик, но только потому, что они не знали одного важного (но малоизвестного) факта о сериализации в Java: сериализация позволяет типам данных эволюционировать с течением времени. Когда я им показал, как автоматически заменять сериализованные данные, переход к <code>HashMap</code> прошел по плану.
</p><p>Это первая статья из цикла, посвященного рассказам о полезных мелочах платформы Java – малоизвестных вещах, которые могут пригодиться при решении сложных задач программирования на Java.
</p><p>Сериализация Java-объектов – это отличный API для начала работы, так как он присутствует в платформе с самого начала: с JDK 1.1. В этой статье вы узнаете о пяти связанных с сериализацией вещах, которые должны убедить вас еще раз просмотреть даже стандартные API Java.
</p><h2 id="N10082">Сериализация Java для начинающих</h2><p>Сериализация Java-объектов появилась как один из основополагающих компонентов JDK 1.1, она является механизмом трансформации графа Java-объектов в массив байтов для хранения и передачи, который позднее можно обратно трансформировать в граф Java-объектов.
</p><p>В сущности, идея сериализации состоит в том, чтобы "заморозить" граф объекта, переместить его (на диск, по сети и т.д.) и затем "разморозить" его обратно в пригодные для использования Java-объекты. Все это происходит более или менее магическим образом благодаря классам <code>ObjectInputStream</code>/<code>ObjectOutputStream</code>, абсолютно точным метаданным и желанию программистов поучаствовать в процессе, маркируя свои классы как поддерживающие интерфейс <code>Serializable</code>.
</p><p>В листинге 1 показан класс <code>Person</code>, реализующий интерфейс <code>Serializable</code>.</p><h5 id="listing1">Листинг 1. Класс Person с интерфейсом Serializable</h5><div class="codesection"><pre class="displaycode">package com.tedneward;

public class Person
    implements java.io.Serializable
{
    public Person(String fn, String ln, int a)
    {
        this.firstName = fn; this.lastName = ln; this.age = a;
    }

    public String getFirstName() { return firstName; }
    public String getLastName() { return lastName; }
    public int getAge() { return age; }
    public Person getSpouse() { return spouse; }

    public void setFirstName(String value) { firstName = value; }
    public void setLastName(String value) { lastName = value; }
    public void setAge(int value) { age = value; }
    public void setSpouse(Person value) { spouse = value; }

    public String toString()
    {
        return "[Person: firstName=" + firstName + 
            " lastName=" + lastName +
            " age=" + age +
            " spouse=" + spouse.getFirstName() +
            "]";
    }    

    private String firstName;
    private String lastName;
    private int age;
    private Person spouse;

}</pre></div><p>Теперь можно сериализовать объект класса <code>Person</code>, после чего записать полученный граф объекта на диск и прочитать его снова, как показано в следующем юнит-тесте JUnit 4.</p><h5 id="listing2">Листинг 2. Десериализуем объект класса Person</h5><div class="codesection"><pre class="displaycode">public class SerTest
{
    @Test public void serializeToDisk()
    {
        try
        {
            com.tedneward.Person ted = new com.tedneward.Person("Ted", "Neward", 39);
            com.tedneward.Person charl = new com.tedneward.Person("Charlotte",
                "Neward", 38);

            ted.setSpouse(charl); charl.setSpouse(ted);

            FileOutputStream fos = new FileOutputStream("tempdata.ser");
            ObjectOutputStream oos = new ObjectOutputStream(fos);
            oos.writeObject(ted);
            oos.close();
        }
        catch (Exception ex)
        {
            fail("Exception thrown during test: " + ex.toString());
        }
        
        try
        {
            FileInputStream fis = new FileInputStream("tempdata.ser");
            ObjectInputStream ois = new ObjectInputStream(fis);
            com.tedneward.Person ted = (com.tedneward.Person) ois.readObject();
            ois.close();
            
            assertEquals(ted.getFirstName(), "Ted");
            assertEquals(ted.getSpouse().getFirstName(), "Charlotte");

            // Clean up the file
            new File("tempdata.ser").delete();
        }
        catch (Exception ex)
        {
            fail("Exception thrown during test: " + ex.toString());
        }
    }
}</pre></div><p>Ничто из того, что вы видели до сих пор, не является чем-то новым или удивительным – это основы сериализации, однако это хорошее место для начала работы. Мы воспользуемся классом <code>Person</code>, чтобы рассказать о пяти вещах, связанных с сериализацией Java-объектов, о которых вы, возможно, до этого не знали.
</p><div class="ibm-alternate-rule"><hr></div><p class="ibm-ind-link ibm-back-to-top"><a href="#ibm-pcon" class="ibm-anchor-up-link">В начало</a></p><h2 id="N100B4">1. Сериализация позволяет делать рефакторинг кода</h2><p>Сериализация позволяет в определенных пределах изменять класс, так что даже после рефакторинга класс <code>ObjectInputStream</code> по-прежнему будет с ним прекрасно работать.
</p>

<p>Вот наиболее важные изменения, с которыми спецификация <em>Java Object Serialization</em> может справляться автоматически:</p><ul class="ibm-bullet-list"><li>добавление в класс новых полей;</li><li>изменение полей из статических в нестатические;</li><li>изменение полей из transient в nontransient.</li></ul>

<p>The critical things that the <em>Java Object Serialization</em>
                specification can manage automatically are:</p>
<ul class="ibm-bullet-list"><li>Adding new fields to a class</li><li>Changing the fields from static to nonstatic</li><li>Changing the fields from transient to nontransient</li></ul>

<p>Обратные изменения (из нестатических полей в статические и из нетранзиентных в транзиентные) или удаление полей требуют определенной дополнительной обработки в зависимости от того, какая степень обратной совместимости вам нужна.
</p><h3 id="N100CC">Рефакторинг сериализованного класса</h3><p>Зная, что сериализация позволяет выполнять рефакторинг, давайте посмотрим, что произойдет при добавлении в класс <code>Person</code> нового поля. 
</p><p>В классе <code>PersonV2</code>, показанном в листинге 3, по сравнению с изначальным классом <code>Person</code> появилось новое поле, определяющее пол человека.
</p><h5 id="listing3">Листинг 3. Добавляем новое поле к сериализованному классу Person</h5><div class="codesection"><pre class="displaycode">enum Gender
{
    MALE, FEMALE
}

public class Person
    implements java.io.Serializable
{
    public Person(String fn, String ln, int a, Gender g)
    {
        this.firstName = fn; this.lastName = ln; this.age = a; this.gender = g;
    }
  
    public String getFirstName() { return firstName; }
    public String getLastName() { return lastName; }
    public Gender getGender() { return gender; }
    public int getAge() { return age; }
    public Person getSpouse() { return spouse; }

    public void setFirstName(String value) { firstName = value; }
    public void setLastName(String value) { lastName = value; }
    public void setGender(Gender value) { gender = value; }
    public void setAge(int value) { age = value; }
    public void setSpouse(Person value) { spouse = value; }

    public String toString()
    {
        return "[Person: firstName=" + firstName + 
            " lastName=" + lastName +
            " gender=" + gender +
            " age=" + age +
            " spouse=" + spouse.getFirstName() +
            "]";
    }    

    private String firstName;
    private String lastName;
    private int age;
    private Person spouse;
    private Gender gender;
}</pre></div><p>При сериализации используется хеш, для вычисления которого применяется практически все, что имеется в коде класса – имена методов, имена полей, типы полей, модификаторы доступа и т.д. Значение этого хеша сравнивается со значениями хеша в сериализованном потоке.
</p><p>Чтобы убедить среду выполнения Java, что два типа фактически являются одним и тем же, во второй и всех последующих версиях класса <code>Person</code> должна быть та же самая версия хеша сериализации, что и в изначальном классе (она хранится в закрытом статическом поле <code>serialVersionUID</code>). Поэтому то, что нам нужно, – это поле <code>serialVersionUID</code>, которое вычисляется с помощью JDK-команды <code>serialver</code>, выполненной для изначальной версии класса <code>Person</code>.
</p><p>При наличии поля <code>serialVersionUID</code> класса <code>Person</code> мы можем не только создавать объекты класса <code>PersonV2</code> из сериализованных объектов изначального класса (новое поле в них будет иметь значение по умолчанию для данного типа, в большинстве случаев – "null"), но и наоборот: десериализовывать объекты класса <code>PersonV2</code> в объекты изначального класса <code>Person</code>.
</p><div class="ibm-alternate-rule"><hr></div><p class="ibm-ind-link ibm-back-to-top"><a href="#ibm-pcon" class="ibm-anchor-up-link">В начало</a></p><h2 id="N10109">2. Сериализация не безопасна</h2><p>Часто для Java-разработчиков неприятным сюрпризом является то, что двоичный формат сериализации полностью документирован и обратим. Фактически чтобы определить, как выглядит класс и что он содержит, достаточно просто перенести содержимое сериализованного потока в консоль.
</p><p>Это имеет некоторые неприятные последствия, связанные с безопасностью. Например, при выполнении удаленного вызова метода с помощью RMI все закрытые поля пересылаемых по сети объектов выглядят в потоке сокета почти как обычный текст, что, конечно же, нарушает даже самые простые правила безопасности.
</p><p>К счастью, в API сериализации имеется возможность "вклиниться" в процесс сериализации, дабы обезопасить (или запутать) поля данных как перед сериализацией, так и после десериализации. Это можно сделать, определив метод <code>writeObject</code> объекта <code>Serializable</code>. 
</p><h3 id="N1011A">Запутываем сериализованные данные</h3><p>Предположим, что в классе <code>Person</code> необходимо защитить данные в поле возраста (age); в конце концов, леди никогда не раскрывают своего возраста, а джентльмены никогда о нем не заговаривают. Мы можем замаскировать эти данные, сдвинув биты в этом поле перед сериализацией и убрав сдвиг после десериализации. (Я оставлю вам задачу разработки более безопасного алгоритма, этот алгоритм послужит нам лишь для примера.).
</p><p>Чтобы модифицировать процесс сериализации, мы реализуем в классе <code>Person</code> метод <code>writeObject</code>, а чтобы модифицировать процесс десериализации, мы реализуем в том же классе метод <code>readObject</code>. Важно правильно понимать, как работают оба этих метода – если модификаторы доступа, параметры или имя отличаются от того, что показано в листинге 4, код просто не сработает, и поле age нашего класса <code>Person</code> будет доступно любому наблюдателю.
</p><h5 id="listing4">Листинг 4. Маскируем сериализованные данные</h5><div class="codesection"><pre class="displaycode">public class Person
    implements java.io.Serializable
{
    public Person(String fn, String ln, int a)
    {
        this.firstName = fn; this.lastName = ln; this.age = a;
    }

    public String getFirstName() { return firstName; }
    public String getLastName() { return lastName; }
    public int getAge() { return age; }
    public Person getSpouse() { return spouse; }
    
    public void setFirstName(String value) { firstName = value; }
    public void setLastName(String value) { lastName = value; }
    public void setAge(int value) { age = value; }
    public void setSpouse(Person value) { spouse = value; }

    private void writeObject(java.io.ObjectOutputStream stream)
        throws java.io.IOException
    {
        // "Encrypt"/obscure the sensitive data
        age = age &gt;&gt; 2;
        stream.defaultWriteObject();
    }

    private void readObject(java.io.ObjectInputStream stream)
        throws java.io.IOException, ClassNotFoundException
    {
        stream.defaultReadObject();

        // "Decrypt"/de-obscure the sensitive data
        age = age &lt;&lt; 2;
    }
    
    public String toString()
    {
        return "[Person: firstName=" + firstName + 
            " lastName=" + lastName +
            " age=" + age +
            " spouse=" + (spouse!=null ? spouse.getFirstName() : "[null]") +
            "]";
    }      

    private String firstName;
    private String lastName;
    private int age;
    private Person spouse;
}</pre></div><p>Если нам нужно посмотреть замаскированные данные, мы можем просто взглянуть на поток/файл с сериализованными данными. И, поскольку формат полностью документирован, содержимое сериализованного потока можно прочитать, не зная о том, что собой представляет класс.
</p><div class="ibm-alternate-rule"><hr></div><p class="ibm-ind-link ibm-back-to-top"><a href="#ibm-pcon" class="ibm-anchor-up-link">В начало</a></p><h2 id="N1013B">3. Сериализованные данные можно подписывать и упаковывать</h2><p>В предыдущем разделе предполагалось, что мы хотим запутать сериализованные данные, а не зашифровать их или убедиться, что они не были изменены. Хотя реализовать шифрование и управление подписями, конечно же, можно и с помощью методов <code>writeObject</code> и <code>readObject</code>, для этого есть более подходящий способ.
</p><p>Если вам нужно зашифровать и подписать целый объект, проще всего поместить его в оберточный класс <code>javax.crypto.SealedObject</code> и/или <code>java.security.SignedObject</code>. Оба эти класса являются сериализуемыми, поэтому при оборачивании объекта в <code>SealedObject</code> создается нечто вроде "подарочной упаковки" вокруг исходного объекта. Для шифрования вам нужен симметричный ключ, управление которым должно осуществляться отдельно. Аналогично, для проверки данных можно использовать класс <code>SignedObject</code>, для работы с которым нужен симметричный ключ, управляемый отдельно.
</p><p>Вместе эти два объекта позволяют упаковывать и подписывать сериализованные данные, не отвлекаясь на детали проверки и шифрования цифровых подписей. Красиво, не правда ли?
</p><div class="ibm-alternate-rule"><hr></div><p class="ibm-ind-link ibm-back-to-top"><a href="#ibm-pcon" class="ibm-anchor-up-link">В начало</a></p><h2 id="N10158">4. Для сериализации можно использовать прокси-класс</h2><p>Иногда класс может содержать главный элемент, из которого можно получить все остальные поля класса. В таких случаях необязательно сериализовывать весь объект. Можно было бы пометить поле как <em>транзитное</em>, однако в классе все равно нужно было бы явно указывать код, который бы каждый раз при обращении к полю из метода проверял, было ли оно инициализировано.
</p><p>Если нашей главной заботой является сериализация, то лучше для нее использовать специальный прокси, из которого можно воссоздать весь объект. Определив для класса <code>Person</code> метод <code>writeReplace</code>, можно задать, какой объект следует сериализовывать вместо него; аналогично, если определить метод <code>readResolve</code>, то он будет вызываться во время десериализации, чтобы вернуть вызывающей стороне объект-замену.
</p><h3 id="N1016D">Упаковываем и распаковываем прокси-класс</h3><p>Вместе методы <code>writeReplace</code> и <code>readResolve</code> позволяют классу <code>Person</code> упаковывать все данные (или их наиболее важную часть) в объект класса <code>PersonProxy</code>, помещать его в поток и затем распаковать его при десериализации.
</p><h5 id="listing5">Листинг 5. Заполни меня, и я тебя заменю</h5><div class="codesection"><pre class="displaycode">class PersonProxy
    implements java.io.Serializable
{
    public PersonProxy(Person orig)
    {
        data = orig.getFirstName() + "," + orig.getLastName() + "," + orig.getAge();
        if (orig.getSpouse() != null)
        {
            Person spouse = orig.getSpouse();
            data = data + "," + spouse.getFirstName() + "," + spouse.getLastName() + ","  
              + spouse.getAge();
        }
    }

    public String data;
    private Object readResolve()
        throws java.io.ObjectStreamException
    {
        String[] pieces = data.split(",");
        Person result = new Person(pieces[0], pieces[1], Integer.parseInt(pieces[2]));
        if (pieces.length &gt; 3)
        {
            result.setSpouse(new Person(pieces[3], pieces[4], Integer.parseInt
              (pieces[5])));
            result.getSpouse().setSpouse(result);
        }
        return result;
    }
}

public class Person
    implements java.io.Serializable
{
    public Person(String fn, String ln, int a)
    {
        this.firstName = fn; this.lastName = ln; this.age = a;
    }

    public String getFirstName() { return firstName; }
    public String getLastName() { return lastName; }
    public int getAge() { return age; }
    public Person getSpouse() { return spouse; }

    private Object writeReplace()
        throws java.io.ObjectStreamException
    {
        return new PersonProxy(this);
    }
    
    public void setFirstName(String value) { firstName = value; }
    public void setLastName(String value) { lastName = value; }
    public void setAge(int value) { age = value; }
    public void setSpouse(Person value) { spouse = value; }   

    public String toString()
    {
        return "[Person: firstName=" + firstName + 
            " lastName=" + lastName +
            " age=" + age +
            " spouse=" + spouse.getFirstName() +
            "]";
    }    
    
    private String firstName;
    private String lastName;
    private int age;
    private Person spouse;
}</pre></div><p>Обратите внимание, что в классе <code>PersonProxy</code> необходимо отслеживать все данные класса <code>Person</code>. Часто это означает, что прокси должен быть внутренним классом класса <code>Person</code>, чтобы иметь доступ к его закрытым полям. Также в прокси иногда нужно отслеживать ссылки на другие объекты и сериализовывать их вручную, например супругу(а) нашего объекта класса <code>Person</code>.
</p><p>Это один из немногих приемов, который не обязательно должен быть сбалансирован относительно чтения и записи. Например, в обновленной версии класса можно реализовать метод <code>readResolve</code>, который будет незаметно конвертировать сериализованный объект в новый тип. Аналогично, в нем может использоваться метод <code>writeReplace</code> для того, чтобы сериализовывать объекты старых классов в новые версии.
</p><div class="ibm-alternate-rule"><hr></div><p class="ibm-ind-link ibm-back-to-top"><a href="#ibm-pcon" class="ibm-anchor-up-link">В начало</a></p><h2 id="N1019D">5. Доверяй, но проверяй</h2><p>Хотелось бы предполагать, что данные в сериализованном потоке – это всегда те же самые данные, которые были изначально записаны в поток. Однако, как однажды заметил один из экс-президентов США, безопаснее "доверять, но проверять".
</p><p>В случае сериализованных объектов это означает, что на всякий случай нужно проверять поля объекта, чтобы убедиться, что после десериализации в них хранятся допустимые значения. Это можно сделать, реализовав интерфейс <code>ObjectInputValidation</code> и переопределив метод <code>validateObject()</code>. Если при его вызове что-то в объекте выглядит не так, должно выбрасываться исключение <code>InvalidObjectException</code>.
</p><div class="ibm-alternate-rule"><hr></div><p class="ibm-ind-link ibm-back-to-top"><a href="#ibm-pcon" class="ibm-anchor-up-link">В начало</a></p><h2 id="N101AF">В заключение</h2><p>API сериализации Java-объектов более гибок, чем полагает большинство разработчиков, он предоставляет нам богатые возможности для выхода из сложных ситуаций.
</p><p>К счастью, подобными «жемчужинами» кода щедро одарена вся JVM. Нужно просто знать о них и хранить под рукой для решения сложных задач.
</p><p>Далее в нашем <a href="http://www.ibm.com/developerworks/views/java/libraryview.jsp?search_by=5+things+you+did">цикле</a>статей мы расскажем о Java-коллекциях. А до тех пор забавляйтесь с API сериализации, как вам заблагорассудится!
</p><!--CMA ID: 782005--><!--Site ID: 40--><!--XSLT stylesheet used to transform this file:
        dw-document-html-7.0.xsl-->
<div class="ibm-alternate-rule"><hr></div><p class="ibm-ind-link ibm-back-to-top"><a href="#ibm-pcon" class="ibm-anchor-up-link">В начало</a></p><h2 id="download">Загрузка</h2><table class="ibm-data-table dw-download-table" cellpadding="0" cellspacing="0" border="0"><thead><tr><th scope="col">Описание</th><th scope="col">Имя</th><th scope="col">Размер</th></tr></thead><tbody><tr><th scope="row" class="ibm-table-row">Пример кода для этой статьи</th><td nowrap="nowrap"><a href="http://www.ibm.com/developerworks/apps/download/index.jsp?contentid=782005&amp;filename=5things1-src.zip&amp;method=http&amp;locale=ru_RU">5things1-src.zip</a></td><td nowrap="nowrap">10 КБ</td></tr></tbody></table>

</div>
</body>
</html>