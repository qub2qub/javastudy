<!DOCTYPE html>
<html lang="en"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
	<meta charset="UTF-8">
	<title>AngularJS p1</title>
<link rel="stylesheet" href="../../Git Guide/grey.css">
</head>
<body>

<h3>
<ul>
<li>Что такое AngularJS?</li>
</ul>
</h3>

<div>
AngularJS
 - структурированный JavaScript-фреймворк с открытым исходным кодом для 
динамических web-приложений. Предназначен для разработки одностраничных 
приложений. Позволяет использовать HTML в качестве языка шаблонов, а так
 же расширять HTML-синтаксис, чтобы код вашего приложения выглядел 
кратко и лаконично. Его цель - расширение браузерных приложений на 
основе MVC шаблона, а также упрощение тестирования и разработки.</div>
<div>
<br>
</div>
<div>
<h3>
<ul>
<li>Какие преимущества использования AngularJS?</li>
</ul>
</h3>
</div>
<div>
Некоторые из преимуществ AngularJS.</div>
<div>
<div>
<ul>
<li>Декларативный стиль кода<a name="more"></a></li>
<li>Использование директив</li>
<li>MVC из коробки</li>
<li>Модульность</li>
<li>Двустороннее связывание данных</li>
<li>Простота тестирования</li>
<li>Он поддерживает анимацию</li>
<li>Наличие готовых решений</li>
</ul>
</div>
</div>
<div>
<br>
</div>
<div>
<h3>
<ul>
<li>Какие основные компоненти AngularJS ви знаете?</li>
</ul>
</h3>
</div>
<div>
Основные компоненти Angular:</div>
<div>
<ul>
<li>область видимости (scope) - связующее звено между представлением и контроллером</li>
<li>контроллер (controller) - поведение программы</li>
<li>модель (model) - данные программы</li>
<li>вид или представление (view) - то что видит пользователь</li>
<li>директивы (directives) - расширение HTML-синтаксиса</li>
<li>фильтры (filters) - форматируют данные в соответствии с региональными установками пользователя</li>
<li>ижектор (injector) - собирает приложение</li>
<li>модуль (module) - настраивает инжектор</li>
<li>$ - пространство имен Angular</li>
</ul>
</div>
<div>
<br>
</div>
<div>
<h3>
<ul>
<li>Что такое AngularJS выражения? Отличие выражений AngularJS от выражений в JS.</li>
</ul>
</h3>
</div>
<div>
Заманчиво
 думать о выражениях Angular как о JavaScript выражения, но это не 
совсем корректно, так как Angular не использует JavaScript eval() для 
вычисления выражений. Вы можете думать о выражениях Angular как о 
JavaScript выражения со следующими отличиями:</div>
<div>
<ul>
<li>Значение
 Атрибутов: значение всех свойств вычисляются в области видимости в 
отличие от JavaScript, где выражения вычисляются в глобальном window.</li>
<li>Снисхождение:
 вычисление выражений лояльно к неопределенным и нулевым значениям, в 
отличие от JavaScript, где такие вычисления выдадут исключение 
NullPointerException.</li>
<li>Последовательность действий не изменяется: в Angular нельзя использовать условные операторы, циклы и исключения.</li>
<li>Фильтры:
 можно передать результат вычисления выражений через цепочку фильтров. 
Например, чтобы преобразовать объект даты в специфичный для данного 
региона понятный человеку формат.</li>
</ul>
</div>
<div>
<br>
</div>
<div>
<h3>
<ul>
<li>Что такое $scope в AngularJS?</li>
</ul>
</h3>
</div>
<div>
$scope
 в AngularJS - ето область видимости, связующее звено между 
представлением и контроллером. Область видимости является объектом, 
относящимся к модели приложения. Это контекст выполнения выражений. 
Области расположены в иерархической структуре, имитирующей DOM-структуру
 приложения. Они могут отслеживать изменения выражений и распространять 
события.<br>
<br>
</div>
<div>
<h3>
<ul>
<li>Что такое $rootScope в AngularJS?</li>
</ul>
</h3>
</div>
<div>
$rootScope
 &nbsp;- &nbsp;это самый верхний уровень $scope - объекта, от которого 
создаются все остальные объекты области видимости. После того, как 
Angular начинает рендер приложения, фреймворк создает $rootScope - 
объект, и все дальнейшие привязки и логика вашего приложения добавляют 
новые $scope - объекты, которые являются детьми $rootScope. Как правило,
 мы не трогаем $rootScope, но мы можем пользоваться этим уровнем для 
коммуникации между разними областями данных.<br>
<br>
<h3>
<ul>
<li>Что такое директива (directive) в AngularJS? Назовите несколько основных директив.</li>
</ul>
</h3>
</div>
<div>
Директива
 - атрибут или элемент, который дополняет существующий элемент DOM или 
представляет собой многократно используемый компонент DOM - виджет.</div>
<div>
Директивы
 описывают изменение поведения или преобразование DOM модели, связанное с
 пользовательским атрибутом, именем элемента, или css классом. Директивы
 позволяют расширить HTML-синтаксис в декларативной форме.</div>
<div>
Angular
 поставляется с набором директив, полезных для создания веб-приложений, 
но может быть расширен так, чтобы превратить HTML в декларативный 
предметно-ориентированный язык (DSL).</div>
<div>
Несколько основных директив: ngApp , ngController, ngRepeat, ngModel, ngBind.<br>
<br>
</div>
<div>
<h3>
<ul>
<li>Какие есть типы использования директив в AngularJS?</li>
</ul>
</h3>
</div>
<div>
В AngularJS есть четыре типа использования директив.</div>
<div>
<ul>
<li>в качестве собственного элемента DOM: <b>&lt;my-directive&gt;&lt;/my-directive&gt;</b></li>
<li>в качестве атрибута: <b>&lt;div my-directive&gt;&lt;/div&gt;</b></li>
<li>в качестве CSS-класса: <b>&lt;div class="my-directive: value"&gt;&lt;/div&gt;</b></li>
<li>в качестве комментария: <b>&lt;!-- directive: my-directive value --&gt;</b></li>
</ul>
</div>
<div>
<h3>
<br>
<ul>
<li>Что такое сервис (service), в AngularJS?</li>
</ul>
</h3>
</div>
<div>
Сервисы
 это функции, которые раньше выполнялись только на сервере. Angular же 
перенес их на клиентскую сторону. Сервисы в Angular - приложениях 
являются замещаемыми объектами, которые взаимодействуют друг с другом с 
помощью внедрения зависимости. Сервисы это singleton-ы, выполняющие 
какую-либо конкретную задачу, которая является общей для всех или 
конкретного веб-приложения.</div>
<div>
<br>
</div>
<div>
<h3>
<ul>
<li>Что такое &nbsp;модуль (module) &nbsp;в AngularJS?</li>
</ul>
</h3>
</div>
<div>
Модуль
 - представляет хранилище различной информации: директив, фильтров, 
контроллеров и т.д. При этом одно приложение может иметь несколько 
модулей. Например, разные модули могут представлять какую-либо 
специфическую функциональность.</div>
<div>
Модули
 позволяют ассоциировать определенный участок html-страницы с 
приложением AngularJS. Модули также позволяют организовать и 
структурировать различные компоненты приложения AngularJS. Кроме того, 
модульность архитектуры приложения повышает тестируемость, и мы можем 
использовать различные части-модули приложения в других приложениях.</div>
<div>
Для
 создания модуля используется метод angular.module(). Этот метод 
принимает три параметра, два из которых являются обязательных:<br>
<ul>
<li>Название модуля. Согласно соглашениям о наименовании модуль должен иметь суффикс App</li>
<li>Набор других модулей в виде строкового массива, от которых данный модуль зависит</li>
<li>Конфигурационные настройки модуля</li>
</ul>
<div>
<br></div>
</div>
<div>
<h3>
<ul>
<li>Что такое &nbsp;фильтр (filter) &nbsp;в&nbsp;AngularJS?</li>
</ul>
</h3>
</div>
<div>
Фильтры
 в Angular форматируют данные для отображения пользователю. Например, 
имеется объект данных, который должен быть отформатирован в соответствии
 с языковыми настройками, прежде чем он будет показан пользователю. 
Можно передать выражения через цепочку фильтров.</div>
<div>
Общий способ использования фильтров: {{expression | filter}}</div>
<div>
<br>
</div>
<div>
<h3>
<ul>
<li>Что такое контролер (controller) &nbsp;в Angular?</li>
</ul>
</h3>
</div>
<div>
В
 Angular контроллер является функцией JavaScript (типа/класса), 
использующейся для расширения экземпляров областей видимости, за 
исключением корневой области.</div>
<div>
Для
 создания контроллера используется метод controller(name, constructor), 
который определен у объекта Module. Первый параметр передает имя 
контроллера, а второй - функцию, которая выполняет настройку 
контроллера. Эту функцию еще называют конструктором.</div>
<div>
<br>
</div>
<div>
<h3>
<ul>
<li>Что катое провайдер (provider) в AngularJS?</li>
</ul>
</h3>
</div>
<div>
Провайдер
 - это рецепт особого рода, позволяющий выполнить дополнительные 
настройки перед созданием экземпляров объектов. Для эффективной 
поддержки провайдеров, AngularJS разбивает жизненный цикл модуля на две 
фазы:</div>
<div>
<ul>
<li>фаза настройки: в течение этой фазы производится сбор и настройка всех рецептов;</li>
<li>фаза выполнения: в течение этой фазы выполняется любая логика после создания экземпляров.</li>
</ul>
</div>
<div>
<br>
</div>
<div>
<h3>
<ul>
<li>Что катое шаблон в AngularJS?</li>
</ul>
</h3>
</div>
<div>
Шаблон
 Angular является декларативной спецификацией, которая, наряду с 
информацией из модели и контроллером, влияет на то, что пользователь 
видит в браузере. Это статичный DOM, содержащий HTML, CSS, и специальные
 элементы и атрибуты Angular. Элементы и атрибуты заставляют Angular 
добавить поведение и преобразовать DOM-шаблон в динамический DOM.<br>
<br></div>
<div>
<h3>
<ul>
<li>Что такое &nbsp;ижектор (injector) &nbsp;в AngularJS?</li>
</ul>
</h3>
</div>
<div>
Инжектор
 - это надстройщик всех сервисов. Для каждого Angular - приложения 
существует один и только один инжектор. Инжектор позволяет находить 
экземпляры объектов по их именам. Инжектор поддерживает внутри себя кэш 
объектов, таким образом несколько вызовов поиска какого-либо объекта 
вернут один и тот же экземпляр. Если инжектор ничего не находит, он 
просит фабрику создать новый экземпляр.<br>
<br>
</div>
<div>
<h3>
<ul>
<li>Для чего нужен сервис $ location?</li>
</ul>
</h3>
</div>
<div>
Сервис
 $location разбирает URL в адресной строке браузера (по ссылке 
window.location) и делает URL доступным для приложения. Изменения в URL в
 адресной строке отражаются в сервисе $location и изменения в $location 
отражаются в адресной строке браузера.</div>
<div>
Сервис $location:</div>
<div>
<ul>
<li>Предоставляет доступ к текущему URL в адресной строке браузера, так что вы можете</li>
</ul>
</div>
<div>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; o &nbsp;Следить и наблюдать за URL.</div>
<div>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; o &nbsp;Изменять URL.</div>
<div>
<ul>
<li>Синхронизирует URL с браузером, когда пользователь</li>
</ul>
</div>
<div>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; o &nbsp;Изменяет адресную строку.</div>
<div>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; o &nbsp;Щелкает по кнопкам вперед/назад (или перемещается по истории браузера).</div>
<div>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; o &nbsp;Щелкает по ссылкам.</div>
<div>
<ul>
<li>Представляет объект URL в виде набора методов (протокол, хост, порт, путь, поиск, хэш).</li>
</ul>
</div>
<div>
<br>
</div>
<div>
<h3>
<ul>
<li>Какие CSS классы предоставляються для оформления форм?</li>
</ul>
</h3>
</div>
<div>
Для оформления форм так же, как и элементов управления, ngModel добавляется такие CSS классы:</div>
<div>
<ul>
<li>ng-valid</li>
<li>ng-invalid</li>
<li>ng-pristine</li>
<li>ng-dirty</li>
</ul>
</div>
<div>
<br>
</div>
<div>
<h3>
<ul>
<li>Что такое Компилятор, на какие фазы делятся фазы компиляции angular приложения.</li>
</ul>
</h3>
</div>
<div>
Компилятор - это angular-сервис, который сканирует DOM в поисках специальных атрибутов. Процесс компиляции делится на две фазы:</div>
<div>
<ul>
<li>Компиляция: просмотр DOM и подготовка всех директив. Результатом этой фазы является функция линковки.</li>
<li>Связывание:
 слияние директив и их областей видимости для получения динамического 
вида. Любые изменения модели в области видимости моментально 
отображаются в представлении, а любые взаимодействия пользователя с 
представлением обновляют модель. Таким образом, модель, хранящаяся в 
области видимости, становится единственным «актуальным источником» в 
приложении.</li>
</ul>
</div>
<div>
<br>
</div>
<div>
<h3>
<ul>
<li>Опишите MVC компоненты в контексте&nbsp;AngularJS?</li>
</ul>
</h3>
</div>
<div>
MVC компоненты в Angular:</div>
<div>
<ul>
<li>Model - модель, это данные из свойств области видимости; области видимости связаны с DOM.</li>
<li>View - шаблон (HTML с привязками данных) из которого генерируется представление.</li>
<li>Controller
 - директива ngController, определяющая класс контроллера; этот класс 
имеет методы и типичные выражения для отражения бизнес-логики 
приложения.</li>
</ul>
</div>
<div>
<br>
</div>
<div>
<h3>
<ul>
<li>Опишите директиву ng-app?</li>
</ul>
</h3>
</div>
<div>
Директива
 ng-app используетса для автозагрузки приложения. Даная директива может 
быть использована только один раз в одном HTML документе. Директива 
обозначает корень приложения и обычно располагается в корне страницы.</div>
<div>
<br>
</div>
<div>
<h3>
<ul>
<li>Опишите директиву ng-model?</li>
</ul>
</h3>
</div>
<div>
Директива
 ng-model указывает Angular, что необходимо двухсторонее связывание 
данных. Что всегда применяется в директивах input, select, textarea. 
Можно легко писать собственные директивы, используя в них&nbsp;ng-model.</div>
<div>
ng-model отвечает за:</div>
<div>
<ul>
<li>связывание вида с моделью при использовании с другими директивами, такими как input, textarea или select</li>
<li>реализует поведение для проверки ввода (например, required, number, email, url)</li>
<li>определяет состояние элементов управления (valid/invalid, dirty/pristine, validation errors)</li>
<li>устанавливает требуемый css-класс для элемента (ng-valid, ng-invalid, ng-dirty, ng-pristine)</li>
<li>регистрирует элемент управления в родительской директиве form</li>
</ul>
</div>
<div>
<br>
</div>
<div>
<h3>
<ul>
<li>Опишите директиву ng-bind?</li>
</ul>
</h3>
</div>
<div>
Директива
 ng-bind говорит Angular заменить содержимое специального HTML-элемента 
значением заданного выражения и обновлять его содержимое при изменении 
значения выражения.</div>
<div>
Как правило, ng-bind не используется явно, вместо этого используется выражение в двойных фигурных скобках, <b>{{ expression }}</b> которое имитирует предыдущую возможность.</div>
<div>
Однако первый сценарий предпочтительнее, т.к. использование ng-bind, в отличие от привязки с помощью <b>{{ expression }}</b>
 не выводится в браузер перед компиляцией. Так как ng-bind является 
атрибутом элемента, то он не отображается в браузере и делает привязку 
невидимой для пользователя во время загрузки.</div>
<div>
Альтернативным решением проблемы является использование директивы ng-cloak.</div>
<div>
<br>
</div>
<div>
<h3>
<ul>
<li>Опишите директиву ng-controller?</li>
</ul>
</h3>
</div>
<div>
Директива&nbsp;ng-controller&nbsp;назначает поведение области видимости. Это ключевой аспект поддержки в Angular шаблона Модель-Вид-Контроллер.</div>
<div>
<br>
</div>
<div>
<h3>
<ul>
<li>Опишите директиву ng-init?</li>
</ul>
</h3>
</div>
<div>
Директива ng-init выполняет код инициализации перед построением шаблона во время начальной инициализации приложения.</div>
<div>
<br>
</div>
<div>
<h3>
<ul>
<li>Опишите директиву &nbsp;ng-repeat?</li>
</ul>
</h3>
</div>
<div>
Директива
 ng-repeat создает экземпляры по шаблону для каждого элемента коллекции.
 Каждый экземпляр шаблона получает собственную область видимости, в 
которой создаются переменные, имеющиеся в текущем элементе коллекции и в
 $index устанавливается индекс или ключ элемента.</div>

</body></html>