<!DOCTYPE html>
<html lang="en"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
	<meta charset="UTF-8">
	<title>Design Patterns p1</title>
</head>
<body>
	
<h3>
<ul>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Что такое шаблоны проектирования?</span></li>
</ul>
</h3>

<div style="text-align: justify;">
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Шаблоны
 проектирования GoF - это многократно используемые решения широко 
распространенных проблем, возникающих при разработке программного 
обеспечения.</span><br>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"><br></span></div>
<div style="text-align: justify;">
<h3>
<ul>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Из каких элементов состоит шаблон?</span></li>
</ul>
</h3>
</div>
<div style="text-align: justify;">
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">В общем случае шаблон состоит из четырех основных элементов:</span></div>
<div style="text-align: justify;">
<ol>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">имя.
 Точное имя предоставляет возможность сразу понять проблему и определить
 решение. Уровень абстракции при проектировании повышается;</span></li>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">задача. Область применения в рамках решения конкретной проблемы;<a name="more"></a></span></li>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">решение. Абстрактное описание элементов дизайна задачи проектирования и способа ее решения с помощью обобщенного набора классов;</span></li>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">результаты.</span></li>
</ol>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"><br></span></div>
<div style="text-align: justify;">
<h3>
<div>
<ul>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Какие есть типы шаблонов?</span></li>
</ul>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"></span></div>
</h3>
</div>
<div style="text-align: justify;">
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Выделяются порождающие шаблоны, структурные шаблоны и шаблоны поведения а также антышаблоны.</span><br>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"><br></span></div>
<div style="text-align: justify;">
<h3>
<ul>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Назовите порождающие шаблоны, и кратко опишите их.</span></li>
</ul>
</h3>
</div>
<div style="text-align: justify;">
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Порождающие
 шаблоны предназначаются для организации процесса создания объектов и 
все до единого соответствуют шаблону Creator из GRASP.</span></div>
<div style="text-align: justify;">
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">К порождающим шаблонам относятся:</span></div>
<div style="text-align: justify;">
<ul>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Abstract
 Factory (Абстрактная Фабрика) - предоставляет интерфейс для создания 
связанных между собой объектов семейств классов без указания их 
конкретных реализаций (families of product objects);</span></li>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Factory
 Method (Фабричный метод) - определяет интерфейс для создания объектов 
из иерархического семейства классов на основе передаваемых данных 
(subclass of object that is instantiated);</span></li>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Builder (Строитель) - создает объект конкретного класса различными способами (how a composite object gets created);</span></li>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Singleton
 (Одиночка) - гарантирует существование только одного или конечного 
числа экземпляров класса (the sole instance of a class);</span></li>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Prototype
 (Прототип) - применяется при создании сложных объектов. На основе 
прототипа объекты сохраняются и воссоздаются, например, путем 
копирования (class of object that is instantiated).</span></li>
</ul>
</div>
<div style="text-align: justify;">
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"><br></span></div>
<div style="text-align: justify;">
<h3>
<ul>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Назовите шаблоны поведения, и кратко опишите их.</span></li>
</ul>
</h3>
</div>
<div style="text-align: justify;">
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Шаблоны поведения GoF характеризуют способы взаимодействия классов или объектов между собой.</span></div>
<div style="text-align: justify;">
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">К шаблонам поведения относятся:</span></div>
<div style="text-align: justify;">
<ul>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Chain
 of Responsibility (Цепочка Обязанностей) - организует независимую от 
объекта-отправителя цепочку не знающих возможностей друг друга 
объектов-получателей, которые передают запрос друг другу (object that 
can fulfill a request);</span></li>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Command
 (Команда) - используется для определения по некоторому признаку объекта
 конкретного класса, которому будет передан запрос для обработки (when 
and how a request is fulfilled);</span></li>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Iterator
 (Итератор) - позволяет последовательно обойти все элементы коллекции 
или другого составного объекта, не зная деталей внутреннего 
представления данных (how an aggregate’s elements are accessed, 
traversed);</span></li>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Mediator
 (Посредник) - позволяет снизить число связей между классами при большом
 их количестве, выделяя один класс, знающий все о методах других классов
 (how and which objects interact with each other);</span></li>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Memento
 (Хранитель) - сохраняет текущее состояние объекта для дальнейшего 
восстановления (what private information is stored outside an object, 
and when);</span></li>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Observer
 (Наблюдатель) - позволяет при зависимости между объектами типа «один ко
 многим» отслеживать изменения объекта (number of objects that depend on
 another object; how the dependent objects stay up to date);</span></li>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">State
 (Состояние) - позволяет объекту изменять свое поведение за счет 
изменения внутреннего объекта состояния (states of an object);</span></li>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Strategy
 (Стратегия) - задает набор алгоритмов с возможностью выбора одного из 
классов для выполнения конкретной задачи во время создания объекта (an 
algorithm);</span></li>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Template
 Method (Шаблонный Метод) - создает родительский класс, использующий 
несколько методов, реализация которых возложена на производные классы 
(steps of an algorithm);</span></li>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Visitor
 (Посетитель) - представляет операцию в одном или нескольких связанных 
классах некоторой структуры, которую вызывает специфичный для каждого 
такого класса метод в другом классе (operations that can be applied to 
object(s) without changing their class(es));</span></li>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Interpreter
 (Интерпретатор) - для определенного способа представления информации 
определяет правила (grammar and interpretation of a language).</span></li>
</ul>
</div>
<div style="text-align: justify;">
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"><br></span></div>
<div style="text-align: justify;">
<h3>
<ul>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Назовите структурные шаблоны, и кратко опишите их.</span></li>
</ul>
</h3>
</div>
<div style="text-align: justify;">
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Структурные
 шаблоны GoF отвечают за композицию объектов и классов, и не только за 
объединение частей приложения, но и за их разделение.</span></div>
<div style="text-align: justify;">
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">К структурным шаблонам относятся:</span></div>
<div style="text-align: justify;">
<ul>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Adapter
 (Адаптер) - применяется при необходимости использовать классы вместе с 
несвязанными интерфейсами. Поведение адаптируемого класса при этом 
изменяется на необходимое (interface to an object);</span></li>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Bridge
 (Мост) - разделяет представление класса и его реализацию, позволяя 
независимо изменять то и другое (implementation of an object);</span></li>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Composite
 (Компоновщик) - группирует объекты в иерархические древовидные 
структуры и позволяет работать с единичным объектом так же, как с 
группой объектов (structure and composition of an object);</span></li>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Decorator
 (Декоратор) - представляет способ изменения поведения объекта без 
создания подклассов. Позволяет использовать поведение одного объекта в 
другом (responsibilities of an object without subclassing);</span></li>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Facade
 (Фасад) - создает класс с общим интерфейсом высокого уровня к 
некоторому числу интерфейсов в подсистеме (interface to a subsystem);</span></li>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Flyweight
 (Легковес) - разделяет свойства класса для оптимальной поддержки 
большого числа мелких объектов (storage costs of objects);</span></li>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Proxy
 (Заместитель) - подменяет сложный объект более простым и осуществляет 
контроль доступа к нему (how an object is accessed... its location).</span></li>
</ul>
</div>
<div style="text-align: justify;">
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"><br></span></div>
<div style="text-align: justify;">
<h3>
<ul>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Какие антишаблоны вы знаете?</span></li>
</ul>
</h3>
</div>
<div style="text-align: justify;">
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Некоторые антишаблоны:</span><br>
<ul>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Big
 ball of mud (Большой Ком Грязи) - термин для системы или просто 
программы, которая не имеет хоть немного различимой архитектуры. Как 
правило, включает в себя более одного антишаблона. Этим страдают 
системы, разработанные людьми без подготовки в области архитектуры ПО.</span></li>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Yo-Yo
 problem (Проблема Йо-Йо) - возникает, когда необходимо разобраться в 
программе, иерархия наследования и вложенность вызовов методов которой 
очень длинны и сложны. Программисту вследствие этого необходимо 
лавировать между множеством различных классов и методов, чтобы 
контролировать поведение программы. Термин происходит от названия 
игрушки йо-йо.</span></li>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Magic Button - возникает, когда код обработки формы сконцентрирован в одном месте и, естественно, никак не структурирован.</span></li>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Magic
 Number - наличие в коде многократно повторяющихся одинаковых чисел или 
чисел, объяснение происхождения которых отсутствует.</span></li>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">&nbsp;Gas Factory (Газовый Завод) - необязательный сложный дизайн для простой задачи.</span></li>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Analiys
 paralisys. В разработке ПО (Паралич анализа) - проявляет себя через 
чрезвычайно длинные фазы планирования проекта, сбора необходимых для 
этого артефактов, программного моделирования и дизайна, которые не имеют
 особого смысла для достижения итоговой цели.</span></li>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Interface
 Bloat (Распухший Интерфейс) - термин, используемый для описания 
интерфейсов, которые пытаются вместить в себя все возможные операции над
 данными.</span></li>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Accidental
 complexity (Случайная сложность) - проблема в программировании, которой
 легко можно было избежать. Возникает вследствие неправильного понимания
 проблемы или неэффективного планирования.</span></li>
</ul>
</div>
<div style="text-align: justify;">
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">И другие...</span><br>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"><br></span>
<h3>
<ul>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Что такое OOAD?</span></li>
</ul>
</h3>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">OOAD,
 Object Oriented Analysis and Design (Объектно-ориентированный анализ и 
проектирование) - дисциплина, описывающая способы (варианты) задания 
(определения) объектов и их взаимодействие для решения проблемы, которая
 определена и описана в ходе объектно-ориентированного анализа.</span><br>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Основная
 идея объектно-ориентированного анализа и проектирования 
(object-oriented analysis and design) состоит в рассмотрении предметной 
области и логического решения задачи с точки зрения объектов (понятий и 
сущностей). В процессе объектно-ориентированного анализа основное 
внимание уделяется определению и описанию объектов (или понятий) в 
терминах предметной области. В процессе объектно-ориентированного 
проектирования определяются логические программные объекты, которые 
будут реализованы средствами объектно-ориентированного языка 
программирования. Эти программные объекты включают в себя атрибуты и 
методы. И, наконец, в процессе конструирования (construction) или 
объектно-ориентированного программирования (object-oriented programming)
 обеспечивается реализация разработанных компонентов и классов.</span><br>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"><br></span>
<h3>
<ul>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Что такое OOD?</span></li>
</ul>
</h3>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">OOD,
 Object Oriented Design (Объектно-ориентированное проектирование) - это 
методология проектирования, соединяющая в себе процесс объектной 
декомпозиции и приемы представления логической и физической, а также 
статической и динамической моделей проектируемой системы.</span><br>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"><br></span>
<h3>
<ul>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Что такое OOA?</span></li>
</ul>
</h3>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">OOA,
 Object &nbsp;Oriented Analysis (Объектно-ориентированный анализ) - это 
методология, при которой требования к системе воспринимаются с точки 
зрения классов и объектов, выявленных в предметной области, это 
методология проектирования, соединяющая в себе процесс объектной 
декомпозиции и приемы представления логической и физической, а также 
статической и динамической моделей проектируемой системы.</span><br>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"><br></span>
<h3>
<ul>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Что такое DRY principles?</span></li>
</ul>
</h3>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">DRY,
 Don’t repeat yourself (не повторяй себя) - этот принцип настолько 
важен, что не требует повторения! Это принцип разработки программного 
обеспечения, нацеленный на снижение повторения информации различного 
рода, особенно в системах со множеством слоёв абстрагирования, простими 
словами НЕ пишите повторяющегося кода, используйте принцип абстракции, 
обобщая простые вещи в одном месте.</span><br>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"><br></span>
<h3>
<ul>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Что такое KISS?</span></li>
</ul>
</h3>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">KISS,
 Keep it short and simple или Keep it simple, stupid (делайте вещи 
проще) - &nbsp;это принцип проектирования и программирования, 
запрещающий использование более сложных средств, чем необходимо. Принцип
 декларирует простоту системы в качестве основной цели и/или ценности.</span><br>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"><br></span>
<h3>
<ul>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Что такое YAGNI?</span></li>
</ul>
</h3>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">YAGNI,
 You ain't gonna need it (Вам это не понадобится) - процесс и принцип 
проектирования ПО, при котором в качестве основной цели и/или ценности 
декларируется отказ от избыточной функциональности. Суть в том, чтобы 
реализовать только поставленные задачи и отказаться от избыточного 
функционала.</span><br>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"><br></span>
<h3>
<ul>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Что такое Yoda conditions?</span></li>
</ul>
</h3>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Yoda
 conditions (Условия Йоды в жаргоне программистов) - "безопасный" стиль 
записи выражений сравнения при программировании на языках с 
Си-синтаксисом, заключающийся в написании константного члена выражения 
(константы или вызова функции) слева от оператора сравнения (то есть 5 
== a вместо привычного а == 5).</span><br>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Такой
 стиль призван предотвратить свойственную данным языкам ошибку - 
использование оператора присваивания "=" вместо сравнения "==". 
Ошибочное использование присваивания превращает нотацию Йоды в попытку 
изменить константу, вызывая ошибку на этапе компиляции, что исключает 
возможность появления в готовой программе ошибок данного вида, а также 
облегчает их поиск и исправление в новом коде.</span><br>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"><br></span>
<h3>
<ul>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Что такое CRC cards?</span></li>
</ul>
</h3>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">CRC
 cards, Class-responsibility-collaboration card 
(Класс-Ответственность-Кооперация) - метод мозгового штурма, 
предназначенный для проектирования объектно-ориентированного 
программного обеспечения. Как правило, CRC-карты используются в тех 
случаях, когда сначала в процессе проектирования ПО определяются классы и
 способы их взаимодействий.</span><br>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">CRC-карты
 акцентируют внимание дизайнера на сущности класса и скрывают от него 
детали, рассмотрение которых на данном этапе будет контрпродуктивным. 
CRC-карты также заставляют дизайнера воздержаться от назначения классу 
слишком многих обязанностей.</span><br>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"><br></span>
<h3>
<ul>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Что такое SOLID?</span></li>
</ul>
</h3>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">SOLID,
 (single responsibility, open-closed, Liskov substitution, interface 
segregation и dependency inversion) - &nbsp;акроним для первых пяти 
принципов, которые означали пять основных принципов 
объектно-ориентированного программирования и проектирования. Эти 
принципы, когда применяются вместе, предназначены для повышения 
вероятности того, что программист создаст систему, которую будет легко 
поддерживать и расширять в течение долгого времени. Принципы SOLID - это
 руководства, которые могут применяться во время работы над программным 
обеспечением для удаления "кода с запашком" предписывая программисту 
выполнять рефакторинг исходного кода, пока тот не станет разборчиво 
написанным и расширяемым. Это часть общей стратегии гибкой и адаптивной 
разработки.</span><br>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"><br></span>
<h3>
<ul>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Что такое Single responsibility principle?</span></li>
</ul>
</h3>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Single
 responsibility principle - принцип единственной обязанности (на каждый 
класс должна быть возложена одна-единственная обязанность). Если один 
класс java реализует 2 набора функций, их сцепление создает ситуацию, 
при которой изменение одного нарушит имеющееся сочетание.</span><br>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"><br></span>
<h3>
<ul>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Что такое Open/closed principle?</span></li>
</ul>
</h3>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Open/closed
 principle - принцип объектно-ориентированного программирования, 
устанавливающий следующее положение: "программные сущности (классы, 
модули, функции и т. п.) должны быть открыты для расширения, но закрыты 
для изменения"; это означает, что такие сущности могут позволять менять 
свое поведение без изменения их исходного кода.</span><br>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"><br></span>
<h3>
<ul>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Что такое Liskov substitution principle?</span></li>
</ul>
</h3>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Liskov
 substitution principle - принцип подстановки Барбары Лисков (функции, 
которые используют базовый тип, должны иметь возможность использовать 
подтипы базового типа, не зная об этом. Подклассы не могут замещать 
поведения базовых классов. Подтипы должны дополнять базовые типы).</span><br>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"><br></span>
<h3>
<ul>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Что такое Interface segregation principle?</span></li>
</ul>
</h3>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Interface
 segregation principle - принцип разделения интерфейса (много 
специализированных интерфейсов лучше, чем один универсальный). Иными 
словами большие, объемные интерфейсы надо разбивать на мелкие таким 
образом, чтобы клиенты маленьких интерфейсов знали только о тех методах 
которые необходимы им в работе. И чтобы при изменении метода интерфейса 
не должны меняться клиенты, которые этот метод не используют.</span><br>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"><br></span>
<h3>
<ul>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Что такое Dependency inversion principle?</span></li>
</ul>
</h3>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Dependency
 inversion principle - &nbsp;принцип инверсии зависимостей (зависимости 
внутри системы строятся на основе абстракций. Модули верхнего уровня не 
зависят от модулей нижнего уровня. Абстракции не должны зависеть от 
деталей. Детали должны зависеть от абстракций).</span><br>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"><br></span>
<h3>
<ul>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Что такое GRASP?</span></li>
</ul>
</h3>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">GRASP,
 General Responsibility Assignment Software Patterns (общие шаблоны 
распределения обязанностей) - &nbsp;шаблоны проектирования, используемые
 для решения общих задач по назначению обязанностей классам и объектам. 
Известно девять GRAPS шаблонов.</span><br>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"><br></span>
<h3>
<ul>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Кратко опишите шаблоны GRAPS.</span></li>
</ul>
</h3>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">GRASP выделяет следующие 9 принципов-шаблонов:</span><br>
<ul>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Information
 Expert (Информационные эксперт) - информационный эксперт описывает 
основополагающие принципы назначения обязанностей классам и объектам. 
Согласно описанию, информационным экспертом (объектом наделенным 
некоторыми обязанностями) является объект, обладающий максимумом 
информацией, необходимой для выполнения назначенных обязанностей.</span></li>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Creator
 (Создатель) - суть ответственности такого объекта в том, что он создает
 другие объекты. Сразу напрашивается аналогия с фабриками. Так оно и 
есть. Фабрики тоже имеют именно ответственность - Создатель.</span></li>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Controller
 (Контроллер) - отвечает за обработку входных системных событий, 
делегируя обязанности по их обработке компетентным классам. В общем 
случае, контроллер реализует один или несколько вариантов использования.
 Использование контроллеров позволяет отделить логику от представления, 
тем самым повышая возможность повторного использования кода.</span></li>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Low
 Coupling (Слабая связанность) - если объекты в приложении сильно 
связаны, то любой их изменение приводит к изменениям во всех связанных 
объектах. А это неудобно и порождает баги. Вот по-этому везде пишут, что
 необходимо, чтобы код был слабо связан и зависел только от абстракций.</span></li>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">High
 Cohesion (Высокая сцепленность) - этот принцип тесно соотносится с 
слабой связанностью, и они идут в паре, когда одно всегда приводит к 
другому, это как мера того, что мы не нарушаем single resposibility 
principle. Вернее сказать, высокая сцепленность получается в результате 
соблюдения такого принципа из SOLID, как single resposibility principle 
(SRP).</span></li>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Pure
 Fabrication (Чистая выдумка или чистое синтезирование) - &nbsp;это 
класс, не отражающий никакого реального объекта предметной области, но 
специально придуманный для усиления связности, ослабления связанности 
или увеличения степени повторного использования. Pure Fabrication 
отражает концепцию сервисов в модели Программирование от предметной 
области.</span></li>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Indirection
 (Посредник) - шаблон перенаправление реализует низкую связность между 
классами, путем назначения обязанностей по их взаимодействию 
дополнительному объекту - посреднику.</span></li>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Protected
 Variations (Сокрытие реализации или защищенные изменения) - защищает 
элементы от изменения других элементов (объектов или подсистем) с 
помощью вынесения взаимодействия в фиксированный интерфейс. Всё 
взвимодействие между элементами должно происходить через него. Поведение
 может варьироваться лишь с помощью создания другой реализации 
интерфейса.</span></li>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Polymorphism
 (Полиморфизм) - позволяет обрабатывать альтернативные варианты 
поведения на основе типа и заменять подключаемые компоненты системы. 
Обязанности распределяются для различных вариантов поведения с помощью 
полиморфных операций для этого класса. Все альтернативные реализации 
приводятся к общему интерфейсу.</span></li>
</ul>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"></span></div>
<link href="https://plus.google.com/105527202953364202368" rel="author">

<p></p>
	

</body></html>