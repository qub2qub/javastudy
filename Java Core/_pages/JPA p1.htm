<!DOCTYPE html>
<html lang="en"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
	<meta charset="UTF-8">
	<title>JPA p1</title>
</head>
<body>
	
<h3 style="text-align: justify;">
<ul>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Что такое JPA?</span></li>
</ul>
</h3>
<div style="text-align: justify;">
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">JPA
 - это технология, обеспечивающая объектно-реляционное отображение 
простых JAVA объектов и предоставляющая API для сохранения, получения и 
управления такими объектами.</span></div>
<div style="text-align: justify;">
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">JPA - это спецификация (документ, утвержденный как стандарт, описывающий все аспекты технологии), часть EJB3 спецификации.</span></div>
<div style="text-align: justify;">
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Сам
 JPA не умеет ни сохранять, ни управлять объектами, JPA только 
определяет правила игры: как что-то будет действовать. JPA также 
определяет интерфейсы, которые должны будут быть реализованы 
провайдерами. Плюс к этому JPA определяет правила о том, как должны 
описываться метаданные отображения и о том, как должны работать 
провайдеры. Дальше, каждый провайдер, реализуя JPA определяет получение,
 сохранение и управление объектами. У каждого провайдера реализация 
разная.</span></div>
<div style="text-align: justify;">
</div>
<ul>
<li style="text-align: justify;"><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Реализации JPA:</span></li>
<li style="text-align: justify;"><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Hibernate<a name="more"></a></span></li>
<li style="text-align: justify;"><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Oracle TopLink</span></li>
<li style="text-align: justify;"><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Apache OpenJPA</span></li>
</ul>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"><br></span>
<h3 style="text-align: justify;">
<ul>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Из чего состоит JPA?</span></li>
</ul>
</h3>
<div style="text-align: justify;">
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">JPA состоит из трех основных пунктов:</span></div>
<div style="text-align: justify;">
<ul>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">API - интерфейсы в пакете javax.persistance. Набор интерфейсов, которые позволяют организовать взаимодействие с ORM провайдером.</span></li>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">JPQL - объектный язык запросов. Очень похож на SQL, но запросы выполняются к объектам.</span></li>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Metadata
 - аннотации над объектами. Набор аннотаций, которыми мы описываем 
метаданные отображения. Тогда уже JPA знает какой объект в какую таблицу
 нужно сохранить. Метаданные можно описывать двумя способами: XML-файлом
 или через аннотации.</span></li>
</ul>
<span style="font-family: arial, helvetica, sans-serif;"><br></span></div>
<div style="margin: 0px;">
<div>
<h3>
<ul>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">В чем её отличие JPA от Hibernate?</span></li>
</ul>
</h3>
<div style="text-align: justify;">
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Hibernate
 одна из самых популярных открытых реализаций последней версии 
спецификации (JPA 2.1). То есть JPA только описывает правила и API, а 
Hibernate реализует эти описания, впрочем у Hibernate (как и у многих 
других реализаций JPA) есть дополнительные возможности, не описанные в 
JPA (и не переносимые на другие реализации JPA).</span><br>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"><br></span></div>
<h3 style="text-align: justify;">
<ul>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">В чем её отличие JPA от JDO?</span></li>
</ul>
</h3>
<div style="text-align: justify;">
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">JPA
 (Java Persistence API) и Java Data Objects (JDO) две спецификации 
сохранения java объектов в базах данных. Если JPA сконцентрирована 
только на реляционных базах, то JDO более общая спецификация которая 
описывает ORM для любых возможных баз и хранилищ. Также отличаются 
"разработчики" спецификаций - если JPA разрабатывается как JSR, то JDO 
сначала разрабатывался как JSR, теперь разрабатывается как проект Apache
 JDO.</span></div>
<div style="text-align: justify;">
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"></span><br></div>
<h3 style="text-align: justify;">
<ul>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Можно ли использовать JPA c noSQL базами?</span></li>
</ul>
</h3>
<div style="text-align: justify;">
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Спецификация
 JPA говорит только о отображении java объектов в таблицы реляционных 
баз данных, но при этом существует ряд реализаций данного стандарта для 
noSql баз данных: Kundera, DataNucleus, ObjectDB и ряд других. 
Естественно, при это не все специфичные для реляционных баз данных 
особенности спецификации переносятся при этом на nosql базы полностью.</span><br>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"><br></span>
<h3>
<ul>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Что такое JPQL (Java Persistence query language) и чем он отличается от SQL?</span></li>
</ul>
</h3>
</div>
<div style="text-align: justify;">
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">JPQL
 (Java Persistence query language) это язык запросов, практически такой 
же как SQL, однако вместо имен и колонок таблиц базы данных, он 
использует имена классов Entity и их атрибуты. В качестве параметров 
запросов так же используются типы данных атрибутов Entity, а не полей 
баз данных. В отличии от SQL в JPQL есть автоматический полиморфизм. 
Также в JPQL используется функции которых нет в SQL: такие как KEY (ключ
 Map’ы), VALUE (значение Map’ы), TREAT (для приведение суперкласса к его
 объекту-наследнику, downcasting), ENTRY и т.п.</span><br>
<div>
<br></div>
<h3>
<ul>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Что означает полиморфизм (polymorphism) в запросах JPQL (Java Persistence query language) и как его "выключить"?</span></li>
</ul>
</h3>
</div>
<div style="text-align: justify;">
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">В
 отличии от SQL в запросах JPQL есть автоматический полиморфизм, то есть
 каждый запрос к Entity возвращает не только объекты этого Entity, но 
так же объекты всех его классов-потомков, независимо от стратегии 
наследования (например, запрос select * from Animal, вернет не только 
объекты Animal, но и объекты классов Cat и Dog, которые унаследованы от 
Animal). Чтобы исключить такое поведение используется функция TYPE в 
where условии (например select * from Animal a where TYPE(a) IN (Animal,
 Cat) уже не вернет объекты класса Dog).</span><br>
<div>
<br></div>
<h3>
<ul>
<li><b style="font-family: arial, helvetica, sans-serif;">Что такое Criteria API и для чего он используется?</b></li>
</ul>
</h3>
</div>
<div style="text-align: justify;">
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Criteria
 API это тоже язык запросов, аналогичным JPQL (Java Persistence query 
language), однако запросы основаны на методах и объектах, то есть 
запросы выглядят так:</span></div>
</div>
<div class="separator" style="clear: both; text-align: center;">
<a href="https://3.bp.blogspot.com/-HLFfj8qlqwE/Vvv8RVqXM-I/AAAAAAAAAeY/Qogvb2_Ie0o2NfFJCU5NVE7W4eYjYXloQ/s1600/JPQL.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img src="JPA%20p1_files/JPQL.jpg" height="84" border="0" width="640"></a></div>
<div class="separator" style="clear: both; text-align: justify;">
<br></div>
<div style="font-family: 'times new roman'; text-align: justify;">
<h3>
<ul>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Что такое Entity?</span></li>
</ul>
</h3>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Entity
 это легковесный хранимый объект бизнес логики (persistent domain 
object). Основная программная сущность это entity класс, который так же 
может использовать дополнительные классы, который могут использоваться 
как вспомогательные классы или для сохранения состояния еntity.</span><br>
<div>
<br></div>
<h3>
<ul>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Может ли не Entity класс наследоваться от Entity класса?</span></li>
</ul>
</h3>
</div>
</div>
<div style="text-align: justify;">
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Может.</span><br>
<div>
<br></div>
<h3>
<ul>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Может ли Entity класс наследоваться от других Entity классов?</span></li>
</ul>
</h3>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Может.</span><br>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"><br></span>
<h3>
<ul>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Может ли Entity быть абстрактным классом?</span></li>
</ul>
</h3>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Может, при этом он сохраняет все свойства Entity, за исключением того что его нельзя непосредственно инициализировать.</span><br>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"><br></span>
<h3>
<ul>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Может ли Entity класс наследоваться от не Entity классов (non-entity classes)?</span></li>
</ul>
</h3>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Может.</span><br>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"><br></span></div>
<div style="text-align: justify;">
<h3>
<ul>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Какие требования JPA к Entity классам вы можете перечислить (не менее шести требований)?</span></li>
</ul>
</h3>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">1.&nbsp;Entity класс должен быть отмечен аннотацией Entity или описан в XML файле конфигурации JPA.</span><br>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">2.&nbsp;Entity
 класс должен содержать public или protected конструктор без аргументов 
(он также может иметь конструкторы с аргументами).</span><br>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">3.&nbsp;Entity класс должен быть классом верхнего уровня (top-level class).</span><br>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">4.&nbsp;Entity класс не может быть enum или интерфейсом.</span><br>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">5.&nbsp;Entity класс не может быть финальным классом (final class).</span><br>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">6.&nbsp;Entity
 класс не может содержать финальные поля или методы, если они участвуют в
 маппинге (persistent final methods or persistent final instance 
variables).</span><br>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">7.&nbsp;Если
 объект Entity класса будет передаваться по значению как отдельный 
объект (detached object), например через удаленный интерфейс (through a 
remote interface), он так же должен реализовывать Serializable 
интерфейс.</span><br>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">8.&nbsp;Поля
 Entity класс должны быть напрямую доступны только методам самого Entity
 класса и не должны быть напрямую доступны другим классам, использующим 
этот Entity. Такие классы должны обращаться только к методам 
(getter/setter методам или другим методам бизнес-логики в Entity 
классе).</span><br>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">9.&nbsp;Enity
 класс должен содержать первичный ключ, то есть атрибут или группу 
атрибутов которые уникально определяют запись этого Enity класса в базе 
данных.</span><br>
<div>
<br></div>
</div>
<div style="text-align: justify;">
<h3>
<ul>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Что такое атрибут Entity класса в терминологии JPA?</span></li>
</ul>
</h3>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">JPA
 указывает что она может работать как с свойствами классов (property), 
оформленные в стиле JavaBeans, либо с полями (field), то есть 
переменными класса (instance variables). Оба типа элементов Entity 
класса называются атрибутами Entity класса.</span><br>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"></span><br>
<h3>
<ul>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Какие
 два типа элементов есть у Entity классов. Или другими словами 
перечислите два типа доступа (access) к элементам Entity классов.</span></li>
</ul>
</h3>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">JPA
 указывает что она может работать как с свойствами классов (property), 
оформленные в стиле JavaBeans, либо с полями (field), то есть 
переменными класса (instance variables). Соответственно, при этом тип 
доступа будет либо property access или field access.</span></div>
<div style="text-align: justify;">
<br>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"></span></div>
<div style="text-align: justify;">
<h3>
<ul>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Какие типы данных допустимы в атрибутах Entity класса (полях или свойствах)?</span></li>
</ul>
</h3>
</div>
<div style="text-align: justify;">
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Допустимые типы атрибутов у Entity классов:</span></div>
<div style="text-align: justify;">
<ol>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">примитивные типы и их обертки Java,</span></li>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">строки,</span></li>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">любые сериализуемые типы Java (реализующие Serializable интерфейс),</span></li>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">enums;</span></li>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">entity types;</span></li>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">embeddable классы</span></li>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">и коллекции типов 1-6</span></li>
</ol>
<span style="font-family: arial, helvetica, sans-serif;"><br></span></div>
<div style="text-align: justify;">
<h3>
<ul>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Какие
 типы данных можно использовать в атрибутах, входящих в первичный ключ 
Entity класса (составной или простой), чтобы полученный первичный ключ 
мог использоваться для любой базы данных? А в случае автогенерируемого 
первичного ключа (generated primary keys)?</span></li>
</ul>
</h3>
</div>
<div style="text-align: justify;">
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Допустимые типы атрибутов, входящих в первичный ключ:</span></div>
<div style="text-align: justify;">
<ol>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">примитивные типы и их обертки Java,</span></li>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">строки,</span></li>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">BigDecimal и BigInteger,</span></li>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">java.util.Date и java.sql.Date,В случае автогенерируемого первичного ключа (generated primary keys) допустимы&nbsp;</span><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">только
 числовые типы,В случае использования других типов данных в первичном 
ключе, он может работать только для некоторых баз данных, т.е. 
становится не переносимым (not portable).</span></li>
</ol>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"><br></span></div>
<div style="text-align: justify;">
<h3>
<ul>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Что такое встраиваемый (Embeddable) класс?</span></li>
</ul>
</h3>
</div>
<div style="text-align: justify;">
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Встраиваемый
 (Embeddable) класс это класс который не используется сам по себе, 
только как часть одного или нескольких Entity классов. Entity класс 
могут содержать как одиночные встраиваемые классы, так и коллекции таких
 классов. Также такие классы могут быть использованы как ключи или 
значения map. Во время выполнения каждый встраиваемый класс принадлежит 
только одному объекту Entity класса и не может быть использован для 
передачи данных между объектами Entity классов (то есть такой класс не 
является общей структурой данных для разных объектов). В целом, такой 
класс служит для того чтобы выносить определение общих атрибутов для 
нескольких Entity, можно считать что JPA просто встраивает в Entity 
вместо объекта такого класса те атрибуты, которые он содержит.</span><br>
<br>
<h3>
<ul>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Может ли встраиваемый (Embeddable) класс содержать другой встраиваемый (Embeddable) класс?</span></li>
</ul>
</h3>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Да, может.</span><br>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"></span><br>
<h3>
<ul>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Может
 ли встраиваемый (Embeddable) класс содержать связи (relationship) с 
другими Entity или коллекциями Entity? Если может, то существуют ли 
какие-то ограничение на такие связи (relationship)?</span></li>
</ul>
</h3>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Может, но только в случае если такой класс не используется как первичный ключ или ключ map’ы.</span><br>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"><br></span>
<h3>
<ul>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Какие требования JPA устанавливает к встраиваемым (Embeddable) классам?</span></li>
</ul>
</h3>
</div>
<div style="text-align: justify;">
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">1.
 Такие классы должны удовлетворять тем же правилам что Entity классы, за
 исключением того что они не обязаны содержать первичный ключ и быть 
отмечены аннотацией Entity</span></div>
<div style="text-align: justify;">
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">2. Embeddable класс должен быть отмечен аннотацией Embeddable или описан в XML файле конфигурации JPA.</span><br>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"><br></span>
<h3>
<ul>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Какие
 типы связей (relationship) между Entity вы знаете (перечислите восемь 
типов, либо укажите четыре типа связей, каждую из которых можно 
разделить ещё на два вида)?</span></li>
</ul>
</h3>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Существуют следующие четыре типа связей</span></div>
<div style="text-align: justify;">
<ul>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">OneToOne (связь один к одному, то есть один объект Entity может связан не больше чем с один объектом другого Entity ),</span></li>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">OneToMany (связь один ко многим, один объект Entity может быть связан с целой коллекцией других Entity),</span></li>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">ManyToOne (связь многие к одному, обратная связь для OneToMany),</span></li>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">ManyToMany (связь многие ко многим).</span></li>
</ul>
</div>
<div style="text-align: justify;">
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Каждую из которых можно разделить ещё на два вида:</span></div>
<div style="text-align: justify;">
<ul>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Bidirectional
 - ссылка на связь устанавливается у всех Entity, то есть в случае 
OneToOne A-B в Entity A есть ссылка на Entity B, в Entity B есть ссылка 
на Entity A, Entity A считается владельцем этой связи (это важно для 
случаев каскадного удаления данных, тогда при удалении A также будет 
удалено B, но не наоборот).</span></li>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Undirectional
 - ссылка на связь устанавливается только с одной стороны, то есть в 
случае OneToOne A-B только у Entity A будет ссылка на Entity B, у Entity
 B ссылки на A не будет.</span></li>
</ul>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"><br></span>
<ul>
</ul>
</div>
<div style="text-align: justify;">
<h3>
<ul>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Что такое Mapped Superclass?</span></li>
</ul>
</h3>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Mapped
 Superclass это класс от которого наследуются Entity, он может содержать
 аннотации JPA, однако сам такой класс не является Entity, ему не 
обязательно выполнять все требования установленные для Entity (например,
 он может не содержать первичного ключа). Такой класс не может 
использоваться в операциях EntityManager или Query. Такой класс должен 
быть отмечен аннотацией MappedSuperclass или соответственно описан в xml
 файле.</span><br>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"></span><br>
<h3>
<ul>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Какие два типа fetch стратегии в JPA вы знаете?</span></li>
</ul>
</h3>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">В JPA описаны два типа fetch стратегии:</span></div>
<div style="text-align: justify;">
<ul>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">LAZY - данные поля будут загружены только во время первого доступа к этому полю,</span></li>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">EA</span><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">GER - данные поля будут загружены немедленно.</span></li>
</ul>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"><br></span></div>
<div style="text-align: justify;">
<h3>
<ul>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Какие три типы стратегии наследования мапинга (Inheritance Mapping Strategies) описаны в JPA?</span></li>
</ul>
</h3>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">В
 JPA описаны три стратегии наследования мапинга (Inheritance Mapping 
Strategies), то есть как JPA будет работать с классами-наследниками 
Entity:</span></div>
<div style="text-align: justify;">
<ul>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">одна
 таблица на всю иерархию наследования (a single table per class 
hierarchy) - все enity, со всеми наследниками записываются в одну 
таблицу, для идентификации типа entity определяется специальная колонка 
"discriminator column". Например, если есть entity Animals c 
классами-потомками Cats и Dogs, при такой стратегии все entity 
записываются в таблицу Animals, но при это имеют дополнительную колонку 
animalType в которую соответственно пишется значение "cat" или 
"dog".Минусом является то что в общей таблице, будут созданы все поля 
уникальные для каждого из классов-потомков, которые будет пусты для всех
 других классов-потомков. Например, в таблице animals окажется и 
скорость лазанья по дереву от cats и может ли пес приносить тапки от 
dogs, которые будут всегда иметь null для dog и cat соответственно.</span></li>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">объединяющая
 стратегия (joined subclass strategy) - в этой стратегии каждый класс 
enity сохраняет данные в свою таблицу, но только уникальные колонки (не 
унаследованные от классов-предков) и первичный ключ, а все 
унаследованные колонки записываются в таблицы класса-предка, 
дополнительно устанавливается связь (relationships) между этими 
таблицами, например в случае классов Animals (см.выше), будут три 
таблицы animals, cats, dogs, причем в cats будет записана только ключ и 
скорость лазанья, в dogs - ключ и умеет ли пес приносить палку, а в 
animals все остальные данные cats и dogs c ссылкой на соответствующие 
таблицы. Минусом тут являются потери производительности от объединения 
таблиц (join) для любых операций.</span></li>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">одна
 таблица для каждого класса (table per concrete class strategy) - тут 
все просто каждый отдельный класс-наследник имеет свою таблицу, т.е. для
 cats и dogs все данные будут записываться просто в таблицы cats и dogs 
как если бы они вообще не имели общего суперкласса. Минусом является 
плохая поддержка полиморфизма (polymorphic relationships) и то что для 
выборки всех классов иерархии потребуются больш</span><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">ое количество отдельных sql запросов или использование UNION запроса.</span></li>
</ul>
<span style="font-family: arial, helvetica, sans-serif;"><br></span><ul>
</ul>
</div>

<div style="text-align: justify;">
<h3>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"><a href="https://jsehelper.blogspot.nl/2016/04/java-persistence-api-jpa-2.html">Java Persistence API (JPA) (часть 2).</a></span></h3>
</div>
<link href="https://plus.google.com/105527202953364202368" rel="author">
<p></p>
	

</body></html>