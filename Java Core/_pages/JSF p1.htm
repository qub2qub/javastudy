<!DOCTYPE html>
<html lang="en"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
	<meta charset="UTF-8">
	<title>JSF p1</title>
<link rel="stylesheet" href="../../Guides/grey.css">
</head>
<body>

<h3>
<ul>
<li>Что такое JSF?</li>
</ul>
</h3>

<div>
JavaServer
 Faces (JSF) - это фреймворк для веб-приложений, написанный на Java. Он 
служит для того, чтобы облегчать разработку пользовательских интерфейсов
 для Java EE-приложений. В отличие от прочих MVC-фреймворков, которые 
управляются запросами, подход JSF основывается на использовании 
компонентов. Состояние компонентов пользовательского интерфейса 
сохраняется, когда пользователь запрашивает новую страницу и затем 
восстанавливается, если запрос повторяется.</div>
<div>
JavaServer
 Faces включает набор API для представления компонент пользовательского 
интерфейса (UI) и управления их состоянием, обработкой событий и 
валидацией вводимой информации, определения навигации, а также поддержку
 интернационализации (i18n) и доступности (accessibility). В JSF 2.0 в 
качестве обработчика представления используется технология Facelets 
которая пришла на замену JSP.<br>
<br></div>
<div>
</div>
<div>
<h3>
<ul>
<li><b style="font-family: arial, helvetica, sans-serif;">Что такое Managed Bean?<a name="more"></a></b></li>
</ul>
</h3>
</div>
<div>
В
 технологии JSF управляемые бины применяются для сохранения состояния 
web-страниц. Создание бинов и манипулирование ими осуществляются под 
управлением реализации JSF, которая выполняет следующее:</div>
<div>
<ul>
<li>Создание
 и уничтожение бинов по мере необходимости (этим объясняется 
происхождение термина "управляемые бины"). Для создания можно 
использовать аннотацию @ManagedBean.</li>
<li>Считывание свойств бина при отображении web-страницы</li>
<li>Задание свойств бина при отправке формы</li>
</ul>
<br></div>
<div>
<h3>
<ul>
<li>Каковы три типа тегов для текстовых полей существуют в JSF?</li>
</ul>
</h3>
</div>
<div>
&lt;h:inputText&gt; - стандартное текстовое поле для ввода данных.</div>
<div>
&lt;h:inputSecret&gt; - вводимые данные скрываются (например точками).</div>
<div>
&lt;h:inputTextarea&gt; - используется для возможности ввода больших объемов текстовой информации.<br>
<br></div>
<div>
<h3>
<ul>
<li>Что означает аннотация @ManagedProperty?</li>
</ul>
</h3>
</div>
<div>
Аннотация @ManagedProperty позволяет внедрять один управляемый бин в другой.</div>
<div class="separator" style="clear: both; text-align: center;">
<a href="https://1.bp.blogspot.com/-rj9alHreWiE/VtxiAnzQZuI/AAAAAAAAAU4/l598Z3H0dqc/s1600/ManagedProperty.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img src="JSF%20p1_files/ManagedProperty.jpg" border="0"></a></div>
<br>
<div>
</div>
<div>
<h3>
<ul>
<li>На что указывает аннотация @ApplicationScoped?</li>
</ul>
</h3>
</div>
<div>
Аннотация @ApplicationScoped указывает на то, что управляемый бин будет доступен на протяжении времени жизни приложения.<br>
<br></div>
<div>
<h3>
<ul>
<li>Что такое связывание ресурсов в JSF?</li>
</ul>
</h3>
</div>
<div>
Сохранение
 UI labels, дат, сообщений и другой текстовой информации графических 
компонентов в различных properties файлах называется связыванием 
ресурсов. Типичным примером может служить локализация приложения, когда в
 нескольких файлах resuorcebundle.properties находятся варианты записи 
лейблов для нескольких языков. Это позволяет не хардкодить информацию на
 представлениях, а иметь возможность динамического связывания 
представления и кода в управляемом бине или файле свойств.</div>
<div class="separator" style="clear: both; text-align: center;">
<a href="https://2.bp.blogspot.com/-xJhmGc_S0HA/VtxiWfZomPI/AAAAAAAAAU8/w120TW4RcTQ/s1600/resourcebundle.properties.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img src="JSF%20p1_files/resourcebundle.jpg" border="0"></a></div>
<div>
Потом эту информацию можно связать на xhtml странице:</div>
<div class="separator" style="clear: both; text-align: center;">
<a href="https://1.bp.blogspot.com/-4BTRONlt58w/VtxipPEVK9I/AAAAAAAAAVA/CwWx99RjFDA/s1600/resourcebundle.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img src="JSF%20p1_files/resourcebundle_002.jpg" border="0"></a></div>
Так же можно связывать данные на xhtml страницы с управляемым бином с помощью геттеров и сеттеров.<br>
<br>
<div>
<h3>
<ul>
<li>Объясните разницу между required и requiredMessage атрибутов в теге &lt;h:inputText&gt;.</li>
</ul>
</h3>
</div>
<div>
Эти
 два тега объявляют необходимость обязательного заполнения текстового 
поля, а так же сообщения, которое будет выполнено при нарушении этого 
правила. Такой подход используется при валидации компонентов, например 
для требования заполнить имя пользователя, пароль или email в 
соответствующих полях.<br>
<br></div>
<div>
<h3>
<ul>
<li>Какие различные типы навигации по страницам поддерживаются в JSF?</li>
</ul>
</h3>
</div>
<div>
В JSF поддерживаются следующие типы навигации по страницам:</div>
<div>
<ul>
<li>Implicit Navigation (неявная навигация),</li>
<li>Navigation through Managed Bean (навигация с помощью управляемого бина),</li>
<li>Navigation through faces-config.xml (навигация через настройки faces-config.xml),</li>
<li>Forward versus Redirect navigation</li>
<li>Conditional Navigation (условная навигация)</li>
</ul>
<br></div>
<h3 style="text-align: left;">
<ul style="text-align: left;">
<li>Какие фазы жизненного цикла в JSF вы знаете?</li>
</ul>
</h3>
<div class="separator" style="clear: both; text-align: center;">
<a href="https://2.bp.blogspot.com/-iDTacx6lf10/VtxlDS3WikI/AAAAAAAAAVM/dleHlVDOb00/s1600/JSF_live_cycle.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img src="JSF%20p1_files/JSF_live_cycle.jpg" height="295" border="0" width="640"></a></div>
<div>
Фазы жизненного цикла:</div>
<div>
<ul>
<li>Восстановление
 представления - для запрошенной страницы либо извлекается дерево 
компонентов (если страница уже запрашивалась), либо создается новое 
дерево компонентов (если страница запрашивается впервые). Для 
компонентов запрашиваемой страницы восстанавливаются их прошлые 
состояния (веб-форма заполняет вводимыми значениями).</li>
<li>Применение
 значений запроса - всем объектам дерева компонентов присваиваются 
соответствующие им значения из запроса. Так же, в этой фазе, при 
необходимости, добавляются события(щелчок по кнопке или ссылке) в 
очередь событий.</li>
<li>Обработка
 проверок - отправленные строковые значения преобразуются в "локальные 
значения", которые могут представлять собой объекты любого типа. 
Применяются валидаторы.</li>
<li>Обновление значений модели - изменяются свойства привязанных к компонентам бинов.</li>
<li>Вызов
 приложения - выполняется метод action кнопки или ссылки, щелчок по 
которой привел к отправке формы. Этот метод может выполнять любую 
прикладную обработку. Он возвращает строку, которая передается 
обработчику навигации.</li>
<li>Визуализация ответа - генерируется html и отправляется клиенту.</li>
</ul>
<br></div>
<div>
<div>
<h3>
<ul>
<li>Объясните назначение тега &lt;h:form&gt;.</li>
</ul>
</h3>
</div>
</div>
<div>
Тег
 &lt;h:form&gt; генерирует элемент формы HTML, который использует "POST"
 запрос для подтверждения формы и пересылки данных из формы. 
&nbsp;Поведение при декодировании: получает Map из свойства 
"requestParameterMap" из ExternalContext. Если map содержит "clientId" 
этого UIForm компонента, то вызывается setSubmitted(true) на форме, в 
противном случае вызывается setSubmitted(false) на форме.</div>
<div>
Поведение
 кодирования: Значение атрибута "метод" должно быть "post". Значение 
атрибута "action" должно быть результатом передачи идентификатора 
текущего представления к методу getActionURL() из ViewHandler данного 
приложения, далее передача String к методу encodeActionURL() из 
ExternalContext. Необходимо вызвать ViewHandler.writeState() до закрытия
 элемента "form". Подробнее о деталях поведения формы можно прочитать на
 сайте Oracle.<br>
<br></div>
<div>
<h3>
<ul>
<li>Какие теги используются для action и navigation?</li>
</ul>
</h3>
</div>
<div>
К тегам для команд action и навигации относятся:</div>
<div>
&lt;h:commandButton&gt;
 - генерирует HTML button, которая подтверждает форму и таким образом 
позволяет начать обработку данных, введенных пользователем.</div>
<div>
&lt;h:commandLink&gt;
 - генерирует HTML гиперссылку, эквивалентную тегу анкор в HTML. Может 
быть связана с управляемым бином или классом Action для обработки 
событий.<br>
<br></div>
<div>
<h3>
<ul>
<li>Какие компоненты используются для отображения данных в табличном виде?</li>
</ul>
</h3>
</div>
<div>
Основным
 компонентом для работы с таблицами является &lt;h:dataTable&gt;. 
Содержит обширные настройки отображения и взаимодействия между 
представлением и управляемыми бинами.<br>
<br></div>
<div>
<h3>
<ul>
<li>Что такое событие (event)?</li>
</ul>
</h3>
</div>
<div>
Событие
 - реакция на действие пользователя, например нажатие кнопки, активация 
ссылки или изменение компонента. JSF поддерживает listeners (слушатели),
 которые реагируют на различные возникающие события и позволяют 
обрабатывать их.<br>
<br></div>
<div>
<h3>
<ul>
<li>Как мы можем получить generated event?</li>
</ul>
</h3>
</div>
Чтобы получить сгенерированное событие мы можем воспользоваться следующей записью:<br>
<div class="separator" style="clear: both; text-align: center;">
<a href="https://3.bp.blogspot.com/-StOzPTY4klU/Vtxlahm52oI/AAAAAAAAAVQ/NMmmvkYnAsg/s1600/generated_event.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img src="JSF%20p1_files/generated_event.jpg" border="0"></a></div>
<div>
<br></div>
<div>
<h3>
<ul>
<li>Какие различные типы событий существуют в JSF?</li>
</ul>
</h3>
</div>
<div>
В JSF различают три вида событий:</div>
<div>
<ul>
<li>Action
 Events: событие, которое создается ui component, например command 
button или command hyperlink. &nbsp;Обрабатывается в ManagedBean с 
помощью метода processAction(ActionEvent ae).</li>
<li>Value
 Change Events: событие связанное с изменением значения UI компонента. К
 компонентам, которые могут генерировать value change events относятся: 
textfield, radio button, list box и т.д.. Этот тип событий создается 
сразу же после изменения значения в UI компоненте. Обрабатывается в 
ManagedBean с помощью метода someMethod(ValueChangeEvent vc).</li>
<li>Phase
 Events: этот тип событий возникает в одной из шести фаз жизненного 
цикла JFS и выполняется либо в начале, либо в конце каждой фазы. 
Обрабатывается в ManagedBean с помощью методов: beforePhase(PhaseEvent 
pe), afterPhase(PhaseEvent pe), PhaseId getPhaseId().</li>
</ul>
<br></div>
<div>
<h3>
<ul>
<li>Что такое класс-слушатель?</li>
</ul>
</h3>
</div>
<div>
Класс,
 который связан с возникающим событием называется класс слушатель 
(listener class). Создать такой класс можно реализовав интерфейсы 
PhaseListener, ActionListener или метод с входным параметром 
(ValueChangeEvent ev).<br>
<br></div>
<div>
<h3>
<ul>
<li>Какое назначение тега facelets?</li>
</ul>
</h3>
</div>
JSF
 предоставляет специальный набор тегов, которая дает большую гибкость 
для управления общими тегами / частями в одном месте для нескольких 
приложений. Эти теги позволяют создать единый шаблон, который может быть
 использован в различных приложениях. Включить Facelets теги можно 
следующим образом:<br>
<div class="separator" style="clear: both; text-align: center;">
<a href="https://4.bp.blogspot.com/-AoJ4jWZe5sg/Vtxl5mhZqxI/AAAAAAAAAVU/vy3iDLmFBts/s1600/jsf_facelets.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img src="JSF%20p1_files/jsf_facelets.jpg" height="21" border="0" width="640"></a></div>
<div>
<br></div>
<div>
<h3>
<ul>
<li>Назовите несколько facelets тегов.</li>
</ul>
</h3>
</div>
<div>
Наиболее
 распространенные facelets теги: &lt;ui:component&gt;, 
&lt;ui:composition&gt;, &lt;ui:decorate&gt;, &lt;ui:define&gt;, 
&lt;ui:fragment&gt;, &lt;ui:include&gt;, &lt;ui:insert&gt;, 
&lt;ui:param&gt;, &lt;ui:remove&gt;, &lt;ui:repeat&gt;.<br>
<br></div>
<div>
<h3>
<ul>
<li>Какие различные типы валидации используются в JSF?</li>
</ul>
</h3>
</div>
<div>
В JSF есть два типа валидации:<br>
Declarative Validations - валидация, которая срабатывает при помощи стандартных валидаторов JSF или Bean валидаторов.<br>
Imperative
 validation - стандартных сообщений о проверке обычно не достаточно и 
валидация, которая переопределяет стандартную относится к императивному 
типу проверок..</div>
<div class="separator" style="clear: both; text-align: center;">
<a href="https://4.bp.blogspot.com/-en0HGRrAMmw/VtxmSRgmA8I/AAAAAAAAAVc/UsBIVSD5YH4/s1600/Declarative_Validations.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img src="JSF%20p1_files/Declarative_Validations.jpg" height="204" border="0" width="640"></a></div>
<div>
Так
 же есть возможность создать свой собственный класс валидатор с помощью 
реализации интерфейса Validator и переопределение необходимого метода.<br>
<br></div>
<div>
<h3>
<ul>
<li>Какие различные типы выражений поддерживаются JSF EL (Expression Language)?</li>
</ul>
</h3>
</div>
<div>
Различают три типа выражений в JSF Expression Language:</div>
<div>
<ul>
<li>Immediate value expressions - выполняются сразу при отображении страницы. Записываются как ${}.</li>
<li>Deferred
 value expressions - выполняются тогда, когда это необходимо (когда к 
ним обращаются). Синтаксис: #{expression}. Подразделяются на value 
expression и method expression.</li>
<li>Value
 expression and method expression. Выражения значения подразделяются на 
read only и rear-write. Записываются как #{beanName.propertyName}. 
Method expression позволяют вызывать метод из представления. Синтаксис #{beanName.methodName()}.</li>
</ul>
<br></div>
<div>
<h3>
<ul>
<li>В чем разница между мгновенными и отложенными выражениями?</li>
</ul>
</h3>
</div>
<div>
Мгновенные
 выражения выполняются и вычисляются на этапе рендера отображения. 
Отложенные выражения выполняются при непосредственном вызове. Например 
выполнение метода при нажатии на кнопку или получения значения свойства 
при построении фрагмента отображения (например при построении таблицы 
необходимо получить значения данных).<br>
<br></div>
<div>
<h3>
<ul>
<li>Объясните разницу между value expression и method expression.</li>
</ul>
</h3>
</div>
<div>
Value
 expression используются для работы со свойствами в управляемом бине. В 
случае, если для свойства есть только геттер такое выражение относят к 
read only. Если для свойства есть и геттер и сеттер, то свойство 
доступно для чтения и записи.</div>
<div>
Method
 expression используется для вызова метода в управляемом бине и 
получения (если необходимо) его результата для последующей обработки в 
представлении или другом коде.</div>
<div>
<br>
</div>
<div>
<h3>
<ul>
<li>Расскажите о @ViewScoped, @SessionScoped, @CustomScoped и @RequestScoped аннотациях.</li>
</ul>
</h3>
</div>
<div>
@ViewScoped:
 означает, что управляемый бин существует на протяжении времени жизни 
представления JSF (пока страница показывается).</div>
<div>
@SessionScoped: бин будет доступен на протяжении всей HTTP сессии.</div>
<div>
@CustomScoped: бин будет жить столько, сколько он будет находится в Map, которая создается для контроля времени жизни бинов.</div>
@RequestScoped: бин существует на время жизни запроса-ответа (HTTP request-response).<br>
<div>
<br></div>
<div>
<h3>
<ul>
<li>Какие существую способы объявить класс управляемым бином JSF?</li>
</ul>
</h3>
</div>
Для объявлении класса управляемым бином используется аннотация&nbsp;<br>
<div class="separator" style="clear: both; text-align: center;">
<a href="https://2.bp.blogspot.com/-jGXqUI0ffjI/VuejL6aLLuI/AAAAAAAAAXY/XKnRScD8hr49CNbOiMakCXIh_MhAPYJgg/s1600/ManagedBean_1.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img src="JSF%20p1_files/ManagedBean_1.jpg" height="30" border="0" width="640"></a></div>
&nbsp;Другим способом объявить управляемый бин - это указать его в faces-config.xml:<br>
<div class="separator" style="clear: both; text-align: center;">
<a href="https://3.bp.blogspot.com/-uGQEz2hziOM/VtxnBkSkWbI/AAAAAAAAAVo/DJblhWUdez4/s1600/ManagedBean.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img src="JSF%20p1_files/ManagedBean.jpg" height="83" border="0" width="640"></a></div>
<div>
<br></div>
<div>
<h3>
<ul>
<li>Как используются атрибуты name и eager в Managed Bean?</li>
</ul>
</h3>
</div>
<div>
name:
 указывает уникальное имя класса (бина) в JSF. Если имя не указано, то 
имя совпадает с именем класса где первая буква в нижнем регистре.</div>
<div>
eager:
 указывает на время создания бина. Если стоит true, то бин будет создан 
на старте приложения, если false, то бин будет создан при первом запросе
 к нему.<br>
<br>
</div>
<div>
<h3>
<ul>
<li>Какие теги для валидации существуют в JSF?</li>
</ul>
</h3>
</div>
<div>
f:validateLength: проверяет длину строки,</div>
<div>
f:validateLongRange: проверка числового диапазона,</div>
<div>
f:validateDoubleRange: проверка диапазона для типов float, double,</div>
f:validateRegex: проверка значения согласно регулярному выражению.<br>
<br>
<h3>
<a href="https://jsehelper.blogspot.nl/2016/03/java-server-faces-jsf-2.html"> Java Server Faces (JSF) (часть 2).</a></h3>

<p></p>
	

</body></html>