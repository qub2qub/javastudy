<!DOCTYPE html>
<html lang="en"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
	<meta charset="UTF-8">
	<title>JSF p2</title>
<link rel="stylesheet" href="../../Guides/grey.css">
</head>
<body>

<h3>
<ul>
<li>Какие преимущества использования JSF Framework?</li>
</ul>
</h3>

<div>
• Отделение бизнес логики от представления.</div>
<div>
• Управление состоянием пользовательского интерфейса UI с помощью нескольких запросов к серверу.</div>
<div>
• Поддерживается реализация собственных компонентов.</div>
<div>
• Легкая передача данных между различными компонентами.</div>
<div>
• JSF
 является стандартом JEE, что дает уверенность в работе заявленных 
функций. Существует множество сторонних библиотек для JSF, например 
библиотека компонентов PrimeFaces.<br>
<br>
<br>
<h3>
<ul>
<li>Какие различные теги JSF используются для конвертации?</li>
</ul>
</h3>
</div>
<div>
• f:convertNumber: используется для преобразования строки в число.</div>
<div>
• f:convertDateTime: используется для преобразования строки в формат даты.<br>
<a name="more"></a></div>
<div>
• CustomConverter: созданный пользователем конвертер JSF.<br>
<br>
<br>
<h3>
<ul>
<li>Перечислите преимущества использования языка выражений (expression language)?</li>
</ul>
</h3>
</div>
<div>
• Арифметические, логические, реляционные операции могут быть использованы в языке выражений.</div>
<div>
• Автоматическое преобразование типов.</div>
<div>
• Показывает пустые или пропущенные значения как пустые строки вместо NullPointerException.</div>
<div>
• Обеспечивает легкий доступ к предопределенным объектам, таким как запрос (request).<br>
<br></div>
<div>
<h3>
<ul>
<li>Поясните название backing bean.</li>
</ul>
</h3>
</div>
<div>
Backing Bean - 
специальный JavaBean (java класс), который собирает значения из 
компонентов, реагирует на события, взаимодействует с бизнес-логикой. 
Связан с каждым компонентом. Их может быть несколько и бин не является 
необязательным для UI компонента, а просто использует его. Backing bean 
содержит поля, которые будут заполняться из компонента (занесет значения
 введенные пользователем). JSF компонент не будет работать с Java 
классами и с чем-то другим, кроме Backing bean.<br>
<br></div>
<div>
<h3>
<ul>
<li>Какие стандартные библиотеки тегов JSF вы знаете?</li>
</ul>
</h3>
</div>
<div>
JSF Core Tags library и JSF HTML tags library. Задать пространство имен в xhtml странице можно следующим образом:</div>
<div class="separator" style="clear: both; text-align: center;">
<a href="https://3.bp.blogspot.com/-SYPuLJ5l9hM/Vtxn1mGaO6I/AAAAAAAAAVw/LvaPDsDFbvA/s1600/JSF_Core_Tags_library_and_JSF_HTML_tags_library.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img src="JSF%20p2_files/JSF_Core_Tags_library_and_JSF_HTML_tags_library.jpg" height="39" border="0" width="640"></a></div>
<div>
Затем с помощью указанных префиксов можно задавать какие-либо компоненты, например &lt;h:form&gt;, &lt;c:validator&gt; и т.д..<br>
<br></div>
<div>
<h3>
<ul>
<li>Какие основные функции выполняет метод в backing bean?</li>
</ul>
</h3>
</div>
<div>
• Проверяет данные компонента</div>
<div>
• Обрабатывает события компонента</div>
<div>
• Выполняет обработку запроса для определения к какой следующей странице необходимо навигироваться.<br>
<br></div>
<div>
<h3>
<ul>
<li>Каковы различные реализации JSF API?</li>
</ul>
</h3>
</div>
<div>
• ADF Faces: реализация JSF стандарта компанией Oracle.</div>
<div>
• Reference Implementation (RI): от Sun Microsystems.</div>
<div>
• Apache MyFaces: open source реализация JavaServer Faces (JSF).</div>
<div>
• Primefaces: мощная библиотека компонентов JSF с поддержкой Ajax и JavaScript.<br>
<br></div>
<div>
<h3>
<ul>
<li>Объясните архитектуру JSF.</li>
</ul>
</h3>
</div>
<div>
JSF основывается на шаблоне проектирования MVC, что означает отделение бизнес логики от представлений. Приложение JSF содержит:</div>
<div>
<ul>
<li>UI компоненты, которые представляют состояния объектов на сервере.</li>
<li>Классы-помощники на стороне сервера.</li>
<li>Validators, event handlers &nbsp;и navigation handlers.</li>
<li>Конфигурацию приложения и используемых ресурсов.</li>
<li>Компоненты JavaBeans, которые используются как модель с необходимой функциональностью и информацией.</li>
<li>Собственные библиотеки тегов для работы с event handlers и validators.</li>
<li>Собственные библиотеки тегов для работы с графическими компонентами.</li>
</ul>
</div>
Ниже представлена схема JSF архитектуры:<br>
<div class="separator" style="clear: both; text-align: center;">
<a href="https://3.bp.blogspot.com/-ZSSeEd-0Ty4/Vtxoa38QWMI/AAAAAAAAAV0/_SuzVcddrlg/s1600/jsf_architecture_scheme.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img src="JSF%20p2_files/jsf_architecture_scheme.jpg" height="409" border="0" width="640"></a></div>
<br>
<div>
<h3>
<ul>
<li>Как различные компоненты рендерятся на JSF странице?</li>
</ul>
</h3>
</div>
<div>
Компоненты JSF отображаются на xhtml странице, включающую библиотеки тегов вроде jsf core, html, facelets tags.<br>
<br></div>
<div>
<h3>
<ul>
<li>Может JSF содержать несколько файлов конфигурации?</li>
</ul>
</h3>
Да, может. Их необходимо указать в web.xml.</div>
<div class="separator" style="clear: both; text-align: center;">
<a href="https://1.bp.blogspot.com/-RRmFrGdAKlE/Vtxo6PTYoOI/AAAAAAAAAV8/DM-2G8sLfYk/s1600/several_configuration_files.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img src="JSF%20p2_files/several_configuration_files.jpg" height="99" border="0" width="640"></a></div>
<div class="separator" style="clear: both; text-align: justify;">
<br></div>
<div>
<h3>
<ul>
<li>Чем различается понятия backing bean и managed bean?</li>
</ul>
</h3>
</div>
<div>
Вообще на 
данный момент существует мнение, что эти понятия не следует различать 
(например так делает spring). Но если нужно как-то ответить по другому, 
то:</div>
<div>
<div>
<ul>
<li> backing bean должны определяться в request scoped. Backing bean связан с формой.</li>
<li> Managed
 bean может определяться в request, session, application scopes. Этот 
тип бинов регистрируется в контексте приложения JSF и может быть вызван 
или создан в любое время и месте. Управляемые бины работают с 
графическими компонентами JSF.</li>
</ul>
</div>
</div>
<div>
<div>
<div>
<br></div>

</div>
<h3>
<ul>
<li>Как отобразить сообщения об ошибках в JSF?</li>
</ul>
</h3>
</div>
<div>
Отображать 
какие либо системные ошибки можно с помощью тега &lt;h:messages&gt;, 
который может ссылаться на какой-либо графический компонент с помощью 
атрибута for.<br>
<br>
<br>
<h3>
<ul>
<li>Объясните назначение тега selectOne menu в JSF.</li>
</ul>
</h3>
</div>
<div>
Компонент 
selectOneMenu позволяет выбрать одно из списка значений. Компонент может
 выглядеть как list box, radio buttons или как меню.<br>
<br></div>
<div>
<h3>
<ul>
<li>Объясните в чем разница между атрибутами immediate и rendered?</li>
</ul>
</h3>
</div>
<div>
Атрибут 
immediate при значении true позволяет пропускать некоторые фазы 
жизненного цикла JSF. Например при нажатии на кнопку submit и 
необходимости подтверждения формы будет пропущена валидация и 
преобразования. Данные, например, компонента inputTextField не будут 
отправлены в модель. В общем представление не достучится до своей модели
 и будет выполнены команды на кнопке с атрибутом immediate=’true’.</div>
<div>
Атрибут 
rendered указывает на необходимость создания (отрисовки) компонента на 
представлении. Этот атрибут может быть задан с помощью логического 
выражения.<br>
<br></div>
<div>
<h3>
<ul>
<li>Какие два способа связывания поддерживается JSF?</li>
</ul>
</h3>
</div>
<div>
Связывание значения компонента с свойством в бине или внешним ресурсом.</div>
<div>
Связывание экземпляра компонента с свойством в бине.<br>
<br></div>
<div>
<h3>
<ul>
<li>Какая минимальная конфигурация необходима для JSF приложения?</li>
</ul>
</h3>
</div>
<div>
Необходимо настроить как минимум два файла конфигурации:</div>
<div>
<ul>
<li>web.xml - основной файл конфигурации веб приложения. Содержит детали развертывания, конфигурации приложения и обработчиков JSF.</li>
<li>faces-config.xml - предоставляет настройки приложения, управляемых бинов, навигации, конвертеров, валидаторов.</li>
</ul>
</div>
<div>
<h3>
<br><ul>
<li>Что означает navigation rule в JSF?</li>
</ul>
</h3>
</div>
<div>
Navigation rule описывает правила навигации в приложении.</div>
<div class="separator" style="clear: both; text-align: center;">
<a href="https://3.bp.blogspot.com/-Aity0fwKoxw/VtxpO1a81uI/AAAAAAAAAWE/xH5zXNTmmeE/s1600/navigation_rule_JSF.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img src="JSF%20p2_files/navigation_rule_JSF.jpg" height="182" border="0" width="640"></a></div>
<div class="separator" style="clear: both; text-align: justify;">
<br></div>
<div>
<h3>
<ul>
<li>Расскажите о назначение тегов converter в JSF.</li>
</ul>
</h3>
</div>
<div>
Использование 
тега конвертера в компоненте позволяет преобразовать данные в 
необходимый вид. Например, в теге &lt;h:outpuText&gt; можно задать 
конвертер, который будет обрезать слишком длинную строку:</div>
<div class="separator" style="clear: both; text-align: center;">
<a href="https://2.bp.blogspot.com/-s3jShkW_ODY/VtxpmCiAJRI/AAAAAAAAAWI/Hnk08dwAGqY/s1600/Faces_Converter.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img src="JSF%20p2_files/Faces_Converter.jpg" height="321" border="0" width="640"></a></div>
<div class="separator" style="clear: both; text-align: justify;">
<br></div>
<div>
<h3>
<ul>
<li>Перечислите преимущества таблицы данных в JSF.</li>
</ul>
</h3>
</div>
<div>
Использование 
компонента таблицы в JSF предоставляет широкие возможности для работы с 
коллекциями или массивами и отображения их содержимого в табличном виде.
 Поддерживается итерация, предоставляются возможности по преобразованию 
данных в необходимом виде и многое другое.<br>
<br></div>
<div>
<h3>
<ul>
<li>Как реализовать интернационализацию (локализацию) (i18n) в JSF?</li>
</ul>
</h3>
</div>
<div>
Существуют 
различные способы реализации локализации в JSF, как стандартными 
методами, так и с помощью других фреймворков (например Spring). Главное 
значение локализации в JSF - отсутствие захардкоренных значений 
компонентов, текстовых данных и др. в коде. Необходимо задать свойство и
 связать его с помощью resource bundle файлом, в котором будет храниться
 набор значений для каждого языка (локали).<br>
<br></div>
<div>
<h3>
<ul>
<li>Какая модель рендеринга применяется в JSF?</li>
</ul>
</h3>
</div>
<div>
Архитектура 
рендеринга JavaServer Faces основана на компонентах. Состояние 
компонентов пользовательского интерфейса сохраняется, когда пользователь
 запрашивает новую страницу и затем восстанавливается, если запрос 
повторяется.<br>
<br></div>
<div>
<h3>
<ul>
<li>Что такое render kit?</li>
</ul>
</h3>
</div>
<div>
Render kit 
определяет набор компонентов и классов, которые подходят для отображения
 конкретному пользователю. Например &lt;f:view 
renderKitId="PRIMEFACES_MOBILE"/&gt; означает использование мобильного 
набора компонентов библиотеки Primefaces.<br>
<br></div>
<div>
<h3>
<ul>
<li>Что такое view object?</li>
</ul>
</h3>
</div>
<div>
View object 
используется специально для представления, но определяется за ее 
пределами. Он содержит информацию, которую необходимо отобразить в 
представлении, а так же логику валидации, обработчики событий и 
определяет взаимодействие с кодом бизнес логики.<br>
<br></div>
<div>
<h3>
<ul>
<li>Что подразумевается под Bean Scope?</li>
</ul>
</h3>
</div>
<div>
Bean scope - механизм связывания бинов и других объектов для возможности доступа к ним из различных компонентов веб приложения.<br>
<br></div>
<div>
<h3>
<ul>
<li>В чем разница между JSF-1 и JSF-2?</li>
</ul>
</h3>
</div>
<div>
JSF 1 не поддерживает Ajax, аннотации, применения шаблонов и вообще достаточно кривой в плане стабильности.<br>
<br></div>
<div>
<h3>
<ul>
<li>Может ли отсутствовать faces-config.xml у JSF приложения?</li>
</ul>
</h3>
</div>
<div>
Можно отказаться от xml файла при использовании аннотаций в коде.<br>
<br></div>
<div>
<h3>
<ul>
<li>Сравните JSF и Spring Framework.</li>
</ul>
</h3>
</div>
<div>
Spring использует Inversion of Control (IoC) и Dependency Injection (DI), а JSF нет.</div>
<div>
Spring состоит 
из множества различных модулей, таких как Spring Data, Security, MVC и 
много других отлично взаимодействующих частей. Это помогает создавать 
большие приложения с меньшими затратами, в то время как JSF, скорее 
всего, потребует больше кодирования для многих необходимых функций.</div>
<div>
Использование DI в спринг позволяет внедрять POJO классы, в то время как JSF может работать только с JEE архитектурой.<br>
<br></div>
<div>
<h3>
<ul>
<li>Можем ли мы интегрировать JSF с другими популярными фреймворками вроде Spring, Hibernate и т.д.?</li>
</ul>
</h3>
</div>
<div>
Да, это 
возможно со всеми популярными фреймворками. Обычно конфигурация 
приложения для совместной работы JSF, Spring, Hibernate и т.д. не 
сложная, но из-за объема необходимого кода здесь они приводится не 
будут. Смотрите документацию для необходимого фреймворка.</div>

<p></p>
	

</body></html>