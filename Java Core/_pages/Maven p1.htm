<!DOCTYPE html>
<html lang="en"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
	<meta charset="UTF-8">
	<title>Maven p1</title>
<link rel="stylesheet" href="../../Guides/grey.css">
</head>
<body>

<h3>
<ul>
<li>Что такое сборка проекта, автоматизация сборки?</li>
</ul>
</h3>

<div>
Сборка
 (англ. assembly) - двоичный файл, содержащий исполняемый код программы 
или другой, подготовленный для использования информационный продукт.</div>
<div>
Автоматизация
 сборки - этап написания скриптов или автоматизация широкого спектра 
задач применительно к ПО, применяемому разработчиками в их повседневной 
деятельности, включая такие действия, как:</div>
<div>
<ul>
<li>Компиляция исходного кода в бинарный код</li>
<li>Сборка бинарного кода</li>
<li>Выполнение тестов</li>
<li>Разворачивание программы на производственной платформе</li>
<li>Написание сопроводительной документации или описание изменений новой версии</li>
</ul>
<br>
<a name="more"></a></div>
<div>
<h3>
<ul>
<li>Что такое Maven? Как он работает?</li>
</ul>
</h3>
<div>
Apache
 Maven - это фреймворк для автоматизации сборки проектов, компиляции, 
создания jar, создания дистрибутива программы, генерации документации. 
Если собирать большие проекты с командной строки, то команда для сборки 
будет очень длинной, поэтому её иногда записывают в bat/sh скрипт. Но 
такие скрипты зависят от платформы. Для того чтобы избавиться от этой 
зависимостии и упростить написание скрипта используют инструменты для 
сборки проекта.</div>
<div>
Maven,
 обеспечивает декларативную, а не императивную сборку проекта. То есть, в
 файлах проекта pom.xml содержится его декларативное описание, а не 
отдельные команды. Все задачи по обработке файлов Maven выполняется 
через плагины.<br>
<br></div>
</div>
<div>
<h3>
<ul>
<li>Какие преимущества Maven?</li>
</ul>
</h3>
<div>
Основные преимущества Maven:</div>
</div>
<div>
<ul>
<li>Независимость от OS. Сборка проекта происходит в любой операционной системе. Файл проекта один и тот же.</li>
<li>Управление
 зависимостями. Редко какие проекты пишутся без использования сторонних 
библиотек(зависимостей). Эти сторонние библиотеки зачастую тоже в свою 
очередь используют библиотеки разных версий. Maven позволяет управлять 
такими сложными зависимостями. Что позволяет разрешать конфликты версий и
 в случае необходимости легко переходить на новые версии библиотек.</li>
<li>Возможна
 сборка из командной строки. Такое часто необходимо для автоматической 
сборки проекта на сервере (Continuous Integration).</li>
<li>Хорошая
 интеграция со средами разработки. Основные среды разработки на java 
легко открывают проекты которые собираются c помощью maven. При этом 
зачастую проект настраивать не нужно - он сразу готов к дальнейшей 
разработке.&nbsp;</li>
<li>Как
 следствие - если с проектом работают в разных средах разработки, то 
maven удобный способ хранения настроек. Настроечный файл среды 
разработки и для сборки один и тот же - меньше дублирования данных и 
соответственно ошибок.</li>
<li>Декларативное описание проекта.</li>
</ul>
<br></div>
<div>
<h3>
<ul>
<li>Какие недостатки Maven?</li>
</ul>
</h3>
<div>
Недостатки Maven:</div>
</div>
<div>
<ul>
<li>Неочевидность.
 Если в Ant указывается команда на удаление - и удаляется файл, то в 
случае Maven надо всем сердцем довериться плагину и документации по 
нему.</li>
<li>При
 таком объёме необходимых знаний документации не так много, особенно по 
каким-то специальным моментам. Да и просто читать придётся много. Порог 
вхождения, если потребуется собирать даже не самое сложное приложение 
куда выше, чем у Ant.</li>
<li>Если
 нужно найти какой-то специальный плагин - это будет сделать непросто, 
плагинов много. И не факт, что найденный подойдёт на все 100% и будет 
работать без ошибок.</li>
<li>Нужен доступ в интернет (или придётся разворачивать собственный репозиторий, что трудоёмко)</li>
<li>Большие трудности, если проект не типовий.</li>
</ul>
<br></div>
<div>
<h3>
<ul>
<li>Какими аспектами управляет Maven?</li>
</ul>
</h3>
<div>
Вот основные аспекты, которыми позволяет управлять Maven:</div>
</div>
<div>
<ul>
<li>Создание (Build)</li>
<li>Документирование (Documentation)</li>
<li>Отчёты (Reporting)</li>
<li>Зависимости (Dependencies)</li>
<li>Релизы (Releases)</li>
<li>SCM</li>
<li>Список рассылки (Mailing list)</li>
<li>Дистрибьюция (Distribution)</li>
</ul>
<br></div>
<div>
<h3>
<ul>
<li>Как узнать какую версию Maven вы используете?</li>
</ul>
</h3>
<div>
С помощью следующий команди:</div>
</div>
<div>
mvn --version<br>
<br>
<h3>
<ul>
<li>Для чего создан Maven?</li>
</ul>
</h3>
<div>
Основной целью Maven является предоставление разработчику:</div>
</div>
<div>
<ul>
<li>Понятной модели для проектов, которая может быть использовано повторно и была бы проста в поддержании.</li>
<li>Плагины, которые могут взаимодействовать с этой моделью.</li>
</ul>
</div>
<div>
Структура
 и сожержание проекта Maven указывается в специальном xml-файле, который
 назывется Project Object Model (POM), который является базовым модулем 
всей системы.<br>
<br>
<h3>
<ul>
<li>Какая структура каталогов в Maven?</li>
</ul>
</h3>
<div>
В
 Maven стандартная структура каталогов, благодаря ей отпадает 
необходимость прописывать пути к файлам проекта. В корневом каталоге 
проекта находится pom.xml и несколько текстовых файлов. Всё остальное 
хозяйство аккуратно разложено в подкаталогах. Главные из них - src и 
target. Однако, порядок сохраняется и вглубь:</div>
</div>
<div class="separator" style="clear: both; text-align: center;">
<a href="https://4.bp.blogspot.com/-IH9EdP8in9s/VzAuc2PBDQI/AAAAAAAAAos/TvMBQcJm9T8v6dc1H9SWq8QC38WJ2UcRQCLcB/s1600/q008_p01.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img src="Maven%20p1_files/q008_p01.jpg" border="0"></a></div>
<div class="separator" style="clear: both; text-align: justify;">
<br></div>
<h3 style="text-align: left;">
<ul style="text-align: left;">
<li>Где вы хранятся файлы классов при компиляции проекта Maven?</li>
</ul>
</h3>
<div>
Файлы классов хранятся в: ${basedir}/target/classes/.<br>
<br>
<h3 style="text-align: left;">
<ul style="text-align: left;">
<li>Что такое pom.xml?</li>
</ul>
</h3>
</div>
<div>
<div>
pom.xml
 - это XML-файл, который содержит информацию о деталях проекта, и 
&nbsp;конфигурации используемых для создания проекта на Maven. Он всегда
 находится в базовом каталоге проекта. Этот файл также содержит задачи и
 плагины. Во время выполнения задач, Maven ищет файл pom.xml в базовой 
директории проекта. Он читает его и получает необходимую информацию, 
после чего выполняет задачи.</div>
<div>
Корневой
 элемент &lt;project&gt;, схема, которая облегчает редактирование и 
проверку, и версия pom.xml. Внутри тега project содержится основная и 
обязательная информация о проекте.<br>
<br></div>
</div>
<h3>
<ul>
<li>Какую информацию содержит pom.xml?</li>
</ul>
</h3>
<div>
Среди информации которую содержит pom.xml мы можем выделить следующие:</div>
<div>
<ul>
<li>Зависимости проекта (project dependencies)</li>
<li>Плагины (plugins)</li>
<li>Задачи/цели (goals)</li>
<li>Профиль создания (build profiles)</li>
<li>Версия проекта (project version)</li>
<li>Разработчики (developers)</li>
<li>Список рассылки (mailing list)</li>
</ul>
<br></div>
<div>
<h3>
<ul>
<li>Что такое супер POM?</li>
</ul>
</h3>
</div>
<div>
Все
 POM - файлы являются наследниками родительского pom.xml. Этот POM-файл 
называется Super POM и содержит значения, унаследованные по умолчанию.<br>
<br></div>
<div>
<h3>
<ul>
<li>Какие элементы необходимы для минимального POM?</li>
</ul>
</h3>
<div>
Требуемые
 элементы для минимального POM ето корневий елемент, modelVersion, 
GroupID, artifactID &nbsp;и версия. Минимальный POM файл:</div>
</div>
<div class="separator" style="clear: both; text-align: center;">
<a href="https://2.bp.blogspot.com/-IUbTk9WPoPE/VzAup7IYm-I/AAAAAAAAAow/KafdkWXE578xb6_9225AHl5OKF2xAFpVQCLcB/s1600/q013_p01.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img src="Maven%20p1_files/q013_p01.jpg" border="0"></a></div>
<div class="separator" style="clear: both; text-align: justify;">
<br></div>
<div>
<h3>
<ul>
<li>Что такое зависимости в Maven?</li>
</ul>
</h3>
<div>
Зависимость
 (dependency) - это те библиотеки, которые непосредственно используются в
 вашем проекте для компиляции кода или его тестирования.</div>
<div>
<br></div>
<h3>
<ul>
<li>Что такое артефакт в Maven?</li>
</ul>
</h3>
<div>
Артефакт
 (artefact) - это, по сути, любая библиотека, хранящаяся в репозитории 
(месте хранения). Это может быть какая-то зависимость или плагин. Обычно
 артефактом является JAR-файл, который хранится в репозитории Maven. 
Каждый артефакт содержит group ID, artifact ID и версию.<br>
<br></div>
<h3>
<ul>
<li>Что такое плагин в Maven?</li>
</ul>
</h3>
<div>
Плагин (plugin) - это зависимости Maven'а, расширяющие его функционал.</div>
<div>
<br></div>
<h3>
<ul>
<li>Что такое задача в Maven?</li>
</ul>
</h3>
<div>
Задача
 (goal) - это специальная задача, которая относится к сборке проекта и 
его управлению. Она может привязываться как к нескольким фазам, так и ни
 к одной. Задача, которая не привязана ни к одной фазе, может быть 
запущена вне фаз сборки с помощью прямого вызова.<br>
<br>
<h3>
<ul>
<li>Что такое архетип в Maven?</li>
</ul>
</h3>
</div>
<div>
Архетип
 (archetype) - это некая стандартная компоновка файлов и каталогов в 
проектах различного рода (веб, swing-проекты и прочие). Другими словами,
 Maven знает, как обычно строятся проекты и в соответствии с архетипом 
создает структуру каталогов.<br>
<br></div>
<h3>
<ul>
<li>Что такое репозиторий в Maven?</li>
</ul>
</h3>
</div>
<div>
Репозиторий
 (repository) - глобальное хранилище всех библиотек, доступных для 
Maven, это место где хранятся артефакты: jar файлы, pom-файлы, javadoc, 
исходники, плагины.<br>
<br>
<h3>
<ul>
<li>Какие типы репозитория существуют в Maven?</li>
</ul>
</h3>
<div>
В Maven существуют три типы репозитория:</div>
</div>
<div>
<ul>
<li>Локальный
 (local) репозиторий - это директория, которая хранится на нашем 
компьютере. Она создаётся в момент первого выполнения любой команды 
Maven. По умолчанию она расположена в &lt;home 
директория&gt;/.m2/repository - персональная для каждого пользователя.</li>
<li>Центральный
 (central) репозиторий - это репозиториий, который обеспечивается 
сообществом Maven. Он содержит огромное количество часто используемых 
библиотек. Который расположен в http://repo1.maven.org/maven2/ и 
доступен на чтение для всех пользователей в интернете. Если Maven не 
может найти зависимости в локальном репозитории, то автоматически 
начинается поиск необходимых файлов в центральном репозитории</li>
<li>Удалённые
 (remote) репозиторий - иногда, Maven не может найти необходимые 
зависимости в центральном репозитории. В этом случае, процесс сборки 
прерывается и в консоль выводится сообщение об ошибке. Для того, чтобы 
предотвратить подобную ситуацию, в Maven предусмотрен механизм 
Удалённого репозитория, который является репозиторием, который 
определяется самим разработчиком. Там могут храниться все необходимые 
зависимости.</li>
</ul>
<br></div>
<div>
<h3>
<ul>
<li>Какая команда установляет JAR-файл в локальное хранилище?</li>
</ul>
</h3>
</div>
<div>
mvn install<br>
<br>
<h3>
<ul>
<li>Какой порядок поиска зависимостей Maven?</li>
</ul>
</h3>
<div>
Когда мы выполняем собрку проекта в Maven, автоматически начинается поиск необходимых зависимостей в следующем порядке:</div>
</div>
<div>
<ol>
<li>Поиск зависимостей в локальном репозитории Если зависимости не обнаружены, происходит переход к шагу 2.</li>
<li>Поиск
 зависимостей в центральном репозитории. Если они не обнаружены и 
удалённый репозиторий определён, то происходит переход к шагу 4.</li>
<li>Если удалённый репозиторий не определён, то процесс сборки прекращается и выводится сообщение об ошибке.</li>
<li>Поиск
 зависимостей на удалённом репозитории, если они найдены, то происходит 
их загрузка в локальный репозиторий, если нет - выводится сообщение об 
ошибке.</li>
</ol>
<br></div>
<div>
<h3>
<ul>
<li>Какие два файла настройки есть в Maven, как они называются и где расположены?</li>
</ul>
</h3>
<div>
В Maven, файлы настройки называются settings.xml, и они расположены в двох местах:</div>
</div>
<div>
<ul>
<li>Каталог где установлен Maven: $M2_Home/conf/settings.xml</li>
<li>Домашняя директория пользователя: ${user.home}/.m2/settings.xml</li>
</ul>
<br></div>
<div>
<h3>
<ul>
<li>Что такое жизненный цикл сборки в Maven?</li>
</ul>
</h3>
<div>
Жизненный
 цикл сборки(Lifecycle) - это чётко опредлённая последовательность фаз 
во время выполнения которых должын быть достигнуты определённые цели. 
Здесь фаза представляет собой стадию жизненного цикла.</div>
<div>
<br></div>
<h3>
<ul>
<li>Назовите основные фазы жизненного цикла сборки Maven?</li>
</ul>
</h3>
</div>
<div>
Когда
 Maven начинает сборку проекта, он проходит через определённую 
последовательность фаз сборки, и выполняет определенные задачи, которые 
указаны в каждой из фаз.</div>
<div>
В Maven есть следующие 3 стандартных жизненных цикла:</div>
<div>
<ul>
<li>Очистка (clean) - очищает артефакты, созданные до сборки.</li>
<li>Сборка (default or build) - используется для создания приложения.</li>
<li>Создание сайта проекта (site) - генерирует документацию сайта для проекта.</li>
</ul>
<br></div>
<div>
<h3>
<ul>
<li>Что делает команда mvn site?</li>
</ul>
</h3>
<div>
mvn site - создает веб-сайт проекта.<br>
<br></div>
<h3>
<ul>
<li>Что делает команда mvn clean?</li>
</ul>
</h3>
<div>
mvn clean - эта команда очищает целевую директорию от созданных в процессе сборки файлов.<br>
<br>
<h3>
<a href="https://jsehelper.blogspot.nl/2016/05/maven-2.html">Maven (часть 2).</a></h3>
</div>
</div>

</body></html>