<!DOCTYPE html>
<html lang="en"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
	<meta charset="UTF-8">
	<title>Maven p2</title>
<link rel="stylesheet" href="../../Git Guide/grey.css">
</head>
<body>

<h3>
<ul>
<li>Из каких фаз состоит жизненный цикл сборки Clean?</li>
</ul>
</h3>
<div>
Жизненный цикл сборки Clean состоит из следующих этапов:</div>

<div>
<ul>
<li>pre-clean</li>
<li>clean</li>
<li>post-clean&nbsp;</li>
</ul>
<br>
</div>
<div>
<h3>
<ul>
<li>Из каких фаз состоит жизненный цикл сборки Default (Build)?</li>
</ul>
</h3>
</div>
<div>
Default (Build) - это основной жизненный цикл Maven, который используется для сборки проектов. Он включает в себя 23 фазы:</div>
<div>
<ul>
<li>validate &nbsp;- проверяет корректность метаинформации о проекте, подтверждает, является ли проект<a name="more"></a> корректным и вся ли необходимая информация доступа для завершения процесса сборки.</li>
<li>initialize - инициализирует состояние сборки, например, различные настройки.</li>
<li>generate-sources - включает любой исходный код в фазу компиляции.</li>
<li>process-sources - обрабатывает исходный код (подготавливает). Например, фильтрует определённые значения.</li>
<li>generate-resources - генерирует ресурсы, которые должны быть включены в пакет.</li>
<li>process-resources - копирует и отправляет ресурсы в указанную директори. Это фаза перед упаковкой.</li>
<li>compile - комплирует исходный код проекта.</li>
<li>process-classes - обработка файлов, полученных в результате компляции. Например, оптимизация байт-кода Java классов.</li>
<li>generate-test-sources - генерирует любые тестовые ресурсы, которые должны быть включены в фазу компиляции.</li>
<li>process-test-sources - обрабатывает исходный код тестов. Например, фильтрует значения.</li>
<li>test-compile - компилирует исходный код тестов в указанную директорию тестов.</li>
<li>process-test-classes - обрабатывает файлы, полученные в результате компиляции исходного кода тестов.</li>
<li>test - запускает тесты классов, используя приемлемый фреймворк юнит-тестирования (например, Junit).</li>
<li>prepare-package - выполняет все необходимые операции для подготовки пакета, непосредственно перед упаковкой.</li>
<li>package - преобразует скомпилированный код и пакет в дистрибутивный формат. Такие как JAR, WAR или EAR.</li>
<li>pre-integration-test - выполняет необходимые действия перед выполнением интеграционных тестов.</li>
<li>integration-test - обрабатывает и распаковывает пакет, если необходимо, в среду, где будут выполняться интеграционные тесты.</li>
<li>post-integration-test
 - выполняет действия, необходимые &nbsp;после выполнения интеграционных
 тестов. Например, освобождение ресурсов.</li>
<li>verify - выполняет любые проверки для подтверждения того, что пакет пригоден и отвечает критериям качества.</li>
<li>install - переносит пакет в локальный репозиторий, откуда он будет доступен для использования как зависимость в других проектах.</li>
<li>deploy
 - копирует финальный пакет (архив) в удалённый репозиторий для, того, 
чтобы сделать его доступным другим разработчикам и проектам.</li>
</ul>
</div>
<div>
Здесь также необходимо уточнить два момента:</div>
<div>
<ul>
<li>Когда мы выполняем команду Maven, например install, то будут выполенны фазы до install и фаза install.</li>
<li>Различные задачи Maven будут привязаны к различным фазам жизненнго цикла Maven в зависимости от типа архива (JAR/WAR/EAR).</li>
</ul>
<br></div>
<div>
<h3>
<ul>
<li>Из каких фаз состоит жизненный цикл сборки Site?</li>
</ul>
</h3>
<div>
Жизненный цикл сборки Site состоит из следующих этапов:</div>
</div>
<div>
<ul>
<li>pre-site</li>
<li>site</li>
<li>post-site</li>
<li>site-deploy</li>
</ul>
<br>
<h3>
<ul>
<li>Что сделает эта команда "mvn clean dependency:copy-dependencies package"?</li>
</ul>
</h3>
<div>
Порядок выполнения зависит от порядка вызова целей и фаз.&nbsp;Рассмотрим
 даную команду. Аргументы clean и package являются фазами сборки до тех 
пор, пока "dependency:copy-dependencies" является задачей. В этом 
случае, сначала будет выполнена фаза clean, после этого будет выполнена 
задача "dependency:copy-dependencies". После чего будет выполнена фаза 
package.<br>
<br></div>
<h3>
<ul>
<li>Что такое профиль сборки (Build Profile)?</li>
</ul>
</h3>
<div>
Профиль
 сборки - это множество настроек, которые могут быть использованы для 
установки или перезаписи стандартных значений сборки Maven. Используя 
профиль сборки Maven, мы можем настраивать сборку для различных 
окружений, таких как Разработка или Продакшн.</div>
</div>
<div>
Профили настраиваются в файле pom.xml с помощью элементов activeProfiles / profiles и запускаются различными методами.<br>
<br>
<h3>
<ul>
<li>Какие типы профилей сборки (Build Profiles) вы знаете?</li>
</ul>
</h3>
</div>
<div>
В Maven существует три основных типа профилей сборки:</div>
<div>
<ul>
<li>Per Project - определяется в POM файле, pom.xml</li>
<li>Per User - определяется в настройках Maven - xml файл (%USER_HOME%/.m2/settings.xml).</li>
<li>Global - определяется в глобальных настройках - xml файл (%M2_HOME%/conf/settings.xml).</li>
</ul>
<br></div>
<div>
<h3>
<ul>
<li>Как вы можете активировать профили сборки?</li>
</ul>
</h3>
</div>
<div>
Профиль сборки Maven может быть активирован различными способами:</div>
<div>
<ul>
<li>Использованием команды в консоли.</li>
<li>С помощью настроек Maven.</li>
<li>С помощью переменных окружения.</li>
<li>Настройках ОС.</li>
<li>Существующими, отсутствующими файлами.</li>
</ul>
<br>
<h3>
<ul>
<li>Для чего используются Maven плагины?</li>
</ul>
</h3>
<div>
Maven плагины используются для:</div>
</div>
<div>
<ul>
<li>Создания jar – файла.</li>
<li>Создания war – файла.</li>
<li>Компиляции кода файлов.</li>
<li>Юнит-тестирования кода.</li>
<li>Создание отчётов проекта.</li>
<li>Создание документации проекта.</li>
</ul>
<br></div>
<div>
<h3>
<ul>
<li>Какие типы плагинов существуют в Maven?</li>
</ul>
</h3>
</div>
<div>
В Maven существует два типа плагинов:</div>
<div>
<ul>
<li>Плагины
 сборки (Build plugins) - выполняются в процессе сборки и должны быть 
конфигурированны внутри блока &lt;build&gt;&lt;/build&gt; файла pom.xml.</li>
<li>Плагины
 отчётов (Reporting plugins) - выполняются в процесса генерирования 
сайта и должны быть конфигурированны внутри блока 
&lt;reporting&gt;&lt;/reporting&gt; файла pom.xml.</li>
</ul>
<br>
</div>
<div>
<h3>
<ul>
<li>Когда Maven использует внешние зависимости?</li>
</ul>
</h3>
<div>
Если
 необходимые файлы не найдены ни в центральном, ни на удалённом 
репозитории, тогда для решения этой проблемы используются внешние 
зависимости.</div>
<div>
<br>
</div>
<h3>
<ul>
<li>Что нужно определить для внешней зависимости?</li>
</ul>
</h3>
<div>
Внешние зависимости могут быть сконфигурированы в файле pom.xml таким же образом, как и другие зависимости, для этого:</div>
</div>
<div>
<ul>
<li>Определите groupId таким же именем, как и имя файла.</li>
<li>Определите artifactId таким же именем, как и имя файла.</li>
<li>Определите область видимости зависимости, как system.</li>
<li>Укажите абсолютный путь к файлу.</li>
</ul>
<br>
</div>
<div>
<h3>
<ul>
<li>Какая команда создает новый проект на основе архетипа?</li>
</ul>
</h3>
</div>
<div>
Переходим в нужную нам директорию и выполняем в терминале следющую команду:</div>
<div>
mvn archetype:generate<br>
<br>
<h3>
<ul>
<li>Что такое SNAPSHOT в Maven?</li>
</ul>
</h3>
<div>
SNAPSHOT
 - это специальная версия, которая показывает текущую рабочую копию. При
 каждой сборке Maven проверяет наличие новой snapshot версии на 
удалённом репозитории.<br>
<br></div>
<h3>
<ul>
<li>В чем разница между snapshot и версией?</li>
</ul>
</h3>
<div>
В
 случае с версией, если Maven однажды загрузил версию data-service:1.0, 
то он больше не будет пытаться загрузить новую версию 1.0 из 
репозитория. Для того, чтобы скачать обновлённый продукт data-service 
должен быть обновлён до версии 1.1.</div>
</div>
<div>
В
 случае со snapshot, Maven автоматически будет подтягивать крайний 
snapshot (data-service:1.0-SNAPSHOT) каждый раз, когда будет выполнятся 
сборка проекта.<br>
<br>
<h3>
<ul>
<li>Что такое транзитивная зависимость в Maven?&nbsp;</li>
</ul>
</h3>
<div>
Транзитивная
 зависимость - позволяет избегать необходимости изучать и указывать 
библиотеки, которые требуются для самой зависимости, и включает их 
автоматически. Необходимые библиотеки подгружаются в проект 
автоматически. При разрешении конфликта версий используется принцип 
«ближайшей» зависимости, то есть выбирается зависимость, путь к которой 
через список зависимых проектов является наиболее коротким.<br>
<br></div>
<h3>
<ul>
<li>Как Maven определяет какую версию зависимостей использовать когда встречается множественный вариант вибора?</li>
</ul>
</h3>
<div>
Dependency
 mediation - определяет, какая версия зависимости будет использоваться, 
когда встречается несколько версий артефактов, если две версии 
зависимости на той же глубине в дереве зависимостей, то будет 
использоваться та которая объявлена первой. Здесь важен порядок 
объявления: первое объявление выигрывает.</div>
</div>
<div>
<br>
</div>
<div>
<h3>
<ul>
<li>Что такое область видимости зависимостей (dependency scope)? Назовите значения dependency scope.</li>
</ul>
</h3>
<div>
Существует 6 областей:</div>
</div>
<div>
<ul>
<li>compile
 - это область по умолчанию, использутся, если ничего больше не 
определено. Compile зависимости доступны во всех classpath 
проекта.&nbsp;</li>
<li>provided
 - это очень похоже на compile, но указывает на то, что вы ожидаете от 
JDK или контейнера предоставить зависимость в ходе выполнения. Эта 
область доступна только на compilation и test classpath и не является 
транзитивной.</li>
<li>runtime - эта область указывает на то, что зависимость не обязательна для compilation, но для фаз выполнения.&nbsp;</li>
<li>test - эта область указывает, что зависимость не обязательна для нормального использования приложения.</li>
<li>system
 - эта область похожа на provided за исключением того, что вы 
предоставляете JAR. Артефакт всегда доступен и не смотрит в репозиторий.</li>
<li>import
 - эта область используется в зависимости типа pom в 
&lt;dependencyManagement&gt; разделе. Это указывает на то, что 
определенный POM будет заменен зависимостями в этом POM 
&lt;dependencyManagement&gt; разделе.</li>
</ul>
<br></div>
<div>
<h3>
<ul>
<li>Какой минимальный набор информации нужен для сопоставления ссылки зависимостей на раздел dependencyManagement?</li>
</ul>
</h3>
<div>
Минимальный набор информации такой {groupId, artifactId, type, classifier}.&nbsp;</div>
<div>
<br>
</div>
<h3>
<ul>
<li>Как сослаться на свойство(property) определенное в файле pom.xml?</li>
</ul>
</h3>
<div>
На
 все свойства в pom.xml, можно сослаться с помощью префиксов "project." 
или "pom." Ниже приведёт пример некоторых часто используемых элементов.</div>
</div>
<div>
${project.build.directory} - "target" директория, или тоже самое ${pom.project.build.directory}.</div>
<div>
${project.build.outputDirectory} - путь к директории куда компилятор складывает файлы по умолчанию "target/classes".</div>
<div>
${project.name} или ${pom.name} - имя проекта.</div>
<div>
${project.version} или ${pom.version} - версия проекта.<br>
<br>
<h3>
<ul>
<li>Для чего нужен элемент &lt;execution&gt; в POM файле?</li>
</ul>
</h3>
<div>
Элемент &lt;execution&gt; содержит информацию, необходимую для выполнения плагина.<br>
<br></div>
<h3>
<ul>
<li>Каким образом можно исключить зависимость в Maven?</li>
</ul>
</h3>
</div>
<div>
Файл
 описания проекта предусматривает возможность исключить зависимость в 
случае обнаружения цикличности или отсутствия необходимости в 
определённой библиотеке.&nbsp;Зависимость может быть исключена используя элемент exclusion.<br>
<br>
<h3>
<ul>
<li>Что является полным именем артефакта?</li>
</ul>
</h3>
</div>
<div>
&lt;groupId&gt;:&lt;artifactId&gt;:&lt;version&gt;<br>
<br>
<h3>
<ul>
<li>Если вы не определяете никакой информации, где же ваш POM унаследует ее?</li>
</ul>
</h3>
<div>
Все
 POM-и наследуются от родителя (несмотря на то явно определен он или 
нет). Это базовий POM известний как супер POM, он содержит значения, 
которие наследуются по умолчанию.<br>
<br></div>
<h3>
<ul>
<li>При сборке проекта Maven постоянно проверяет наличие обновлений в интернете. Можете ли вы собрать проект без интернета?</li>
</ul>
</h3>
</div>
<div>
Да, можете, но если в вашем локальном репозитории есть все необходимые для сборки артефакты.<br>
<br>
<h3>
<ul>
<li>Если при сборке проекта в тестах произошла ошибка. Как собрать проект без запуска тестов?&nbsp;</li>
</ul>
</h3>
</div>
<div>
Для запуска сборки без выполнения тестов добавьте -Dmaven.test.skip=true к команде в строке запуска maven:</div>
<div>
mvn install -Dmaven.test.skip=true<br>
<br>
<h3>
<ul>
<li>Как запустить только один тест?</li>
</ul>
</h3>
</div>
<div>
Для запуска только одного теста добавьте -Dtest=[Имя класса] к команде в строке запуска maven. Например:</div>
<div>
mvn install -Dtest=org.apache.maven.utils.ConverterTest<br>
<br>
<h3>
<ul>
<li>Как остановить распространение наследования плагинов для дочерних POM?</li>
</ul>
</h3>
</div>
<div>
Установить &lt;inherited&gt; в false.<br>
<br>
<h3>
<ul>
<li>Какие теги pom.xml визнаете.</li>
</ul>
</h3>
</div>
<div>
Вот некоторые из них:</div>
<div>
<ul>
<li>project - описывает проект, это элемент верхнего уровня во всех файлах pom.xml.</li>
<li>groupId - по-сути, это имя пакета. Полностью отражается в структуре каталогов.</li>
<li>artifactId - название проекта. В структуре каталогов не отображается.</li>
<li>version - версия проекта.</li>
<li>packaging - определяет, какой тип файла будет собран. Варианты: pom, jar, war, ear.</li>
<li>dependencies - указываются зависимости.</li>
<li>build - информация о сборке проекта.</li>
<li>name - это уже необязательные описания проекта. В данном случае его название.</li>
<li>description - элемент представляет собой общее описание вашего проекта. Это часто используется в генерации документации Maven.</li>
<li>url - интернет-страница проекта.</li>
<li>repositories - репозитории для артефактов.</li>
<li>pluginRepositories - репозитории для плагинов Maven.</li>
</ul>
</div>

</body></html>