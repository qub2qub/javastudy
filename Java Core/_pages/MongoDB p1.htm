<!DOCTYPE html>
<html lang="en"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
	<meta charset="UTF-8">
	<title>MongoDB p1</title>
<link rel="stylesheet" href="../../Git Guide/grey.css">
</head>
<body>

<h3 style="text-align: left;">
<ul style="text-align: left;">
<li>Что такое NoSQL?</li>
</ul>
</h3>
<div>
NoSQL
 (Not only SQL) - это ряд технологий, подходов, проектов направленных на
 реализацию моделей баз данных, имеющих существенные отличия от 
традиционных СУБД, работающих с языком SQL. Концепция NoSQL не отрицает 
SQL, она лишь стремится решить проблемы и вопросы, с которыми не 
достаточно хорошо справляется РСУБД. Чаще всего данные в NoSQL решении 
представляются в виде хеш-таблиц, деревьев, документов и пр.<br>
<br></div>
<div>
<h3>
<ul>
<li>Какие есть типы хранилищ данных в NoSQL?</li>
</ul>
</h3>
</div>
<div>
В зависимости от модели данных и подходов к распределённости и репликации можно выделить четыре типа хранилищ:</div>
<div>
<ul>
<li>"ключ-значение" (key-value store)</li>
<li>документно-ориентированные (document store)<a name="more"></a></li>
<li>хранилища семейств колонок (column database)</li>
<li>графовые базы данных (graph database).</li>
</ul>
<br></div>
<div>
<h3>
<ul>
<li>Что такое MongoDB?</li>
</ul>
</h3>
</div>
<div>
MongoDb
 - это документо-ориентированная база данных, в отличие от традиционных 
реляционных баз данных, таких как MySQL или PostgreSQL не использует 
табличный способ представления со связями через внешние ключи, 
основанная на принципе хранении документов в BSON(Binary JSON) формате. 
Т.е. каждая запись это документ, без жестко заданной схемы, который 
может содержать вложенные документы.<br>
<br>
<h3>
<ul>
<li>На каком языке написана MongoDB?</li>
</ul>
</h3>
</div>
<div>
MongoDB написана и реализована на С++.<br>
<br>
<h3>
<ul>
<li>Какие языки программирования можно использовать с MongoDB?</li>
</ul>
</h3>
</div>
<div>
Клиентские
 драйверы MongoDB поддерживают все популярные языки программирования, 
так что выбор языка не является проблемой. Вы можете использовать любой 
язык, какой хотите.<br>
<br>
<h3>
<ul>
<li>Использует ли таблицы для хранения данных, база данных MongoDB?</li>
</ul>
</h3>
</div>
<div>
Нет. Для хранения данных вместо таблиц, MongoDB использует "Коллекции" (collections).<br>
<br>
<h3>
<ul>
<li>Какие преимущества MongoDB?</li>
</ul>
</h3>
</div>
<div>
Основные возможности MongoDB:</div>
<div>
<ul>
<li>Документо-ориентированное хранилище (простая и мощная JSON-подобная схема данных)</li>
<li>Достаточно гибкий язык для формирования запросов</li>
<li>Динамические запросы</li>
<li>Полная поддержка индексов</li>
<li>Профилирование запросов</li>
<li>Быстрые обновления "на месте"</li>
<li>Эффективное хранение двоичных данных больших объёмов, напр., фото и видео</li>
<li>Журналирование операций, модифицирующих данные в БД</li>
<li>Поддержка отказоустойчивости и масштабируемости: асинхронная репликация, набор реплик и шардинг</li>
<li>Может работать в соответствии с парадигмой MapReduce</li>
<li>Имеет распределенный доступ к данным, расположенных на нескольких серверах</li>
</ul>
<br></div>
<div>
<h3>
<ul>
<li>Какие недостатки MongoDB?</li>
</ul>
</h3>
</div>
<div>
Недостатки:</div>
<div>
<ul>
<li>Отсутствует
 оператор "join". Обычно данные могут быть организованы более 
денормализованным способом, но на разработчиков ложится дополнительная 
нагрузка по обеспечению непротиворечивости данных.</li>
<li>Нет
 такого понятия, как "транзакция". Атомарность гарантируется только на 
уровне целого документа, т.е. частичное обновление документа произойти 
не может.</li>
<li>Отсутствует понятие "изоляции". Любые данные, которые считываются одним клиентом, могут параллельно изменяться другим клиентом.</li>
<li>Менее чем более стабильна, не рекомендовано использовать в биллинге</li>
<li>Требовательна к ресурсам - память и место на диске</li>
</ul>
<br></div>
<div>
<h3>
<ul>
<li>Что такое пространство имен в MongoDB?</li>
</ul>
</h3>
</div>
<div>
Пространство
 имен в MongoDB это конкатенация имени базы данных и названия коллекции.
 Для например school.students, где school - имя базы данных и students -
 название коллекции.<br>
<br>
<h3>
<ul>
<li>Что такое репликация?</li>
</ul>
</h3>
</div>
<div>
Репликация
 - это процесс синхронизации данных между несколькими серверами. 
Позволяет добиться большей масштабируемости, и повысить доступность и 
сохранность данных. Репликация также позволяет восстанавливать даные 
после сбоя аппаратного обеспечения. С помощью дополнительных копий 
данных, вы можете выделить один сервер для аварийного восстановления, 
отчетности или резервного копирования. MongoDB поддерживает 2 формы 
репликации:</div>
<div>
<ul>
<li>реплисеты(Replica Sets )</li>
<li>ведущий-ведомый(Master-Slave).</li>
</ul>
<br></div>
<div>
<h3>
<ul>
<li>Поддерживает ли MongoDB ограничения внешнего ключа(foreign key)?</li>
</ul>
</h3>
</div>
<div>
Нет.<br>
<br>
<h3>
<ul>
<li>Как мы можем достичь primary key - foreign key отношения в MongoDB?</li>
</ul>
</h3>
</div>
<div>
По
 умолчанию MongoDB не поддерживает primary key - foreign key отношения. 
Тем не менее, мы можем достичь этой концепции путем встраивания одного 
документа внутри другого. Для например документ "адрес" может быть 
встроен внутри документа "клиент".<br>
<br>
<h3>
<ul>
<li>Объясните структуру ObjectID в MongoDB.</li>
</ul>
</h3>
</div>
<div>
ObjectID ето 12-байт типа BSON, имеющий следующую структуру:.</div>
<div>
<ul>
<li>Первые 4 байта, представляющие секунды с эпохи Unix&nbsp;</li>
<li>Следующие 3 байта являются идентификатором машины</li>
<li>Следующие 2 байта являются идентификатором процесса</li>
<li>Последние 3 байта ето случайная величина счетчика:&nbsp;</li>
</ul>
</div>
<div>
MongoDB
 использует ObjectID как значение по умолчанию поля _id каждого 
документа, который генерируется во время создания любого документа. 
ObjectID делает все поля _id уникальными.</div>
<div>
Для создания нового ObjectID используется следующий код: NewObjectId = ObjectId()<br>
<br>
<h3>
<ul>
<li>Если удалить документ из базыданных, удалится ли он с диска?</li>
</ul>
</h3>
</div>
<div>
Да. Удаление документа из базы данных приведет к его удалению с диска.<br>
<br>
<h3>
<ul>
<li>Что такое индексы в MongoDB?</li>
</ul>
</h3>
</div>
<div>
Индексы
 - ето специальная структура данных, которая хранит небольшую часть 
набора данных. Индекс сохраняет значение конкретного поля или набора 
полей, упорядоченых по величине поля, как указано в индексе.&nbsp;</div>
<div>
Индексы
 поддерживать эффективное выполнение запросов. Без индексов, MongoDB 
должна сканировать каждый документ коллекции, чтобы выбрать те 
документы, которые соответствуют оператору запроса. Это сканирование 
крайне неэффективно и требует от &nbsp;MongoDB обработки большого объема
 данных.</div>
<div>
Индексы
 в MongoDB работают схожим образом с индексами в реляционных базах 
данных: они ускоряют выборку и сортировку данных. Индексы создаются с 
помощью ensureIndex.<br>
<br>
<h3>
<ul>
<li>Сколько индексов создается по умолчанию в MongoDB для новой коллекции?</li>
</ul>
</h3>
</div>
<div>
По умолчанию, MongoDB создает только _id для каждой коллекции.<br>
<br></div>
<div>
<h3>
<ul>
<li>Что такое скрытый запрос в MongoDB?</li>
</ul>
</h3>
</div>
<div>
В соответствии с официальной документации MongoDB, скрытый запрос ето запрос в котором:</div>
<div>
<ul>
<li>все поля в запросе являются частью индекса используемого в запросе</li>
<li>все поля в запросе возвращаются в том же индексе</li>
</ul>
<br></div>
<div>
<h3>
<ul>
<li>Поддерживает ли MongoDB поиск текста?</li>
</ul>
</h3>
</div>
<div>
Да.
 MongoDB поддерживает создание текстовых индексов для поддержки поиска 
текста внутри строки. Эта функция, была введена в версии 2.6.<br>
<br></div>
<div>
<h3>
<ul>
<li>Какая команда позволяет получить все индексы определенной коллекции?</li>
</ul>
</h3>
</div>
<div>
<div class="separator" style="clear: both; text-align: center;">
<a href="https://3.bp.blogspot.com/-_HvHuIBRvms/VygvS5MJGsI/AAAAAAAAAns/4Pd84GfMLfIPOZ5SsRcqhNYkY7GK4l__ACLcB/s1600/q019_p01.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img src="MongoDB%20p1_files/q019_p01.jpg" border="0"></a></div>
<div class="separator" style="clear: both; text-align: justify;">
<br></div>
<h3>
<ul>
<li>Что такое Шардинг в MongoDB?</li>
</ul>
</h3>
Шардинг
 - это подход к масштабируемости, когда отдельные части данных хранятся 
на разных серверах. Шардинг решает проблему горизонтального 
масштабирования. Примитивный пример: хранить данные пользователей, чьё 
имя начинается на буквы A-M на одном сервере, а остальных - на другом.<br>
<br>
<h3>
<ul>
<li>По умолчанию, MongoDB пишет и читает данные из primary и secondary наборов реплик. Правда ето или ложь?</li>
</ul>
</h3>
Ложь. MongoDB записывает данные только в primary набор реплик.<br>
<br>
<h3>
<ul>
<li>Почему MongoDB не является предпочтительным решением для 32-битных систем?</li>
</ul>
</h3>
При
 работе с 32-разрядной сборкой MongoDB, общий размер хранилища для 
сервера, включая данные и индексы, составляет 2 гигабайта. По этой 
причине, не рекомендуеться развертывать MongoDB для продакшина на 
32-разрядных машинах.<br>
Если вы используете 64-разрядную сборку MongoDB, практически нет никаких ограничений на размер хранилища.<br>
<br>
<br>
<h3>
<ul>
<li>Какая команда,позволяет проверить, являетесь ли вы на главном сервере или нет?</li>
</ul>
</h3>
<div class="separator" style="clear: both; text-align: center;">
<a href="https://3.bp.blogspot.com/-FdaL_oP_ovo/Vygv74RiCUI/AAAAAAAAAn0/O9a6Dv2BZfc9KYrqL9syVD9lSHzKXxy4gCLcB/s1600/q023_p01.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img src="MongoDB%20p1_files/q023_p01.jpg" border="0"></a></div>
<div class="separator" style="clear: both; text-align: justify;">
<br></div>
</div>
<h3>
<ul>
<li>Что такое GridFS?</li>
</ul>
</h3>
<div>
GridFS
 - это спецификация, определённая в базе данных MongoDB для хранения и 
извлечения файлов, размер которых превышает 16 Мб. Такое ограничение 
размера обусловлено использованием в MongoDB формата BSON.</div>
<div>
Согласно
 спецификации GridFS файл разбивается на несколько фрагментов (англ. 
chunks), каждый из которых не может быть больше, чем 255 Кб. Каждый 
такой фрагмент хранится как отдельный файл и к нему может быть 
осуществлён доступ как к отдельному файлу.</div>
<div>
Для
 обеспечения корректной сборки разбитого на фрагменты файла GridFS 
хранит коллекцию метаданных - отдельных файлов, содержащих информацию о 
хранящихся в файловой системе документах.<br>
<br></div>
<h3>
<ul>
<li>Что такое Map/Reduce?</li>
</ul>
</h3>
<div>
Map/Reduce
 - это подход к обработке больших объемов данных, который состоит из 
двух фаз: Map - предварительная обработка входных данных и Reduce - 
обработка тем или иным способом выборки, полученной на стадии Map. 
Map/Reduce не является свойством исключительно NoSQL-решений. 
Аналогичным образом можно работать с большими объемами данных и в РСУБД.
 Но большинство NoSQL-систем (за исключением, может быть, самых простых 
key-value хранилищ) реализуют Map/Reduce в том или ином виде.</div>
<div>
Map/Reduce
 имеет два серьёзных преимущества по сравнению с традиционными 
решениями. Первое и самое главное преимущество - это производительность.
 Теоретически MapReduce может быть распараллелен, что позволяет 
обрабатывать огромные массивы данных на множестве 
ядер/процессоров/машин. Это пока не является преимуществом MongoDB. 
Вторым преимуществом MapReduce является возможность описывать обработку 
данных нормальным кодом. По сравнению с тем, что можно сделать с помощью
 SQL, возможности кода внутри MapReduce намного богаче и позволяют 
расширить рамки возможного даже без использования специализированных 
решений.</div>
<div>
<br></div>
<h3>
<ul>
<li>Как создать/удалить коллекцию в MongoDB?</li>
</ul>
</h3>
<div>
db.createCollection(name,options) - для создания коллекции в MongoDB</div>
<div>
db.collection.drop() - для удаления коллекции в MongoDB</div>
<div>
<br></div>
<h3>
<ul>
<li>Какова роль профайлера в MongoDB?</li>
</ul>
</h3>
<div>
Профайлера
 базы данных MongoDB показывает рабочие характеристики каждой операции с
 базой данных. Для примера вы можете найти запросы с помощью 
профилировщика которие на самом деле медленнее, чем они должны быть.</div>
<div>
Профайлер
 MongoDB можно включить с помощью следующего вызова: 
db.setProfilingLevel(2); чтобы выключить профайлер, нужно повторно 
вызвать setProfileLevel, только передав 0 в качестве аргумента.</div>
<div>
<br></div>
<h3>
<ul>
<li>Какая команда позволяет вставить документ?</li>
</ul>
</h3>
<div>
database.collection.insert(document) - для вставки документа в колекцию.</div>
<div>
<br></div>
<h3>
<ul>
<li>Приведите пример использования индекса в MongoDB.</li>
</ul>
</h3>
<div>
Простой пример:</div>
<div class="separator" style="clear: both; text-align: center;">
<a href="https://2.bp.blogspot.com/-IqGoZuHpcpM/Vygw-hT0CeI/AAAAAAAAAoA/cE5xGs7vIP411Az00N9x3bvRMJpu-OgXgCLcB/s1600/q029_p01.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img src="MongoDB%20p1_files/q029_p01.jpg" border="0"></a></div>
<div>
<br></div>
<h3 style="text-align: left;">
<ul style="text-align: left;">
<li>Какой метод вернёт список всех документов в колекции?</li>
</ul>
</h3>
<div class="separator" style="clear: both; text-align: center;">
<a href="https://2.bp.blogspot.com/-ZjyoWVfkeWk/VygxMUYrEsI/AAAAAAAAAoE/hzKazj4PXBIqkQ3EfbhPo5GJjjFwiOGcQCLcB/s1600/q030_p01.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img src="MongoDB%20p1_files/q030_p01.jpg" border="0"></a></div>
<div class="separator" style="clear: both; text-align: justify;">
<br></div>
<h3 style="text-align: left;">
<ul style="text-align: left;">
<li>Что такое селекторы запросов в MongoDB?</li>
</ul>
</h3>
<div>
Селектор
 - это JSON-объект, в простейшем случае это может быть даже {}, что 
означает выборку всех документов (аналогичным образом работает null). 
Селектор запросов MongoDB аналогичен предложению where SQL-запроса. Как 
таковой он используется для поиска, подсчёта, обновления и удаления 
документов из коллекций.</div>
<div>
<br></div>
<h3>
<ul>
<li>Что вы знаете об обновлении/вставке в MongoDB?</li>
</ul>
</h3>
<div>
Один
 из приятных сюрпризов операции обновления - это возможность 
обновления/вставки (upsert от update - обновить и insert - вставить) 
Обновление/вставка обновляет документ, если он найден, или создаёт новый
 - если не найден. Обновление/вставка - полезная вещь в некоторых 
случаях; когда столкнётесь с подобным, сразу поймёте. Чтобы разрешить 
вставку при обновлении, установите третий параметр в true.</div>
<div>
Пример
 из жизни - счётчик посещений для веб-сайта. Если мы хотим в реальном 
времени видеть количество посещений страницы, мы должны посмотреть, 
существует ли запись, и - в зависимости от результата - выполнить update
 либо insert.</div>
<div>
<br></div>
<h3>
<ul>
<li>Что вы знаете об &nbsp;условных оператораторах в MongoDB?</li>
</ul>
</h3>
<div>
В MongoDB в запросах можно использовать условные:</div>
<div>
</div>
<ul>
<li>$gt - больше чем</li>
<li>$lt - меньше чем</li>
<li>$gte &nbsp;- больше или равно</li>
<li>$lte - меньше или равно</li>
<li>$ne &nbsp;- извлекает все документы, не соответствующие некоторому условию</li>
<li>$or
 - определяет набор пар ключ-значение, которые должны иметься в 
документе. И если документ имеет хоть одну такую пару ключ-значение, то 
он соответствует данному запросу и извлекается из бд</li>
<li>$size - используется для нахождения документов, в которых массивы имеют число элементов, равным значению $size</li>
<li>$exists - позволяет извлечь только те документы, в которых определенный ключ присутствует или отсутствует</li>
<li>$regex - задает регулярное выражение, которому должно соответствовать значение поля</li>
</ul>
Поиск по массивам и операторы $in, $nin, $all<br>
<div>
</div>
<ul>
<li>$in - определяет массив возможных выражений и ищет те ключи, значение которых имеется в массиве</li>
<li>$nin - определяет массив возможных выражений и ищет те ключи, значение которых отсутствует в этом массиве</li>
<li>$all
 - похож на $in: он также определяет массив возможных выражений, но 
требует, чтобы документы имели весь определяемый набор выражений</li>
</ul>
Примеры использования:<br>
<div class="separator" style="clear: both; text-align: center;">
<a href="https://3.bp.blogspot.com/-ufQ-ATZ31Sg/VygyYBGO00I/AAAAAAAAAoU/uT3vguNY3JAJSD9myqBHLtw3l4etmQVugCLcB/s1600/q033_p01.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img src="MongoDB%20p1_files/q033_p01.jpg" border="0"></a></div>
<div class="separator" style="clear: both; text-align: justify;">
<br></div>
<h3>
<ul>
<li>Как удалить документ в MongoDB?</li>
</ul>
</h3>
Для удаления документов в MongoDB предусмотрен метод remove:<br>
<div class="separator" style="clear: both; text-align: center;">
<a href="https://1.bp.blogspot.com/-gHkkKuadjJI/VygylrNxXGI/AAAAAAAAAoY/VhM14UdlPBU8GvlNwfpSvi_Tb1NTvQgNwCLcB/s1600/q034_p01.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img src="MongoDB%20p1_files/q034_p01.jpg" border="0"></a></div>
В итоге все найденные документы с name=Tom будут удалены.<br>

</body></html>