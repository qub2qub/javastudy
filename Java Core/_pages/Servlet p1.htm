<!DOCTYPE html>
<html lang="en"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
	<meta charset="UTF-8">
	<title>Servlet p1</title>
<link rel="stylesheet" href="grey.css">
</head>
<body>
<h3>
<ul>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Что такое сервлет?</span></li>
</ul>
</h3>
<div>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Сервлеты
 (Servlets) - это java-программы, которые выполняются на серверной 
стороне Web-приложения. Точно так же, как апплеты динамически расширяют 
функциональные возможности Web-браузера, сервлеты динамически расширяют 
функциональные возможности Web-сервера. Хотя сервлеты могут обслуживать 
любые запросы, они обычно используются для расширения веб-серверов. Для 
таких приложений технология Java Servlet определяет HTTP-специфичные 
сервлет классы. Пакеты javax.servlet и javax.servlet.http обеспечивают 
интерфейсы и классы для создания сервлетов.</span></div>
<div class="separator" style="clear: both; text-align: center;">
<a href="https://1.bp.blogspot.com/-sUU7_e2zdcE/V0HKxnhzg3I/AAAAAAAAAuE/0H_Zes4P2uwSwFLkI1mT9DJghUtlaZrkgCLcB/s1600/q001_p01.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"><img src="Servlet%20p1_files/q001_p01.jpg" border="0"></span></a></div>
<div>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"></span><br></span>
<br>
<a name="more"></a></div>
<h3>
<ul>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Какова структура веб-проекта?</span></li>
</ul>
</h3>
<div class="separator" style="clear: both; text-align: center;">
<a href="https://1.bp.blogspot.com/-HJYvhKM0hFo/V0HLCCZFhwI/AAAAAAAAAuI/R1jygGH2OvYRSgYFC2y3Dm-zVAmYk7s1ACLcB/s1600/q002_p01.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"><img src="Servlet%20p1_files/q002_p01.jpg" border="0"></span></a></div>
<div>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Источник <a href="http://maven.apache.org/guides/introduction/introduction-to-the-standard-directory-layout.html">maven.apache.org</a>&nbsp;</span><br>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"><br></span></div>
<div>
<h3>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"><ul>
<li>Что такое контейнер сервлетов? Жизненный цикл сервлета.</li>
</ul>
</span></h3>
<div>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Контейнер сервлетов - программа, управляющая жизненным циклом сервлетов.&nbsp;</span><br>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Жизненный
 цикл сервлета: им управляет контейнер сервлетов, при первом обращении к
 сервлету происходит его загрузка в память и вызывается метод init(). На
 протяжении работы приложения происходят вызовы методы service() для 
обработки запросов клиента. По завершению работы приложения вызывается 
метод destroy() и сервлет выгружается из памяти.</span><br>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"><br></span></div>
<h3>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"><ul style="font-family: arial, helvetica, sans-serif;">
<li>Каковы задачи, функциональность контейнера сервлетов?</li>
</ul>
</span></h3>
<div style="font-family: arial, helvetica, sans-serif;">
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Контейнер
 сервлетов может работать как полноценный самостоятельный веб-сервер, 
быть поставщиком страниц для другого веб-сервера, например Apache, или 
интегрироваться в Java EE сервер приложений. Обеспечивает обмен данными 
между сервлетом и клиентами, берёт на себя выполнение таких функций, как
 создание программной среды для функционирующего сервлета, идентификацию
 и авторизацию клиентов, организацию сессии для каждого из них.</span><br>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"><br></span></div>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">
</span></span>
<h3 style="font-family: arial, helvetica, sans-serif;">
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">
<ul>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Чем отличается sendRedirect() от forward()?</span></li>
</ul>
</span></h3>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">
<div style="font-family: arial, helvetica, sans-serif;">
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Для
 вызова JSP по относительному пути применяется метод forward(), для 
обращения к JSP по абсолютному пути используется метод sendRedirect(). 
Отличие этих методов состоит в том, что с методом forward() передается 
уже существующий объект запроса request, а при вызове метода 
sendRedirect() формируется новый запрос. Информацию в последнем случае 
следует переда вать с другими объектами. К тому же метод forward() 
срабатывает быстрее.</span></div>
<div style="font-family: arial, helvetica, sans-serif;">
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"><br></span></div>
<h3 style="font-family: arial, helvetica, sans-serif;">
<ul>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Что вы знаете о сервлет фильтрах?</span></li>
</ul>
</h3>
<div style="font-family: arial, helvetica, sans-serif;">
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Реализация
 интерфейса Filter позволяет создать объект, который перехватывает 
запрос, может трансформировать заголовок и содержимое запроса клиента. 
Фильтры не создают запрос или ответ, а только модифицируют их. Фильтр 
выполняет предварительную обработку запроса, прежде чем тот попадает в 
сервлет, с последующей (если необходимо) обработкой ответа, исходящего 
из сервлета. Фильтр может взаимодействовать с разными типами ресурсов, в
 частности, и с сервлетами, и с JSP-страницами. Сервлетные фильтры 
могут:</span></div>
<div>
<ul>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">перехватывать инициацию сервлета прежде, чем сервлет будет инициирован.</span></li>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">определить содержание запроса прежде, чем сервлет будет инициирован.</span></li>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">модифицировать заголовки и данные запроса, в которые упаковывается поступающий запрос.</span></li>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">модифицировать заголовки и данные ответа, в которые упаковывается получаемый ответ.</span></li>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">перехватывать инициацию сервлета после обращения к сервлету.</span></li>
</ul>
<ul style="font-family: arial, helvetica, sans-serif;">
</ul>
</div>
<div style="font-family: arial, helvetica, sans-serif;">
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Сервлетный
 фильтр может быть сконфигурирован так, что он будет работать с одним 
сервлетом или группой сервлетов. Основой для формирования фильтров 
служит интерфейс javax.servlet.Filter, который реализует три метода:</span></div>
<div style="font-family: arial, helvetica, sans-serif;">
<ul>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">void init (FilterConfig config) throws ServletException;</span></li>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">void destroy();</span></li>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">void doFilter (ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException;</span></li>
</ul>
</div>
<div style="font-family: arial, helvetica, sans-serif;">
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Метод
 init() вызывается прежде, чем фильтр начинает работать, и настраивает 
конфигурационный объект фильтра. Метод doFilter выполняет 
непосредственно работу фильтра. Таким образом, сервер вызывает init() 
один раз, чтобы запустить фильтр в работу, а затем вызывает doFilter() 
столько раз, сколько запросов будет сделано непосредственно к данному 
фильтру. После того, как фильтр заканчивает свою работу, вызывается 
метод destroy().</span></div>
<div style="font-family: arial, helvetica, sans-serif;">
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"><br></span></div>
<h3 style="font-family: arial, helvetica, sans-serif;">
<ul>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Зачем нужны слушатели в сервлетах?</span></li>
</ul>
</h3>
<div style="font-family: arial, helvetica, sans-serif;">
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Слушатели
 контекста и сессий - это классы, которые могут следить за тем, когда 
контекст или сессия были инициализированы, или отслеживать время, когда 
они должны быть уничтожены, и когда атрибуты были добавлены или удалены 
из контекста или сессии. Servlet 2.4 расширяет модель слушателей 
запроса, позволяя отслеживать, как запрос создается и уничтожается, и, 
как атрибуты добавляются и удаляются из сервлета. В Servlet 2.4 
добавлены следующие классы:</span></div>
<div style="font-family: arial, helvetica, sans-serif;">
<ul>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">ServletRequestListener</span></li>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">ServletRequestEvent</span></li>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">ServletRequestAttributeListener</span></li>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">ServletRequestAttributeEvent</span></li>
</ul>
</div>
<div style="font-family: arial, helvetica, sans-serif;">
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"><br></span></div>
<h3 style="font-family: arial, helvetica, sans-serif;">
<ul>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Как обработать исключения, выброшенные другим сервлетом в приложении?</span></li>
</ul>
</h3>
<div style="font-family: arial, helvetica, sans-serif;">
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Так
 как браузер понимает только HTML, то когда приложение выбросит 
исключение контейнер сервлетов обработает исключение и создаст HTML 
response. Это аналогично тому что происходит при кодах ошибок вроде 404,
 403 и т.д. Servlet API предоставляет поддержку собственных сервлетов 
для обработки исключений и ошибок, которые мы можем задать в дескрипторе
 развертывания. Главная задача таких сервлетов - обработать ошибку или 
исключение и отправить понятный HTML ответ пользователю. Например, можно
 предоставить ссылку на главную страницу, а так же описание некоторых 
деталей об ошибке.</span></div>
<div class="separator" style="clear: both; text-align: center;">
<a href="https://2.bp.blogspot.com/-K4gv00IttR4/V0HNgscBHoI/AAAAAAAAAuY/KHrYBgA-rnMOw-4Bebdrrxy1EN8mwgygwCLcB/s1600/q008_p01.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"><img src="Servlet%20p1_files/q008_p01.jpg" border="0"></span></a></div>
<div style="font-family: arial, helvetica, sans-serif;">
<div>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"><br></span></div>
<h3>
<ul>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Что такое дескриптор развертывания?</span></li>
</ul>
</h3>
<div>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Дескриптор
 развертывания - это конфигурационный файл артефакта, который будет 
развернут в контейнере сервлетов. В спецификации Java Platform, 
Enterprise Edition дескриптор развертывания описывает то, как компонент,
 модуль или приложение (такое, как веб-приложение или приложение 
предприятия) должно быть развернуто.</span></div>
<div>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Этот
 конфигурационный файл указывает параметры развертывания для модуля или 
приложения с определенными настройками, параметры безопасности и 
описывает конкретные требования к конфигурации. Для синтаксиса файлов 
дескриптора развертывания используется язык XML.</span></div>
<div>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"><br></span></div>
<h3>
<ul>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Как реализовать запуск сервлета с запуском приложения?</span></li>
</ul>
</h3>
<div>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Контейнер
 сервлетов обычно загружает сервлет при первом запросе клиента, но 
иногда необходимо загрузить сервлет прямо на старте приложения (например
 если сервлет объемный и будет долго грузиться). Для этого необходимо 
использовать элемент load-on-startup в дескрипторе (или аннотацию 
loadOnStartup), который укажет необходимость загрузки сервлете при 
запуске.</span></div>
</div>
<div class="separator" style="clear: both; text-align: center;">
<a href="https://2.bp.blogspot.com/-yLUqnYL_9u4/V0HN9MQGjLI/AAAAAAAAAuc/DYE4qAQTBt4OrcHxRH4SkOZ9hs_VzBKugCLcB/s1600/q010_p01.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"><img src="Servlet%20p1_files/q010_p01.jpg" border="0"></span></a></div>
<div style="font-family: arial, helvetica, sans-serif;">
<div>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Значение
 должно быть int. Если значение отрицательное, то сервлет будет загружен
 при запросе клиента, а если 0 и далее, то загрузится на старте 
приложения. Чем меньше число, тем раньше в очереди на загрузку будет 
сервлет.</span></div>
<div>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"><br></span></div>
<h3>
<ul>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Что представляет собой объект ServletConfig?</span></li>
</ul>
</h3>
<div>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Интерфейс
 javax.servlet.ServletConfig используется для передачи конфигурационной 
информации сервлету. Каждый сервлет имеет свой собственный объект 
ServletConfig, за создание экземпляра которого ответственен контейнер 
сервлетов. Для установки параметров конфигурации используются init 
параметры в web.xml (или аннотации WebInitParam). Для получения объекта 
ServletConfig данного сервлета используется метод getServletConfig().</span></div>
<div>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"><br></span></div>
<h3>
<ul>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Что представляет собой объект ServletContext?</span></li>
</ul>
</h3>
<div>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Интерфейс
 javax.servlet.ServletContext определяет ряд методов, которые сервлет 
использует, чтобы связаться с его контейнером сервлета, например, 
получить тип MIME файла, диспетчеризировать запросы, или записать в файл
 журнала. Объект ServletContext является уникальным и доступен всем 
сервлетам веб приложения. Мы можем использовать объект ServletContext, 
когда нам необходимо предоставить доступ одному или нескольким сервлетам
 к инициализированным параметрам веб приложения. Для этого используется 
элемент &lt;context-param&gt; в web.xml. Объект ServletContext можно 
получить с помощью метода getServletContext() у интерфейса 
ServletConfig.</span></div>
<div>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Контейнеры
 сервлетов так же могут предоставлять context объекты, уникальные для 
группы сервлетов. Каждая из групп будет связана со своим набором URL 
путей хоста.</span></div>
<div>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">ServletContext
 был расширен в спецификации Servlet 3 и предоставляет программное 
добавление слушателей и фильтров в приложение. Так же у этого интерфейса
 имеются множество полезных методов вроде getMimeType(), 
getResourceAsStream() и т.д..</span></div>
<div>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"><br></span></div>
<h3>
<ul>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">В чем отличия ServletContext и ServletConfig?</span></li>
</ul>
</h3>
<div>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Ниже приведены некоторые отличия:</span></div>
<div>
<ul>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">ServletConfig является уникальный объектом для каждого сервлета, в то время как ServletContext уникальный для всего приложения.</span></li>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">ServletConfig
 используется для предоставления параметров инициализации сервлету, а 
ServletContext для предоставления параметров инициализации приложения 
для всех сервлетов.</span></li>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">У
 нас нет возможности устанавливать атрибуты в объекте ServletConfig, в 
то время как можно установить атрибуты в объекте ServletContext, которые
 будут доступны другим сервлетам.</span></li>
</ul>
</div>
<div>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"><br></span></div>
<h3>
<ul>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Интерфейс ServletResponse.</span></li>
</ul>
</h3>
<div>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Интерфейс ServletResponse - это инструмент для отправки данных клиенту. Все методы данного инструмента служат именно этой цели.</span></div>
<div>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"><br></span></div>
<h3>
<ul>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Интерфейс ServletRequest.</span></li>
</ul>
</h3>
<div>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Интерфейс
 ServletRequest - это инструмент для получения параметров HTTP запроса. 
Этот интерфейс имеет некоторые методы, идентичные по названию и 
назначению с ServletContext.</span></div>
<div>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"><br></span></div>
<h3>
<ul>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Что такое Request Dispatcher?</span></li>
</ul>
</h3>
<div>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Интерфейс
 RequestDispatcher используется для передачи запроса другому ресурсу 
(это может быть HTML, JSP или другой сервлет в том же приложении). Мы 
можем использовать это для добавления контента другого ресурса к ответу.
 Этот интерфейс используется для внутренней коммуникации между 
сервлетами в одном контексте. В интерфейса реализовано два метода:</span></div>
<div>
<ul>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">void
 forward(ServletRequest var1, ServletResponse var2) - передает запрос из
 сервлета к другому ресурсу (сервлету, JSP или HTML файлу) на сервере.</span></li>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">void include(ServletRequest var1, ServletResponse var2) - включает контент ресурса (сервлет, JSP или HTML страница) в ответ.</span></li>
</ul>
</div>
<div>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Доступ
 к интерфейсу можно получить с помощью метода ServletContext 
getRequestDispatcher(String s). Путь должен начинаться с / , который 
будет интерпретироваться относительным текущего корневого пути 
контекста.</span></div>
<div>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"><br></span></div>
<h3>
<ul>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Как можно создать блокировку (deadlock) в сервлете?</span></li>
</ul>
</h3>
<div>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Дедлок
 (deadlock) можно получить реализовав зацикленный вызов метода, например
 вызвав метод doPost() в методе doGet() и вызвать doGet() в методе 
doPost().</span></div>
<div>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"><br></span></div>
<h3>
<ul>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Как получить адрес сервлета на сервере?</span></li>
</ul>
</h3>
<div>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Для
 получения актуального пути сервлета на сервере можно использовать эту 
конструкцию: getServletContext().getRealPath(request.getServletPath()).</span></div>
<div>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"><br></span></div>
<h3>
<ul>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Как получить информацию о сервере из сервлета?</span></li>
</ul>
</h3>
<div>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Информацию
 о сервере можно получить с использованием объекта ServletContext с 
помощью метода getServerInfo(). Т.е. 
getServletContext().getServerInfo().</span></div>
<div>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"><br></span></div>
<h3>
<ul>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Как получить ip адрес клиента на сервере?</span></li>
</ul>
</h3>
<div>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Использовать request.getRemoteAddr() для получения ip клиента в сервлете.</span></div>
<div>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"><br></span></div>
<h3>
<ul>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Что вы знаете о классах обертках (wrapper) для сервлетов?</span></li>
</ul>
</h3>
<div>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">В
 Servlet HTTP API предоставляются два класса обертки - 
HttpServletRequestWrapper и HttpServletResponseWrapper. Они помогают 
разработчикам реализовывать собственные реализации типов request и 
response сервлета. Мы можем расширить эти классы и переопределить только
 необходимые методы для реализации собственных типов объектов ответов и 
запросов. Эти классы не используются в стандартном программировании 
сервлетов.</span><br>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"></span><br>
<h3 style="font-family: &quot;Times New Roman&quot;;">
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"><a href="https://jsehelper.blogspot.nl/2016/05/jsp-servlets-jstl-2.html">JSP, Servlets, JSTL (часть 2).</a></span></h3>
</div>
</div>
</span></div>
	

</body></html>