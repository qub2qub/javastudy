<!DOCTYPE html>
<html lang="en"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
	<meta charset="UTF-8">
	<title>Servlet p4</title>
<link rel="stylesheet" href="grey.css">
</head>
<body>
<h3>
<ul>
<li>Какие скоупы переменных существуют в JSP?</li>
</ul>
</h3>

<div>
Exression
 Language - это переменные определенного скоупа, которые доступны через 
выражение ${…}, среди скоупов есть и скоуп page, но даже в этом скоупе 
переменная не является локальной для класса страницы. Поэтому мы просто 
так не можем в скриптлете обратиться к переменной из этих скоупов, в том
 числе и скоупа страницы. Скоупы бывают: page, request, session, 
application, response, out, config.</div>
<div>
<br>
</div>
<div>
<h3>
<ul>
<li>Какие неявные, внутренние объекты и методы есть на jsp странице?</li>
</ul>
</h3>
</div>
<div>
JSP
 implicit objects (неявные объекты) создаются контейнером при 
конвертации JSP страницы в код сервлета для помощи разработчикам. Эти 
объекты можно использовать напрямую в скриптлетах для передачи 
информации в сервис методы, однако мы не можем использовать неявные 
объекты в JSP Declaration, т.к. такой код пойдет на уровень класса.<br>
<a name="more"></a></div>
<div>
Существует
 9 видов неявных объектов, которые можно использовать прямо на JSP 
странице. Семь из них объявлены как локальные переменные вначале 
_jspService() метода, а два оставшихся могут быть использованы как 
аргументы метода _jspService().</div>
<div>
<ul>
<li>out Object</li>
<li>request Object</li>
<li>response Object</li>
<li>config Object</li>
<li>application Object</li>
<li>session Object</li>
<li>pageContext Object</li>
<li>page Object</li>
<li>exception Object</li>
</ul>
</div>
<div>
<br>
</div>
<div>
<h3>
<ul>
<li>Почему неявные объекты не доступны в обычной JSP странице?</li>
</ul>
</h3>
</div>
<div>
Неявный
 объект исключений JSP недоступен в обычных JSP страницах и используется
 на страницах ошибок JSP только для того, чтобы перехватить исключение, 
брошенное JSP страницей и далее предоставить какую-либо полезную 
информацию клиенту.</div>
<div>
<br>
</div>
<div>
<h3>
<ul>
<li>Что вы знаете о PageContext и какие преимущества его использования?</li>
</ul>
</h3>
</div>
<div>
Неявный
 объект JSP pageContext является экземпляром реализации абстрактного 
класса javax.servlet.jsp.PageContext. Мы можем использовать объект 
pageContext для получения и установки атрибутов с различной областью 
видимости и для проброса запросов к другому ресурсу. Этот объект так же 
обладает ссылкой на другой неявный объект. Это единственный объект, 
который представлен в JSP implicit objects и JSP EL implicit objects.</div>
<div>
<br>
</div>
<div>
<h3>
<ul>
<li>Как сконфигурировать init параметры для JSP?</li>
</ul>
</h3>
</div>
<div>
Мы
 можем задать параметры инициализации для JSP аналогично сервлетам в 
web.xml файле. Мы должны сконфигурировать init параметры JSP с 
элементами servlet и servlet-mapping. Единственным отличием будет 
указание местонахождения JSP страницы.</div>
<div>
<br>
</div>
<div>
<h3>
<ul>
<li>Почему не рекомендуется использовать скриптовые элементы в jsp?</li>
</ul>
</h3>
</div>
<div>
JSP
 страницы в основном используются для целей отображения представления, а
 вся бизнес логика и модели должны быть реализованы в сервлетах или 
классах моделях. Мы должны передавать параметры к JSP странице через 
атрибуты и затем использовать их для создания HTML ответа на JSP 
странице. Большая часть JSP содержит HTML код и для того, чтобы помочь 
дизайнерам понять код JSP страницы и разрабатывать их, предоставляют 
элементы action, JSP EL, JSP Standart Tag Library. Именно эти элементы 
необходимо использовать вместо скриптлетов для создания моста между JSP 
HTML и JSP java частями.</div>
<div>
<br>
</div>
<div>
<h3>
<ul>
<li>Чем отличается &lt;c:import&gt; от &lt;jsp:include&gt; и директиви &lt;%@include %&gt;?&nbsp;</li>
</ul>
</h3>
</div>
<div>
Тег
 &lt;c:import&gt; получает доступ к источнику, чтение информации из 
которого происходит непосредственно без буферизации. Контент включается 
построчно в исходную JSP. По сравнению с action-тегом 
&lt;jsp:include&gt; и директивой &lt;%@include %&gt; тег 
&lt;c:import&gt; обеспечивает более совершенное включение динамических 
ресурсов.</div>
<div>
<br>
</div>
<div>
<h3>
<ul>
<li>Что вы знаете о jsp тегах? Объясните как вы понимаете Action tag и JSP Action Elements.</li>
</ul>
</h3>
</div>
<div>
JSP
 элементы или теги action предоставляют полезную функциональность для 
работы с Java Bean, вложения ресурсов, проброса запроса и создания 
динамических XML элементов. Элементы jsp action всегда начинаются с 
записи jsp: и мы можем использовать их прямо внутри страницы JSP без 
необходимости подключения библиотек или других настроек.</div>
<div>
Наиболее
 часто используемыми элементами action являются: jsp:useBean, 
jsp:getProperty, jsp:setProperty, jsp:include, jsp:forward.</div>
<div>
<br>
</div>
<div>
<h3>
<ul>
<li>Что такое JSTL (Jsp Standard tag library)?</li>
</ul>
</h3>
</div>
<div>
Стандартная
 библиотека тегов JSP (англ. JavaServer Pages Standard Tag Library, 
JSTL) - расширение спецификации JSP, добавляющее библиотеку JSP тегов 
для общих нужд, таких как разбор XML данных, условная обработка, 
создание циклов и поддержка интернационализации.</div>
<div>
JSTL
 является альтернативой такому виду встроенной в JSP логики, как 
скриптлеты, то есть прямые вставки Java кода. Использование 
стандартизованного множества тегов предпочтительнее, поскольку 
получаемый код легче поддерживать и проще отделять бизнес-логику от 
логики отображения. Для использования JSTL тегов необходимо подключить 
библиотеку и указать на страницы пространство имен.</div>
<div class="separator" style="clear: both; text-align: center;">
<a href="https://2.bp.blogspot.com/-x7mXM4M72Aw/V0PhOb-jlrI/AAAAAAAAAvE/nYPCKisGPmQGFMFVphemhIWePlH7S3MVACLcB/s1600/q073_p01.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img src="Servlet%20p4_files/q073_p01.jpg" border="0"></a></div>
Для подключения пространства имен основных тегов JSTL необходимо указать на JSP странице код:<br>
<div class="separator" style="clear: both; text-align: center;">
<a href="https://3.bp.blogspot.com/-3yOf1nRtx_s/V0PhV88dxNI/AAAAAAAAAvI/lUh_NDdRhm4V3kZkBQZwlAxRNm5N0xryACLcB/s1600/q073_p02.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img src="Servlet%20p4_files/q073_p02.jpg" height="92" border="0" width="640"></a></div>
<div class="separator" style="clear: both; text-align: justify;">
<br></div>
<div>
<h3>
<ul>
<li>Из каких групп тегов состоит библиотека JSTL?</li>
</ul>
</h3>
</div>
<div>
Библиотека тегов JSTL состоит из пяти групп тегов:&nbsp;</div>
<div>
<ul>
<li>Core Tags - основные теги, предоставляют возможности итерации, обработки исключений, url, forward и redirect response и т.д.</li>
<li>Formatting
 и Localization Tags - теги форматирования, предоставляют возможности по
 форматированию Numbers, Dates и поддержки i18n локализации и resource 
bundles.</li>
<li>SQL Tags - теги для работы с SQL, поддержка работы с базами данных вроде MySQL, Oracle и т.д.</li>
<li>XML Tags - теги для работы с XML документами. Например для парсинга XML, преобразования данных XML и выполнения выражений XPath.</li>
<li>JSTL
 Functions Tags - функции-теги для обработки строк, предоставляет набор 
функций, которые позволяют выполнять различные операции со строками и 
т.п.. Например по конкатенации или разбиению строк.</li>
</ul>
<br>
</div>
<div>
<h3>
<ul>
<li>Какая разница между тегом &lt;c:set&gt; и &lt;jsp:useBean&gt;?</li>
</ul>
</h3>
</div>
<div>
Существует
 аналогия между тегом &lt;c:set&gt; и тегом &lt;jsp:useBean&gt;. Оба 
создают и помещают экземпляры в заданную область видимости. Но 
&lt;jsp:useBean&gt; только непосредственно создает экземпляр конкретного
 типа, а &lt;c:set&gt;, создав ссылку, позволяет извлекать значение, 
например, из параметров запроса, сессии и т. д.<br>
<br>
</div>
<div>
<h3>
<ul>
<li>Назовите неявные, внутренние объекты JSP EL и их отличия от объектов jsp.</li>
</ul>
</h3>
</div>
<div>
Язык
 выражений JSP предоставляет множество неявных объектов, которые можно 
использовать для получения атрибутов в различных областях видимости 
(scopes) и для значений параметров. Важно отметить, что они отличаются 
от неявных объектов JSP и содержат атрибуты в заданной области 
видимости. Наиболее часто использующийся implicit object в JSP EL и JSP 
page - это объект pageContext. Ниже представлена таблица неявных 
объектов JSP EL.</div>
<div class="separator" style="clear: both; text-align: center;">
<a href="https://1.bp.blogspot.com/-bip4H-dsyR4/V0Phinz4VxI/AAAAAAAAAvM/F7lCJBG79DQXJimDxrPsHO2bAT0ToTH3gCLcB/s1600/q076_p01.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img src="Servlet%20p4_files/q076_p01.jpg" border="0"></a></div>
<div>
<br>
</div>
<div>
<h3>
<ul>
<li>Как узнать имя http метода используя JSP EL?</li>
</ul>
</h3>
</div>
<div>
Вот так: ${pageContext.request.method}.</div>
<div>
<br>
</div>
<div>
<h3>
<ul>
<li>Что вы знаете о написании пользовательских jsp тегов?</li>
</ul>
</h3>
</div>
<div>
JSP
 позволяет создавать свои собственные теги с необходимой 
функциональностью. Мы можем добавить библиотеку тегов на страницу JSP 
используя указание пространства имен. Для создания своего тега мы можем 
использовать следующие компоненты:</div>
<div>
<ul>
<li>JSP Custom Tag Handler</li>
<li>Создание файла Tag Library Descriptor (TLD)</li>
<li>Deployment Descriptor конфигурацию для TLD</li>
</ul>
<br>
</div>
<div>
<h3>
<ul>
<li>Приведите пример использования собственных тегов.</li>
</ul>
</h3>
</div>
<div>
Например
 нам необходимо отформатировать в каком-либо стиле очень длинное число. 
Для этого можно использовать собственный тег вроде:</div>
<div class="separator" style="clear: both; text-align: center;">
<a href="https://2.bp.blogspot.com/-1XK3pGz9M6A/V0Ph3U2KU6I/AAAAAAAAAvU/6QkZujtRNfo68vyuG2NPpqIbfwKn-jnYgCLcB/s1600/q079_p01.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img src="Servlet%20p4_files/q079_p01.jpg" border="0"></a></div>
<div>
<div>
Используя
 входные параметры, число должно быть преобразовано на JSP странице в 
таком виде 123,456.79 согласно шаблону. Т.к. JSTL не предоставляет такой
 функциональности, то нам придется создать собственный тег для получения
 необходимого результата.<br>
<br>
<h3>
<ul>
<li>Почему не нужно конфигурировать стандартные JSP теги в web.xml?</li>
</ul>
</h3>
</div>
<div>
Нам
 не нужно настраивать стандартные теги JSP в web.xml, потому что TLD 
файлы уже находятся внутри каталога META-INF в JSTL jar файлах. Когда 
контейнер загружает веб-приложение и находит TLD файлы в директории 
META-INF в JAR файле, то он автоматически настраивает их для 
непосредственного использования на JSP страницах. Остается только задать
 пространство имен на jsp странице.<br>
<br></div>
<div>
<h3>
<ul>
<li>Как можно обработать ошибки jsp страниц?</li>
</ul>
</h3>
</div>
<div>
Для
 обработки исключений выброшенных на jsp странице необходимо всего лишь 
задать страницу ошибки. Для создания страницы ошибки JSP мы должны 
установить значение page directive attribute isErrorPage в значение 
true. Тогда мы получим доступ к неявным объектам исключений в JSP и 
сможем передавать собственные сообщение об ошибках клиенту (обычно более
 информативных).</div>
<div>
Настройка дескриптора развертывания выглядит так.</div>
<div class="separator" style="clear: both; text-align: center;">
<a href="https://3.bp.blogspot.com/-fpRoGin1RHQ/V0PiJCi3TcI/AAAAAAAAAvc/rlLA5QgTCqAQv3NPJRFsTSIKu8BwgHSIwCLcB/s1600/q081_p01.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img src="Servlet%20p4_files/q081_p01.jpg" border="0"></a></div>
<div class="separator" style="clear: both; text-align: justify;">
<br></div>
<div>
<div>
<h3>
<ul>
<li>Как происходит обработка ошибок с помощью jstl?</li>
</ul>
</h3>
</div>
<div>
Перехватывать
 исключения и обрабатывать их в служебных методах класса можно с помощью
 JSTL Core Tags c:catch и c:if. Тег c:catch перехватывает исключение и 
обертывает его в переменную exception, которую мы можем обработать в 
теге c:if.</div>
 <br>
<div class="separator" style="clear: both; text-align: center;">
<a href="https://2.bp.blogspot.com/-YBErrsxG2GM/V0PiS9nJysI/AAAAAAAAAvg/9IqBaKQAJuAp563IfRz085ZdAwGLnRBCgCLcB/s1600/q082_p01.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img src="Servlet%20p4_files/q082_p01.jpg" border="0"></a></div>
<div>
Обратите внимание что используется язык выражений JSP EL в теге c:if.</div>
</div>
</div>
<div>
<br>
</div>
<div>
<h3>
<ul>
<li>Приведите пример конфигурации JSP в дескрипторе развертывания.</li>
</ul>
</h3>
</div>
<div>
Элемент jsp-config используется для настройки различных параметров jsp страниц.</div>
<div>
<ul>
<li>Управление элементами скриптлетов на странице.</li>
<li>Управления выполнением в языке выражений.</li>
<li>Определение шаблона URL для encoding.</li>
<li>Определение размера буфера, который используется для объектов на странице.</li>
<li>Обозначение групп ресурсов, соответствующих шаблону URL, которые должны быть обработаны как XML документ.</li>
</ul>
</div>
<div class="separator" style="clear: both; text-align: center;">
<a href="https://3.bp.blogspot.com/-8gTs9M5SK0o/V0Pic1Hw-EI/AAAAAAAAAvo/MS__ktryJAIFK4WDYe27MXkL0KuS-qLHQCLcB/s1600/q083_p01.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img src="Servlet%20p4_files/q083_p01.jpg" border="0"></a></div>
<div>
<br>
</div>
<div>
<h3>
<ul>
<li>Как деактивировать использование EL на JSP?</li>
</ul>
</h3>
</div>
<div>
Для игнорирования выполнения языка выражений на странице существует два способа:</div>
<div>
<ul>
<li>использовать директиву &lt;%@ page isELIgnored=»true» %&gt;,</li>
<li>настроить web.xml (лучше подходит для отключения на EL на многих страницах)</li>
</ul>
</div>
<div class="separator" style="clear: both; text-align: center;">
<a href="https://4.bp.blogspot.com/-nQi0-hmGgP0/V0Pip6HAQcI/AAAAAAAAAvs/igShrNwMnMoEFPcQjmuyOofkVCOyQlF2QCLcB/s1600/q084_p01.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img src="Servlet%20p4_files/q084_p01.jpg" border="0"></a></div>
<div>
<br>
</div>
<div>
<div>
<h3>
<ul>
<li>Можно ли использовать javascript на jsp странице?</li>
</ul>
</h3>
</div>
<div>
Да,
 это возможно. Несмотря на то, что JSP серверная технология, она всё 
равно создает HTML страницу, на которую можно так же добавлять 
javascript код и css стили.</div>
<div>
<br>
</div>
<div>
<h3>
<ul>
<li>Всегда ли создается объект сессии на jsp странице, можно ли отключить его создание?</li>
</ul>
</h3>
</div>
<div>
По
 умолчанию jsp страница создает сессию, но иногда это не нужно. Мы можем
 использовать директиву page с атрибутом session для указания не 
создавать новую сессию по умолчанию. Для отключения создания сессии 
используется код, показанный ниже.</div>
<div class="separator" style="clear: both; text-align: center;">
<a href="https://4.bp.blogspot.com/-__8NPeqzQhs/V0Pi1NfzUVI/AAAAAAAAAv0/9iXH41M8rzIg0gXqCiPfFPCW6i9llRAGQCLcB/s1600/q086_p01.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img src="Servlet%20p4_files/q086_p01.jpg" border="0"></a></div>
<div style="font-family: Arial, Helvetica, sans-serif;">
<br></div>
<div>
<div>
<h3>
<ul>
<li>Какая разница между JspWriter и Servlet PrintWriter?</li>
</ul>
</h3>
</div>
<div>
PrintWriter
 является объектом ответа для записи контента в ответе. JspWriter 
использует объект PrintWriter незаметно для пользователя и обеспечивают 
поддержку буферизации. Когда буфер заполнен или очищен, JspWriter 
использует объект PrintWriter для записи содержания (контента) в ответ.</div>
<div>
<br>
</div>
<div>
<h3>
<ul>
<li>Как можно расширить функциональность jsp?</li>
</ul>
</h3>
</div>
<div>
Мы
 можем расширить технологию JSP с помощью создания собственных тегов для
 избегания использования скриптлетов и java кода на JSP страницах.</div>
</div>
</div>	

</body></html>