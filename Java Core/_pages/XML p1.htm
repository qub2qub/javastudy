<!DOCTYPE html>
<html lang="en"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
	<meta charset="UTF-8">
	<title>XML p1</title>
<link rel="stylesheet" href="grey.css">
</head>
<body>

<h3>
<ul>
<li>Что такое XML?&nbsp;</li>
</ul>
</h3>
<div>
XML(eXtensible
 Markup Language - расширяемый язык разметки) - текстовый формат, 
предназначенный для хранения структурированных данных (взамен 
существующих файлов баз данных), для обмена информацией между 
программами, а также для создания на его основе более специализированных
 языков разметки (например, XHTML).<br>
<br>
<h3>
<ul>
<li>Как определяется корректность XML-документа?</li>
</ul>
</h3>
Корректность XML-документа определяют следующие два компонента:<br>
<ul>
<li>синтаксическая корректность (well-formed) - то есть соблюдение всех синтаксических правил XML;<a name="more"></a></li>
<li>действительность
 (valid) - то есть данные соответствуют некоторому набору правил, 
определенных пользователем; правила определяют структуру и формат данных
 в XML. Валидность XML-документа определяется наличием DTD или XML-схемы
 (XSD) и соблюдением правил, которые там приведены.</li>
</ul>
<br></div>
<h3>
<ul>
<li>Чем well-formed XML отличается от valid?</li>
</ul>
</h3>
<div>
Отличие:<br>
<ul>
<li>well-formed XML - тот, который пропускается парсером</li>
<li>valid XML - тот, который пропускается парсером И валидатором</li>
</ul>
<br></div>
<div>
<h3>
<ul>
<li>Что такое пространство имен?</li>
</ul>
</h3>
<div>
Пространство
 имен (namespace) - введено для разделения наборов элементов с 
соответствующими правилами, описанными схемой. Пространство имен 
объявляется с помощью атрибута xmlns и префикса, который используется 
для элементов из данного пространства.<br>
<div>
<br></div>
</div>
</div>
<h3>
<ul>
<li>Что такое простые типы в XSD?</li>
</ul>
</h3>
<div>
Элементы, которые не имеют атрибутов и дочерних элементов, называются простыми и должны иметь простой тип данных.</div>
<div>
Существуют
 стандартные простые типы, например string (представляет строковое 
значение), boolean (логическое значение), integer (целое значение), 
float (значение с плавающей точкой), ID (уникальный идентификатор), 
gYear (год) и др.<br>
<br></div>
<h3>
<ul>
<li>Что такое сложныетипы в XSD?</li>
</ul>
</h3>
<div>
Элементы,
 содержащие в себе атрибуты и/или дочерние элементы, называются 
сложными. Сложные элементы создаются с помощью элемента complexType. Так
 же, как и в простом типе атрибут name задает имя типа.<br>
<br>
<h3>
<ul>
<li>Какие элементы и атрибуты XSD Вы знаете? Кратко опишите их.</li>
</ul>
</h3>
Ниже приведён список &nbsp;элементов и атрибутов ХСД:<br>
<ul>
<li>schema - корневой элемент любой схемы XML. Может содержать несколько атрибутов, например версию схемы.</li>
<li>xmlns
 - каждый элемент схемы имеет стандартный префикс xs: (или xsd:, может 
быть использован любой префикс), который связан с пространством имен 
схемы XML (xmlns) путем объявления: 
xmlns:xsd="http://www.w3.org/2001/XMLSchema".</li>
<li>element
 - элементы объявляются с помощью элемента element. Например, order - 
это элемент, который в документе выглядит как &lt;order id="1234" 
date="11/08/2013" total_amount="93.48"&gt;.</li>
<li>type
 - элемент может иметь простой тип, например string, decimal, long или 
double (type="xs:long") или сложный (type="customer").</li>
<li>minOccurs,
 maxOccurs - определяет минимальное или максимальное количество 
появлений типа. Может быть положительным целым числом или иметь значение
 unbounded, которое говорит о том, что верхней границы нет.</li>
<li>complexType
 - определяет комплексный тип, имеющий собственные элементы, подэлементы
 и атрибуты. Элемент типа complexType может содержать другие элементы 
типа complexType. Например, комплексный тип order содержит другой 
комплексный элемент.</li>
<li>sequence
 - элемент может содержать другие элементы, которые называются 
элементами-потомками. Элемент такого типа указывает, что 
элементы-потомки должны следовать в цепочке. Каждый потомок может 
встречаться от 0 до неограниченного количества раз.</li>
<li>attribute
 - комплексный тип может иметь один или несколько атрибутов, которые 
определены с помощью элементов типа attribute. Тип orderLine имеет два 
атрибута: item и quantity.</li>
<li>choice - используется для указания, что может присутствовать только один набор элементов.</li>
<li>complexContent - комплексный тип может расширять или ограничивать другой комплексный тип с помощью элемента типа complexContent.</li>
<li>extension - элемент такого типа расширяет существующий элемент типа simpleType или complexType.</li>
</ul>
<h3>
<br><ul>
<li>Какие существуют XML парсеры?&nbsp;</li>
</ul>
</h3>
Существуют SAX, DOM, JDOM парсеры. А STAX, TRAX, XPATH &nbsp;- это API для работы с ними.<br>
<br>
<h3>
<ul>
<li>Что такое XPath?</li>
</ul>
</h3>
XPath
 (XML Path Language) - это язык запросов &nbsp;который предназначен для 
произвольного обращения к частям XML или XHTML документа. В документе 
всегда имеется корневой элемент. У элемента дерева всегда существуют 
предки (кроме корневого элемента, у которого предков нет) и могут 
существовать потомки. Каждый элемент дерева находится на определенном 
уровне вложенности. У элементов на одном уровне бывают предыдущие и 
следующие за ним элементы.<br>
Строка
 XPath - это фактически путь к элементу в дереве, где каждый уровень 
разделяется косой чертой «/». В результате обработки выражения XPath 
получается объект, который может быть:<br>
<ul>
<li>набор узлов (node-set) - неупорядоченный набор узлов без дубликатов</li>
<li>булево значение (boolean) - true или false</li>
<li>число (number) - число с плавающей точкой</li>
<li>строка (string) - последовательность UCS символов</li>
</ul>
<h3>
<br><ul>
<li>Что такое XQuery?</li>
</ul>
</h3>
XQuery
 - это универсальный язык запросов к XML-данным, содержащий средства как
 для выборки, так и для трансформации XML-данных. XQuery синтаксически 
похож на SQL, его набор ключевых слов включает в себя FOR, LET, WHERE, 
ORDER BY или RETURN. С помощью XQuery можно выполнять сложные запросы, 
создавая сложные условия или упорядочивая результаты.<br>
<br>
<h3>
<ul>
<li>Каким парсером можно сделать изменения в XML структуре и сохранить в файл?</li>
</ul>
</h3>
Изменение можно сделать с помощью DOM &nbsp;и XPATH.<br>
<br></div>
<h3>
<ul>
<li>Кратко опишите DOM, SAX, StAX анализаторы.</li>
</ul>
</h3>
<div>
DOM
 (Document Object Model - объектная модель документов) - 
платформенно-независимый программный интерфейс, позволяющий программами 
скриптам управлять содержимым документов HTML и XML, а также изменять их
 структуру и оформление. Модель DOM не накладывает ограничений на 
структуру документа. Любой документ известной структуры с помощью DOM 
может быть представлен в виде дерева узлов, каждый узел которого 
содержит элемент, атрибут, текстовый, графический или любой другой 
объект. Узлы связаны между собой отношениями родитель-потомок.</div>
<div>
SAX
 (Simple API for XML) базируется на модели последовательной одноразовой 
обработки и не создает внутренних деревьев. При прохождении по XML 
вызывает соответствующие методы у классов, реализующих интерфейсы, 
предоставляемые SAX-парсером.</div>
<div>
StAX
 (Streaming API for XML) не создает дерево объектов в памяти, но, в 
отличие от SAX-парсера, за переход от одной вершины XML к другой 
отвечает приложение, которое запускает разбор документа.<br>
<br></div>
<h3>
<div>
<ul>
<li>Когда следует использовать DOM, а когда - SAX, StAX анализаторы?</li>
</ul>
</div>
</h3>
<div>
DOM-анализаторы
 следует использовать тогда, когда нужно знать структуру документа и 
может понадобиться изменять эту структуру либо использовать информацию 
из XML-документа несколько раз.</div>
<div>
SAX/StAX-анализаторы
 используются тогда, когда нужно извлечь информацию о нескольких 
элементах из XML-файла либо когда информация из документа нужна только 
один раз.</div>
<div>
<br></div>
<h3>
<ul>
<li>Недостатки XML DTD перед XML Schema.</li>
</ul>
</h3>
<div>
Недостатки XML DTD.<br>
<ul>
<li>Отличный
 от XML синтаксис языка. То есть, DTD не является XML. В связи с этим 
могут возникать разнообразные проблемы с кодировкой и верификацией 
XML-документов.</li>
<li>Нет
 проверки типов данных. В XML DTD существует лишь один тип данных – 
строка. В связи с этим, например, если в числовом поле будет текст, 
документ все равно пройдет верификацию, так как XML DTD не может 
проверить тип данных.</li>
<li>Нельзя
 поставить в соответствие одному XML-документу больше одного DTD 
описания. То есть, верифицировать документ можно лишь одним DTD 
описанием. Если их несколько, то придется переделывать описания и 
совмещать все в одном файле, что очень неудобно.</li>
<li>Это были основные недостатки XML DTD, которые с успехом исправлены в промышленном стандарте описания XML-документов XML Schema.</li>
</ul>
</div>
<div>
<br></div>
<div>
<h3>
<ul>
<li>XML Schema - промышленный стандарт описания XML-документов.</li>
</ul>
</h3>
</div>
<div>
Если быть кратким, то XML Schema делает следующее:</div>
<div>
<ul>
<li>Описывает названия элементов и атрибутов (словарь).</li>
<li>Описывает взаимосвязь между элементами и атрибутами, а также их структуру (модель содержания).</li>
<li>Описывает типы данных.</li>
</ul>
</div>
<div>
Также
 хочу заметить, что на данный момент при помощи схем можно описывать 
практически все. То есть, схема - это универсальный способ описания 
грамматики данных, который может применяться не только для верификации 
XML-документов, но и описания баз данных и т.д. Таким образом, область 
применения схем на данный момент очень широкая.<br>
<br>
<h3>
<ul>
<li>Что такое XSLT?</li>
</ul>
</h3>
XSLT (eXtensible Stylesheet Language Transformations) - расширяемый язык преобразования листов стилей.<br>
Язык
 XSLT служит транслятором, с помощью которого можно свободно 
модифицировать исходный текст. XLST играет решающую роль в утверждении 
XML в качестве универсального языка хранения и передачи данных. Область 
применения XSLT широка - от электронной коммерции до беспроводного Web.<br>
<br>
<h3>
<ul>
<li>Что такое маршаллизация и демаршализация?</li>
</ul>
</h3>
Маршаллизация
 - механизм преобразования данных из java-объектов в конкретное 
хранилище, будь то документ XML, база данных или простой текстовый файл.<br>
Демаршаллизация
 - обратный процесс преобразования данных из внешних источников в 
структуру хранения, поддерживаемую виртуальной машиной. Проблемой 
остается организация взаимно однозначного соответствия информации в 
источнике, например, XML-документе, и экземпляре типа данных,принимающем
 эту информацию.<br>
<br>
<h3>
<ul>
<li>Что такое JAXP?</li>
</ul>
</h3>
JAXP
 (Java API for XML Processing) - набор абстрактных API, упрощающих 
обработку XML данных с помощью программ, написанных на Java. Усиливает 
стандартные анализаторы SAX (Simple API for XML Parsing) и DOM (Document
 Object Model). JAXP также поддерживает преобразования расширяемого 
языка таблиц стилей (XSLT) стандарт, давая вам контроль над 
представлением данных и позволяя преобразовать данные в другие 
XML-документы или в другие форматы, такие как HTML. JAXP обеспечивает 
поддержку пространств имен (namespace), то есть имеется возможность 
работать с DTD. JAXP дает приложению возможность производить лексический
 разбор и модификацию документов XML независимо от конкретной реализации
 обработки XML.<br>
С версии 1.4, JAXP реализует API Потоковой передачи для XML (StAX) стандарт. Архитектура JAXP:<br>
<div class="separator" style="clear: both; text-align: center;">
<a href="https://2.bp.blogspot.com/-DHTnYLNCdlI/WFY9GdpXz8I/AAAAAAAABYs/GTOMt1tZhU8VXFMAAR0ZaW3rORvydS0bACLcB/s1600/q018_p01.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img src="XML%20p1_files/q018_p01.jpg" height="425" border="0" width="640"></a></div>
<div class="separator" style="clear: both; text-align: justify;">
<br></div>
<h3>
<ul>
<li>Назовите основные пакеты JAXP.</li>
</ul>
</h3>
JAXP состоит из четырех пакетов. В них вы найдете интерфейсы и классы, предназначенные для анализа и преобразования XML-данных.<br>
<ul>
<li>javax.xml.parsers - общий интерфейс для анализаторов DOM и SAX.</li>
<li>org.w3c.dom - общий API для работы с DOM в Java.</li>
<li>org.xml.sax - определяет интерфейсы, использованные для анализаторов SAX.</li>
<li>javax.xml.transform - API XLST для преобразования XML в другие типы документов.</li>
</ul>
<br>
<h3>
<ul>
<li>Что такое JAXB?</li>
</ul>
</h3>
JAXB (Java 
Architecture for XML Binding) - это мост между XML и Java, Java API для 
маршалинга объекта в XML и восстановления (демаршалинг) объекта из XML 
файла. Часто используется в веб сервисах для представления объекта в 
виде XML схемы и передачи ее по сети. Также, такой способ передачи 
данных имеет свой плюс при обмене данных между системами, написанными на
 разных языках.</div>
<link href="https://plus.google.com/105527202953364202368" rel="author">

<p></p>
	

</body></html>