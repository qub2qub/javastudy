<!DOCTYPE html>
<html lang="en"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
	<meta charset="UTF-8">
	<title>Questions 1</title>
<link rel="stylesheet" href="grey.css">
</head>
<body>
<h3>
<a href="http://jsehelper.blogspot.com/2016/01/blog-post_9.html">ООП.</a></h3>
<div>
<ul>
<li>Что такое ООП?</li>
<li>Что такое объект?</li>
<li>Назовите основные принципы ООП.</li>
<li>Что такое наследование?</li>
<li>Что такое полиморфизм? Какие проявления полиморфизма в Java Вы знаете?</li>
<li>Что такое инкапсуляция?</li>
<li>Что такое aбстракция?</li>
<li>В чем преимущества объектно-ориентированных &nbsp;языков программирования?</li>
<li>Как использование объектно – ориентерованного подхода улучшает разработку программного обеспечения?<a name="more"></a></li>
<li>Имеется 
выражение «является» &nbsp;и «имеет». Что они подразумевают &nbsp;в 
плане принципов ООП? В &nbsp;чем разница между композицией &nbsp;и 
агрегацией?</li>
<li>Что вы подразумеваете под &nbsp;полиморфизмом, инкапсуляцией и &nbsp;динамическим связыванием?</li>
</ul>
<h3>
<a href="http://jsehelper.blogspot.com/2016/01/blog-post_9.html">Перейти к ответам ►►</a></h3>
</div>
<div>
<br></div>
<h3>
<a href="http://jsehelper.blogspot.com/2016/01/java-core-1.html">Java core.</a></h3>
<div>
<ul>
<li>Чем отличается JRE, JVM и JDK?&nbsp;</li>
<li>Опишите модификаторы доступа в Java.</li>
<li>Что такое package level access.</li>
<li>Чем абстрактный клас отличается от интерфейса? В каких случаях Вы бы использовали абстрактный класс, а в каких интерфейс?</li>
<li>Может ли объект получить доступ к private-переменной класса? Если, да, то каким образом?</li>
<li>Для чего в джаве статические блоки?</li>
<li>Можно ли перегрузить static метод?</li>
<li>Расскажите про внутренние классы. Когда вы их будете использовать?</li>
<li>В чем разница между переменной &nbsp;экземпляра и статической переменной? Приведите пример.</li>
<li>Приведите пример когда можно использовать статический метод?</li>
<li>Расскажите про классы- загрузчики и про динамическую зарузку классов.&nbsp;</li>
<li>Что такое статическая и что &nbsp;такое динамическая загрузка класса?</li>
<li>Для чего нужен оператор "assert" в джава?&nbsp;</li>
<li>Почему в некоторых интерфейсах &nbsp;вообще не определяют методов?&nbsp;</li>
<li>Какая основная разница между String, StringBuffer, StringBuilder?&nbsp;</li>
<li>Расскажите про потоки ввода-вывода &nbsp;Java.&nbsp;</li>
<li>Что такое Heap и Stack память в Java?</li>
<li>Какая разница между Stack и Heap памятью в Java?</li>
<li>Расскажите про модель памяти &nbsp;в джава?</li>
<li>Как работает сборщик мусора (garbage collector)?&nbsp;</li>
<li>Расскажите про приведение типов. &nbsp;Что такое понижение и повышение &nbsp;типа? Когда вы получаете ClassCastException?&nbsp;</li>
<li>Что такое статический класс, какие особенности его использования?</li>
<li>Каким образом из вложенного класса получить доступ к полю внешнего класса.</li>
<li>Какие существуют типы вложенных классов? Для чего они используются?&nbsp;</li>
<li>Возможно ли при переопределении (override) метода изменить:&nbsp;</li>
<li>Модификатор доступа</li>
<li>Возвращаемый тип</li>
<li>Тип аргумента или количество</li>
<li>Имя аргументов</li>
<li>Изменять порядок, количество или вовсе убрать секцию throws?</li>
<li>Что такое autoboxing?</li>
<li>Что такое Generics?</li>
<li>Какова истинная цель использования обобщенных типов в Java?&nbsp;</li>
<li>Каким образом передаются переменные в методы, по значению или по ссылке?</li>
<li>Какие методы есть у класса Object?</li>
<li>Правила переопределения метода Object.equals().</li>
<li>Если вы хотите переопределить equals(), какие условия должны удовлетворяться для переопределенного метода?</li>
<li>Какая связь между hashCode и equals?</li>
<li>Каким образом реализованы методы hashCode и equals в классе Object?</li>
<li>Что будет, если переопределить equals не переопределяя hashCode? Какие могут возникнуть проблемы?</li>
<li>Есть ли какие-либо рекомендации о том, какие поля следует использовать при подсчете hashCode?</li>
<li>Для чего нужен метод hashCode()?</li>
<li>Правила переопределения метода Object.hashCode().</li>
<li>Расскажите про клонирование объектов. В чем отличие между поверхностным и глубоким клонированием?</li>
<li>Правила переопределения метода Object.clone().</li>
<li>Где и как вы можете использовать &nbsp;закрытый конструктор?</li>
<li>Что такое конструктор по умолчанию?</li>
<li>Опишите метод Object.finalize().</li>
<li>Чем отличаются слова final, finally и finalize?</li>
<li>Опишите иерархию исключений.</li>
<li>Какие виды исключений в Java вы знаете, чем они отличаются?&nbsp;</li>
<li>Что такое checked и unchecked Exception?</li>
<li>Как создать свой unchecked Exception?</li>
<li>Какие есть Unchecke exeption?</li>
<li>Что такое Error?</li>
<li>Опишите работу блока try-catch-finally.</li>
<li>Возможно ли использование блока try-finally (без catch)?</li>
<li>Всегда ли исполняется блок finally?</li>
<li>Какие есть оссобенности класса String? что делает метод intern().</li>
<li>Можно ли наследовать строковый тип, почему?</li>
<li>Почему строка является популярным ключом в HashMap в Java?</li>
<li>Дайте определение понятию конкатенация строк.</li>
<li>Как перевернуть строку?</li>
<li>Как сравнить значение двух строк?</li>
<li>Как обрезать пробелы в начале и конце строки?</li>
<li>Дайте определение понятию "пул строк".</li>
<li>Можно ли синхронизировать доступ к строке?</li>
<li>Как правильно сравнить значения строк двух различных объектов типа String и StringBuffer?</li>
<li>Почему строка неизменная и финализированная в Java?</li>
<li>Напишите метод удаления данного символа из строки.</li>
<li>Что такое рефлексия?</li>
<li>Что произойдет со сборщиком мусора (GC), если во время выполнения метода finalize() некоторого объекта произойдет исключение?</li>
<li>Что такое интернационализация, локализация?</li>
<li>Что такое Аннотации в Java?</li>
<li>Какие функции выполняет Аннотации?</li>
<li>Какие встроенные аннотации в Java вы знаете?</li>
<li>Что делают аннотации @Retention, @Documented, @Target и @Inherited?</li>
<li>Что делают аннотации @Override, @Deprecated, @SafeVarargs и @SuppressWarnings?</li>
<li>Какой жизненный цикл аннотации можно указать с помощью @Retention?</li>
<li>К каким элементам можно применять аннотацию, как это указать?</li>
<li>Как создать свою Аннотацию?</li>
<li>Атрибуты каких типов допустимы в аннотациях?</li>
<li>Что такое &nbsp;JMX?</li>
<li>Какие выгоды предлагает JMX?</li>
<li>Что еще умеет JMX кроме дистанционного управления?</li>
<li>Что такое MBean?</li>
<li>Какие типы MBeans существуют?</li>
<li>Что такое MBean Server?</li>
<li>Какие механизмы обеспечивают безопасность в технологии Java?</li>
<li>Назовите несколько видов проверок которые выполняет верификатор байт-кода Java?</li>
<li>Что вы знаете о "диспетчере защиты" в Java?</li>
<li>Что такое JAAS?</li>
<li>Что такое Рефакторинг?</li>
</ul>
</div>
<h3>
<div>
<div>
<div>


</div>
</div>
</div>
</h3>
<h3>
<a href="http://jsehelper.blogspot.com/2016/01/java-core-1.html">Перейти к ответам ►►</a></h3>
<div>
<br></div>
<h3>
<a href="http://jsehelper.blogspot.com/2016/01/java-collections-framework-1.html">Java Collections Framework.</a></h3>
<div>
<ul>
<li>Что такое Коллекция?</li>
<li>Назовите основные интерфейсы коллекций и их имплементации.</li>
<li>Чем отличается ArrayList от LinkedList? В каких случаях лучше использовать первый, а в каких второй?</li>
<li>Чем отличается HashMap от Hashtable?</li>
<li>Чем отличается ArrayList от Vector?</li>
<li>Как сравниваются елементы коллекций?</li>
<li>Расположите
 в виде иерархии следующие интерфейсы: List, Set, Map, SortedSet, 
&nbsp;SortedMap, Collection,Iterable, Iterator, NavigableSet, 
NavigableMap.</li>
<li>Почему Map - это не Collection, в то время как List и Set являются Collection?</li>
<li>Дайте определение понятию "iterator".</li>
<li>Что вы знаете об интерфейсе Iterable?</li>
<li>Как одной строчкой преобразовать HashSet в ArrayList?</li>
<li>Как одной строчкой преобразовать ArrayList в HashSet?</li>
<li>Как перебрать все ключи Map учитывая, что Map - это не Iterable?</li>
<li>Как перебрать все значения Map учитывая, что Map - это не Iterable?</li>
<li>Как перебрать все пары ключ-значение в Map учитывая, что Map - это не Iterable?</li>
<li>В чем проявляется "сортированность" SortedMap, кроме того, что toString() &nbsp;выводит все по порядку?</li>
<li>Как одним вызовом копировать элементы из любой Collection в массив?</li>
<li>Реализуйте симметрическую разность двух коллекций используя методы Collection (addAll(), removeAll(), retainAll()).</li>
<li>Сравните Enumeration и Iterator.</li>
<li>Как между собой связаны Iterable и Iterator?</li>
<li>Как между собой связаны Iterable, Iterator и "for-each " введенный в Java 5?</li>
<li>Сравните Iterator и ListIterator.</li>
<li>Что произойдет, если я вызову Iterator.next() не "спросив" Iterator.hasNext()?</li>
<li>Что произойдет, если я вызову Iterator.next() перед этим 10 раз вызвав &nbsp;Iterator.hasNext()? Я пропущу 9 элементов?</li>
<li>Если у меня есть коллекция и порожденный итератор, изменится ли коллекция, если я вызову iterator.remove()?</li>
<li>Если у меня есть коллекция и порожденный итератор, изменится ли итератор, если я вызову collection.remove(..)?</li>
<li>Зачем добавили ArrayList, если уже был Vector?</li>
<li>В 
реализации класса ArrayList есть следующие поля: Object[] elementData, 
int size. Объясните, зачем хранить отдельно size, если всегда можно 
взять elementData.length?</li>
<li>LinkedList - это односвязный, двусвязный или четырехсвязный список?</li>
<li>Какое худшее время работы метода contain() для элемента, который есть в LinkedList (O(1), O(log(N)), O(N), O(N*log(N)), O(N*N))?</li>
<li>Какое худшее время работы метода contain() для элемента, который есть в ArrayList (O(1), O(log(N)), O(N), O(N*log(N)), O(N*N))?</li>
<li>Какое худшее время работы метода add() для LinkedList (O(1), O(log(N)), O(N), O(N*log(N)), O(N*N))?</li>
<li>Какое худшее время работы метода add() для ArrayList (O(1), O(log(N)), O(N), O(N*log(N)), O(N*N))?</li>
<li>Сколько выделяется элементов в памяти при вызове ArrayList.add()?</li>
<li>Сколько выделяется элементов в памяти при вызове LinkedList.add()?</li>
<li>Оцените количество памяти на хранение одного примитива типа byte в &nbsp;LinkedList?</li>
<li>Оцените количество памяти на хранение одного примитива типа byte в ArrayList?</li>
<li>Я добавляю 
элемент в середину List-а: list.add(list.size()/2, newElem). Для кого 
эта операция медленнее - для ArrayList или для LinkedList?</li>
<li>Как перебрать элементы LinkedList в обратном порядке, не используя медленный get(index)?</li>
<li>Как одним вызовом из List получить List со всеми элементами, кроме первых и последних 3-х?</li>
<li>Могут ли у разных объектов в памяти (ref0 != ref1) быть ref0.hashCode() == ref1.hashCode()?</li>
<li>Могут ли у разных объектов в памяти (ref0 != ref1) быть ref0.equals(ref1) == true?</li>
<li>Могут ли у разных ссылок на один объект в памяти (ref0 == ref1) быть &nbsp;ref0.equals(ref1) == false?</li>
<li>Есть класс Point{int x, y;}. Почему хэш-код в виде 31 * x + y предпочтительнее чем x + y?</li>
<li>Если у 
класса Point{int x, y;} "правильно " реализовать метод equals (return 
ref0.x == ref1.x &amp;&amp; ref0.y == ref1.y), но сделать хэш-код в виде
 int hashCode() {return x;}, то будут ли корректно такие точки 
помещаться и извлекаться из HashSet?</li>
<li>equals() 
порождает отношение эквивалентности. Какими из свойств обладает такое 
отношение: коммутативность, симметричность, рефлексивность, 
дистрибутивность, ассоциативность, транзитивность?</li>
<li>Можно ли так реализовать equals(Object that) {return this.hashCode() == that.hashCode()}?</li>
<li>В equals 
требуется проверять, что аргумент (equals(Object that)) такого же типа 
как и сам объект. В чем разница между this.getClass() == that.getClass()
 и that instanceof MyClass?</li>
<li>Можно ли 
реализовать метод equals класса MyClass вот так: class MyClass {public 
boolean equals(MyClass that) {return this == that;}}?</li>
<li>Будет ли работать HashMap, если все ключи будут возвращать int hashCode() {return 42;}?</li>
<li>Зачем добавили HashMap, если уже был Hashtable?</li>
<li>Согласно 
Кнуту и Кормену существует две основных реализации хэш-таблицы: на 
основе открытой адресацией и на основе метода цепочек. Как реализована 
HashMap? Почему так сделали (по вашему мнению)? В чем минусы и плюсы 
каждого подхода?</li>
<li>Сколько переходов по ссылкам происходит, когда вы делаете HashMap.get(key) по ключу, который есть в таблице?</li>
<li>Сколько создается новых объектов, когда вы добавляете новый элемент в HashMap?</li>
<li>Как работает HashMap при попытке сохранить в нее два элемента по ключам с одинаковым hashCode, но для которых equals == false?</li>
<li>HashMap может выродиться в список даже для ключей с разным hashCode. Как это возможно?</li>
<li>Какое худшее время работы метода get(key) для ключа, которого нет в таблице (O(1), O(log(N)), O(N), O(N*log(N)), O(N*N))?</li>
<li>Какое худшее время работы метода get(key) для ключа, который есть в таблице (O(1), O(log(N)), O(N), O(N*log(N)), O(N*N))?</li>
<li>Объясните смысл параметров в конструкторе HashMap(int initialCapacity, float loadFactor).</li>
<li>В чем 
разница между HashMap и IdentityHashMap? Для чего нужна IdentityHashMap?
 Как может быть полезна для реализации сериализации или 
клонирования?&nbsp;</li>
<li>В чем разница между HashMap и WeakHashMap? Для чего нужна WeakHashMap?</li>
<li>В WeakHashMap используются WeakReferences. А почему бы не создать SoftHashMap на SoftReferences?</li>
<li>В WeakHashMap используются WeakReferences. А почему бы не создать PhantomHashMap на PhantomReferences?</li>
<li>Сделайте HashSet из HashMap (используйте только множество ключей, но не множество значений).</li>
<li>Сделайте HashMap из HashSet (HashSet&lt;Map.Entry&lt;K, V&gt;&gt;).&nbsp;</li>
<li>Сравните интерфейсы java.util.Queue и java.util.Deque.</li>
<li>Кто кого расширяет: Queue расширяет Deque, или Deque расширяет Queue?</li>
<li>Почему LinkedList реализует и List, и Deque?</li>
<li>В чем разница между классами java.util.Arrays и java.lang.reflect.Array?</li>
<li>В чем разница между классами java.util.Collection и java.util.Collections?</li>
<li>Напишите НЕмногопоточную программу, которая заставляет коллекцию выбросить ConcurrentModificationException.</li>
<li>Что такое "fail-fast поведение"?&nbsp;</li>
<li>Для множеств еnum-ов есть специальный класс java.util.EnumSet? Зачем? Чем авторов не устраивал HashSet или TreeSet?&nbsp;</li>
<li>java.util.Stack - считается "устаревшим". Чем его рекомендуют заменять? Почему?&nbsp;</li>
<li>Какая коллекция реализует дисциплину обслуживания FIFO?</li>
<li>Какая коллекция реализует дисциплину обслуживания FILO?</li>
<li>Приведите пример, когда какая-либо коллекция выбрасывает UnsupportedOperationException.</li>
<li>Почему 
нельзя написать "ArrayList&lt;List&gt; numbers = new 
ArrayList&lt;ArrayList&gt;();" но можно "List&lt;ArrayList&gt; numbers =
 new ArrayList&lt;ArrayList&gt;();"?</li>
<li>LinkedHashMap - что это еще за "зверь"? Что в нем от LinkedList, а что от HashMap?&nbsp;</li>
<li>LinkedHashSet - что это еще за "зверь"? Что в нем от LinkedList, а что от HashSet?</li>
<li>Говорят, на LinkedHashMap легко сделать простенький кэш c "invalidation policy", знаете как?</li>
<li>Что позволяет сделать PriorityQueue?</li>
<li>В чем заключаются отличия java.util.Comparator от java.lang.Comparable?</li>
</ul>
<h3>
<a href="http://jsehelper.blogspot.com/2016/01/java-collections-framework-1.html">Перейти к ответам ►►</a></h3>
<div>
<br></div>
<h3>
<a href="http://jsehelper.blogspot.com/2016/05/java-8-1.html">Java 8.</a></h3>
</div>
<div>
<ul>
<li>Какие нововведения, появились в Java 8?</li>
<li>Как сортировать список строк с помощью лямбда-выражения?</li>
<li>Какова структура лямбда-выражения?</li>
<li>К каким переменным есть доступ у Лямбда-выражений?</li>
<li>Что такое ссылки на метод?</li>
<li>Какие виды ссылок на методы вы знаете?</li>
<li>Объясните выражение System.out::println.</li>
<li>Что такое функциональные интерфейсы?</li>
<li>Для чего нужен функциональный интерфейс BiConsumer&lt;T,U&gt;?</li>
<li>Для чего нужен функциональный интерфейс BiFunction&lt;T,U,R&gt;?</li>
<li>Для чего нужен функциональный интерфейс BinaryOperator&lt;T&gt;?</li>
<li>Для чего нужен функциональный интерфейс BiPredicate&lt;T,U&gt;?</li>
<li>Для чего нужен функциональный интерфейс BooleanSupplier?</li>
<li>Для чего нужен функциональный интерфейс Consumer&lt;T&gt;?</li>
<li>Для чего нужен функциональный интерфейс DoubleBinaryOperator?</li>
<li>Для чего нужен функциональный интерфейс DoubleConsumer?</li>
<li>Для чего нужен функциональный интерфейс DoubleFunction&lt;R&gt;?</li>
<li>Для чего нужен функциональный интерфейс DoublePredicate?</li>
<li>Для чего нужен функциональный интерфейс DoubleSupplier?</li>
<li>Для чего нужен функциональный интерфейс DoubleToIntFunction?</li>
<li>Для чего нужен функциональный интерфейс DoubleToLongFunction?</li>
<li>Для чего нужен функциональный интерфейс DoubleUnaryOperator?</li>
<li>Для чего нужен функциональный интерфейс Function&lt;T,R&gt;?</li>
<li>Для чего нужен функциональный интерфейс IntBinaryOperator?</li>
<li>Для чего нужен функциональный интерфейс IntConsumer?</li>
<li>Для чего нужен функциональный интерфейс IntFunction&lt;R&gt;?</li>
<li>Для чего нужен функциональный интерфейс IntPredicate?</li>
<li>Для чего нужен функциональный интерфейс IntSupplier?</li>
<li>Для чего нужен функциональный интерфейс IntToDoubleFunction?</li>
<li>Для чего нужен функциональный интерфейс IntToLongFunction?</li>
<li>Для чего нужен функциональный интерфейс IntUnaryOperator?</li>
<li>Для чего нужен функциональный интерфейс LongBinaryOperator?</li>
<li>Для чего нужен функциональный интерфейс LongConsumer?</li>
<li>Для чего нужен функциональный интерфейс LongFunction&lt;R&gt;?</li>
<li>Для чего нужен функциональный интерфейс LongPredicate?</li>
<li>Для чего нужен функциональный интерфейс LongSupplier?</li>
<li>Для чего нужен функциональный интерфейс LongToDoubleFunction?</li>
<li>Для чего нужен функциональный интерфейс LongToIntFunction?</li>
<li>Для чего нужен функциональный интерфейс LongUnaryOperator?</li>
<li>Для чего нужен функциональный интерфейс ObjDoubleConsumer&lt;T&gt;?</li>
<li>Для чего нужен функциональный интерфейс ObjIntConsumer&lt;T&gt;?</li>
<li>Для чего нужен функциональный интерфейс ObjLongConsumer&lt;T&gt;?</li>
<li>Для чего нужен функциональный интерфейс Predicate&lt;T&gt;?</li>
<li>Для чего нужен функциональный интерфейс Supplier&lt;T&gt;?</li>
<li>Для чего нужен функциональный интерфейс ToDoubleBiFunction&lt;T,U&gt;?</li>
<li>Для чего нужен функциональный интерфейс ToDoubleFunction&lt;T&gt;?</li>
<li>Для чего нужен функциональный интерфейс ToIntBiFunction&lt;T,U&gt;?</li>
<li>Для чего нужен функциональный интерфейс ToIntFunction&lt;T&gt;?</li>
<li>Для чего нужен функциональный интерфейс ToLongBiFunction&lt;T,U&gt;?</li>
<li>Для чего нужен функциональный интерфейс ToLongFunction&lt;T&gt;?</li>
<li>Для чего нужен функциональный интерфейс UnaryOperator&lt;T&gt;?</li>
<li>Что такое StringJoiner?</li>
<li>Что такое default методы?</li>
<li>Что такое static методы?</li>
<li>Как вызывать default-метод интерфейса в классе?</li>
<li>Как вызывать static-метод интерфейса в классе?</li>
<li>Что такое потоки(stream) в Java 8</li>
<li>Для чего нужен метод collect Java 8?</li>
<li>В чем разница между коллекцией(Collection) и потоком(Stream)?</li>
<li>Для чего предназначен метод forEach в потоках(stream)?</li>
<li>Как вывести на экран 10 случайных чисел, используя forEach?</li>
<li>Для чего предназначен метод map в потоках(stream)?</li>
<li>Как можно вывести на экран уникальные квадраты чисел используя метод map?</li>
<li>Какова цель метода filter в потоках(stream)?</li>
<li>Как вывести на экран количество пустых строк с помощью метода filter?</li>
<li>Для чего предназначен метод limit в потоках(stream)?</li>
<li>Для чего предназначен метод sorted в потоках(stream)?</li>
<li>Как вывести на экран 10 случайных чисел в отсортированном порядке в Java 8?</li>
<li>Параллельная обработка в Java 8?</li>
<li>Как найти максимальное число в списке Java 8?</li>
<li>Как найти минимальное число в списке Java 8?</li>
<li>Как получить сумму всех чисел в списке, используя Java 8?</li>
<li>Как получить среднее значение всех чисел, в списке, используя Java 8?</li>
<li>Что такое Optional?</li>
<li>Что такое Nashorn?</li>
<li>Что такое jjs в Java 8?</li>
<li>Что такое LocalDateTime в Java 8?</li>
<li>Что такое ZonedDateTime в Java 8?</li>
<li>Как получить текущую дату с использованием time API из Java 8?</li>
<li>Как добавить 1 неделю к текущей дате с использованием time API?</li>
<li>Как добавить 1 месяц к текущей дате с использованием time API?</li>
<li>Как добавить 1 год к текущей дате с использованием time API?</li>
<li>Как добавить 10 лет к текущей дате с использованием time API?</li>
<li>Как получить следующий вторник используя time API?</li>
<li>Как получить вторую субботу текущего месяца используя time API?</li>
<li>Как получить текущею дату в миллисекундах используя time API?</li>
<li>Як получить текущею дату по местному времени в миллисекундах используя используя time API?</li>
<li>Какой класс появился в Java 8 для декодирования данных?</li>
<li>Какой класс появился в Java 8 для кодирования данных?</li>
<li>Как создать Base64 декодировщик?</li>
<li>Как создать Base64 кодировщик?&nbsp;</li>
</ul>
<h3>
<a href="http://jsehelper.blogspot.com/2016/05/java-8-1.html">Перейти к ответам ►►</a></h3>
<div>
<br></div>
<h3>
<a href="http://jsehelper.blogspot.com/2016/02/java-1.html" style="font-family: arial, helvetica, sans-serif;">Потоки ввода/вывода в java.</a></h3>
</div>
<div>
<ul>
<li>Что такоє символьная ссылка?</li>
<li>Какая разница между I/О и NIO?</li>
<li>Какие особенности NIO вы знаете?</li>
<li>Какие существуют виды потоков ввода/вывода?</li>
<li>Назовите основные классы потоков ввода/вывода.</li>
<li>Чем отличаются и что общего у OutputStream, InputStream, Writer, Reader?</li>
<li>Какие подклассы базового класса InputStream ви знаєте, для чего они предназначены?</li>
<li>Что вы знаете о RandomAccessFile?</li>
<li>Какие есть режимы доступа к файлу есть у RandomAccessFile ?</li>
<li>Какие подклассы базового класса OutputStream ви знаєте, для чего они предназначены?</li>
<li>Для чего используется PushbackInputStream?</li>
<li>Для чего используется SequenceInputStream?</li>
<li>Какие подклассы базового класса Reader ви знаєте, для чего они предназначены?</li>
<li>Какие подклассы базового класса Writer ви знаєте, для чего они предназначены?</li>
<li>Что &nbsp;такое абсолютный путь и относительный путь?</li>
<li>В каких пакетах лежат классы-потоки?</li>
<li>Что вы знаете о классах-надстройках?</li>
<li>Какой класс-надстройка позволяет читать данные из входного байтового потока в формате примитивных типов данных?</li>
<li>Какой класс-надстройка позволяет ускорить чтение/запись за счет использования буфера?</li>
<li>Какие классы позволяют преобразовать байтовые потоки в символьные и обратно?</li>
<li>В чем отличие класса PrintWriter от PrintStream?</li>
<li>Какой класс предназначен для работы с элементами файловой системы?</li>
<li>Какой символ является разделителем при указании пути в файловой системе?</li>
<li>Какие методы класса File ви знаєте?</li>
<li>Что вы знаете об интерфейсе FileFilter?</li>
<li>Какие классы позволяют архивировать объекты?</li>
</ul>
<h3>
<a href="http://jsehelper.blogspot.com/2016/02/java-1.html">Перейти к ответам ►►</a></h3>
<div>
<br></div>
</div>
<h3>
<a href="http://jsehelper.blogspot.com/2016/01/multithreading-1.html">Multithreading.</a></h3>
<h3>
<div>
</div>
</h3>
<div>
<ul>
<li>Чем отличается процесс от &nbsp;потока?</li>
<li>Каким образом можно создать поток?</li>
<li>Что такое монитор?</li>
<li>Какие способы синхронизации в Java?</li>
<li>Как работают методы wait и notify/notifyAll?</li>
<li>Чем отличается работа метода wait с параметром и без параметра?</li>
<li>Как работает метод Thread.yield()? Чем отличаются методы Thread.sleep() и Thread.yield()?</li>
<li>Как работает метод Thread.join()?</li>
<li>Что такое dead lock?</li>
<li>На каком объекте происходит синхронизация при вызове static synchronized метода?</li>
<li>Для чего используется ключевое слово volatile, synchronized, transient, native?</li>
<li>Что значит приоритет потока?</li>
<li>Что такое потоки –демоны в джава?</li>
<li>Что значит усыпить поток?</li>
<li>В каких состояниях может быть &nbsp;поток в джава? Как вообще работает поток?</li>
<li>Чем отличаются два интерфейса для реализации задач Runnable и Callable?</li>
<li>Различия между CyclicBarrier и CountDownLatch?</li>
<li>Что такое состояние гонки (race condition)?</li>
<li>Как остановить нить?</li>
<li>Что происходит, когда в нити появляется исключение?</li>
<li>Что такое ThreadLocal переменная?</li>
<li>Что такое FutureTask?</li>
<li>Различие между interrupted и isInterrupted?</li>
<li>Почему методы wait и notify вызываются в синхронизированном блоке?</li>
<li>Что такое пул нитей?</li>
<li>Различия между livelock и deadlock?</li>
<li>Как проверить, удерживает ли нить lock?</li>
<li>Как получить дамп нити?</li>
<li>Какой JVM параметр используется для контроля размера стека нити?</li>
<li>Различия между synchronized и ReentrantLock?</li>
<li>Что такое Semaphore?</li>
<li>Что будет, если очередь пула нитей уже заполнена, а вы подадите задачу?</li>
<li>Различия между методами submit() и execute() у пула нитей?</li>
<li>Что такое блокирующий метод?</li>
<li>Что такое ReadWriteLock?</li>
<li>Что такое double checked locking Синглтона?</li>
<li>Что такое фреймворк Fork/Join?</li>
</ul>
</div>
<h3>
<div>
<div>
<div>
</div>
</div>
</div>
</h3>
<h3>
<a href="http://jsehelper.blogspot.com/2016/01/multithreading-1.html">Перейти к ответам ►►</a></h3>
<h3>
<a href="https://jsehelper.blogspot.com/2016/08/java-junior-interview-questions.html">Список вопросов продолжение.</a></h3>	

</body></html>