<!DOCTYPE html>
<html lang="en"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
	<meta charset="UTF-8">
	<title>Hib p1</title>
</head>
<body>

<h3 style="text-align: justify;">
<ul>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Что такое Hibernate?</span></li>
</ul>
</h3>
<div style="text-align: justify;">
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Это фреймворк для объектно-реляционного отображения сущностей в традиционные реляционные базу данных.</span></div>
<div style="text-align: justify;">
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Основные возможности фреймворка:</span></div>
<div style="text-align: justify;">
</div>
<ul>
<li style="text-align: justify;"><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Автоматическая генерация и обновление таблиц в базах данных;</span></li>
<li style="text-align: justify;"><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Поскольку
 основные запросы к базе данных (сохранение, обновление, удаление и 
поиск) представлены как методы фрейморка, то значительно сокращается 
код, который пишется разработчиком;</span></li>
<li style="text-align: justify;"><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Обеспечивает
 использование SQL подобного языка (HQL - hibernate query language). 
Запросы HQL могут быть записаны рядом объектами данных (POJO классы 
подготовленные для работы с базой данных).</span></li>
</ul>
<div style="text-align: left;">
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"><br></span></div>
<h3 style="text-align: justify;">
<ul>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Что такое ORM?</span></li>
</ul>
</h3>
<div style="text-align: justify;">
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">ORM (англ. Object-relational mapping, рус. Объектно-реляционное отображение) -&nbsp;технология программирования,</span><br>
<a name="more"></a><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">
 которая&nbsp;связывает базы данных с концепциями 
объектно-ориентированных языков программирования, создавая "виртуальную 
объектную базу данных".</span><br>
<br></div>
<div style="text-align: justify;">
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"></span></div>
<h3 style="text-align: justify;">
<ul>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Какие преимущства от использования Hibernate?</span></li>
</ul>
</h3>
<div style="text-align: justify;">
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Некоторые из них:</span><br>
<ul>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Устраняет
 множество повторяющегося кода, который постоянно преследует 
разработчика при работе с JDBC. Скрывает от разработчика множество кода,
 необходимого для управления ресурсами и позволяет сосредоточиться на 
бизнес логике.</span></li>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Поддерживает XML так же как и JPA аннотации, что позволяет сделать реализацию кода независимой.</span></li>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Предоставляет
 собственный мощный язык запросов (HQL), который похож на SQL. Стоит 
отметить, что HQL полностью объектно-ориентирован и понимает такие 
принципы, как наследование, полиморфизм и ассоциации (связи).</span></li>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Hibernate
 легко интегрируется с другими Java EE фреймворками, например, Spring 
Framework поддерживает встроенную интеграцию с Hibernate.</span></li>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Поддерживает ленивую инициализацию используя proxy объекты и выполняет запросы к базе данных только по необходимости.</span></li>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Поддерживает разные уровни cache, а следовательно может повысить производительность.</span></li>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Важно,
 что Hibernate может использовать чистый SQL, а значит поддерживает 
возможность оптимизации запросов и работы с любым сторонним вендором БД.</span></li>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Hibernate
 - open source проект. Благодаря этому доступны тысячи открытых статей, 
примеров, а так же документации по использованию фреймворка.</span></li>
</ul>
<br></div>
<div style="text-align: justify;">
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"></span></div>
<h3 style="text-align: justify;">
<ul>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Как Hibernate помогает в программировании?</span></li>
</ul>
</h3>
<div style="text-align: justify;">
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Hibernate реализует ряд фичь которые значительно упрощают работу разработчика.</span></div>
<div style="text-align: justify;">
</div>
<ul>
<li style="text-align: justify;"><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Одной
 из таких фичь является то, что hibernate позволяет разработчику 
избежать написания большинства SQL запросов (они уже реализованы , вам 
надо просто использовать методы которые предоставляет фреймворк).</span></li>
<li style="text-align: justify;"><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Под
 бортом у Hibernate есть куча полезных инструментов которые значительно 
ускоряют работу приложения, самыми примечательными из них являются 
двухуровневое кэширования и тонкие настройки lazy и fetch изъятия.</span></li>
<li style="text-align: justify;"><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Сам генерирует таблицы в базу данных</span></li>
</ul>
<div style="text-align: justify;">
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"></span><br>
<div>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"></span></div>
</div>
<h3 style="text-align: justify;">
<ul>
<li><b style="font-family: arial, helvetica, sans-serif;">Какие преимущества Hibernate над JDBC?</b></li>
</ul>
</h3>
<div style="text-align: justify;">
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Hibernate имеет ряд преимуществ перед JDBC API:</span></div>
<div style="text-align: justify;">
<ul>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Hibernate удаляет множество повторяющегося кода из JDBC API, а следовательно его легче читать, писать и поддерживать.</span></li>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Hibernate поддерживает наследование, ассоциации и коллекции, что не доступно в JDBC API.</span></li>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Hibernate
 неявно использует управление транзакциями. Большинство запросов нельзя 
выполнить вне транзакции. При использовании JDBC API для управления 
транзакциями нужно явно использовать commit и rollback.</span></li>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">JDBC
 API throws SQLException, которое относится к проверяемым исключениям, а
 значит необходимо постоянно писать множество блоков try-catch. В 
большинстве случаев это не нужно для каждого вызова JDBC и используется 
для управления транзакциями. Hibernate оборачивает исключения JDBC через
 непроверяемые JDBCException или HibernateException, а значит нет 
необходимости проверять их в коде каждый раз. Встроенная поддержка 
управления транзакциями в Hibernate убирает блоки try-catch.</span></li>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Hibernate Query Language (HQL) более объектно ориентированный и близкий к Java язык программирования, чем SQL в JDBC.</span></li>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Hibernate поддерживает кэширование, а запросы JDBC - нет, что может понизить производительность.</span></li>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Hibernate
 предоставляет возможность управления БД (например создания таблиц), а в
 JDBC можно работать только с существующими таблицами в базе данных.</span></li>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Конфигурация
 Hibernate позволяет использовать JDBC вроде соединения по типу JNDI 
DataSource для пула соединений. Это важная фича для энтерпрайз 
приложений, которая полностью отсутствует в JDBC API.</span></li>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Hibernate
 поддерживает аннотации JPA, а значит код является переносимым на другие
 ORM фреймворки, реализующие стандарт, в то время как код JDBC сильно 
привязан к приложению.</span></li>
</ul>
</div>
<div style="text-align: justify;">
<br>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"></span></div>
<h3 style="text-align: justify;">
<ul>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Что такое конфигурационный файл Hibernate?</span></li>
</ul>
</h3>
<div style="text-align: justify;">
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Файл
 конфигурации Hibernate содержит в себе данные о базе данных и необходим
 для инициализации SessionFactory. В .xml файле необходимо указать 
вендора базы данных или JNDI ресурсы, а так же информацию об 
используемом диалекте, что поможет hibernate выбрать режим работы с 
конкретной базой данных.</span><br>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"><br></span></div>
<h3 style="text-align: justify;">
<ul>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Способы конфигурации работы с Hibernate.</span></li>
</ul>
</h3>
<div style="text-align: justify;">
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Существует четыре способа конфигурации работы с Hibernate :</span></div>
<div style="text-align: justify;">
</div>
<ul>
<li style="text-align: justify;"><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">используя аннотации;</span></li>
<li style="text-align: justify;"><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">hibernate.cfg.xml;</span></li>
<li style="text-align: justify;"><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">hibernate.properties;</span></li>
<li style="text-align: justify;"><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">persistence.xml.</span></li>
</ul>
<div style="text-align: justify;">
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Самый
 частый способ конфигурации: через аннотации и файл persistence.xml, что
 касается файлов hibernate.properties и hibernate.cfg.xml, то 
hibernate.cfg.xml главнее (если в приложение есть оба файла, то 
принимаются настройки из файла hibernate.cfg.xml). Конфигурация 
аннотациями, хоть и удобна, но не всегда возможна, к примеру, если для 
разных баз данных или для разных ситуаций вы хотите иметь разные 
конфигурацию сущностей, то следует использовать xml файлы конфигураций.</span></div>
<div style="text-align: justify;">
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"><br></span></div>
<h3 style="text-align: justify;">
<ul>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Что такое Hibernate mapping file?</span></li>
</ul>
</h3>
<div style="text-align: justify;">
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Файл
 отображения (mapping file) используется для связи entity бинов и 
колонок в таблице базы данных. В случаях, когда не используются 
аннотации JPA, файл отображения .xml может быть полезен (например при 
использовании сторонних библиотек).</span><br>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"><br></span></div>
<h3>
<ul>
<li style="text-align: justify;"><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Что такое Переходные объекты (Transient Objects)?</span></li>
</ul>
</h3>
<div style="text-align: justify;">
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Экземпляры
 долгоживущих классов, которые в настоящее время не связаны c Cессией. 
Они, возможно, были инициализированы в приложении и еще не сохранены, 
или же они были инициализированы закрытой Cессией.</span><br>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"><br></span></div>
<h3 style="text-align: justify;">
<ul>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Что такое постоянные объекты (Persistent objects)?</span></li>
</ul>
</h3>
<div style="text-align: justify;">
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Короткоживущие,
 однопоточные объекты, содержащие постоянное состояние и бизнес-функции.
 Это могут быть простые Java Beans/POJOs (Plain Old Java Object). Они 
связаны только с одной Cессией. После того, как Cессия закрыта, они 
будут отделены и свободны для использования в любом протоколе 
прикладного уровня (например, в качестве объектов передачи данных в и из
 представления).</span><br>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"><br></span></div>
<h3 style="text-align: justify;">
<ul>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Что такое TransactionFactory?</span></li>
</ul>
</h3>
<div style="text-align: justify;">
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Фабрика для экземпляров Transaction. Интерфейс не открыт для приложения, но может быть расширен или реализован разработчиком.</span><br>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"><br></span></div>
<h3 style="text-align: justify;">
<ul>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Что такое ConnectionProvider?</span></li>
</ul>
</h3>
<div style="text-align: justify;">
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Фабрика
 и пул JDBC соединений. Интерфейс абстрагирует приложение от основного 
источника данных или диспетчера драйверов. Он не открыт для приложения, 
но может быть расширен или реализован разработчиком.</span><br>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"><br></span></div>
<h3 style="text-align: justify;">
<ul>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Что такое Трансакция (Transaction)?</span></li>
</ul>
</h3>
<div style="text-align: justify;">
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Однопоточный,
 короткоживущий объект, используемый приложением для указания atomic 
переменных работы. Он абстрагирует приложение от основных JDBC, JTA или 
CORBA трансакций. Сессия может охватывать несколько Трансакций в 
некоторых случаях. Тем не менее, разграничение транзакций, также 
используемое в основах API или Transaction, всегда обязателно.</span><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif; text-align: justify;"></span><br>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"><br></span></div>
<h3 style="text-align: justify;">
<ul>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Какие существуют стратегии загрузки объектов в Hibernate?</span></li>
</ul>
</h3>
<div style="text-align: justify;">
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Существуют следующие типа fetch'a:</span></div>
<div style="text-align: justify;">
<ul>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Join fetching: hibernate получает ассоциированные объекты и коллекции одним SELECT используя OUTER JOIN</span></li>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Select
 fetching: использует уточняющий SELECT чтобы получить ассоциированные 
объекты и коллекции. Если вы не установите lazy fetching определив 
lazy="false", уточняющий SELECT будет выполнен только когда вы 
запрашиваете доступ к ассоциированным объектам</span></li>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Subselect
 fetching: поведение такое же, как у предыдущего типа, за тем 
исключением, что будут загружены ассоциации для все других коллекций, 
"родительским" для которых является сущность, которую вы загрузили 
первым SELECT’ом.</span></li>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Batch fetching: оптимизированная стратегия вида select fetching. Получает группу сущностей или коллекций в одном SELECT’е</span><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">.</span></li>
</ul>
</div>
<div style="text-align: justify;">
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"></span></div>
<div>
<div style="text-align: justify;">
<br></div>
</div>
<h3 style="text-align: justify;">
<ul>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Какие бывают id generator классы в Hibernate?</span></li>
</ul>
</h3>
<div style="text-align: justify;">
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">increment
 - генерирует идентификатор типа long, short или int, которые будет 
уникальным только в том случае, если другой процесс не добавляет запись в
 эту же таблицу в это же время.</span></div>
<div style="text-align: justify;">
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">identity
 - генерирует идентификатор типа long, short или int. Поддерживается в 
DB2, MySQL, MS SQL Server, Sybase и HypersonicSQL.</span></div>
<div style="text-align: justify;">
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">sequence
 - использует последовательности в DB2, PostgreSQL, Oracle, SAP DB, 
McKoi или генератор Interbase. Возвращает идентификатор типа long, short
 или int.</span></div>
<div style="text-align: justify;">
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">hilo
 - использует алгоритм hi/lo для генерации идентификаторов типа long, 
short или int. Алгоритм гарантирует генерацию идентификаторов, которые 
уникальны только в данной базе данных.</span></div>
<div style="text-align: justify;">
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">seqhilo
 - использует алгоритм hi/lo для генерации идентификаторов типа long, 
short или int учитывая последовательность базы данных.</span></div>
<div style="text-align: justify;">
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">uuid
 - использует для генерации идентификатора алгоритм 128-bit UUID. 
Идентификатор будет уникальным в пределах сети. UUID представляется 
строкой из 32 чисел.</span></div>
<div style="text-align: justify;">
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">guid - использует сгенерированую БД строку GUID в MS SQL Server и MySQL.</span></div>
<div style="text-align: justify;">
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">native - использует identity, sequence или hilo в завимисимости от типа БД, с которой работает приложение</span></div>
<div style="text-align: justify;">
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">assigned
 - позволяет приложению устанавливать идентификатор объекту, до вызова 
метода save(). Используется по умолчанию, если тег &lt;generator&gt; не 
указан.</span></div>
<div style="text-align: justify;">
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">select - получает первичный ключ, присвоенный триггером БД</span></div>
<div style="text-align: justify;">
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">foreign
 - использует идентификатор другого, связанного с данным объекта. 
Используется в &lt;one-to-one&gt; ассоциации первичных ключей.</span></div>
<div style="text-align: justify;">
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">sequence-identity - специализированный генератор идентификатора.</span></div>
<div style="text-align: justify;">
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"></span></div>
<div>
<div style="text-align: justify;">
<br></div>
</div>
<h3 style="text-align: justify;">
<ul>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Какие ключевые интерфейсы использует Hibernate?</span></li>
</ul>
</h3>
<div style="text-align: justify;">
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Существует пять ключевых интерфейсов которые используются в каждом приложении связанном с Hibernate:</span></div>
<div style="text-align: justify;">
</div>
<ul>
<li style="text-align: justify;"><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Session interface;</span></li>
<li style="text-align: justify;"><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">SessionFactory interface;</span></li>
<li style="text-align: justify;"><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Configuration interface;</span></li>
<li style="text-align: justify;"><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Transaction interface;</span></li>
<li style="text-align: justify;"><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Query and Criteria interfaces.</span></li>
</ul>
<div style="text-align: justify;">
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"></span></div>
<div>
<br></div>
<h3 style="text-align: justify;">
<ul>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Назовите некоторые важные аннотации, используемые для отображения в Hibernate.</span></li>
</ul>
</h3>
<div style="text-align: justify;">
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Hibernate
 поддерживает как аннотации из JPA, так и свои собственные, которые 
находятся в пакете org.hibernate.annotations. Наиболее важные аннотации 
JPA и Hibernate:</span></div>
<div style="text-align: justify;">
</div>
<ul>
<li style="text-align: justify;"><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">javax.persistence.Entity: используется для указания класса как entity bean.</span></li>
<li style="text-align: justify;"><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">javax.persistence.Table: используется для определения имени таблицы из БД, которая будет отображаться на entity bean.</span></li>
<li style="text-align: justify;"><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">javax.persistence.Access:
 определяет тип доступа, поле или свойство. Поле — является значением по
 умолчанию и если нужно, чтобы hibernate использовать методы 
getter/setter, то их необходимо задать для нужного свойства.</span></li>
<li style="text-align: justify;"><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">javax.persistence.Id: определяет primary key в entity bean.</span></li>
<li style="text-align: justify;"><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">javax.persistence.EmbeddedId: используется для определения составного ключа в бине.</span></li>
<li style="text-align: justify;"><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">javax.persistence.Column: определяет имя колонки из таблицы в базе данных.</span></li>
<li style="text-align: justify;"><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">javax.persistence.GeneratedValue:
 задает стратегию создания основных ключей. Используется в сочетании с 
javax.persistence.GenerationType enum.</span></li>
<li style="text-align: justify;"><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">javax.persistence.OneToOne:
 задает связь один-к-одному между двумя сущностными бинами. 
Соответственно есть другие аннотации OneToMany, ManyToOne и ManyToMany.</span></li>
<li style="text-align: justify;"><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">org.hibernate.annotations.Cascade:
 определяет каскадную связь между двумя entity бинами. Используется в 
связке с org.hibernate.annotations.CascadeType.</span></li>
<li style="text-align: justify;"><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">javax.persistence.PrimaryKeyJoinColumn:
 определяет внешний ключ для свойства. Используется вместе с 
org.hibernate.annotations.GenericGenerator и 
org.hibernate.annotations.Parameter</span><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">.</span></li>
</ul>
<br>
<div style="text-align: justify;">
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"></span></div>
<h3 style="text-align: justify;">
<ul>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Какая роль интерфейса Session в Hibernate?</span></li>
</ul>
</h3>
<div style="text-align: justify;">
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Session
 - это основной интерфейс, который отвечает за связь с базой данных. Так
 же, он помогает создавать объекты запросов для получение персистентных 
объектов. (персистентный объект - объект который уже находится в базе 
данных; объект запроса - объект который получается когда мы получаем 
результат запроса в базу данных, именно с ним работает приложение). 
Обьект Session можно получить из SessionFactory :</span><br>
<div class="separator" style="clear: both; text-align: center;">
<a href="https://2.bp.blogspot.com/-pPjKNsT7dE8/Vu7MpXHcohI/AAAAAAAAAX0/eQ3DHi5d8L0W5oS2Xy7gxKNWzukVx4YbQ/s1600/SessionFactory.openSession.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img src="hibernate%20p1_files/SessionFactory.jpg" border="0"></a></div>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Роль интерфейса Session:</span></div>
<div style="text-align: justify;">
</div>
<ul>
<li style="text-align: justify;"><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">является оберткой для jdbc подключения к базе данных;</span></li>
<li style="text-align: justify;"><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">является
 фабрикой для транзакций (согласно официальной документации transaction -
 аllows the application to define units of work, что , по сути, означает
 что транзакция определяет границы операций связанных с базой данных).</span></li>
<li style="text-align: justify;"><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">является хранителем обязательного кэша первого уровня.</span></li>
</ul>
<div style="text-align: justify;">
<br></div>
<h3 style="text-align: justify;">
<ul>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Какая роль интерфейса SessionFactory в Hibernate?</span></li>
</ul>
</h3>
<div style="text-align: justify;">
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Именно
 из объекта SessionFactory мы получаем объекты типа Session. На все 
приложение существует только одна SessionFactory и она инициализируеться
 вместе со стартом приложения. SessionFactory кэширует мета-дату и SQL 
запросы которые часто используются приложением во время работы. Так же 
оно кэширует информацию которая была получена в одной из транзакций и 
может быть использована и в других транзакциях.</span></div>
<div style="text-align: justify;">
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Обьект SessionFactory можно получить следующим обращением:</span></div>
<div style="text-align: justify;">
<div class="separator" style="clear: both; text-align: center;">
<a href="https://1.bp.blogspot.com/-o119gUWukH0/Vu7M82cfsdI/AAAAAAAAAX4/79cMKTz8m3QoyM9ENCINAvzA5tpY2m_jQ/s1600/buildSessionFactory.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img src="hibernate%20p1_files/buildSessionFactory.jpg" height="26" border="0" width="640"></a></div>
<br>
<h3>
<ul>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Является ли Hibernate SessionFactory потокобезоспансым?</span></li>
</ul>
</h3>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Т.к.
 объект SessionFactory immutable (неизменяемый), то да, он 
потокобезопасный. Множество потоков может обращаться к одному объекту 
одновременно.</span><br>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"><br></span>
<h3>
<div>
<ul>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">В чем разница между openSession и getCurrentSession?</span></li>
</ul>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"></span></div>
</h3>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Hibernate
 SessionFactory getCurrentSession() возвращает сессию, связанную с 
контекстом. Но для того, чтобы это работало, нам нужно настроить его в 
конфигурационном файле hibernate. Так как этот объект session связан с 
контекстом hibernate, то отпадает необходимость к его закрытию. Объект 
session закрывается вместе с закрытием SessionFactory.</span><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"></span><br>
<div class="separator" style="clear: both; text-align: center;">
<a href="https://2.bp.blogspot.com/-oAvDdSTXpBU/Vu7KaqKOnfI/AAAAAAAAAXo/7QCM8RpE_74mYF6W6ZQkdzvoHF_XVVqfw/s1600/getCurrentSession.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img src="hibernate%20p1_files/getCurrentSession.jpg" border="0"></a></div>
<div>
<div>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Метод
 Hibernate SessionFactory openSession() всегда создает новую сессию. Мы 
должны обязательно контролировать закрытие объекта сеанса по завершению 
всех операций с базой данных. Для многопоточной среды необходимо 
создавать новый объект session для каждого запроса.</span></div>
<div>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Существует
 еще один метод openStatelessSession(), который возвращает session без 
поддержки состояния. Такой объект не реализует первый уровень 
кэширования и не взаимодействует с вторым уровнем. Сюда же можно отнести
 игнорирование коллекций и некоторых обработчиков событий. Такие объекты
 могут быть полезны при загрузке больших объемов данных без удержания 
большого кол-ва информации в кэше.</span></div>
</div>
<div>
<br></div>
</div>
<h3 style="text-align: justify;">
<ul>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Какие типы коллекций представлены в Hibernate?</span></li>
</ul>
</h3>
<div style="text-align: justify;">
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Bag, Set, List, Map, Array.</span></div>
<div style="text-align: justify;">
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"></span></div>
<div>
<div style="text-align: justify;">
<br></div>
</div>
<h3 style="text-align: justify;">
<ul>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Какие типы менеджмента транзакций поддерживаются в Hibernate?</span></li>
</ul>
</h3>
<div style="text-align: justify;">
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Hibernate взаимодействует с БД через JDBC-соединение. Таким образом он поддерживает управляемые и не управляемые транзакции.</span></div>
<div style="text-align: justify;">
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Неуправляемые транзакции в web-контейнере:</span></div>
<div style="text-align: justify;">
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"></span></div>
<div class="separator" style="clear: both; text-align: center;">
<a href="https://3.bp.blogspot.com/-5496cMV4J3o/VsFnNQhFsYI/AAAAAAAAAOg/gnkDkSPPGoM/s1600/HibernateTransactionManager.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img src="hibernate%20p1_files/HibernateTransactionManager.jpg" height="68" border="0" width="640"></a></div>
<div>
<span style="text-align: justify;"><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Управляемые транзакции на сервере приложений, использующий JTA:</span></span></div>
<div class="separator" style="clear: both; text-align: center;">
<a href="https://3.bp.blogspot.com/-DU8NCq1ctwA/VsFnn4UhwSI/AAAAAAAAAOk/2f5mRp_zOSc/s1600/HibernateTransactionManager_jta.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img src="hibernate%20p1_files/HibernateTransactionManager_jta.jpg" height="71" border="0" width="640"></a></div>
<div style="text-align: justify;">
<span style="text-align: justify;"><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"></span></span><br></div>
<h3 style="text-align: justify;">
<ul>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Что собой являет коллекция типа Bag и зачем она используется?</span></li>
</ul>
</h3>
<div style="text-align: justify;">
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Своей
 реализации тип коллекции Bag очень напоминает Set, разница состоит в 
том, что Bag может хранить повторяющиеся значения. Bag хранит 
непроиндексированный список элементов. Большинство таблиц в базе данных 
имеют индексы отображающие положение элемента данных один относительно 
другого, данные индексы имеют представление в таблице в виде отдельной 
колонки. При объектно-реляционном маппинге, значения колонки индексов 
мапится на индекс в Array, на индекс в List или на key в Map. Если вам 
надо получить коллекцию объектов не содержащих данные индексы, то вы 
можете воспользоваться коллекциями типа Bag или Set (коллекции содержат 
данные в неотсортированном виде, но могут быть отсортированы согласно 
запросу).</span></div>
<div style="text-align: justify;">
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"></span></div>
<div>
<div style="text-align: justify;">
<br></div>
</div>
<h3 style="text-align: justify;">
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"></span><div>
<ul>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Какие типы кэша используются в Hibernate?</span></li>
</ul>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"></span></div>
</h3>
<div style="text-align: justify;">
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Hibernate использует 2 типа кэша: кэш первого уровня и кэш второго уровня.</span></div>
<div style="text-align: justify;">
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Кэш
 первого уровня ассоциирован с объектом сесии, в то время, как кэш 
второго уровня ассоциирован с объектом фабрики сессий. По-умолчанию 
Hibernate использует кэш первого уровня для каждой операции в 
транзакции. В первую очередь кэш используется чтобы уменьшить количество
 SQL-запросов. Например если объект модифицировался несколько раз в 
одной и той же транзакции, то Hibernate сгенерирует только один UPDATE.</span></div>
<div style="text-align: justify;">
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Чтобы
 уменьшить трафик с БД, Hibernate использует кэш второго уровня, который
 является общим для всего приложения, а не только для данного 
конкретного пользователя. Таким образом если результат запроса находится
 в кэше, мы потенциально уменьшаем количество транзакций к БД.</span></div>
<div style="text-align: justify;">
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">EHCache
 - это быстрый и простой кэш. Он поддерживает read-only и read/write 
кэширование, а так же кэширование в память и на диск. Но не поддерживает
 кластеризацию.</span></div>
<div style="text-align: justify;">
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">OSCache
 - это другая opensource реализация кэша. Помимо всего, что поддерживает
 EHCache, эта реализация так же поддерживает кластеризацию через 
JavaGroups или JMS.</span></div>
<div style="text-align: justify;">
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">SwarmCache
 - это просто cluster-based решение, базирующееся на JavaGroups. 
Поддерживает read-only и нестрогое read/write кэширование. Этот тип 
кэширование полезен, когда количество операций чтения из БД превышает 
количество операций записи.</span></div>
<div style="text-align: justify;">
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">JBoss TreeCache - предоставляет полноценный кэш транзакции.</span></div>
<div style="text-align: justify;">
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"></span></div>
<div>
<div style="text-align: justify;">
<br></div>
</div>
<h3 style="text-align: justify;">
<ul>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Какие существуют типы стратегий кэша?</span></li>
</ul>
</h3>
<div style="text-align: justify;">
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Read-only:
 эта стратегия используется когда данные вычитываются, но никогда не 
обновляется. Самая простая и производительная стратегия</span></div>
<div style="text-align: justify;">
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Read/write: может быть использована, когда данные должны обновляться.</span></div>
<div style="text-align: justify;">
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Нестрогий read/write: эта стратегия не гарантирует, что две транзакции не модифицируют одни и те же данные синхронно.</span></div>
<div style="text-align: justify;">
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Transactional: полноценное кэширование транзакций. Доступно только в JTA окружении.</span><br>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"><br></span>
<h3>
<div>
<ul>
<li><span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Что вы знаете о кэширование в Hibernate? Объясните понятие кэш первого уровня в Hibernate?</span></li>
</ul>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"></span></div>
</h3>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Hibernate
 использует кэширование, чтобы сделать наше приложение быстрее. Кэш 
Hibernate может быть очень полезным в получении высокой 
производительности приложения при правильном использовании. Идея 
кэширования заключается в сокращении количества запросов к базе данных.</span><br>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Кэш
 первого уровня Hibernate связан с объектом Session. Кэш первого уровня у
 Hibernate &nbsp;включен по умолчанию и не существует никакого способа, 
чтобы его отключить. Однако Hibernate предоставляет методы, с помощью 
которых мы можем удалить выбранные объекты из кэша или полностью 
очистить кэш.</span><br>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Любой
 объект закэшированный в session не будет виден другим объектам session.
 После закрытия объекта сессии все кэшированные объекты будут потеряны.</span><br>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"></span><br>
<h3>
<span style="font-family: &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"><a href="https://jsehelper.blogspot.nl/2016/03/object-relational-mapping-orm-hibernate.html">Object relational mapping (ORM), Hibernate (часть 2).</a></span></h3>
</div>

</body></html>