<!DOCTYPE html>
<html lang="en"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
	<meta charset="UTF-8">
	<title>Hib p2</title>
<link rel="stylesheet" href="../../Guides/grey.css">
</head>
<body>

<h3>
<ul>
<li>Как настраивается кэш второго уровня в Hibernate?</li>
</ul>
</h3>
Чтобы указать кэш второго уровня нужно определить hibernate.cache.provider_class в hibernate.cfg.xml:<br>
<div class="separator" style="clear: both; text-align: center;">
<a href="https://2.bp.blogspot.com/-SVcK3t4_d8s/VsFoNU3WgpI/AAAAAAAAAOs/j_mFHKavAD0/s1600/hibernate.cache.provider_class.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img src="hibernate%20p2_files/hibernate_002.jpg" height="66" border="0" width="640"></a></div>
<div>
По-умолчанию используется EHCache.</div>
<div>
Чтобы
 использвать кэш запросов нужно его включить установив свойство 
hibernate.cache.use_query_cache в true в hibernate.properties.</div>
<div>
</div>
<div>
<div>
<br></div>
</div>
<h3>
<ul>
<li>Какая разница в работе методов load(); и get();?</li>
</ul>
</h3>
<div>
Hibernate session обладает различными методами для загрузки данных из базы данных. Наиболее часто<br>
<a name="more"></a> используемые методы для этого - get() и load().<br>
<ul>
<li>Метод <b>load()</b>; обычно используется когда вы не уверены, что запрашиваемый объект уже находится в базе данных. 
<br>Если объект не найден, то метод кидает 
исключение. <br>Если объект найден — метод возвращает прокси объект, который является ссылкой на объект, находящийся в базе данных (запрос в базу данных еще не был осуществлен, своего рода lazy изъятие). 
Сам запрос к базе данных произойдёт, когда мы непосредственно 
обратимся к необходимому объекту через прокси объект.</li>
<li>Метод <b>get()</b>; используется тогда, вы на 100 процентов не уверены есть ли запрашиваемый объект в базе данных. В случае обращение к несуществующему объекту, метод get(); вернет null. В случае нахождения объекта бд, метод 
get(); вернет сам объект и запрос в базу данных будет произведен 
немедленно.</li>
</ul>
<br>
<h3>
<ul>
<li>Каковы существуют различные состояния у entity bean?</li>
</ul>
</h3>
<b>Transient:</b><br>
 состояние, при котором объект никогда не был связан с какой-либо 
сессией и не является персистентностью. Этот объект находится во 
временном состоянии. Объект в этом состоянии может стать персистентным 
при вызове метода save(), persist() или saveOrUpdate(). Объект 
персистентности может перейти в transient состоянии после вызова метода 
delete().<br>
<b>Persistent:</b><br>
 когда объект связан с уникальной сессией он находится в состоянии 
persistent (персистентности). Любой экземпляр, возвращаемый методами 
get() или load() находится в состоянии persistent.<br>
<b>Detached:</b><br>
 если объект был персистентным, но сейчас не связан с какой-либо 
сессией, то он находится в отвязанном (detached) состоянии. Такой объект
 можно сделать персистентным используя методы update(), saveOrUpdate(), 
lock() или replicate(). Состояния transient или detached так же могут 
перейти в состояние persistent как новый объект персистентности после 
вызова метода merge().<br>
<div>
<br></div>
<h3>
<ul>
<li>Что произойдет, если будет отсутствовать конструктор без аргументов у Entity Bean?</li>
</ul>
</h3>
Hibernate
 использует рефлексию для создания экземпляров Entity бинов при вызове 
методов get() или load(). Для этого используется метод 
Class.newInstance(), который требует наличия конструктора без 
параметров. Поэтому, в случае его отсутствия, вы получите ошибку 
HibernateException.<br>
<br>
<h3>
<ul>
<li>Как используется вызов метода Hibernate Session merge()?</li>
</ul>
</h3>
Hibernate
 merge() может быть использован для обновления существующих значений, 
однако этот метод создает копию из переданного объекта сущности и 
возвращает его. Возвращаемый объект является частью контекста 
персистентности и отслеживает любые изменения, а переданный объект не 
отслеживается.<br>
<div>
<br></div>
<h3>
<ul>
<li>В чем разница между Hibernate save(), saveOrUpdate() и persist()?</li>
</ul>
</h3>
Hibernate
 save() используется для сохранения сущности в базу данных. Проблема с 
использованием метода save() заключается в том, что он может быть вызван
 без транзакции. А следовательно если у нас имеется отображение 
нескольких объектов, то только первичный объект будет сохранен и мы 
получим несогласованные данные. Также save() немедленно возвращает 
сгенерированный идентификатор.<br>
Hibernate persist() аналогичен save() с транзакцией. persist() не возвращает сгенерированный идентификатор сразу.<br>
Hibernate
 saveOrUpdate() использует запрос для вставки или обновления, 
основываясь на предоставленных данных. Если данные уже присутствуют в 
базе данных, то будет выполнен запрос обновления. Метод saveOrUpdate() 
можно применять без транзакции, но это может привести к аналогичным 
проблемам, как и в случае с методом save().<br>
<div>
<br></div>
</div>
<h3>
<ul>
<li>Что такое Lazy fetching(изъятие) в Hibernate?</li>
</ul>
</h3>
<div>
Тип
 изьятия Lazy, в Hibernate, связан с листовыми(дочерними) сущностями и 
определяют политику совместного изъятия, если идет запрос на изъятие 
сущности родителя.</div>
<div>
Простой пример:</div>
<div>
Есть
 сущность Дом. Он хранит информацию о своем номере, улице, количество 
квартир и информацию о семьях которые живут в квартирах, эти семьи 
формируют дочернюю сущность относительно сущности Дом. Когда мы 
запрашиваем информацию о Доме, нам может быть совершенно ненужным знать 
информацию семьях которые в нем проживают, тут нам на помощь приходит 
lazy(ленивое) изъятие(fetching) которая позволяет сконфигурировать 
сущность Дом, чтобы информацию о семьях подавалась только по 
востребованию, это значительно облегчает запрос и ускоряет работу 
приложения.<br>
<div>
<br></div>
<h3>
<div>
<ul>
<li>В чем разница между sorted collection и ordered collection? Какая из них лучше?</li>
</ul>
</div>
</h3>
При
 использовании алгоритмов сортировки из Collection API для сортировки 
коллекции, то он вызывает отсортированный список (sorted list). Для 
маленьких коллекций это не приводит к излишнему расходу ресурсов, но на 
больших коллекциях это может привести к потери производительности и 
ошибкам OutOfMemory. Так же entity бины должны реализовывать интерфейс 
Comparable или Comparator для работы с сортированными коллекциями.<br>
При
 использовании фреймворка Hibernate для загрузки данных из базы данных 
мы можем применить Criteria API и команду order by для получения 
отсортированного списка (ordered list). Ordered list является лучшим 
выбором к sorted list, т.к. он использует сортировку на уровне базы 
данных. Она быстрее и не может привести к утечке памяти.<br>
<br>
<h3>
<ul>
<li>Как реализованы Join’ы Hibernate?</li>
</ul>
</h3>
Существует несколько способов реализовать связи в Hibernate.<br>
<ul>
<li>Использовать ассоциации, такие как one-to-one, one-to-many, many-to-many.</li>
<li>Использовать
 в HQL запросе команду JOIN. Существует другая форма «join fetch«, 
позволяющая загружать данные немедленно (не lazy).</li>
<li>Использовать чистый SQL запрос с командой join.</li>
</ul>
<br>
<br>
<h3>
<ul>
<li>Почему мы не должны делать Entity class как final?</li>
</ul>
</h3>
Хибернейт
 использует прокси классы для ленивой загрузки данных (т.е. по 
необходимости, а не сразу). Это достигается с помощью расширения entity 
bean и, следовательно, если бы он был final, то это было бы невозможно. 
Ленивая загрузка данных во многих случаях повышает производительность, а
 следовательно важна.<br>
<br>
<h3>
<ul>
<li>Что вы знаете о HQL и каковы его преимущества?</li>
</ul>
</h3>
Hibernate
 Framework поставляется с мощным объектно-ориентированным языком 
запросов - Hibernate Query Language (HQL). Он очень похож на SQL, за 
исключением, что в нем используются объекты вместо имен таблиц, что 
делает язык ближе к объектно-ориентированному программированию.<br>
HQL
 является регистронезависимым, кроме использования в запросах имен java 
переменных и классов, где он подчиняется правилам Java. Например, SelECt
 то же самое, что и select, но com.blogspot.jsehelper.MyClass отличен от
 &nbsp;com.blogspot.jsehelper.MyCLASS. Запросы HQL кэшируются (это как 
плюс так и минус).<br>
<div>
<br></div>
<h3>
<ul>
<li>Что такое Query Cache в Hibernate?</li>
</ul>
</h3>
Hibernate
 реализует область кэша для запросов resultset, который тесно 
взаимодействует с кэшем второго уровня Hibernate. Для подключения этой 
дополнительной функции требуется несколько дополнительных шагов в коде. 
Query Cache полезны только для часто выполняющихся запросов с 
повторяющимися параметрами. Для начала необходимо добавить эту запись в 
файле конфигурации Hibernate:<br>
<div class="separator" style="clear: both; text-align: center;">
<a href="https://1.bp.blogspot.com/-pYzngooeg2U/Vu7RqbjGhoI/AAAAAAAAAYI/ebA5VnEf_zYAEtaRK_O9OZC-DSYXabQvQ/s1600/hibernate_cache.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img src="hibernate%20p2_files/hibernate_cache.jpg" height="25" border="0" width="640"></a></div>
<div>
Уже внутри кода приложения для запроса применяется метод setCacheable(true), как показано ниже:</div>
</div>
<div>
<div>
<div class="separator" style="clear: both; text-align: center;">
<a href="https://1.bp.blogspot.com/-A2goi5TAW40/Vu7SAvfkhbI/AAAAAAAAAYM/E8UVfcJrLkAf2X2VaK1fAaMwkXsDY9NbQ/s1600/setCacheable%2528true%2529.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img src="hibernate%20p2_files/setCacheable28true29.jpg" height="72" border="0" width="640"></a></div>
<div class="separator" style="clear: both; text-align: justify;">
<br></div>
<div>
<h3>
<ul>
<li>Можем ли мы выполнить SQL (sql native) запрос в Hibernate?</li>
</ul>
</h3>
С
 помощью использования SQLQuery можно выполнять чистый запрос SQL. В 
общем случае это не рекомендуется, т.к. вы потеряете все преимущества 
HQL (ассоциации, кэширование). Выполнить можно примерно так:<br>
<div class="separator" style="clear: both; text-align: center;">
<a href="https://4.bp.blogspot.com/-iWIy1yF0Uac/Vu7SlpAmQDI/AAAAAAAAAYU/Bh3BwiN9Ad04yx698KZbXPb-Rs6S1eRPw/s1600/session.beginTransaction%2528%2529.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img src="hibernate%20p2_files/session.png" height="138" border="0" width="640"></a></div>
<div class="separator" style="clear: both; text-align: justify;">
<br></div>
<div>
<h3>
<ul>
<li>Назовите преимущества поддержки нативного sql в Hibernate.</li>
</ul>
</h3>
Использование
 нативного SQL может быть необходимо при выполнении запросов к некоторым
 базам данных, которые могут не поддерживаться в Hibernate. Примером 
может служить некоторые специфичные запросы и «фишки» при работе с БД от
 Oracle.<br>
<br></div>
</div>
<h3>
<ul>
<li>Что такое Named SQL Query?</li>
</ul>
</h3>
Hibernate
 поддерживает именованный запрос, который мы можем задать в каком-либо 
центральном месте и потом использовать его в любом месте в коде. 
Именованные запросы поддерживают как HQL, так и Native SQL. Создать 
именованный запрос можно с помощью JPA аннотаций @NamedQuery, 
@NamedNativeQuery или в конфигурационном файле отображения (mapping 
files).<br>
<div>
<br></div>
<h3>
<ul>
<li>Каковы преимущества Named SQL Query?</li>
</ul>
</h3>
<ul>
<li>Именованный запрос Hibernate позволяет собрать множество запросов в одном месте, а затем вызывать их в любом классе.</li>
<li>Синтаксис
 Named Query проверяется при создании session factory, что позволяет 
заметить ошибку на раннем этапе, а не при запущенном приложении и 
выполнении запроса.</li>
<li>Named Query глобальные, т.е. заданные однажды, могут быть использованы в любом месте.</li>
</ul>
Однако
 одним из основных недостатков именованного запроса является то, что его
 очень трудно отлаживать (могут быть сложности с поиском места 
определения запроса).<br>
<br>
<h3>
<ul>
<li>Как добавить логирование log4j в Hibernate приложение?</li>
</ul>
</h3>
Добавить зависимость log4j в проект.<br>
Создать log4j.xml или log4j.properties файл и добавить его в classpath.<br>
Для
 веб приложений используйте ServletContextListener, а для автономных 
приложений DOMConfigurator или PropertyConfigurator для настройки 
логирования.<br>
Создайте экземпляр org.apache.log4j.Logger и используйте его согласно задачи.<br>
<br>
<h3>
<ul>
<li>Как логировать созданные Hibernate SQL запросы в лог-файлы?</li>
</ul>
</h3>
Для логирования запросов SQL добавьте в файл конфигурации Hibernate строчку:<br>
<div class="separator" style="clear: both; text-align: center;">
<a href="https://3.bp.blogspot.com/-6vFnHp4ICyI/Vu7TwbIyahI/AAAAAAAAAYk/4oWrfn68k_0pkoc-fpziXo0wsGdtnX_qQ/s1600/hibernate.show_sql.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img src="hibernate%20p2_files/hibernate.jpg" height="29" border="0" width="640"></a></div>
<div>
<br></div>
<div>
<h3>
<ul>
<li>Что вы знаете о Hibernate прокси и как это помогает в ленивой загрузке (lazy load)?</li>
</ul>
</h3>
<div>
Hibernate
 использует прокси объект для поддержки отложенной загрузки. Обычно при 
загрузке данных из таблицы Hibernate не загружает все отображенные 
(замаппинные) объекты. Как только вы ссылаетесь на дочерний объект или 
ищите объект с помощью геттера, если связанная сущность не находиться в 
кэше сессии, то прокси код перейдет к базе данных для загрузки связанной
 сущности. Для этого используется javassist, чтобы эффективно и 
динамически создавать реализации подклассов ваших entity объектов.</div>
<div>
<div>
<br></div>
</div>
<h3>
<ul>
<li>Как управлять транзакциями с помощью Hibernate?</li>
</ul>
</h3>
<div>
Hibernate
 вообще не допускает большинство операций без использования транзакций. 
Поэтому после получения экземпляра session от SessionFactory необходимо 
выполнить beginTransaction() для начала транзакции. Метод вернет ссылку,
 которую мы можем использовать для подтверждения или отката транзакции.</div>
<div>
В
 целом, управление транзакциями в фреймворке выполнено гораздо лучше, 
чем в JDBC, т.к. мы не должны полагаться на возникновение исключения для
 отката транзакции. Любое исключение автоматически вызовет 
rollback.&nbsp;</div>
<div>
<br>
</div>
<h3>
<div>
<ul>
<li>Что такое каскадные связи (обновления) в Hibernate?</li>
</ul>
</div>
</h3>
<div>
Если
 у нас имеются зависимости между сущностями (entities), то нам 
необходимо определить как различные операции будут влиять на другую 
сущность. Это реализуется с помощью каскадных связей (или обновлений). 
Вот пример кода с использованием аннотации @Cascade:</div>
</div>
<div class="separator" style="clear: both; text-align: center;">
<a href="https://1.bp.blogspot.com/-gwksjcmFTvk/Vu7UV1Y9TDI/AAAAAAAAAYo/jcBzSdqAqKg-JzfsQQ9uUygYfwL8-fMTg/s1600/hibernat.annotation.Cascade.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img src="hibernate%20p2_files/hibernat.jpg" height="187" border="0" width="640"></a></div>
<div>
<br>
<div>
Есть
 некоторые различия между enum CascadeType в Hibernate и в JPA. Поэтому 
обращайте внимание какой пакет вы импортируете при использовании 
аннотации и константы типа.<br>
<br>
<h3>
<ul>
<li>Какие каскадные типы есть в Hibernate?</li>
</ul>
</h3>
Наиболее часто используемые CascadeType перечисления описаны ниже.</div>
<div>
<ul>
<li>None: без 
Cascading. Формально это не тип, но если мы не указали каскадной связи, 
то никакая операция для родителя не будет иметь эффекта для ребенка.</li>
<li>ALL: Cascades save, delete, update, evict, lock, replicate, merge, persist. В общем — всё.</li>
<li>SAVE_UPDATE: Cascades save и update. Доступно только для hibernate.</li>
<li>DELETE: передает в Hibernate native DELETE действие. Только для hibernate.</li>
<li>DETATCH, MERGE, PERSIST, REFRESH и REMOVE – для простых операций.</li>
<li>LOCK: передает в Hibernate native LOCK действие.</li>
<li>REPLICATE: передает в Hibernate native REPLICATE действие.</li>
</ul>
<ul>
</ul>
<ul>
</ul>
<ul>
</ul>
<ul>
</ul>
<ul>
</ul>
<ul>
</ul>
<ul>
</ul>
<br>
<br>
<ul>
</ul>
</div>

</div>
</div>
</div>
<h3>
<ul>
<li>Что такое сесиия и фаблика сессий в Hibernate? Как настроить session factory в конфигурационном файле Spring?</li>
</ul>
</h3>
Hibernate
 сессия - это главный интерфейс взаимодействия Java-приложения и 
Hibernate. SessionFactory позволяет создавать сессии согласно 
конфигурации hibernate.cfg.xml. Например:<br>
<div class="separator" style="clear: both; text-align: center;">
<img src="hibernate%20p2_files/SessionFactory_Hibernate.jpg" height="115" border="0" width="640"></div>
<div>
При
 вызове Configuration().configure() загружается файл hibernate.cfg.xml и
 происходит настройка среды Hibernate. После того, как конфигурация 
загружена, вы можете сделать дополнительную модификацию настроек уже на 
программном уровне. Данные корректировки возможны до создания экземпляра
 фабрики сессий. Экземпляр SessionFactory как правило создается один раз
 и используется во всем приложении.</div>
<div>
Главная
 задача сессии - обеспечить механизмы создания, чтения и удаления для 
экземпляров примапленых к БД классов. Экземпляры могут находиться в трёх
 состояниях:</div>
<div>
transient - никогда не сохранялись, не ассоциированы ни с одной сессией;</div>
<div>
persistent - ассоциированы с уникальной сессией;</div>
<div>
detached - ранее сохраненные, не ассоциированы с сессией.</div>
<div>
Объект
 Hibernate Session представляет одну операцию с БД. Сессию открывает 
фабрика сессий. Сессия должна быть закрыта, когда все операции с БД 
совершены. Пример:</div>
<div class="separator" style="clear: both; text-align: center;">
<img src="hibernate%20p2_files/SessionFactory_Hibernate_close_session.jpg" height="384" border="0" width="640"></div>
<div class="separator" style="clear: both; text-align: justify;">
<br></div>
<h3>
<ul>
<li>Как использовать JNDI DataSource сервера приложений с Hibernate Framework?</li>
</ul>
</h3>
<div>
В
 веб приложении лучше всего использовать контейнер сервлетов для 
управления пулом соединений. Поэтому лучше определить JNDI ресурс для 
DataSource и использовать его в веб приложении. Для этого в Hibernate 
нужно удалить все специфичные для базы данных свойства из и использовать
 указания свойства JNDI DataSource:</div>
<div class="separator" style="clear: both; text-align: center;">
<a href="https://4.bp.blogspot.com/-peD0nZQKTww/Vu7V8VKrJ3I/AAAAAAAAAY4/5FOtAdLeG_g6_hVQtIQx_IGXSPcfO3z1g/s1600/hibernate.connection.datasource.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img src="hibernate%20p2_files/hibernate_003.jpg" border="0"></a></div>
<div>
<br></div>
<h3>
<ul>
<li>Как интегрировать Hibernate и Spring?</li>
</ul>
</h3>
<div>
Лучше
 всего прочитать о настройках на сайтах фреймворков для текущей версии. 
Оба фреймворка поддерживают интеграцию из коробки и в общем настройка их
 взаимодействия не составляет труда. Общие шаги выглядят следующим 
образом.</div>
<div>
</div>
<ul>
<li>Добавить зависимости для hibernate-entitymanager, hibernate-core и spring-orm.</li>
<li>Создать
 классы модели и передать реализации DAO операции над базой данных. 
Важно, что DAO классы используют SessionFactory, который внедряется в 
конфигурации бинов Spring.</li>
<li>Настроить конфигурационный файл Spring (смотрите в офф. документации или из примера на этом сайте).</li>
<li>Дополнительно появляется возможность использовать аннотацию @Transactional и перестать беспокоиться об управлением транзакцией Hibernate.</li>
</ul>
<br>
<h3>
<ul>
<li>Какие паттерны применяются в Hibernate?</li>
</ul>
</h3>
<div>
Domain Model Pattern - объектная модель предметной области, включающая в себя как поведение так и данные.</div>
<div>
Data
 Mapper - слой мапперов (Mappers), который передает данные между 
объектами и базой данных, сохраняя их независимыми друг от друга и себя.</div>
<div>
Proxy Pattern - применяется для ленивой загрузки.</div>
<div>
Factory pattern - используется в SessionFactory</div>
<div>
<br></div>
<div>
</div>
<h3>
<ul>
<li>Расскажите о Hibernate Validator Framework.</li>
</ul>
</h3>
<div>
Проверка
 данных является неотъемлемой частью любого приложения. Hibernate 
Validator обеспечивает эталонную реализацию двух спецификаций JSR-303 и 
JSR-349 применяемых в Java. Для настройки валидации в Hibernate 
необходимо сделать следующие шаги.</div>
<div>
</div>
<ul>
<li>Добавить hibernate validation зависимости в проект.</li>
</ul>
<br>
<div class="separator" style="clear: both; text-align: center;">
<a href="https://2.bp.blogspot.com/-9SEY1EBgl8Q/Vu7WPotbAII/AAAAAAAAAY8/P3-MlVF3fVskabiOZlxBlviJ5SGZxOnhQ/s1600/javax.validation.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img src="hibernate%20p2_files/javax.jpg" border="0"></a></div>
<div>
<ul>
<li>Так
 же требуются зависимости из JSR 341, реализующие Unified Expression 
Language для обработки динамических выражений и сообщений о нарушении 
ограничений.</li>
</ul>
</div>
<div class="separator" style="clear: both; text-align: center;">
<a href="https://3.bp.blogspot.com/-V1E8ry1sFFA/Vu7WeKvgIAI/AAAAAAAAAZA/oFf4Lhrcqi4R0kZIS0hfb20WpwcXlGGEg/s1600/javax.el.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img src="hibernate%20p2_files/javax_002.jpg" border="0"></a></div>
<div>
<ul>
<li>Использовать необходимые аннотации в бинах.</li>
</ul>
</div>
<div class="separator" style="clear: both; text-align: center;">
<a href="https://2.bp.blogspot.com/-wmbLdPYYRAk/Vu7W0GRosqI/AAAAAAAAAZI/0IFndz4480sYo4klsNvecdXNb3rm4WBnw/s1600/hibetnate.validation.example.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img src="hibernate%20p2_files/hibetnate.jpg" border="0"></a></div>
<div>
<div>
<br></div>
<h3>
<ul>
<li>Какие преимущества дает использование плагина Hibernate Tools Eclipse?</li>
</ul>
</h3>
<div>
Плагин
 Hibernate Tools упрощает настройку маппинга, конфигурационного файла. 
Упрощает работы с файлами свойств или xml тегами. Помогает 
минимизировать ошибки написания кода.</div>
</div>


</body></html>