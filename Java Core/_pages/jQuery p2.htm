<!DOCTYPE html>
<html lang="en"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
	<meta charset="UTF-8">
	<title>jQuery p2</title>
<link rel="stylesheet" href="grey.css">
</head>
<body>

<h3>
<ul>
<li>Как проверить, что элемент пустой?</li>
</ul>
</h3>
<div>
Есть 2 способа, чтобы проверить пустой элемент или нет. Первый мы можем проверить это с помощью селектора ":empty".</div>
<div class="separator" style="clear: both; text-align: center;">
<a href="https://1.bp.blogspot.com/-BY3Add3cSIE/VxJUvkeq7KI/AAAAAAAAAkE/_3Ns94BFA_IC04VGVTMJcgvKCSWypThjQCLcB/s1600/q041_p01.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img src="jQuery%20p2_files/q041_p01.jpg" border="0"></a></div>
И второй способ используя метод "$.trim()".<br>
<div class="separator" style="clear: both; text-align: center;">
<a href="https://2.bp.blogspot.com/-BHaigwlmA5A/VxJU2cAQDjI/AAAAAAAAAkI/QRds54blsS0Uhu9Le44WlZ7comAVba0ywCLcB/s1600/q041_p02.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img src="jQuery%20p2_files/q041_p02.jpg" border="0"></a></div>
<div class="separator" style="clear: both; text-align: justify;">
</div>
<a name="more"></a><br>
<h3>
<ul>
<li>Как проверить существует ли элемент в JQuery?</li>
</ul>
</h3>
<div>
Используя свойство JQuery length, мы можем убедиться существует элемент или нет.</div>
<div class="separator" style="clear: both; text-align: center;">
<a href="https://3.bp.blogspot.com/-GCXBWz7J-r4/VxJVODT4jeI/AAAAAAAAAkM/JMClnsXndbc5-E4ikMcNGfKm5LWrnyRnQCLcB/s1600/q042_p01.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img src="jQuery%20p2_files/q042_p01.jpg" border="0"></a></div>
<div>
<br></div>
<h3>
<ul>
<li>Для чего используется функция jQuery ".each()"?&nbsp;</li>
</ul>
</h3>
<div>
Функция
 .each() применяется непосредственно на коллекции jQuery. Она выполняет 
итерацию по каждому соответствующему элементу в коллекции и выполняет 
обратный вызов на этом объекте. Это означает, что каждый раз, когда 
выполняется указанная функция (а выполняется она один раз для каждого 
совпавшего элемента) ключевое слово 'this' указывает на конкретный 
элемент DOM. Помните, что слово 'this' НЕ указывает на объект jQuery. 
Кроме того, запущенная функция передает единственный аргумент, который 
показывает позицию элемента в составе набора совпавших элементов 
(integer, отсчет с 0).&nbsp;</div>
<div>
<br></div>
<h3>
<ul>
<li>Какая разница между $('div') и $('&lt;div/&gt;') в jQuery?&nbsp;</li>
</ul>
</h3>
<div>
$('&lt;div/&gt;') - создает новый элемент DIV, однако не добавляет его в DOM дерево.</div>
<div>
$('div') - &nbsp;выбирает все div элементы, присутствующие на странице.</div>
<div>
</div>
<div>
<br></div>
<h3>
<ul>
<li>Какая разница между parent(), parents(), closest() в jQuery?&nbsp;</li>
</ul>
</h3>
<div>
.parent([selector]) - &nbsp;находит родителя строго на один уровень вверх.</div>
<div>
Пример: $(this).parent()</div>
<div>
Для
 того чтобы получить родителя от родителя нужно применять цепочку 
вызовов (произвольной глубины): $(this).parent().parent()....</div>
<div>
.parents([selector])
 &nbsp;- возвращает список всех родительских узлов, и, &nbsp;может 
содержать селектор, для уточнения набора родителей.&nbsp;</div>
<div>
Пример: $(this).parents("li.test")</div>
<div>
.closest(selector,
 [context]) - возвращает первый ближайший родительский узел или же 
текущий узел - которые удовлетворяют условию в селекторе (селектор 
обязательный). Может принимать контекст для уточнения поиска (набор 
узлов заранее выбранных).</div>
<div>
Основные отличия его от .parents():</div>
<div>
</div>
<ul>
<li>может вернуть и текущий узел</li>
<li>обязательный селектор</li>
<li>возвращает только первый элемент который попал под условие, поиск ведется тоже вверх по дереву.&nbsp;</li>
</ul>
Пример: $(this).closest("li.test") или $(this).closest("li.test", itemsList)&nbsp;<br>
<br>
<h3 style="text-align: left;">
<ul style="text-align: left;">
<li>Какая разница между get() и eq() методами в jQuery?</li>
</ul>
</h3>
<div>
Отметим
 различия методов get(i) и eq(i). Первый возвращает непосредственно 
DOM-объект элемента, идущего под номером i в наборе (кстати, нумерация 
начинается с 0). К такому элементу вы не сможете применить методы 
jQuery, зато сможете применить стандартные javascript методы. Метод 
eq(i) наоборот, возвращает i-й элемент в таком виде, что к нему можно 
применять методы jQuery. Вообще, для того, чтобы к элементам можно было 
применять методы библиотеки jQuery, они должны находиться в так 
называемом объекте jQuery, именно его возвращает функция $().</div>
<div>
<br></div>
<h3 style="text-align: left;">
<ul style="text-align: left;">
<li>Как добавить анимацию в jQuery?</li>
</ul>
</h3>
<div>
Ключевым
 методом, на которой базируются все остальные, является метод animate(),
 с помощью которого можно задавать плавное изменение различных 
CSS-свойств:</div>
<div>
.animate(properties, [duration], [easing], [callback])</div>
<div>
properties
 - список CSS-свойств, участвующих в анимации и их конечных значений. 
Задаются объектом, в формате {ключ:значение}, например:{opacity: 50, 
width: 100, height: 200}.</div>
<div>
duration
 - продолжительность выполнения анимации. Может быть задана в 
миллисекундах или строковым значением 'fast' или 'slow' (200 и 600 
миллисекунд).</div>
<div>
easing
 - изменение скорости анимации (будет ли она замедляется к концу 
выполнения или наоборот ускорится). Задается строковым значением: 
"linear" и "swing" (для равномерной анимации и анимации с ускорением). 
Другие варианты можно найти в плагинах.</div>
<div>
callback - функция, которая будет вызвана после завершения анимации.</div>
<div>
Пример.
 Пусть у нас есть элемент div с каким-нибудь текстом. Мы хотим плавно 
скрыть этот элемент, заменить текст, и плавно сделать элемент видимым:</div>
<div class="separator" style="clear: both; text-align: center;">
<a href="https://3.bp.blogspot.com/-_V2jdO0pPrA/VxM3B_O-pbI/AAAAAAAAAkg/Hw0ZunS8f5U2UN5p4ZZypWu-ALzrP2SFACLcB/s1600/q047_p01.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img src="jQuery%20p2_files/q047_p01.jpg" border="0"></a></div>
<div>
значения "hide", "show" означают исчезновение и появление элемента, за счет параметра, к которому они применены.</div>
<div>
<br></div>
<h3>
<ul>
<li>Как отключить JQuery анимацию?</li>
</ul>
</h3>
<div>
Чтобы
 отменить выполнения всех анимаций используют "jQuery.fx.off". Установив
 это свойство в true, вы отключите все анимации, которые можно выполнять
 с помощью jQuery. Для того, что бы анимации заработали вновь, 
необходимо установить это свойство обратно в false.</div>
<div>
Простой пример:</div>
<div class="separator" style="clear: both; text-align: center;">
<a href="https://4.bp.blogspot.com/-jBexpvWCH-U/VxM3T5-2v4I/AAAAAAAAAkk/tzg8pEkczIgzCc-zEZUmZs-I3m7bF5D-QCLcB/s1600/q048_p01.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img src="jQuery%20p2_files/q048_p01.jpg" height="42" border="0" width="640"></a></div>
<div>
<br></div>
<h3>
<ul>
<li>Как остановить текущую запущенную анимацию в JQuery?&nbsp;</li>
</ul>
</h3>
<div>
Используя метод ".stop()". Он останавливает выполнение текущей анимации.</div>
<div>
<br></div>
<h3>
<ul>
<li>В чем разница между методами .empty () .remove () и .detach () в JQuery?</li>
</ul>
</h3>
<div>
.empty()
 - очищает содержание выбранных элементов, т.е. удаляет все узлы-потомки
 (включая тексты) из выбранных элементов, все обработчики событий и 
внутренние кэш-данные.</div>
<div>
.remove() - удаляет все выбранные элементы из DOM (указанный элемент и всех его потомков)</div>
<div>
.detach()
 - удаляет все выбранные элементы из DOM (указанный элемент и всех его 
потомков), но метод .detach() сохраняет данные jQuery, ассоциированные с
 удаляемым элементом и поэтому они могут быть восстановлены.</div>
<div>
<br></div>
<h3>
<ul>
<li>Какая разница между .bind() .live() .delegate() и .on()?</li>
</ul>
</h3>
<div>
.bind() - навешивает обработчик непосредственно на элемент (когда тот есть в DOM-е). При удалении элемента так-же удаляется.</div>
<div>
.live()
 - навешивает обработчик на document, используется делегирование 
(всплытие событий). Позволяет создать обработчик до того, как элемент 
появится в DOM-е. При удалении элумента обработчик не удаляется, а 
просто перестает срабатывать. Если в DOM снова вставить элемент, 
подходящий под селектор, обработчик снова отработает.</div>
<div>
.delegate()
 - точно так-же, как и live, использует делегирование, только явно 
указывается узел, на который навешивается обработчик. (удобно для 
разработки модулей, или как их еще называют, виджетов).</div>
<div>
</div>
<div>
.on()
 - объединяет возможности как bind, так и delegate (зависит от формы 
использования). Единый метод введен для того, чтобы не возникали вопросы
 какой метод использовать.</div>
<div>
<br></div>
<h3>
<ul>
<li><b style="font-family: arial, helvetica, sans-serif;">Как создать клон объекта в JQuery?</b></li>
</ul>
</h3>
<div>
Для клонирования в JQuery есть метод .clone() - создает полную копию выбранных элементов.&nbsp;</div>
<div>
</div>
<div>
.clone(
 [withDataAndEvents] ) где withDataAndEvents - логическое значение, 
указывающее нужно ли копировать данные и обработчики событий у выбранных
 элементов. По умолчанию false. Пример:</div>
<div>
<div class="separator" style="clear: both; text-align: center;">
<a href="https://1.bp.blogspot.com/-ITo9Nxqijr8/VxM436ijFRI/AAAAAAAAAk0/NEY3mcHr8hw8L92f6KnDEndL-QF1W1CUgCLcB/s1600/q052_p01.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img src="jQuery%20p2_files/q052_p01.jpg" border="0"></a></div>
<div class="separator" style="clear: both; text-align: justify;">
<br></div>
</div>
<div>
<h3>
<ul>
<li>В чем разница между prop и attr?</li>
</ul>
</h3>
.prop() - возвращает/изменяет значение свойств выбранных элементов.<br>
.attr() - получает/устанавливает значение атрибутов выбранных элементов.<br>
Метод
 .prop() появился в версии 1.6, многие ошибочно используют метод .attr()
 для доступа к свойствам элементов и модификации их значений. Дело в 
том, что с версии 1.6 .attr() работает непосредственно с атрибутом 
элемента и в некоторых случаях результат не совсем ожидаемый.<br>
Например,
 если мы хотим узнать состояние чекбокса, то .attr() может выдать его 
значение по умолчанию (которое видно в исходниках HTML страницы). В этом
 случае нам нужно использовать метод .prop() - он вернет текущее 
значение свойства элемента.<br>
<br>
<h3>
<ul>
<li>Что такое event.preventDefault?</li>
</ul>
</h3>
В
 jQuery есть один интересный метод preventDefault(), который позволяет 
предотвратить возникновение "действия по умолчанию" для конкретного 
события. Например, если в &nbsp;разметке есть гиперссылка, но мы хотим 
использовать эту ссылку как кнопку button - т.е. без перехода по URL, 
заданному в атрибуте href, то используется как раз preventDefault(). 
После этого, всё, что необходимо сделать, - это добавить вызов 
preventDefault() в обработчик события клика мышью.<br>
<br>
<h3>
<ul>
<li>В чем разница между event.PreventDefault и event.stopPropagation?</li>
</ul>
</h3>
.event.preventDefault()
 - если будет вызван данный метод, то действие события по умолчанию не 
будет выполнено. К примеру, клик по ссылке не отправит пользователя по 
новому URL. Для определения, был ли вызван данный метод, можем 
воспользоваться функцией event.isDefaultPrevented().<br>
.event.stopPropagation()
 - станавливает "всплытие" вызова события к родительским элементам. 
Данный метод работает для собственных событий, вызванных методом 
trigger(). Заметьте, что данный метод не будет применён к другим 
обработчикам событий.&nbsp;<br>
<br></div>
<div>
<h3>
<ul>
<li>Как проверить есть переменная числом, используя JQuery 1.7+?</li>
</ul>
</h3>
С помощью функции "IsNumeric()", которая была введена с JQuery 1.7.&nbsp;<br>
<br>
<h3>
<ul>
<li>Как проверить тип данных переменной в JQuery?</li>
</ul>
</h3>
С
 помощью $.type() - определяет класс заданного элемента (речь идет о 
внутренних классах javascript: string, boolean и т.д.). Функция имеет 
один вариант использования:<br>
$.type(Object) где Object - элемент, класс которого требуется определить.&nbsp;<br>
<br></div>
<div>
<h3>
<ul>
<li>Как привязать обработчик события к выбранному элементу, которое должно быть выполнено только один раз?</li>
</ul>
</h3>
Метод
 one() назначает обработчик одному или более событиям для каждого 
совпавшего элемента, который выполняется единожды. Обработчик 
запускается лишь раз для каждого элемента. Обработчик события принимает 
объект event, который можно использовать для предотвращения поведения по
 умолчанию. Пример:<br>
<div class="separator" style="clear: both; text-align: center;">
<a href="https://2.bp.blogspot.com/-i2LEDS0gfLs/VxM6SVRiyhI/AAAAAAAAAlA/SqNJRjFTl9kDda3jS-ENh0QA0hHCXf2DQCLcB/s1600/q058_p01.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img src="jQuery%20p2_files/q058_p01.jpg" border="0"></a></div>
<div>
<br></div>
<h3>
<ul>
<li>Можно ли удерживать или задержать выполнение document.ready на некоторое время?</li>
</ul>
</h3>
</div>
<div>
Да
 это возможно. Начиная с версии 1.6 в jQuery появился новый метод 
".holdReady()". Метод позволяет приостановить выполнение обработчиков 
события ready.<br>
jQuery.holdReady(hold)
 - где hold в случае true приостанавливает выполнение обработчиков 
события ready, в случае false - возобновляет.&nbsp;<br>
<br>
<h3>
<ul>
<li>Что такое цепочка методов в jQuery?</li>
</ul>
</h3>
Цепочкой
 методов называют последовательный вызов нескольких методов jQuery. Для 
удобочитаемости, цепочки часто пишут с переносами:<br>
Например код:<br>
<div class="separator" style="clear: both; text-align: center;">
<a href="https://1.bp.blogspot.com/-AIAzicsiGm0/VxM_D8Sv31I/AAAAAAAAAlM/SSqrOE-cc5ktrjXnKH13IT5q-ki-tcq9wCLcB/s1600/q060_p01.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img src="jQuery%20p2_files/q060_p01.jpg" border="0"></a></div>
с использованием цепочки методов данный код будет выглядеть так:<br>
<div class="separator" style="clear: both; text-align: center;">
<a href="https://1.bp.blogspot.com/-oGVsIjTko2k/VxM_WmfvxFI/AAAAAAAAAlQ/SK7lN2fk-cUSu_d1ioqXX5R4mBpQVmr_gCLcB/s1600/q060_p02.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img src="jQuery%20p2_files/q060_p02.jpg" border="0"></a></div>
<div class="separator" style="clear: both; text-align: justify;">
<br></div>
<h3>
<ul>
<li>Можем ли мы использовать JQuery, чтобы сделать AJAX запрос?</li>
</ul>
</h3>
Да. JQuery может быть использована для создания Ajax запроса.&nbsp;<br>
<br>
<h3>
<ul>
<li>Какими методами можно сделать AJAX запрос в JQuery?</li>
</ul>
</h3>
Сделать AJAX запрос можно с помощью следующих методов:&nbsp;<br>
<div>
<ul>
<li>load() - загрузка HTML кода в необходимый нам DOM элемент на странице.&nbsp;</li>
<li>$.getJSON() - загружает данные в формате JSON (удобней и быстрее нежели XML).&nbsp;</li>
<li>$.getScript() - данная функция загружает и выполняет локальный JavaScript.&nbsp;</li>
<li>$.get() - загружает страницу, используя для передачи данных GET запрос.&nbsp;</li>
<li>$.post() - данный метод аналогичен предыдущему, лишь передаваемые данные уйдут на сервер посредством POST’а.&nbsp;</li>
<li>$.ajax() - это самый основной метод, а все последующие методы лишь обертки для метода jQuery.ajax.&nbsp;</li>
</ul>
</div>
<br>
<h3>
<ul>
<li><b style="font-family: arial, helvetica, sans-serif;">Что такое отсроченные(Deferred) объекты в jQuery?</b></li>
</ul>
</h3>
В
 версии jQuery 1.5 было внесено много изменений, однако, основные 
изменения коснулись внедрения объекта Deferred(), они помогают в 
обработке асинхронных функции, такие как Ajax.<br>
Благодаря
 отложенным объектам, можно определять множество функций обратного 
вызова для какого-то результата, и любой из этих вызовов может быть 
использован после выполнения какой-либо задачи. Это может использоваться
 как в асинхронных, так и в обычных целях.&nbsp;<br>
<br>
<h3>
<ul>
<li>Что делает метод finish()?</li>
</ul>
</h3>
Метод
 finish() останавливает текущую анимацию, удаляет все очереди анимации и
 завершает все анимации для соответствующих элементов.&nbsp;<br>
<br>
<h3>
<ul>
<li>Можно ли не указывать протокол в URL когда jQuery ссылается на CDNs?</li>
</ul>
Да. код ниже полностью рабочий.</h3>
<div class="separator" style="clear: both; text-align: center;">
<a href="https://1.bp.blogspot.com/--WlZJpF73uc/VxNAAIpad_I/AAAAAAAAAlc/VVcoNGmihAgCaHJZXPCqslJaQ6Z9xB1uACLcB/s1600/q065_p01.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img src="jQuery%20p2_files/q065_p01.jpg" border="0"></a></div>
<div>
<br></div>
<h3>
<ul>
<li>Что такое Jquery плагины и какие преимущества их использования?</li>
</ul>
</h3>
</div>
<div>
jQuery
 плагин это часть кода, написанного в стандартном JavaScript файле. Эти 
файлы предоставляют полезные функции, которые могут быть использованы 
вместе с методами библиотеки jQuery. JQuery плагинины очень полезны, это
 части кода, которые уже кем-то написаны и могут быть использованы 
повторно, что позволяет экономить время разработки.<br>
<br>
<h3>
<ul>
<li>Что такое jQuery UI?</li>
</ul>
</h3>
jQuery
 UI - это библиотека виджетов и плагинов, основанная на JavaScript 
библиотеке jQuery, которую можно использовать для создания интерактивных
 веб-приложений.</div>


</body></html>