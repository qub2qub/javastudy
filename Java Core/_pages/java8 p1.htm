<!DOCTYPE html>
<html lang="en"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
	<meta charset="UTF-8">
	<title>Java8 p1</title>
<link rel="stylesheet" href="../../Git Guide/grey.css">
</head>
<body>

<h3>
<ul>
<li>Какие нововведения, появились в Java 8?</li>
</ul>
</h3>
<div>
В Java 8 было добавлено много функций, наиболее значимые из них упомянуты ниже:</div>
<div>
</div>
<ul>
<li>Полноценная поддержка лямбда-выражений, которая добавляет функциональные возможности обработки данных для Java.</li>
<li>Ключевое
 слово default в интерфейсах для поддержки функциональности по 
умолчанию(интерфейс может иметь реализацию метода по умолчанию).</li>
<li>Ссылки на методы.</li>
<li>Функциональные интерфейсы (предикаты, поставщики и т. д.)</li>
<li>Потоки (stream) для работы с коллекциями</li>
<li>Новое API для работы с датами</li>
<li>Nashorn движок JavaScript, разрабатываемый полностью на Java компанией Oracle.</li>
</ul>
<br>
<a name="more"></a><h3>
<ul>
<li>Как сортировать список строк с помощью лямбда-выражения?</li>
</ul>
</h3>
Следующий код сортирует список строк с помощью лямбда-выражения Java 8:<br>
<div class="separator" style="clear: both; text-align: center;">
</div>
<div class="separator" style="clear: both; text-align: center;">
<a href="https://4.bp.blogspot.com/-MzPf6tqX6Ls/VziRrSFYUBI/AAAAAAAAAqo/iOzDNCaSYI8gfFZhLTYM0S3fSx0WLrweQCLcB/s1600/q002_p01.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img src="java8%20p1_files/q002_p01.jpg" border="0"></a></div>
<div>
<br></div>
<h3>
<ul>
<li>Какова структура лямбда-выражения?</li>
</ul>
</h3>
<div>
Лямбда выражение имеет следующую структуру:</div>
<div>
(method params) -&gt; {lambda expression body}</div>
<div>
где&nbsp;</div>
<div>
</div>
<ul>
<li>method
 params - список входящих параметров, разделенных запятой(в случаи если 
параметров больше одного заключаются в скобки).&nbsp;</li>
<li>оператор
 "-&gt;" - служит разделителем между списком параметров нашего метода и 
телом, в котором происходит его реализация.&nbsp;</li>
<li>lambda expression body - тело метода, состоящее из одного выражения или нескольких, заключенных в фигурные скобки.</li>
</ul>
<br>
<h3>
<ul>
<li>К каким переменным есть доступ у Лямбда-выражений?</li>
</ul>
</h3>
<div>
Лямбда-выражения
 имеют доступ к переменным области видимости, в которой их определили. 
Но доступ возможен только при условии, что переменные являются effective
 final, то есть либо явно имеют модификатор final, либо не меняют своего
 значения после инициализации, если переменной присваивается значение во
 второй раз, лямбда-выражение вызывает ошибку компиляции.<br>
<br></div>
<h3>
<ul>
<li>Что такое ссылки на метод?</li>
</ul>
</h3>
<div>
Ссылки
 на метод - компактные лямбда-выражения которые позволяют передавать 
ссылки на методы или конструкторы. Для этого нужно использовать ключевое
 слово "::".</div>
<div>
Ссылочные
 методы внедряют полезный синтаксис, чтобы ссылаться на существующие 
методы или конструкторы Java-классов или объектов (экземпляров). 
Совместно с лямбда-выражениями, ссылочные методы делают языковые 
конструкции компактными и лаконичными, делая его шаблонным.<br>
<br>
<h3>
<ul>
<li>Какие виды ссылок на методы вы знаете?</li>
</ul>
</h3>
</div>
<div>
Существует четыре вида ссылок на методы:</div>
<div>
<ul>
<li>Ссылка на статический метод(ContainingClass::staticMethodName)</li>
<li>Ссылка на метод конкретного объекта(ContainingObject::instanceMethodName)</li>
<li>Ссылка на метод произвольного объекта конкретного типа(ContainingType::methodName)</li>
<li>Ссылка на конструктор(ClassName::new), для дженериков (generics) Class&lt; T &gt;::new.</li>
</ul>
<br></div>
<div>
<h3>
<ul>
<li>Объясните выражение System.out::println.</li>
</ul>
</h3>
</div>
<div>
Выражение
 System.out::println является ссылкой на статический метод println 
об'єкта out класа System, который эквивалентен лямбда-выражению x -&gt; 
System.out.println(x).<br>
<br>
<h3>
<ul>
<li>Что такое функциональные интерфейсы?</li>
</ul>
</h3>
</div>
<div>
Функциональный интерфейс - это тот интерфейс, который определяет строго один абстрактный метод.</div>
<div>
В
 Java 8 была введена новая аннотация @FunctionalInterface для 
обозначения интерфейса, функциональным, эта аннотация используется для 
того, чтобы избежать случайного добавления абстрактных методов в 
функциональный интерфейс. Она не обязательна, но является хорошей 
практикой написания кода.</div>
<div>
Функциональные интерфейсы позволяют нам использовать лямбда-выражения для создания экземпляра таких интерфейсов.</div>
<div>
Лучшим
 примером функционального интерфейса будет интерфейс java.lang.Runnable с
 одним абстрактным методом run(). Заметим, интерфейс может включать 
сколько угодно default методов и при этом оставаться функциональным, 
потому что default методы - не абстрактные.<br>
<br>
<h3>
<ul>
<li>Для чего нужен функциональный интерфейс BiConsumer&lt;T,U&gt;?</li>
</ul>
</h3>
</div>
<div>
Представляет собой операцию, которая принимает два входных параметра, и не возвращает никакого результата.<br>
<br>
<h3>
<ul>
<li>Для чего нужен функциональный интерфейс BiFunction&lt;T,U,R&gt;?</li>
</ul>
</h3>
</div>
<div>
Представляет собой функцию, которая принимает два аргумента и&nbsp;возвращает&nbsp;результат.<br>
<br>
<h3>
<ul>
<li>Для чего нужен функциональный интерфейс BinaryOperator&lt;T&gt;?</li>
</ul>
</h3>
</div>
<div>
Представляет
 собой операцию над двумя операндами одного и того же типа, выполняет 
над ними бинарную операцию и возвращает результат того же типа, что и 
операнды.<br>
<br>
<h3>
<ul>
<li>Для чего нужен функциональный интерфейс BiPredicate&lt;T,U&gt;?</li>
</ul>
</h3>
</div>
<div>
Представляет собой предикат (булеву функцию) двух аргументов.<br>
<br></div>
<div>
<h3>
<ul>
<li>Для чего нужен функциональный интерфейс BooleanSupplier?</li>
</ul>
</h3>
</div>
<div>
Представляет собой поставщика булевых результатов.<br>
<br></div>
<div>
<h3>
<ul>
<li>Для чего нужен функциональный интерфейс Consumer&lt;T&gt;?</li>
</ul>
</h3>
</div>
<div>
Представляет
 собой операцию, которая принимает один входной аргумент, выполняет 
некоторое действие над объектом типа T, при этом ничего не возвращая.<br>
<br></div>
<div>
<h3>
<ul>
<li>Для чего нужен функциональный интерфейс DoubleBinaryOperator?</li>
</ul>
</h3>
</div>
<div>
Представляет собой операцию над двумя операндами типа double, возвращает результат типа double.<br>
<br></div>
<div>
<h3>
<ul>
<li>Для чего нужен функциональный интерфейс DoubleConsumer?</li>
</ul>
</h3>
</div>
<div>
Представляет собой операцию, которая принимает один аргумент типа double, и не возвращает результат.<br>
<br></div>
<div>
<h3>
<ul>
<li>Для чего нужен функциональный интерфейс DoubleFunction&lt;R&gt;?</li>
</ul>
</h3>
</div>
<div>
Представляет собой функцию, которая принимает один аргумент типа double, и возвращает результат.<br>
<br></div>
<div>
<h3>
<ul>
<li>Для чего нужен функциональный интерфейс DoublePredicate?</li>
</ul>
</h3>
</div>
<div>
Представляет собой предикат (булеву функцию) одного аргумента типа double.<br>
<br></div>
<div>
<h3>
<ul>
<li>Для чего нужен функциональный интерфейс DoubleSupplier?</li>
</ul>
</h3>
</div>
<div>
Представляет собой поставщика double результатов.<br>
<br></div>
<div>
<h3>
<ul>
<li>Для чего нужен функциональный интерфейс DoubleToIntFunction?</li>
</ul>
</h3>
</div>
<div>
Представляет собой функцию, которая принимает один аргумент типа double, возвращает результат типу int.<br>
<br></div>
<div>
<h3>
<ul>
<li>Для чего нужен функциональный интерфейс DoubleToLongFunction?</li>
</ul>
</h3>
</div>
<div>
Представляет собой функцию, которая принимает один аргумент типа double, и возвращает результат типу long.<br>
<br></div>
<div>
<h3>
<ul>
<li><b style="font-family: arial, helvetica, sans-serif;">Для чего нужен функциональный интерфейс DoubleUnaryOperator?</b></li>
</ul>
</h3>
</div>
<div>
Представляет собой операцию над одним аргументом типа double, возвращает результат типу double.<br>
<br></div>
<div>
<h3>
<ul>
<li>Для чего нужен функциональный интерфейс Function&lt;T,R&gt;?</li>
</ul>
</h3>
</div>
<div>
Представляет собой функцию перехода от объекта типа T к объекту типа R.<br>
<br></div>
<div>
<h3>
<ul>
<li>Для чего нужен функциональный интерфейс IntBinaryOperator?</li>
</ul>
</h3>
</div>
<div>
Представляет собой операцию над двумя операндами типа int, возвращает результат типа int.<br>
<br></div>
<div>
<h3>
<ul>
<li>Для чего нужен функциональный интерфейс IntConsumer?</li>
</ul>
</h3>
</div>
<div>
Представляет собой операцию, которая принимает один аргумент типа int, и не возвращает результат.<br>
<br></div>
<div>
<h3>
<ul>
<li>Для чего нужен функциональный интерфейс IntFunction&lt;R&gt;?</li>
</ul>
</h3>
</div>
<div>
Представляет собой операцию, которая принимает один аргумент типа int, возвращает результат.<br>
<br></div>
<div>
<h3>
<ul>
<li>Для чего нужен функциональный интерфейс IntPredicate?</li>
</ul>
</h3>
</div>
<div>
Представляет собой предикат (булеву функцию) одного аргумента типа int.<br>
<br></div>
<div>
<h3>
<ul>
<li>Для чего нужен функциональный интерфейс IntSupplier?</li>
</ul>
</h3>
</div>
<div>
Представляет собой поставщика int результатов.<br>
<br></div>
<div>
<h3>
<ul>
<li>Для чего нужен функциональный интерфейс IntToDoubleFunction?</li>
</ul>
</h3>
</div>
<div>
Представляет собой функцию, которая принимает один аргумент типа int, возвращает результат типу double.<br>
<br></div>
<div>
<h3>
<ul>
<li>Для чего нужен функциональный интерфейс IntToLongFunction?</li>
</ul>
</h3>
</div>
<div>
Представляет собой функцию, которая принимает один аргумент типа int, возвращает результат типу long.<br>
<br></div>
<div>
<h3>
<ul>
<li>Для чего нужен функциональный интерфейс IntUnaryOperator?</li>
</ul>
</h3>
</div>
<div>
Представляет собой операцию над одним аргументом типа int, возвращает результат типу int.<br>
<br></div>
<div>
<h3>
<ul>
<li>Для чего нужен функциональный интерфейс LongBinaryOperator?</li>
</ul>
</h3>
</div>
<div>
Представляет собой операцию над двумя операндами типа long, возвращает результат типа long.<br>
<br></div>
<div>
<h3>
<ul>
<li>Для чего нужен функциональный интерфейс LongConsumer?</li>
</ul>
</h3>
</div>
<div>
Представляет собой операцию, которая принимает один аргумент типа long, не возвращает результат.<br>
<br></div>
<div>
<h3>
<ul>
<li>Для чего нужен функциональный интерфейс LongFunction&lt;R&gt;?</li>
</ul>
</h3>
</div>
<div>
Представляет собой функцию, которая принимает один аргумент типа long, и возвращает результат.<br>
<br></div>
<div>
<h3>
<ul>
<li>Для чего нужен функциональный интерфейс LongPredicate?</li>
</ul>
</h3>
</div>
<div>
Представляет собой предикат (булеву функцию) одного аргумента типа long.<br>
<br></div>
<div>
<h3>
<ul>
<li>Для чего нужен функциональный интерфейс LongSupplier?</li>
</ul>
</h3>
</div>
<div>
Представляет собой поставщика long результатов.<br>
<br></div>
<div>
<h3>
<ul>
<li>Для чего нужен функциональный интерфейс LongToDoubleFunction?</li>
</ul>
</h3>
</div>
<div>
Представляет собой функцию, которая принимает один аргумент типа long, и возвращает результат типу double.<br>
<br></div>
<div>
<h3>
<ul>
<li>Для чего нужен функциональный интерфейс LongToIntFunction?</li>
</ul>
</h3>
</div>
<div>
Представляет собой функцию, которая принимает один аргумент типа long, и возвращает результат типу int.<br>
<br></div>
<div>
<h3>
<ul>
<li>Для чего нужен функциональный интерфейс LongUnaryOperator?</li>
</ul>
</h3>
</div>
<div>
Представляет собой операцию над одним аргументом типа long, возвращает результат типу long.<br>
<br></div>
<div>
<h3>
<ul>
<li>Для чего нужен функциональный интерфейс ObjDoubleConsumer&lt;T&gt;?</li>
</ul>
</h3>
</div>
<div>
Представляет собой операцию, которая принимает один аргумент типа object, и второй типа double, и не возвращает результат.<br>
<br></div>
<div>
<h3>
<ul>
<li>Для чего нужен функциональный интерфейс ObjIntConsumer&lt;T&gt;?</li>
</ul>
</h3>
</div>
<div>
Представляет собой операцию, которая принимает один аргумент типа object, и второй типа int, и не возвращает результат.<br>
<br></div>
<div>
<h3>
<ul>
<li>Для чего нужен функциональный интерфейс ObjLongConsumer&lt;T&gt;?</li>
</ul>
</h3>
</div>
<div>
Представляет собой операцию, которая принимает один аргумент типа object, и второй типа long, и не возвращает результат.<br>
<br></div>
<div>
<h3>
<ul>
<li>Для чего нужен функциональный интерфейс Predicate&lt;T&gt;?</li>
</ul>
</h3>
</div>
<div>
Представляет собой предикат (булеву функцию) одного аргумента.<br>
<br></div>
<div>
<h3>
<ul>
<li>Для чего нужен функциональный интерфейс Supplier&lt;T&gt;?</li>
</ul>
</h3>
</div>
<div>
Представляет собой поставщика результатов.<br>
<br></div>
<div>
<h3>
<ul>
<li>Для чего нужен функциональный интерфейс ToDoubleBiFunction&lt;T,U&gt;?</li>
</ul>
</h3>
</div>
<div>
Представляет собой функцию, которая принимает два аргумента, возвращает результат типу double.<br>
<br></div>
<div>
<h3>
<ul>
<li>Для чего нужен функциональный интерфейс ToDoubleFunction&lt;T&gt;?</li>
</ul>
</h3>
</div>
<div>
Представляет собой функцию, которая принимает один аргумент, возвращает результат типа double.<br>
<br></div>
<div>
<h3>
<ul>
<li>Для чего нужен функциональный интерфейс ToIntBiFunction&lt;T,U&gt;?</li>
</ul>
</h3>
</div>
<div>
Представляет собой функцию, которая принимает два аргумента, возвращает результат типу int.<br>
<br></div>
<div>
<h3>
<ul>
<li>Для чего нужен функциональный интерфейс ToIntFunction&lt;T&gt;?</li>
</ul>
</h3>
</div>
<div>
Представляет собой функцию, которая принимает один аргумент, возвращает результат типа int.<br>
<br></div>
<div>
<h3>
<ul>
<li>Для чего нужен функциональный интерфейс ToLongBiFunction&lt;T,U&gt;?</li>
</ul>
</h3>
</div>
<div>
Представляет собой функцию, которая принимает два аргумента, возвращает результат типу long.<br>
<br></div>
<div>
<h3>
<ul>
<li>Для чего нужен функциональный интерфейс ToLongFunction&lt;T&gt;?</li>
</ul>
</h3>
</div>
<div>
Представляет собой функцию, которая принимает один аргумент, возвращает результат типа long.<br>
<br></div>
<div>
<h3>
<ul>
<li>Для чего нужен функциональный интерфейс UnaryOperator&lt;T&gt;?</li>
</ul>
</h3>
</div>
<div>
Представляет собой операцию над одним операндом, возвращает результат того же типа, что и операнд.<br>
<br>
<h3>
<a href="https://jsehelper.blogspot.nl/2016/05/java-8-2.html">Java 8 (часть 2).</a></h3>
</div>

	


</body></html>