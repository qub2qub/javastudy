<!DOCTYPE html>
<html lang="en"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
	<meta charset="UTF-8">
	<title>sql p1</title>
<link rel="stylesheet" href="../../Git Guide/grey.css">
</head>
<body>
	
<h3 style="text-align: left;">
<ul style="text-align: left;">
<li>Что такое SQL?</li>
</ul>
</h3>
<div>
SQL
 (structured query language - "язык структурированных запросов") - 
формальный непроцедурный язык программирования, применяемый для 
создания, модификации и управления данными в произвольной реляционной 
базе данных, управляемой соответствующей системой управления базами 
данных (СУБД). SQL основывается на исчислении кортежей.<br>
<br>
<h3>
<ul>
<li>Какие есть типы JOIN'ов? Кратко опишите каждый из типов.</li>
</ul>
</h3>
(INNER)JOIN
 - внутреннее соединение. В результирующем наборе присутствуют только 
записи, значения связанных полей в которых совпадают.<br>
LEFT
 JOIN - левое внешнее соединение. В результирующем наборе присутствуют 
все записи из Table1 и соответствующие им записи из Table2. Если 
соответствия нет, поля из Table2 будут пустыми.<br>
<a name="more"></a>RIGHT JOIN - правое внешнее соединение. В результирующем наборе присутствуют все записи из Table2 и соответствующие им записи из Table1. Если соответствия нет, поля из Table1 будут пустыми.<br>
FULL
 JOIN - полное внешнее соединение. Комбинация двух предыдущих. В 
результирующем наборе присутствуют все записи из Table1 и 
соответствующие им записи из Table2. Если соответствия нет - поля из 
Table2 будут пустыми. Записи из Table2, которым не нашлось пары в 
Table1, тоже будут присутствовать в результирующем наборе. В этом случае
 поля из Table1 будут пустыми.<br>
CROSS
 JOIN - Cartesian product. Результирующий набор содержит все варианты 
комбинации строк из Table1 и Table2. Условие соединения при этом не 
указывается.<br>
<br>
<h3>
<ul>
<li>Что такое LEFT JOIN, RIGHT JOIN? Чем они отличаются?</li>
</ul>
</h3>
Проиллюстрируем каждый тип примерами. Модель данных:<br>
<div class="separator" style="clear: both; text-align: center;">
<a href="https://4.bp.blogspot.com/-d67EXk2Etj4/VpXkw0b0oDI/AAAAAAAAALY/xcAH2FZqLww/s1600/left_join_rigth_join.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img src="sql%20p1_files/left_join_rigth_join.jpg" height="171" border="0" width="640"></a></div>
SELECT Table1.Field1, Table2.Field2 FROM Table1 LEFT JOIN Table2 ON Table1.Key1 = Table2.Key2<br>
<div class="separator" style="clear: both; text-align: center;">
</div>
<div class="separator" style="clear: both; text-align: center;">
</div>
<div class="separator" style="clear: both; text-align: center;">
<a href="https://3.bp.blogspot.com/-kZ8R48JckEc/VpXlKX51FUI/AAAAAAAAALk/M8mvBTfeDVA/s1600/left_join.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img src="sql%20p1_files/left_join.jpg" height="166" border="0" width="320"></a></div>
SELECT Table1.Field1, Table2.Field2 FROM Table1 RIGHT JOIN Table2 ON Table1.Key1 = Table2.Key2<br>
<div class="separator" style="clear: both; text-align: center;">
<a href="https://1.bp.blogspot.com/-KSx2x0tqdCg/VpXl_qcm68I/AAAAAAAAAL4/ud2W73ru51w/s1600/rigth_join.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img src="sql%20p1_files/rigth_join.jpg" height="164" border="0" width="320"></a></div>
LEFT
 JOIN - левое внешнее соединение. В результирующем наборе присутствуют 
все записи из Table1 и соответствующие им записи из Table2. Если 
соответствия нет, поля из Table2 будут пустыми.<br>
RIGHT
 JOIN - правое внешнее соединение. В результирующем наборе присутствуют 
все записи из Table2 и соответствующие им записи из Table1. Если 
соответствия нет, поля из Table1 будут пустыми.<br>
<br>
<h3>
<div>
<ul>
<li>Для чего используется слово HAVING?</li>
</ul>
</div>
</h3>
Секция
 HAVING определяет условие, которое затем применяется к групам строк. 
Следовательно, это предложение имеет тот же смысл для группы строк, что и
 предложение WHERE в отношении соодержимого соответствующей таблицы. 
Синтаксис предложения HAVING&nbsp;<br>
HAVING &nbsp;condition<br>
где condition содержит агрегатные функции или константы.<br>
Важно
 понимать, что секции HAVING и WHERE взаимно дополняют друг друга. 
Сначала с помощью ограничений WHERE формируется итоговая выборка, затем 
выполняется разбивка на группы по значениям полей, заданных в GROUP BY. 
Далее по каждой группе вычисляется групповая функция и в заключение 
накладывается условие HAVING.<br>
Пример:<br>
<div class="separator" style="clear: both; text-align: center;">
<a href="https://1.bp.blogspot.com/-OmsOa_wjbdo/VpXmvQ4cKPI/AAAAAAAAAMA/u_JQ6N0Y7eU/s1600/employees.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img src="sql%20p1_files/employees.jpg" height="123" border="0" width="640"></a></div>
<div>
SELECT DeptNum, MAX(SALARY) FROM Employees GROUP BY DeptNum HAVING MAX(SALARY) &gt; 1000</div>
В приведенном примере в результат попадут только отделы, максимальная зарплата в которых превышает 1000.<br>
<br>
<h3>
<ul>
<li>Что такое DDL?</li>
</ul>
</h3>
DDL(Data
 Definition Language) - Команды определения структуры данных. В состав 
DDL-группы входят команды, позволяющие определять внутреннюю структуру 
базы данных. Перед тем, как сохранять данные в БД, необходимо создать в 
ней таблицы и, возможно, некоторые другие сопутствующие объекты<br>
Пример некоторых DDL-команд:<br>
<div class="separator" style="clear: both; text-align: center;">
<a href="https://4.bp.blogspot.com/-1xDmg-wn4-Y/VpXnDbmUjZI/AAAAAAAAAMI/SsLun7Tpefs/s1600/ddl.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img src="sql%20p1_files/ddl.jpg" height="100" border="0" width="640"></a></div>
<div class="separator" style="clear: both; text-align: justify;">
<br></div>
<h3>
<ul>
<li>Что такое DML?</li>
</ul>
</h3>
DML(Data
 Manipulation Language) - Команды манипулирования данными. DML-группа 
содержит команды, позволяющие вносить, изменять, удалять и извлекать 
данные из таблиц.<br>
Примеры DML-команд:<br>
<div class="separator" style="clear: both; text-align: center;">
<a href="https://4.bp.blogspot.com/-3okH7cwEVEw/VpXnW_nb5wI/AAAAAAAAAMQ/2yAmw7IBlPs/s1600/dml.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img src="sql%20p1_files/dml.jpg" height="123" border="0" width="640"></a></div>
<div class="separator" style="clear: both; text-align: justify;">
<br></div>
<h3>
<ul>
<li>Что такое TCL?</li>
</ul>
</h3>
TCL(Transaction
 Control Language) - TCL-команды используются для управления изменениями
 данных, производимыми DML-командами. С их помощью несколько DML-команд 
могут быть объединены в единое логическое целое, называемое транзакцией.
 При этом все команды на изменение данных в рамках одной транзакции либо
 завершаются успешно, либо все могут быть отменены в случае 
возникновения каких-либо проблем с выполнением любой из них.<br>
TCL-команды:<br>
<div class="separator" style="clear: both; text-align: center;">
<a href="https://3.bp.blogspot.com/--lMEJw_ALdE/VpXnwrVqeiI/AAAAAAAAAMY/Jar3DokSeqQ/s1600/tcl.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img src="sql%20p1_files/tcl.jpg" height="100" border="0" width="640"></a></div>
<div class="separator" style="clear: both; text-align: center;">
<br></div>
<h3>
<div>
<ul>
<li>Что такое DCL?</li>
</ul>
</div>
</h3>
DCL(Data
 Control Language) - Команды управления доступом. DCL-команды управляют 
доступом пользователей к БД и отдельным объектам:<br>
<div class="separator" style="clear: both; text-align: center;">
<a href="https://4.bp.blogspot.com/-14HmxlzatGE/VpXoNi_W_zI/AAAAAAAAAMg/BvJu7ZAURV4/s1600/dcl.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img src="sql%20p1_files/dcl.jpg" height="75" border="0" width="640"></a></div>
<div class="separator" style="clear: both; text-align: justify;">
<br></div>
<h3>
<ul>
<li>Какой общий синтаксис команди SELECT?</li>
</ul>
</h3>
В общем виде синтаксис команды SELECT выглядит следующим образом:<br>
<div class="separator" style="clear: both; text-align: center;">
<a href="https://4.bp.blogspot.com/-rUX5I5J5Rrc/VpXomIBGTtI/AAAAAAAAAMo/5UdKvZk1suI/s1600/select_general_view.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img src="sql%20p1_files/select_general_view.jpg" height="100" border="0" width="640"></a></div>
В квадратных скобках указаны необязательные элементы команды. Ключевые слова SELECT и FROM должны присутствовать всегда.<br>
<br>
<h3>
<ul>
<li>Про NULL в SQL.</li>
</ul>
</h3>
Необходимо
 отметить, что язык SQL, в отличие от языков программирования, имеет 
встроенные средства поддержки факта отсутствия каких-либо данных. 
Осуществляется это с помощью NULL-концепции. NULL не является каким-то 
фиксированным значением, хранящимся в поле записи вместо реальных 
данных. Значение NULL не имеет определенного типа. NULL — это индикатор,
 говорящий пользователю (и SQL) о том, что данные в поле записи 
отсутствуют. Поэтому его нельзя использовать в операциях сравнения. Для 
проверки факта наличия-отсутствия данных в SQL введены специальные 
выражения.<br>
<br>
<h3>
<div>
<ul>
<li>Если
 вы собираетесь соединить несколько таблиц в запросе (например, n 
таблиц), сколько условий соединения вам нужно использовать?</li>
</ul>
</div>
</h3>
Тогда
 нужно использовать n-1 условий соединения чтоб исключить декартовой 
соединения, может быть и такое, что потребуется больше чем n-1 условий 
соединения, и совсем другие условия соединения для дальнейшего 
сокращения результирующего набора данных.<br>
<br>
<h3>
<ul>
<li>Какое практическое применение временных таблиц?</li>
</ul>
</h3>
Временная
 таблица - это объект базы данных, который хранится и управляется 
системой базы данных на временной основе. Они могут быть локальными или 
глобальными. используется для сохранения результатов вызова хранимой 
процедуры, уменьшение числа строк при соединениях, агрегирование данных 
из различных источников или замена курсоров и параметризованных 
представлений.<br>
<br>
<h3>
<ul>
<li>Как оператор GROUP BY обрабатывает значение NULL? Ли это общем трактовке таких значений?</li>
</ul>
</h3>
При
 использовании GROUP BY все значения NULL считаются равными. Значение 
NULL - это специальное значение, которое можно присвоить ячейке таблицы.
 Это значение обычно применяется, когда информация в ячейке неизвестна 
или неприемлема.<br>
<br>
<h3>
<ul>
<li>В чем разница между COUNT (*) и COUNT (столбец)?</li>
</ul>
</h3>
форма
 COUNT (столбец) подсчитывает количество значений в "столбец". При 
подсчете количества значений столбца эта форма функции COUNT не 
принимает во внимание значение NULL. функция COUNT (*) подсчитывает 
количество строк в таблице, не игнорирует значение NULL, поскольку эта 
функция оперирует строками, а не столбцами.<br>
<br>
<h3>
<ul>
<li>В чем разница между операторами DISTINCT и GROUP BY?</li>
</ul>
</h3>
DISTINCT
 - указывает, что для вычислений используются только уникальные значения
 столбца. NULL считается как отдельное значение. Если нужно удалить 
только дубликаты лучше использовать DISTINCT. GROUP BY группирует 
выбранный набор строк для получения набора сводных строк по значениям 
одного или нескольких столбцов или выражений. GROUP BY создает отдельную
 группу для всех возможных значений (включая значение NULL). GROUP BY 
лучше использовать для определения групп выходных строк, к которым могут
 применяться агрегатные функции (COUNT, MIN, MAX, AVG и SUM).<br>
<br>
<h3>
<ul>
<li>Есть
 таблица table1 с колонками id и datetime написать запрос который вернет
 максимальное значение id и значение даты для этого id.</li>
</ul>
</h3>
Есть множество решений - самое простое - это получать max значение для id и потом вывести значения:<br>
<div class="separator" style="clear: both; text-align: center;">
<a href="https://2.bp.blogspot.com/-eKmnOUIdZfA/V1BfVbn19hI/AAAAAAAAAzk/RvtII5u3PLQUEUFMKIEK35AfMMV63utJACLcB/s1600/q016_p01.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img src="sql%20p1_files/q016_p01.jpg" height="25" border="0" width="640"></a></div>
или<br>
<div class="separator" style="clear: both; text-align: center;">
<a href="https://2.bp.blogspot.com/-EGPIYl_z5uE/V1Bfp8VpdtI/AAAAAAAAAzo/WpJ26hXAQLsmNfrVW_B3uFcYSomWQWZRwCLcB/s1600/q016_p02.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img src="sql%20p1_files/q016_p02.jpg" height="22" border="0" width="640"></a></div>
можно и так (mysql)<br>
<div class="separator" style="clear: both; text-align: center;">
<a href="https://3.bp.blogspot.com/-ufhPUye2wEs/V1Bf_tS47aI/AAAAAAAAAzw/J4BYvKlg9hIrj62X5ozfkxOVr-DgdlfIgCLcB/s1600/q016_p03.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img src="sql%20p1_files/q016_p03.jpg" height="24" border="0" width="640"></a></div>
<div class="separator" style="clear: both; text-align: justify;">
<br></div>
<h3>
<ul>
<li>Для чего нужны операторы UNION, INTERSECT, EXCEPT?</li>
</ul>
</h3>
Оператор
 UNION - применяется для объединения результатов двух SQL-запросов в 
единую таблицу, состоящую из похожих срок. Оба запроса Должны возвращать
 одинаковое число столбцов и совместимые типы данных в соответствующих 
столбцах.<br>
Оператор
 INTERSECT - используется для нахождения пересечения двух множеств. 
Результатом его выполнения будет множество строк, которые присутствуют в
 обоих множествах.<br>
Оператор
 EXCEPT - используется для нахождения разности двух множеств. 
Результатом выполнения является множество строк из множества 1, которые 
отсутствуют в множестве 2.<br>
Приоритет выполнения операторов над множествами:<br>
INTERSECT -&gt; EXCEPT -&gt; UNION<br>
<br>
<h3>
<ul>
<li>Что лучше использовать соединение или подзапросы?</li>
</ul>
</h3>
Обычно
 лучше использовать JOIN, поскольку в большинстве случаев он понятен, и 
лучше оптимизируется с помощью Database Engine. но не всегда. Соединение
 имеет преимущество над подзапросов в случае, когда список выбора SELECT
 в запросе содержит столбцы более чем одной таблицы.<br>
Подзапросы лучшие тогда, когда нужно вычислять агрегатные значение и использовать их во внешних запросах для сравнений.<br>
<br>
<h3>
<a href="https://jsehelper.blogspot.nl/2016/01/sql-2.html">SQL (часть 2).</a></h3>
</div>	

</body></html>