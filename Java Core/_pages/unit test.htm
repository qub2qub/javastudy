<!DOCTYPE html>
<html lang="en"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
	<meta charset="UTF-8">
	<title>unit test</title>
<link rel="stylesheet" href="../../Guides/grey.css">
</head>
<body>
	
<h3>
<ul>
<li>Чем стаб (stub) отличается от мока (mock)?</li>
</ul>
</h3>
Stub
 - объекты, которые предоставляют заранее заготовленные ответы на вызовы
 во время выполнения теста и обычно не отвечающие ни на какие другие 
вызовы, которые не требуются в тесте. Также могут запоминать какую-то 
дополнительную информацию о количестве вызовов, параметрах и возвращать 
их потом тесту для проверки. Используется для "затычки" сервисов, 
методов, классов и т.д. Абсолютно все равно что они вернут при работе 
или сколько раз произойдет вызов.<br>
Mock
 - объекты, которые заменяют реальный объект в условиях теста и 
позволяют проверять вызовы своих членов как часть системы или 
unit-теста. Содержат заранее запрограммированные ожидания вызовов, 
которые они ожидают получить. Применяются в основном для т.н. 
interaction (behavioral) testing. Используется для подмены результатов 
вызова функций в юнит тестах (важен результат), для учета количества 
вызовов функций и просто ожидания их вызовов. Используется в области 
Assert юнит теста.<br>
<br>
<a name="more"></a><h3>
<ul>
<li>Что такое unit testing?</li>
</ul>
</h3>
Модульное
 тестирование или unit testing - процесс проверки на корректность 
функционирования отдельных частей исходного кода программы путем запуска
 тестов в искусственной среде.<br>
<br>
<h3>
<ul>
<li>Что такое Фикстуры?</li>
</ul>
</h3>
Фикстура
 (Fixture) - состояние среды тестирования, которое требуется для 
успешного выполнения тестового метода. Может быть представлено набором 
каких-либо объектов, состоянием базы данных, наличием определенных 
файлов, соединений и проч.<br>
<br>
<h3>
<ul>
<li>Какие есть аннотации фикстур?</li>
</ul>
</h3>
Предусмотрено четыре аннотации фикстур - две для фикстур уровня класса и две для фикстур уровня метода.<br>
<ul>
<li>@BeforeClass - запускается только один раз при запуске теста.</li>
<li>@Before - запускается перед каждым тестовым методом.</li>
<li>@After - запускается после каждого метода.</li>
<li>@AfterClass - запускается после того, как отработали все тестовые методы.</li>
</ul>
<br>
<h3>
<ul>
<li>Для чего нужна Аннотация @Ignore?</li>
</ul>
</h3>
Аннотация
 @Ignore заставляет инфраструктуру тестирования проигнорировать данный 
тестовый метод. Аннотация предусматривает наличие комментария о причине 
игнорирования теста, полезного при следующем к нему обращении.<br>
<br>
<h3>
<ul>
<li>Что такое интеграционные тесты?</li>
</ul>
</h3>
Интеграционные
 тесты - это тесты, проверяющие работоспособность двух или более модулей
 системы, но в совокупности - то есть нескольких объектов как единого 
блока.

</body></html>