<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<title>j8Lambas</title>
    <link rel="stylesheet" href="../../Guides/grey.css">
</head>
<body>
<div id="article-header">
<h1 class="story-title">Lambda Expressions in Java 8</h1>
<p class="byline">
By 							<span class="byline">Cay S. Horstmann</span>, March 25, 2014</p>
<p class="byline-comments"><span>
<a href="http://www.drdobbs.com/jvm/lambda-expressions-in-java-8/240166764#disqus_thread" class="commentLink" data-disqus-identifier="article_240166764"><span class="bubble">11</span> Comments</a>
 
</span></p>

	
<font class="story-teaser">The single most important change in Java 8 enables faster, clearer coding and opens the door to functional programming. Here's how it works.</font><br>

</div>
<div class="story">
<article>
	<p>Java was designed in the 1990s as an object-oriented programming language, when object-oriented programming was the principal paradigm for software development. Long before there was object-oriented programming, there were functional programming languages such as Lisp and Scheme, but their benefits were not much appreciated outside academic circles. Recently, functional programming has risen in importance because it is well suited for concurrent and event-driven (or "reactive") programming. That doesn't mean that object orientation is bad. Instead, the winning strategy is to blend object-oriented and functional programming. This makes sense even if you are not interested in concurrency. For example, collection libraries can be given powerful APIs if the language has a convenient syntax for functional expressions.</p>
<p>
</p><p>The principal enhancement in Java 8 is the addition of functional programming constructs to its object-oriented roots. In this article, I demonstrate the basic syntax and examine how to use it several important contexts. The key points are:</p><ul>
<li>A lambda expression is a block of code with parameters.</li>
<li>Use a lambda expression whenever you want a block of code executed at a later point in time.</li>
<li>Lambda expressions can be converted to functional interfaces.</li>
<li>Lambda expressions can access effectively final variables from the enclosing scope.</li>
<li>Method and constructor references refer to methods or constructors without invoking them.</li>
<li>You can now add default and static methods to interfaces that provide concrete implementations.</li>
<li>You must resolve any conflicts between default methods from multiple interfaces.</li></ul>
<p>
</p><h3>Why Lambdas?</h3>
<p>A lambda expression is a block of code that you can pass around so it can be executed later, just once or multiple times. Before getting into the syntax (or even the curious name), let's step back and see where you have used similar code blocks in Java all along.</p>
<p>When you want to do work in a separate thread, you put the work into the&nbsp;<code>run</code>&nbsp;method of a&nbsp;<code>Runnable</code>, like this:</p>
<p></p><div><div id="highlighter_421011" class="syntaxhighlighter  java"><div class="toolbar"><span></span></div><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">class</code> <code class="java plain">Worker </code><code class="java keyword">implements</code> <code class="java plain">Runnable {</code></div><div class="line number2 index1 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java keyword">void</code> <code class="java plain">run() {</code></div><div class="line number3 index2 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">for</code> <code class="java plain">(</code><code class="java keyword">int</code> <code class="java plain">i = </code><code class="java value">0</code><code class="java plain">; i &lt; </code><code class="java value">1000</code><code class="java plain">; i++)</code></div><div class="line number4 index3 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">doWork();</code></div><div class="line number5 index4 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number6 index5 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">...</code></div><div class="line number7 index6 alt2"><code class="java spaces">&nbsp;&nbsp;</code><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><p></p>
<p>Then, when you want to execute this code, you construct an instance of the&nbsp;<code>Worker</code>&nbsp;class. You can then submit the instance to a thread pool, or keep it simple and start a new thread:</p>
<p></p><div><div id="highlighter_999011" class="syntaxhighlighter  java"><div class="toolbar"><span></span></div><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java plain">Worker w = </code><code class="java keyword">new</code> <code class="java plain">Worker();</code></div><div class="line number2 index1 alt1"><code class="java spaces">&nbsp;&nbsp;</code><code class="java keyword">new</code> <code class="java plain">Thread(w).start();</code></div></div></td></tr></tbody></table></div></div><p></p>
<p>The key point is that the&nbsp;<code>run</code>&nbsp;method contains code that you want to execute in a separate thread.</p>
<p>Consider sorting with a custom comparator. If you want to sort strings by length instead of the default dictionary order, you can pass a&nbsp;<code>Comparator</code>&nbsp;object to the&nbsp;<code>sort</code>&nbsp;method:</p>
<p></p><div><div id="highlighter_125562" class="syntaxhighlighter  java"><div class="toolbar"><span></span></div><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">class</code> <code class="java plain">LengthComparator </code><code class="java keyword">implements</code> <code class="java plain">Comparator&lt;String&gt; {</code></div><div class="line number2 index1 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java keyword">int</code> <code class="java plain">compare(String first, String second) {</code></div><div class="line number3 index2 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">return</code> <code class="java plain">Integer.compare(first.length(), second.length());</code></div><div class="line number4 index3 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number5 index4 alt2"><code class="java spaces">&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number6 index5 alt1"><code class="java spaces">&nbsp;&nbsp;</code>&nbsp;</div><div class="line number7 index6 alt2"><code class="java plain">Arrays.sort(strings, </code><code class="java keyword">new</code> <code class="java plain">LengthComparator());</code></div></div></td></tr></tbody></table></div></div><p></p>
<p>
</p><p>The&nbsp;<code>sort</code>&nbsp;method keeps calling the&nbsp;<code>compare</code>&nbsp;method, rearranging the elements if they are out of order, until the array is sorted. You give the&nbsp;<code>sort</code>&nbsp;method a snippet of code needed to compare elements, and that code is integrated into the rest of the sorting logic, which you'd probably not care to reimplement. Note that the call&nbsp;<code>Integer.compare(x, y)&nbsp;</code>returns zero if&nbsp;<code>x</code>&nbsp;and&nbsp;<code>y</code>&nbsp;are equal, a negative number if <code>x&nbsp;&lt;&nbsp;y</code>, and a positive number if&nbsp;<code> x&nbsp;&gt;&nbsp;y</code>. This static method was added to Java 7. You shouldn't compute&nbsp;<code>x - y</code>&nbsp;to compare&nbsp;<code>x</code>&nbsp;and&nbsp;<code>y</code> because that computation can overflow for large operands of opposite sign.</p>
<p>
</p><p>As another example for deferred execution, consider a button callback. You put the callback action into a method of a class implementing the listener interface, construct an instance, and register the instance with the button. That happens so often that many programmers use the "anonymous instance of anonymous class" syntax:</p>
<p>
</p><p></p><div><div id="highlighter_541055" class="syntaxhighlighter  java"><div class="toolbar"><span></span></div><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java plain">button.setOnAction(</code><code class="java keyword">new</code> <code class="java plain">EventHandler&lt;ActionEvent&gt;() {</code></div><div class="line number2 index1 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java keyword">void</code> <code class="java plain">handle(ActionEvent event) {</code></div><div class="line number3 index2 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">System.out.println(</code><code class="java string">"Thanks for clicking!"</code><code class="java plain">);</code></div><div class="line number4 index3 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number5 index4 alt2"><code class="java spaces">&nbsp;&nbsp;</code><code class="java plain">});</code></div></div></td></tr></tbody></table></div></div><p></p>
<p>What matters is the code inside the&nbsp;<code>handle</code>&nbsp;method. That code is executed whenever the button is clicked.</p>
<p>
</p><p>Since Java 8 positions JavaFX as the successor to the Swing GUI toolkit, I use JavaFX in these examples. (See&nbsp;<a href="http://www.drdobbs.com/jvm/javafx-20-developers-guide/232200163">Eric Bruno's posts</a>&nbsp;for more information on JavaFX. <em>— Ed.</em>) The details don't matter. In every user interface toolkit, be it Swing, JavaFX, or Android, you give a button some code that you want to run when the button is clicked.</p>
<p>
</p><p>In all three examples, you saw the same approach. A block of code was passed to someone — a thread pool, a&nbsp;<code>sort</code> method, or a button. The code was called at some later time.</p>
<p>
</p><p>Up to now, giving someone a block of code hasn't been easy in Java. You couldn't just pass code blocks around. Java is an object-oriented language, so you had to construct an object belonging to a class that has a method with the desired code.</p>
<p>
</p><p>In other languages, it is possible to work with blocks of code directly. The Java designers have resisted adding this feature for a long time. After all, a great strength of Java is its simplicity and consistency. A language can become an unmaintainable mess if it includes every feature that yields marginally more-concise code. However, in those other languages, it isn't just easier to spawn a thread or to register a button-click handler; large swaths of their APIs are simpler, more consistent, and more powerful. In Java, one could have written similar APIs that take objects of classes implementing a particular function, but such APIs would be unpleasant to use.</p>
<p>
</p><p>For some time now, the question was not whether to augment Java for functional programming, but how to do it. It took several years of experimentation before a design emerged that is a good fit for Java. In the next section, you will see how you can work with blocks of code in Java 8.</p>
<p>
</p><h3>The Syntax of Lambda Expressions</h3>
  
<p>Consider the previous sorting example again. We pass code that checks whether one string is shorter than another. We compute</p>
<p></p><div><div id="highlighter_927889" class="syntaxhighlighter  java"><div class="toolbar"><span></span></div><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java plain">Integer.compare(first.length(), second.length())</code></div></div></td></tr></tbody></table></div></div><p></p>
<p>What are&nbsp;first&nbsp;and&nbsp;second? They are both strings! Java is a strongly typed language, and we must specify that as well:</p>
<p></p><div><div id="highlighter_760590" class="syntaxhighlighter  java"><div class="toolbar"><span></span></div><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java plain">(String first, String second)</code></div><div class="line number2 index1 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">-&gt; Integer.compare(first.length(), second.length())</code></div></div></td></tr></tbody></table></div></div><p></p>
<p>You have just seen your first&nbsp;lambda expression! Such an expression is simply a block of code, together with the specification of any variables that must be passed to the code.</p>
<p>Why the name? Many years ago, before there were any computers, the logician Alonzo Church wanted to formalize what it means for a mathematical function to be effectively computable. (Curiously, there are functions that are known to exist, but nobody knows how to compute their values.) He used the Greek letter lambda (λ) to mark parameters. Had he known about the Java API, he would have written:</p>
<p></p><div><div id="highlighter_870392" class="syntaxhighlighter  java"><div class="toolbar"><span></span></div><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java plain">λfirst.λsecond.Integer.compare(first.length(), second.length())</code></div></div></td></tr></tbody></table></div></div>
<p></p>
<p>Why the letter λ? Did Church run out of other letters of the alphabet? Actually, the venerable <em>Principia Mathematica</em>&nbsp;used the ˆ accent to denote free variables, which inspired Church to use an uppercase lambda (Λ) for parameters. But in the end, he switched to the lowercase version. Ever since, an expression with parameter variables has been called a "lambda expression."</p>
<p>	<!-- send Article author Details-->
		</p></article>
</div>
<article>
	<p>You have just seen one form of lambda expressions in Java: parameters, the -&gt; arrow, and an expression. If the code carries out a computation that doesn't fit in a single expression, write it exactly like you would have written a method: enclosed in <code>{} </code>and with explicit <code>return</code> statements. For example,</p>
<p></p><div><div id="highlighter_988288" class="syntaxhighlighter  java"><div class="toolbar"><span></span></div><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java plain">(String first, String second) -&gt; {</code></div><div class="line number2 index1 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">if</code> <code class="java plain">(first.length() &lt; second.length()) </code><code class="java keyword">return</code> <code class="java plain">-</code><code class="java value">1</code><code class="java plain">;</code></div><div class="line number3 index2 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">else</code> <code class="java keyword">if</code> <code class="java plain">(first.length() &gt; second.length()) </code><code class="java keyword">return</code> <code class="java value">1</code><code class="java plain">;</code></div><div class="line number4 index3 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">else</code> <code class="java keyword">return</code> <code class="java value">0</code><code class="java plain">;</code></div><div class="line number5 index4 alt2"><code class="java spaces">&nbsp;&nbsp;</code><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><p></p>
<p>If a lambda expression has no parameters, you still supply empty parentheses, just as with a parameterless method:</p>
<p></p><div><div id="highlighter_568529" class="syntaxhighlighter  java"><div class="toolbar"><span></span></div><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java plain">() -&gt; { </code><code class="java keyword">for</code> <code class="java plain">(</code><code class="java keyword">int</code> <code class="java plain">i = </code><code class="java value">0</code><code class="java plain">; i &lt; </code><code class="java value">1000</code><code class="java plain">; i++) doWork(); }</code></div></div></td></tr></tbody></table></div></div><p></p>
<p>If the parameter types of a lambda expression can be inferred, you can omit them. For example,</p>
<p></p><div><div id="highlighter_650429" class="syntaxhighlighter  java"><div class="toolbar"><span></span></div><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java plain">Comparator&lt;String&gt; comp</code></div><div class="line number2 index1 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">= (first, second) </code><code class="java comments">// Same as (String first, String second)</code></div><div class="line number3 index2 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">-&gt; Integer.compare(first.length(), second.length());</code></div></div></td></tr></tbody></table></div></div><p></p>
<p>Here, the compiler can deduce that <code>first</code> and <code>second</code> must be strings because the lambda expression is assigned to a string comparator. (We will have a closer look at this assignment later.)</p>
<p>If a method has a single parameter with inferred type, you can even omit the parentheses:</p>
<p></p><div><div id="highlighter_383496" class="syntaxhighlighter  java"><div class="toolbar"><span></span></div><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java plain">EventHandler&lt;ActionEvent&gt; listener = event -&gt;</code></div><div class="line number2 index1 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">System.out.println(</code><code class="java string">"Thanks for clicking!"</code><code class="java plain">);</code></div><div class="line number3 index2 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java comments">// Instead of (event) -&gt; or (ActionEvent event) -&gt;</code></div></div></td></tr></tbody></table></div></div><p></p>
<p>You can add annotations or the <code>final</code> modifier to lambda parameters in the same way as for method parameters:</p>
<p></p><div><div id="highlighter_980274" class="syntaxhighlighter  java"><div class="toolbar"><span></span></div><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java plain">(</code><code class="java keyword">final</code> <code class="java plain">String name) -&gt; ...</code></div><div class="line number2 index1 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">(</code><code class="java color1">@NonNull</code> <code class="java plain">String name) -&gt; ...</code></div></div></td></tr></tbody></table></div></div><p></p>
<p>
</p><p>You never specify the <code>result</code> type of a lambda expression. It is always inferred from context. For example, the expression</p>
<p></p><div><div id="highlighter_899368" class="syntaxhighlighter  java"><div class="toolbar"><span></span></div><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java plain">(String first, String second) -&gt; Integer.compare(first.length(), second.length())</code></div></div></td></tr></tbody></table></div></div><p></p>
<p>can be used in a context where a result of type <code>int</code> is expected.</p>
<p>
</p><p>Note that it is illegal for a lambda expression to return a value in some branches but not in others. For example, <code>(int x) -&gt; { if (x &gt;= 0) return 1; }</code> is invalid.</p>
<p>
</p><h3>Functional Interfaces</h3>
<p>
</p><p>As we discussed, there are many existing interfaces in Java that encapsulate blocks of code, such as <code>Runnable</code> or <code>Comparator</code>. Lambdas are backwards compatible with these interfaces.</p>
<p>
</p><p>You can supply a lambda expression whenever an object of an interface with a single abstract method is expected. Such an interface is called a <em>functional interface</em>.</p>
<p>
</p><p>You may wonder why a functional interface must have a single <em>abstract</em> method. Aren't all methods in an interface abstract? Actually, it has always been possible for an interface to redeclare methods from the <code>Object</code> class such as <code>toString</code> or <code>clone</code>, and these declarations do not make the methods abstract. (Some interfaces in the Java API redeclare <code>Object</code> methods in order to attach javadoc comments. Check out the Comparator API for an example.) More importantly, as you will see shortly, in Java 8, interfaces can declare non-abstract methods.</p>
<p>
</p><p>To demonstrate the conversion to a functional interface, consider the <code>Arrays.sort</code> method. Its second parameter requires an instance of <code>Comparator</code>, an interface with a single method. Simply supply a lambda:</p>
<p></p><div><div id="highlighter_427861" class="syntaxhighlighter  java"><div class="toolbar"><span></span></div><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java plain">Arrays.sort(words,</code></div><div class="line number2 index1 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">(first, second) -&gt; Integer.compare(first.length(), second.length()));</code></div></div></td></tr></tbody></table></div></div><p></p>
<p>Behind the scenes, the <code>Arrays.sort</code> method receives an object of some class that implements <code>Comparator&lt;String&gt;</code>. Invoking the <code>compare</code> method on that object executes the body of the lambda expression. The management of these objects and classes is completely implementation dependent, and it can be much more efficient than using traditional inner classes. It is best to think of a lambda expression as a function, not an object, and to accept that it can be passed to a functional interface.</p>
<p>
</p><p>This conversion to interfaces is what makes lambda expressions so compelling. The syntax is short and simple. Here is another example:</p>
<p></p><div><div id="highlighter_198878" class="syntaxhighlighter  java"><div class="toolbar"><span></span></div><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java plain">button.setOnAction(event -&gt;</code></div><div class="line number2 index1 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">System.out.println(</code><code class="java string">"Thanks for clicking!"</code><code class="java plain">));</code></div></div></td></tr></tbody></table></div></div><p></p>
<p>That's awfully easy to read.</p>
<p>
</p><p>In fact, conversion to a functional interface is the <em>only</em> thing that you can do with a lambda expression in Java. In other programming languages that support function literals, you can declare function types such as <code>(String, String) -&gt; int</code>, declare variables of those types, and use the variables to save function expressions. In Java, you can't even assign a lambda expression to a variable of type <code>Object</code> because <code>Object</code>is not a functional interface. The Java designers decided to stick strictly with the familiar concept of interfaces instead of adding function types to the language.</p>
<p>
</p><p>The Java API defines several generic functional interfaces in the <code>java.util.function</code> package. One of the interfaces, <code>BiFunction&lt;T, U, R&gt;</code>, describes functions with parameter types <code>T</code> and <code>U</code> and return type <code>R</code>. You can save our string comparison lambda in a variable of that type:</p>
<p>
</p><p></p><div><div id="highlighter_963725" class="syntaxhighlighter  java"><div class="toolbar"><span></span></div><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java plain">BiFunction&lt;String, String, Integer&gt; comp</code></div><div class="line number2 index1 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">= (first, second) -&gt; Integer.compare(first.length(), second.length());</code></div></div></td></tr></tbody></table></div></div><p></p>
  
<p>However, that does not help you with sorting. There is no <code>Arrays.sort</code> method that wants a <code>BiFunction</code>. If you have used a functional programming language before, you may find this curious. But for Java programmers, it's pretty natural. An interface such as <code>Comparator</code> has a specific purpose, not just a method with given parameter and return types. Java 8 retains this flavor. When you want to do something with lambda expressions, you still want to keep the purpose of the expression in mind, and have a specific functional interface for it.</p>
<p>The interfaces in <code>java.util.function </code>are used in several Java 8 APIs, and you will likely see them elsewhere in the future. But keep in mind that you can equally well convert a lambda expression into a functional interface that is a part of whatever API you use today. Also, you can tag any functional interface with the <code>@FunctionalInterface</code> annotation. This has two advantages. The compiler checks that the annotated entity is an interface with a single abstract method. And the javadoc page includes a statement that your interface is a functional interface. You are not required to use the annotation. Any interface with a single abstract method is, by definition, a functional interface. But using the <code>@FunctionalInterface</code> annotation is a good idea.</p>
<p>
</p><p>Finally, note that checked exceptions matter when a lambda is converted to an instance of a functional interface. If the body of a lambda expression can throw a checked exception, that exception needs to be declared in the abstract method of the target interface. For example, the following would be an error:</p>
<p></p><div><div id="highlighter_67469" class="syntaxhighlighter  java"><div class="toolbar"><span></span></div><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java plain">Runnable sleeper = () -&gt; { System.out.println(</code><code class="java string">"Zzz"</code><code class="java plain">); Thread.sleep(</code><code class="java value">1000</code><code class="java plain">); };</code></div><div class="line number2 index1 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java comments">// Error: Thread.sleep can throw a checkedInterruptedException</code></div></div></td></tr></tbody></table></div></div><p></p>
<p>Because the <code>Runnable.run </code>cannot throw any exception, this assignment is illegal. To fix the error, you have two choices. You can catch the exception in the body of the lambda expression. Or you can assign the lambda to an interface whose single abstract method can throw the exception. For example, the <code>call</code> method of the <code>Callable</code> interface can throw any exception. Therefore, you can assign the lambda to a<code> Callable&lt;Void&gt;</code> (if you add a statement <code>return null</code>).</p>
<p>
</p><h3>Method References</h3>
<p>
</p><p>Sometimes, there is already a method that carries out exactly the action that you'd like to pass on to some other code. For example, suppose you simply want to print the <code>event</code> object whenever a button is clicked. Of course, you could call</p>
<p></p><div><div id="highlighter_111714" class="syntaxhighlighter  java"><div class="toolbar"><span></span></div><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java plain">button.setOnAction(event -&gt; System.out.println(event));</code></div></div></td></tr></tbody></table></div></div><p></p>
<p>It would be nicer if you could just pass the <code>println</code> method to the <code>setOnAction</code> method. Here is how you do that:</p>
<p></p><div><div id="highlighter_256805" class="syntaxhighlighter  java"><div class="toolbar"><span></span></div><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java plain">button.setOnAction(System.out::println);</code></div></div></td></tr></tbody></table></div></div><p></p>
<p>The expression <code>System.out::println</code> is a <em>method reference</em> that is equivalent to the lambda expression <code>x -&gt; System.out.println(x</code>).</p>
<p>As another example, suppose you want to sort strings regardless of letter case. You can pass this method expression:</p>
<p></p><div><div id="highlighter_406263" class="syntaxhighlighter  java"><div class="toolbar"><span></span></div><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java plain">Arrays.sort(strings, String::compareToIgnoreCase)</code></div></div></td></tr></tbody></table></div></div><p></p>
<p>As you can see from these examples, the <code>::</code> operator separates the method name from the name of an object or class. There are three principal cases:</p>
<ul>
<li><code>object::instanceMethod</code></li>
<li><code>Class::staticMethod</code></li>
<li><code>Class::instanceMethod</code></li></ul>
<p>In the first two cases, the method reference is equivalent to a lambda expression that supplies the parameters of the method. As already mentioned, <code>System.out::println</code> is equivalent to <code>x -&gt; System.out.println(x)</code>. Similarly, <code>Math::pow</code> is equivalent to <code>(x, y) -&gt; Math.pow(x, y)</code>. In the third case, the first parameter becomes the target of the method. For example, <code>String::compareToIgnoreCase</code> is the same as<code> (x, y) -&gt; x.compareToIgnoreCase(y)</code>.</p>
<p>
</p><p>When there are multiple overloaded methods with the same name, the compiler will try to find from the context which one you mean. For example, there are two versions of the <code>Math.max </code>method, one for integers and one for double values. Which one gets picked depends on the method parameters of the functional interface to which <code>Math::max</code> is converted. Just like lambda expressions, method references don't live in isolation. They are always turned into instances of functional interfaces.</p>
<p>
</p><p>You can capture the <code>this</code> parameter in a method reference. For example, <code>this::equals</code> is the same as <code>x -&gt; this.equals(x)</code>. It is also valid to use <code>super</code>. The method expression <code>super::instanceMethod</code> uses this as the target and invokes the superclass version of the given method. Here is an artificial example that shows the mechanics:</p>
<p>
</p><p></p><div><div id="highlighter_370073" class="syntaxhighlighter  java"><div class="toolbar"><span></span></div><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">class</code> <code class="java plain">Greeter {</code></div><div class="line number2 index1 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java keyword">void</code> <code class="java plain">greet() {</code></div><div class="line number3 index2 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">System.out.println(</code><code class="java string">"Hello, world!"</code><code class="java plain">);</code></div><div class="line number4 index3 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number5 index4 alt2"><code class="java spaces">&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number6 index5 alt1"><code class="java spaces">&nbsp;&nbsp;</code>&nbsp;</div><div class="line number7 index6 alt2"><code class="java spaces">&nbsp;&nbsp;</code><code class="java keyword">class</code> <code class="java plain">ConcurrentGreeter </code><code class="java keyword">extends</code> <code class="java plain">Greeter {</code></div><div class="line number8 index7 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java keyword">void</code> <code class="java plain">greet() {</code></div><div class="line number9 index8 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">Thread t = </code><code class="java keyword">new</code> <code class="java plain">Thread(</code><code class="java keyword">super</code><code class="java plain">::greet);</code></div><div class="line number10 index9 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">t.start();</code></div><div class="line number11 index10 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number12 index11 alt1"><code class="java spaces">&nbsp;&nbsp;</code><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><p></p>
  
<p>When the thread starts, its <code>Runnable</code> is invoked, and <code>super::greet</code> is executed, calling the <code>greet</code> method of the superclass. (Note that in an inner class, you can capture the this reference of an enclosing class as <code>EnclosingClass.this::method</code> or <code>EnclosingClass.super::method</code>.)</p>
<p>
</p><h3>Constructor References</h3>
<p>
</p><p>Constructor references are just like method references, except that the name of the method is <code>new</code>. For example, <code>Button::new</code> is a reference to a <code>Button</code> constructor. Which constructor? It depends on the context. Suppose you have a list of strings. Then, you can turn it into an array of buttons, by calling the constructor on each of the strings, with the following invocation:</p>
<p></p><div><div id="highlighter_151475" class="syntaxhighlighter  java"><div class="toolbar"><span></span></div><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java plain">List&lt;String&gt; labels = ...;</code></div><div class="line number2 index1 alt1"><code class="java spaces">&nbsp;&nbsp;</code><code class="java plain">Stream&lt;Button&gt; stream = labels.stream().map(Button::</code><code class="java keyword">new</code><code class="java plain">);</code></div><div class="line number3 index2 alt2"><code class="java spaces">&nbsp;&nbsp;</code><code class="java plain">List&lt;Button&gt; buttons = stream.collect(Collectors.toList());</code></div></div></td></tr></tbody></table></div></div><p></p>
  
<p>Details of the <code>stream</code>, <code>map</code>, and <code>collect</code> methods are beyond the scope of this article. For now, what's important is that the <code>map</code> method calls the <code>Button(String) </code>constructor for each <code>list</code> element. There are multiple <code>Button</code>constructors, but the compiler picks the one with a <code>String</code> parameter because it infers from the context that the constructor is called with a string.</p>
<p>
</p><p>You can form constructor references with array types. For example, <code>int[]::new</code> is a constructor reference with one parameter: the length of the array. It is equivalent to the lambda expression<code> x -&gt; new int[x]</code>.</p>
<p>Array constructor references are useful to overcome a limitation of Java. It is not possible to construct an array of a generic type <code>T</code>. The expression <code>new T[n]</code> is an error since it would be erased to <code>new Object[n]</code>. That is a problem for library authors. For example, suppose we want to have an array of buttons. The <code>Stream</code> interface has a <code>toArray</code> method that returns an <code>Object</code> array:</p>
<p>
</p><p></p><div><div id="highlighter_747992" class="syntaxhighlighter  java"><div class="toolbar"><span></span></div><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java plain">Object[] buttons = stream.toArray();</code></div></div></td></tr></tbody></table></div></div><p></p>
<p>But that is unsatisfactory. The user wants an array of buttons, not objects. The stream library solves that problem with constructor references. Pass <code>Button[]::new</code> to the <code>toArray</code> method:</p>
<p></p><div><div id="highlighter_553049" class="syntaxhighlighter  java"><div class="toolbar"><span></span></div><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java plain">Button[] buttons = stream.toArray(Button[]::</code><code class="java keyword">new</code><code class="java plain">);</code></div></div></td></tr></tbody></table></div></div><p></p>
<p>The <code>toArray</code> method invokes this constructor to obtain an array of the correct type. Then it fills and returns the array.</p>
<p>	<!-- send Article author Details-->
		</p></article>
<article>
	<h3>Variable Scope</h3>
<p>
</p><p>Often, you want to be able to access variables from an enclosing method or class in a lambda expression. Consider this example:</p>
<p></p><div><div id="highlighter_514302" class="syntaxhighlighter  java"><div class="toolbar"><span></span></div><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">public</code> <code class="java keyword">static</code> <code class="java keyword">void</code> <code class="java plain">repeatMessage(String text, </code><code class="java keyword">int</code> <code class="java plain">count) {</code></div><div class="line number2 index1 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">Runnable r = () -&gt; {</code></div><div class="line number3 index2 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">for</code> <code class="java plain">(</code><code class="java keyword">int</code> <code class="java plain">i = </code><code class="java value">0</code><code class="java plain">; i &lt; count; i++) {</code></div><div class="line number4 index3 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">System.out.println(text);</code></div><div class="line number5 index4 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">Thread.yield();</code></div><div class="line number6 index5 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number7 index6 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">};</code></div><div class="line number8 index7 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">new</code> <code class="java plain">Thread(r).start();</code></div><div class="line number9 index8 alt2"><code class="java spaces">&nbsp;&nbsp;</code><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><p></p>
  
<p>Consider a call:</p>
<p></p><div><div id="highlighter_438675" class="syntaxhighlighter  java"><div class="toolbar"><span></span></div><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java plain">repeatMessage(</code><code class="java string">"Hello"</code><code class="java plain">, </code><code class="java value">1000</code><code class="java plain">); </code><code class="java comments">// Prints Hello 1,000 times in a separate thread</code></div></div></td></tr></tbody></table></div></div><p></p>
<p>
</p><p>Now look at the variables <code>count</code> and <code>text</code> inside the lambda expression. Note that these variables are <em>not</em> defined in the lambda expression. Instead, these are parameter variables of the <code>repeatMessage</code> method.</p>
<p>If you think about it, something not obvious is going on here. The code of the lambda expression may run long after the call to <code>repeatMessage</code>has returned and the parameter variables are gone. How do the <code>text</code> and <code>count</code> variables stay around?</p>
<p>
</p><p>To understand what is happening, we need to refine our understanding of a lambda expression. A lambda expression has three ingredients:</p>
<ol><li>A block of code</li>
<li>Parameters</li>
<li>Values for the <em>free</em> variables; that is, the variables that are not parameters and not defined inside the code</li></ol>
<p>
</p><p>In our example, the lambda expression has two free variables, <code>text</code> and <code>count</code>. The data structure representing the lambda expression must store the values for these variables, in our case, <code>"Hello"</code> and <code>1000</code>. We say that these values have been <em>captured</em> by the lambda expression. (It's an implementation detail how that is done. For example, one can translate a lambda expression into an object with a single method, so that the values of the free variables are copied into instance variables of that object.)</p>
<p>
</p><p>The technical term for a block of code together with the values of the free variables is a <em>closure</em>. If someone gloats that their language has closures, rest assured that Java has them as well. In Java, lambda expressions are closures. In fact, inner classes have been closures all along. Java 8 gives us closures with an attractive syntax.</p>
<p>
</p><p>As you have seen, a lambda expression can capture the value of a variable in the enclosing scope. In Java, to ensure that the captured value is well defined, there is an important restriction. In a lambda expression, you can only reference variables whose value doesn't change. <b>Т.е. эти переменные должны быть final или effectively final </b>For example, the following is illegal:</p>
<p></p><div><div id="highlighter_9539" class="syntaxhighlighter  java"><div class="toolbar"><span></span></div><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">public</code> <code class="java keyword">static</code> <code class="java keyword">void</code> <code class="java plain">repeatMessage(String text, </code><code class="java keyword">int</code> <code class="java plain">count) {</code></div><div class="line number2 index1 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">Runnable r = () -&gt; {</code></div><div class="line number3 index2 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">while</code> <code class="java plain">(count &gt; </code><code class="java value">0</code><code class="java plain">) {</code></div><div class="line number4 index3 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">count--; </code><code class="java comments">// Error: Can't mutate captured variable</code></div><div class="line number5 index4 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">System.out.println(text);</code></div><div class="line number6 index5 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">Thread.yield();</code></div><div class="line number7 index6 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number8 index7 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">};</code></div><div class="line number9 index8 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">new</code> <code class="java plain">Thread(r).start();</code></div><div class="line number10 index9 alt1"><code class="java spaces">&nbsp;&nbsp;</code><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><p></p>
  
<p>There is a reason for this restriction. Mutating variables in a lambda expression is not thread-safe. Consider a sequence of concurrent tasks, each updating a shared counter.</p>
<p>
</p><p></p><div><div id="highlighter_151539" class="syntaxhighlighter  java"><div class="toolbar"><span></span></div><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">int</code> <code class="java plain">matches = </code><code class="java value">0</code><code class="java plain">;</code></div><div class="line number2 index1 alt1"><code class="java spaces">&nbsp;&nbsp;</code><code class="java keyword">for</code> <code class="java plain">(Path p : files)</code></div><div class="line number3 index2 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">new</code> <code class="java plain">Thread(() -&gt; { </code><code class="java keyword">if</code> <code class="java plain">(p has some property) matches++; }).start();</code></div><div class="line number4 index3 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java comments">// Illegal to mutate matches</code></div></div></td></tr></tbody></table></div></div><p></p>
  
<p>If this code were legal, it would be very, very bad. The increment <code>matches++</code> is not atomic, and there is no way of knowing what would happen if multiple threads execute that increment concurrently.</p>
<p>
</p><p>Inner classes can also capture values from an enclosing scope. Before Java 8, inner classes were allowed to access only <em>final</em> local variables. This rule has now been relaxed to match that for lambda expressions.<b> An inner class can access any effectively final local variable</b>; that is, <u>any variable whose value does not change</u>.</p>
<p>
</p><p>Don't count on the compiler to catch all concurrent access errors. The prohibition against mutation holds only for local variables. If <code>matches</code>is an instance or static variable of an enclosing class, then no error is reported, even though the result is just as undefined.</p>
<p>Also, it's perfectly legal to mutate a shared object, even though it is unsound. For example,</p>
<p>
</p><p></p><div><div id="highlighter_960459" class="syntaxhighlighter  java"><div class="toolbar"><span></span></div><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java plain">List&lt;Path&gt; matches = </code><code class="java keyword">new</code> <code class="java plain">ArrayList&lt;&gt;();</code></div><div class="line number2 index1 alt1"><code class="java spaces">&nbsp;&nbsp;</code><code class="java keyword">for</code> <code class="java plain">(Path p : files)</code></div><div class="line number3 index2 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">new</code> <code class="java plain">Thread(() -&gt; { </code><code class="java keyword">if</code> <code class="java plain">(p has some property) matches.add(p); }).start();</code></div><div class="line number4 index3 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java comments">// Legal to mutate matches, but unsafe</code></div></div></td></tr></tbody></table></div></div><p></p>
<p>
</p><p>Note that the variable <code>matches</code> is <em>effectively final</em>. (An effectively final variable is a variable that is never assigned a new value after it has been initialized.) In our case, <code>matches</code> always refers to the same <code>ArrayList</code> object. However, the object is mutated, and that is not thread-safe. If multiple threads call <code>add</code>, the result is unpredictable.</p>
<p>
</p><p>There are safe mechanisms for counting and collecting values concurrently. You may want to use streams to collect values with certain properties. In other situations, you may want to use thread-safe counters and collections.</p>
<p>
</p><p>As with inner classes, there is an escape hatch that lets a lambda expression update a counter in an enclosing local scope. Use an array of length 1, like this:</p>
<p></p><div><div id="highlighter_462221" class="syntaxhighlighter  java"><div class="toolbar"><span></span></div><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">int</code><code class="java plain">[] counter = </code><code class="java keyword">new</code> <code class="java keyword">int</code><code class="java plain">[</code><code class="java value">1</code><code class="java plain">];</code></div><div class="line number2 index1 alt1"><code class="java spaces">&nbsp;&nbsp;</code><code class="java plain">button.setOnAction(event -&gt; counter[</code><code class="java value">0</code><code class="java plain">]++);</code></div></div></td></tr></tbody></table></div></div><p></p>
<p>
</p><p>Of course, code like this is not thread-safe. For a button callback, that doesn't matter, but in general, you should think twice before using this trick.</p>
<p>
</p><p><b>The body of a lambda expression has <em>the same scope as a nested block</em></b>. The same rules for name conflicts and shadowing apply. It is illegal to declare a parameter or a local variable in the lambda that has the same name as a local variable.</p>
<p></p><div><div id="highlighter_916570" class="syntaxhighlighter  java"><div class="toolbar"><span></span></div><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java plain">Path first = Paths.get(</code><code class="java string">"/usr/bin"</code><code class="java plain">);</code></div><div class="line number2 index1 alt1"><code class="java spaces">&nbsp;&nbsp;</code><code class="java plain">Comparator&lt;String&gt; comp =</code></div><div class="line number3 index2 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">(first, second) -&gt; Integer.compare(first.length(), second.length());</code></div><div class="line number4 index3 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java comments">// Error: Variable first already defined</code></div></div></td></tr></tbody></table></div></div><p></p>
<p>
</p><p>Inside a method, you can't have two local variables with the same name. Therefore, you can't introduce such variables in a lambda expression either. When you use the <code>this</code> keyword in a lambda expression, you refer to the <code>this</code> parameter <b>of the method that creates the lambda</b>. Т.е. this возьмётся из метода, который создаёт лямбду. (А не из внутреннего класса, для которого эта лямда пишется) For example, consider</p>
<p></p><div><div id="highlighter_242070" class="syntaxhighlighter  java"><div class="toolbar"><span></span></div><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">public</code> <code class="java keyword">class</code> <code class="java plain">Application() {</code></div><div class="line number2 index1 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java keyword">void</code> <code class="java plain">doWork() {</code></div><div class="line number3 index2 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">Runnable runner = () -&gt; { ...; System.out.println(</code><code class="java keyword">this</code><code class="java plain">.toString()); ... };</code></div><div class="line number4 index3 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">...</code></div><div class="line number5 index4 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number6 index5 alt1"><code class="java spaces">&nbsp;&nbsp;</code><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><p></p>
  
<p>The expression <code>this.toString()</code> calls the <code>toString</code> method of the <code>Application</code> object, <em>not</em> the <code>Runnable</code> instance. There is nothing special about the use of <code>this</code> in a lambda expression. The scope of the lambda expression is nested inside the <code>doWork</code> method, and <code>this</code> has the same meaning anywhere in that method.</p>
<p>
</p><h3>Default Methods</h3>
<p>
</p><p>Many programming languages integrate function expressions with their collections library. This often leads to code that is shorter and easier to understand than the loop equivalent. For example, consider a loop:</p>
<p></p><div><div id="highlighter_115659" class="syntaxhighlighter  java"><div class="toolbar"><span></span></div><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">for</code> <code class="java plain">(</code><code class="java keyword">int</code> <code class="java plain">i = </code><code class="java value">0</code><code class="java plain">; i &lt; list.size(); i++)</code></div><div class="line number2 index1 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">System.out.println(list.get(i));</code></div></div></td></tr></tbody></table></div></div><p></p>
<p>There is a better way. The library designers can supply a <code>forEach</code> method that applies a function to each element. Then you can simply call</p>
<p></p><div><div id="highlighter_967452" class="syntaxhighlighter  java"><div class="toolbar"><span></span></div><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java plain">list.forEach(System.out::println);</code></div></div></td></tr></tbody></table></div></div><p></p>
<p>
</p><p>That's fine if the collections library has been designed from the ground up. But the Java collections library was designed many years ago, and there is a problem. If the <code>Collection</code> interface gets new methods, such as <code>forEach</code>, then every program that defines its own class implementing <code>Collection</code> will break until it, too, implements that method. That is simply unacceptable in Java.</p>
<p>
</p><p>The Java designers decided to solve this problem once and for all by allowing interface methods with concrete implementations (called <em>default methods</em>). Those methods can be safely added to existing interfaces. In this section, we'll look at default methods in detail. In Java 8, the <code>forEach</code> method has been added to the <code>Iterable</code> interface, a superinterface of <code>Collection</code>, using the mechanism that I will describe here.</p>
<p>
</p><p>Consider this interface:</p>
<p></p><div><div id="highlighter_501302" class="syntaxhighlighter  java"><div class="toolbar"><span></span></div><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">interface</code> <code class="java plain">Person {</code></div><div class="line number2 index1 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">long</code> <code class="java plain">getId();</code></div><div class="line number3 index2 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">default</code> <code class="java plain">String getName() { </code><code class="java keyword">return</code> <code class="java string">"John Q. Public"</code><code class="java plain">; }</code></div><div class="line number4 index3 alt1"><code class="java spaces">&nbsp;&nbsp;</code><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><p></p>
  
<p>The interface has two methods: <code>getId</code>, which is an abstract method, and the default method <code>getName</code>. A concrete class that implements the <code>Person</code> interface must, of course, provide an implementation of <code>getId</code>, but it can choose to keep the implementation of <code>getName</code> or to override it.</p>
<p>
</p><p>Default methods put an end to the classic pattern of providing an interface and an abstract class that implements most or all of its methods, such as <code>Collection/AbstractCollection</code> or <code>WindowListener/WindowAdapter</code>. Now, you can just implement the methods in the interface.</p>
<p>What happens if the exact same method is defined as a default method in one interface and then again as a method of a superclass or another interface? Languages such as Scala and C++ have complex rules for resolving such ambiguities. Fortunately, the rules in Java are much simpler. They are:</p>
<p>
</p><ol><li>Superclasses win. If a superclass provides a concrete method, default methods with the same name and parameter types are simply ignored.</li>
<li>Interfaces clash. If a super interface provides a default method, and another interface supplies a method with the same name and parameter types (default or not), then you must resolve the conflict by overriding that method.</li></ol>
<p>
</p><p>Let's look at the second rule. Consider another interface with a <code>getName</code> method:</p>
<p></p><div><div id="highlighter_964239" class="syntaxhighlighter  java"><div class="toolbar"><span></span></div><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">interface</code> <code class="java plain">Named {</code></div><div class="line number2 index1 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">default</code> <code class="java plain">String getName() { </code><code class="java keyword">return</code> <code class="java plain">getClass().getName() + </code><code class="java string">"_"</code> <code class="java plain">+ hashCode(); }</code></div><div class="line number3 index2 alt2"><code class="java spaces">&nbsp;&nbsp;</code><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><p></p>
  
<p>What happens if you form a class that implements both of them?</p>
<p>
</p><p></p><div><div id="highlighter_492233" class="syntaxhighlighter  java"><div class="toolbar"><span></span></div><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">class</code> <code class="java plain">Student </code><code class="java keyword">implements</code> <code class="java plain">Person, Named {</code></div><div class="line number2 index1 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">...</code></div><div class="line number3 index2 alt2"><code class="java spaces">&nbsp;&nbsp;</code><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><p></p>
  
<p>The class inherits two inconsistent <code>getName</code> methods provided by the <code>Person</code> and <code>Named</code> interfaces. Rather than choosing one over the other, the Java compiler reports an error and leaves it up to the programmer to resolve the ambiguity. Simply provide a <code>getName</code> method in the <code>Student</code> class. In that method, you can choose one of the two conflicting methods, like this:</p>
<p></p><div><div id="highlighter_655726" class="syntaxhighlighter  java"><div class="toolbar"><span></span></div><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">class</code> <code class="java plain">Student </code><code class="java keyword">implements</code> <code class="java plain">Person, Named {</code></div><div class="line number2 index1 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java plain">String getName() { returnPerson.</code><code class="java keyword">super</code><code class="java plain">.getName(); }</code></div><div class="line number3 index2 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">...</code></div><div class="line number4 index3 alt1"><code class="java spaces">&nbsp;&nbsp;</code><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><p></p>
  
<p>Now assume that the <code>Named</code> interface does not provide a default implementation for <code>getName</code>:</p>
<p></p><div><div id="highlighter_301620" class="syntaxhighlighter  java"><div class="toolbar"><span></span></div><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">interface</code> <code class="java plain">Named {</code></div><div class="line number2 index1 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">String getName();</code></div><div class="line number3 index2 alt2"><code class="java spaces">&nbsp;&nbsp;</code><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><p></p>
  
<p>Can the <code>Student</code> class inherit the default method from the <code>Person</code> interface? This might be reasonable, but the Java designers decided in favor of uniformity. It doesn't matter how two interfaces conflict. If at least one interface provides an implementation, the compiler reports an error, and the programmer must resolve the ambiguity.</p>
<p>
</p><p>If neither interface provides a default for a shared method, then we are in the pre-Java 8 situation and there is no conflict. An implementing class has two choices: implement the method, or leave it unimplemented. In the latter case, the class is itself abstract.</p>
<p>
</p><p>I just discussed name clashes between two interfaces. Now consider a class that extends a superclass and implements an interface, inheriting the same method from both. For example, suppose that <code>Person</code> is a class and <code>Student</code> is defined as:</p>
<p></p><div><div id="highlighter_588162" class="syntaxhighlighter  java"><div class="toolbar"><span></span></div><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">class</code> <code class="java plain">Student </code><code class="java keyword">extends</code> <code class="java plain">Person </code><code class="java keyword">implements</code> <code class="java plain">Named { ... }</code></div></div></td></tr></tbody></table></div></div><p></p>
<p>
</p><p>In that case, only the superclass method matters, and any default method from the interface is simply ignored. In our example, <code>Student</code> inherits the <code>getName</code> method from <code>Person</code>, and it doesn't make any difference whether the <code>Named</code> interface provides a default for <code>getName</code> or not. This is the "class wins" rule. The "class wins" rule ensures compatibility with Java 7. If you add default methods to an interface, it has no effect on code that worked before there were default methods. But be warned: You can never make a default method that redefines one of the methods in the <code>Object</code> class. For example, you can't define a default method for <code>toString</code> or <code>equals</code>, even though that might be attractive for interfaces such as <code>List</code>. As a consequence of the "classes win" rule, such a method could never win against <code>Object.toString </code>or <code>Object.equals</code>.</p>
<p>
</p><h3>Static Methods in Interfaces</h3>
<p>
</p><p>As of Java 8, you are allowed to add static methods to interfaces. There was never a technical reason why this should be outlawed: It simply seemed to be against the spirit of interfaces as abstract specifications.</p>
<p>
</p><p>Until now, it has been common to place static methods in companion classes. You find pairs of interfaces and utility classes such as <code>Collection/Collections</code> or <code>Path/Paths</code> in the standard library.</p>
<p>Have a look at the <code>Paths</code> class. It has only a couple of factory methods. You can construct a path from a sequence of strings, such as <code>Paths.get("jdk1.8.0", "jre", "bin")</code>. In Java 8, you can add this method to the <code>Path</code> interface:</p>
<p></p><div><div id="highlighter_639634" class="syntaxhighlighter  java"><div class="toolbar"><span></span></div><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">public</code> <code class="java keyword">interface</code> <code class="java plain">Path {</code></div><div class="line number2 index1 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java keyword">static</code> <code class="java plain">Path get(String first, String... more) {</code></div><div class="line number3 index2 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">return</code> <code class="java plain">FileSystems.getDefault().getPath(first, more);</code></div><div class="line number4 index3 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number5 index4 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">...</code></div><div class="line number6 index5 alt1"><code class="java spaces">&nbsp;&nbsp;</code><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><p></p>
  
<p>Then the <code>Paths</code> class is no longer necessary.</p>
<p>
</p><p>When you look at the <code>Collections</code> class, you will find two kinds of methods. A method such as:</p>
<p></p><div><div id="highlighter_221582" class="syntaxhighlighter  java"><div class="toolbar"><span></span></div><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">public</code> <code class="java keyword">static</code> <code class="java keyword">void</code> <code class="java plain">shuffle(List&lt;?&gt; list)</code></div></div></td></tr></tbody></table></div></div><p></p>
<p>would work well as a default method of the <code>List</code> interface:</p>
<p></p><div><div id="highlighter_496889" class="syntaxhighlighter  java"><div class="toolbar"><span></span></div><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">public</code> <code class="java keyword">default</code> <code class="java keyword">void</code> <code class="java plain">shuffle()</code></div></div></td></tr></tbody></table></div></div><p></p>
<p>
</p><p>You could then simply call <code>list.shuffle()</code> on any list.</p>
<p>For a factory method, that doesn't work because you don't have an object on which to invoke the method. That is where static interface methods come in. For example,</p>
<p></p><div><div id="highlighter_788671" class="syntaxhighlighter  java"><div class="toolbar"><span></span></div><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">public</code> <code class="java keyword">static</code> <code class="java plain">&lt;T&gt; List&lt;T&gt; nCopies(</code><code class="java keyword">int</code> <code class="java plain">n, T o)</code></div><div class="line number2 index1 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java comments">// Constructs a list of n instances of o</code></div></div></td></tr></tbody></table></div></div><p></p>
<p>could be a static method of the <code>List</code> interface. Then you would call <code>List.nCopies(10, "Fred")</code> instead of <code>Collections.nCopies(10, "Fred")</code> and it would be clear to the reader that the result is a <code>List</code>.</p>
<p>
</p><p>It is unlikely that the Java collections library will be refactored in this way, but when you implement your own interfaces, there is no longer a reason to provide a separate companion class for utility methods.</p>
<p>
</p><p>In Java 8, static methods have been added to quite a few interfaces. For example, the <code>Comparator</code> interface has a very useful static comparing method that accepts a "key extraction" function and yields a comparator that compares the extracted keys. To compare <code>Person</code> objects by name, use <code>Comparator.comparing(Person::name)</code>.</p>
<p>
</p><h3>Conclusion</h3>
<p>In this article, I compared strings by length with the lambda expression <code>(first, second) -&gt; Integer.compare(first.length(), second.length())</code>. But with the static <code>compare</code> method, we can do much better and simply use <code>Comparator.compare(String::length)</code>. This is a fitting way of closing this article because it demonstrates the power of working with functions. The <code>compare</code> method turns a function (the key extractor) into a more complex function (the key-based comparator). Such "higher-order functions" are discussed in more detail in  <a href="http://www.amazon.com/Java-SE-8-Really-Impatient/dp/0321927761?tag=drdos-20">my book,</a> as well as in various online resources for Java 8.</p>
<p>

</p><hr>
<p><em><a href="https://plus.google.com/+CayHorstmann/?rel=author">Cay S. Horstmann</a> is is a professor of computer science at San Jose State University, a Java  Champion, and a frequent speaker at computer industry conferences. He is the author of</em> <a href="http://www.informit.com/store/java-se-8-for-the-really-impatient-9780321927767">Java SE 8 For the Really Impatient</a>, <em>published by Addison-Wesley, from which this article is adapted.</em>	<!-- send Article author Details-->
		</p></article>


</body>
</html>