What Is an Exception?
https://docs.oracle.com/javase/tutorial/essential/exceptions/definition.html
Advantages of Exceptions
https://docs.oracle.com/javase/tutorial/essential/exceptions/advantages.html
************************
What Is an Exception?
Термин исключение - это сокращение от фразы "исключительное событие" (exceptional event).
Определение: исключение представляет собой событие, которое происходит/случается во время выполнения программы, и которое нарушает/разрушает/срывает нормальное выполнение инструкций программы.

При возникновении ошибки в методе, метод создает объект исключения (exception object) и передает его в систему выполнения(runtime system) (выполняющюю систему).
Объект исключения содержит информацию об ошибке, включая её тип и состояние программы, когда произошла ошибка. Создание объекта исключения и передача его в систему исполнения называется метанием/выбрасыванием исключения.

После того, как метод генерирует исключение, система выполнения пытается найти что-то, чтобы справиться/обработать это исключение.
этим "чем-то" для обработки исключения является упорядоченный список методов, вызов которые и привёли к ошибке.
Список методов называют  "стек вызовов" (call stack).
(call stack -- это отсортированный список методов, которые были вызваны, чтобы попасть в текущий метод)

(Runtime system) Исполняющая система в стеке вызовов ищет метод, который содержит блок, который может обработать это исключение. Такой блок будет называться exception handler/обработчик исключений. 
Поиск начинается с метода, в котором была допущена ошибка, и затем проходит через весь стек вызовов в обратном порядке, в котором были вызваны методы. 
Когда соответствующий обработчик найден, исполняющая система передает исключение в обработчик. Обработчик исключений считается подходящим, если тип объекта исключения соответствует типу, который может быть обработан с помощью этого обработчика.
В этом случае говорят, что Обработчик исключений поймал исключение. Если обработчик не найден - то runtime system terminates/завершает свою работу (и следовательно завершается и сама программа)  .
--------------------------------------------
The Catch or Specify Requirement
Требование "слови" или "обозначь"

Правильный код на Java должен соблюдать Требование "слови" или "обозначь". Это означает, что код, который может бросить определенные исключения, должен быть отделён одним из следующих действий:
1) try statement, который перехватывает исключение. try должен предоставить обработчик для исключения
2) Метод должен указать, что он может выбросить исключение.
 Метод должен описать throws clause, в котором перечислены все исключения.

!!! НЕ ВСЕ ИСКЛЮЧЕНИЯ ПОДЛЕЖАТ Catch or Specify Requirement. 
Чтобы понять, почему, мы должны посмотреть на три основные категории исключений, и ТОЛЬКО ОДНА ИЗ НИХ должна подчиняться требованию.
-------------------- 
Три вида исключений:

1) Первый вид исключения --- это проверяемые (контролируемые) исключения (checked exception).

CHECKED EXCEPTION -- такие исключительные события/состояния, которые хорошо/правильно написанное приложение должно ожидать/прогнозировать и восстанавливаться после них. 

Например, приложение запрашивает у пользователя имя входного файла, а затем открывает файл, передавая имя конструктору java.io.FileReader. 
Как правило, пользователь предоставляет имя существующего читаемого файла, поэтому создание объекта FileReader завершится успешно, и приложение будет выполненяться в штатном режиме/обычном режиме. Но иногда пользователь предоставляет имя несуществующего файла, а конструктор бросает java.io.FileNotFoundException. Хорошо написанная программа должна отловить это исключение и уведомить пользователя об ошибке, возможно, также запросить имя правильного файла.

Проверяемые исключения подлежат Требованию "слови" или "обозначь". 

!!! ВСЕ ИСКЛЮЧЕНИЯ ЯВЛЯЮТСЯ CHECKED EXCEPTIONS, КРОМЕ Error, RuntimeException и их подклассов. !!!

2) Второй вид исключения -- это ошибка (ERROR). 

ERROR -- такие исключительные условия/ситуации, которые являются внешними по отношению к приложению, и приложение, КАК ПРАВИЛО, не может ожидать/прогнозировать их или восстанавиться после них.

НО учесть такие события можно, и затем словить и обработать тоже можно. Иногда наверно и нужно.

  Например, предположим, что приложение успешно открывает файл для ввода, но не может прочитать файл из-за аппаратной или системной неисправности. Поэтому операция Неудачного чтения выбросит java.io.IOError. Приложение может поймать это исключение (а может и нет), чтобы уведомить пользователя о проблеме - но для программы также имеет смысл только вывести stack trace и выйти.

Ошибки НЕ подчиняются Требованию "слови" или "обозначь". 

ОШИБКИ - ЭТО ТЕ ИСКЛЮЧЕНИЯ, ОПИСАННЫЕ КАК ERROR И ЕГО ПОДКЛАССОВ.

3) Третий вид исключений -- это исключение времени выполнения (runtime exception). 

RUNTIME EXCEPTION -- такие исключительные условия/ситуации, которые являются внутренними по отношению к приложению, и приложение, как правило, не может их ожидать/предвидеть или восстанавиться от них.
--Но всё равно можно их словить и как-то обработать.

 Такие исключения, как правило, указывают на ошибки в программе, такие как логические ошибки или неправильное использование API.
 Например, рассмотрим приложение, описанное ранее, которре передает имя файла в конструктор FileReader. Если из-за логической ошибки в конструктор передаётся null,, то конструктор выбросит NullPointerException. 
 Приложение, конечно, может поймать это исключение, но , возможно, более верным будет исправить саму ошибку, вызвавшую это исключение.

 Т.е. бывает лучше заранее проверить в коде на возможность такой ошибки. Т.е.учесть её на этапе проектирования.

Runtime exceptions НЕ подчиняются Требованию "слови" или "обозначь". Runtime exceptions - это те, которые являются классом RuntimeException и его подклассами.

Errors and runtime exceptions все вместе известны как непроверенные исключения (UNCHECKED EXCEPTIONS).
--Их тоже можно указывать в throws declaration, но особо смысла в этом нет, т.к. их всё равно не обязятельно обрабатывать.
--------------------------------------------
Bypassing Catch or Specify
Пропуская правило/требование "слови" или "обозначь"

Некоторые программисты считают это правило серьезным недостатком в механизме обработки исключений, и пытаются обойти его, используя unchecked исключения вместо checked исключений. В общем, это не рекомендуется.
-----------------------
Catching and Handling Exceptions

В этом разделе описывается, как использовать 3 компонента exception handler-а --  the TRY, CATCH, and FINALLY blocks.

Потом объясняется TRY-WITH-RESOURCES statement, который особенно подходит для ситуаций, которые используют Closeable ресурсы, такие как streams.

Следующий пример определяет и реализует класс с именем ListOfNumbers.
// Note: This class will not compile yet.
---------------------------------------------------------
The try Block, The catch Blocks
Каждый catch block - это блок обработчика исключений, который обрабатывает тип исключения, указанный в аргументе. 

try {
} catch (ExceptionType name) {
} catch (ExceptionType name) {}

 Аргумент (ExceptionType) объявляет тип исключения, который обработчик может обработать, и этот тип должен быть именем класса, который наследуется от класса Throwable. Обработчик может обратиться к исключению по имени.

The catch block содержит код, который выполняется тогда, когда обработчик исключений вызывается (и если он вызывается). 
Система (runtime system) вызывает обработчик исключений тогда, когда он (обработчик) является первым в стеке вызовов, чей тип исключения соответствует типу выброшенного exception. 
Система считает совпадением тот случае, когда выброшенный объект может быть присвоен аргументу обработчика.
(т.е. если исключение подходит по типу в агрумент catch блока - то этот (первый такой подходящий) обработчик и отрабатывает.)

Обработчики исключений могут делать больше, чем просто печатать сообщения об ошибках или остановить программу. 
Они могут сделать восстановление после ошибок, предложить пользователю принять решение, или передать ошибку выше к обработчикам верхнего уровня с использованием сцепленных исключений (chained exceptions).

----------------
Catching More Than One Type of Exception with One Exception Handler

В Java SE 7 и более поздних версий, один catch блок может обрабатывать более одного типа исключения. Эта функция может уменьшить дублирование кода и уменьшить соблазн поймать слишком широкое исключение.

В catch clause указывают те типы исключений, которые может обработать этот блок, и отделить каждый тип исключения вертикальной чертой (|):

catch (IOException|SQLException ex) {
    logger.log(ex);
    throw ex;
}

Примечание: Если catch block обрабатывает более одного типа исключений, то catch параметр неявно является final (т.е. имя исключения, которое задано в входном параметре catch блока является final переменной). В этом примере, параметр "ex" является final, и поэтому вы не можете присвоить ему любые значения в пределах catch block.
------------------------------------------------
The finally Block

!!! The FINALLY block выполняется всегда, если существует try block. Даже если не было выброшено или поймано никакого исключения.
Или если было выброшенго какое-то неожиданное исключение, которое в этом блоке вообще не обрабатываестя.

Но FINALLY блок полезен не только при обработке исключений.
Т.е. если в finally{} указано какой-то cleanup code, то finally гарантирует, что он ВСЕГДА будет выполнен; и не будет пропущен, если были вызваны return, continue, break.

!!! Примечание: Если JVM завершает работу в то время как код в try или catch всё ещё выполняется, то  блок finally может и не выполниться.
 Точно так же, как если поток прерван/убит во время выполнения кода в try или catch блоках, то блок finally может и не выполниться, даже если приложение в целом продолжит работу.

ИЗ try block можно выйти двумя способами:
1) выбросив исключение
2) Все завершается успешно и выход из try block происходит нормально.

Важно: finally block является ключевым инструментом для предотвращения утечки ресурсов. При закрытии файла (или других способах работы с ресурсами) поместите код в finally  блок, чтобы гарантировать, что ресурс всегда закроется/освободится.
----------------------------------------------------
The try-with-resources Statement

TRY-WITH-RESOURCES statement - это блок try, который объявляет один или несколько ресурсов. 
РЕСУРС представляет собой объект, который должен быть закрыт после того, как программа закончит работу с ним. 

Оператор try-with-resources гарантирует, что каждый ресурс будет закрыт в конце выражения. 
Любой объект, который реализует java.lang.AutoCloseable, в т.ч. и все объекты реализующие java.io.Closeable, могут быть использованы в качестве ресурса.

Следующий пример читает первую строку из файла. Он использует экземпляр BufferedReader для чтения данных из файла. 
BufferedReader является ресурсом, который должен быть закрыт после того, как программа закончит с ним:
try (BufferedReader br =
       new BufferedReader(new FileReader(path))) {
  return br.readLine();
}

В этом примере, ресурс объявлен в try-with-resources блоке. 
Оператор объявления появляется в круглых скобках сразу после ключевого слова try. К
ласс BufferedReader в Java SE 7 и поздних, реализует интерфейс java.lang.AutoCloseable. 
Так как экземпляр BufferedReader объявлен в try-with-resource заявлении, то он будет закрыт независимо от того, завершается ли try statement нормально или внезапно (в результате  IOException).

Если писать TRY-CATCH-FINALLY по-старому, 
	try {
        return br.readLine();
    } finally {
        if (br != null) br.close();
    }
Например, если выброшено одновременно 2 исключения: 
1- из try, 2- из finally, то исключение из try блока будет подавлено вторым из finally. 

Если же такая же ситуация произойдут в новом блоке try-with-resources: 
Т.е. одновременно выброшено 2 исключение, то метод [с этим кодом] выдаст исключение из try части, а часть из try-with-resources будет подавлена (suppressed).  

!! В Java SE 7 и более поздних версиях можно получить подавленные исключения; see the section Suppressed Exceptions for more information.

Вы можете объявить один или несколько ресурсов в try-with-resources заявлении.
try (
	ZipFile zf = new java.util.zip.ZipFile(zipFileName);
	BufferedWriter writer = java.nio.file.Files.newBufferedWriter(outputFilePath, charset) 
) {
.......
}

В этом примере оператор try-with-resources содержит два объявления, разделенные точкой с запятой: ZipFile и BufferedWriter. 
Когда блок кода, который непосредственно следует за ним завершается, либо нормально или из-за исключения, методы close в BufferedWriter и ZipFile объектах автоматически вызываются в указанном порядке. 

!! В try-with-resources "close()" МЕТОДЫ у РЕСУРСОВ ВЫЗЫВАЮТСЯ В ПОРЯДКЕ ОБРАТНОМ ИХ СОЗДАНИЮ.
[that the close methods of resources are called in the opposite order of their creation]

!! try-with-resources statement CAN HAVE catch{} AND finally{} BLOCKS just like an ordinary try statement. 
In a try-with-resources statement, any catch or finally block is run AFTER the RESOURCES declared HAVE BEEN CLOSED.
-------------------------------------------------------
Suppressed Exceptions

An exception can be thrown from the block of code associated with the try-with-resources statement. 
In the example writeToFileZipFileContents, an exception can be thrown from the try block, and up to two exceptions can be thrown from the try-with-resources statement when it tries to close the ZipFile and BufferedWriter objects. 
If an exception is thrown from the try block and one or more exceptions are thrown from the try-with-resources statement, then those exceptions thrown from the try-with-resources statement are suppressed, and the exception thrown by the [INSIDE-TRY] block is the one that is thrown by the writeToFileZipFileContents() method. 

!!! You can retrieve these suppressed exceptions by calling the Throwable.getSuppressed() method from the exception thrown by the try block.
-----------------------------------------------
Classes That Implement the AutoCloseable or Closeable Interface

The Closeable interface extends the AutoCloseable interface. 

1) The close() method of the Closeable interface throws exceptions of type IOException
2) The close() method of the AutoCloseable interface throws exceptions of type Exception. 

Consequently/следовательно, subclasses of the AutoCloseable interface can override this behavior of the close method to throw specialized exceptions, such as IOException, or no exception at all.
--------------------------------------------
Scenario 1: An Exception Occurs

The statement that creates a FileWriter can fail for a number of reasons. For example, the constructor for the FileWriter throws an IOException if the program cannot create or write to the file indicated.

When FileWriter throws an IOException, the runtime system immediately stops executing the try block; method calls being executed are not completed. 
The runtime system then starts searching at the top of the method call stack for an appropriate exception handler. In this example, when the IOException occurs, the FileWriter constructor is at the top of the call stack. 
However, the FileWriter constructor doesn't have an appropriate exception handler, so the runtime system checks the next method — the writeList method — in the method call stack. The writeList method has two exception handlers: one for IOException and one for IndexOutOfBoundsException.

The runtime system checks writeList's handlers in the order in which they appear after the try statement. The argument to the first exception handler is IndexOutOfBoundsException. This does not match the type of exception thrown, so the runtime system checks the next exception handler — IOException. 
!! This matches the type of exception that was thrown, so the runtime system ends its search for an appropriate exception handler. Now that the runtime has found an appropriate handler, the code in that catch block is executed.

After the exception handler executes, the runtime system passes control to the finally block. Code in the finally block executes regardless of the exception caught above it. In this scenario, the FileWriter was never opened and doesn't need to be closed. After the finally block finishes executing, the program continues with the first statement after the finally block.
----------------------------------------------
Scenario 2: The try Block Exits Normally

In this scenario, all the statements within the scope of the try block execute successfully and throw no exceptions. Execution falls off the end of the try block, and the runtime system passes control to the finally block. Because everything was successful, the PrintWriter is open when control reaches the finally block, which closes the PrintWriter. Again, after the finally block finishes executing, the program continues with the first statement after the finally block.
----------------------------------------------
Specifying the Exceptions Thrown by a Method

В предыдущем разделе показано, как написать обработчик исключений для метода writeList в классе ListOfNumbers. 
Иногда это приемлемо, чтобы поймать исключения и обработать исключения прямо в методе, в котором ошибки и возникли. 
Но в других случаях лучше, чтобы метод передал это исключении выше/далее вверх по стеку вызовов, чтобы там кто-то обработал это исключение.

Например, вы не можете предвидеть все потребности всех пользователей вашего пакета. В этом случае лучше не ловить исключение и передавать его дальше по стеку вызовов.
В этом случае необходимо указать, что метод может выбросить исключения. 
---------------------------------------------
Throwable Class and Its Subclasses

Объекты, которые наследуются от Throwable class включают в себя DIRECT и INDIRECT descendants.

1) ПРЯМЫЕ потомки -- DIRECT descendants -- objects that inherit directly from the Throwable class.
2) НЕПРЯМЫЕ потомки -- INDIRECT descendants -- objects that inherit from children or grandchildren of the Throwable class.

Throwable has two direct descendants=(Error и Exception), и 1 indirect=RuntimeException:

1) ERROR --- это ошибки в JVM, связанные с "проблемами динамического связывания" или серёзными/жёсткими ошибками в JVM. 
[When a dynamic linking failure or other hard failure in the Java virtual machine occurs, the virtual machine throws an Error]
Обычные программы как правило не выбрасывают и не ловят Error-ы.

2) EXCEPTION --- этот тип означает, что случилась проблема, но это НЕ серьёзная системная проблема/ошибка.
[An Exception indicates that a problem occurred, but it is not a serious system problem]

3) Выделяют также 1 подкласс Exception --- это RuntimeException --- он обозначает исключения/ошибки из-за неправильного использования API.
------------------------------------------
Chained Exceptions

 Приложение часто реагирует на исключение, бросая еще одно исключение. По сути дела, первое исключение вызывает второе исключение. Может быть очень полезно знать, какое первое исключение привело ко второму. 
 Цепные Исключения помогают это узнать.

Ниже приведены методы и конструкторы в Throwable, которые поддерживают сцепленные исключения:
Throwable getCause()
Throwable initCause(Throwable)
Throwable(String, Throwable)
Throwable(Throwable)

** Аргумент "Throwable" в initCause(T) and в конструкторе Throwable(Т) - это исключение, которое вызвало текущее исключение.
** getCause() возвращает exception которое повлекло текущее exception (т.е. родителя, из-за которого случилось текущее искл.), 
** initCause устанавливает причину (родителя) текущего исключения.
----------------------------------------------------------

Accessing Stack Trace Information

Теперь давайте предположим, что обработчик исключений верхнего уровня хочет получить и распечатать  stack trace в своем собственном формате.
--Определение: stack trace предоставляет информацию об истории выполнения текущего потока и перечисляет имена классов и методов, которые были вызваны в тот момент, когда произошло исключение. 
stack trace является полезным инструментом отладки.
----------------------------------------------------------

Creating Exception Classes

Вы можете написать свой класс исключений, если ответили да на все вопросы:

1) Вам нужен тип исключения, который не представлен существующими в платформе Java?
2) Поможет ли пользователям, то что они смогут отличить именно ваши исключения от других?
3) Будет ли ваш код выбрасывать более одного связанного/related исключения?
4) Если вы используете исключения кого-то другого, будут ли пользователи  иметь доступ к этим исключениям? будет ли ваш пакет независимым и самодостаточным?
-------------------------------------
Why did the designers decide to force a method to specify all uncaught checked exceptions that can be thrown within its scope?
   Любое исключение, которое может быть выброшено методом является частью интерфейса программирования public метода. Те, кто вызывают метод должны знать об исключениях, которые метод может бросить, чтобы они могли решить, что с ними делать. Эти исключения являются такой же частью этого интерфейса метода как и его параметры и возвращаемое значение.

Runtime exceptions представляют собой проблемы, которые являются результатом ошибок программирования, и клиентский код не может восстановиться от них последствий или обрабатывать их каким-либо образом. 
Такие проблемы включают в себя арифметические исключения, например, деление на ноль; исключения указателя, например, попытка получить доступ к объекту через null ссылку; и исключения индексации, например, попытка получить доступ к элементу массива по индексу, который является слишком большим или слишком маленьким.

why not specify runtime exceptions too?
    Runtime exceptions могут произойти в любом месте в программе, и они могут быть очень многочисленны. Необходимость добавлять Runtime exceptions в каждом объявлении метода снизит четкость/ясность программы. Поэтому компилятор не требует, чтобы вы ловили или указывали Runtime exceptions (хотя это можно делать).

One case where it is common practice to throw a RuntimeException is when the user calls a method incorrectly. 
For example, a method can check if one of its arguments is incorrectly null. If an argument is null, the method might throw a NullPointerException, which is an unchecked exception

!!! GUIDELINE: 
    - use CHECKED exception when a client can reasonably be expected to recover from an exception.
    - use UNCHECKED exception when a client cannot do anything to recover from the exception.
-----------------------------------------------------
Advantages of Exceptions - Преимущества исключений

1: Separating Error-Handling Code from "Regular" Code
2: Propagating Errors Up the Call Stack
3: Grouping and Differentiating Error Types

1: разделение кода обработки ошибок от «обычного» Кода
1) Исключения позволяют писать основной поток кода, а с исключениями иметь дело с в других местах.
[иначе, если писать код с учётом всех проверок на возможные ошибки - код станет громоздким, и основная/главная логика в нём затеряется. Поэтому чище будет выглядеть как в примере ниже.]
Обратите внимание, что исключения не избавляют вас от обнаружения, сообщения и обработки ошибок, но они помогут вам организовать работу более эффективно.

readFile {
    try {
        open the file;
        determine its size;
        allocate that much memory;
        read the file into memory;
        close the file;
    } catch (fileOpenFailed) {
       doSomething;
    } catch (sizeDeterminationFailed) {
        doSomething;
    } catch (memoryAllocationFailed) {
        doSomething;
    } catch (readFailed) {
        doSomething;
    } catch (fileCloseFailed) {
        doSomething;
    }
}

2: Продвижение ошибки вверх по стеку вызовов
2) Java ищет обработчиков исключений в обратном направлении через стек вызовов, т.е. ищет те методы, которые заинтересованы в решении конкретного исключения. 
Метод может пропустить обработку каких-либо исключений выброшеных в нём, позволяя другому методу ввыше по стеку вызовов поймать его. Следовательно, только методы, которые заинтересованы в ошибках, должны беспокоиться об обнаружении ошибок.
[иначе бы пришлось писать громоздкий код по передаче ошибок из 3го метода в 1й]

method1 {
    try {
        call method2;
    } catch (exception e) {
        doErrorProcessing;
    }
}
method2 throws exception {
    call method3;
}
method3 throws exception {
    call readFile;
}


3: Группировка и разделение ошибок по типу.
3) Поскольку все исключения являются объектами, группировка или категоризации исключений является естественным результатом иерархии классов. 
Пример группы связанных классов в Java -- это java.io.IOException и его потомки. IOException является наиболее общим типом/классом и представляет любой тип ошибки, которые могут возникнуть при выполнении операции ввода / вывода. 
Его потомки представляют более конкретные ошибки.

Метод может перехватить исключение, основываясь на его группе (или общем типе), путем указания любого из суперклассов исключения в catch statement.
Или может перехватить конкретное, очень специфическое исключение.
In most situations, you want exception handlers to be as specific as possible. 
The reason is that the first thing a handler must do is determine what type of exception occurred before it can decide on the best recovery strategy.
Exception handlers that are too general can make code more error-prone by catching and handling exceptions that weren't anticipated by the programmer and for which the handler was not intended.
----------------
Summary

Программа может использовать исключения, чтобы указать, что произошла ошибка. Чтобы бросить исключение, используйте оператор throw  и предоставить ему объект исключения - потомок Throwable - чтобы предоставить информацию о конкретной ошибке, которая произошла. 
Метод, который бросает uncaught, checked исключение, должен содержать throws выражение в своей декларации.

Программа может перехватывать исключения, используя комбинацию try, catch, and finally блоков.

1) Блок try идентифицирует блок кода, в котором может произойти исключение.
2) Блок catch идентифицирует блок кода, известный как обработчик исключений, который может обрабатывать конкретный тип исключения.
3) finally блок идентифицирует блок кода, который гарантированно выполнится, и это правильное место, чтобы закрыть файлы, восстанавливать ресурсы, и др. подчистки после кода из блока Try.

Выражение try{..} должно содержать по меньшей мере один блок catch или finally блок, и может иметь несколько блоков catch.

Класс объекта исключения указывает на тип выброшенного исключения. Объект исключения может содержать дополнительную информацию об ошибке, в том числе сообщения об ошибке. 
With exception chaining, исключение может указывать на вызвавшие его исключения, и так далее.