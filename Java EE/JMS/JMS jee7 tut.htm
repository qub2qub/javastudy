<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<title>JMS jee7 tut</title>
    <link rel="stylesheet" href="../../Guides/grey.css">
    <style type="text/css">
    	div.comment-container {
    		border: 1px solid #920000;
    	}
    </style>
</head>
<body>
<a href="https://docs.oracle.com/javaee/7/tutorial/jms-concepts.htm#BNCDQ">src</a>
<div id="JEETT00110" class="chapter"><a id="BNCDQ" name="BNCDQ" class="anchor"></a>
<h1 class="chapter"><span class="secnum">45</span> <a id="sthref2194" name="sthref2194" class="anchor"></a>Java Message Service Concepts</h1>
<p>This chapter provides an introduction to the Java Message Service (JMS) API, a Java API that allows applications to create, send, receive, and read messages using reliable, asynchronous, loosely coupled communication. It covers the following topics:</p>
<ul>
<li>
<p><a href="jms-concepts001.htm#BNCDR">Overview of the JMS API</a></p>
</li>
<li>
<p><a href="jms-concepts002.htm#BNCDX">Basic JMS API Concepts</a></p>
</li>
<li>
<p><a href="jms-concepts003.htm#BNCEH">The JMS API Programming Model</a></p>
</li>
<li>
<p><a href="jms-concepts004.htm#BNCFU">Using Advanced JMS Features</a></p>
</li>
<li>
<p><a href="jms-concepts005.htm#BNCGL">Using the JMS API in Java EE Applications</a></p>
</li>
<li>
<p><a href="jms-concepts006.htm#BNCGU">Further Information about JMS</a></p>
</li>
</ul>

<div id="JEETT00548" class="sect1 cye-lm-tag">
<h1 class="sect1 cye-lm-tag"><span class="secnum cye-lm-tag">45.1</span> <a id="sthref2195" name="sthref2195" class="anchor"></a>Overview of the JMS API</h1>
<p class="cye-lm-tag">This overview defines the concept of messaging, describes the JMS API and where it can be used, and explains how the JMS API works within the Java EE platform.</p>
<a id="BNCDS" name="BNCDS" class="anchor"></a>
<div id="JEETT01269" class="sect2">
<h2 class="sect2"><span class="secnum cye-lm-tag">45.1.1</span> <a id="sthref2196" name="sthref2196" class="anchor"></a><a id="sthref2197" name="sthref2197" class="anchor"></a>What Is Messaging?</h2>
<p class="cye-lm-tag">Messaging is a method of communication between software components or applications. A messaging system is a peer-to-peer facility: A messaging client can send messages to, and receive messages from, any other client. Each client connects to a messaging agent that provides facilities for creating, sending, receiving, and reading messages.</p>
<p class="cye-lm-tag">Messaging enables distributed communication that is <span class="glossaryterm cye-lm-tag">loosely coupled</span>. A component sends a message to a destination, and the recipient can retrieve the message from the destination. What makes the communication loosely coupled is that the destination is all that the sender and receiver have in common. The sender and the receiver do not have to be available at the same time in order to communicate. In fact, the sender does not need to know anything about the receiver; nor does the receiver need to know anything about the sender. The sender and the receiver need to know only which message format and which destination to use. In this respect, messaging differs from tightly coupled technologies, such as Remote Method Invocation (RMI), which require an application to know a remote application's methods.</p>
<p class="cye-lm-tag">Messaging also differs from electronic mail (email), which is a method of communication between people or between software applications and people. Messaging is used for communication between software applications or software components.</p>
</div>
<!-- class="sect2" -->
<a id="BNCDT" name="BNCDT" class="anchor"></a>
<div id="JEETT01270" class="sect2">
<h2 class="sect2"><span class="secnum cye-lm-tag">45.1.2</span> <a id="sthref2198" name="sthref2198" class="anchor"></a>What Is the JMS API?</h2>
<p class="cye-lm-tag">The Java Message Service is a Java API that allows applications to create, send, receive, and read messages. The JMS API defines a common set of interfaces and associated semantics that allow programs written in the Java programming language to communicate with other messaging implementations.</p>
<p class="cye-lm-tag">The JMS API minimizes the set of concepts a programmer must learn in order to use messaging products but provides enough features to support sophisticated messaging applications. It also strives to maximize the portability of JMS applications across JMS providers.</p>
<p class="cye-lm-tag">JMS enables communication that is not only loosely coupled but also</p>
<ul>
<li>
<p class="cye-lm-tag"><span class="bold cye-lm-tag">Asynchronous</span>: A receiving client does not have to receive messages at the same time the sending client sends them. The sending client can send them and go on to other tasks; the receiving client can receive them much later.</p>
</li>
<li>
<p class="cye-lm-tag"><span class="bold cye-lm-tag">Reliable</span>: A messaging provider that implements the JMS API can ensure that a message is delivered once and only once. Lower levels of reliability are available for applications that can afford to miss messages or to receive duplicate messages.</p>
</li>
</ul>
<p class="cye-lm-tag">The current version of the JMS specification is Version 2.0. You can download a copy of the specification from the Java Community Process website: <code dir="ltr"><a target="_blank" href="http://www.jcp.org/en/jsr/detail?id=343">http://www.jcp.org/en/jsr/detail?id=343</a></code>.</p>
</div>
<!-- class="sect2" -->
<a id="BNCDU" name="BNCDU" class="anchor"></a>
<div id="JEETT01271" class="sect2">
<h2 class="sect2"><span class="secnum cye-lm-tag">45.1.3</span> When Can You Use the JMS API?</h2>
<p class="cye-lm-tag">An enterprise application provider is likely to choose a messaging API over a tightly coupled API, such as a remote procedure call (RPC), under the following circumstances.</p>
<ul>
<li>
<p class="cye-lm-tag">The provider wants the components not to depend on information about other components' interfaces, so components can be easily replaced.</p>
</li>
<li>
<p class="cye-lm-tag">The provider wants the application to run whether or not all components are up and running simultaneously.</p>
</li>
<li>
<p class="cye-lm-tag">The application business model allows a component to send information to another and to continue to operate without receiving an immediate response.</p>
</li>
</ul>
<p class="cye-lm-tag">For example, components of an enterprise application for an automobile manufacturer can use the JMS API in situations like the following.</p>
<ul>
<li>
<p class="cye-lm-tag">The inventory component can send a message to the factory component when the inventory level for a product goes below a certain level so the factory can make more cars.</p>
</li>
<li>
<p class="cye-lm-tag">The factory component can send a message to the parts components so the factory can assemble the parts it needs.</p>
</li>
<li>
<p class="cye-lm-tag">The parts components in turn can send messages to their own inventory and order components to update their inventories and to order new parts from suppliers.</p>
</li>
<li>
<p class="cye-lm-tag">Both the factory and the parts components can send messages to the accounting component to update budget numbers.</p>
</li>
<li>
<p class="cye-lm-tag">The business can publish updated catalog items to its sales force.</p>
</li>
</ul>
<p class="cye-lm-tag">Using messaging for these tasks allows the various components to interact with one another efficiently, without tying up network or other resources. <a href="#BNCDV">Figure 45-1</a> illustrates how this simple example might work.</p>
<div id="JEETT00046" class="figure"><a id="BNCDV" name="BNCDV" class="anchor"></a>
<p class="titleinfigure cye-lm-tag">Figure 45-1 Messaging in an Enterprise Application</p>
<img width="366" height="101" src="img/jeett_dt_026.png" alt="Description of Figure 45-1 follows" longdesc="img_text/jeett_dt_026.htm"><br>
<a id="sthref2199" name="sthref2199" href="img_text/jeett_dt_026.htm">Description of "Figure 45-1 Messaging in an Enterprise Application"</a><br>
<br></div>
<!-- class="figure" -->
<p class="cye-lm-tag">Manufacturing is only one example of how an enterprise can use the JMS API. Retail applications, financial services applications, health services applications, and many others can make use of messaging.</p>
</div>
<!-- class="sect2" -->
<a id="BNCDW" name="BNCDW" class="anchor"></a>
<div id="JEETT01272" class="sect2">
<h2 class="sect2"><span class="secnum cye-lm-tag">45.1.4</span> <a id="sthref2200" name="sthref2200" class="anchor"></a><a id="sthref2201" name="sthref2201" class="anchor"></a>How Does the JMS API Work with the Java EE Platform?</h2>
<p class="cye-lm-tag">When the JMS API was first introduced, its most important purpose was to allow Java applications to access existing messaging-oriented middleware (MOM) systems. Since that time, many vendors have adopted and implemented the JMS API, so a JMS product can now provide a complete messaging capability for an enterprise.</p>
<p class="cye-lm-tag">The JMS API is an integral part of the Java EE platform, and application developers can use messaging with Java EE components. JMS 2.0 is part of the Java EE 7 release.</p>
<p class="cye-lm-tag">The JMS API in the Java EE platform has the following features.</p>
<ul>
<li>
<p class="cye-lm-tag">Application clients, Enterprise JavaBeans (EJB) components, and web components can send or synchronously receive a JMS message. Application clients can in addition set a message listener that allows JMS messages to be delivered to it asynchronously by being notified when a message is available.</p>
</li>
<li>
<p class="cye-lm-tag">Message-driven beans, which are a kind of enterprise bean, enable the asynchronous consumption of messages in the EJB container. An application server typically pools message-driven beans to implement concurrent processing of messages.</p>
</li>
<li>
<p class="cye-lm-tag">Message send and receive operations can participate in Java Transaction API (JTA) transactions, which allow JMS operations and database accesses to take place within a single transaction.</p>
</li>
</ul>
<p class="cye-lm-tag">The JMS API enhances the other parts of the Java EE platform by simplifying enterprise development, allowing loosely coupled, reliable, asynchronous interactions among Java EE components and legacy systems capable of messaging. A developer can easily add new behavior to a Java EE application that has existing business events by adding a new message-driven bean to operate on specific business events. The Java EE platform, moreover, enhances the JMS API by providing support for JTA transactions and allowing for the concurrent consumption of messages. For more information, see the Enterprise JavaBeans specification, v3.2.</p>
<p class="cye-lm-tag">The JMS provider can be integrated with the application server using the Java EE Connector architecture. You access the JMS provider through a resource adapter. This capability allows vendors to create JMS providers that can be plugged in to multiple application servers, and it allows application servers to support multiple JMS providers. For more information, see the Java EE Connector architecture specification, v1.7.</p>
</div>
<!-- class="sect2" --></div>
</div>

<br><hr>
<div id="JEETT00549" class="sect1">
<h1 class="sect1"><span class="secnum">45.2</span> <a id="sthref2202" name="sthref2202" class="anchor"></a>Basic JMS API Concepts</h1>
<p>This section introduces the most basic JMS API concepts, the ones you must know to get started writing simple application clients that use the JMS API.</p>
<p>The next section introduces the JMS API programming model. Later sections cover more advanced concepts, including the ones you need in order to write applications that use message-driven beans.</p>
<a id="BNCDY" name="BNCDY" class="anchor"></a>
<div id="JEETT01273" class="sect2">
<h2 class="sect2"><span class="secnum">45.2.1</span> <a id="sthref2203" name="sthref2203" class="anchor"></a>JMS API Architecture</h2>
<p>A JMS application is composed of the following parts.</p>
<ul>
<li>
<p><a id="sthref2204" name="sthref2204" class="anchor"></a>A <span class="glossaryterm">JMS provider</span> is a messaging system that implements the JMS interfaces and provides administrative and control features. An implementation of the Java EE platform that supports the full profile includes a JMS provider.</p>
</li>
<li>
<p><span class="glossaryterm">JMS clients</span> are the programs or components, written in the Java programming language, that produce and consume messages. Any Java EE application component can act as a JMS client.</p>
<p>Java SE applications can also act as JMS clients; the <span class="italic">Message Queue Developer's Guide for Java Clients</span> in the GlassFish Server documentation (<code dir="ltr"><a target="_blank" href="https://glassfish.java.net/docs/">https://glassfish.java.net/docs/</a></code>) explains how to make this work.</p>
</li>
<li>
<p><a id="sthref2205" name="sthref2205" class="anchor"></a><span class="glossaryterm">Messages</span> are the objects that communicate information between JMS clients.</p>
</li>
<li>
<p><a id="sthref2206" name="sthref2206" class="anchor"></a><span class="glossaryterm">Administered objects</span> are JMS objects configured for the use of clients. The two kinds of JMS administered objects are destinations and connection factories, described in <a href="jms-concepts003.htm#BNCEJ">JMS Administered Objects</a>. An administrator can create objects that are available to all applications that use a particular installation of GlassFish Server; alternatively, a developer can use annotations to create objects that are specific to a particular application.</p>
</li>
</ul>
<p><a href="#BNCDZ">Figure 45-2</a> illustrates the way these parts interact. Administrative tools or annotations allow you to bind destinations and connection factories into a JNDI namespace. A JMS client can then use resource injection to access the administered objects in the namespace and then establish a logical connection to the same objects through the JMS provider.</p>
<div id="JEETT00047" class="figure"><a id="BNCDZ" name="BNCDZ" class="anchor"></a>
<p class="titleinfigure">Figure 45-2 JMS API Architecture</p>
<img width="398" height="164" src="img/jeett_dt_027.png" alt="Description of Figure 45-2 follows" longdesc="img_text/jeett_dt_027.htm"><br>
<a id="sthref2207" name="sthref2207" href="img_text/jeett_dt_027.htm">Description of "Figure 45-2 JMS API Architecture"</a><br>
<br></div>
<!-- class="figure" --></div>
<!-- class="sect2" -->
<a id="BNCEA" name="BNCEA" class="anchor"></a>
<div id="JEETT01274" class="sect2">
<h2 class="sect2"><span class="secnum">45.2.2</span> <a id="sthref2208" name="sthref2208" class="anchor"></a><a id="sthref2209" name="sthref2209" class="anchor"></a>Messaging Styles</h2>
<p>Before the JMS API existed, most messaging products supported either the point-to-point or the publish/subscribe style of messaging. The JMS specification defines compliance for each style. A JMS provider must implement both styles, and the JMS API provides interfaces that are specific to each. The following subsections describe these messaging styles.</p>
<p>The JMS API, however, makes it unnecessary to use only one of the two styles. It allows you to use the same code to send and receive messages using either the PTP or the pub/sub style. The destinations you use remain specific to one style, and the behavior of the application will depend in part on whether you are using a queue or a topic. However, the code itself can be common to both styles, making your applications flexible and reusable. This tutorial describes and illustrates this coding approach, using the greatly simplified API provided by JMS 2.0.</p>
<a id="BNCEB" name="BNCEB" class="anchor"></a>
<div id="JEETT00803" class="sect3">
<h3 class="sect3"><span class="secnum">45.2.2.1</span> <a id="sthref2210" name="sthref2210" class="anchor"></a><a id="sthref2211" name="sthref2211" class="anchor"></a>Point-to-Point Messaging Style</h3>
<p>A <span class="glossaryterm">point-to-point</span> (PTP) product or application is built on the concept of message <span class="glossaryterm">queues</span>, senders, and receivers. Each message is addressed to a specific queue, and receiving clients extract messages from the queues established to hold their messages. Queues retain all messages sent to them until the messages are consumed or expire.</p>
<p>PTP messaging, illustrated in <a href="#BNCEC">Figure 45-3</a>, has the following characteristics.</p>
<ul>
<li>
<p>Each message has only one consumer.</p>
</li>
<li>
<p>The receiver can fetch the message whether or not it was running when the client sent the message.</p>
</li>
</ul>
<div id="JEETT00048" class="figure"><a id="BNCEC" name="BNCEC" class="anchor"></a>
<p class="titleinfigure">Figure 45-3 Point-to-Point Messaging</p>
<img width="407" height="150" src="img/jeett_dt_028.png" alt="Description of Figure 45-3 follows" longdesc="img_text/jeett_dt_028.htm"><br>
<a id="sthref2212" name="sthref2212" href="img_text/jeett_dt_028.htm">Description of "Figure 45-3 Point-to-Point Messaging"</a><br>
<br></div>
<!-- class="figure" -->
<p>Use PTP messaging when every message you send must be processed successfully by one consumer.</p>
</div>
<!-- class="sect3" -->
<a id="BNCED" name="BNCED" class="anchor"></a>
<div id="JEETT00804" class="sect3">
<h3 class="sect3"><span class="secnum">45.2.2.2</span> <a id="sthref2213" name="sthref2213" class="anchor"></a><a id="sthref2214" name="sthref2214" class="anchor"></a>Publish/Subscribe Messaging Style</h3>
<p>In a <span class="glossaryterm">publish/subscribe</span> (pub/sub) product or application, clients address messages to a <span class="glossaryterm">topic</span>, which functions somewhat like a bulletin board. Publishers and subscribers can dynamically publish or subscribe to the topic. The system takes care of distributing the messages arriving from a topic's multiple publishers to its multiple subscribers. Topics retain messages only as long as it takes to distribute them to subscribers.</p>
<p>With pub/sub messaging, it is important to distinguish between the consumer that subscribes to a topic (the subscriber) and the subscription that is created. The consumer is a JMS object within an application, while the subscription is an entity within the JMS provider. Normally, a topic can have many consumers, but a subscription has only one subscriber. It is possible, however, to create shared subscriptions; see <a href="jms-concepts003.htm#BABJCIGJ">Creating Shared Subscriptions</a> for details. See <a href="jms-concepts003.htm#BABEEJJJ">Consuming Messages from Topics</a> for details on the semantics of pub/sub messaging.</p>
<p>Pub/sub messaging has the following characteristics.</p>
<ul>
<li>
<p>Each message can have multiple consumers.</p>
</li>
<li>
<p>A client that subscribes to a topic can consume only messages sent <span class="italic">after</span> the client has created a subscription, and the consumer must continue to be active in order for it to consume messages.</p>
<p>The JMS API relaxes this requirement to some extent by allowing applications to create <span class="glossaryterm">durable subscriptions</span>, which receive messages sent while the consumers are not active. Durable subscriptions provide the flexibility and reliability of queues but still allow clients to send messages to many recipients. For more information about durable subscriptions, see <a href="jms-concepts003.htm#BNCGD">Creating Durable Subscriptions</a>.</p>
</li>
</ul>
<p>Use pub/sub messaging when each message can be processed by any number of consumers (or none). <a href="#BNCEE">Figure 45-4</a> illustrates pub/sub messaging.</p>
<div id="JEETT00049" class="figure"><a id="BNCEE" name="BNCEE" class="anchor"></a>
<p class="titleinfigure">Figure 45-4 Publish/Subscribe Messaging</p>
<img width="425" height="191" src="img/jeett_dt_029.png" alt="Description of Figure 45-4 follows" longdesc="img_text/jeett_dt_029.htm"><br>
<a id="sthref2215" name="sthref2215" href="img_text/jeett_dt_029.htm">Description of "Figure 45-4 Publish/Subscribe Messaging"</a><br>
<br></div>
<!-- class="figure" --></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="BNCEG" name="BNCEG" class="anchor"></a>
<div id="JEETT01275" class="sect2">
<h2 class="sect2"><span class="secnum">45.2.3</span> <a id="sthref2216" name="sthref2216" class="anchor"></a>Message Consumption</h2>
<p>Messaging products are inherently asynchronous: There is no fundamental timing dependency between the production and the consumption of a message. However, the JMS specification uses this term in a more precise sense. Messages can be consumed in either of two ways.</p>
<ul>
<li>
<p><a id="sthref2217" name="sthref2217" class="anchor"></a><a id="sthref2218" name="sthref2218" class="anchor"></a><span class="bold">Synchronously</span>: A consumer explicitly fetches the message from the destination by calling the <code dir="ltr">receive</code> method. The <code dir="ltr">receive</code> method can block until a message arrives or can time out if a message does not arrive within a specified time limit.</p>
</li>
<li>
<p><a id="sthref2219" name="sthref2219" class="anchor"></a><a id="sthref2220" name="sthref2220" class="anchor"></a><span class="bold">Asynchronously</span>: An application client or a Java SE client can register a <span class="glossaryterm">message listener</span> with a consumer. A message listener is similar to an event listener. Whenever a message arrives at the destination, the JMS provider delivers the message by calling the listener's <code dir="ltr">onMessage</code> method, which acts on the contents of the message. In a Java EE application, a message-driven bean serves as a message listener (it too has an <code dir="ltr">onMessage</code> method), but a client does not need to register it with a consumer.</p>
</li>
</ul>
</div>
<!-- class="sect2" --></div>
<br><hr>
<div id="JEETT00550" class="sect1">
<h1 class="sect1"><span class="secnum">45.3</span> <a id="sthref2221" name="sthref2221" class="anchor"></a><a id="sthref2222" name="sthref2222" class="anchor"></a>The JMS API Programming Model</h1>
<p>The basic building blocks of a JMS application are</p>
<ul>
<li>
<p>Administered objects: connection factories and destinations</p>
</li>
<li>
<p>Connections</p>
</li>
<li>
<p>Sessions</p>
</li>
<li>
<p><code dir="ltr">JMSContext</code> objects, which combine a connection and a session in one object</p>
</li>
<li>
<p>Message producers</p>
</li>
<li>
<p>Message consumers</p>
</li>
<li>
<p>Messages</p>
</li>
</ul>
<p><a href="#BNCEI">Figure 45-5</a> shows how all these objects fit together in a JMS client application.</p>
<div id="JEETT00050" class="figure"><a id="BNCEI" name="BNCEI" class="anchor"></a>
<p class="titleinfigure">Figure 45-5 The JMS API Programming Model</p>
<img width="498" height="390" src="img/jeett_dt_030.png" alt="Description of Figure 45-5 follows" longdesc="img_text/jeett_dt_030.htm"><br>
<a id="sthref2223" name="sthref2223" href="img_text/jeett_dt_030.htm">Description of "Figure 45-5 The JMS API Programming Model"</a><br>
<br></div>
<!-- class="figure" -->
<p>JMS also provides queue browsers, objects that allow an application to browse messages on a queue.</p>
<p>This section describes all these objects briefly and provides sample commands and code snippets that show how to create and use the objects. The last subsection briefly describes JMS API exception handling.</p>
<p>Examples that show how to combine all these objects in applications appear in <a href="jms-examples.htm#BNCGV">Chapter 46, "Java Message Service Examples,"</a> beginning with <a href="jms-examples002.htm#BNCFA">Writing Simple JMS Applications</a>. For more detail, see the JMS API documentation, part of the Java EE API documentation.</p>
<a id="BNCEJ" name="BNCEJ" class="anchor"></a>
<div id="JEETT01276" class="sect2">
<h2 class="sect2"><span class="secnum">45.3.1</span> <a id="sthref2224" name="sthref2224" class="anchor"></a><a id="sthref2225" name="sthref2225" class="anchor"></a><a id="sthref2226" name="sthref2226" class="anchor"></a><a id="sthref2227" name="sthref2227" class="anchor"></a>JMS Administered Objects</h2>
<p>Two parts of a JMS application, destinations and connection factories, are commonly maintained administratively rather than programmatically. The technology underlying these objects is likely to be very different from one implementation of the JMS API to another. Therefore, the management of these objects belongs with other administrative tasks that vary from provider to provider.</p>
<p>JMS clients access administered objects through interfaces that are portable, so a client application can run with little or no change on more than one implementation of the JMS API. Ordinarily, an administrator configures administered objects in a JNDI namespace, and JMS clients then access them by using resource injection.</p>
<p>With GlassFish Server, you can use the <code dir="ltr">asadmin create-jms-resource</code> command or the Administration Console to create JMS administered objects in the form of connector resources. You can also specify the resources in a file named <code dir="ltr">glassfish-resources.xml</code> that you can bundle with an application.</p>
<p>NetBeans IDE provides a wizard that allows you to create JMS resources for GlassFish Server. See <a href="jms-examples002.htm#GKTJS">Creating JMS Administered Objects</a> for details.</p>
<p>The Java EE platform specification allows a developer to create administered objects using annotations or deployment descriptor elements. Objects created in this way are specific to the application for which they are created. See <a href="jms-concepts005.htm#BABHFBDH">Creating Resources for Java EE Applications</a> for details. Definitions in a deployment descriptor override those specified by annotations.</p>
<a id="BNCEK" name="BNCEK" class="anchor"></a>
<div id="JEETT00806" class="sect3">
<h3 class="sect3"><span class="secnum">45.3.1.1</span> <a id="sthref2228" name="sthref2228" class="anchor"></a><a id="sthref2229" name="sthref2229" class="anchor"></a>JMS Connection Factories</h3>
<p>A <span class="glossaryterm">connection factory</span> is the object a client uses to create a connection to a provider. A connection factory encapsulates a set of connection configuration parameters that has been defined by an administrator. Each connection factory is an instance of the <code dir="ltr">ConnectionFactory</code>, <code dir="ltr">QueueConnectionFactory</code>, or <code dir="ltr">TopicConnectionFactory</code> interface. To learn how to create connection factories, see <a href="jms-examples002.htm#GKTJS">Creating JMS Administered Objects</a>.</p>
<p><a id="sthref2230" name="sthref2230" class="anchor"></a><a id="sthref2231" name="sthref2231" class="anchor"></a>At the beginning of a JMS client program, you usually inject a connection factory resource into a <code dir="ltr">ConnectionFactory</code> object. A Java EE server must provide a JMS connection factory with the logical JNDI name <code dir="ltr">java:comp/DefaultJMSConnectionFactory</code>. The actual JNDI name will be implementation-specific.</p>
<p>For example, the following code fragment looks up the default JMS connection factory and assigns it to a <code dir="ltr">ConnectionFactory</code> object:</p>
<pre xml:space="preserve" class="oac_no_warn" dir="ltr">@Resource(lookup = "java:comp/DefaultJMSConnectionFactory")
private static ConnectionFactory connectionFactory;
</pre></div>
<!-- class="sect3" -->
<a id="BNCEL" name="BNCEL" class="anchor"></a>
<div id="JEETT00807" class="sect3">
<h3 class="sect3"><span class="secnum">45.3.1.2</span> <a id="sthref2232" name="sthref2232" class="anchor"></a><a id="sthref2233" name="sthref2233" class="anchor"></a><a id="sthref2234" name="sthref2234" class="anchor"></a><a id="sthref2235" name="sthref2235" class="anchor"></a><a id="sthref2236" name="sthref2236" class="anchor"></a><a id="sthref2237" name="sthref2237" class="anchor"></a><a id="sthref2238" name="sthref2238" class="anchor"></a><a id="sthref2239" name="sthref2239" class="anchor"></a>JMS Destinations</h3>
<p>A <span class="glossaryterm">destination</span> is the object a client uses to specify the target of messages it produces and the source of messages it consumes. In the PTP messaging style, destinations are called queues. In the pub/sub messaging style, destinations are called topics. A JMS application can use multiple queues or topics (or both). To learn how to create destination resources, see <a href="jms-examples002.htm#GKTJS">Creating JMS Administered Objects</a>.</p>
<p>To create a destination using GlassFish Server, you create a JMS destination resource that specifies a JNDI name for the destination.</p>
<p>In the GlassFish Server implementation of JMS, each destination resource refers to a physical destination. You can create a physical destination explicitly, but if you do not, the Application Server creates it when it is needed and deletes it when you delete the destination resource.</p>
<p><a id="sthref2240" name="sthref2240" class="anchor"></a>In addition to injecting a connection factory resource into a client program, you usually inject a destination resource. Unlike connection factories, destinations are specific to either the PTP or pub/sub messaging style. To create an application that allows you to use the same code for both topics and queues, you assign the destination to a <code dir="ltr">Destination</code> object.</p>
<p><a id="sthref2241" name="sthref2241" class="anchor"></a>The following code specifies two resources, a queue and a topic. The resource names are mapped to destination resources created in the JNDI namespace:</p>
<pre xml:space="preserve" class="oac_no_warn" dir="ltr">@Resource(lookup = "jms/MyQueue")
private static Queue queue;

@Resource(lookup = "jms/MyTopic")
private static Topic topic;
</pre>
<p>In a Java EE application, JMS administered objects are normally placed in the <code dir="ltr">jms</code> naming subcontext.<a id="sthref2242" name="sthref2242" class="anchor"></a></p>
<p>With the common interfaces, you can mix or match connection factories and destinations. That is, in addition to using the <code dir="ltr">ConnectionFactory</code> interface, you can inject a <code dir="ltr">QueueConnectionFactory</code> resource and use it with a <code dir="ltr">Topic</code>, and you can inject a <code dir="ltr">TopicConnectionFactory</code> resource and use it with a <code dir="ltr">Queue</code>. The behavior of the application will depend on the kind of destination you use and not on the kind of connection factory you use.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="BNCEM" name="BNCEM" class="anchor"></a>
<div id="JEETT01277" class="sect2">
<h2 class="sect2"><span class="secnum">45.3.2</span> <a id="sthref2243" name="sthref2243" class="anchor"></a><a id="sthref2244" name="sthref2244" class="anchor"></a>Connections</h2>
<p>A <span class="glossaryterm">connection</span> encapsulates a virtual connection with a JMS provider. For example, a connection could represent an open TCP/IP socket between a client and a provider service daemon. You use a connection to create one or more sessions.</p>
<div class="infoboxnote">
<p class="notep1">Note:</p>
In the Java EE platform, the ability to create multiple sessions from a single connection is limited to application clients. In web and enterprise bean components, a connection can create no more than one session.</div>
<p>You normally create a connection by creating a <code dir="ltr">JMSContext</code> object. See <a href="#BABGDFEA">JMSContext Objects</a> for details.</p>
</div>
<!-- class="sect2" -->
<a id="BNCEN" name="BNCEN" class="anchor"></a>
<div id="JEETT01278" class="sect2">
<h2 class="sect2"><span class="secnum">45.3.3</span> <a id="sthref2245" name="sthref2245" class="anchor"></a><a id="sthref2246" name="sthref2246" class="anchor"></a>Sessions</h2>
<p>A <span class="glossaryterm">session</span> is a single-threaded context for producing and consuming messages.</p>
<p>You normally create a session (as well as a connection) by creating a <code dir="ltr">JMSContext</code> object. See <a href="#BABGDFEA">JMSContext Objects</a> for details. You use sessions to create message producers, message consumers, messages, queue browsers, and temporary destinations.</p>
<p>Sessions serialize the execution of message listeners; for details, see <a href="#BNCEQ">JMS Message Listeners</a>.</p>
<p>A session provides a transactional context with which to group a set of sends and receives into an atomic unit of work. For details, see <a href="jms-concepts004.htm#BNCGH">Using JMS Local Transactions</a>.</p>
</div>
<!-- class="sect2" -->
<a id="BABGDFEA" name="BABGDFEA" class="anchor"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h2 class="sect2"><span class="secnum">45.3.4</span> <a id="sthref2247" name="sthref2247" class="anchor"></a><a id="sthref2248" name="sthref2248" class="anchor"></a>JMSContext Objects</h2>
<p>A <code dir="ltr">JMSContext</code> object combines a connection and a session in a single object. That is, it provides both an active connection to a JMS provider and a single-threaded context for sending and receiving messages.</p>
<p>You use the <code dir="ltr">JMSContext</code> to create the following objects:</p>
<ul>
<li>
<p>Message producers</p>
</li>
<li>
<p>Message consumers</p>
</li>
<li>
<p>Messages</p>
</li>
<li>
<p>Queue browsers</p>
</li>
<li>
<p>Temporary queues and topics (see <a href="jms-concepts004.htm#BNCGB">Creating Temporary Destinations</a>)</p>
</li>
</ul>
<p>You can create a <code dir="ltr">JMSContext</code> in a <code dir="ltr">try</code>-with-resources block.</p>
<p>To create a <code dir="ltr">JMSContext</code>, call the <code dir="ltr">createContext</code> method on the connection factory:</p>
<pre xml:space="preserve" class="oac_no_warn" dir="ltr">JMSContext context = connectionFactory.createContext();
</pre>
<p>When called with no arguments from an application client or a Java SE client, or from the Java EE web or EJB container when there is no active JTA transaction in progress, the <code dir="ltr">createContext</code> method creates a non-transacted session with an acknowledgment mode of <code dir="ltr">JMSContext.AUTO_ACKNOWLEDGE</code>. When called with no arguments from the web or EJB container when there is an active JTA transaction in progress, the <code dir="ltr">createContext</code> method creates a transacted session. For information about the way JMS transactions work in Java EE applications, see <a href="jms-concepts005.htm#BNCGL">Using the JMS API in Java EE Applications</a>.</p>
<p>From an application client or a Java SE client, you can also call the <code dir="ltr">createContext</code> method with the argument <code dir="ltr">JMSContext.SESSION_TRANSACTED</code> to create a transacted session:</p>
<pre xml:space="preserve" class="oac_no_warn" dir="ltr">JMSContext context = 
        connectionFactory.createContext(JMSContext.SESSION_TRANSACTED);
</pre>
<p>The session uses local transactions; see <a href="jms-concepts004.htm#BNCGH">Using JMS Local Transactions</a> for details.</p>
<p>Alternatively, you can specify a non-default acknowledgment mode; see <a href="jms-concepts004.htm#BNCFW">Controlling Message Acknowledgment</a> for more information.</p>
<p>When you use a <code dir="ltr">JMSContext</code>, message delivery normally begins as soon as you create a consumer. See <a href="#BNCEP">JMS Message Consumers</a> for more information.</p>
<p>If you create a <code dir="ltr">JMSContext</code> in a <code dir="ltr">try</code>-with-resources block, you do not need to close it explicitly. It will be closed when the <code dir="ltr">try</code> block comes to an end. Make sure that your application completes all its JMS activity within the <code dir="ltr">try</code>-with-resources block. If you do not use a <code dir="ltr">try</code>-with-resources block, you must call the <code dir="ltr">close</code> method on the <code dir="ltr">JMSContext</code> to close the connection when the application has finished its work.</p>
</div>
<!-- class="sect2" -->
<a id="BNCEO" name="BNCEO" class="anchor"></a>
<div id="JEETT01279" class="sect2">
<h2 class="sect2"><span class="secnum">45.3.5</span> <a id="sthref2249" name="sthref2249" class="anchor"></a><a id="sthref2250" name="sthref2250" class="anchor"></a><a id="sthref2251" name="sthref2251" class="anchor"></a>JMS Message Producers</h2>
<p>A <span class="glossaryterm">message producer</span> is an object that is created by a <code dir="ltr">JMSContext</code> or a session and used for sending messages to a destination. A message producer created by a <code dir="ltr">JMSContext</code> implements the <code dir="ltr">JMSProducer</code> interface. You could create it this way:</p>
<pre xml:space="preserve" class="oac_no_warn" dir="ltr">try (JMSContext context = connectionFactory.createContext();) {
    JMSProducer producer = context.createProducer();
    ...
</pre>
<p>However, a <code dir="ltr">JMSProducer</code> is a lightweight object that does not consume significant resources. For this reason, you do not need to save the <code dir="ltr">JMSProducer</code> in a variable; you can create a new one each time you send a message. You send messages to a specific destination by using the <code dir="ltr">send</code> method. For example:</p>
<pre xml:space="preserve" class="oac_no_warn" dir="ltr">context.createProducer().send(dest, message);
</pre>
<p>You can create the message in a variable before sending it, as shown here, or you can create it within the <code dir="ltr">send</code> call. See <a href="#BNCES">JMS Messages</a> for more information.</p>
</div>
<!-- class="sect2" -->
<a id="BNCEP" name="BNCEP" class="anchor"></a>
<div id="JEETT01280" class="sect2">
<h2 class="sect2"><span class="secnum">45.3.6</span> <a id="sthref2252" name="sthref2252" class="anchor"></a><a id="sthref2253" name="sthref2253" class="anchor"></a>JMS Message Consumers</h2>
<p>A <span class="glossaryterm">message consumer</span> is an object that is created by a <code dir="ltr">JMSContext</code> or a session and used for receiving messages sent to a destination. A message producer created by a <code dir="ltr">JMSContext</code> implements the <code dir="ltr">JMSConsumer</code> interface. The simplest way to create a message consumer is to use the <code dir="ltr">JMSContext.createConsumer</code> method:</p>
<pre xml:space="preserve" class="oac_no_warn" dir="ltr">try (JMSContext context = connectionFactory.createContext();) {
    JMSConsumer consumer = context.createConsumer(dest);
    ...
</pre>
<p>A message consumer allows a JMS client to register interest in a destination with a JMS provider. The JMS provider manages the delivery of messages from a destination to the registered consumers of the destination.</p>
<p>When you use a <code dir="ltr">JMSContext</code> to create a message consumer, message delivery begins as soon as you have created the consumer. You can disable this behavior by calling <code dir="ltr">setAutoStart(false)</code> when you create the <code dir="ltr">JMSContext</code> and then calling the <code dir="ltr">start</code> method explicitly to start message delivery. If you want to stop message delivery temporarily without closing the connection, you can call the <code dir="ltr">stop</code> method; to restart message delivery, call <code dir="ltr">start</code>.</p>
<p>You use the <code dir="ltr">receive</code> method to consume a message synchronously. You can use this method at any time after you create the consumer.</p>
<p>If you specify no arguments or an argument of <code dir="ltr">0</code>, the method blocks indefinitely until a message arrives:</p>
<pre xml:space="preserve" class="oac_no_warn" dir="ltr">Message m = consumer.receive();
Message m = consumer.receive(0);
</pre>
<p>For a simple client, this may not matter. But if it is possible that a message might not be available, use a synchronous receive with a timeout: Call the <code dir="ltr">receive</code> method with a timeout argument greater than <code dir="ltr">0</code>. One second is a recommended timeout value:</p>
<pre xml:space="preserve" class="oac_no_warn" dir="ltr">Message m = consumer.receive(1000); // time out after a second
</pre>
<p>To enable asynchronous message delivery from an application client or a Java SE client, you use a message listener, as described in the next section.</p>
<p>You can use the <code dir="ltr">JMSContext.createDurableConsumer</code> method to create a durable topic subscription. This method is valid only if you are using a topic. For details, see <a href="#BNCGD">Creating Durable Subscriptions</a>. For topics, you can also create shared consumers; see <a href="#BABJCIGJ">Creating Shared Subscriptions</a>.</p>
<a id="BNCEQ" name="BNCEQ" class="anchor"></a>
<div id="JEETT00808" class="sect3">
<h3 class="sect3"><span class="secnum">45.3.6.1</span> <a id="sthref2254" name="sthref2254" class="anchor"></a><a id="sthref2255" name="sthref2255" class="anchor"></a><a id="sthref2256" name="sthref2256" class="anchor"></a>JMS Message Listeners</h3>
<p>A message listener is an object that acts as an asynchronous event handler for messages. This object implements the <code dir="ltr">MessageListener</code> interface, which contains one method, <code dir="ltr">onMessage</code>. In the <code dir="ltr">onMessage</code> method, you define the actions to be taken when a message arrives.</p>
<p>From an application client or a Java SE client, you register the message listener with a specific message consumer by using the <code dir="ltr">setMessageListener</code> method. For example, if you define a class named <code dir="ltr">Listener</code> that implements the <code dir="ltr">MessageListener</code> interface, you can register the message listener as follows:</p>
<pre xml:space="preserve" class="oac_no_warn" dir="ltr">Listener myListener = new Listener();
consumer.setMessageListener(myListener);
</pre>
<p>When message delivery begins, the JMS provider automatically calls the message listener's <code dir="ltr">onMessage</code> method whenever a message is delivered. The <code dir="ltr">onMessage</code> method takes one argument of type <code dir="ltr">Message</code>, which your implementation of the method can cast to another message subtype as needed (see <a href="#BNCEW">Message Bodies</a>).</p>
<p>In the Java EE web or EJB container, you use message-driven beans for asynchronous message delivery. A message-driven bean also implements the <code dir="ltr">MessageListener</code> interface and contains an <code dir="ltr">onMessage</code> method. For details, see <a href="jms-concepts005.htm#BNCGQ">Using Message-Driven Beans to Receive Messages Asynchronously</a>.</p>
<p>Your <code dir="ltr">onMessage</code> method should handle all exceptions. Throwing a <code dir="ltr">RuntimeException</code> is considered a programming error.</p>
<p>For a simple example of the use of a message listener, see <a href="jms-examples002.htm#BNCFH">Using a Message Listener for Asynchronous Message Delivery</a>. <a href="jms-examples.htm#BNCGV">Chapter 46, "Java Message Service Examples,"</a> contains several more examples of message listeners and message-driven beans.</p>
</div>
<!-- class="sect3" -->
<a id="BNCER" name="BNCER" class="anchor"></a>
<div id="JEETT00809" class="sect3">
<h3 class="sect3"><span class="secnum">45.3.6.2</span> <a id="sthref2257" name="sthref2257" class="anchor"></a>JMS Message Selectors</h3>
<p>If your messaging application needs to filter the messages it receives, you can use a JMS message selector, which allows a message consumer for a destination to specify the messages that interest it. Message selectors assign the work of filtering messages to the JMS provider rather than to the application. For an example of an application that uses a message selector, see <a href="jms-examples007.htm#BNCGW">Sending Messages from a Session Bean to an MDB</a>.</p>
<p>A message selector is a <code dir="ltr">String</code> that contains an expression. The syntax of the expression is based on a subset of the SQL92 conditional expression syntax. The message selector in the example selects any message that has a <code dir="ltr">NewsType</code> property that is set to the value <code dir="ltr">'Sports'</code> or <code dir="ltr">'Opinion'</code>:</p>
<pre xml:space="preserve" class="oac_no_warn" dir="ltr">NewsType = 'Sports' OR NewsType = 'Opinion'
</pre>
<p>The <code dir="ltr">createConsumer</code> and <code dir="ltr">createDurableConsumer</code> methods, as well as the methods for creating shared consumers, allow you to specify a message selector as an argument when you create a message consumer.</p>
<p>The message consumer then receives only messages whose headers and properties match the selector. (See <a href="#BNCET">Message Headers</a> and <a href="#BNCEV">Message Properties</a>.) A message selector cannot select messages on the basis of the content of the message body.</p>
</div>
<!-- class="sect3" -->
<a id="BABEEJJJ" name="BABEEJJJ" class="anchor"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h3 class="sect3"><span class="secnum">45.3.6.3</span> Consuming Messages from Topics</h3>
<p>The semantics of consuming messages from topics are more complex than the semantics of consuming messages from queues.</p>
<p>An application consumes messages from a topic by creating a subscription on that topic and creating a consumer on that subscription. Subscriptions may be durable or nondurable, and they may be shared or unshared.</p>
<p>A subscription may be thought of as an entity within the JMS provider itself, whereas a consumer is a JMS object within the application.</p>
<p>A subscription will receive a copy of every message that is sent to the topic after the subscription is created, unless a message selector is specified. If a message selector is specified, only those messages whose properties match the message selector will be added to the subscription.</p>
<p>Unshared subscriptions are restricted to a single consumer. In this case, all the messages in the subscription are delivered to that consumer. Shared subscriptions allow multiple consumers. In this case, each message in the subscription is delivered to only one consumer. JMS does not define how messages are distributed between multiple consumers on the same subscription.</p>
<p>Subscriptions may be durable or nondurable.</p>
<p>A nondurable subscription exists only as long as there is an active consumer on the subscription. This means that any messages sent to the topic will be added to the subscription only while a consumer exists and is not closed.</p>
<p>A nondurable subscription may be either unshared or shared.</p>
<ul>
<li>
<p>An unshared nondurable subscription does not have a name and may have only a single consumer object associated with it. It is created automatically when the consumer object is created. It is not persisted and is deleted automatically when the consumer object is closed.</p>
<p>The <code dir="ltr">JMSContext.createConsumer</code> method creates a consumer on an unshared nondurable subscription if a topic is specified as the destination.</p>
</li>
<li>
<p>A shared nondurable subscription is identified by name and an optional client identifier, and may have several consumer objects consuming messages from it. It is created automatically when the first consumer object is created. It is not persisted and is deleted automatically when the last consumer object is closed. See <a href="#BABJCIGJ">Creating Shared Subscriptions</a> for more information.</p>
</li>
</ul>
<p>At the cost of higher overhead, a subscription may be durable. A durable subscription is persisted and continues to accumulate messages until explicitly deleted, even if there are no consumer objects consuming messages from it. See <a href="#BNCGD">Creating Durable Subscriptions</a> for details.</p>
</div>
<!-- class="sect3" -->
<a id="BNCGD" name="BNCGD" class="anchor"></a>
<div id="JEETT00818" class="sect3">
<h3 class="sect3"><span class="secnum">45.3.6.4</span> <a id="sthref2258" name="sthref2258" class="anchor"></a><a id="sthref2259" name="sthref2259" class="anchor"></a><a id="sthref2260" name="sthref2260" class="anchor"></a><a id="sthref2261" name="sthref2261" class="anchor"></a><a id="sthref2262" name="sthref2262" class="anchor"></a>Creating Durable Subscriptions</h3>
<p>To ensure that a pub/sub application receives all sent messages, use durable subscriptions for the consumers on the topic.</p>
<p>Like a nondurable subscription, a durable subscription may be either unshared or shared.</p>
<ul>
<li>
<p>An unshared durable subscription is identified by name and client identifier (which must be set) and may have only a single consumer object associated with it.</p>
</li>
<li>
<p>A shared durable subscription is identified by name and an optional client identifier, and may have several consumer objects consuming messages from it.</p>
</li>
</ul>
<p>A durable subscription that exists but that does not currently have a non-closed consumer object associated with it is described as being inactive.</p>
<p>You can use the <code dir="ltr">JMSContext.createDurableConsumer</code> method to create a consumer on an unshared durable subscription. An unshared durable subscription can have only one active consumer at a time.</p>
<p>A consumer identifies the durable subscription from which it consumes messages by specifying a unique identity that is retained by the JMS provider. Subsequent consumer objects that have the same identity resume the subscription in the state in which it was left by the preceding consumer. If a durable subscription has no active consumer, the JMS provider retains the subscription's messages until they are received by the subscription or until they expire.</p>
<p><a id="sthref2263" name="sthref2263" class="anchor"></a><a id="sthref2264" name="sthref2264" class="anchor"></a>You establish the unique identity of an unshared durable subscription by setting the following:</p>
<ul>
<li>
<p>A client ID for the connection</p>
</li>
<li>
<p>A topic and a subscription name for the subscription</p>
</li>
</ul>
<p>You can set the client ID administratively for a client-specific connection factory using either the command line or the Administration Console. (In an application client or a Java SE client, you can instead call <code dir="ltr">JMSContext.setClientID</code>.)</p>
<p>After using this connection factory to create the <code dir="ltr">JMSContext</code>, you call the <code dir="ltr">createDurableConsumer</code> method with two arguments: the topic and a string that specifies the name of the subscription:</p>
<pre xml:space="preserve" class="oac_no_warn" dir="ltr">String subName = "MySub";
JMSConsumer consumer = context.createDurableConsumer(myTopic, subName);
</pre>
<p>The subscription becomes active after you create the consumer. Later, you might close the consumer:</p>
<pre xml:space="preserve" class="oac_no_warn" dir="ltr">consumer.close();
</pre>
<p>The JMS provider stores the messages sent to the topic, as it would store messages sent to a queue. If the program or another application calls <code dir="ltr">createDurableConsumer</code> using the same connection factory and its client ID, the same topic, and the same subscription name, then the subscription is reactivated and the JMS provider delivers the messages that were sent while the subscription was inactive.</p>
<p>To delete a durable subscription, first close the consumer, then call the <code dir="ltr">unsubscribe</code> method with the subscription name as the argument:</p>
<pre xml:space="preserve" class="oac_no_warn" dir="ltr">consumer.close();
context.unsubscribe(subName);
</pre>
<p>The <code dir="ltr">unsubscribe</code> method deletes the state the provider maintains for the subscription.</p>
<p><a href="#BNCGE">Figure 45-6</a> and <a href="#BNCGF">Figure 45-7</a> show the difference between a nondurable and a durable subscription. With an ordinary, nondurable subscription, the consumer and the subscription begin and end at the same point and are, in effect, identical. When the consumer is closed, the subscription also ends. Here, <code dir="ltr">create</code> stands for a call to <code dir="ltr">JMSContext.createConsumer</code> with a <code dir="ltr">Topic</code> argument, and <code dir="ltr">close</code> stands for a call to <code dir="ltr">JMSConsumer.close</code>. Any messages sent to the topic between the time of the first <code dir="ltr">close</code> and the time of the second <code dir="ltr">create</code> are not added to either subscription. In <a href="#BNCGE">Figure 45-6</a>, the consumers receive messages M1, M2, M5, and M6, but they do not receive messages M3 and M4.</p>
<div id="JEETT00051" class="figure"><a id="BNCGE" name="BNCGE" class="anchor"></a>
<p class="titleinfigure">Figure 45-6 Nondurable Subscriptions and Consumers</p>
<img width="357" height="128" src="img/jeett_dt_031.png" alt="Description of Figure 45-6 follows" longdesc="img_text/jeett_dt_031.htm"><br>
<a id="sthref2265" name="sthref2265" href="img_text/jeett_dt_031.htm">Description of "Figure 45-6 Nondurable Subscriptions and Consumers"</a><br>
<br></div>
<!-- class="figure" -->
<p>With a durable subscription, the consumer can be closed and re-created, but the subscription continues to exist and to hold messages until the application calls the <code dir="ltr">unsubscribe</code> method. In <a href="#BNCGF">Figure 45-7</a>, <code dir="ltr">create</code> stands for a call to <code dir="ltr">JMSContext.createDurableConsumer</code>, <code dir="ltr">close</code> stands for a call to <code dir="ltr">JMSConsumer.close</code>, and <code dir="ltr">unsubscribe</code> stands for a call to <code dir="ltr">JMSContext.unsubscribe</code>. Messages sent after the first consumer is closed are received when the second consumer is created (on the same durable subscription), so even though messages M2, M4, and M5 arrive while there is no consumer, they are not lost.</p>
<div id="JEETT00052" class="figure"><a id="BNCGF" name="BNCGF" class="anchor"></a>
<p class="titleinfigure">Figure 45-7 Consumers on a Durable Subscription</p>
<img width="416" height="182" src="img/jeett_dt_032.png" alt="Description of Figure 45-7 follows" longdesc="img_text/jeett_dt_032.htm"><br>
<a id="sthref2266" name="sthref2266" href="img_text/jeett_dt_032.htm">Description of "Figure 45-7 Consumers on a Durable Subscription"</a><br>
<br></div>
<!-- class="figure" -->
<p><a id="sthref2267" name="sthref2267" class="anchor"></a><a id="sthref2268" name="sthref2268" class="anchor"></a>A shared durable subscription allows you to use multiple consumers to receive messages from a durable subscription. If you use a shared durable subscription, the connection factory you use does not need to have a client identifier. To create a shared durable subscription, call the <code dir="ltr">JMSContext.createSharedDurableConsumer</code> method, specifying the topic and subscription name:</p>
<pre xml:space="preserve" class="oac_no_warn" dir="ltr">JMSConsumer consumer = 
        context.createSharedDurableConsumer(topic, "MakeItLast");
</pre>
<p>See <a href="jms-examples002.htm#BNCFX">Acknowledging Messages</a>, <a href="jms-examples003.htm#BNCGG">Using Durable Subscriptions</a>, <a href="jms-examples004.htm#BABEJBHA">Using Shared Durable Subscriptions</a>, and <a href="jms-examples007.htm#BNCGW">Sending Messages from a Session Bean to an MDB</a> for examples of Java EE applications that use durable subscriptions.</p>
</div>
<!-- class="sect3" -->
<a id="BABJCIGJ" name="BABJCIGJ" class="anchor"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h3 class="sect3"><span class="secnum">45.3.6.5</span> <a id="sthref2269" name="sthref2269" class="anchor"></a><a id="sthref2270" name="sthref2270" class="anchor"></a>Creating Shared Subscriptions</h3>
<p>A topic subscription created by the <code dir="ltr">createConsumer</code> or <code dir="ltr">createDurableConsumer</code> method can have only one consumer (although a topic can have many). Multiple clients consuming from the same topic have, by definition, multiple subscriptions to the topic, and all the clients receive all the messages sent to the topic (unless they filter them with message selectors).</p>
<p>It is, however, possible to create a nondurable shared subscription to a topic by using the <code dir="ltr">createSharedConsumer</code> method and specifying not only a destination but a subscription name:</p>
<pre xml:space="preserve" class="oac_no_warn" dir="ltr">consumer = context.createSharedConsumer(topicName, "SubName");
</pre>
<p>With a shared subscription, messages will be distributed among multiple clients that use the same topic and subscription name. Each message sent to the topic will be added to every subscription (subject to any message selectors), but each message added to a subscription will be delivered to only one of the consumers on that subscription, so it will be received by only one of the clients. A shared subscription can be useful if you want to share the message load among several consumers on the subscription rather than having just one consumer on the subscription receive each message. This feature can improve the scalability of Java EE application client applications and Java SE applications. (Message-driven beans share the work of processing messages from a topic among multiple threads.)</p>
<p>See <a href="jms-examples004.htm#BABIBEAC">Using Shared Nondurable Subscriptions</a> for a simple example of using shared nondurable consumers.</p>
<p>You can also create shared durable subscriptions by using the <code dir="ltr">JMSContext.createSharedDurableConsumer</code> method. For details, see <a href="#BNCGD">Creating Durable Subscriptions</a>.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="BNCES" name="BNCES" class="anchor"></a>
<div id="JEETT01281" class="sect2">
<h2 class="sect2"><span class="secnum">45.3.7</span> <a id="sthref2271" name="sthref2271" class="anchor"></a>JMS Messages</h2>
<p>The ultimate purpose of a JMS application is to produce and consume messages that can then be used by other software applications. JMS messages have a basic format that is simple but highly flexible, allowing you to create messages that match formats used by non-JMS applications on heterogeneous platforms.</p>
<p>A JMS message can have three parts: a header, properties, and a body. Only the header is required. The following sections describe these parts.</p>
<p>For complete documentation of message headers, properties, and bodies, see the documentation of the <code dir="ltr">Message</code> interface in the API documentation. For a list of possible message types, see <a href="#BNCEW">Message Bodies</a>.</p>
<a id="BNCET" name="BNCET" class="anchor"></a>
<div id="JEETT00810" class="sect3">
<h3 class="sect3"><span class="secnum">45.3.7.1</span> <a id="sthref2272" name="sthref2272" class="anchor"></a><a id="sthref2273" name="sthref2273" class="anchor"></a>Message Headers</h3>
<p>A JMS message header contains a number of predefined fields that contain values used by both clients and providers to identify and route messages. <a href="#BNCEU">Table 45-1</a> lists and describes the JMS message header fields and indicates how their values are set. For example, every message has a unique identifier, which is represented in the header field <code dir="ltr">JMSMessageID</code>. The value of another header field, <code dir="ltr">JMSDestination</code>, represents the queue or the topic to which the message is sent. Other fields include a timestamp and a priority level.</p>
<p>Each header field has associated setter and getter methods, which are documented in the description of the <code dir="ltr">Message</code> interface. Some header fields are intended to be set by a client, but many are set automatically by the <code dir="ltr">send</code> method, which overrides any client-set values.</p>
<div class="tblhruleformal"><a id="sthref2274" name="sthref2274" class="anchor"></a><a id="BNCEU" name="BNCEU" class="anchor"></a>
<p class="titleintable">Table 45-1 How JMS Message Header Field Values Are Set</p>
<table class="HRuleFormal" title="How JMS Message Header Field Values Are Set" summary="This table lists the JMS message header fields and how their values are set." dir="ltr" border="1" width="100%" frame="hsides" rules="rows" cellpadding="3" cellspacing="0">
<colgroup><col width="22%">
<col width="*">
<col width="35%">
</colgroup><thead>
<tr align="left" valign="top">
<th align="left" valign="bottom" id="r1c1-t3">Header Field</th>
<th align="left" valign="bottom" id="r1c2-t3">Description</th>
<th align="left" valign="bottom" id="r1c3-t3">Set By</th>
</tr>
</thead>
<tbody>
<tr align="left" valign="top">
<td align="left" id="r2c1-t3" headers="r1c1-t3">
<p><a id="sthref2275" name="sthref2275" class="anchor"></a><a id="sthref2276" name="sthref2276" class="anchor"></a><code dir="ltr">JMSDestination</code></p>
</td>
<td align="left" headers="r2c1-t3 r1c2-t3">
<p>Destination to which the message is being sent</p>
</td>
<td align="left" headers="r2c1-t3 r1c3-t3">
<p>JMS provider <code dir="ltr">send</code> method</p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r3c1-t3" headers="r1c1-t3">
<p><a id="sthref2277" name="sthref2277" class="anchor"></a><a id="sthref2278" name="sthref2278" class="anchor"></a><code dir="ltr">JMSDeliveryMode</code></p>
</td>
<td align="left" headers="r3c1-t3 r1c2-t3">
<p>Delivery mode specified when the message was sent (see <a href="jms-concepts004.htm#BNCFY">Specifying Message Persistence</a>)</p>
</td>
<td align="left" headers="r3c1-t3 r1c3-t3">
<p>JMS provider <code dir="ltr">send</code> method</p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r4c1-t3" headers="r1c1-t3">
<p><code dir="ltr"><a id="sthref2279" name="sthref2279" class="anchor"></a>JMSDeliveryTime</code></p>
</td>
<td align="left" headers="r4c1-t3 r1c2-t3">
<p>The time the message was sent plus the delivery delay specified when the message was sent (see <a href="jms-concepts004.htm#BABGEADH">Specifying a Delivery Delay</a></p>
</td>
<td align="left" headers="r4c1-t3 r1c3-t3">
<p>JMS provider <code dir="ltr">send</code> method</p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r5c1-t3" headers="r1c1-t3">
<p><a id="sthref2280" name="sthref2280" class="anchor"></a><a id="sthref2281" name="sthref2281" class="anchor"></a><code dir="ltr">JMSExpiration</code></p>
</td>
<td align="left" headers="r5c1-t3 r1c2-t3">
<p>Expiration time of the message (see <a href="jms-concepts004.htm#BNCGA">Allowing Messages to Expire</a>)</p>
</td>
<td align="left" headers="r5c1-t3 r1c3-t3">
<p>JMS provider <code dir="ltr">send</code> method</p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r6c1-t3" headers="r1c1-t3">
<p><a id="sthref2282" name="sthref2282" class="anchor"></a><a id="sthref2283" name="sthref2283" class="anchor"></a><code dir="ltr">JMSPriority</code></p>
</td>
<td align="left" headers="r6c1-t3 r1c2-t3">
<p>The priority of the message (see <a href="jms-concepts004.htm#BNCFZ">Setting Message Priority Levels</a>)</p>
</td>
<td align="left" headers="r6c1-t3 r1c3-t3">
<p>JMS provider <code dir="ltr">send</code> method</p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r7c1-t3" headers="r1c1-t3">
<p><a id="sthref2284" name="sthref2284" class="anchor"></a><a id="sthref2285" name="sthref2285" class="anchor"></a><code dir="ltr">JMSMessageID</code></p>
</td>
<td align="left" headers="r7c1-t3 r1c2-t3">
<p>Value that uniquely identifies each message sent by a provider</p>
</td>
<td align="left" headers="r7c1-t3 r1c3-t3">
<p>JMS provider <code dir="ltr">send</code> method</p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r8c1-t3" headers="r1c1-t3">
<p><a id="sthref2286" name="sthref2286" class="anchor"></a><a id="sthref2287" name="sthref2287" class="anchor"></a><code dir="ltr">JMSTimestamp</code></p>
</td>
<td align="left" headers="r8c1-t3 r1c2-t3">
<p>The time the message was handed off to a provider to be sent</p>
</td>
<td align="left" headers="r8c1-t3 r1c3-t3">
<p>JMS provider <code dir="ltr">send</code> method</p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r9c1-t3" headers="r1c1-t3">
<p><a id="sthref2288" name="sthref2288" class="anchor"></a><a id="sthref2289" name="sthref2289" class="anchor"></a><code dir="ltr">JMSCorrelationID</code></p>
</td>
<td align="left" headers="r9c1-t3 r1c2-t3">
<p>Value that links one message to another; commonly the <code dir="ltr">JMSMessageID</code> value is used</p>
</td>
<td align="left" headers="r9c1-t3 r1c3-t3">
<p>Client application</p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r10c1-t3" headers="r1c1-t3">
<p><a id="sthref2290" name="sthref2290" class="anchor"></a><a id="sthref2291" name="sthref2291" class="anchor"></a><code dir="ltr">JMSReplyTo</code></p>
</td>
<td align="left" headers="r10c1-t3 r1c2-t3">
<p>Destination where replies to the message should be sent</p>
</td>
<td align="left" headers="r10c1-t3 r1c3-t3">
<p>Client application</p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r11c1-t3" headers="r1c1-t3">
<p><a id="sthref2292" name="sthref2292" class="anchor"></a><code dir="ltr">JMSType</code></p>
</td>
<td align="left" headers="r11c1-t3 r1c2-t3">
<p>Type identifier supplied by client application</p>
</td>
<td align="left" headers="r11c1-t3 r1c3-t3">
<p>Client application</p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r12c1-t3" headers="r1c1-t3">
<p><a id="sthref2293" name="sthref2293" class="anchor"></a><a id="sthref2294" name="sthref2294" class="anchor"></a><code dir="ltr">JMSRedelivered</code></p>
</td>
<td align="left" headers="r12c1-t3 r1c2-t3">
<p>Whether the message is being redelivered</p>
</td>
<td align="left" headers="r12c1-t3 r1c3-t3">
<p>JMS provider prior to delivery</p>
</td>
</tr>
</tbody>
</table>
<br></div>
<!-- class="tblhruleformal" --></div>
<!-- class="sect3" -->
<a id="BNCEV" name="BNCEV" class="anchor"></a>
<div id="JEETT00811" class="sect3">
<h3 class="sect3"><span class="secnum">45.3.7.2</span> <a id="sthref2295" name="sthref2295" class="anchor"></a><a id="sthref2296" name="sthref2296" class="anchor"></a>Message Properties</h3>
<p>You can create and set properties for messages if you need values in addition to those provided by the header fields. You can use properties to provide compatibility with other messaging systems, or you can use them to create message selectors (see <a href="#BNCER">JMS Message Selectors</a>). For an example of setting a property to be used as a message selector, see <a href="jms-examples007.htm#BNCGW">Sending Messages from a Session Bean to an MDB</a>.</p>
<p>The JMS API provides some predefined property names that begin with <code dir="ltr">JMSX</code>. A JMS provider is required to implement only one of these, <code dir="ltr">JMSXDeliveryCount</code> (which specifies the number of times a message has been delivered); the rest are optional. The use of these predefined properties or of user-defined properties in applications is optional.</p>
</div>
<!-- class="sect3" -->
<a id="BNCEW" name="BNCEW" class="anchor"></a>
<div id="JEETT00812" class="sect3">
<h3 class="sect3"><span class="secnum">45.3.7.3</span> <a id="sthref2297" name="sthref2297" class="anchor"></a><a id="sthref2298" name="sthref2298" class="anchor"></a>Message Bodies</h3>
<p>The JMS API defines six different types of messages. Each message type corresponds to a different message body. These message types allow you to send and receive data in many different forms. <a href="#BNCEX">Table 45-2</a> describes these message types.</p>
<div class="tblhruleformal"><a id="sthref2299" name="sthref2299" class="anchor"></a><a id="BNCEX" name="BNCEX" class="anchor"></a>
<p class="titleintable">Table 45-2 JMS Message Types</p>
<table class="HRuleFormal" title="JMS Message Types" summary="This table lists the JMS message types and describes their contents." dir="ltr" border="1" width="100%" frame="hsides" rules="rows" cellpadding="3" cellspacing="0">
<colgroup><col width="25%">
<col width="*">
</colgroup><thead>
<tr align="left" valign="top">
<th align="left" valign="bottom" id="r1c1-t4">Message Type</th>
<th align="left" valign="bottom" id="r1c2-t4">Body Contains</th>
</tr>
</thead>
<tbody>
<tr align="left" valign="top">
<td align="left" id="r2c1-t4" headers="r1c1-t4">
<p><a id="sthref2300" name="sthref2300" class="anchor"></a><code dir="ltr">TextMessage</code></p>
</td>
<td align="left" headers="r2c1-t4 r1c2-t4">
<p>A <code dir="ltr">java.lang.String</code> object (for example, the contents of an XML file).</p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r3c1-t4" headers="r1c1-t4">
<p><a id="sthref2301" name="sthref2301" class="anchor"></a><code dir="ltr">MapMessage</code></p>
</td>
<td align="left" headers="r3c1-t4 r1c2-t4">
<p>A set of name-value pairs, with names as <code dir="ltr">String</code> objects and values as primitive types in the Java programming language. The entries can be accessed sequentially by enumerator or randomly by name. The order of the entries is undefined.</p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r4c1-t4" headers="r1c1-t4">
<p><a id="sthref2302" name="sthref2302" class="anchor"></a><code dir="ltr">BytesMessage</code></p>
</td>
<td align="left" headers="r4c1-t4 r1c2-t4">
<p>A stream of uninterpreted bytes. This message type is for literally encoding a body to match an existing message format.</p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r5c1-t4" headers="r1c1-t4">
<p><a id="sthref2303" name="sthref2303" class="anchor"></a><code dir="ltr">StreamMessage</code></p>
</td>
<td align="left" headers="r5c1-t4 r1c2-t4">
<p>A stream of primitive values in the Java programming language, filled and read sequentially.</p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r6c1-t4" headers="r1c1-t4">
<p><a id="sthref2304" name="sthref2304" class="anchor"></a><code dir="ltr">ObjectMessage</code></p>
</td>
<td align="left" headers="r6c1-t4 r1c2-t4">
<p>A <code dir="ltr">Serializable</code> object in the Java programming language.</p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r7c1-t4" headers="r1c1-t4">
<p><a id="sthref2305" name="sthref2305" class="anchor"></a><code dir="ltr">Message</code></p>
</td>
<td align="left" headers="r7c1-t4 r1c2-t4">
<p>Nothing. Composed of header fields and properties only. This message type is useful when a message body is not required.</p>
</td>
</tr>
</tbody>
</table>
<br></div>
<!-- class="tblhruleformal" -->
<p>The JMS API provides methods for creating messages of each type and for filling in their contents. For example, to create and send a <code dir="ltr">TextMessage</code>, you might use the following statements:</p>
<pre xml:space="preserve" class="oac_no_warn" dir="ltr">TextMessage message = context.createTextMessage();
message.setText(msg_text);     // msg_text is a String
context.createProducer().send(message);
</pre>
<p><a id="sthref2306" name="sthref2306" class="anchor"></a>At the consuming end, a message arrives as a generic <code dir="ltr">Message</code> object. You can then cast the object to the appropriate message type and use more specific methods to access the body and extract the message contents (and its headers and properties if needed). For example, you might use the stream-oriented read methods of <code dir="ltr">BytesMessage</code>. You must always cast to the appropriate message type to retrieve the body of a <code dir="ltr">StreamMessage</code>.</p>
<p>Instead of casting the message to a message type, you can call the <code dir="ltr">getBody</code> method on the <code dir="ltr">Message</code>, specifying the type of the message as an argument. For example, you can retrieve a <code dir="ltr">TextMessage</code> as a <code dir="ltr">String</code>. The following code fragment uses the <code dir="ltr">getBody</code> method:</p>
<pre xml:space="preserve" class="oac_no_warn" dir="ltr">Message m = consumer.receive();
if (m instanceof TextMessage) {
    String message = m.getBody(String.class);
    System.out.println("Reading message: " + message);
} else {
    // Handle error or process another message type
}
</pre>
<p>The JMS API provides shortcuts for creating and receiving a <code dir="ltr">TextMessage</code>, <code dir="ltr">BytesMessage</code>, <code dir="ltr">MapMessage</code>, or <code dir="ltr">ObjectMessage</code>. For example, you do not have to wrap a string in a <code dir="ltr">TextMessage</code>; instead, you can send and receive the string directly. For example, you can send a string as follows:</p>
<pre xml:space="preserve" class="oac_no_warn" dir="ltr">String message = "This is a message";
context.createProducer().send(dest, message);
</pre>
<p><a id="sthref2307" name="sthref2307" class="anchor"></a>You can receive the message by using the <code dir="ltr">receiveBody</code> method:</p>
<pre xml:space="preserve" class="oac_no_warn" dir="ltr">String message = receiver.receiveBody(String.class);
</pre>
<p>You can use the <code dir="ltr">receiveBody</code> method to receive any type of message except <code dir="ltr">StreamMessage</code> and <code dir="ltr">Message</code>, as long as the body of the message can be assigned to a particular type.</p>
<p>An empty <code dir="ltr">Message</code> can be useful if you want to send a message that is simply a signal to the application. Some of the examples in <a href="jms-examples.htm#BNCGV">Chapter 46, "Java Message Service Examples,"</a> send an empty message after sending a series of text messages. For example:</p>
<pre xml:space="preserve" class="oac_no_warn" dir="ltr">context.createProducer().send(dest, context.createMessage());
</pre>
<p>The consumer code can then interpret a non-text message as a signal that all the messages sent have now been received.</p>
<p>The examples in <a href="jms-examples.htm#BNCGV">Chapter 46, "Java Message Service Examples,"</a> use messages of type <code dir="ltr">TextMessage</code>, <code dir="ltr">MapMessage</code>, and <code dir="ltr">Message</code>.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="BNCEY" name="BNCEY" class="anchor"></a>
<div id="JEETT01282" class="sect2">
<h2 class="sect2"><span class="secnum">45.3.8</span> <a id="sthref2308" name="sthref2308" class="anchor"></a><a id="sthref2309" name="sthref2309" class="anchor"></a><a id="sthref2310" name="sthref2310" class="anchor"></a>JMS Queue Browsers</h2>
<p>Messages sent to a queue remain in the queue until the message consumer for that queue consumes them. The JMS API provides a <code dir="ltr">QueueBrowser</code> object that allows you to browse the messages in the queue and display the header values for each message. To create a <code dir="ltr">QueueBrowser</code> object, use the <code dir="ltr">JMSContext.createBrowser</code> method. For example:</p>
<pre xml:space="preserve" class="oac_no_warn" dir="ltr">QueueBrowser browser = context.createBrowser(queue);
</pre>
<p>See <a href="jms-examples002.htm#BNCFL">Browsing Messages on a Queue</a> for an example of using a <code dir="ltr">QueueBrowser</code> object.</p>
<p>The <code dir="ltr">createBrowser</code> method allows you to specify a message selector as a second argument when you create a <code dir="ltr">QueueBrowser</code>. For information on message selectors, see <a href="#BNCER">JMS Message Selectors</a>.</p>
<p>The JMS API provides no mechanism for browsing a topic. Messages usually disappear from a topic as soon as they appear: If there are no message consumers to consume them, the JMS provider removes them. Although durable subscriptions allow messages to remain on a topic while the message consumer is not active, JMS does not define any facility for examining them.</p>
</div>
<!-- class="sect2" -->
<a id="BNCEZ" name="BNCEZ" class="anchor"></a>
<div id="JEETT01283" class="sect2">
<h2 class="sect2"><span class="secnum">45.3.9</span> <a id="sthref2311" name="sthref2311" class="anchor"></a><a id="sthref2312" name="sthref2312" class="anchor"></a>JMS Exception Handling</h2>
<p>The root class for all checked exceptions in the JMS API is <code dir="ltr">JMSException</code>. The root cause for all unchecked exceptions in the JMS API is <code dir="ltr">JMSRuntimeException</code>.</p>
<p>Catching <code dir="ltr">JMSException</code> and <code dir="ltr">JMSRuntimeException</code> provides a generic way of handling all exceptions related to the JMS API.</p>
<p>The <code dir="ltr">JMSException</code> and <code dir="ltr">JMSRuntimeException</code> classes include the following subclasses, described in the API documentation:</p>
<ul>
<li>
<p><code dir="ltr">IllegalStateException</code>, <code dir="ltr">IllegalStateRuntimeException</code></p>
</li>
<li>
<p><code dir="ltr">InvalidClientIDException</code>, <code dir="ltr">InvalidClientIDRuntimeException</code></p>
</li>
<li>
<p><code dir="ltr">InvalidDestinationException</code>, <code dir="ltr">InvalidDestinationRuntimeException</code></p>
</li>
<li>
<p><code dir="ltr">InvalidSelectorException</code>, <code dir="ltr">InvalidSelectorRuntimeException</code></p>
</li>
<li>
<p><code dir="ltr">JMSSecurityException</code>, <code dir="ltr">JMSSecurityRuntimeException</code></p>
</li>
<li>
<p><code dir="ltr">MessageEOFException</code></p>
</li>
<li>
<p><code dir="ltr">MessageFormatException</code>, <code dir="ltr">MessageFormatRuntimeException</code></p>
</li>
<li>
<p><code dir="ltr">MessageNotReadableException</code></p>
</li>
<li>
<p><code dir="ltr">MessageNotWriteableException</code>, <code dir="ltr">MessageNotWriteableRuntimeException</code></p>
</li>
<li>
<p><code dir="ltr">ResourceAllocationException</code>, <code dir="ltr">ResourceAllocationRuntimeException</code></p>
</li>
<li>
<p><code dir="ltr">TransactionInProgressException</code>, <code dir="ltr">TransactionInProgressRuntimeException</code></p>
</li>
<li>
<p><code dir="ltr">TransactionRolledBackException</code>, <code dir="ltr">TransactionRolledBackRuntimeException</code></p>
</li>
</ul>
<p>All the examples in the tutorial catch and handle <code dir="ltr">JMSException</code> or <code dir="ltr">JMSRuntimeException</code> when it is appropriate to do so.</p>
</div>
<!-- class="sect2" --></div>
<br><hr>
<div id="JEETT00551" class="sect1">
<h1 class="sect1"><span class="secnum">45.4</span> <a id="sthref2313" name="sthref2313" class="anchor"></a>Using Advanced JMS Features</h1>
<p>This section explains how to use features of the JMS API to achieve the level of reliability and performance your application requires. Many people use JMS in their applications because they cannot tolerate dropped or duplicate messages and because they require that every message be received once and only once. The JMS API provides this functionality.</p>
<p>The most reliable way to produce a message is to send a <code dir="ltr">PERSISTENT</code> message, and to do so within a transaction.</p>
<p>JMS messages are <code dir="ltr">PERSISTENT</code> by default; <code dir="ltr">PERSISTENT</code> messages will not be lost in the event of JMS provider failure. For details, see <a href="#BNCFY">Specifying Message Persistence</a>.</p>
<p>Transactions allow multiple messages to be sent or received in an atomic operation. In the Java EE platform they also allow message sends and receives to be combined with database reads and writes in an atomic transaction. A <span class="glossaryterm">transaction</span> is a unit of work into which you can group a series of operations, such as message sends and receives, so that the operations either all succeed or all fail. For details, see <a href="#BNCGH">Using JMS Local Transactions</a>.</p>
<p>The most reliable way to consume a message is to do so within a transaction, either from a queue or from a durable subscription to a topic. For details, see <a href="jms-concepts003.htm#BNCGD">Creating Durable Subscriptions</a>, <a href="#BNCGB">Creating Temporary Destinations</a>, and <a href="#BNCGH">Using JMS Local Transactions</a>.</p>
<p>Some features primarily allow an application to improve performance. For example, you can set messages to expire after a certain length of time (see <a href="#BNCGA">Allowing Messages to Expire</a>), so that consumers do not receive unnecessary outdated information. You can send messages asynchronously; see <a href="#BABFIFAJ">Sending Messages Asynchronously</a>.</p>
<p>You can also specify various levels of control over message acknowledgment; see <a href="#BNCFW">Controlling Message Acknowledgment</a>.</p>
<p>Other features can provide useful capabilities unrelated to reliability. For example, you can create temporary destinations that last only for the duration of the connection in which they are created. See <a href="#BNCGB">Creating Temporary Destinations</a> for details.</p>
<p>The following sections describe these features as they apply to application clients or Java SE clients. Some of the features work differently in the Java EE web or EJB container; in these cases, the differences are noted here and are explained in detail in <a href="jms-concepts005.htm#BNCGL">Using the JMS API in Java EE Applications</a>.</p>
<a id="BNCFW" name="BNCFW" class="anchor"></a>
<div id="JEETT00813" class="sect2">
<h2 class="sect2"><span class="secnum">45.4.1</span> <a id="sthref2314" name="sthref2314" class="anchor"></a><a id="sthref2315" name="sthref2315" class="anchor"></a>Controlling Message Acknowledgment</h2>
<p>Until a JMS message has been acknowledged, it is not considered to be successfully consumed. The successful consumption of a message ordinarily takes place in three stages.</p>
<ol>
<li>
<p>The client receives the message.</p>
</li>
<li>
<p>The client processes the message.</p>
</li>
<li>
<p>The message is acknowledged. Acknowledgment is initiated either by the JMS provider or by the client, depending on the session acknowledgment mode.</p>
</li>
</ol>
<p><a id="sthref2316" name="sthref2316" class="anchor"></a>In locally transacted sessions (see <a href="#BNCGH">Using JMS Local Transactions</a>), a message is acknowledged when the session is committed. If a transaction is rolled back, all consumed messages are redelivered.</p>
<p>In a JTA transaction (in the Java EE web or EJB container) a message is acknowledged when the transaction is committed.</p>
<p>In nontransacted sessions, when and how a message is acknowledged depend on a value that may be specified as an argument of the <code dir="ltr">createContext</code> method. The possible argument values are as follows.</p>
<ul>
<li>
<p><a id="sthref2317" name="sthref2317" class="anchor"></a><code dir="ltr">JMSContext.AUTO_ACKNOWLEDGE</code>: This setting is the default for application clients and Java SE clients. The <code dir="ltr">JMSContext</code> automatically acknowledges a client's receipt of a message either when the client has successfully returned from a call to <code dir="ltr">receive</code> or when the <code dir="ltr">MessageListener</code> it has called to process the message returns successfully.</p>
<p>A synchronous receive in a <code dir="ltr">JMSContext</code> that is configured to use auto-acknowledgment is the one exception to the rule that message consumption is a three-stage process as described earlier. In this case, the receipt and acknowledgment take place in one step, followed by the processing of the message.</p>
</li>
<li>
<p><a id="sthref2318" name="sthref2318" class="anchor"></a><a id="sthref2319" name="sthref2319" class="anchor"></a><code dir="ltr">JMSContext.CLIENT_ACKNOWLEDGE</code>: A client acknowledges a message by calling the message's <code dir="ltr">acknowledge</code> method. In this mode, acknowledgment takes place on the session level: Acknowledging a consumed message automatically acknowledges the receipt of <span class="italic">all</span> messages that have been consumed by its session. For example, if a message consumer consumes ten messages and then acknowledges the fifth message delivered, all ten messages are acknowledged.</p>
<div class="infoboxnote">
<p class="notep1">Note:</p>
In the Java EE platform, the <code dir="ltr">JMSContext.CLIENT_ACKNOWLEDGE</code> setting can be used only in an application client, not in a web component or enterprise bean.</div>
</li>
<li>
<p><a id="sthref2320" name="sthref2320" class="anchor"></a><a id="sthref2321" name="sthref2321" class="anchor"></a><code dir="ltr">JMSContext.DUPS_OK_ACKNOWLEDGE</code>: This option instructs the <code dir="ltr">JMSContext</code> to lazily acknowledge the delivery of messages. This is likely to result in the delivery of some duplicate messages if the JMS provider fails, so it should be used only by consumers that can tolerate duplicate messages. (If the JMS provider redelivers a message, it must set the value of the <code dir="ltr">JMSRedelivered</code> message header to <code dir="ltr">true</code>.) This option can reduce session overhead by minimizing the work the session does to prevent duplicates.</p>
</li>
</ul>
<p>If messages have been received from a queue but not acknowledged when a <code dir="ltr">JMSContext</code> is closed, the JMS provider retains them and redelivers them when a consumer next accesses the queue. The provider also retains unacknowledged messages if an application closes a <code dir="ltr">JMSContext</code> that has been consuming messages from a durable subscription. (See <a href="jms-concepts003.htm#BNCGD">Creating Durable Subscriptions</a>.) Unacknowledged messages that have been received from a nondurable subscription will be dropped when the <code dir="ltr">JMSContext</code> is closed.</p>
<p><a id="sthref2322" name="sthref2322" class="anchor"></a>If you use a queue or a durable subscription, you can use the <code dir="ltr">JMSContext.recover</code> method to stop a nontransacted <code dir="ltr">JMSContext</code> and restart it with its first unacknowledged message. In effect, the <code dir="ltr">JMSContext</code>'s series of delivered messages is reset to the point after its last acknowledged message. The messages it now delivers may be different from those that were originally delivered, if messages have expired or if higher-priority messages have arrived. For a consumer on a nondurable subscription, the provider may drop unacknowledged messages when the <code dir="ltr">JMSContext.recover</code> method is called.</p>
<p>The sample program in <a href="jms-examples002.htm#BNCFX">Acknowledging Messages</a> demonstrates two ways to ensure that a message will not be acknowledged until processing of the message is complete.</p>
</div>
<!-- class="sect2" -->
<a id="BNCFV" name="BNCFV" class="anchor"></a>
<div id="JEETT01284" class="sect2">
<h2 class="sect2"><span class="secnum">45.4.2</span> <a id="sthref2323" name="sthref2323" class="anchor"></a>Specifying Options for Sending Messages</h2>
<p>You can set a number of options when you send a message. These options enable you to perform the following tasks:</p>
<ul>
<li>
<p>Specify that messages are persistent, meaning they must not be lost in the event of a provider failure (<a href="#BNCFY">Specifying Message Persistence</a>)</p>
</li>
<li>
<p>Set priority levels for messages, which can affect the order in which the messages are delivered (<a href="#BNCFZ">Setting Message Priority Levels</a>)</p>
</li>
<li>
<p>Specify an expiration time for messages so they will not be delivered if they are obsolete (<a href="#BNCGA">Allowing Messages to Expire</a>)</p>
</li>
<li>
<p>Specify a delivery delay for messages so that they will not be delivered until a specified amount of time has expired (<a href="#BABGEADH">Specifying a Delivery Delay</a>)</p>
</li>
</ul>
<p>Method chaining allows you to specify more than one of these options when you create a producer and call the <code dir="ltr">send</code> method; see <a href="#BABJFIAD">Using JMSProducer Method Chaining</a>.</p>
<a id="BNCFY" name="BNCFY" class="anchor"></a>
<div id="JEETT00814" class="sect3">
<h3 class="sect3"><span class="secnum">45.4.2.1</span> <a id="sthref2324" name="sthref2324" class="anchor"></a><a id="sthref2325" name="sthref2325" class="anchor"></a><a id="sthref2326" name="sthref2326" class="anchor"></a><a id="sthref2327" name="sthref2327" class="anchor"></a><a id="sthref2328" name="sthref2328" class="anchor"></a><a id="sthref2329" name="sthref2329" class="anchor"></a>Specifying Message Persistence</h3>
<p>The JMS API supports two delivery modes specifying whether messages are lost if the JMS provider fails. These delivery modes are fields of the <code dir="ltr">DeliveryMode</code> interface.</p>
<ul>
<li>
<p><a id="sthref2330" name="sthref2330" class="anchor"></a>The default delivery mode, <code dir="ltr">PERSISTENT</code>, instructs the JMS provider to take extra care to ensure that a message is not lost in transit in case of a JMS provider failure. A message sent with this delivery mode is logged to stable storage when it is sent.</p>
</li>
<li>
<p><a id="sthref2331" name="sthref2331" class="anchor"></a>The <code dir="ltr">NON_PERSISTENT</code> delivery mode does not require the JMS provider to store the message or otherwise guarantee that it is not lost if the provider fails.</p>
</li>
</ul>
<p>To specify the delivery mode, use the <code dir="ltr">setDeliveryMode</code> method of the <code dir="ltr">JMSProducer</code> interface to set the delivery mode for all messages sent by that producer.</p>
<p>You can use method chaining to set the delivery mode when you create a producer and send a message. The following call creates a producer with a <code dir="ltr">NON_PERSISTENT</code> delivery mode and uses it to send a message:</p>
<pre xml:space="preserve" class="oac_no_warn" dir="ltr">context.createProducer()
       .setDeliveryMode(DeliveryMode.NON_PERSISTENT).send(dest, msg);
</pre>
<p>If you do not specify a delivery mode, the default is <code dir="ltr">PERSISTENT</code>. Using the <code dir="ltr">NON_PERSISTENT</code> delivery mode may improve performance and reduce storage overhead, but you should use it only if your application can afford to miss messages.</p>
</div>
<!-- class="sect3" -->
<a id="BNCFZ" name="BNCFZ" class="anchor"></a>
<div id="JEETT00815" class="sect3">
<h3 class="sect3"><span class="secnum">45.4.2.2</span> <a id="sthref2332" name="sthref2332" class="anchor"></a><a id="sthref2333" name="sthref2333" class="anchor"></a><a id="sthref2334" name="sthref2334" class="anchor"></a>Setting Message Priority Levels</h3>
<p>You can use message priority levels to instruct the JMS provider to deliver urgent messages first. Use the <code dir="ltr">setPriority</code> method of the <code dir="ltr">JMSProducer</code> interface to set the priority level for all messages sent by that producer.</p>
<p>You can use method chaining to set the priority level when you create a producer and send a message. For example, the following call sets a priority level of 7 for a producer and then sends a message:</p>
<pre xml:space="preserve" class="oac_no_warn" dir="ltr">context.createProducer().setPriority(7).send(dest, msg);
</pre>
<p>The ten levels of priority range from 0 (lowest) to 9 (highest). If you do not specify a priority level, the default level is 4. A JMS provider tries to deliver higher-priority messages before lower-priority ones, but does not have to deliver messages in exact order of priority.</p>
</div>
<!-- class="sect3" -->
<a id="BNCGA" name="BNCGA" class="anchor"></a>
<div id="JEETT00816" class="sect3">
<h3 class="sect3"><span class="secnum">45.4.2.3</span> <a id="sthref2335" name="sthref2335" class="anchor"></a><a id="sthref2336" name="sthref2336" class="anchor"></a><a id="sthref2337" name="sthref2337" class="anchor"></a>Allowing Messages to Expire</h3>
<p>By default, a message never expires. If a message will become obsolete after a certain period, however, you may want to set an expiration time. Use the <code dir="ltr">setTimeToLive</code> method of the <code dir="ltr">JMSProducer</code> interface to set a default expiration time for all messages sent by that producer.</p>
<p>For example, a message that contains rapidly changing data such as a stock price will become obsolete after a few minutes, so you might configure messages to expire after that time.</p>
<p>You can use method chaining to set the time to live when you create a producer and send a message. For example, the following call sets a time to live of five minutes for a producer and then sends a message:</p>
<pre xml:space="preserve" class="oac_no_warn" dir="ltr">context.createProducer().setTimeToLive(300000).send(dest, msg);
</pre>
<p>If the specified <code dir="ltr">timeToLive</code> value is <code dir="ltr">0</code>, the message never expires.</p>
<p>When the message is sent, the specified <code dir="ltr">timeToLive</code> is added to the current time to give the expiration time. Any message not delivered before the specified expiration time is destroyed. The destruction of obsolete messages conserves storage and computing resources.</p>
</div>
<!-- class="sect3" -->
<a id="BABGEADH" name="BABGEADH" class="anchor"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h3 class="sect3"><span class="secnum">45.4.2.4</span> <a id="sthref2338" name="sthref2338" class="anchor"></a><a id="sthref2339" name="sthref2339" class="anchor"></a><a id="sthref2340" name="sthref2340" class="anchor"></a>Specifying a Delivery Delay</h3>
<p>You can specify a length of time that must elapse after a message is sent before the JMS provider delivers the message. Use the <code dir="ltr">setDeliveryDelay</code> method of the <code dir="ltr">JMSProducer</code> interface to set a delivery delay for all messages sent by that producer.</p>
<p>You can use method chaining to set the delivery delay when you create a producer and send a message. For example, the following call sets a delivery delay of 3 seconds for a producer and then sends a message:</p>
<pre xml:space="preserve" class="oac_no_warn" dir="ltr">context.createProducer().setDeliveryDelay(3000).send(dest, msg);
</pre></div>
<!-- class="sect3" -->
<a id="BABJFIAD" name="BABJFIAD" class="anchor"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h3 class="sect3"><span class="secnum">45.4.2.5</span> Using JMSProducer Method Chaining</h3>
<p>The setter methods on the <code dir="ltr">JMSProducer</code> interface return <code dir="ltr">JMSProducer</code> objects, so you can use method chaining to create a producer, set multiple properties, and send a message. For example, the following chained method calls create a producer, set a user-defined property, set the expiration, delivery mode, and priority for the message, and then send a message to a queue:</p>
<pre xml:space="preserve" class="oac_no_warn" dir="ltr">context.createProducer()
        .setProperty("MyProperty", "MyValue")
        .setTimeToLive(10000)
        .setDeliveryMode(NON_PERSISTENT)
        .setPriority(2)
        .send(queue, body);
</pre>
<p>You can also call the <code dir="ltr">JMSProducer</code> methods to set properties on a message and then send the message in a separate <code dir="ltr">send</code> method call. You can also set message properties directly on a message.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="BNCGB" name="BNCGB" class="anchor"></a>
<div id="JEETT00817" class="sect2">
<h2 class="sect2"><span class="secnum">45.4.3</span> <a id="sthref2341" name="sthref2341" class="anchor"></a><a id="sthref2342" name="sthref2342" class="anchor"></a><a id="sthref2343" name="sthref2343" class="anchor"></a><a id="sthref2344" name="sthref2344" class="anchor"></a><a id="sthref2345" name="sthref2345" class="anchor"></a>Creating Temporary Destinations</h2>
<p>Normally, you create JMS destinations (queues and topics) administratively rather than programmatically. Your JMS provider includes a tool to create and remove destinations, and it is common for destinations to be long-lasting.</p>
<p>The JMS API also enables you to create destinations (<code dir="ltr">TemporaryQueue</code> and <code dir="ltr">TemporaryTopic</code> objects) that last only for the duration of the connection in which they are created. You create these destinations dynamically using the <code dir="ltr">JMSContext.createTemporaryQueue</code> and the <code dir="ltr">JMSContext.createTemporaryTopic</code> methods, as in the following example:</p>
<pre xml:space="preserve" class="oac_no_warn" dir="ltr">TemporaryTopic replyTopic = context.createTemporaryTopic();
</pre>
<p>The only message consumers that can consume from a temporary destination are those created by the same connection that created the destination. Any message producer can send to the temporary destination. If you close the connection to which a temporary destination belongs, the destination is closed and its contents are lost.</p>
<p><a id="sthref2346" name="sthref2346" class="anchor"></a>You can use temporary destinations to implement a simple request/reply mechanism. If you create a temporary destination and specify it as the value of the <code dir="ltr">JMSReplyTo</code> message header field when you send a message, then the consumer of the message can use the value of the <code dir="ltr">JMSReplyTo</code> field as the destination to which it sends a reply. The consumer can also reference the original request by setting the <code dir="ltr">JMSCorrelationID</code> header field of the reply message to the value of the <code dir="ltr">JMSMessageID</code> header field of the request. For example, an <code dir="ltr">onMessage</code> method can create a <code dir="ltr">JMSContext</code> so that it can send a reply to the message it receives. It can use code such as the following:</p>
<pre xml:space="preserve" class="oac_no_warn" dir="ltr">replyMsg = context.createTextMessage("Consumer processed message: " 
        + msg.getText());
replyMsg.setJMSCorrelationID(msg.getJMSMessageID());
context.createProducer().send((Topic) msg.getJMSReplyTo(), replyMsg);
</pre>
<p>For an example, see <a href="jms-examples008.htm#BNCHF">Using an Entity to Join Messages from Two MDBs</a>.</p>
</div>
<!-- class="sect2" -->
<a id="BNCGH" name="BNCGH" class="anchor"></a>
<div id="JEETT00819" class="sect2">
<h2 class="sect2"><span class="secnum">45.4.4</span> <a id="sthref2347" name="sthref2347" class="anchor"></a><a id="sthref2348" name="sthref2348" class="anchor"></a><a id="sthref2349" name="sthref2349" class="anchor"></a><a id="sthref2350" name="sthref2350" class="anchor"></a><a id="sthref2351" name="sthref2351" class="anchor"></a>Using JMS Local Transactions</h2>
<p>A <span class="glossaryterm">transaction</span> groups a series of operations into an atomic unit of work. If any one of the operations fails, the transaction can be rolled back, and the operations can be attempted again from the beginning. If all the operations succeed, the transaction can be committed.</p>
<p>In an application client or a Java SE client, you can use local transactions to group message sends and receives. You use the <code dir="ltr">JMSContext.commit</code> method to commit a transaction. You can send multiple messages in a transaction, and the messages will not be added to the queue or topic until the transaction is committed. If you receive multiple messages in a transaction, they will not be acknowledged until the transaction is committed.</p>
<p>You can use the <code dir="ltr">JMSContext.rollback</code> method to roll back a transaction. A transaction rollback means that all produced messages are destroyed and all consumed messages are recovered and redelivered unless they have expired (see <a href="#BNCGA">Allowing Messages to Expire</a>).</p>
<p>A transacted session is always involved in a transaction. To create a transacted session, call the <code dir="ltr">createContext</code> method as follows:</p>
<pre xml:space="preserve" class="oac_no_warn" dir="ltr">JMSContext context = 
        connectionFactory.createContext(JMSContext.SESSION_TRANSACTED);
</pre>
<p>As soon as the <code dir="ltr">commit</code> or the <code dir="ltr">rollback</code> method is called, one transaction ends and another transaction begins. Closing a transacted session rolls back its transaction in progress, including any pending sends and receives.</p>
<p>In an application running in the Java EE web or EJB container, you cannot use local transactions. Instead, you use JTA transactions, described in <a href="jms-concepts005.htm#BNCGL">Using the JMS API in Java EE Applications</a>.</p>
<p>You can combine several sends and receives in a single JMS local transaction, so long as they are all performed using the same <code dir="ltr">JMSContext</code>.</p>
<p>Do not use a single transaction if you use a request/reply mechanism, in which you send a message and then receive a reply to that message. If you try to use a single transaction, the program will hang, because the send cannot take place until the transaction is committed. The following code fragment illustrates the problem:</p>
<pre xml:space="preserve" class="oac_no_warn" dir="ltr">// Don't do this!
outMsg.setJMSReplyTo(replyQueue);
context.createProducer().send(outQueue, outMsg);
consumer = context.createConsumer(replyQueue);
inMsg = consumer.receive();
context.commit();
</pre>
<p>Because a message sent during a transaction is not actually sent until the transaction is committed, the transaction cannot contain any receives that depend on that message's having been sent.</p>
<p>The production and the consumption of a message cannot both be part of the same transaction. The reason is that the transactions take place between the clients and the JMS provider, which intervenes between the production and the consumption of the message. <a href="#BNCGI">Figure 45-8</a> illustrates this interaction.</p>
<div id="JEETT00053" class="figure"><a id="BNCGI" name="BNCGI" class="anchor"></a>
<p class="titleinfigure">Figure 45-8 Using JMS Local Transactions</p>
<img width="416" height="86" src="img/jeett_dt_033.png" alt="Description of Figure 45-8 follows" longdesc="img_text/jeett_dt_033.htm"><br>
<a id="sthref2352" name="sthref2352" href="img_text/jeett_dt_033.htm">Description of "Figure 45-8 Using JMS Local Transactions"</a><br>
<br></div>
<!-- class="figure" -->
<p>The sending of one or more messages to one or more destinations by Client 1 can form a single transaction, because it forms a single set of interactions with the JMS provider using a single <code dir="ltr">JMSContext</code>. Similarly, the receiving of one or more messages from one or more destinations by Client 2 also forms a single transaction using a single <code dir="ltr">JMSContext</code>. But because the two clients have no direct interaction and are using two different <code dir="ltr">JMSContext</code> objects, no transactions can take place between them.</p>
<p>Another way of putting this is that a transaction is a contract between a client and a JMS provider that defines whether a message is sent to a destination or whether a message is received from the destination. It is not a contract between the sending client and the receiving client.</p>
<p>This is the fundamental difference between messaging and synchronized processing. Instead of tightly coupling the sender and the receiver of a message, JMS couples the sender of a message with the destination, and it separately couples the destination with the receiver of the message. Therefore, while the sends and receives each have a tight coupling with the JMS provider, they do not have any coupling with each other.</p>
<p>When you create a <code dir="ltr">JMSContext</code>, you can specify whether it is transacted by using the <code dir="ltr">JMSContext.SESSION_TRANSACTED</code> argument to the <code dir="ltr">createContext</code> method. For example:</p>
<pre xml:space="preserve" class="oac_no_warn" dir="ltr">try (JMSContext context = connectionFactory.createContext(
        JMSContext.SESSION_TRANSACTED);) {
    ...
</pre>
<p>The <code dir="ltr">commit</code> and the <code dir="ltr">rollback</code> methods for local transactions are associated with the session that underlies the <code dir="ltr">JMSContext</code>. You can combine operations on more than one queue or topic, or on a combination of queues and topics, in a single transaction if you use the same session to perform the operations. For example, you can use the same <code dir="ltr">JMSContext</code> to receive a message from a queue and send a message to a topic in the same transaction.</p>
<p>The example in <a href="jms-examples003.htm#BNCGJ">Using Local Transactions</a> shows how to use JMS local transactions.</p>
</div>
<!-- class="sect2" -->
<a id="BABFIFAJ" name="BABFIFAJ" class="anchor"></a>
<div class="sect2">
<h2 class="sect2"><span class="secnum">45.4.5</span> <a id="sthref2353" name="sthref2353" class="anchor"></a><a id="sthref2354" name="sthref2354" class="anchor"></a>Sending Messages Asynchronously</h2>
<p>Normally, when you send a persistent message, the <code dir="ltr">send</code> method blocks until the JMS provider confirms that the message was sent successfully. The asynchronous send mechanism allows your application to send a message and continue work while waiting to learn whether the send completed.</p>
<p>This feature is currently available only in application clients and Java SE clients.</p>
<p>Sending a message asynchronously involves supplying a callback object. You specify a <code dir="ltr">CompletionListener</code> with an <code dir="ltr">onCompletion</code> method. For example, the following code instantiates a <code dir="ltr">CompletionListener</code> named <code dir="ltr">SendListener</code>. It then calls the <code dir="ltr">setAsync</code> method to specify that sends from this producer should be asynchronous and should use the specified listener:</p>
<pre xml:space="preserve" class="oac_no_warn" dir="ltr">CompletionListener listener = new SendListener();
context.createProducer().setAsync(listener).send(dest, message);
</pre>
<p>The <code dir="ltr">CompletionListener</code> class must implement two methods, <code dir="ltr">onCompletion</code> and <code dir="ltr">onException</code>. The <code dir="ltr">onCompletion</code> method is called if the send succeeds, and the <code dir="ltr">onException</code> method is called if it fails. A simple implementation of these methods might look like this:</p>
<pre xml:space="preserve" class="oac_no_warn" dir="ltr">@Override
public void onCompletion(Message message) {
    System.out.println("onCompletion method: Send has completed.");
}

@Override
public void onException(Message message, Exception e) {
    System.out.println("onException method: send failed: " + e.toString());
    System.out.println("Unsent message is: \n" + message);
}
</pre></div>
<!-- class="sect2" --></div>
<br><hr>
<div id="JEETT00552" class="sect1">
<h1 class="sect1"><span class="secnum">45.5</span> <a id="sthref2355" name="sthref2355" class="anchor"></a>Using the JMS API in Java EE Applications</h1>
<p>This section describes how using the JMS API in enterprise bean applications or web applications differs from using it in application clients.</p>
<p>A general rule in the Java EE platform specification applies to all Java EE components that use the JMS API within EJB or web containers: Application components in the web and EJB containers must not attempt to create more than one active (not closed) <code dir="ltr">Session</code> object per connection. Multiple <code dir="ltr">JMSContext</code> objects are permitted, however, since they combine a single connection and a single session.</p>
<p>This rule does not apply to application clients. The application client container supports the creation of multiple sessions for each connection.</p>
<a id="BABHFBDH" name="BABHFBDH" class="anchor"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h2 class="sect2"><span class="secnum">45.5.1</span> Creating Resources for Java EE Applications</h2>
<p>You can use annotations to create application-specific connection factories and destinations for Java EE enterprise bean or web components. The resources you create in this way are visible only to the application for which you create them.</p>
<p>You can also use deployment descriptor elements to create these resources. Elements specified in the deployment descriptor override elements specified in annotations. See <a href="packaging001.htm#BCGDJDFB">Packaging Applications</a> for basic information about deployment descriptors. You must use a deployment descriptor to create application-specific resources for application clients.</p>
<p>To create a destination, use a <code dir="ltr">@JMSDestinationDefinition</code> annotation like the following on a class:</p>
<pre xml:space="preserve" class="oac_no_warn" dir="ltr">@JMSDestinationDefinition(
    name = "java:app/jms/myappTopic",
    interfaceName = "javax.jms.Topic",
    destinationName = "MyPhysicalAppTopic"
  )
</pre>
<p>The <code dir="ltr">name</code>, <code dir="ltr">interfaceName</code>, and <code dir="ltr">destinationName</code> elements are required. You can optionally specify a <code dir="ltr">description</code> element. To create multiple destinations, enclose them in a <code dir="ltr">@JMSDestinationDefinitions</code> annotation, separated by commas.</p>
<p>To create a connection factory, use a <code dir="ltr">@JMSConnectionFactoryDefinition</code> annotation like the following on a class:</p>
<pre xml:space="preserve" class="oac_no_warn" dir="ltr">@JMSConnectionFactoryDefinition(
    name="java:app/jms/MyConnectionFactory"
)
</pre>
<p>The <code dir="ltr">name</code> element is required. You can optionally specify a number of other elements, such as <code dir="ltr">clientId</code> if you want to use the connection factory for durable subscriptions, or <code dir="ltr">description</code>. If you do not specify the <code dir="ltr">interfaceName</code> element, the default interface is <code dir="ltr">javax.jms.ConnectionFactory</code>. To create multiple connection factories, enclose them in a <code dir="ltr">@JMSConnectionFactoryDefinitions</code> annotation, separated by commas.</p>
<p>You need to specify the annotation only once for a given application, in any of the components.</p>
<div class="infoboxnote">
<p class="notep1">Note:</p>
If your application contains one or more message-driven beans, you may want to place the annotation on one of the message-driven beans. If you place the annotation on a sending component such as an application client, you need to specify the <code dir="ltr">mappedName</code> element to look up the topic, instead of using the <code dir="ltr">destinationLookup</code> property of the activation configuration specification.</div>
<p>When you inject the resource into a component, use the value of the <code dir="ltr">name</code> element in the definition annotation as the value of the <code dir="ltr">lookup</code> element in the <code dir="ltr">@Resource</code> annotation:</p>
<pre xml:space="preserve" class="oac_no_warn" dir="ltr">@Resource(lookup = "java:app/jms/myappTopic")
private Topic topic;
</pre>
<p>The following portable JNDI namespaces are available. Which ones you can use depends on how your application is packaged.</p>
<ul>
<li>
<p><code dir="ltr">java:global</code>: Makes the resource available to all deployed applications</p>
</li>
<li>
<p><code dir="ltr">java:app</code>: Makes the resource available to all components in all modules in a single application</p>
</li>
<li>
<p><code dir="ltr">java:module</code>: Makes the resource available to all components within a given module (for example, all enterprise beans within an EJB module)</p>
</li>
<li>
<p><code dir="ltr">java:comp</code>: Makes the resource available to a single component only (except in a web application, where it is equivalent to <code dir="ltr">java:module</code>)</p>
</li>
</ul>
<p>See the API documentation for details on these annotations. The examples in <a href="jms-examples005.htm#BABBABFC">Sending and Receiving Messages Using a Simple Web Application</a>, <a href="jms-examples007.htm#BNCGW">Sending Messages from a Session Bean to an MDB</a>, and <a href="jms-examples008.htm#BNCHF">Using an Entity to Join Messages from Two MDBs</a> all use the <code dir="ltr">@JMSDestinationDefinition</code> annotation. The other JMS examples do not use these annotations. The examples that consist only of application clients are not deployed in the application server and must therefore communicate with each other using administratively created resources that exist outside of individual applications.</p>
</div>
<!-- class="sect2" -->
<a id="BNCGM" name="BNCGM" class="anchor"></a>
<div id="JEETT01286" class="sect2">
<h2 class="sect2"><span class="secnum">45.5.2</span> Using Resource Injection in Enterprise Bean or Web Components</h2>
<p>You may use resource injection to inject both administered objects and <code dir="ltr">JMSContext</code> objects in Java EE applications.</p>
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref2356" name="sthref2356" class="anchor"></a>
<h3 class="sect3"><span class="secnum">45.5.2.1</span> Injecting a ConnectionFactory, Queue, or Topic</h3>
<p>Normally, you use the <code dir="ltr">@Resource</code> annotation to inject a <code dir="ltr">ConnectionFactory</code>, <code dir="ltr">Queue</code>, or <code dir="ltr">Topic</code> into your Java EE application. These objects must be created administratively before you deploy your application. You may want to use the default connection factory, whose JNDI name is <code dir="ltr">java:comp/DefaultJMSConnectionFactory</code>.</p>
<p>When you use resource injection in an application client component, you normally declare the JMS resource static:</p>
<pre xml:space="preserve" class="oac_no_warn" dir="ltr">@Resource(lookup = "java:comp/DefaultJMSConnectionFactory")
private static ConnectionFactory connectionFactory;

@Resource(lookup = "jms/MyQueue")
private static Queue queue;
</pre>
<p>However, when you use this annotation in a session bean, a message-driven bean, or a web component, do <span class="italic">not</span> declare the resource static:</p>
<pre xml:space="preserve" class="oac_no_warn" dir="ltr">@Resource(lookup = "java:comp/DefaultJMSConnectionFactory")
private ConnectionFactory connectionFactory;

@Resource(lookup = "jms/MyTopic")
private Topic topic;
</pre>
<p>If you declare the resource static in these components, runtime errors will result.</p>
</div>
<!-- class="sect3" -->
<a id="BABCJBEE" name="BABCJBEE" class="anchor"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h3 class="sect3"><span class="secnum">45.5.2.2</span> Injecting a JMSContext Object</h3>
<p>To access a <code dir="ltr">JMSContext</code> object in an enterprise bean or web component, instead of injecting the <code dir="ltr">ConnectionFactory</code> resource and then creating a <code dir="ltr">JMSContext</code>, you can use the <code dir="ltr">@Inject</code> and <code dir="ltr">@JMSConnectionFactory</code> annotations to inject a <code dir="ltr">JMSContext</code>. To use the default connection factory, use code like the following:</p>
<pre xml:space="preserve" class="oac_no_warn" dir="ltr">@Inject
private JMSContext context1;
</pre>
<p>To use your own connection factory, use code like the following:</p>
<pre xml:space="preserve" class="oac_no_warn" dir="ltr">@Inject
@JMSConnectionFactory("jms/MyConnectionFactory")
private JMSContext context2;
</pre></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="BNCGN" name="BNCGN" class="anchor"></a>
<div id="JEETT01287" class="sect2">
<h2 class="sect2"><span class="secnum">45.5.3</span> <a id="sthref2357" name="sthref2357" class="anchor"></a><a id="sthref2358" name="sthref2358" class="anchor"></a>Using Java EE Components to Produce and to Synchronously Receive Messages</h2>
<p>An application that produces messages or synchronously receives them can use a Java EE web or EJB component, such as a managed bean, a servlet, or a session bean, to perform these operations. The example in <a href="jms-examples007.htm#BNCGW">Sending Messages from a Session Bean to an MDB</a> uses a stateless session bean to send messages to a topic. The example in <a href="jms-examples005.htm#BABBABFC">Sending and Receiving Messages Using a Simple Web Application</a> uses managed beans to produce and to consume messages.</p>
<p>Because a synchronous receive with no specified timeout ties up server resources, this mechanism usually is not the best application design for a web or EJB component. Instead, use a synchronous receive that specifies a timeout value, or use a message-driven bean to receive messages asynchronously. For details about synchronous receives, see <a href="jms-concepts003.htm#BNCEP">JMS Message Consumers</a>.</p>
<p>Using the JMS API in a Java EE component is in many ways similar to using it in an application client. The main differences are the areas of resource management and transactions.</p>
<a id="BNCGO" name="BNCGO" class="anchor"></a>
<div id="JEETT00820" class="sect3">
<h3 class="sect3"><span class="secnum">45.5.3.1</span> <a id="sthref2359" name="sthref2359" class="anchor"></a><a id="sthref2360" name="sthref2360" class="anchor"></a><a id="sthref2361" name="sthref2361" class="anchor"></a>Managing JMS Resources in Web and EJB Components</h3>
<p>The JMS resources are a connection and a session, usually combined in a <code dir="ltr">JMSContext</code> object. In general, it is important to release JMS resources when they are no longer being used. Here are some useful practices to follow.</p>
<ul>
<li>
<p>If you wish to maintain a JMS resource only for the life span of a business method, use a <code dir="ltr">try</code>-with-resources statement to create the <code dir="ltr">JMSContext</code> so that it will be closed automatically at the end of the <code dir="ltr">try</code> block.</p>
</li>
<li>
<p>To maintain a JMS resource for the duration of a transaction or request, inject the <code dir="ltr">JMSContext</code> as described in <a href="#BABCJBEE">Injecting a JMSContext Object</a>. This will also cause the resource to be released when it is no longer needed.</p>
</li>
<li>
<p>If you would like to maintain a JMS resource for the life span of an enterprise bean instance, you can use a <code dir="ltr">@PostConstruct</code> callback method to create the resource and a <code dir="ltr">@PreDestroy</code> callback method to close the resource. However, there is normally no need to do this, since application servers usually maintain a pool of connections. If you use a stateful session bean and you wish to maintain the JMS resource in a cached state, you must close the resource in a <code dir="ltr">@PrePassivate</code> callback method and set its value to <code dir="ltr">null</code>, and you must create it again in a <code dir="ltr">@PostActivate</code> callback method.</p>
</li>
</ul>
</div>
<!-- class="sect3" -->
<a id="BNCGP" name="BNCGP" class="anchor"></a>
<div id="JEETT00821" class="sect3">
<h3 class="sect3"><span class="secnum">45.5.3.2</span> <a id="sthref2362" name="sthref2362" class="anchor"></a>Managing Transactions in Session Beans</h3>
<p>Instead of using local transactions, you use JTA transactions. You can use either container-managed transactions or bean-managed transactions. Normally, you use container-managed transactions for bean methods that perform sends or receives, allowing the EJB container to handle transaction demarcation. Because container-managed transactions are the default, you do not have to specify them.</p>
<p>You can use bean-managed transactions and the <code dir="ltr">javax.transaction.UserTransaction</code> interface's transaction demarcation methods, but you should do so only if your application has special requirements and you are an expert in using transactions. Usually, container-managed transactions produce the most efficient and correct behavior. This tutorial does not provide any examples of bean-managed transactions.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="BNCGQ" name="BNCGQ" class="anchor"></a>
<div id="JEETT01288" class="sect2">
<h2 class="sect2"><span class="secnum">45.5.4</span> <a id="sthref2363" name="sthref2363" class="anchor"></a><a id="sthref2364" name="sthref2364" class="anchor"></a>Using Message-Driven Beans to Receive Messages Asynchronously</h2>
<p>The sections <a href="ejb-intro003.htm#GIPKO">What Is a Message-Driven Bean?</a> and <a href="jms-concepts001.htm#BNCDW">How Does the JMS API Work with the Java EE Platform?</a> describe how the Java EE platform supports a special kind of enterprise bean, the message-driven bean, which allows Java EE applications to process JMS messages asynchronously. Other Java EE web and EJB components allow you to send messages and to receive them synchronously but not asynchronously.</p>
<p>A message-driven bean is a message listener to which messages can be delivered from either a queue or a topic. The messages can be sent by any Java EE component (from an application client, another enterprise bean, or a web component) or from an application or a system that does not use Java EE technology.</p>
<p>A message-driven bean class has the following requirements.</p>
<ul>
<li>
<p>It must be annotated with the <code dir="ltr">@MessageDriven</code> annotation if it does not use a deployment descriptor.</p>
</li>
<li>
<p>The class must be defined as <code dir="ltr">public</code>, but not as <code dir="ltr">abstract</code> or <code dir="ltr">final</code>.</p>
</li>
<li>
<p>It must contain a public constructor with no arguments.</p>
</li>
</ul>
<p>It is recommended, but not required, that a message-driven bean class implement the message listener interface for the message type it supports. A bean that supports the JMS API implements the <code dir="ltr">javax.jms.MessageListener</code> interface, which means that it must provide an <code dir="ltr">onMessage</code> method with the following signature:</p>
<pre xml:space="preserve" class="oac_no_warn" dir="ltr">void onMessage(Message inMessage)
</pre>
<p><a id="sthref2365" name="sthref2365" class="anchor"></a>The <code dir="ltr">onMessage</code> method is called by the bean's container when a message has arrived for the bean to service. This method contains the business logic that handles the processing of the message. It is the message-driven bean's responsibility to parse the message and perform the necessary business logic.</p>
<p>A message-driven bean differs from an application client's message listener in the following ways.</p>
<ul>
<li>
<p>In an application client, you must create a <code dir="ltr">JMSContext</code>, then create a <code dir="ltr">JMSConsumer</code>, then call <code dir="ltr">setMessageListener</code> to activate the listener. For a message-driven bean, you need only define the class and annotate it, and the EJB container creates it for you.</p>
</li>
<li>
<p>The bean class uses the <code dir="ltr">@MessageDriven</code> annotation, which typically contains an <code dir="ltr">activationConfig</code> element containing <code dir="ltr">@ActivationConfigProperty</code> annotations that specify properties used by the bean or the connection factory. These properties can include the connection factory, a destination type, a durable subscription, a message selector, or an acknowledgment mode. Some of the examples in <a href="jms-examples.htm#BNCGV">Chapter 46, "Java Message Service Examples"</a> set these properties. You can also set the properties in the deployment descriptor.</p>
</li>
<li>
<p>The application client container has only one instance of a <code dir="ltr">MessageListener</code>, which is called on a single thread at a time. A message-driven bean, however, may have multiple instances, configured by the container, which may be called concurrently by multiple threads (although each instance is called by only one thread at a time). Message-driven beans may therefore allow much faster processing of messages than message listeners.</p>
</li>
<li>
<p>You do not need to specify a message acknowledgment mode unless you use bean-managed transactions. The message is consumed in the transaction in which the <code dir="ltr">onMessage</code> method is invoked.</p>
</li>
</ul>
<p><a href="#GJKOH">Table 45-3</a> lists the activation configuration properties defined by the JMS specification.</p>
<div class="tblhruleformal"><a id="sthref2366" name="sthref2366" class="anchor"></a><a id="GJKOH" name="GJKOH" class="anchor"></a>
<p class="titleintable">Table 45-3 @ActivationConfigProperty Settings for Message-Driven Beans</p>
<table class="HRuleFormal" title="@ActivationConfigProperty Settings for Message-Driven Beans" summary="This table lists and describes the common ActivationConfigProperty settings for message-driven beans." dir="ltr" border="1" width="100%" frame="hsides" rules="rows" cellpadding="3" cellspacing="0">
<colgroup><col width="33%">
<col width="*">
</colgroup><thead>
<tr align="left" valign="top">
<th align="left" valign="bottom" id="r1c1-t7">Property Name</th>
<th align="left" valign="bottom" id="r1c2-t7">Description</th>
</tr>
</thead>
<tbody>
<tr align="left" valign="top">
<td align="left" id="r2c1-t7" headers="r1c1-t7">
<p><code dir="ltr">acknowledgeMode</code></p>
</td>
<td align="left" headers="r2c1-t7 r1c2-t7">
<p>Acknowledgment mode, used only for bean-managed transactions; the default is <code dir="ltr">Auto-acknowledge</code> (<code dir="ltr">Dups-ok-acknowledge</code> is also permitted)</p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r3c1-t7" headers="r1c1-t7">
<p><code dir="ltr">destinationLookup</code></p>
</td>
<td align="left" headers="r3c1-t7 r1c2-t7">
<p>The lookup name of the queue or topic from which the bean will receive messages</p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r4c1-t7" headers="r1c1-t7">
<p><code dir="ltr">destinationType</code></p>
</td>
<td align="left" headers="r4c1-t7 r1c2-t7">
<p>Either <code dir="ltr">javax.jms.Queue</code> or <code dir="ltr">javax.jms.Topic</code></p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r5c1-t7" headers="r1c1-t7">
<p><code dir="ltr">subscriptionDurability</code></p>
</td>
<td align="left" headers="r5c1-t7 r1c2-t7">
<p>For durable subscriptions, set the value to <code dir="ltr">Durable</code>; see <a href="jms-concepts003.htm#BNCGD">Creating Durable Subscriptions</a> for more information</p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r6c1-t7" headers="r1c1-t7">
<p><code dir="ltr">clientId</code></p>
</td>
<td align="left" headers="r6c1-t7 r1c2-t7">
<p>For durable subscriptions, the client ID for the connection (optional)</p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r7c1-t7" headers="r1c1-t7">
<p><code dir="ltr">subscriptionName</code></p>
</td>
<td align="left" headers="r7c1-t7 r1c2-t7">
<p>For durable subscriptions, the name of the subscription</p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r8c1-t7" headers="r1c1-t7">
<p><code dir="ltr">messageSelector</code></p>
</td>
<td align="left" headers="r8c1-t7 r1c2-t7">
<p>A string that filters messages; see <a href="jms-concepts003.htm#BNCER">JMS Message Selectors</a> for information</p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r9c1-t7" headers="r1c1-t7">
<p><code dir="ltr">connectionFactoryLookup</code></p>
</td>
<td align="left" headers="r9c1-t7 r1c2-t7">
<p>The lookup name of the connection factory to be used to connect to the JMS provider from which the bean will receive messages</p>
</td>
</tr>
</tbody>
</table>
<br></div>
<!-- class="tblhruleformal" -->
<p>For example, here is the message-driven bean used in <a href="jms-examples006.htm#BNBPK">Receiving Messages Asynchronously Using a Message-Driven Bean</a>:</p>
<pre xml:space="preserve" class="oac_no_warn" dir="ltr">@MessageDriven(activationConfig = {
    @ActivationConfigProperty(propertyName = "destinationLookup",
            propertyValue = "jms/MyQueue"),
    @ActivationConfigProperty(propertyName = "destinationType",
            propertyValue = "javax.jms.Queue")
})
public class SimpleMessageBean implements MessageListener {

    @Resource
    private MessageDrivenContext mdc;
    static final Logger logger = Logger.getLogger("SimpleMessageBean");

    public SimpleMessageBean() {
    }

    @Override
    public void onMessage(Message inMessage) {

        try {
            if (inMessage instanceof TextMessage) {
                logger.log(Level.INFO,
                        "MESSAGE BEAN: Message received: {0}",
                        inMessage.getBody(String.class));
            } else {
                logger.log(Level.WARNING,
                        "Message of wrong type: {0}",
                        inMessage.getClass().getName());
            }
        } catch (JMSException e) {
            logger.log(Level.SEVERE,
                    "SimpleMessageBean.onMessage: JMSException: {0}",
                    e.toString());
            mdc.setRollbackOnly();
        }
    }
}
</pre>
<p>If JMS is integrated with the application server using a resource adapter, the JMS resource adapter handles these tasks for the EJB container.</p>
<p>The bean class commonly injects a <code dir="ltr">MessageDrivenContext</code> resource, which provides some additional methods you can use for transaction management (<code dir="ltr">setRollbackOnly</code>, for example):</p>
<pre xml:space="preserve" class="oac_no_warn" dir="ltr">@Resource
    private MessageDrivenContext mdc;
</pre>
<p>A message-driven bean never has a local or remote interface. Instead, it has only a bean class.</p>
<p>A message-driven bean is similar in some ways to a stateless session bean: Its instances are relatively short-lived and retain no state for a specific client. The instance variables of the message-driven bean instance can contain some state across the handling of client messages: for example, an open database connection, or an object reference to an enterprise bean object.</p>
<p>Like a stateless session bean, a message-driven bean can have many interchangeable instances running at the same time. The container can pool these instances to allow streams of messages to be processed concurrently. The container attempts to deliver messages in chronological order when that would not impair the concurrency of message processing, but no guarantees are made as to the exact order in which messages are delivered to the instances of the message-driven bean class. If message order is essential to your application, you may want to configure your application server to use just one instance of the message-driven bean.</p>
<p>For details on the lifecycle of a message-driven bean, see <a href="ejb-intro007.htm#GIPKW">The Lifecycle of a Message-Driven Bean</a>.</p>
</div>
<!-- class="sect2" -->
<a id="BNCGS" name="BNCGS" class="anchor"></a>
<div id="JEETT01289" class="sect2">
<h2 class="sect2"><span class="secnum">45.5.5</span> <a id="sthref2367" name="sthref2367" class="anchor"></a>Managing JTA Transactions</h2>
<p>Java EE application clients and Java SE clients use JMS local transactions (described in <a href="jms-concepts004.htm#BNCGH">Using JMS Local Transactions</a>), which allow the grouping of sends and receives within a specific JMS session. Java EE applications that run in the web or EJB container commonly use JTA transactions to ensure the integrity of accesses to external resources. The key difference between a JTA transaction and a JMS local transaction is that a JTA transaction is controlled by the application server's transaction managers. JTA transactions may be <span class="glossaryterm">distributed</span>, which means that they can encompass multiple resources in the same transaction, such as a JMS provider and a database.</p>
<p>For example, distributed transactions allow multiple applications to perform atomic updates on the same database, and they allow a single application to perform atomic updates on multiple databases.</p>
<p>In a Java EE application that uses the JMS API, you can use transactions to combine message sends or receives with database updates and other resource manager operations. You can access resources from multiple application components within a single transaction. For example, a servlet can start a transaction, access multiple databases, invoke an enterprise bean that sends a JMS message, invoke another enterprise bean that modifies an EIS system using the Connector Architecture, and finally commit the transaction. Your application cannot, however, both send a JMS message and receive a reply to it within the same transaction.</p>
<p>JTA transactions within the EJB and web containers can be either of two kinds.</p>
<ul>
<li>
<p><a id="sthref2368" name="sthref2368" class="anchor"></a><span class="bold">Container-managed transactions</span>: The container controls the integrity of your transactions without your having to call <code dir="ltr">commit</code> or <code dir="ltr">rollback</code>. Container-managed transactions are easier to use than bean-managed transactions. You can specify appropriate transaction attributes for your enterprise bean methods.</p>
<p>Use the <code dir="ltr">Required</code> transaction attribute (the default) to ensure that a method is always part of a transaction. If a transaction is in progress when the method is called, the method will be part of that transaction; if not, a new transaction will be started before the method is called and will be committed when the method returns. See <a href="transactions003.htm#BNCIK">Transaction Attributes</a> for more information.</p>
</li>
<li>
<p><a id="sthref2369" name="sthref2369" class="anchor"></a><a id="sthref2370" name="sthref2370" class="anchor"></a><span class="bold">Bean-managed transactions</span>: You can use these in conjunction with the <code dir="ltr">javax.transaction.UserTransaction</code> interface, which provides its own <code dir="ltr">commit</code> and <code dir="ltr">rollback</code> methods you can use to delimit transaction boundaries. Bean-managed transactions are recommended only for those who are experienced in programming transactions.</p>
</li>
</ul>
<p>You can use either container-managed transactions or bean-managed transactions with message-driven beans. To ensure that all messages are received and handled within the context of a transaction, use container-managed transactions and use the <code dir="ltr">Required</code> transaction attribute (the default) for the <code dir="ltr">onMessage</code> method.</p>
<p>When you use container-managed transactions, you can call the following <code dir="ltr">MessageDrivenContext</code> methods.</p>
<ul>
<li>
<p><a id="sthref2371" name="sthref2371" class="anchor"></a><code dir="ltr">setRollbackOnly</code>: Use this method for error handling. If an exception occurs, <code dir="ltr">setRollbackOnly</code> marks the current transaction so that the only possible outcome of the transaction is a rollback.</p>
</li>
<li>
<p><a id="sthref2372" name="sthref2372" class="anchor"></a><code dir="ltr">getRollbackOnly</code>: Use this method to test whether the current transaction has been marked for rollback.</p>
</li>
</ul>
<p>If you use bean-managed transactions, the delivery of a message to the <code dir="ltr">onMessage</code> method takes place outside the JTA transaction context. The transaction begins when you call the <code dir="ltr">UserTransaction.begin</code> method within the <code dir="ltr">onMessage</code> method, and it ends when you call <code dir="ltr">UserTransaction.commit</code> or <code dir="ltr">UserTransaction.rollback</code>. Any call to the <code dir="ltr">Connection.createSession</code> method must take place within the transaction.</p>
<p>Using bean-managed transactions allows you to process the message by using more than one transaction or to have some parts of the message processing take place outside a transaction context. However, if you use container-managed transactions, the message is received by the MDB and processed by the <code dir="ltr">onMessage</code> method within the same transaction. It is not possible to achieve this behavior with bean-managed transactions.</p>
<p>When you create a <code dir="ltr">JMSContext</code> in a JTA transaction (in the web or EJB container), the container ignores any arguments you specify, because it manages all transactional properties. When you create a <code dir="ltr">JMSContext</code> in the web or EJB container and there is no JTA transaction, the value (if any) passed to the <code dir="ltr">createContext</code> method should be <code dir="ltr">JMSContext.AUTO_ACKNOWLEDGE</code> or <code dir="ltr">JMSContext.DUPS_OK_ACKNOWLEDGE</code>.</p>
<p><a id="sthref2373" name="sthref2373" class="anchor"></a><a id="sthref2374" name="sthref2374" class="anchor"></a>When you use container-managed transactions, you normally use the <code dir="ltr">Required</code> transaction attribute (the default) for your enterprise bean's business methods.</p>
<p>You do not specify the activation configuration property <code dir="ltr">acknowledgeMode</code> when you create a message-driven bean that uses container-managed transactions. The container acknowledges the message automatically when it commits the transaction.</p>
<p><a id="sthref2375" name="sthref2375" class="anchor"></a>If a message-driven bean uses bean-managed transactions, the message receipt cannot be part of the bean-managed transaction. You can set the activation configuration property <code dir="ltr">acknowledgeMode</code> to <code dir="ltr">Auto-acknowledge</code> or <code dir="ltr">Dups-ok-acknowledge</code> to specify how you want the message received by the message-driven bean to be acknowledged.</p>
<p>If the <code dir="ltr">onMessage</code> method throws a <code dir="ltr">RuntimeException</code>, the container does not acknowledge processing the message. In that case, the JMS provider will redeliver the unacknowledged message in the future.</p>
</div>
<!-- class="sect2" --></div>
<br><hr>
<div id="JEETT00553" class="sect1">
<h1 class="sect1"><span class="secnum">45.6</span> Further Information about JMS</h1>
<p>For more information about JMS, see</p>
<ul>
<li>
<p>Java Message Service website:</p>
<p><code dir="ltr"><a target="_blank" href="http://www.oracle.com/technetwork/java/index-jsp-142945.html">http://www.oracle.com/technetwork/java/index-jsp-142945.html</a></code></p>
</li>
<li>
<p>Java Message Service specification, version 2.0, available from:</p>
<p><code dir="ltr"><a target="_blank" href="http://jcp.org/en/jsr/detail?id=343">http://jcp.org/en/jsr/detail?id=343</a></code></p>
</li>
</ul>
</div>

</body>
</html>