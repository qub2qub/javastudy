<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<title>Migrating to Java 11</title>
    <link rel="stylesheet" href="../Guides/grey.css">
    <style type="text/css">

    </style>
</head>
<body>
<a href="https://medium.com/criciumadev/its-time-migrating-to-java-11-5eb3868354f9">src</a>
<h2>Migrating to Java 11</h2>
</div><div><div><h3>Motivation</h3><p>Oracle JDK 8 will end its life in January, 2019 (153 days from now), stopping the release of public updates, so better start moving and stay up-to-date with latest JDK versions containing awesome features and security fixes.
</p><p>Starting from JDK 11 and onwards, the release cycle will be a new version every 6 months and a new LTS version every 3 years (next is JDK 11).
</p><p>It also worth to say that Oracle JDK released for public use will be compiled against OpenJDK source code without changes.
</p>

<img data-src="https://cdn-images-1.medium.com/max/1800/1*OoQAbZ28JQoy-B98nvgXqg.png" src="https://cdn-images-1.medium.com/max/1800/1*OoQAbZ28JQoy-B98nvgXqg.png">

<h4>Will Java be&nbsp;paid?</h4><p>No, it won't. All Java/JDK development is done in the public OpenJDK repository and all the fixes and enhancements will be pushed to upstream.
</p><p>I also want to mention that there are third party companies that officially support JDK releases such as Azul and RedHat and that IBM open sourced its commercial Java/JDK implementation J9: <a href="https://www.eclipse.org/openj9/" data-href="https://www.eclipse.org/openj9/" rel="nofollow noopener" target="_blank">https://www.eclipse.org/openj9/</a>
</p><h3>Migration Steps</h3><p>After the release of Java 9, 10 and upcoming release of Java 11, there is a lot of open questions on how to migrate applications to use the module system. Unfortunately, most of the articles written focus on simple Hello World applications.
</p><p>The goal of this post is to describe a step-by-step migration guide for a non-trivial modern Spring Boot application. The sample app chosen to do that is the <a href="https://github.com/spring-projects/spring-petclinic" data-href="https://github.com/spring-projects/spring-petclinic" rel="noopener nofollow" target="_blank">Spring PetClinic</a>, a Spring Boot 2 sample application using WebMVC, Actuator, Cache, Data JPA, Thymeleaf and Test starters.
</p><p>There are basically three incremental phases to fully migrate to Java 11:
</p><ol><li>Run an existing Java application with JDK 11.</li><li>Compile the application with Java 11.</li><li>Modularize the application to use <a href="http://openjdk.java.net/projects/jigsaw/spec/" data-href="http://openjdk.java.net/projects/jigsaw/spec/" rel="noopener nofollow" target="_blank">Module System</a>.</li></ol><p>If you are not ready to do all three at same time, do it in your time. This way, it will be easier to get familiar with the new version and migrate incrementally.
</p><p>First you need to download and install JDK 11 for your operation system:
</p><div><a href="http://jdk.java.net/11/" data-href="http://jdk.java.net/11/" title="http://jdk.java.net/11/" rel="nofollow">JDK 11 Early-Access Builds<br><em>Due to limited intellectual property protection and enforcement in certain countries, the JDK source code may only be…</em>jdk.java.net</a><a href="http://jdk.java.net/11/" data-media-id="6c8af87128ea1608004ee5ed428deb50"></a>
</div><p>After you must update your favorite IDE to support Java Module System:
</p><p>Eclipse IDE: <a href="https://www.eclipse.org/downloads/" data-href="https://www.eclipse.org/downloads/" rel="nofollow noopener noopener nofollow noopener" target="_blank">https://www.eclipse.org/downloads/</a>
</p><p>IntelliJ IDEA: <a href="https://www.jetbrains.com/idea/download/" data-href="https://www.jetbrains.com/idea/download/" rel="nofollow noopener noopener nofollow noopener" target="_blank">https://www.jetbrains.com/idea/download/</a>
</p><p>Apache NetBeans: <a href="https://netbeans.apache.org/download/" data-href="https://netbeans.apache.org/download/" rel="nofollow noopener" target="_blank">https://netbeans.apache.org/download/</a>
</p><h3>1. Run an existing Java application with JDK&nbsp;11</h3><h4>Why upgrade from JDK 8 to JDK&nbsp;11?</h4><ul><li>Next LTS version (if you own a commercial license).</li><li>Full support for Linux containers (Docker included).</li><li>Support parallel full garbage collection on G1.</li><li>Free Application Class-Data Sharing feature.</li><li>Free low overhead Flight Recorder and Heap Profiler.</li><li>Heap allocation on alternative memory devices.</li><li>New default set of root authority certificates.</li><li>New <a href="https://wiki.openjdk.java.net/display/zgc/Main" data-href="https://wiki.openjdk.java.net/display/zgc/Main" rel="nofollow noopener" target="_blank">ZGC</a> and <a href="http://openjdk.java.net/jeps/318" data-href="http://openjdk.java.net/jeps/318" rel="nofollow noopener" target="_blank">Epsilon</a> garbage collectors.</li><li>Ahead-of-time compilation and GraalVM.</li><li>Transport Layer Security (TLS) 1.3.</li><li><a href="https://docs.oracle.com/javase/9/jshell/introduction-jshell.htm" data-href="https://docs.oracle.com/javase/9/jshell/introduction-jshell.htm" rel="noopener nofollow" target="_blank">JShell</a>.</li><li>Support for “shebang” Java files! <em>#!/bin/java</em></li></ul><h4>Running your application</h4><p>This is a really simple step, the application (jars) created with earlier Java versions can run on JDK 11 without major issues, except if you depends on Java EE or CORBA modules which were removed from JDK in <a href="http://openjdk.java.net/jeps/320" data-href="http://openjdk.java.net/jeps/320" rel="nofollow noopener" target="_blank">JEP-320.</a>
</p><p>In case of missing classes, you may need to explicitly add <code>java.activation</code>, <code>java.transaction</code> and <code>java.xml.bind</code> dependencies, and in case of class file errors you will need update Java bytecode enhancement libraries like <em>ASM</em>, <em>bytebuddy</em>, <em>javassist</em> or <em>cglib</em>.
</p><h3>2. Compile the application with Java&nbsp;11</h3><h4>Why upgrade source to Java&nbsp;11?</h4><ul><li>Local variable type inference (<em>var</em> keyword).</li><li>New native unmodifiable collections APIs.</li><li>New reactive streams APIs.</li><li>Improved streams/predicate/optional APIs.</li><li>Improved system process API.</li><li>Improved files API.</li><li>Support for HTTP/2.</li><li>Standard Java Async HTTP client.</li><li>Multi-release JARs.</li></ul><h4>Steps</h4><ol><li>Clone Spring PetClinic repository.</li></ol><pre>git clone git@github.com:spring-projects/spring-petclinic.git</pre><p>2. Open pom.xml and update java.version property.
</p><pre>&lt;java.version&gt;11&lt;/java.version&gt;<br>&lt;maven.compiler.source&gt;${java.version}&lt;/maven.compiler.source&gt;<br>&lt;maven.compiler.target&gt;${java.version}&lt;/maven.compiler.target&gt;</pre><p>3. Remove cobertura-maven-plugin references as it’s not supported with JDK 11 and looks like it isn’t being maintained for a few years.
</p><p>You can use <a href="https://www.eclemma.org/jacoco/" data-href="https://www.eclemma.org/jacoco/" rel="nofollow noopener" target="_blank">JaCoCo</a> which supports newer JDK versions instead.
</p><p>4. Update javassist and mockito-core dependencies.
</p><pre>&lt;dependency&gt;<br>    &lt;groupId&gt;org.javassist&lt;/groupId&gt;<br>    &lt;artifactId&gt;javassist&lt;/artifactId&gt;<br>    &lt;version&gt;3.23.1-GA&lt;/version&gt;<br>&lt;/dependency&gt;<br>&lt;dependency&gt;<br>    &lt;groupId&gt;org.mockito&lt;/groupId&gt;<br>    &lt;artifactId&gt;mockito-core&lt;/artifactId&gt;<br>    &lt;version&gt;2.20.0&lt;/version&gt;<br>    &lt;scope&gt;test&lt;/scope&gt;<br>&lt;/dependency&gt;</pre><p>5. Include mockito-core dependency inside wro4j-maven-plugin dependencies section.
</p><pre>&lt;plugin&gt;<br>...<br><strong>&lt;dependency&gt;<br>    &lt;groupId&gt;org.mockito&lt;/groupId&gt;<br>    &lt;artifactId&gt;mockito-core&lt;/artifactId&gt;<br>    &lt;version&gt;2.20.0&lt;/version&gt;<br>&lt;/dependency&gt;</strong><br>...<br>&lt;/plugin&gt;</pre><p>6. Update maven-compiler-plugin to version 3.7.0+ with latest asm dependency.
</p><pre>&lt;plugin&gt;<br>    &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;<br>    &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;<br>    &lt;version&gt;3.7.0&lt;/version&gt;<br>    &lt;configuration&gt;<br>        &lt;release&gt;${java.version}&lt;/release&gt;<br>    &lt;/configuration&gt;<br>    &lt;dependencies&gt;<br>        <strong>&lt;dependency&gt;<br>            &lt;groupId&gt;org.ow2.asm&lt;/groupId&gt;<br>            &lt;artifactId&gt;asm&lt;/artifactId&gt;<br>            &lt;version&gt;6.2&lt;/version&gt;<br>        &lt;/dependency&gt;</strong><br>    &lt;/dependencies&gt;<br>&lt;/plugin&gt;</pre><p>7. Update maven-surefire-plugin to version 2.21.0+ with latest asm dependency.
</p><pre>&lt;plugin&gt;<br>    &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;<br>    &lt;version&gt;2.21.0&lt;/version&gt;<br>    &lt;dependencies&gt;<br>        <strong>&lt;dependency&gt;<br>            &lt;groupId&gt;org.ow2.asm&lt;/groupId&gt;<br>            &lt;artifactId&gt;asm&lt;/artifactId&gt;<br>            &lt;version&gt;6.2&lt;/version&gt;<br>        &lt;/dependency&gt;</strong><br>    &lt;/dependencies&gt;<br>&lt;/plugin&gt;</pre><p>8. Include java.xml.bind module dependency because those modules were removed in JDK 11 by <a href="http://openjdk.java.net/jeps/320" data-href="http://openjdk.java.net/jeps/320" rel="noopener nofollow" target="_blank">JEP-320</a>.
</p><pre>&lt;dependency&gt;<br>    &lt;groupId&gt;org.glassfish.jaxb&lt;/groupId&gt;<br>    &lt;artifactId&gt;jaxb-runtime&lt;/artifactId&gt;<br>    &lt;version&gt;2.4.0-b180608.0325&lt;/version&gt;<br>&lt;/dependency&gt;</pre><p>9. Include GlassFish JAXB repositories in pom.xml.
</p><pre>&lt;repositories&gt;<br>    &lt;repository&gt;<br>        &lt;id&gt;jvnet-nexus-staging&lt;/<strong>id&gt;<br></strong>&lt;url&gt;http://maven.java.net/content/repositories/staging/&lt;/url&gt;<br>        &lt;layout&gt;default&lt;/layout&gt;<br>    &lt;/repository&gt;<br>&lt;/repositories&gt;</pre><p>10. Run the application with spring-boot-maven-plugin.
</p><pre>./mvnw spring-boot:run</pre><p><em>The application UI will be available at </em><a href="http://localhost:8080/" data-href="http://localhost:8080/" target="_blank"><em>http://localhost:8080/</em></a>
</p><p>11. Package the application and run tests.
</p><pre>./mvnw clean package</pre><p>12. Run the application using packaged <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/executable-jar.html" data-href="https://docs.spring.io/spring-boot/docs/current/reference/html/executable-jar.html" rel="noopener nofollow" target="_blank">executable jar</a>.
</p><pre>java -jar target/spring-petclinic-2.0.0.BUILD-SNAPSHOT.jar</pre><p><em>At this point you can compile and run your application with Java 11, but you are </em><strong><em>not using module system</em></strong><em> yet.</em>
</p><h3>3. Modularize the application to use Module&nbsp;System</h3><h4>Why migrate to Module&nbsp;System?</h4><ul><li><em>Reliable configuration — to replace the brittle, error-prone class-path mechanism with a means for program components to declare explicit dependences upon one another.</em></li><li><em>Strong encapsulation — to allow a component to declare which of its public types are accessible to other components, and which are not.</em></li><li>Create a minimal JRE image for your application.</li><li>Decrease application memory footprint.</li><li>Optimize application startup time.</li></ul><h4>Steps</h4><p>1. Create a file named module-info.java in src/main/java directory with the following contents:
</p><pre>module spring.petclinic {<br>}</pre><p>Now when you try to compile the application and you will see a lot of errors like this:
</p><pre>Error:(19, 27) java: package org.springframework.boot is not visible<br>(package org.springframework.boot is declared in module spring.boot, but module spring.petclinic does not read it)</pre><p>That means the application behaves as a modular layout and has to wire modules for compilation and runtime.
</p><p>You can use Maven dependency plugin resolve goal to list all module names currently in the classpath and add them into <em>module-info</em>:
</p><pre>./mvnw compile org.apache.maven.plugins:maven-dependency-plugin:3.1.1:resolve</pre><p><em>Notes: The command above doesn’t exclude transitive dependencies or include JDK modules.</em>
</p><p>Unfortunately, <a href="https://docs.oracle.com/javase/10/tools/jdeps.htm" data-href="https://docs.oracle.com/javase/10/tools/jdeps.htm" rel="noopener nofollow" target="_blank">jdeps</a> won’t help you generate the module descriptor for many reasons, but mostly because third party libraries didn’t add module system descriptors yet and they are treated as special <a href="https://docs.oracle.com/javase/10/docs/api/java/lang/module/package-summary.html" data-href="https://docs.oracle.com/javase/10/docs/api/java/lang/module/package-summary.html" rel="noopener nofollow" target="_blank">automatic modules</a>.
</p><p>The final module descriptor should look like this:
</p><pre>open module spring.petclinic {<br>    requires cache.api;<br><br>    requires java.activation;<br>    requires java.instrument;<br>    requires java.persistence;<br>    requires java.sql;<br>    requires java.transaction;<br>    requires java.validation;<br>    requires java.xml.bind;<br><br>    requires org.hibernate.validator;<br><br>    requires spring.beans;<br>    requires spring.boot;<br>    requires spring.boot.autoconfigure;<br>    requires spring.context;<br>    requires spring.core;<br>    requires spring.data.commons;<br>    requires spring.data.jpa;<br>    requires spring.tx;<br>    requires spring.web;<br>    requires spring.webmvc;<br><br>    requires jdk.unsupported;<br>}</pre><p><em>Notes: </em><a href="https://docs.oracle.com/javase/9/docs/api/java/lang/module/ModuleDescriptor.Opens.html" data-href="https://docs.oracle.com/javase/9/docs/api/java/lang/module/ModuleDescriptor.Opens.html" rel="noopener nofollow" target="_blank"><strong><em>open</em></strong></a><em> keyword is mandatory due to reflection requirements by Spring Framework and Hibernate JPA and </em><strong><em>jdk.unsupported</em></strong><em> is for the sun.misc.Unsafe survivors.</em>
</p><p>2. Include maven-jar-plugin to create application jar (<em>classes only</em>) and copy it to <em>modules</em> directory.
</p><pre>&lt;plugin&gt;<br>    &lt;artifactId&gt;maven-jar-plugin&lt;/artifactId&gt;<br>    &lt;version&gt;3.1.0&lt;/version&gt;<br>    &lt;configuration&gt;<br>        &lt;outputDirectory&gt;<br>            ${project.build.directory}/modules<br>        &lt;/outputDirectory&gt;<br>    &lt;/configuration&gt;<br>&lt;/plugin&gt;</pre><p>3. Include maven-dependency-plugin to copy runtime dependencies to <em>modules</em> directory.
</p><pre>&lt;plugin&gt;<br>    &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;<br>    &lt;artifactId&gt;maven-dependency-plugin&lt;/artifactId&gt;<br>    &lt;version&gt;3.1.1&lt;/version&gt;<br>    &lt;executions&gt;<br>        &lt;execution&gt;<br>            &lt;phase&gt;package&lt;/phase&gt;<br>            &lt;goals&gt;<br>                &lt;goal&gt;copy-dependencies&lt;/goal&gt;<br>            &lt;/goals&gt;<br>            &lt;configuration&gt;<br>                &lt;outputDirectory&gt;<br>                    ${project.build.directory}/modules<br>                &lt;/outputDirectory&gt;<br>                &lt;includeScope&gt;runtime&lt;/includeScope&gt;<br>                &lt;excludeArtifactIds&gt;<br>                    spring-boot-devtools<br>                &lt;/excludeArtifactIds&gt;<br>            &lt;/configuration&gt;<br>        &lt;/execution&gt;<br>    &lt;/executions&gt;<br>&lt;/plugin&gt;</pre><p><em>Notes: </em><strong><em>spring-boot-devtools</em></strong><em> dependency should be excluded from modules.</em>
</p><p>4. Include java.persistence and java.transaction module dependencies which fixes automatic modules issues with their updated versions:
</p><pre>&lt;dependency&gt;<br>    &lt;groupId&gt;org.hibernate.javax.persistence&lt;/groupId&gt;<br>    &lt;artifactId&gt;hibernate-jpa-2.1-api&lt;/artifactId&gt;<br>    &lt;version&gt;1.0.2.Final&lt;/version&gt;<br>&lt;/dependency&gt;<br>&lt;dependency&gt;<br>    &lt;groupId&gt;org.jboss.spec.javax.transaction&lt;/groupId&gt;<br>    &lt;artifactId&gt;jboss-transaction-api_1.2_spec&lt;/artifactId&gt;<br>    &lt;version&gt;1.1.1.Final&lt;/version&gt;<br>&lt;/dependency&gt;</pre><p>Also, add a exclusion for old javax.transaction dependency from spring-boot-starter-data-jpa.
</p><pre>&lt;exclusions&gt;<br>    &lt;exclusion&gt;<br>        &lt;artifactId&gt;javax.transaction-api&lt;/artifactId&gt;<br>        &lt;groupId&gt;javax.transaction&lt;/groupId&gt;<br>    &lt;/exclusion&gt;<br>&lt;/exclusions&gt;</pre><p>5. Modify maven-surefire-plugin configuration to disable forked process:
</p><pre>&lt;configuration&gt;<br>    &lt;forkCount&gt;0&lt;/forkCount&gt;<br>&lt;/configuration&gt;</pre><p><em>Notes: When </em><strong><em>module-info.java </em></strong><em>is present and fork process is enabled, surefire creates a mixed classpath with modules and unnamed modules causing module visibility issues and preventing the application to start.</em>
</p><p>6. Package and test the application.
</p><pre>./mvnw clean package</pre><p>7. Run the application using Java module system.
</p><pre>java --add-opens java.base/java.lang=spring.core,javassist \</pre><pre>--module-path target/modules \</pre><pre>--module spring.petclinic/org.springframework.samples.petclinic.PetClinicApplication</pre><p><em>Notes: The — </em><strong><em>add-opens </em></strong><em>is required due to JDK reflection access requested by Spring and Hibernate dependencies.</em>
</p><p>8. You can get rid of main class specified with the module parameter if set module main-class attribute using the following command:
</p><pre>jar --update \<br>    --file=target/modules/spring-petclinic-2.0.0.BUILD-SNAPSHOT.jar \<br>    --main-class=org.springframework.samples.petclinic.PetClinicApplication</pre><p>9. In order to automate the previous step, you can add exec-maven-plugin:
</p><pre>&lt;plugin&gt;<br>    &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;<br>    &lt;artifactId&gt;exec-maven-plugin&lt;/artifactId&gt;<br>    &lt;version&gt;1.6.0&lt;/version&gt;<br>    &lt;executions&gt;<br>        &lt;execution&gt;<br>            &lt;id&gt;module-main-class&lt;/id&gt;<br>            &lt;phase&gt;package&lt;/phase&gt;<br>            &lt;goals&gt;<br>                &lt;goal&gt;exec&lt;/goal&gt;<br>            &lt;/goals&gt;<br>            &lt;configuration&gt;<br>                &lt;executable&gt;jar&lt;/executable&gt;<br>                &lt;arguments&gt;<br>                    &lt;argument&gt;<br>                        --update<br>                    &lt;/argument&gt;<br>                    &lt;argument&gt;<br>                        --file=${project.build.directory}/modules/${project.build.finalName}.jar<br>                    &lt;/argument&gt;<br>                    &lt;argument&gt;<br>                        --main-class=org.springframework.samples.petclinic.PetClinicApplication<br>                    &lt;/argument&gt;<br>                    &lt;argument&gt;<br>                        --module-version=${project.version}<br>                    &lt;/argument&gt;<br>                &lt;/arguments&gt;<br>            &lt;/configuration&gt;<br>        &lt;/execution&gt;<br>    &lt;/executions&gt;<br>&lt;/plugin&gt;</pre><p>10. Now you can run the application without explicit <em>main-class</em> declaration:
</p><pre>./mvnw clean package</pre><pre>java --add-opens java.base/java.lang=spring.core,javassist \</pre><pre>--module-path=target/modules \</pre><pre>--module spring.petclinic</pre><p><em>Notes: This isn’t supported out of the box by Maven yet due to </em><a href="https://issues.apache.org/jira/browse/MJAR-238" data-href="https://issues.apache.org/jira/browse/MJAR-238" rel="noopener nofollow" target="_blank"><em>MJAR-238</em></a><em>.</em>
</p><h3>Congratulations!</h3><p>Now you can migrate any application to Java 11 module system.
</p><p>The full changes can be viewed in the following repository:
</p><div><a href="https://github.com/panga/spring-petclinic/tree/jdk11" data-href="https://github.com/panga/spring-petclinic/tree/jdk11" title="https://github.com/panga/spring-petclinic/tree/jdk11" rel="nofollow">panga/spring-petclinic<br><em>spring-petclinic - A sample Spring-based application</em>github.com</a><a href="https://github.com/panga/spring-petclinic/tree/jdk11" data-media-id="7bd7489434b7cfcdae8c407281abf366" data-thumbnail-img-id="0*vhC8F4KSNkFxepH5" style="background-image: url(&quot;https://cdn-images-1.medium.com/fit/c/360/360/0*vhC8F4KSNkFxepH5&quot;);"></a>
</div><p>It also includes the changes for creating a <a href="https://github.com/panga/spring-petclinic/blob/jdk11/src/main/docker/Dockerfile.musl" data-href="https://github.com/panga/spring-petclinic/blob/jdk11/src/main/docker/Dockerfile.musl" rel="nofollow noopener" target="_blank">Docker image</a> for the JDK 11 and Java Modules application using the steps from the <a href="https://medium.com/@leonardopanga/create-a-cloud-native-image-using-java-modules-a670be616b29" data-href="https://medium.com/@leonardopanga/create-a-cloud-native-image-using-java-modules-a670be616b29" title="https://medium.com/@leonardopanga/create-a-cloud-native-image-using-java-modules-a670be616b29" target="_blank">Create a Cloud Native Image using Java Modules</a> post.
</p>
</div>
</div>
<br><hr>
</body>
</html>