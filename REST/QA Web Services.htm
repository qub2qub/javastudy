<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<title>QA Web Services</title>
    <link rel="stylesheet" href="../Guides/grey.css">
</head>
<body>
<a href="http://javastudy.ru/interview/jee-webservices-questions-answers/">src</a>
<h2>QA Web Services</h2>
<div class="entry-body">
<h3>Вопросы</h3>
<p>1. Что такое веб сервисы?<br>
2. В чем разница между SOA и web service?<br>
3. Что такое SOAP?<br>
4. Что такое REST?<br>
5. В чем разница между REST и SOAP веб сервисами?<br>
6. Как бы вы решили какой из REST или SOAP веб сервисов использовать?<br>
7. Объясните понятие WSDL.<br>
8. Что такое JAX-WS?<br>
9. Расскажите о JAXB.<br>
10. Можем ли мы посылать soap сообщения с вложением?<br>
11. Что такое MTOM?<br>
12. Что такое XOP?<br>
13. Объясните элемент SOAP envelope.<br>
14. Как определяется пространство имен SOAP?<br>
15. Что вы знаете о кодирование в SOAP (encoding)?<br>
16. Что определяет атрибут encodingStyle в SOAP?<br>
17. Какие два конечных типа веб сервисов используют JAX-WS?<br>
18. Какие существуют правила для кодирования записи header?<br>
19. Что вы знаете об инструменте wsimport?<br>
20. Что вы знаете об инструменте wsgen?<br>
21. Какие вы можете выделить различия между SOAP и другими техниками удаленного доступа?<br>
22. Что такое resource в REST?<br>
23. Какие HTTP методы поддерживаются в REST?<br>
24. Когда можно использовать GET запрос вместо POST для создания ресурса?<br>
25. Какая разница между GET и POST запросами?<br>
26. Что означает WADL?<br>
27. Какие вы знаете фреймворки, которые реализуют REST веб сервисы?<br>
28. Какая разница между AJAX и REST?<br>
29. Что делает аннотация @Path?<br>
30.&nbsp;Что делает аннотация @PathParam?<br>
31.&nbsp;Что делает аннотация @QueryParam?<br>
32.&nbsp;Что делает аннотация @MatrixParam?<br>
33.&nbsp;Что делает аннотация @FormParam?<br>
34. Какие два способа получения заголовка HTTP запроса в JAX-RS вы знаете?<br>
35. Как скачать&nbsp;файл с помощью JAX-RS?</p>
<h3>Ответы</h3>
<h4>1. Что такое веб сервисы?</h4>
<p>Веб-служба, веб-сервис (англ. web service) &mdash; идентифицируемая веб-адресом программная система со стандартизированными интерфейсами.&nbsp;Веб-службы могут взаимодействовать друг с другом и со сторонними приложениями посредством сообщений, основанных на определённых протоколах (SOAP, XML-RPC, REST и т. д.). Веб-служба является единицей модульности при использовании сервис-ориентированной архитектуры приложения. К характеристикам веб сервисов относят:</p>
<ul>
<li>Функциональная совместимость</li>
<li>Расширяемость</li>
<li>Возможность машинной обработки описания</li>
</ul>
<h4>2. В чем разница между SOA и web service?</h4>
<p>Сервис-ориентированная архитектура (SOA, service-oriented architecture) &mdash; модульный подход к разработке программного обеспечения, основанный на использовании распределённых, слабо связанных (англ. loose coupling) заменяемых компонентов, оснащённых стандартизированными интерфейсами для взаимодействия по стандартизированным протоколам.&nbsp;Программные комплексы, разработанные в соответствии с сервис-ориентированной архитектурой, обычно реализуются как набор веб-служб, взаимодействующих по протоколу SOAP, но существуют и другие реализации (например, на базе jini, CORBA, на основе REST). Веб сервисы реализующие эту концепцию используют XML, JSON и др., а так же интернет протоколы вроде HTTP(S), SMTP и др..</p>
<h4>3. Что такое SOAP?</h4>
<p>SOAP (от англ. Simple Object Access Protocol &mdash; простой протокол доступа к объектам; вплоть до спецификации 1.2) &mdash; протокол обмена структурированными сообщениями в распределённой вычислительной среде. Первоначально SOAP предназначался в основном для реализации удалённого вызова процедур (RPC). Сейчас протокол используется для обмена произвольными сообщениями в формате XML, а не только для вызова процедур. Официальная спецификация последней версии 1.2 протокола никак не расшифровывает название SOAP. SOAP является расширением протокола XML-RPC.</p>
<p>SOAP может использоваться с любым протоколом прикладного уровня: SMTP, FTP, HTTP, HTTPS и др. Однако его взаимодействие с каждым из этих протоколов имеет свои особенности, которые должны быть определены отдельно. Чаще всего SOAP используется поверх HTTP.</p>
<h4>4. Что такое REST?</h4>
<p>REST (сокр. от англ. Representational State Transfer &mdash; «передача состояния представления») &mdash; архитектурный стиль взаимодействия компонентов распределённого приложения в сети. REST представляет собой согласованный набор ограничений, учитываемых при проектировании распределённой гипермедиа-системы. В определённых случаях (интернет-магазины, поисковые системы, прочие системы, основанные на данных) это приводит к повышению производительности и упрощению архитектуры. В широком смысле компоненты в REST взаимодействуют наподобие взаимодействия клиентов и серверов во Всемирной паутине. REST является альтернативой RPC.</p>
<p>В сети Интернет вызов удалённой процедуры может представлять собой обычный HTTP-запрос (обычно GET или POST; такой запрос называют REST-запрос), а необходимые данные передаются в качестве параметров запроса.&nbsp;Для веб-сервисов, построенных с учётом REST, то есть не нарушающих накладываемых им ограничений, применяют термин «RESTful».</p>
<h4>5. В чем разница между REST и SOAP веб сервисами?</h4>
<ul>
<li>REST поддерживает различные форматы: text, JSON, XML; SOAP &mdash; только XML,</li>
<li>REST работает только по HTTP(S), а SOAP может работать с различными протоколами,</li>
<li>REST может работать с ресурсами. Каждый URL это представление какого-либо ресурса. SOAP работает с операциями, которые реализуют какую-либо бизнес логику с помощью нескольких интерфейсов,</li>
<li>SOAP на основе чтения не может быть помещена в кэш, а REST в этом случае может быть закэширован,</li>
<li>SOAP поддерживает SSL и WS-security, в то время как REST &mdash; только SSL,</li>
<li>SOAP поддерживает ACID (Atomicity, Consistency, Isolation, Durability). REST поддерживает транзакции, но не один из ACID не совместим с двух фазовым коммитом.</li>
</ul>
<h5>REST vs SOAP. Часть 1. Почувствуйте разницу:&nbsp;https://habrahabr.ru/post/131343/</h5>
<h4>6. Как бы вы решили какой из REST или SOAP веб сервисов использовать?</h4>
<p>REST против SOAP можно перефразировать как «Простота против Стандарта». В случае REST (простота) у вас будет скорость, расширяемость и поддержка многих форматов. В случае с SOAP у вас будет больше возможностей по безопасности (WS-security) и транзакционная безопасность (ACID).</p>
<h4>7. Объясните понятие WSDL.</h4>
<p>WSDL (англ. Web Services Description Language) &mdash; язык описания веб-сервисов и доступа к ним, основанный на языке XML.</p>
<p>Каждый документ WSDL 1.1 можно разбить на следующие логические части:</p>
<ul>
<li>определение типов данных (types) &mdash; определение вида отправляемых и получаемых сервисом XML-сообщений</li>
<li>элементы данных (message) &mdash; сообщения, используемые web-сервисом</li>
<li>абстрактные операции (portType) &mdash; список операций, которые могут быть выполнены с сообщениями</li>
<li>связывание сервисов (binding) &mdash; способ, которым сообщение будет доставлено</li>
</ul>
<p></p><!-- Crayon Syntax Highlighter v_2.7.2_beta -->

		<div style="margin-top: 12px; margin-bottom: 12px; font-size: 14px ! important; line-height: 18px ! important; height: auto;" data-settings=" minimize scroll-mouseover wrap" class="crayon-syntax crayon-theme-familiar crayon-font-arial crayon-os-mac print-yes notranslate crayon-wrapped" id="crayon-58ce1e382345b989512252">
		
			<div class="crayon-plain-wrap"><pre>&lt;message name="getTermRequest"&gt;
   &lt;part name="term" type="xs:string"/&gt;
&lt;/message&gt;

&lt;message name="getTermResponse"&gt;
   &lt;part name="value" type="xs:string"/&gt;
&lt;/message&gt;

&lt;portType name="glossaryTerms"&gt;
  &lt;operation name="getTerm"&gt;
      &lt;input message="getTermRequest"/&gt;
      &lt;output message="getTermResponse"/&gt;
  &lt;/operation&gt;
&lt;/portType&gt;</pre></div>
			<div style="position: relative; z-index: 1; overflow: hidden;" class="crayon-main">
				
			</div>
		</div>
<!-- [Format Time: 0.0014 seconds] -->
<p></p>
<h4>8. Что такое JAX-WS?</h4>
<p>Java API for XML Web Services (JAX-WS) &mdash; это прикладной программный интерфейс языка Java для создания веб-служб, являющийся частью платформы Java EE. JAX-WS является заменой технологии JAX-RPC, предоставляя более документо-ориентированную модель сообщений и упрощая разработку[1] веб-служб за счёт использования аннотаций, впервые появившихся в Java SE 5. Технология JAX-WS является стандартом и описана в JSR 224. Некоторые преимущества:</p>
<ul>
<li>Использование аннотаций устраняет необходимость создания дескрипторов веб-служб.</li>
<li>Декларация конечных точек (endpoints) происходит непосредственно в классах Java.</li>
<li>Прямая интеграция с JAXB 2.0.</li>
<li>Внедрение ресурсов (Resource injection).</li>
<li>Поддержка MTOM.</li>
<li>Возможность выбора между двумя путями разработки: снизу-вверх (программист разрабатывает endpoint-классы сам) и сверху-вниз (Java классы генерируются по WSDL).</li>
</ul>
<h4>9. Расскажите о JAXB.</h4>
<p>Java Architecture for XML Binding (JAXB) позволяет Java разработчикам ставить в соответствие Java классы и XML представления. JAXB предоставляет две основные возможности: сериализация&nbsp;Java объектов в XML и наоборот, то есть десериализация&nbsp;из XML обратно в Java объект. Другими словами, JAXB позволяет хранить и извлекать данные в памяти в любом XML-формате, без необходимости выполнения определенного набора процедур загрузки и сохранения XML. Он похож на xsd.exe и XmlSerializer в .NET Framework.</p>
<p>JAXB особенно полезен, когда спецификация является сложной и меняющейся. В этом случае, постоянные изменения схемы XML определений для синхронизации их с определениями Java могут занять много времени и быть подвержены ошибкам.</p>
<h4>10. Можем ли мы посылать soap сообщения с вложением?</h4>
<p>Да, это возможно. Можно посылать вложением различные форматы: PDF, изображения или другие двоичные данные. Сообщения SOAP работают вместе с расширением MIME, в котором предусмотрено multipart/related:</p><!-- Crayon Syntax Highlighter v_2.7.2_beta -->

		<div style="margin-top: 12px; margin-bottom: 12px; font-size: 14px ! important; line-height: 18px ! important; height: auto;" data-settings=" minimize scroll-mouseover wrap" class="crayon-syntax crayon-theme-familiar crayon-font-arial crayon-os-mac print-yes notranslate crayon-wrapped" id="crayon-58ce1e3823465761805718">
		
			<div class="crayon-plain-wrap"><pre>MIME-Version: 1.0
Content-Type: Multipart/Related; boundary=MIME_boundary; type=text/xml;
        start="&lt;claim061400a.xml@ javastudy.ru&gt;"
Content-Description: This is the optional message description.
&lt;?xml version='1.0' ?&gt;
&lt;SOAP-ENV:Envelope
xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;
&lt;SOAP-ENV:Body&gt;
..
&lt;theSignedForm href="cid:claim061400a.tiff@javastudy.ru"/&gt;
..
&lt;/SOAP-ENV:Body&gt;
&lt;/SOAP-ENV:Envelope&gt;

--MIME_boundary
Content-Type: image/tiff
Content-Transfer-Encoding: binary
Content-ID: &lt;claim061400a.tiff@javastudy.ru&gt;

...binary TIFF image...
--MIME_boundary&mdash;</pre></div>
			<div style="position: relative; z-index: 1; overflow: hidden;" class="crayon-main">
				
			</div>
		</div>
<!-- [Format Time: 0.0043 seconds] -->
<p></p>
<h4>11. Что такое MTOM?</h4>
<p><span data-source="This sample demonstrates the use of the Message Transmission Optimization Mechanism (MTOM) message encoding with a WSHttpBinding." data-guid="0f1642dfc2e5e4776bf850911cffcf9b" class="sentence" id="mt1"> MTOM (Message Transmission Optimization Mechanism) &mdash; использование кодирования сообщений с помощью механизма оптимизации передачи сообщений. Э</span><span data-source="MTOM is a mechanism for transmitting large binary attachments with SOAP messages as raw bytes, allowing for smaller messages." data-guid="ea8a1abb11046106664bd0b2bf714901" class="sentence" id="mt2">то механизм передачи больших вложений в двоичном формате с сообщениями протокола SOAP как необработанных байтов, допустимых для меньших сообщений.</span></p>
<h4>12. Что такое XOP?</h4>
<p>XOP (XML-binary Optimized Packaging) &mdash; механизм, рекомендованный W3C для встраивания двоичных данных в набор информационных элементов XML (XML Information Set).</p>
<h4>13. Объясните элемент SOAP envelope.</h4>
<p>Элемент SOAP envelope является корневым элементом SOAP сообщения и определяет XML документ как SOAP сообщение.</p><!-- Crayon Syntax Highlighter v_2.7.2_beta -->

		<div style="margin-top: 12px; margin-bottom: 12px; font-size: 14px ! important; line-height: 18px ! important; height: auto;" data-settings=" minimize scroll-mouseover wrap" class="crayon-syntax crayon-theme-familiar crayon-font-arial crayon-os-mac print-yes notranslate crayon-wrapped" id="crayon-58ce1e382346a390047369">
		
			<div class="crayon-plain-wrap"><pre>&lt;?xml version="1.0"?&gt;
&lt;soap:Envelope
xmlns:soap="http://www.w3.org/2001/12/soap-envelope"
soap:encodingStyle="http://www.w3.org/2001/12/soap-encoding"&gt;
  ...
  Message information
  ...
&lt;/soap:Envelope&gt;</pre></div>
			<div style="position: relative; z-index: 1; overflow: hidden;" class="crayon-main">
				
			</div>
		</div>
<!-- [Format Time: 0.0008 seconds] -->
<p></p>
<h4>14. Как определяется пространство имен SOAP?</h4>
<p></p><!-- Crayon Syntax Highlighter v_2.7.2_beta -->

		<div style="margin-top: 12px; margin-bottom: 12px; font-size: 14px ! important; line-height: 18px ! important; height: auto;" data-settings=" minimize scroll-mouseover wrap" class="crayon-syntax crayon-theme-familiar crayon-font-arial crayon-os-mac print-yes notranslate crayon-wrapped" id="crayon-58ce1e382346d379596354">
		
			<div class="crayon-plain-wrap"><pre>xmlns:soap=http://www.w3.org/2001/12/soap-envelope</pre></div>
			<div style="position: relative; z-index: 1; overflow: hidden;" class="crayon-main">
				
			</div>
		</div>
<!-- [Format Time: 0.0002 seconds] -->
<p></p>
<h4>15. Что вы знаете о кодирование в SOAP (encoding)?</h4>
<p>Кодирование SOAP представляет собой метод&nbsp;для структурирования запроса, который предлагается в рамках спецификации SOAP, известный как SOAP-сериализация.</p>
<h4>16. Что определяет атрибут encodingStyle в SOAP?</h4>
<p>SOAP encodingStyle определяет правила сериализации, используемые в сообщении SOAP. Этот атрибут может появиться на любом элементе, и область видимости этого атрибута будет распространяться на все дочерние элементы, даже на тех, которые не имеют явно этого атрибута. Для сообщений SOAP по умолчанию кодирование не определено.</p><!-- Crayon Syntax Highlighter v_2.7.2_beta -->

		<div style="margin-top: 12px; margin-bottom: 12px; font-size: 14px ! important; line-height: 18px ! important; height: auto;" data-settings=" minimize scroll-mouseover wrap" class="crayon-syntax crayon-theme-familiar crayon-font-arial crayon-os-mac print-yes notranslate crayon-wrapped" id="crayon-58ce1e3823470980607768">
		
			<div class="crayon-plain-wrap"><pre>SOAP-ENV:encodingStyle="http://www.w3.org/2001/12/soap-encoding"</pre></div>
			<div style="position: relative; z-index: 1; overflow: hidden;" class="crayon-main">
				
			</div>
		</div>
<!-- [Format Time: 0.0002 seconds] -->
<p></p>
<h4>17. Какие два конечных типа веб сервисов используют JAX-WS?</h4>
<ul class="ul1">
<li class="li9">RPC (remote procedure call) style web service в&nbsp;JAX-WS;<span class="s1">&nbsp;</span></li>
<li class="li9">document style web service в&nbsp;JAX-WS.<span class="s1">&nbsp;</span></li>
</ul>
<h4>18. Какие существуют правила для кодирования записи header?</h4>
<ul class="ul1">
<li class="li9">заголовок должен быть идентифицирован с помощью полного имени, которое содержит пространство имен URI&nbsp;и локальное имя. Все непосредственные дочерние элементы SOAP заголовка должны быть заданы в пространстве имен,</li>
<li class="li9">атрибут&nbsp;SOAP encodingStyle должен использоваться для указания стиля кодирования заголовка,</li>
<li class="li9">атрибут&nbsp;SOAP mustUnderstand и атрибут&nbsp;SOAP actor должны использоваться для указания того, как обрабатывать запись и кем.</li>
</ul>
<h4>19. Что вы знаете об инструменте wsimport?</h4>
<p>Инструмент wsimport используется для синтаксического анализа существующих Web Services Description Language (WSDL-файл) и генерировать необходимые файлы (JAX-WS портируемые&nbsp;артефакты) для клиента веб-сервиса для доступа к опубликованному веб-сервису.</p>
<h4>20. Что вы знаете об инструменте wsgen?</h4>
<p>Инструмент wsgen используется для анализа существующего класса реализации веб-службы и создает необходимые файлы (JAX-WS портируемые&nbsp;артефакты) для развертывания веб-служб.</p>
<h4>21. Какие вы можете выделить различия между SOAP и другими техниками удаленного доступа?</h4>
<ul>
<li>SOAP проще в использовании, т.к. он не симметричный вроде DCOM или COBRA,</li>
<li>SOAP является&nbsp;более независимым от платформы и&nbsp;языка в отличие от DCOM или&nbsp;CORBA,</li>
<li>SOAP использует HTTP в качестве транспортного протокола и данные сохраняются в формате XML, который может быть прочтен человеком, тогда как DCOM или&nbsp;CORBA имеют свои собственные бинарные форматы, которые используются для транспортировки данных сложным образом.</li>
<li>SOAP идентифицирует объект, отличный от конечного URL. Объекты SOAP являются независимыми и их сложно поддерживать. В случае других методов удаленного доступа работа в этом случае может быть проще.</li>
</ul>
<h4>22. Что такое resource в REST?</h4>
<p>Это уникальный URL с представлением объекта, который может быть получен с помощью запросов GET и изменен с помощью PUT, POST, DELETE.</p>
<h4>23. Какие HTTP методы поддерживаются в REST?</h4>
<ul class="ul1">
<li class="li3">GET;</li>
<li class="li3">POST;</li>
<li class="li3">PUT;</li>
<li class="li3">DELETE;</li>
<li class="li3">OPTIONS;</li>
<li class="li3">HEAD.</li>
</ul>
<h4>24. Когда можно использовать GET запрос вместо POST для создания ресурса?</h4>
<p>Невозможно использовать GET запрос для изменения (создания) ресурса.</p>
<h4>25. Какая разница между GET и POST запросами?</h4>
<p>GET передает данные серверу используя URL, когда POST передает данные, используя тело HTTP запроса.</p>
<p>Длина URL’а ограничена 1024 символами, это и будет верхним ограничением для данных, которые можно отослать GET’ом.</p>
<p>POST может отправлять гораздо большие объемы данных. Лимит устанавливается веб-сервером и обычно равен около 2MB.</p>
<p>Передача данных методом POST более безопасна, чем методом GET, так как секретные данные (например пароль) не отображаются напрямую в web-клиенте пользователя (в отличии от URL, который виден почти всегда).</p>
<h4>26. Что означает WADL?</h4>
<p>Web Application Description Language (WADL) &mdash; машинно-читаемое XML-описание для web-приложений HTTP (как правило, веб-сервисы REST). Аналог WSDL для SOAP.</p>
<p>WADL моделирует ресурсы, предоставляемые сервисом, и взаимосвязи между ними. WADL был предложен как стандарт W3C компанией Sun Microsystems в августе 2009, но консорциум не имеет никаких планов насчёт него и WADL ещё не получил широкого применения.</p>
<h4>27. Какие вы знаете фреймворки, которые реализуют REST веб сервисы?</h4>
<p>Их много, вот некоторые из них:&nbsp;Jersey, Restlet, EasyRest.</p>
<h4>28. Какая разница между AJAX и REST?</h4>
<ul>
<li>В AJAX запрос посылается к серверу с помощью объектов XMLHttpRequest. В REST используется структура URL и использование ресурсов вращается вокруг шаблона запрос\ответ.</li>
<li>AJAX асинхронно исключает&nbsp;взаимодействие между клиентом и сервером, в то время как REST требует взаимодействия между клиентом и сервером.</li>
<li>AJAX технология «<span style="color: #920000;">set</span>«. REST &mdash;&nbsp;предоставляет методы для пользователей для запроса данных или информации от сервера.</li>
</ul>
<h4>29. Что делает аннотация @Path?</h4>
<p>Аннотация <span style="color: #920000;">@Path</span> связывает URI шаблон с Java методом.</p><!-- Crayon Syntax Highlighter v_2.7.2_beta -->

		<div style="margin-top: 12px; margin-bottom: 12px; font-size: 14px ! important; line-height: 18px ! important; height: auto;" data-settings=" minimize scroll-mouseover wrap" class="crayon-syntax crayon-theme-familiar crayon-font-arial crayon-os-mac print-yes notranslate crayon-wrapped" id="crayon-58ce1e3823477406660556">
		
			<div class="crayon-plain-wrap"><pre>import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.core.Response;

@Path("/persons")
public class PersonRestService {

  @GET
  public Response getPerson() {
      return Response.status(200).entity("getPerson is called").build();
  } 

 @GET
 @Path("/vip")
 public Response getPersonVIP() {
       return Response.status(200).entity("getPersonVIP is called").build();
 }
}</pre></div>
			<div style="position: relative; z-index: 1; overflow: hidden;" class="crayon-main">
				
			</div>
		</div>
<!-- [Format Time: 0.0018 seconds] -->
<p>При вызове URI: ‘<span style="color: #920000;">/persons</span>‘ будет вызван метод <span style="color: #920000;">getPerson</span>;</p>
<p>При вызове URI: ‘<span style="color: #920000;">/persons/vip</span>‘ будет вызван метод&nbsp;<span style="color: #920000;">getPersonVIP</span>;</p>
<h4>30.&nbsp;Что делает аннотация @PathParam?</h4>
<p><span style="color: #920000;">@PathParam</span> внедряет значения параметра URI, который задан в выражении.</p><!-- Crayon Syntax Highlighter v_2.7.2_beta -->

		<div style="margin-top: 12px; margin-bottom: 12px; font-size: 14px ! important; line-height: 18px ! important; height: auto;" data-settings=" minimize scroll-mouseover wrap" class="crayon-syntax crayon-theme-familiar crayon-font-arial crayon-os-mac print-yes notranslate crayon-wrapped" id="crayon-58ce1e382347a730467510">
		
			<div class="crayon-plain-wrap"><pre>import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.core.Response;

@Path("/persons")
public class PersonRestService {

@GET
@Path("{id}")
public Response getPersonById(@PathParam("id") String id) {

  return Response.status(200).entity("getPersonById is called, id : " + id).build();
 }
}</pre></div>
			<div style="position: relative; z-index: 1; overflow: hidden;" class="crayon-main">
				
			</div>
		</div>
<!-- [Format Time: 0.0015 seconds] -->
<p>При вызове URI ‘<span style="color: #920000;">/persons/1</span>‘ получим вызов <span style="color: #920000;">getPersonById</span> и <span style="color: #920000;">id = 1</span>;</p>
<h4>31.&nbsp;Что делает аннотация @QueryParam?</h4>
<p><span style="color: #920000;">@QueryParam</span> внедряет параметр запроса URI в Java метод.</p><!-- Crayon Syntax Highlighter v_2.7.2_beta -->

		<div style="margin-top: 12px; margin-bottom: 12px; font-size: 14px ! important; line-height: 18px ! important; height: auto;" data-settings=" minimize scroll-mouseover wrap" class="crayon-syntax crayon-theme-familiar crayon-font-arial crayon-os-mac print-yes notranslate crayon-wrapped" id="crayon-58ce1e382347d901660406">
		
			<div class="crayon-plain-wrap"><pre>import java.util.List;
import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.QueryParam;
import javax.ws.rs.core.Response;

@Path("/persons")
public class PersonService {

@GET
@Path("/query")
public Response getPersons(
@QueryParam("from") int from,
@QueryParam("to") int to,
@QueryParam("orderBy") List&lt;String&gt; orderBy) {

return Response
  .status(200)
  .entity("getPersons is called, from : " + from + ", to : " + to
+ ", orderBy" + orderBy.toString()).build();

 }
}</pre></div>
			<div style="position: relative; z-index: 1; overflow: hidden;" class="crayon-main">
				
			</div>
		</div>
<!-- [Format Time: 0.0021 seconds] -->
<p>При вызове URI: “<span style="color: #920000;">/persons/query?from=10&amp;to=20&amp;orderBy=age&amp;orderBy=name</span>” получим вызов метода&nbsp;<span class="s13"><span style="color: #920000;">getPersons</span> и <span style="color: #920000;">from</span>&nbsp;<span style="color: #920000;">= 10</span>, <span style="color: #920000;">to&nbsp;=&nbsp;20</span>, <span style="color: #920000;">orderBy<b>[</b>age, name<b>]</b></span></span></p>
<h4>32.&nbsp;Что делает аннотация @MatrixParam?</h4>
<p><span style="color: #920000;">@MatrixParam</span> устанавливает соответствие&nbsp;“<span style="color: #920000;">name=value</span>” в пути URI.</p><!-- Crayon Syntax Highlighter v_2.7.2_beta -->

		<div style="margin-top: 12px; margin-bottom: 12px; font-size: 14px ! important; line-height: 18px ! important; height: auto;" data-settings=" minimize scroll-mouseover wrap" class="crayon-syntax crayon-theme-familiar crayon-font-arial crayon-os-mac print-yes notranslate crayon-wrapped" id="crayon-58ce1e3823480876095517">
		
			<div class="crayon-plain-wrap"><pre>import javax.ws.rs.GET;
import javax.ws.rs.MatrixParam;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.core.Response;

@Path("/books")
public class BookService {

@GET
@Path("{year}")
public Response getBooks(@PathParam("year") String year,
@MatrixParam("author") String author,
@MatrixParam("country") String country) {

return Response
.status(200)
.entity("getBooks is called, year : " + year
+ ", author : " + author + ", country : " + country)
.build();

 }
}</pre></div>
			<div style="position: relative; z-index: 1; overflow: hidden;" class="crayon-main">
				
			</div>
		</div>
<!-- [Format Time: 0.0020 seconds] -->
<p></p>
<div class="p30"><span class="s4">При вызове&nbsp;URI: “<span style="color: #920000;">/books/2015</span>” будет вызван метод: </span><span style="color: #920000;">getBooks</span>, <span style="color: #920000;">year : 2015</span>, <span style="color: #920000;">author : null</span>, <span style="color: #920000;">country : null</span>.</div>
<div class="p3">При вызове URI: “<span style="color: #920000;">/books/2015;author= doyle;country=scotland</span>” будет вызван метод: <span class="s13"><span style="color: #920000;">getBooks</span>, <span style="color: #920000;">year : 2015</span>, <span style="color: #920000;">author : doyle</span>, <span style="color: #920000;">country : scotland</span>.</span></div>
<h4>33.&nbsp;Что делает аннотация @FormParam?</h4>
<p><span style="color: #920000;">@FormParam</span> связывает HTML параметры в Java методе.</p><!-- Crayon Syntax Highlighter v_2.7.2_beta -->

		<div style="margin-top: 12px; margin-bottom: 12px; font-size: 14px ! important; line-height: 18px ! important; height: auto;" data-settings=" minimize scroll-mouseover wrap" class="crayon-syntax crayon-theme-familiar crayon-font-arial crayon-os-mac print-yes notranslate crayon-wrapped" id="crayon-58ce1e3823483353676878">
		
			<div class="crayon-plain-wrap"><pre>import javax.ws.rs.FormParam;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.core.Response;

@Path("/persons")
public class PersonService {

@POST
@Path("/add")
public Response addPerson(
@FormParam("name") String name,
@FormParam("age") int age) {

return Response.status(200)
.entity("addPerson is called, name : " + name + ", age : " + age)
.build();

 }
}</pre></div>
			<div style="position: relative; z-index: 1; overflow: hidden;" class="crayon-main">
				
			</div>
		</div>
<!-- [Format Time: 0.0017 seconds] -->
<p></p>
<div class="p3">HTML форма:</div>
<div class="p3">
<!-- Crayon Syntax Highlighter v_2.7.2_beta -->

		<div style="margin-top: 12px; margin-bottom: 12px; font-size: 14px ! important; line-height: 18px ! important; height: auto;" data-settings=" minimize scroll-mouseover wrap" class="crayon-syntax crayon-theme-familiar crayon-font-arial crayon-os-mac print-yes notranslate crayon-wrapped" id="crayon-58ce1e3823486955658134">
		
			<div class="crayon-plain-wrap"><pre>&lt;html&gt;
 &lt;body&gt;
  &lt;form action="/persons/add" method="post"&gt;
   &lt;p&gt;
   Name : &lt;input type="text" name="name" /&gt;
   &lt;/p&gt;
   &lt;p&gt;
   Age : &lt;input type="text" name="age" /&gt;
   &lt;/p&gt;
   &lt;input type="submit" value="Add Person" /&gt;
  &lt;/form&gt;

 &lt;/body&gt;
&lt;/html&gt;</pre></div>
			<div style="position: relative; z-index: 1; overflow: hidden;" class="crayon-main">
				
			</div>
		</div>
<!-- [Format Time: 0.0013 seconds] -->

</div>
<h4>34. Какие два способа получения заголовка HTTP запроса в JAX-RS вы знаете?</h4>
<ol>
<li>Внедрить в метод с помощью <span style="color: #920000;">@HeaderParam</span></li>
</ol>
<p></p><!-- Crayon Syntax Highlighter v_2.7.2_beta -->

		<div style="margin-top: 12px; margin-bottom: 12px; font-size: 14px ! important; line-height: 18px ! important; height: auto;" data-settings=" minimize scroll-mouseover wrap" class="crayon-syntax crayon-theme-familiar crayon-font-arial crayon-os-mac print-yes notranslate crayon-wrapped" id="crayon-58ce1e3823489560696751">
		
			<div class="crayon-plain-wrap"><pre>import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.HeaderParam;
import javax.ws.rs.core.Response;


@Path("/persons")
public class PersonService {

@GET
@Path("/get")
public Response getPerson(
@HeaderParam("person-agent") String personAgent) {

return Response.status(200)
.entity("getPerson is called, personAgent : " + personAgent)
.build();

 }
}</pre></div>
			<div style="position: relative; z-index: 1; overflow: hidden;" class="crayon-main">
				
			</div>
		</div>
<!-- [Format Time: 0.0015 seconds] -->
<p>Вызвав URI: “<span style="color: #920000;">/persons/get</span>”, будет вызван метод <span style="color: #920000;">getPerson</span> с параметром <span style="color: #920000;">personAgent : Mozilla/5.0 (Windows NT 6.1; rv:5.0) Gecko/20100101 Firefox/5.0</span></p>
<p>2) Программно с помощью аннотации&nbsp;<span style="color: #920000;">@Context</span></p><!-- Crayon Syntax Highlighter v_2.7.2_beta -->

		<div style="margin-top: 12px; margin-bottom: 12px; font-size: 14px ! important; line-height: 18px ! important; height: auto;" data-settings=" minimize scroll-mouseover wrap" class="crayon-syntax crayon-theme-familiar crayon-font-arial crayon-os-mac print-yes notranslate crayon-wrapped" id="crayon-58ce1e382348b555551737">
		
			<div class="crayon-plain-wrap"><pre>import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.HttpHeaders;
import javax.ws.rs.core.Response;

@Path("/persons")
public class PersonService {

@GET
@Path("/get")
public Response getPerson(@Context HttpHeaders headers) {

String personAgent = headers.getRequestHeader("person-agent").get(0);

return Response.status(200)
.entity("getPerson is called, personAgent : " + personAgent)
.build();

 }
}</pre></div>
			<div style="position: relative; z-index: 1; overflow: hidden;" class="crayon-main">
				
			</div>
		</div>
<!-- [Format Time: 0.0019 seconds] -->
<p>Вызываем URI: “<span style="color: #920000;">/persons/get</span>”, результат: вызов метода <span style="color: #920000;">getPerson</span> и <span style="color: #920000;">personAgent : Mozilla/5.0 (Windows NT 6.1; rv:5.0) Gecko/20100101 Firefox/5.0</span></p>
<h4>35. Как скачать&nbsp;файл с помощью JAX-RS?</h4>
<ul>
<li>Задать аннотацию <span style="color: #920000;">@Produces(‘?’)</span> над сервисным методом с указанием возвращаемого в ответе типа. Вместо <span style="color: #920000;">‘?’</span> используйте <span style="color: #920000;">text/plain</span>, <span style="color: #920000;">image/png</span> и т.д.</li>
<li>Установить <span style="color: #920000;">Conent-Description</span> в заголовке ответа для оповещения браузера показать всплывающее окно для загрузки.</li>
</ul>
<p></p><!-- Crayon Syntax Highlighter v_2.7.2_beta -->

		<div style="margin-top: 12px; margin-bottom: 12px; font-size: 14px ! important; line-height: 18px ! important; height: auto;" data-settings=" minimize scroll-mouseover wrap" class="crayon-syntax crayon-theme-familiar crayon-font-arial crayon-os-mac print-yes notranslate crayon-wrapped" id="crayon-58ce1e382348f510400776">
		
			<div class="crayon-plain-wrap"><pre>import java.io.File;
import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.Response.ResponseBuilder;

@Path("/image")
public class ImageService {

private static final String FILE_PATH = "c:\\my.png";

@GET
@Path("/get")
@Produces("image/png")
public Response getFile() {

File file = new File(FILE_PATH);

ResponseBuilder response = Response.ok((Object) file);
response.header("Content-Disposition",
"attachment; filename=image_from_server.png");
return response.build();
 }
}</pre></div>
			<div style="position: relative; z-index: 1; overflow: hidden;" class="crayon-main">
				
			</div>
		</div>
<!-- [Format Time: 0.0023 seconds] -->
<p>&nbsp;</p></div>
</body>
</html>