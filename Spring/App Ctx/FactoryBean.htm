<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<title>FactoryBean</title>
	<link rel="stylesheet" href="grey.css">
</head>
<body>
<div class="blog--post"><p></p><p> In this post, I’ll look at Spring’s <code> org.springframework.beans.factory.FactoryBean&lt;T&gt;</code> interface. The definition of this interface is: </p> <p></p>
<pre class="prettyprint"><code class="prettyprint java"><br><span class="kwd">public</span><span class="pln"> </span><span class="kwd">interface</span><span class="pln"> </span><span class="typ">FactoryBean</span><span class="pun">&lt;</span><span class="pln">T</span><span class="pun">&gt;</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  T getObject</span><span class="pun">()</span><span class="pln"> </span><span class="kwd">throws</span><span class="pln"> </span><span class="typ">Exception</span><span class="pun">;</span><span class="pln">
  </span><span class="typ">Class</span><span class="pun">&lt;</span><span class="pln">T</span><span class="pun">&gt;</span><span class="pln"> getObjectType</span><span class="pun">();</span><span class="pln">
  </span><span class="kwd">boolean</span><span class="pln"> isSingleton</span><span class="pun">();</span><span class="pln">
</span><span class="pun">}</span></code></pre><p></p><p> A <code>FactoryBean</code> is a pattern to encapsulate interesting object construction logic in a class. It might be used, for example, to encode the construction of a complex object graph in a reusable way. Often this is used to construct complex objects that have many dependencies. It might also be used when the construction logic itself is highly volatile and depends on the configuration. A <code>FactoryBean</code> is also useful to help Spring construct objects that it couldn’t easily construct itself. For example, in order to inject a reference to a bean that was obtained from JNDI, the reference must first be obtained. You can use the <code>JndiFactoryBean</code> to obtain this reference in a consistent way. You may inject the result of a <code>FactoryBean</code>’s <code>getObject()</code> method into any other property. </p> <p></p>
<p> Suppose you have a <code>Person</code> class whose definition is thus:</p>
<pre class="prettyprint"><code class="prettyprint java"><br><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">Person</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> 
 </span><span class="kwd">private</span><span class="pln"> </span><span class="typ">Car</span><span class="pln"> car </span><span class="pun">;</span><span class="pln">
 </span><span class="kwd">private</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> setCar</span><span class="pun">(</span><span class="typ">Car</span><span class="pln"> car</span><span class="pun">){</span><span class="pln"> </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">car </span><span class="pun">=</span><span class="pln"> car</span><span class="pun">;</span><span class="pln">  </span><span class="pun">}</span><span class="pln">	
</span><span class="pun">}</span></code></pre><p>and a <code>FactoryBean</code> whose definition is thus:</p>
<pre class="prettyprint"><code class="prettyprint java"><br><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">MyCarFactoryBean</span><span class="pln"> </span><span class="kwd">implements</span><span class="pln"> </span><span class="typ">FactoryBean</span><span class="pun">&lt;</span><span class="typ">Car</span><span class="pun">&gt;{</span><span class="pln">
  </span><span class="kwd">private</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> make</span><span class="pun">;</span><span class="pln"> 
  </span><span class="kwd">private</span><span class="pln"> </span><span class="kwd">int</span><span class="pln"> year </span><span class="pun">;</span><span class="pln">

  </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> setMake</span><span class="pun">(</span><span class="typ">String</span><span class="pln"> m</span><span class="pun">){</span><span class="pln"> </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">make </span><span class="pun">=</span><span class="pln">m </span><span class="pun">;</span><span class="pln"> </span><span class="pun">}</span><span class="pln">

  </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> setYear</span><span class="pun">(</span><span class="kwd">int</span><span class="pln"> y</span><span class="pun">){</span><span class="pln"> </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">year </span><span class="pun">=</span><span class="pln"> y</span><span class="pun">;</span><span class="pln"> </span><span class="pun">}</span><span class="pln">

  </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">Car</span><span class="pln"> getObject</span><span class="pun">(){</span><span class="pln"> 
    </span><span class="com">// wouldn't be a very useful FactoryBean </span><span class="pln">
    </span><span class="com">// if we could simply instantiate the object!</span><span class="pln">
    </span><span class="typ">CarBuilder</span><span class="pln"> cb </span><span class="pun">=</span><span class="pln"> </span><span class="typ">CarBuilder</span><span class="pun">.</span><span class="pln">car</span><span class="pun">();</span><span class="pln">
	
    </span><span class="kwd">if</span><span class="pun">(</span><span class="pln">year</span><span class="pun">!=</span><span class="lit">0</span><span class="pun">)</span><span class="pln"> cb</span><span class="pun">.</span><span class="pln">setYear</span><span class="pun">(</span><span class="kwd">this</span><span class="pun">.</span><span class="pln">year</span><span class="pun">);</span><span class="pln">
    </span><span class="kwd">if</span><span class="pun">(</span><span class="typ">StringUtils</span><span class="pun">.</span><span class="pln">hasText</span><span class="pun">(</span><span class="kwd">this</span><span class="pun">.</span><span class="pln">make</span><span class="pun">))</span><span class="pln"> cb</span><span class="pun">.</span><span class="pln">setMake</span><span class="pun">(</span><span class="pln"> </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">make </span><span class="pun">);</span><span class="pln"> 
    </span><span class="kwd">return</span><span class="pln"> cb</span><span class="pun">.</span><span class="pln">factory</span><span class="pun">();</span><span class="pln"> 
  </span><span class="pun">}</span><span class="pln">

  </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">Class</span><span class="pun">&lt;</span><span class="typ">Car</span><span class="pun">&gt;</span><span class="pln"> getObjectType</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">return</span><span class="pln"> </span><span class="typ">Car</span><span class="pun">.</span><span class="kwd">class</span><span class="pln"> </span><span class="pun">;</span><span class="pln"> </span><span class="pun">}</span><span class="pln"> 

  </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">boolean</span><span class="pln"> isSingleton</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">false</span><span class="pun">;</span><span class="pln"> </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></code></pre>
<p> You could wire up a <code>Car</code> instance using a hypothetical <code>CarFactoryBean</code> like this: </p>
<pre class="prettyprint"><code class="prettyprint xml"><br><span class="tag">&lt;bean</span><span class="pln"> </span><span class="atn">class</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="atv">"a.b.c.MyCarFactoryBean"</span><span class="pln"> </span><span class="atn">id</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="atv">"car"</span><span class="tag">&gt;</span><span class="pln">
	</span><span class="tag">&lt;property</span><span class="pln"> </span><span class="atn">name</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="atv">"make"</span><span class="pln"> </span><span class="atn">value</span><span class="pln"> </span><span class="pun">=</span><span class="atv">"Honda"</span><span class="tag">/&gt;</span><span class="pln">
	</span><span class="tag">&lt;property</span><span class="pln"> </span><span class="atn">name</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="atv">"year"</span><span class="pln"> </span><span class="atn">value</span><span class="pln"> </span><span class="pun">=</span><span class="atv">"1984"</span><span class="tag">/&gt;</span><span class="pln">
</span><span class="tag">&lt;/bean&gt;</span><span class="pln">
</span><span class="tag">&lt;bean</span><span class="pln"> </span><span class="atn">class</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="atv">"a.b.c.Person"</span><span class="pln"> </span><span class="atn">id</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="atv">"josh"</span><span class="tag">&gt;</span><span class="pln">
	</span><span class="tag">&lt;property</span><span class="pln"> </span><span class="atn">name</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="atv">"car"</span><span class="pln"> </span><span class="atn">ref</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="atv">"car"</span><span class="tag">/&gt;</span><span class="pln">
</span><span class="tag">&lt;/bean&gt;</span></code></pre><p></p><p> In this example, the result of the <code>FactoryBean</code>’s <code>getObject</code> method will be passed, not the actual <code>FactoryBean</code> itself. Spring knows that the result can be injected into the target property because it’ll consult the <code>FactoryBean</code>’s <code>getObjectType()</code> return value to determine the type of the factoried object, and then it will check whether that type can be injected into the injection site. Spring reserves - but in practice doesn’t always exercise - the right to cache the returned bean if the <code>FactoryBean</code>’s <code>isSingleton()</code> method returns true. </p> <p></p>
<p> If you are using Spring's newer (and far more elegant, in my humble opinion) Java based configuration, then you will find this doesn't work quite as you'd expect. It can still be made to work, but you must dereference the <code>FactoryBean</code> explicitly in Java configuration and call <code>getObject()</code> yourself, like this: </p>
<pre class="prettyprint"><code class="prettyprint java"><br><span class="com">// identical configuration in Java to the XML above			</span><span class="pln">
</span><span class="lit">@Configuration</span><span class="pln"> 
</span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">CarConfiguration</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> 

  </span><span class="lit">@Bean</span><span class="pln"> 
  </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">MyCarFactoryBean</span><span class="pln"> carFactoryBean</span><span class="pun">(){</span><span class="pln"> 
	</span><span class="typ">MyCarFactoryBean</span><span class="pln"> cfb </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">MyCarFactoryBean</span><span class="pun">();</span><span class="pln">
	cfb</span><span class="pun">.</span><span class="pln">setMake</span><span class="pun">(</span><span class="str">"Honda"</span><span class="pun">);</span><span class="pln">
	cfb</span><span class="pun">.</span><span class="pln">setYear</span><span class="pun">(</span><span class="lit">1984</span><span class="pun">);</span><span class="pln">
	</span><span class="kwd">return</span><span class="pln"> cfb</span><span class="pun">;</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">

  </span><span class="lit">@Bean</span><span class="pln">
  </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">Person</span><span class="pln"> aPerson</span><span class="pun">(){</span><span class="pln"> 
	</span><span class="typ">Person</span><span class="pln"> person </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Person</span><span class="pun">();</span><span class="pln">
	person</span><span class="pun">.</span><span class="pln">setCar</span><span class="pun">(</span><span class="pln"> carFactoryBean</span><span class="pun">().</span><span class="pln">getObject</span><span class="pun">());</span><span class="pln">
	</span><span class="kwd">return</span><span class="pln"> person</span><span class="pun">;</span><span class="pln"> 
  </span><span class="pun">}</span><span class="pln">	
</span><span class="pun">}</span></code></pre><p></p><p> Note that, essentially, all beans configured in Spring end up in the same place at runtime. You may define a <code>FactoryBean</code> in Java configuration (as above) but then use the factory bean in XML, like you would a <code>FactoryBean</code> defined in XML. </p> <p>Spring <code> FactoryBean</code>s have all the other characteristics of any other Spring bean, including the lifecycle hooks and services (like AOP) that all beans in the Spring container enjoy. </p> <p>So, if you’d like a chance to perform construction logic after the properties on the <code>FactoryBean</code> have been set, but before the <code>getObject()</code> method has been called, then you can tell the Spring container give your <code>FactoryBean</code> a callback. One way to do this is to implement the <code>InitializingBean</code> interface. This will be called no matter what. A far more POJO-centric alternative is to annotate a method with <code>@PostConstruct</code>. This method will be called, in this case, after both the <code>make</code> and the <code>year</code> properties have been set. You might use this callback to do sanity checks before the object construction’s finished, but after the configuration by the container has finished.</p> <p></p>
<pre class="prettyprint"><code class="prettyprint java"><br><span class="pln"> </span><span class="lit">@PostConstruct</span><span class="pln"> 
 </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> setup</span><span class="pun">()</span><span class="pln"> </span><span class="kwd">throws</span><span class="pln"> </span><span class="typ">Throwable</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> 
   </span><span class="com">// these methods throw an exception that </span><span class="pln">
   </span><span class="com">// will arrest construction if the assertions aren't met</span><span class="pln">
   </span><span class="typ">Assert</span><span class="pun">.</span><span class="pln">notNull</span><span class="pun">(</span><span class="kwd">this</span><span class="pun">.</span><span class="pln">make</span><span class="pun">,</span><span class="pln"> </span><span class="str">"the 'make' must not be null"</span><span class="pun">)</span><span class="pln">	</span><span class="pun">;</span><span class="pln">
   </span><span class="typ">Assert</span><span class="pun">.</span><span class="pln">isTrue</span><span class="pun">(</span><span class="kwd">this</span><span class="pun">.</span><span class="pln">year </span><span class="pun">&gt;</span><span class="pln"> </span><span class="lit">0</span><span class="pun">,</span><span class="pln"> </span><span class="str">"the 'year' must be a valid value"</span><span class="pun">);</span><span class="pln"> 
 </span><span class="pun">}</span></code></pre><p></p><p>One important takeaway here is that it is the <code>FactoryBean</code>, <em>not</em> the factoried object itself, that lives in the Spring container and enjoys the lifecycle hooks and container services. The returned instance is transient - Spring knows nothing about what you’ve returned from <code>getObject() </code>, and will make no attempt to exercise any lifecycle hooks or anything else on it. </p> <p></p></div>
</body>
</html>