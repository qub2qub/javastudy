<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<title>Spring Data JPA Tutorial</title>
    <link rel="stylesheet" href="../../Guides/grey.css">
    <style type="text/css">
    	div.comment-container {
    		border: 1px solid #920000;
    	}
    </style>
</head>
<body>
<p>Spring Data By Petri Kainulainen<br>
<a href="https://www.petrikainulainen.net/spring-data-jpa-tutorial/">src</a>
<a href="https://github.com/pkainulainen/spring-data-jpa-examples">github</a></p>
<h2>1 Introduction</h2>
<div class="post_content cye-lm-tag" itemprop="articleBody"><p class="cye-lm-tag">Creating repositories that use the Java Persistence API is a cumbersome process that takes a lot of time and requires a lot of boilerplate code. We can eliminate some boilerplate code by following these steps:</p>
<ol><li>Create an abstract base repository class that provides CRUD operations for entities.</li><li>Create the concrete repository class that extends the abstract base repository class.</li></ol><p class="cye-lm-tag">The problem of this approach is that we still have to write the code that creates our database queries and invokes them. To make matters worse, we have to do this every time when we want to create a new database query. <strong>This is a waste of time</strong>.</p>
<p class="cye-lm-tag">What would you say if I would tell you that we can create JPA repositories without writing any boilerplate code?</p>
<p class="cye-lm-tag">The odds are that you might not believe me, but Spring Data JPA helps us to do just that. <a href="http://projects.spring.io/spring-data-jpa/" target="_blank">The website of the Spring Data JPA project states that</a>:</p>
<blockquote><p class="cye-lm-tag">Implementing a data access layer of an application has been cumbersome for quite a while. Too much boilerplate code has to be written to execute simple queries as well as perform pagination, and auditing. Spring Data JPA aims to significantly improve the implementation of data access layers by reducing the effort to the amount that’s actually needed. As a developer you write your repository interfaces, including custom finder methods, and Spring will provide the implementation automatically</p>
</blockquote><p class="cye-lm-tag">This blog post provides an introduction to Spring Data JPA. We will learn what Spring Data JPA really is and take a quick look at the Spring Data repository interfaces.</p>
<p class="cye-lm-tag">Let’s get started.</p>
<p class="cye-lm-tag"></p>
<h2>What Spring Data JPA Is?</h2><p class="cye-lm-tag"><strong>Spring Data JPA is not a JPA provider</strong>. It is a library / framework that adds an extra layer of abstraction on the top of our JPA provider. If we decide to use Spring Data JPA, the repository layer of our application contains three layers that are described in the following:</p>
<ul><li><a href="http://projects.spring.io/spring-data-jpa/" target="_blank">Spring Data JPA</a> provides support for creating JPA repositories by extending the Spring Data repository interfaces.</li><li><a href="https://github.com/spring-projects/spring-data-commons" target="_blank">Spring Data Commons</a> provides the infrastructure that is shared by the datastore specific <a href="http://projects.spring.io/spring-data/" target="_blank">Spring Data projects</a>.</li><li>The JPA Provider implements the Java Persistence API.</li></ul><p class="cye-lm-tag">The following figure illustrates the structure of our repository layer:</p>
<p class="cye-lm-tag"><a href="http://www.petrikainulainen.net/wp-content/uploads/springdatajpalayers.png"><img src="http://www.petrikainulainen.net/wp-content/uploads/springdatajpalayers.png" alt="springdatajpalayers" width="380" height="245" class="aligncenter size-full wp-image-9491" srcset="https://www.petrikainulainen.net/wp-content/uploads/springdatajpalayers.png 380w, https://www.petrikainulainen.net/wp-content/uploads/springdatajpalayers-300x193.png 300w" sizes="(max-width: 380px) 100vw, 380px"></a></p>
<div class="note"> <strong>Additional Reading:</strong><p class="cye-lm-tag"></p>
<ul><li><a href="http://stackoverflow.com/questions/16148188/spring-data-jpa-versus-jpa-whats-the-difference" target="_blank">Spring Data JPA versus JPA: What’s the difference?</a></li></ul></div><p class="cye-lm-tag">At first it seems that Spring Data JPA makes our application more complicated, and in a way that is true. It does add an additional layer to our repository layer, but at the same time it frees us from writing any boilerplate code.</p>
<p class="cye-lm-tag">That sounds like a good tradeoff. Right?</p>
<h2>Introduction to Spring Data Repositories</h2><p class="cye-lm-tag">The power of Spring Data JPA lies in the repository abstraction that is provided by the Spring Data Commons project and extended by the datastore specific sub projects.</p>
<p class="cye-lm-tag">We can use Spring Data JPA without paying any attention to the actual implementation of the repository abstraction, but we have to be familiar with the Spring Data repository interfaces. These interfaces are described in the following:</p>
<p class="cye-lm-tag"><strong>First</strong>, the Spring Data Commons project provides the following interfaces:</p>
<ul><li>The <a href="http://docs.spring.io/spring-data/commons/docs/current/api/index.html?org/springframework/data/repository/Repository.html" target="_blank"><em>Repository&lt;T, ID extends Serializable&gt;</em></a> interface is a marker interface that has two purposes:<ol><li>It captures the type of the managed entity and the type of the entity’s id.</li><li>It helps the Spring container to discover the “concrete” repository interfaces during classpath scanning.</li></ol></li><li>The <a href="http://docs.spring.io/spring-data/commons/docs/current/api/org/springframework/data/repository/CrudRepository.html" target="_blank"><em>CrudRepository&lt;T, ID extends Serializable&gt;</em></a> interface provides CRUD operations for the managed entity.</li><li>The <a href="http://docs.spring.io/spring-data/commons/docs/current/api/org/springframework/data/repository/PagingAndSortingRepository.html" target="_blank"><em>PagingAndSortingRepository&lt;T, ID extends Serializable&gt;</em></a> interface declares the methods that are used to sort and paginate entities that are retrieved from the database.</li><li>The <a href="http://docs.spring.io/spring-data/commons/docs/current/api/org/springframework/data/querydsl/QueryDslPredicateExecutor.html" target="_blank"><em>QueryDslPredicateExecutor&lt;T&gt;</em></a> interface is not a “repository interface”. It declares the methods that are used to retrieve entities from the database by using <a href="http://www.querydsl.com/" target="_blank">QueryDsl</a> <em>Predicate</em> objects.</li></ul><p class="cye-lm-tag"><strong>Second</strong>, the Spring Data JPA project provides the following interfaces:</p>
<ul><li>The <a href="http://docs.spring.io/spring-data/jpa/docs/current/api/org/springframework/data/jpa/repository/JpaRepository.html" target="_blank"><em>JpaRepository&lt;T, ID extends Serializable&gt;</em></a> interface is a JPA specific repository interface that combines the methods declared by the common repository interfaces behind a single interface.</li><li>The <a href="http://docs.spring.io/spring-data/jpa/docs/current/api/org/springframework/data/jpa/repository/JpaSpecificationExecutor.html" target="_blank"><em>JpaSpecificationExecutor&lt;T&gt;</em></a> interface is not a “repository interface”. It declares the methods that are used to retrieve entities from the database by using <a href="http://docs.spring.io/spring-data/jpa/docs/current/api/org/springframework/data/jpa/domain/Specification.html" target="_blank"><em>Specification&lt;T&gt;</em></a> objects that use the JPA criteria API.</li></ul><p class="cye-lm-tag">The repository hierarchy looks as follows:</p>
<p class="cye-lm-tag"><a href="http://www.petrikainulainen.net/wp-content/uploads/springdatajrepositories.png"><img src="http://www.petrikainulainen.net/wp-content/uploads/springdatajrepositories.png" alt="springdatajrepositories" width="989" height="551" class="aligncenter size-full wp-image-9512" srcset="https://www.petrikainulainen.net/wp-content/uploads/springdatajrepositories.png 989w, https://www.petrikainulainen.net/wp-content/uploads/springdatajrepositories-300x167.png 300w" sizes="(max-width: 989px) 100vw, 989px"></a></p>
<p class="cye-lm-tag">That is nice, but how can we use them?</p>
<p class="cye-lm-tag">That is a fair question. The next parts of this tutorial will answer to that question, but essentially we have to follow these steps:</p>
<ol><li>Create a repository interface and extend one of the repository interfaces provided by Spring Data.</li><li>Add custom query methods to the created repository interface (if we need them that is).</li><li>Inject the repository interface to another component and use the implementation that is provided automatically by Spring.</li></ol><p class="cye-lm-tag">Let’s move on and summarize what we learned from this blog post.</p>
<p class="cye-lm-tag"></p>
<h2>Summary</h2><p class="cye-lm-tag">This blog post has taught us two things:</p>
<ul><li>Spring Data JPA is not a JPA provider. It simply “hides” the Java Persistence API (and the JPA provider) behind its repository abstraction.</li><li>Spring Data provides multiple repository interfaces that are used for different purposes.</li></ul><p class="cye-lm-tag">The next part of this tutorial describes how we can <a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-getting-the-required-dependencies/">get the required dependencies</a>.</p>
<div class="note">If you want to learn how to use Spring Data JPA, you should read my <a href="/spring-data-jpa-tutorial/">Spring Data JPA tutorial</a>.</div> <span id="tve_leads_end_content" style="display: block; visibility: hidden; border: 1px solid transparent;" class="cye-lm-tag"></span>
</div>

</div>




</div>
</div>
</div>
</div>
</div>
</div><p style="line-height: 24px;" data-unit="px" class="tve_p_center cye-lm-tag"><span class="tve_custom_font_size cye-lm-tag" style="font-size: 16px;">I will never rent, sell, or share your email address.<br></span></p>

</div></div></div></div></div></div></div>

<section id="comments" class="cye-lm-tag"><div class="comments_intro"><span class="num_comments cye-lm-tag">29</span> comments… <a href="#commentform" rel="nofollow">add one</a></div><ul class="comment_list cye-lm-tag"><li class="comment even thread-even depth-1" id="comment-1052953"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Peter</span>  <span class="comment_date cye-lm-tag">December 17, 2014, 12:40</span></div><div class="comment_text" id="comment-body-1052953"><p class="cye-lm-tag">Many Thanks!</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-1053500"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">December 17, 2014, 19:46</span></div><div class="comment_text" id="comment-body-1053500"><p class="cye-lm-tag">You are welcome!</p>
</div> </div></li></ul></li><li class="comment even thread-odd thread-alt depth-1" id="comment-1118884"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag"><a href="http://putracode.com" rel="external nofollow" class="url">Krisna</a></span>  <span class="comment_date cye-lm-tag">February 6, 2015, 05:43</span></div><div class="comment_text" id="comment-body-1118884"><p class="cye-lm-tag">Nice Post.. Mr Petri</p>
</div> </div></li><li class="comment odd alt thread-even depth-1" id="comment-1130533"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">vamshi</span>  <span class="comment_date cye-lm-tag">February 20, 2015, 12:55</span></div><div class="comment_text" id="comment-body-1130533"><p class="cye-lm-tag">Excellent post</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-1130766"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">February 20, 2015, 21:41</span></div><div class="comment_text" id="comment-body-1130766"><p class="cye-lm-tag">Thank you! I am happy to hear that you liked this blog post.</p>
</div> </div></li></ul></li><li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1264773"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Carlos Romero</span>  <span class="comment_date cye-lm-tag">September 1, 2015, 18:48</span></div><div class="comment_text" id="comment-body-1264773"><p class="cye-lm-tag">Keep all your jobs in Spring, they are very good, excellent</p>
<p class="cye-lm-tag">Thanks for all Petri.</p>
<p class="cye-lm-tag">Regards</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-1264792"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">September 1, 2015, 19:26</span></div><div class="comment_text" id="comment-body-1264792"><p class="cye-lm-tag">Thank you for your kind words. I really appreciate them.</p>
</div> </div></li></ul></li><li class="comment odd alt thread-even depth-1 cye-lm-tag" id="comment-1332145"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Michael Calcagni</span>  <span class="comment_date cye-lm-tag">December 18, 2015, 00:31</span></div><div class="comment_text" id="comment-body-1332145"><p class="cye-lm-tag">Enjoyable reading and very helpful in my understanding of data persistence and web app flow.<br> Thanks</p>
</div> </div><ul class="children cye-lm-tag"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2 cye-lm-tag" id="comment-1332606"><div class="comment-container cye-lm-tag"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">December 18, 2015, 20:09</span></div><div class="comment_text" id="comment-body-1332606"><p class="cye-lm-tag">Hi Michael,</p>
<p class="cye-lm-tag">you are welcome. I am happy to hear that this blog post was useful to you.</p>
</div> </div></li></ul></li><li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1375419"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Vasu</span>  <span class="comment_date cye-lm-tag">February 19, 2016, 16:48</span></div><div class="comment_text" id="comment-body-1375419"><p class="cye-lm-tag">Hi Petri ,<br> It’s very easy and nice to read,</p>
<p class="cye-lm-tag">Thanks<br> Vasu</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-1375592"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">February 19, 2016, 21:47</span></div><div class="comment_text" id="comment-body-1375592"><p class="cye-lm-tag">Hi Vasu,</p>
<p class="cye-lm-tag">You are welcome. I am happy to hear that blog post was useful to you.</p>
</div> </div></li></ul></li><li class="comment odd alt thread-even depth-1" id="comment-1377152"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Soumadeep</span>  <span class="comment_date cye-lm-tag">February 22, 2016, 10:10</span></div><div class="comment_text" id="comment-body-1377152"><p class="cye-lm-tag">Can you elaborate n+1 select problem in jpa in detail.</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-1377536"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">February 22, 2016, 22:01</span></div><div class="comment_text" id="comment-body-1377536"><p class="cye-lm-tag">Check out <a href="http://use-the-index-luke.com/sql/join/nested-loops-join-n1-problem" target="_blank" rel="nofollow">this blog post</a>.</p>
</div> </div><ul class="children"><li class="comment odd alt depth-3" id="comment-1377841"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Soumadeep</span>  <span class="comment_date cye-lm-tag">February 23, 2016, 07:27</span></div><div class="comment_text" id="comment-body-1377841"><p class="cye-lm-tag">Hi Petri,<br> Firstly thanks for the link and the blog.<br> I am eager to know what is the root cause behind n+1 select problem?<br> Because in my application for some specific reference in an entity are getting n+1 select problem,not for all the entity.</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-4" id="comment-1378345"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">February 23, 2016, 21:20</span></div><div class="comment_text" id="comment-body-1378345"><p class="cye-lm-tag">Unfortunately it’s impossible to answer to that question because I don’t know the answers to the following questions:</p>
<ul><li>Which JPA provider are you using?</li><li>What kind of a query are you using?</li><li>What kind of a domain model do you have?</li></ul><p class="cye-lm-tag">However, the most common cause of the N+1 select problem is that you query an entity and iterate the results (a collection) in a lazy fashion.</p>
<p class="cye-lm-tag">Check out <a href="http://zeroturnaround.com/rebellabs/how-to-use-jpa-correctly-to-avoid-complaints-of-a-slow-application/" target="_blank" rel="nofollow">this blog post</a>. It should help you to get more information about the typical performance problems which are caused by JPA.</p>
</div> </div></li></ul></li></ul></li></ul></li><li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1392085"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Samuel</span>  <span class="comment_date cye-lm-tag">March 15, 2016, 01:30</span></div><div class="comment_text" id="comment-body-1392085"><p class="cye-lm-tag">Hi Petri,</p>
<p class="cye-lm-tag">It’s been well over a year since you started writing these blogs? Has the Spring Data JPA APIs changed much? I asked because I’m interested in checking your tutorials out.</p>
<p class="cye-lm-tag">Thanks.</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-1392377"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">March 15, 2016, 09:14</span></div><div class="comment_text" id="comment-body-1392377"><p class="cye-lm-tag">Hi Samuel,</p>
<p class="cye-lm-tag">As far as I know, there hasn’t been any major changes to existing APIs. In other words, my Spring Data JPA tutorial should be up-to-date.</p>
</div> </div></li></ul></li><li class="comment odd alt thread-even depth-1" id="comment-1436257"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Divs</span>  <span class="comment_date cye-lm-tag">May 5, 2016, 15:56</span></div><div class="comment_text" id="comment-body-1436257"><p class="cye-lm-tag">Precise and really helpful. Many Thanks.</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-1436316"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">May 5, 2016, 18:04</span></div><div class="comment_text" id="comment-body-1436316"><p class="cye-lm-tag">You are welcome.</p>
</div> </div></li></ul></li><li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1504951"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Carlos Zegarra</span>  <span class="comment_date cye-lm-tag">November 20, 2016, 02:07</span></div><div class="comment_text" id="comment-body-1504951"><p class="cye-lm-tag">Excellent explanation.</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-1505274"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">November 21, 2016, 22:52</span></div><div class="comment_text" id="comment-body-1505274"><p class="cye-lm-tag">Thank you for your kind words. I really appreciate them.</p>
</div> </div></li></ul></li><li class="comment odd alt thread-even depth-1" id="comment-1505318"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Haftu</span>  <span class="comment_date cye-lm-tag">November 22, 2016, 05:23</span></div><div class="comment_text" id="comment-body-1505318"><p class="cye-lm-tag">What a great post! Thanks for taking the time to shade some light on Spring Data JPA!</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-1505352"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">November 22, 2016, 10:43</span></div><div class="comment_text" id="comment-body-1505352"><p class="cye-lm-tag">You are welcome! I am happy to hear that this post was useful to you.</p>
</div> </div></li></ul></li><li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1514649"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Amar</span>  <span class="comment_date cye-lm-tag">December 29, 2016, 18:03</span></div><div class="comment_text" id="comment-body-1514649"><p class="cye-lm-tag">Thanks Petri.</p>
</div> </div><ul class="children"><li class="comment even depth-2" id="comment-1514650"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Amar</span>  <span class="comment_date cye-lm-tag">December 29, 2016, 18:07</span></div><div class="comment_text" id="comment-body-1514650"><p class="cye-lm-tag">Which version of Springs?</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-3" id="comment-1514841"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">December 30, 2016, 11:07</span></div><div class="comment_text" id="comment-body-1514841"><p class="cye-lm-tag">You are welcome. I am happy to hear that this blog post was useful to you.</p>
<p class="cye-lm-tag">This tutorial uses the Spring IO Platform 1.1.2.RELEASE. This means that the examples use Spring Data JPA 1.7.2.RELEASE.</p>
</div> </div></li></ul></li></ul></li><li class="comment even thread-even depth-1" id="comment-1517645"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Wachirakorn</span>  <span class="comment_date cye-lm-tag">January 16, 2017, 17:16</span></div><div class="comment_text" id="comment-body-1517645"><p class="cye-lm-tag">Nice post. Thanks for your sharing.</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-1517784"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">January 17, 2017, 17:15</span></div><div class="comment_text" id="comment-body-1517784"><p class="cye-lm-tag">You are welcome!</p>
</div> </div></li></ul></li></ul></div> </section>
<br><hr>

<h2>2 Getting the Required Dependencies</h2>
<div class="post_content" itemprop="articleBody"><p class="cye-lm-tag">Before we can create an application that uses Spring Data JPA, we need to get the required dependencies.</p>
<p class="cye-lm-tag">This blog post identifies the required components and describes how we can get them by using Maven.</p>
<p class="cye-lm-tag">Let’s get started.</p>
<div class="note"> <strong>Additional Reading:</strong><p class="cye-lm-tag"></p>
<p class="cye-lm-tag">If you are not familiar with Spring Data JPA, <strong>you should read</strong> the following blog post before you continue reading this blog post:</p>
<ul><li><a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-introduction/">Spring Data JPA Tutorial: Introduction</a> provides a quick introduction to Spring Data JPA and gives an overview of the Spring Data repository interfaces.</li></ul></div><h2>What Components Do We Need?</h2><p class="cye-lm-tag">If we want to implement a persistence layer that uses Spring Data JPA, we need the following components:</p>
<ul><li>The <strong>JDBC driver</strong> provides a database specific implementation of the JDBC API. We use the <a href="http://www.h2database.com/html/main.html" target="_blank">H2 in-memory database</a> because it makes our example application easier to run.</li><li>The <strong>datasource</strong> provides database connections to our application. We use the <a href="http://brettwooldridge.github.io/HikariCP/" target="_blank">HikariCP datasource</a> because it is the fastest datasource on this planet.</li><li>The <strong>JPA Provider</strong> implements the Java Persistence API. We use <a href="http://hibernate.org/orm/" target="_blank">Hibernate</a> because it is the most common JPA provider.</li><li><a href="http://projects.spring.io/spring-data-jpa/" target="_blank">Spring Data JPA</a> hides the used JPA provider behind its repository abstraction.</li></ul><p class="cye-lm-tag">Let’s move on and find out how we can get the required dependencies with Maven.</p>
<p class="cye-lm-tag"></p>
<h2>Getting the Required Dependencies with Maven</h2><p class="cye-lm-tag">We can get the required dependencies with Maven by using one of these options:</p>
<ol><li>We can manage our dependencies by using the <a href="http://spring.io/platform" target="_blank">Spring IO Platform</a>.</li><li>We can manage our dependencies “manually”.</li></ol><p class="cye-lm-tag">Let’s take a look at both options.</p>
<h3>Using the Spring.IO Platform</h3><p class="cye-lm-tag">If we use the Spring IO Platform, we need to follow these steps:</p>
<ol><li>Enable the Spring IO Platform.</li><li>Configure the required dependencies in the pom.xml file.</li></ol><p class="cye-lm-tag"><strong>First</strong>, we can enable  the Spring IO Platform by adding the following XML to our POM file:</p>
<div><div id="highlighter_176359" class="syntaxhighlighter  xml"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="xml plain">&lt;</code><code class="xml keyword">dependencyManagement</code><code class="xml plain">&gt;</code></div><div class="line number2 index1 alt1"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">dependencies</code><code class="xml plain">&gt;</code></div><div class="line number3 index2 alt2"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">dependency</code><code class="xml plain">&gt;</code></div><div class="line number4 index3 alt1"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">groupId</code><code class="xml plain">&gt;io.spring.platform&lt;/</code><code class="xml keyword">groupId</code><code class="xml plain">&gt;</code></div><div class="line number5 index4 alt2"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">artifactId</code><code class="xml plain">&gt;platform-bom&lt;/</code><code class="xml keyword">artifactId</code><code class="xml plain">&gt;</code></div><div class="line number6 index5 alt1"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">version</code><code class="xml plain">&gt;1.1.2.RELEASE&lt;/</code><code class="xml keyword">version</code><code class="xml plain">&gt;</code></div><div class="line number7 index6 alt2"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">type</code><code class="xml plain">&gt;pom&lt;/</code><code class="xml keyword">type</code><code class="xml plain">&gt;</code></div><div class="line number8 index7 alt1"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">scope</code><code class="xml plain">&gt;import&lt;/</code><code class="xml keyword">scope</code><code class="xml plain">&gt;</code></div><div class="line number9 index8 alt2"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;/</code><code class="xml keyword">dependency</code><code class="xml plain">&gt;</code></div><div class="line number10 index9 alt1"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;/</code><code class="xml keyword">dependencies</code><code class="xml plain">&gt;</code></div><div class="line number11 index10 alt2"><code class="xml plain">&lt;/</code><code class="xml keyword">dependencyManagement</code><code class="xml plain">&gt;</code></div></div></td></tr></tbody></table></div></div><p class="cye-lm-tag">After we have enabled the Spring IO Platform, we don’t have to worry about dependency versions because the Spring IO Platform takes care of that. This means that we can get the required dependencies by adding the following XML to the <em>dependencies</em> section of our POM file:</p>
<div><div id="highlighter_957267" class="syntaxhighlighter  xml"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div class="line number23 index22 alt2">23</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="xml comments">&lt;!-- Database (H2) --&gt;</code></div><div class="line number2 index1 alt1"><code class="xml plain">&lt;</code><code class="xml keyword">dependency</code><code class="xml plain">&gt;</code></div><div class="line number3 index2 alt2"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">groupId</code><code class="xml plain">&gt;com.h2database&lt;/</code><code class="xml keyword">groupId</code><code class="xml plain">&gt;</code></div><div class="line number4 index3 alt1"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">artifactId</code><code class="xml plain">&gt;h2&lt;/</code><code class="xml keyword">artifactId</code><code class="xml plain">&gt;</code></div><div class="line number5 index4 alt2"><code class="xml plain">&lt;/</code><code class="xml keyword">dependency</code><code class="xml plain">&gt;</code></div><div class="line number6 index5 alt1"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number7 index6 alt2"><code class="xml comments">&lt;!-- DataSource (HikariCP) --&gt;</code></div><div class="line number8 index7 alt1"><code class="xml plain">&lt;</code><code class="xml keyword">dependency</code><code class="xml plain">&gt;</code></div><div class="line number9 index8 alt2"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">groupId</code><code class="xml plain">&gt;com.zaxxer&lt;/</code><code class="xml keyword">groupId</code><code class="xml plain">&gt;</code></div><div class="line number10 index9 alt1"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">artifactId</code><code class="xml plain">&gt;HikariCP&lt;/</code><code class="xml keyword">artifactId</code><code class="xml plain">&gt;</code></div><div class="line number11 index10 alt2"><code class="xml plain">&lt;/</code><code class="xml keyword">dependency</code><code class="xml plain">&gt;</code></div><div class="line number12 index11 alt1">&nbsp;</div><div class="line number13 index12 alt2"><code class="xml comments">&lt;!-- JPA Provider (Hibernate) --&gt;</code></div><div class="line number14 index13 alt1"><code class="xml plain">&lt;</code><code class="xml keyword">dependency</code><code class="xml plain">&gt;</code></div><div class="line number15 index14 alt2"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">groupId</code><code class="xml plain">&gt;org.hibernate&lt;/</code><code class="xml keyword">groupId</code><code class="xml plain">&gt;</code></div><div class="line number16 index15 alt1"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">artifactId</code><code class="xml plain">&gt;hibernate-entitymanager&lt;/</code><code class="xml keyword">artifactId</code><code class="xml plain">&gt;</code></div><div class="line number17 index16 alt2"><code class="xml plain">&lt;/</code><code class="xml keyword">dependency</code><code class="xml plain">&gt;</code></div><div class="line number18 index17 alt1">&nbsp;</div><div class="line number19 index18 alt2"><code class="xml comments">&lt;!-- Spring Data JPA --&gt;</code></div><div class="line number20 index19 alt1"><code class="xml plain">&lt;</code><code class="xml keyword">dependency</code><code class="xml plain">&gt;</code></div><div class="line number21 index20 alt2"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">groupId</code><code class="xml plain">&gt;org.springframework.data&lt;/</code><code class="xml keyword">groupId</code><code class="xml plain">&gt;</code></div><div class="line number22 index21 alt1"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">artifactId</code><code class="xml plain">&gt;spring-data-jpa&lt;/</code><code class="xml keyword">artifactId</code><code class="xml plain">&gt;</code></div><div class="line number23 index22 alt2"><code class="xml plain">&lt;/</code><code class="xml keyword">dependency</code><code class="xml plain">&gt;</code></div></div></td></tr></tbody></table></div></div><div class="note"> Our example application has a few other dependencies as well. You can get the full list of dependencies by reading <a href="https://github.com/pkainulainen/spring-data-jpa-examples/blob/master/query-methods/pom.xml" target="_blank">its <em>pom.xml</em> file</a>.<p class="cye-lm-tag"></p>
<p class="cye-lm-tag"><strong>Additional Reading:</strong></p>
<ul><li><a href="http://platform.spring.io/platform/" target="_blank">The Spring IO Platform</a></li><li><a href="http://docs.spring.io/platform/docs/1.1.2.RELEASE/reference/htmlsingle/" target="_blank">The Spring IO Platform Reference Guide</a></li></ul></div><p class="cye-lm-tag">Let’s move on and find out how we can manage our dependencies manually.</p>
<h3>Managing Our Dependencies Manually</h3><p class="cye-lm-tag">If we manage our dependencies “manually”, we need specify the version numbers of all dependencies. We can do this by adding the following dependency declarations to the <em>dependencies</em> section of our <em>pom.xml</em> file:</p>
<div><div id="highlighter_656692" class="syntaxhighlighter  xml"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div class="line number23 index22 alt2">23</div><div class="line number24 index23 alt1">24</div><div class="line number25 index24 alt2">25</div><div class="line number26 index25 alt1">26</div><div class="line number27 index26 alt2">27</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="xml comments">&lt;!-- Database (H2) --&gt;</code></div><div class="line number2 index1 alt1"><code class="xml plain">&lt;</code><code class="xml keyword">dependency</code><code class="xml plain">&gt;</code></div><div class="line number3 index2 alt2"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">groupId</code><code class="xml plain">&gt;com.h2database&lt;/</code><code class="xml keyword">groupId</code><code class="xml plain">&gt;</code></div><div class="line number4 index3 alt1"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">artifactId</code><code class="xml plain">&gt;h2&lt;/</code><code class="xml keyword">artifactId</code><code class="xml plain">&gt;</code></div><div class="line number5 index4 alt2"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">version</code><code class="xml plain">&gt;1.4.185&lt;/</code><code class="xml keyword">version</code><code class="xml plain">&gt;</code></div><div class="line number6 index5 alt1"><code class="xml plain">&lt;/</code><code class="xml keyword">dependency</code><code class="xml plain">&gt;</code></div><div class="line number7 index6 alt2"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number8 index7 alt1"><code class="xml comments">&lt;!-- DataSource (HikariCP) --&gt;</code></div><div class="line number9 index8 alt2"><code class="xml plain">&lt;</code><code class="xml keyword">dependency</code><code class="xml plain">&gt;</code></div><div class="line number10 index9 alt1"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">groupId</code><code class="xml plain">&gt;com.zaxxer&lt;/</code><code class="xml keyword">groupId</code><code class="xml plain">&gt;</code></div><div class="line number11 index10 alt2"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">artifactId</code><code class="xml plain">&gt;HikariCP&lt;/</code><code class="xml keyword">artifactId</code><code class="xml plain">&gt;</code></div><div class="line number12 index11 alt1"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">version</code><code class="xml plain">&gt;2.2.5&lt;/</code><code class="xml keyword">version</code><code class="xml plain">&gt;</code></div><div class="line number13 index12 alt2"><code class="xml plain">&lt;/</code><code class="xml keyword">dependency</code><code class="xml plain">&gt;</code></div><div class="line number14 index13 alt1">&nbsp;</div><div class="line number15 index14 alt2"><code class="xml comments">&lt;!-- JPA Provider (Hibernate) --&gt;</code></div><div class="line number16 index15 alt1"><code class="xml plain">&lt;</code><code class="xml keyword">dependency</code><code class="xml plain">&gt;</code></div><div class="line number17 index16 alt2"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">groupId</code><code class="xml plain">&gt;org.hibernate&lt;/</code><code class="xml keyword">groupId</code><code class="xml plain">&gt;</code></div><div class="line number18 index17 alt1"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">artifactId</code><code class="xml plain">&gt;hibernate-entitymanager&lt;/</code><code class="xml keyword">artifactId</code><code class="xml plain">&gt;</code></div><div class="line number19 index18 alt2"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">version</code><code class="xml plain">&gt;4.3.8.Final&lt;/</code><code class="xml keyword">version</code><code class="xml plain">&gt;</code></div><div class="line number20 index19 alt1"><code class="xml plain">&lt;/</code><code class="xml keyword">dependency</code><code class="xml plain">&gt;</code></div><div class="line number21 index20 alt2">&nbsp;</div><div class="line number22 index21 alt1"><code class="xml comments">&lt;!-- Spring Data JPA --&gt;</code></div><div class="line number23 index22 alt2"><code class="xml plain">&lt;</code><code class="xml keyword">dependency</code><code class="xml plain">&gt;</code></div><div class="line number24 index23 alt1"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">groupId</code><code class="xml plain">&gt;org.springframework.data&lt;/</code><code class="xml keyword">groupId</code><code class="xml plain">&gt;</code></div><div class="line number25 index24 alt2"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">artifactId</code><code class="xml plain">&gt;spring-data-jpa&lt;/</code><code class="xml keyword">artifactId</code><code class="xml plain">&gt;</code></div><div class="line number26 index25 alt1"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">version</code><code class="xml plain">&gt;1.7.2.RELEASE&lt;/</code><code class="xml keyword">version</code><code class="xml plain">&gt;</code></div><div class="line number27 index26 alt2"><code class="xml plain">&lt;/</code><code class="xml keyword">dependency</code><code class="xml plain">&gt;</code></div></div></td></tr></tbody></table></div></div><div class="note">I used the <a href="http://docs.spring.io/platform/docs/1.1.2.RELEASE/reference/htmlsingle/#appendix-dependency-versions" target="_blank">dependency versions that are provided by the Spring IO platform</a>. If you want to use newer versions, you can find the latest available versions from <a href="http://mvnrepository.com/" target="_blank">mvnrepository.com</a>.</div><p class="cye-lm-tag">I guess the obvious question is: which option should we use?</p>
<h3>What Is the Best Way to Manage Our Dependencies?</h3><p class="cye-lm-tag">If we are starting a new project, we should use the Spring IO Platform because</p>
<ul><li>We don’t have to worry about the dependency versions. For example, we don’t have to worry about incompatibility issues because we know that our dependencies work together like a charm.</li><li>We can always override the dependency versions provided the by the Spring.IO platform.</li></ul><p class="cye-lm-tag">On the other hand, if we are adding Spring Data JPA to an existing project, it is often wiser to manage our dependencies manually because it requires less work.</p>
<p class="cye-lm-tag">Let’s move on and summarize what we learned from this blog post.</p>
<p class="cye-lm-tag"></p>
<h2>Summary</h2><p class="cye-lm-tag">This blog post has taught us four things:</p>
<ul><li>If we want to implement a persistence layer that uses Spring Data JPA, we need the following components: a JDBC driver, a datasource, a JPA provider, and the Spring Data JPA.</li><li>We can get the required dependencies by using the Spring IO platform or managing our dependencies manually.</li><li>If we are starting a new project, we should use the Spring IO platform because it ensures that our dependencies work together like a charm.</li><li>If we are adding Spring Data JPA to an existing project, we should manage our dependencies manually because it requires less work.</li></ul><p class="cye-lm-tag">The next part of this tutorial describes how we can <a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-part-one-configuration/">configure Spring Data JPA</a>.</p>
<p class="cye-lm-tag"><strong>P.S.</strong> You can the <a href="https://github.com/pkainulainen/spring-data-jpa-examples/tree/master/query-methods" target="_blank">get the example application of this blog post from Github</a>.</p>
<div class="note">If you want to learn how to use Spring Data JPA, you should read my <a href="/spring-data-jpa-tutorial/">Spring Data JPA tutorial</a>.</div> <span id="tve_leads_end_content" style="display: block; visibility: hidden; border: 1px solid transparent;" class="cye-lm-tag"></span>
</div>

</div>




</div>
</div>
</div>
</div>
</div>
</div><p style="line-height: 24px;" data-unit="px" class="tve_p_center cye-lm-tag"><span class="tve_custom_font_size cye-lm-tag" style="font-size: 16px;">I will never rent, sell, or share your email address.<br></span></p>

</div></div></div></div></div></div></div>
<section id="comments"><div class="comments_intro"><span class="num_comments cye-lm-tag">16</span> comments… <a href="#commentform" rel="nofollow">add one</a></div><ul class="comment_list"><li class="comment even thread-even depth-1" id="comment-1040036"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Tom</span>  <span class="comment_date cye-lm-tag">December 10, 2014, 12:32</span></div><div class="comment_text" id="comment-body-1040036"><p class="cye-lm-tag">Thanks for all the tutes, eagerly awaiting the next one.  Have also added you on twitter.</p>
</div> </div></li><li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1147729"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Naveen</span>  <span class="comment_date cye-lm-tag">March 11, 2015, 14:48</span></div><div class="comment_text" id="comment-body-1147729"><p class="cye-lm-tag">Dependencies reference is pretty handy … thanks :)</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-1148059"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">March 11, 2015, 19:44</span></div><div class="comment_text" id="comment-body-1148059"><p class="cye-lm-tag">You are welcome!</p>
</div> </div></li></ul></li><li class="comment odd alt thread-even depth-1" id="comment-1233789"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Anonymous</span>  <span class="comment_date cye-lm-tag">June 27, 2015, 14:30</span></div><div class="comment_text" id="comment-body-1233789"><p class="cye-lm-tag">Really nice tutorial, but I wish if you can show us how to setup the project in eclipse or STS.</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-1234241"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">June 28, 2015, 10:31</span></div><div class="comment_text" id="comment-body-1234241"><p class="cye-lm-tag">I haven’t used Eclipse for eight years because its Maven support is not very good. For example, when I downloaded Eclipse Mars and tried to import the example application (File -&gt; Import -&gt; Maven -&gt; Existing Maven Projects), I got the following error:</p>
<p class="cye-lm-tag"><em>“No marketplace entries found to handle maven-antrun-plugin:1.7:run in Eclipse.  Please see Help for more information.”</em></p>
<p class="cye-lm-tag">I tried searching the solution from Google, but most articles / SO questions / web pages talked about the notorious <a href="https://www.eclipse.org/m2e/documentation/m2e-execution-not-covered.html" target="_blank" rel="nofollow"><em>“plugin execution not covered by lifecycle configuration”</em> error</a>. In other words, they did not help me to solve this problem.</p>
<p class="cye-lm-tag">This is why I use IntelliJ Idea. It just works.</p>
<p class="cye-lm-tag"><strong>P.S.</strong> If you know a solution to this problem, could you share it with us?</p>
</div> </div></li></ul></li><li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1242380"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Matt Moran</span>  <span class="comment_date cye-lm-tag">July 15, 2015, 14:00</span></div><div class="comment_text" id="comment-body-1242380"><p class="cye-lm-tag">D’oh – problem solved – Eclipse doesn’t have the right scope available in its drop-down when you’re adding dependency management entries. I put it in manually &amp; hey presto, it works :-)</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-1242395"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">July 15, 2015, 14:23</span></div><div class="comment_text" id="comment-body-1242395"><p class="cye-lm-tag">Great! I am happy to hear that you were able to solve your problem.</p>
</div> </div></li></ul></li><li class="comment odd alt thread-even depth-1" id="comment-1281602"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Ken</span>  <span class="comment_date cye-lm-tag">October 6, 2015, 14:26</span></div><div class="comment_text" id="comment-body-1281602"><p class="cye-lm-tag">Nice tutorial Petri. Everything works until I deploy into Tomcat. Have you run into these kind of problems with hikari? So far I haven’t found help from Google:<br> “The web application [/order] appears to have started a thread named [Hikari Housekeeping Timer (pool HikariPool-0)] but has failed to stop it. This is very likely to create a memory leak.”<br> and a little later:<br> Could not load java.lang.invoke.LambdaMetafactory.<br> …<br> at com.zaxxer.hikari.util.ConcurrentBag.values(ConcurrentBag.java:230)</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-1281620"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">October 6, 2015, 15:55</span></div><div class="comment_text" id="comment-body-1281620"><p class="cye-lm-tag">Hi Ken,</p>
<p class="cye-lm-tag">I will investigate this issue when I get back to home (I am currently at work). Are you using Java 7 or Java 8? Also, which Tomcat version are you using?</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-3" id="comment-1281796"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">October 6, 2015, 20:57</span></div><div class="comment_text" id="comment-body-1281796"><p class="cye-lm-tag">I wasn’t able to reproduce this issue by using <a href="https://github.com/pkainulainen/spring-data-jpa-examples/tree/master/query-methods" target="_blank" rel="nofollow">the example application of this blog post</a>, Java 8, and Tomcat 8.0.27.</p>
</div> </div></li></ul></li></ul></li><li class="comment even thread-odd thread-alt depth-1" id="comment-1482528"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">david zornosa</span>  <span class="comment_date cye-lm-tag">September 2, 2016, 19:54</span></div><div class="comment_text" id="comment-body-1482528"><p class="cye-lm-tag">hi, i enjoyed reading your articles. great style. enough info without being cumbersome or hard to read, well organized. keep up the good job</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-1483487"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">September 5, 2016, 21:14</span></div><div class="comment_text" id="comment-body-1483487"><p class="cye-lm-tag">Thank you for your kind words. I really appreciate them.</p>
</div> </div></li></ul></li><li class="comment even thread-even depth-1" id="comment-1525358"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">pralad</span>  <span class="comment_date cye-lm-tag">March 1, 2017, 19:24</span></div><div class="comment_text" id="comment-body-1525358"><p class="cye-lm-tag">There is many dependency in your github example pages , isn’t it overhead to use all of them or Do i need all ?</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-1526181"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">March 4, 2017, 11:44</span></div><div class="comment_text" id="comment-body-1526181"><p class="cye-lm-tag">Hi,</p>
<p class="cye-lm-tag">As you probably noticed, the example applications are web applications and that is why they use a lot of dependencies that aren’t related to Spring Data JPA. If you want to write a web application, you might need most of them, but it’s impossible to give an exact answer since I don’t know what you are trying to do.</p>
</div> </div></li></ul></li></ul></div> </section>
<br><hr>

<h2>3 Configuration</h2>
<div class="post_content cye-lm-tag" itemprop="articleBody"><p class="cye-lm-tag">After we have declared the required dependencies in our POM file, we have to configure the application context of our Spring application.</p>
<p class="cye-lm-tag">This blog post describes how we can configure the persistence layer of a Spring application that uses Spring Data JPA and Hibernate.</p>
<p class="cye-lm-tag">Let’s get started.</p>
<div class="note"> <strong>Additional Reading:</strong><p class="cye-lm-tag"></p>
<p class="cye-lm-tag">If you are not familiar with Spring Data JPA, <strong>you should read</strong> the following blog posts before you continue reading this blog post:</p>
<ul><li><a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-introduction/">Spring Data JPA Tutorial: Introduction</a> provides a quick introduction to Spring Data JPA and gives an overview of the Spring Data repository interfaces.</li><li><a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-getting-the-required-dependencies/">Spring Data JPA Tutorial: Getting the Required Dependencies</a> describes how you can get the required dependencies.</li></ul></div><h2>Configuring the Persistence Layer of a Spring Application</h2><p class="cye-lm-tag">We can create the configuration class, which configures the persistence layer of a Spring application, by following these steps:</p>
<ol><li>Create the properties file that contains the properties used by our application context configuration class.</li><li>Configure the datasource bean.</li><li>Configure the entity manager factory bean.</li><li>Configure the transaction manager bean.</li><li>Enable annotation-driven transaction management.</li><li>Configure Spring Data JPA.</li></ol><p class="cye-lm-tag"></p>
<p class="cye-lm-tag">But before we can get started, we have to create the configuration class that configures the persistence layer of our application. The source code of the <em>PersistenceContext</em> class looks as follows:</p>
<div><div id="highlighter_50101" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java color1">@Configuration</code></div><div class="line number2 index1 alt1"><code class="java keyword">class</code> <code class="java plain">PersistenceContext {</code></div><div class="line number3 index2 alt2">&nbsp;</div><div class="line number4 index3 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java comments">//Configure the required beans here</code></div><div class="line number5 index4 alt2"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><p class="cye-lm-tag">Let’s start by creating the properties file.</p>
<h3>Creating the Properties File</h3><p class="cye-lm-tag">Often we want to use a slightly different configuration in different environments. A good way to do this is move the configuration to a properties file and use a different properties file in different environments.</p>
<p class="cye-lm-tag">The <em>application.properties</em> file contains the configuration that is used to configure our example application. We can create this properties file by following these steps:</p>
<ol><li>Configure the database connection of our application. We need to configure the name of the JDBC driver class, the JDBC url, the username of the database user, and the password of the database user.</li><li>Configure Hibernate by following these steps:<ol><li>Configure the used database dialect.</li><li>Ensure that Hibernate creates the database when our application is started and drops it when our application is closed.</li><li>Configure the naming strategy that is used when Hibernate creates new database objects and schema elements.</li><li>Configure the Hibernate to NOT write the invoked SQL statements to the console.</li><li>Ensure that if Hibernate writes the SQL statements to the console, it will use prettyprint.</li></ol></li></ol><p class="cye-lm-tag">The <em>application.properties</em> file looks as follows:</p>
<div><div id="highlighter_836147" class="syntaxhighlighter  plain"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="plain plain">#Database Configuration</code></div><div class="line number2 index1 alt1"><code class="plain plain">db.driver=org.h2.Driver</code></div><div class="line number3 index2 alt2"><code class="plain plain">db.url=jdbc:h2:mem:datajpa</code></div><div class="line number4 index3 alt1"><code class="plain plain">db.username=sa</code></div><div class="line number5 index4 alt2"><code class="plain plain">db.password=</code></div><div class="line number6 index5 alt1">&nbsp;</div><div class="line number7 index6 alt2"><code class="plain plain">#Hibernate Configuration</code></div><div class="line number8 index7 alt1"><code class="plain plain">hibernate.dialect=org.hibernate.dialect.H2Dialect</code></div><div class="line number9 index8 alt2"><code class="plain plain">hibernate.hbm2ddl.auto=create-drop</code></div><div class="line number10 index9 alt1"><code class="plain plain">hibernate.ejb.naming_strategy=org.hibernate.cfg.ImprovedNamingStrategy</code></div><div class="line number11 index10 alt2"><code class="plain plain">hibernate.show_sql=false</code></div><div class="line number12 index11 alt1"><code class="plain plain">hibernate.format_sql=true</code></div></div></td></tr></tbody></table></div></div><div class="note">The properties found from the <em>application.properties</em> file are loaded by the <em>ExampleApplicationContext</em> class. If you want to take a closer look at it, you can <a href="https://github.com/pkainulainen/spring-data-jpa-examples/blob/master/query-methods/src/main/java/net/petrikainulainen/springdata/jpa/config/ExampleApplicationContext.java" target="_blank">get it from Github</a>.</div><p class="cye-lm-tag">Let’s move on and configure the datasource bean.</p>
<h3>Configuring the Datasource Bean</h3><p class="cye-lm-tag">We can configure the datasource bean by following these steps:</p>
<ol><li>Ensure that the <em>close()</em> method of the created <em>DataSource</em> object is invoked when the application context is closed.</li><li>Configure the database connection. We need to set the name of the JDBC driver class, the JDBC url, the username of database user, and the password of the database user.</li><li>Create a new <em>HikariDataSource</em> object and return the created object.</li></ol><p class="cye-lm-tag">The method that configures the datasource bean looks as follows:</p>
<div><div id="highlighter_256041" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1 highlighted">4</div><div class="line number5 index4 alt2 highlighted">5</div><div class="line number6 index5 alt1 highlighted">6</div><div class="line number7 index6 alt2 highlighted">7</div><div class="line number8 index7 alt1 highlighted">8</div><div class="line number9 index8 alt2 highlighted">9</div><div class="line number10 index9 alt1 highlighted">10</div><div class="line number11 index10 alt2 highlighted">11</div><div class="line number12 index11 alt1 highlighted">12</div><div class="line number13 index12 alt2 highlighted">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java color1">@Configuration</code></div><div class="line number2 index1 alt1"><code class="java keyword">class</code> <code class="java plain">PersistenceContext {</code></div><div class="line number3 index2 alt2">&nbsp;</div><div class="line number4 index3 alt1 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Bean</code><code class="java plain">(destroyMethod = </code><code class="java string">"close"</code><code class="java plain">)</code></div><div class="line number5 index4 alt2 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">DataSource dataSource(Environment env) {</code></div><div class="line number6 index5 alt1 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">HikariConfig dataSourceConfig = </code><code class="java keyword">new</code> <code class="java plain">HikariConfig();</code></div><div class="line number7 index6 alt2 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">dataSourceConfig.setDriverClassName(env.getRequiredProperty(</code><code class="java string">"db.driver"</code><code class="java plain">));</code></div><div class="line number8 index7 alt1 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">dataSourceConfig.setJdbcUrl(env.getRequiredProperty(</code><code class="java string">"db.url"</code><code class="java plain">));</code></div><div class="line number9 index8 alt2 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">dataSourceConfig.setUsername(env.getRequiredProperty(</code><code class="java string">"db.username"</code><code class="java plain">));</code></div><div class="line number10 index9 alt1 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">dataSourceConfig.setPassword(env.getRequiredProperty(</code><code class="java string">"db.password"</code><code class="java plain">));</code></div><div class="line number11 index10 alt2 highlighted">&nbsp;</div><div class="line number12 index11 alt1 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">return</code> <code class="java keyword">new</code> <code class="java plain">HikariDataSource(dataSourceConfig);</code></div><div class="line number13 index12 alt2 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number14 index13 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number15 index14 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java comments">//Add the other beans here</code></div><div class="line number16 index15 alt1"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><div class="note"> <strong>Additional Reading:</strong><p class="cye-lm-tag"></p>
<ul><li><a href="https://docs.oracle.com/javase/7/docs/api/javax/sql/DataSource.html" target="_blank">The Javadoc of the <em>DataSource</em> interface</a></li><li><a href="http://docs.spring.io/spring/docs/4.1.x/spring-framework-reference/htmlsingle/#jdbc-datasource" target="_blank">Spring Framework Reference Manual: 14.3.1 DataSource</a></li><li><a href="https://github.com/brettwooldridge/HikariCP#initialization" target="_blank">Hikari CP Initialization</a></li><li><a href="https://github.com/brettwooldridge/HikariCP#configuration-knobs-baby" target="_blank">HikariCP configuration properties</a></li></ul></div><p class="cye-lm-tag">Let’s move on and configure the entity manager factory bean.</p>
<h3>Configuring the Entity Manager Factory Bean</h3><p class="cye-lm-tag">We can configure the entity manager factory bean by following these steps:</p>
<ol><li>Create a new <em>LocalContainerEntityManagerFactoryBean</em> object. We need to create this object because it creates the JPA <em>EntityManagerFactory</em>.</li><li>Configure the used datasource.</li><li>Configure the Hibernate specific implementation of the <em>JpaVendorAdapter</em> interface. It will initialize our configuration with the default settings that are compatible with Hibernate.</li><li>Configure the packages that are scanned for entity classes.</li><li>Configure the JPA properties that are used to provide additional configuration to the used JPA provider.</li></ol><p class="cye-lm-tag">The method that configures the entity manager factory bean looks as follows:</p>
<div><div id="highlighter_452208" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1 highlighted">4</div><div class="line number5 index4 alt2 highlighted">5</div><div class="line number6 index5 alt1 highlighted">6</div><div class="line number7 index6 alt2 highlighted">7</div><div class="line number8 index7 alt1 highlighted">8</div><div class="line number9 index8 alt2 highlighted">9</div><div class="line number10 index9 alt1 highlighted">10</div><div class="line number11 index10 alt2 highlighted">11</div><div class="line number12 index11 alt1 highlighted">12</div><div class="line number13 index12 alt2 highlighted">13</div><div class="line number14 index13 alt1 highlighted">14</div><div class="line number15 index14 alt2 highlighted">15</div><div class="line number16 index15 alt1 highlighted">16</div><div class="line number17 index16 alt2 highlighted">17</div><div class="line number18 index17 alt1 highlighted">18</div><div class="line number19 index18 alt2 highlighted">19</div><div class="line number20 index19 alt1 highlighted">20</div><div class="line number21 index20 alt2 highlighted">21</div><div class="line number22 index21 alt1 highlighted">22</div><div class="line number23 index22 alt2 highlighted">23</div><div class="line number24 index23 alt1 highlighted">24</div><div class="line number25 index24 alt2 highlighted">25</div><div class="line number26 index25 alt1 highlighted">26</div><div class="line number27 index26 alt2 highlighted">27</div><div class="line number28 index27 alt1 highlighted">28</div><div class="line number29 index28 alt2 highlighted">29</div><div class="line number30 index29 alt1 highlighted">30</div><div class="line number31 index30 alt2 highlighted">31</div><div class="line number32 index31 alt1 highlighted">32</div><div class="line number33 index32 alt2 highlighted">33</div><div class="line number34 index33 alt1 highlighted">34</div><div class="line number35 index34 alt2 highlighted">35</div><div class="line number36 index35 alt1 highlighted">36</div><div class="line number37 index36 alt2 highlighted">37</div><div class="line number38 index37 alt1 highlighted">38</div><div class="line number39 index38 alt2 highlighted">39</div><div class="line number40 index39 alt1 highlighted">40</div><div class="line number41 index40 alt2 highlighted">41</div><div class="line number42 index41 alt1 highlighted">42</div><div class="line number43 index42 alt2 highlighted">43</div><div class="line number44 index43 alt1 highlighted">44</div><div class="line number45 index44 alt2 highlighted">45</div><div class="line number46 index45 alt1">46</div><div class="line number47 index46 alt2">47</div><div class="line number48 index47 alt1">48</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java color1">@Configuration</code></div><div class="line number2 index1 alt1"><code class="java keyword">class</code> <code class="java plain">PersistenceContext {</code></div><div class="line number3 index2 alt2">&nbsp;</div><div class="line number4 index3 alt1 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Bean</code></div><div class="line number5 index4 alt2 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">LocalContainerEntityManagerFactoryBean entityManagerFactory(DataSource dataSource, </code></div><div class="line number6 index5 alt1 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">Environment env) {</code></div><div class="line number7 index6 alt2 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">LocalContainerEntityManagerFactoryBean entityManagerFactoryBean = </code><code class="java keyword">new</code> <code class="java plain">LocalContainerEntityManagerFactoryBean();</code></div><div class="line number8 index7 alt1 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">entityManagerFactoryBean.setDataSource(dataSource);</code></div><div class="line number9 index8 alt2 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">entityManagerFactoryBean.setJpaVendorAdapter(</code><code class="java keyword">new</code> <code class="java plain">HibernateJpaVendorAdapter());</code></div><div class="line number10 index9 alt1 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">entityManagerFactoryBean.setPackagesToScan(</code><code class="java string">"net.petrikainulainen.springdata.jpa.todo"</code><code class="java plain">);</code></div><div class="line number11 index10 alt2 highlighted">&nbsp;</div><div class="line number12 index11 alt1 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">Properties jpaProperties = </code><code class="java keyword">new</code> <code class="java plain">Properties();</code></div><div class="line number13 index12 alt2 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number14 index13 alt1 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java comments">//Configures the used database dialect. This allows Hibernate to create SQL</code></div><div class="line number15 index14 alt2 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java comments">//that is optimized for the used database.</code></div><div class="line number16 index15 alt1 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">jpaProperties.put(</code><code class="java string">"hibernate.dialect"</code><code class="java plain">, env.getRequiredProperty(</code><code class="java string">"hibernate.dialect"</code><code class="java plain">));</code></div><div class="line number17 index16 alt2 highlighted">&nbsp;</div><div class="line number18 index17 alt1 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java comments">//Specifies the action that is invoked to the database when the Hibernate</code></div><div class="line number19 index18 alt2 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java comments">//SessionFactory is created or closed.</code></div><div class="line number20 index19 alt1 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">jpaProperties.put(</code><code class="java string">"hibernate.hbm2ddl.auto"</code><code class="java plain">, </code></div><div class="line number21 index20 alt2 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">env.getRequiredProperty(</code><code class="java string">"hibernate.hbm2ddl.auto"</code><code class="java plain">)</code></div><div class="line number22 index21 alt1 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">);</code></div><div class="line number23 index22 alt2 highlighted">&nbsp;</div><div class="line number24 index23 alt1 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java comments">//Configures the naming strategy that is used when Hibernate creates</code></div><div class="line number25 index24 alt2 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java comments">//new database objects and schema elements</code></div><div class="line number26 index25 alt1 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">jpaProperties.put(</code><code class="java string">"hibernate.ejb.naming_strategy"</code><code class="java plain">, </code></div><div class="line number27 index26 alt2 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">env.getRequiredProperty(</code><code class="java string">"hibernate.ejb.naming_strategy"</code><code class="java plain">)</code></div><div class="line number28 index27 alt1 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">);</code></div><div class="line number29 index28 alt2 highlighted">&nbsp;</div><div class="line number30 index29 alt1 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java comments">//If the value of this property is true, Hibernate writes all SQL</code></div><div class="line number31 index30 alt2 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java comments">//statements to the console.</code></div><div class="line number32 index31 alt1 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">jpaProperties.put(</code><code class="java string">"hibernate.show_sql"</code><code class="java plain">, </code></div><div class="line number33 index32 alt2 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">env.getRequiredProperty(</code><code class="java string">"hibernate.show_sql"</code><code class="java plain">)</code></div><div class="line number34 index33 alt1 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">);</code></div><div class="line number35 index34 alt2 highlighted">&nbsp;</div><div class="line number36 index35 alt1 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java comments">//If the value of this property is true, Hibernate will format the SQL</code></div><div class="line number37 index36 alt2 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java comments">//that is written to the console.</code></div><div class="line number38 index37 alt1 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">jpaProperties.put(</code><code class="java string">"hibernate.format_sql"</code><code class="java plain">, </code></div><div class="line number39 index38 alt2 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">env.getRequiredProperty(</code><code class="java string">"hibernate.format_sql"</code><code class="java plain">)</code></div><div class="line number40 index39 alt1 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">);</code></div><div class="line number41 index40 alt2 highlighted">&nbsp;</div><div class="line number42 index41 alt1 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">entityManagerFactoryBean.setJpaProperties(jpaProperties);</code></div><div class="line number43 index42 alt2 highlighted">&nbsp;</div><div class="line number44 index43 alt1 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">return</code> <code class="java plain">entityManagerFactoryBean;</code></div><div class="line number45 index44 alt2 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number46 index45 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number47 index46 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java comments">//Add the other beans here</code></div><div class="line number48 index47 alt1"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><div class="note"> <strong>Additional Reading:</strong><p class="cye-lm-tag"></p>
<ul><li><a href="http://docs.oracle.com/javaee/7/api/javax/persistence/EntityManagerFactory.html" target="_blank">The Javadoc of the <em>EntityManagerFactory</em> interface</a></li><li><a href="http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/jpa/LocalContainerEntityManagerFactoryBean.html" target="_blank">The Javadoc of the <em>LocalContainerEntityManagerFactoryBean</em> class</a></li><li><a href="http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/jpa/JpaVendorAdapter.html" target="_blank">The Javadoc of the <em>JpaVendorAdapter</em> interface</a></li><li><a href="http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/jpa/vendor/HibernateJpaVendorAdapter.html" target="_blank">The Javadoc of the <em>HibernateJpaVendorAdapter</em> class</a></li><li><a href="http://docs.spring.io/spring/docs/4.1.x/spring-framework-reference/htmlsingle/#orm-jpa-setup" target="_blank">Spring Framework Reference Manual: 15.5.1 Three options for JPA setup in a Spring environment</a></li><li><a href="http://docs.jboss.org/hibernate/orm/4.3/manual/en-US/html_single/#configuration-optional" target="_blank">Hibernate ORM Reference Manual: 3.4. Optional configuration properties</a></li></ul></div><p class="cye-lm-tag">Let’s move on and configure the transaction manager bean.</p>
<h3>Configuring the Transaction Manager Bean</h3><p class="cye-lm-tag">Because we are using JPA, we have to create a transaction manager bean that integrates the JPA provider with the Spring transaction mechanism. We can do this by using the <em>JpaTransactionManager</em> class as the transaction manager of our application.</p>
<p class="cye-lm-tag">We can configure the transaction manager bean by following these steps:</p>
<ol><li>Create a new <em>JpaTransactionManager</em> object.</li><li>Configure the entity manager factory whose transactions are managed by the created <em>JpaTransactionManager</em> object.</li></ol><p class="cye-lm-tag">The method that configures the transaction manager bean looks as follows:</p>
<div><div id="highlighter_668276" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1 highlighted">4</div><div class="line number5 index4 alt2 highlighted">5</div><div class="line number6 index5 alt1 highlighted">6</div><div class="line number7 index6 alt2 highlighted">7</div><div class="line number8 index7 alt1 highlighted">8</div><div class="line number9 index8 alt2 highlighted">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java color1">@Configuration</code></div><div class="line number2 index1 alt1"><code class="java keyword">class</code> <code class="java plain">PersistenceContext {</code></div><div class="line number3 index2 alt2">&nbsp;</div><div class="line number4 index3 alt1 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Bean</code></div><div class="line number5 index4 alt2 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">JpaTransactionManager transactionManager(EntityManagerFactory entityManagerFactory) {</code></div><div class="line number6 index5 alt1 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">JpaTransactionManager transactionManager = </code><code class="java keyword">new</code> <code class="java plain">JpaTransactionManager();</code></div><div class="line number7 index6 alt2 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">transactionManager.setEntityManagerFactory(entityManagerFactory);</code></div><div class="line number8 index7 alt1 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">return</code> <code class="java plain">transactionManager;</code></div><div class="line number9 index8 alt2 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number10 index9 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number11 index10 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java comments">//Add the other beans here</code></div><div class="line number12 index11 alt1"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><div class="note"> <strong>Additional Reading:</strong><p class="cye-lm-tag"></p>
<ul><li><a href="http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/jpa/JpaTransactionManager.html" target="_blank">The Javadoc of the <em>JpaTransactionManager</em> class</a></li><li><a href="http://docs.spring.io/spring/docs/4.1.x/spring-framework-reference/htmlsingle/#orm-jpa-tx" target="_blank">Spring Framework Reference Manual: 15.5.3 Transaction Management</a></li></ul></div><p class="cye-lm-tag">Let’s move on and enable annotation-driven transaction management.</p>
<h3>Enabling Annotation-Driven Transaction Management</h3><p class="cye-lm-tag">We can enable annotation-driven transaction management by annotating the <em>PersistenceContext</em> class with the <em>@EnableTransactionManagement</em> annotation. The relevant part of the <em>PersistenceContext</em> class looks as follows:</p>
<div><div id="highlighter_792575" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1 highlighted">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java color1">@Configuration</code></div><div class="line number2 index1 alt1 highlighted"><code class="java color1">@EnableTransactionManagement</code></div><div class="line number3 index2 alt2"><code class="java keyword">class</code> <code class="java plain">PersistenceContext {</code></div><div class="line number4 index3 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number5 index4 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java comments">//The beans are configured here</code></div><div class="line number6 index5 alt1"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><div class="note"> <strong>Additional Reading:</strong><p class="cye-lm-tag"></p>
<ul><li><a href="http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/transaction/annotation/EnableTransactionManagement.html" target="_blank">The Javadoc of the <em>@EnableTransactionManagement</em> annotation</a></li><li><a href="http://docs.spring.io/spring/docs/4.1.x/spring-framework-reference/htmlsingle/#transaction-declarative-annotations" target="_blank">Spring Framework Reference Manual: 12.5.6 Using @Transactional</a></li></ul></div><p class="cye-lm-tag">Let’s move on and configure Spring Data JPA.</p>
<h3>Configuring Spring Data JPA</h3><p class="cye-lm-tag">We can configure Spring Data JPA by following these steps:</p>
<ol><li>Enable Spring Data JPA by annotating the <em>PersistenceContext</em> class with the <em>@EnableJpaRepositories</em> annotation.</li><li>Configure the base packages that are scanned when Spring Data JPA creates implementations for our repository interfaces.</li></ol><p class="cye-lm-tag">The relevant part of the <em>PersistenceContext</em> class looks as follows:</p>
<div><div id="highlighter_904044" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1 highlighted">2</div><div class="line number3 index2 alt2 highlighted">3</div><div class="line number4 index3 alt1 highlighted">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java color1">@Configuration</code></div><div class="line number2 index1 alt1 highlighted"><code class="java color1">@EnableJpaRepositories</code><code class="java plain">(basePackages = {</code></div><div class="line number3 index2 alt2 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java string">"net.petrikainulainen.springdata.jpa.todo"</code></div><div class="line number4 index3 alt1 highlighted"><code class="java plain">})</code></div><div class="line number5 index4 alt2"><code class="java color1">@EnableTransactionManagement</code></div><div class="line number6 index5 alt1"><code class="java keyword">class</code> <code class="java plain">PersistenceContext {</code></div><div class="line number7 index6 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number8 index7 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java comments">//The beans are configured here</code></div><div class="line number9 index8 alt2"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><div class="note"> <strong>Additional Reading:</strong><p class="cye-lm-tag"></p>
<ul><li><a href="http://docs.spring.io/spring-data/jpa/docs/current/api/org/springframework/data/jpa/repository/config/EnableJpaRepositories.html" target="_blank">The Javadoc of the <em>@EnableJpaRepositories</em> annotation</a></li><li><a href="http://docs.spring.io/spring-data/jpa/docs/1.8.x/reference/html/#repositories.create-instances" target="_blank">Spring Data JPA Reference Manual: 3.5. Creating repository instances</a></li></ul></div><p class="cye-lm-tag">That is all folks. We have now successfully configured the persistence layer of our example application. Let’s move on and summarize what we learned from this blog post.</p>
<h2>Summary</h2><p class="cye-lm-tag"></p>
<p class="cye-lm-tag"></p>
<br> This blog post has taught us two things:<p class="cye-lm-tag"></p>
<ul><li>If we need to use a different configuration in different environment, we should move this configuration to a properties file.</li><li>We learned to configure the persistence layer of a Spring application that uses Spring Data JPA and Hibernate.</li></ul><p class="cye-lm-tag">The <a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-part-two-crud/">next part of this tutorial</a> describes how we can create a Spring Data JPA repository that provides CRUD operations for a simple entity.</p>
<p class="cye-lm-tag"><strong>P.S.</strong> You can <a href="https://github.com/pkainulainen/spring-data-jpa-examples/tree/master/query-methods" target="_blank">get the example application of this blog post from Github</a>.</p>
<div class="note">If you want to learn how to use Spring Data JPA, you should read my <a href="/spring-data-jpa-tutorial/">Spring Data JPA tutorial</a>.</div> <span id="tve_leads_end_content" style="display: block; visibility: hidden; border: 1px solid transparent;" class="cye-lm-tag"></span>
</div>

</div>




</div>
</div>
</div>
</div>
</div>
</div><p style="line-height: 24px;" data-unit="px" class="tve_p_center cye-lm-tag"><span class="tve_custom_font_size cye-lm-tag" style="font-size: 16px;">I will never rent, sell, or share your email address.<br></span></p>

</div></div></div></div></div></div></div>
<section id="comments"><div class="comments_intro"><span class="num_comments cye-lm-tag">149</span> comments… <a href="#commentform" rel="nofollow">add one</a></div><ul class="comment_list"><li class="comment even thread-even depth-1" id="comment-4867"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">abhishek</span>  <span class="comment_date cye-lm-tag">April 17, 2012, 13:31</span></div><div class="comment_text" id="comment-body-4867"><p class="cye-lm-tag">excellent article very helpfull!!</p>
<p class="cye-lm-tag">can you also explain how to set up a simple hibernate4 and spring3.1 web application without using jpa. especially the part about how to use LocalSessionFactoryBuilder.</p>
<p class="cye-lm-tag">Thanks.</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-4876"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">April 17, 2012, 18:51</span></div><div class="comment_text" id="comment-body-4876"><p class="cye-lm-tag">Hi Abhishek,</p>
<p class="cye-lm-tag">Thanks for your comment. Eugen Paraschiv has already written a good tutorial about the configuration of Hibernate and Spring 3.1:</p>
<p class="cye-lm-tag"><a href="http://www.baeldung.com/2011/12/02/the-persistence-layer-with-spring-3-1-and-hibernate/" rel="nofollow">http://www.baeldung.com/2011/12/02/the-persistence-layer-with-spring-3-1-and-hibernate/</a></p>
<p class="cye-lm-tag">I might also write a tutorial about this later but I think that I should first write the remaining parts of my Spring Data JPA tutorial.</p>
</div> </div></li></ul></li><li class="comment even thread-odd thread-alt depth-1" id="comment-8459"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Dhana kumar</span>  <span class="comment_date cye-lm-tag">September 15, 2012, 18:52</span></div><div class="comment_text" id="comment-body-8459"><p class="cye-lm-tag">Hi Petri,<br> I need help in testing declarative transaction handling by spring; Pls dont mind if it is nor related to current thread discussion. I am using Junit to test this, not getting this worked. Here is my simple Junit. Here, the attribute I given, defaultRollback = false means I want to see the row inserted in the table, and if defaultRollback = true,<br> it is not inserting the record and finally logs message ”Rolled back transaction after test execution for the context……showing exception..java.lang.NullPointerException.”. Even no exception arised, the transaction is getting rolled back and never inserting the record in the table.<br> <code><br> @RunWith(SpringJUnit4ClassRunner.class)<br> @ContextConfiguration(locations = "file:WebContent/WEB-INF/applicationContext.xml")<br> @TransactionConfiguration(transactionManager = "transactionManager", defaultRollback = false)<br> public class UserServiceTest {</code></p>
<p class="cye-lm-tag"><code> @Autowired<br> private UserService userService;</code></p>
<p class="cye-lm-tag"><code> @Autowired<br> private RoleService roleService;</code></p>
<p class="cye-lm-tag"><code> @Test<br> @Transactional<br> public void testAddUser() {<br> User user = new User();</code></p>
<p class="cye-lm-tag"><code> user.setFirstName("Dhana");<br> user.setLastName("Kumar");<br> user.setUserName("anemdhana");<br> user.setEmail("dhana.anem@gmail.com");<br> user.setAge(27);<br> user.setJoinedOn(new Date(System.currentTimeMillis()));<br> user.setActive(true);</code></p>
<p class="cye-lm-tag"><code> userService.addUser(user);</code></p>
<p class="cye-lm-tag"><code> Role role = roleService.findRole(99L);</code></p>
<p class="cye-lm-tag"><code> // here NPE will be thrown and hence entire transaction must be rolled back.<br> System.out.println(role.getName());<br> }<br> }<br> </code></p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-8474"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">September 16, 2012, 13:12</span></div><div class="comment_text" id="comment-body-8474"><p class="cye-lm-tag">Hi Dhana,</p>
<p class="cye-lm-tag">The reference documentation of Spring Framework states that <a href="http://static.springsource.org/spring/docs/3.1.x/spring-framework-reference/html/transaction.html#transaction-declarative-attransactional-settings" rel="nofollow">by default the transaction is rollbacked when a RuntimeException is thrown</a>. Since NullPointerException extends RuntimeException, this could be the reason why the transaction is rolled back. Do you have any idea why the Role object is not found and null is returned instead?</p>
</div> </div></li></ul></li><li class="comment even thread-even depth-1" id="comment-10954"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Dirk</span>  <span class="comment_date cye-lm-tag">November 12, 2012, 13:32</span></div><div class="comment_text" id="comment-body-10954"><p class="cye-lm-tag">Hi Petri,</p>
<p class="cye-lm-tag">Am trying your Spring Data JPA examples. Standard install and run with Jetty no problem.<br> However when trying to import the projects in Eclipse i am getting reference errors on spring-jpa-1.0<br> schema referenced from applicationContext.  Following a tip on a forum I updated version to 1.2.0.RELEASE instead of 1.0.2.RELEASE.<br> But still not able to build from Eclipse.<br> Can you give me a tip here.</p>
<p class="cye-lm-tag">Thx<br> Dirk</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-10957"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">November 12, 2012, 14:19</span></div><div class="comment_text" id="comment-body-10957"><p class="cye-lm-tag">The Spring Data JPA 1.0.2 had a “bug” that caused schema validation errors when STS was used. See this bug report for more details: <a href="https://jira.springsource.org/browse/DATAJPA-160" rel="nofollow">DATAJPA-160</a>.</p>
<p class="cye-lm-tag">However, as the bug report indicates, this should not cause build failure. When you updated the Spring Data JPA to version1.2.0.RELEASE, did you update both the dependency version (found from pom.xml file) and the application context configuration file?</p>
<p class="cye-lm-tag">Also, since you are using Spring Data JPA version 1.2.0, you <strong>do not have to configure Spring Data JPA by using XML</strong>. You can start using Java configuration by following these steps:</p>
<ol><li>Update the <em>pom.xml</em> file and set the dependency version of Spring Data JPA to 1.2.0.RELEASE.</li><li>Remove the <em>repositories</em> element and the schema declaration from the <em>applicationContext.xml</em> file.</li><li>Annotate the <code>ApplicationContext</code> class with the <code>@EnableJpaRepositories</code> annotation and set the base package of your repositories as its value. See the <a href="http://static.springsource.org/spring-data/data-jpa/docs/1.2.0.RELEASE/api/org/springframework/data/jpa/repository/config/EnableJpaRepositories.html" rel="nofollow">Javadoc of the @EnableJpaRepositories annotation</a> for more details.</li></ol><p class="cye-lm-tag">This should solve your problem.</p>
</div> </div><ul class="children"><li class="comment even depth-3" id="comment-11985"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Josh</span>  <span class="comment_date cye-lm-tag">December 10, 2012, 05:39</span></div><div class="comment_text" id="comment-body-11985"><p class="cye-lm-tag">Petri,</p>
<p class="cye-lm-tag">I downloaded your source code and loaded the project in STS. When I deployed it to the built-in vFabric tc server it worked fine. I made the changes you listed above and tried deploying it again, but I got a 404 for the home view. Backing out the steps, the 404 seemed related to the modifications to applicationContext.xml. In the end I kept the updated dependency version in the POM and updated the version number in the schema statement to get rid of the error in STS.</p>
<p class="cye-lm-tag">Thanks for this tutorial series!</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-4" id="comment-12013"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri Kainulainen</span>  <span class="comment_date cye-lm-tag">December 10, 2012, 19:38</span></div><div class="comment_text" id="comment-body-12013"><p class="cye-lm-tag">Hi Josh,</p>
<p class="cye-lm-tag">I am glad to hear that you liked my tutorial. About your problem, did you end up using the XML configuration since the Java configuration did not work in the built-in vFabric tc server?</p>
</div> </div></li></ul></li></ul></li></ul></li><li class="comment even thread-odd thread-alt depth-1" id="comment-12232"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Josh</span>  <span class="comment_date cye-lm-tag">December 16, 2012, 21:55</span></div><div class="comment_text" id="comment-body-12232"><p class="cye-lm-tag">I am using a combination of Java configuration and XML configuration, but I had to use the jpa:repositories element in the XML configuration. The 404 in my case seemed to be related to using the @EnableJpaRepositories annotation instead of the xml element.</p>
</div> </div></li><li class="comment odd alt thread-even depth-1" id="comment-12616"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">amit</span>  <span class="comment_date cye-lm-tag">December 29, 2012, 09:08</span></div><div class="comment_text" id="comment-body-12616"><p class="cye-lm-tag">Thanks a lot for all the articles…<br> Its people like you that make internet fun and useful!! cheers !!!</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-12619"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">December 29, 2012, 10:12</span></div><div class="comment_text" id="comment-body-12619"><p class="cye-lm-tag">You are welcome. By the way, your comment just made my day!</p>
</div> </div></li></ul></li><li class="comment odd alt thread-odd thread-alt depth-1" id="comment-23304"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">SergioK</span>  <span class="comment_date cye-lm-tag">January 29, 2013, 20:06</span></div><div class="comment_text" id="comment-body-23304"><p class="cye-lm-tag">Why do I need extra information , I like to read example working of Spring Data.<br> What is deal with servlet ? Spring config file and main are good enough. Sorry there are too much irrelevant information on the web.</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-23326"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">January 29, 2013, 20:30</span></div><div class="comment_text" id="comment-body-23326"><p class="cye-lm-tag">The web application initializer is used to configure the web application by using Java configuration. It has the following responsibilities:</p>
<ol><li>Create a new ‘root’ application context.</li><li>Register the application application context configuration class to the ‘root’ application context.</li><li>Register and map the dispatcher servlet.</li><li>Use a context loader listener to manage the lifecycle of the ‘root’ application context.</li></ol><p class="cye-lm-tag">In other words, your web application would not do much without the web application initializer (unless you use <code>web.xml</code> for configuring your web application). You can get more information about the <code>WebApplicationInitializer</code> from the <a href="http://static.springsource.org/spring/docs/3.1.x/javadoc-api/org/springframework/web/WebApplicationInitializer.htmlhttp://" target="_blank" rel="nofollow">API documentation of Spring Framework</a>.</p>
<p class="cye-lm-tag">I hope that this answered to your question.</p>
</div> </div></li></ul></li><li class="comment odd alt thread-even depth-1" id="comment-27656"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">SergioK</span>  <span class="comment_date cye-lm-tag">February 4, 2013, 14:51</span></div><div class="comment_text" id="comment-body-27656"><p class="cye-lm-tag">Too complicate . Just explain how to configure DB connection and interface .<br> and show simple main class to test it. In you explanation I got lost in the first step.</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-27870"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">February 4, 2013, 21:07</span></div><div class="comment_text" id="comment-body-27870"><p class="cye-lm-tag">I am sorry to hear that I lost you in the first step.</p>
<p class="cye-lm-tag">However, I do believe that this information is very relevant to people who want to use Spring Data JPA in web applications.</p>
<p class="cye-lm-tag">On the other hand, I want to help you to find relevant information about Spring Data JPA. Maybe these tutorials are more to your liking:</p>
<ul><li><a href="http://blog.springsource.org/2011/02/10/getting-started-with-spring-data-jpa/" target="_blank" rel="nofollow">Getting Started with Spring Data JPA</a></li><li><a href="http://blog.inflinx.com/2012/09/15/introduction-to-spring-data-jpa/" target="_blank" rel="nofollow">Introduction to Spring Data JPA</a></li><li><a href="http://www.baeldung.com/2011/12/22/the-persistence-layer-with-spring-data-jpa/" target="_blank rel=" nofollow"="">The Persistence Layer with Spring Data JPA</a></li></ul></div> </div><ul class="children"><li class="comment odd alt depth-3" id="comment-1374669"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">vishal</span>  <span class="comment_date cye-lm-tag">February 18, 2016, 19:09</span></div><div class="comment_text" id="comment-body-1374669"><p class="cye-lm-tag">pls provide good examples</p>
<p class="cye-lm-tag">like curdoperations and some useful task to realtime</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-4" id="comment-1374684"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">February 18, 2016, 19:31</span></div><div class="comment_text" id="comment-body-1374684"><p class="cye-lm-tag">Hi,</p>
<blockquote><p class="cye-lm-tag">like curdoperations</p>
</blockquote><p class="cye-lm-tag">Check out <a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-part-two-crud/" rel="nofollow">this blog post</a>.</p>
<blockquote><p class="cye-lm-tag">some useful task to realtime</p>
</blockquote><p class="cye-lm-tag">I am not sure what you mean. Could you clarify this a bit?</p>
</div> </div></li></ul></li></ul></li></ul></li><li class="comment odd alt thread-odd thread-alt depth-1" id="comment-27924"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">SergioK</span>  <span class="comment_date cye-lm-tag">February 5, 2013, 00:08</span></div><div class="comment_text" id="comment-body-27924"><p class="cye-lm-tag">Petri ,<br> Could you explain about configuration. We need a file (I don’t like annotation )<br> for DB connection. Is’ it ? What is a file name ? location ? and content?<br> What is a file contains repository definition is it a standard Spring name and where is a correct location for it ??.</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-28196"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">February 5, 2013, 08:51</span></div><div class="comment_text" id="comment-body-28196"><p class="cye-lm-tag">Of course. You can create the Spring application context configuration file by following these steps:</p>
<ol><li>Create a properties file that contains the properties used in your application context configuration file. This step is not mandatory but it makes your configuration a bit cleaner.</li><li>Read the property values from the properties file. If you don’t want to use properties file, you can skip this step.</li><li>Configure the data source bean.</li><li>Configure the entity manager factory bean.</li><li>Configure the transaction manager bean.</li><li>Enable @Transactional annotations.</li><li>Configure Spring Spring Data JPA.</li></ol><p class="cye-lm-tag">The name of the created properties file is <em>application.properties</em> and its content looks as follows:<br> <code></code></p>
<pre><code>#Database Configuration
db.driver=org.h2.Driver
db.url=jdbc:h2:mem:datajpa
db.username=sa
db.password=

#Hibernate Configuration
hibernate.dialect=org.hibernate.dialect.H2Dialect
hibernate.format_sql=true
hibernate.hbm2ddl.auto=create-drop
hibernate.naming_strategy=org.hibernate.cfg.ImprovedNamingStrategy
hibernate.show_sql=true
</code></pre><p class="cye-lm-tag"><br> The application context configuration (<em>applicationContext-persistence.xml</em>) file looks as follows:<br> <code></code></p>
<pre><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;beans xmlns="http://www.springframework.org/schema/beans"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:jpa="http://www.springframework.org/schema/data/jpa"
  xmlns:tx="http://www.springframework.org/schema/tx"
  xmlns:context="http://www.springframework.org/schema/context"
  xsi:schemaLocation="http://www.springframework.org/schema/beans 
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/data/jpa 
    http://www.springframework.org/schema/data/jpa/spring-jpa-1.0.xsd
    http://www.springframework.org/schema/tx 
    http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
    http://www.springframework.org/schema/context 
    http://www.springframework.org/schema/context/spring-context-3.1.xsd"&gt;

  &lt;!-- Read the property values from application.properties --&gt;
  &lt;context:property-placeholder location="classpath:application.properties"/&gt;

  &lt;!-- Configure the data source bean --&gt;
  &lt;bean id="dataSource" class="com.jolbox.bonecp.BoneCPDataSource"&gt;
    &lt;property name="driverClass" value="${db.driver}"/&gt;
    &lt;property name="jdbcUrl" value="${db.url}"/&gt;
    &lt;property name="username" value="${db.username}"/&gt;
    &lt;property name="password" value="${db.password}"/&gt;
  &lt;/bean&gt;

  &lt;!-- Create default configuration for Hibernate --&gt;
  &lt;bean id="hibernateJpaVendorAdapter" 
    class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter"/&gt;

  &lt;!-- Configure the entity manager factory bean --&gt;
  &lt;bean id="entityManagerFactory" 
    class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean"&gt;
    &lt;property name="dataSource" ref="dataSource"/&gt;
    &lt;property name="jpaVendorAdapter" ref="hibernateJpaVendorAdapter"/&gt;
    &lt;!-- Set the base package of your model classes --&gt;
    &lt;property name="packagesToScan" value="foo.bar.model"/&gt;
    &lt;property name="jpaProperties"&gt;
      &lt;props&gt;
        &lt;prop key="hibernate.dialect"&gt;${hibernate.dialect}&lt;/prop&gt;
        &lt;prop key="hibernate.ejb.naming_strategy"&gt;${hibernate.naming_strategy}&lt;/prop&gt;
        &lt;prop key="hibernate.format_sql"&gt;${hibernate.format_sql}&lt;/prop&gt;
        &lt;prop key="hibernate.hbm2ddl.auto"&gt;${hibernate.hbm2ddl.auto}&lt;/prop&gt;
        &lt;prop key="hibernate.show_sql"&gt;${hibernate.show_sql}&lt;/prop&gt;
      &lt;/props&gt;
    &lt;/property&gt;
  &lt;/bean&gt;

  &lt;!-- Configure the transaction manager bean --&gt;
  &lt;bean id="transactionManager" 
    class="org.springframework.orm.jpa.JpaTransactionManager"&gt;
    &lt;property name="entityManagerFactory" ref="entityManagerFactory"/&gt;
  &lt;/bean&gt;

  &lt;!-- Enable @Transactional annotations --&gt;
  &lt;tx:annotation-driven/&gt;

  &lt;!-- 
    Configure Spring Data JPA and set the base package of the 
    repository interfaces 
  --&gt;
  &lt;jpa:repositories base-package="foo.bar.repository"/&gt;
&lt;/beans&gt;
</code></pre><p class="cye-lm-tag"><br> Both of these files must be found from the classpath. If you are using Maven, you should put these files to the ‘src/main/resources directory’.</p>
<p class="cye-lm-tag">I hope that this answered to your question.</p>
</div> </div><ul class="children"><li class="comment odd alt depth-3" id="comment-297747"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Abdulrhman A.</span>  <span class="comment_date cye-lm-tag">December 7, 2013, 15:20</span></div><div class="comment_text" id="comment-body-297747"><p class="cye-lm-tag">Thank you so much for All you tutorials and with this answer too.</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-4" id="comment-299017"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">December 8, 2013, 22:22</span></div><div class="comment_text" id="comment-body-299017"><p class="cye-lm-tag">You are welcome. I am happy to hear that these tutorials have been useful to you.</p>
</div> </div></li></ul></li></ul></li></ul></li><li class="comment odd alt thread-even depth-1" id="comment-72470"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Thiago Henrique</span>  <span class="comment_date cye-lm-tag">March 16, 2013, 05:23</span></div><div class="comment_text" id="comment-body-72470"><p class="cye-lm-tag">Wow only now realized your Tutorials <a href="http://www.petrikainulainen.net/tutorials/" rel="nofollow">http://www.petrikainulainen.net/tutorials/</a></p>
<p class="cye-lm-tag">excellent reference, very nice .</p>
<p class="cye-lm-tag">great job , very helpful.</p>
<p class="cye-lm-tag">Thanks again!</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-72865"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">March 16, 2013, 10:51</span></div><div class="comment_text" id="comment-body-72865"><p class="cye-lm-tag">Thank you for your kind words.</p>
<p class="cye-lm-tag">I created that page because I wanted to provide a shortcut to the good stuff which I have written. I am happy hear that you like it.</p>
</div> </div></li></ul></li><li class="comment odd alt thread-odd thread-alt depth-1" id="comment-82287"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Akram</span>  <span class="comment_date cye-lm-tag">March 22, 2013, 22:07</span></div><div class="comment_text" id="comment-body-82287"><p class="cye-lm-tag">Hi Petri, I hope I am not going to waste your time since I am a newbie here, first thank you about all the efforts you are doing so others can learn.</p>
<p class="cye-lm-tag">please what did you mean by this (and how to do it ?) :</p>
<p class="cye-lm-tag">(Note: Remember to create the model and repository packages first. Since it is not possible to add empty directories to the Git staging area, the Github repository does not have them either).<br> thanks lot</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-82303"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">March 22, 2013, 22:23</span></div><div class="comment_text" id="comment-body-82303"><p class="cye-lm-tag">Don’t worry about wasting my time. It is always nice to help other people.</p>
<p class="cye-lm-tag">About your question:</p>
<p class="cye-lm-tag"><a href="https://git.wiki.kernel.org/index.php/GitFaq#Can_I_add_empty_directories.3F" target="_blank" rel="nofollow">It is not possible to add empty directory to a Git repository</a>. This means that if you get <a href="https://github.com/pkainulainen/spring-data-jpa-examples/tree/master/tutorial-part-one" target="_blank" rel="nofollow">the example application of this blog post</a> from Github, you have to create the following packages:</p>
<ul><li>The <code>net.petrikainulainen.spring.datajpa.model</code> is the base package of model classes.</li><li>The <code>net.petrikainulainen.spring.datajpa.repository</code> is the base package of Spring Data JPA repositories.</li></ul><p class="cye-lm-tag">These packages are not found from Github because they don’t have any classes yet. That is why you have to create them yourself.</p>
<p class="cye-lm-tag">I hope that this answered to your question.</p>
</div> </div></li></ul></li><li class="comment odd alt thread-even depth-1" id="comment-265881"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Narciso Parra</span>  <span class="comment_date cye-lm-tag">June 27, 2013, 19:53</span></div><div class="comment_text" id="comment-body-265881"><p class="cye-lm-tag">Hi petri, I am trying to run de example in eclipse IDE but when deploy in jboss<br> I get this ERROR Message:<br> ERROR …[org.springframework.web.servlet.tags.MessageTag] (http-localhost-127.0.0.1-8080-1) No WebApplicationContext found: no ContextLoaderListener registered?: java.lang.IllegalStateException: No WebApplicationContext found: no ContextLoaderListener registered?<br> No Spring WebApplicationInitializer types detected on classpath</p>
<p class="cye-lm-tag">Can you give me some advice about the problem.</p>
<p class="cye-lm-tag">thanks in advance</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-265883"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">June 27, 2013, 20:27</span></div><div class="comment_text" id="comment-body-265883"><p class="cye-lm-tag">I started to wonder if it possible to run this application with JBoss because it uses Java configuration for configuring the application context and the web application.</p>
<p class="cye-lm-tag">I did some research and found out that there is an <a href="https://issues.jboss.org/browse/SNOWDROP-41" target="_blank" rel="nofollow">open issue about this in the JBoss issue tracker</a>. I am not a JBoss expert but the issue is not resolved so I assume that Java configuration is not supported at the moment.</p>
<p class="cye-lm-tag">If this is true, you have to</p>
<ol><li><a href="http://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-part-one-configuration/#comment-28196" rel="nofollow">Create an application context configuration file</a>.</li><li>Create a <em>web.xml</em> file. Check out <a href="http://www.mkyong.com/spring-mvc/spring-mvc-hello-world-example/" target="_blank" rel="nofollow">this blog post</a> for more details about this (Search for a heading ‘Spring Configuration’).</li><li>Delete the Java configuration classes (<code>ApplicationContext</code> and <code>DataJPAExampleInitializer</code>).</li></ol><p class="cye-lm-tag">I hope that this answered to your question.</p>
</div> </div><ul class="children"><li class="comment odd alt depth-3" id="comment-265888"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Narciso Parra</span>  <span class="comment_date cye-lm-tag">June 27, 2013, 23:48</span></div><div class="comment_text" id="comment-body-265888"><p class="cye-lm-tag">Thank… I choose a tomcat 7 server and I already running this tutorial.</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-4" id="comment-265890"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">June 27, 2013, 23:53</span></div><div class="comment_text" id="comment-body-265890"><p class="cye-lm-tag">Great!</p>
<p class="cye-lm-tag">I think that Tomcat is often the best choice for running Spring web applications in the production environment.</p>
<p class="cye-lm-tag">I like to use the Maven Jetty plugin in development environment but Tomcat works just fine like you said.</p>
</div> </div></li></ul></li></ul></li></ul></li><li class="comment odd alt thread-odd thread-alt depth-1" id="comment-267700"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Boris</span>  <span class="comment_date cye-lm-tag">July 23, 2013, 14:49</span></div><div class="comment_text" id="comment-body-267700"><p class="cye-lm-tag">Hi ,<br> I create interface<br> public interface GreetingRepo extends Repository {</p>
<p class="cye-lm-tag"> S save(S entity);<br> T findOne(ID primaryKey);<br> Iterable findAll();<br> }</p>
<p class="cye-lm-tag">and and into applicationContext.xml</p>
<p class="cye-lm-tag">but where I use it define @Autowired<br> GreetingRepo repo;</p>
<p class="cye-lm-tag"> repo.findAll(); I got  java.lang.NullPointerException.<br> What is miss here?<br> Any idea ?</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-267717"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">July 23, 2013, 17:46</span></div><div class="comment_text" id="comment-body-267717"><p class="cye-lm-tag">Hi Boris,</p>
<p class="cye-lm-tag">When you create repository interfaces, you must provide two type parameters: type of the entity and type of the entity’s id.</p>
<p class="cye-lm-tag">I assume that the name of your entity class is <code>Greeting</code> and the type of its id is <code>Long</code>.</p>
<p class="cye-lm-tag">Also, I create the repository interface by extending the <code>CrudRepository</code> interface instead of the <code>Repository</code> interface. This way I don’t have declare the repository methods manually.</p>
<p class="cye-lm-tag">In other words, your repository interface should look like this:</p>
<pre><code>
public interface GreetingRepo extends CrudRepository&lt;Greeting, Long&gt; {
	
}
</code>
</pre><p class="cye-lm-tag">I noticed that your original repository interface extends the <code>Repository</code> interface (instead of <code>JpaRepository</code> or <code>CrudRepository</code>). If you want to specify your repository methods manually, you have to create an intermediate interface and copy the method declarations to that interface. If you want to use the <code>save()</code>, <code>findOne()</code>, and <code>findAll()</code> methods, your repository interfaces should look like this:</p>
<pre><code>
//Intermediate interface
interface MyBaseRepository&lt;T, ID extends Serializable&gt; extends Repository&lt;T, ID&gt; {
  	T findOne(ID id);
  	Iterable&lt;T&gt; findAll();
	T save(T entity);
}

//Repository interface
public interface GreetingRepo extends MyBaseRepository&lt;Greeting, Long&gt; {

}
</code>
</pre><p class="cye-lm-tag">More information:</p>
<ul><li><a href="http://static.springsource.org/spring-data/data-jpa/docs/current/reference/html/repositories.html#repositories.definition" target="_blank" rel="nofollow">Defining repository interfaces</a></li><li><a href="http://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-part-two-crud/" rel="nofollow">Spring Data JPA Tutorial: CRUD</a></li></ul><p class="cye-lm-tag">I hope that this answered to your question.</p>
</div> </div></li></ul></li><li class="comment odd alt thread-even depth-1" id="comment-275568"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">sawakito</span>  <span class="comment_date cye-lm-tag">October 2, 2013, 19:15</span></div><div class="comment_text" id="comment-body-275568"><p class="cye-lm-tag">Hi Petri,</p>
<p class="cye-lm-tag">I have created un jar with several JPA repository in it and it works fine when I tested it in the same project. But now I need to use those JPA Repositories (they are interfaces extends JpaRepository) in another project, so I imported the jar into my new project, then I got the err like: “No unique bean of type [**.****.**.ClientRepository] is defined: expected single bean but found 0″. Apparently it failed to load those JPA Repositories beans. I felt quite confused and I’m new for JPA so please help me out.</p>
<p class="cye-lm-tag">Note: I used @EnableJpaRepositories(basePackages=”**.***.***.repository”) in the ApplicationContexte.java, and I noticed that annotation seems doesn’t work by giving un package from an external jar. Is that the reason?</p>
<p class="cye-lm-tag">Thank you very much and your articles are really great.</p>
<p class="cye-lm-tag">Sawakito</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-275672"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">October 3, 2013, 21:06</span></div><div class="comment_text" id="comment-body-275672"><p class="cye-lm-tag"><a href="https://twitter.com/olivergierke" target="_blank" rel="nofollow">Olivier Gierke</a> from SpringSource investigated this issue as well. You can <a href="https://jira.springsource.org/browse/DATAJPA-408" target="_blank" rel="nofollow">read the the results from the Jira issue</a> which I created. It seems that Spring Data JPA works as designed.</p>
</div> </div></li></ul></li><li class="comment odd alt thread-odd thread-alt depth-1" id="comment-275579"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag"><a href="http://www.effectivetrainings.de" rel="external nofollow" class="url">Martin Dilger</a></span>  <span class="comment_date cye-lm-tag">October 2, 2013, 21:44</span></div><div class="comment_text" id="comment-body-275579"><p class="cye-lm-tag">Out of curiosity, i just tried it out.<br> Indeed, with JavaConfig and @EnableJpaRepositories it does not work. With XML there is no problem.<br> A Demo Project could be found here: <a href="https://github.com/dilgerma/spring-data-tutorial" rel="nofollow">https://github.com/dilgerma/spring-data-tutorial</a>.</p>
<p class="cye-lm-tag">Tested with spring-data 1.3.2</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-275580"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">October 2, 2013, 21:44</span></div><div class="comment_text" id="comment-body-275580"><p class="cye-lm-tag">Thanks a lot Martin!</p>
</div> </div></li></ul></li><li class="comment odd alt thread-even depth-1" id="comment-276855"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Nikolay</span>  <span class="comment_date cye-lm-tag">October 9, 2013, 22:28</span></div><div class="comment_text" id="comment-body-276855"><p class="cye-lm-tag">Hello Petri!</p>
<p class="cye-lm-tag">Thank you for your tutorial!<br> I am having one question: how i can run this sample project on Tomcat?<br> Need to create web.xml?<br> When i run project on Tomcat, i saw something like that: <a href="http://gyazo.com/6e051e955da54de0b2878815d712150f" rel="nofollow">http://gyazo.com/6e051e955da54de0b2878815d712150f</a><br> But under Jetty it is working very well.<br> (It not mere curiosity, I want to use your configuration pattern on production :-)</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-276859"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">October 9, 2013, 22:37</span></div><div class="comment_text" id="comment-body-276859"><p class="cye-lm-tag">Hi,</p>
<p class="cye-lm-tag">I noticed that you use Tomcat 6. If you want to configure your web application by using Java configuration, you have to use a servlet container which supports the servlet 3.0 specification. In other words, you have to use Tomcat 7 (I just tested this with Tomcat 7.0.40 and it was working).</p>
<p class="cye-lm-tag">If you have to use Tomcat 6, you have to replace the class which implements the <code>WebApplicationInitializer</code> interface with a <em>web.xml</em> file.</p>
<p class="cye-lm-tag">Remember that you can still configure the application context by using Java configuration (no need to replace those classes with XML configuration files)!</p>
</div> </div></li></ul></li><li class="comment odd alt thread-odd thread-alt depth-1" id="comment-276869"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Nikolay</span>  <span class="comment_date cye-lm-tag">October 9, 2013, 23:35</span></div><div class="comment_text" id="comment-body-276869"><p class="cye-lm-tag">Thank you Petri!<br> I will be using Tomcat 7<br> And I best fan of configuring application from Java.</p>
</div> </div></li><li class="comment even thread-even depth-1" id="comment-279727"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Srinivas</span>  <span class="comment_date cye-lm-tag">October 22, 2013, 05:38</span></div><div class="comment_text" id="comment-body-279727"><p class="cye-lm-tag">Petri – you really rock! Thanks for such a great article.</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-279758"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">October 22, 2013, 10:28</span></div><div class="comment_text" id="comment-body-279758"><p class="cye-lm-tag">You are welcome. I am happy to hear that this tutorial was useful to you!</p>
</div> </div></li></ul></li><li class="comment even thread-odd thread-alt depth-1" id="comment-280199"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Ekrem Kamberoglu</span>  <span class="comment_date cye-lm-tag">October 26, 2013, 22:56</span></div><div class="comment_text" id="comment-body-280199"><p class="cye-lm-tag">Great reference! Thank you very much for sharing.<br> Cheers..</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-280278"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">October 27, 2013, 17:42</span></div><div class="comment_text" id="comment-body-280278"><p class="cye-lm-tag">You are welcome!</p>
</div> </div></li></ul></li><li class="comment even thread-even depth-1" id="comment-295659"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Ujj</span>  <span class="comment_date cye-lm-tag">December 4, 2013, 23:46</span></div><div class="comment_text" id="comment-body-295659"><p class="cye-lm-tag">Excellent material.<br> Not only did you put time and effort in sharing this, but you also patiently answer(all sorts of) questions.<br> Respect.</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-296202"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">December 5, 2013, 19:01</span></div><div class="comment_text" id="comment-body-296202"><p class="cye-lm-tag">Thank you for your kind words! You just made my day.</p>
</div> </div></li></ul></li><li class="comment even thread-odd thread-alt depth-1" id="comment-318016"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag"><a href="https://github.com/jherranzm" rel="external nofollow" class="url">José Luis Herranz</a></span>  <span class="comment_date cye-lm-tag">December 29, 2013, 13:45</span></div><div class="comment_text" id="comment-body-318016"><p class="cye-lm-tag">Hi Petri,<br> congratulations for your blog, it has helped me a lot in the first steps with Spring JPA.</p>
<p class="cye-lm-tag">Now I’m facing some troubles trying to set up a project with two different databases. What I try to do is manage data from two different MySQL databases. I’ve tried to duplicate the code in ApplicationContext.java creating two different DataSource, LocalContainerEntityManagerFactoryBean and JpaTransactionManager. I have also added the corresponding parameters in application.properties file. But when I run the code, at the point in which creates the XXXRepository (the first bean), it generates an exception **No qualifying bean of type [javax.persistence.EntityManagerFactory] is defined: expected single matching bean but found 2**.</p>
<p class="cye-lm-tag">I think that I have to inject the concrete PersistenceContext in some way but I do not know exactly where to do that, in the Repository, in the Service…</p>
<p class="cye-lm-tag">Could you please tell me what I’m doing wrong?</p>
<p class="cye-lm-tag">Thanks a lot for your time and your interest.</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-318036"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">December 29, 2013, 14:17</span></div><div class="comment_text" id="comment-body-318036"><p class="cye-lm-tag">Hi José,</p>
<p class="cye-lm-tag">I am happy to hear that my blog has been useful to you!</p>
<p class="cye-lm-tag">About your problem:</p>
<p class="cye-lm-tag">When I read your comment, I got the impression that you have the following requirements:</p>
<ul><li>You have two groups of entities: A and B. The entities belonging to a group A are “stored” to the database A and the entities belonging to the group B are “stored” to the database B.</li><li>You want to create different entity managers and transaction managers for databases A and B.</li></ul><p class="cye-lm-tag">If this is the case, you should read this blog post which describes <a href="http://scattercode.co.uk/2013/11/18/spring-data-multiple-databases/" target="_blank" rel="nofollow">how you can use Spring Data JPA with multiple databases</a>.</p>
<p class="cye-lm-tag">I hope that this answer will help you to solve your problem.</p>
</div> </div><ul class="children"><li class="comment even depth-3" id="comment-1341993"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag"><a href="http://www.scattercode.co.uk" rel="external nofollow" class="url">Steve</a></span>  <span class="comment_date cye-lm-tag">January 5, 2016, 12:38</span></div><div class="comment_text" id="comment-body-1341993"><p class="cye-lm-tag">Hi Petri,</p>
<p class="cye-lm-tag">Thanks for the link to that blog post from back in 2013. I only just spotted it in my referrer logs!</p>
<p class="cye-lm-tag">Anyway, I thought I’d mention that for anyone trying to do the same in the world of Spring Boot, I have just knocked up an updated post:</p>
<p class="cye-lm-tag"><a href="http://scattercode.co.uk/2016/01/05/multiple-databases-with-spring-boot-and-spring-data-jpa/" rel="nofollow">http://scattercode.co.uk/2016/01/05/multiple-databases-with-spring-boot-and-spring-data-jpa/</a></p>
<p class="cye-lm-tag">It doesn’t explain things as much as the original post, but is hopefully useful to anyone struggling to persuade Spring Boot to work with multiple data sources. To be honest, the way to do it is almost identical, but there are a couple of gotchas caused by Spring Boot trying to wire everything up based on conventional names.</p>
<p class="cye-lm-tag">Hopefully it might be useful to someone out there. Keep up the good work!</p>
<p class="cye-lm-tag">Steve</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-4" id="comment-1342224"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">January 5, 2016, 20:46</span></div><div class="comment_text" id="comment-body-1342224"><p class="cye-lm-tag">Hi Steve,</p>
<p class="cye-lm-tag">Thank you for sharing your new blog post. I am sure that it is useful to my readers. That is why I shared it on Twitter, and I hope that you get some traffic from Twitter.</p>
</div> </div></li></ul></li></ul></li></ul></li><li class="comment even thread-even depth-1" id="comment-327621"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag"><a href="http://twitter.com/edwardjbeckett" rel="external nofollow" class="url">Edward Beckett</a></span>  <span class="comment_date cye-lm-tag">January 11, 2014, 18:43</span></div><div class="comment_text" id="comment-body-327621"><p class="cye-lm-tag">Very clean coding… Nice work Petri +1</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-327652"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">January 11, 2014, 19:57</span></div><div class="comment_text" id="comment-body-327652"><p class="cye-lm-tag">Thanks! I really appreciate your kind words.</p>
</div> </div></li></ul></li><li class="comment even thread-odd thread-alt depth-1" id="comment-332380"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Francois</span>  <span class="comment_date cye-lm-tag">January 15, 2014, 11:15</span></div><div class="comment_text" id="comment-body-332380"><p class="cye-lm-tag">Hi Petri,</p>
<p class="cye-lm-tag">Could you please explain me why you would still keep the <code>applicationContext.xml</code>?</p>
<p class="cye-lm-tag">I created the following class:</p>
<pre><code>
@EnableWebMvc
@Configuration
@ComponentScan(basePackages = "org.foo.bar.controller")
public class WebMvcConfig extends WebMvcConfigurerAdapter{
     @Override
     public void addResourceHandlers(final ResourceHandlerRegistry registry){
          registry.addResourceHandler("/static/**").addResourceLocations("/static/");
     }
}
</code>
</pre><p class="cye-lm-tag">Modified the <code>WebApplicationInitializer</code> to the following:</p>
<pre><code>
webApplicationContext.register(ApplicationConfig.class, WebMvcConfig.class);
</code>
</pre><p class="cye-lm-tag">and added the following annotation to the <code>ApplicationConfig</code> class: <code>@EnableJpaRepositories(basePackages = "org.foo.bar.repository")</code></p>
<p class="cye-lm-tag">this seems to do the work and allows me to get rid of the xml files. Am I missing something?</p>
<p class="cye-lm-tag">Otherwise I really appreciate your tutorials. By far the best on the subject. I’d love on advanced predication with querydsl. like linked tables e.g. select * from table_1 where a in (select a from table_2 where whatever). This is one thing that eludes me a bit :) (I’m a complete Business Project Manager)</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-332492"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">January 15, 2014, 12:51</span></div><div class="comment_text" id="comment-body-332492"><p class="cye-lm-tag">Hi Francois,</p>
<p class="cye-lm-tag">There is no reason to use the XML configuration anymore. This tutorial is based on Spring Data 1.0.X and this version didn’t support Java configuration yet. In other words, your configuration looks good to me (I prefer Java configuration over XML configuration).</p>
<p class="cye-lm-tag">I added your suggestion to my todo list. This is a quite common question so I guess that I should write about it in the near future (I could cover the JPA Criteria API as well).</p>
</div> </div><ul class="children"><li class="comment even depth-3" id="comment-361397"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">D</span>  <span class="comment_date cye-lm-tag">February 11, 2014, 03:10</span></div><div class="comment_text" id="comment-body-361397"><p class="cye-lm-tag">Hi Petri,</p>
<p class="cye-lm-tag">Excellent tutorials. Whilst trying to remove the xml app config however like this post I keep getting the following:<br> java.lang.IllegalStateException: LifecycleProcessor not initialized – call ‘refresh’ before invoking lifecycle methods via the context: WebApplicationContext for namespace ‘dispatcher-servlet’: startup date [Tue Feb 11 01:02:05 GMT 2014]; root of context hierarchy</p>
<p class="cye-lm-tag">I’ve followed Francois’ steps and tried with spring data jpa versions 1.2 and 1.4.3.</p>
<p class="cye-lm-tag">It would be great to see this one updated with latest versions were appropriate and the java based config.</p>
<p class="cye-lm-tag">Cheers,<br> D</p>
</div> </div></li></ul></li></ul></li><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt thread-even depth-1" id="comment-361759"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">February 11, 2014, 10:10</span></div><div class="comment_text" id="comment-body-361759"><p class="cye-lm-tag">Hi,</p>
<p class="cye-lm-tag">I have never seen that exception before but you could take a look at the example application of my Spring Social tutorial. It configures Spring Data JPA by using Java configuration (no XML). You can <a href="https://github.com/pkainulainen/spring-social-examples/blob/master/sign-in/spring-mvc-normal/src/main/java/net/petrikainulainen/spring/social/signinmvc/config/PersistenceContext.java" target="_blank" rel="nofollow">get the configuration class from Github</a>.</p>
<p class="cye-lm-tag">I agree that it would be nice if I could update this tutorial to use the latest version of Spring Data JPA. I will try to find the time to do this.</p>
</div> </div><ul class="children"><li class="comment even depth-2" id="comment-362436"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">D</span>  <span class="comment_date cye-lm-tag">February 12, 2014, 00:42</span></div><div class="comment_text" id="comment-body-362436"><p class="cye-lm-tag">Thanks Petri – I’ll try the other tutorial and hopefully get my config working.</p>
</div> </div></li></ul></li><li class="comment odd alt thread-odd thread-alt depth-1" id="comment-455567"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">VTS</span>  <span class="comment_date cye-lm-tag">April 14, 2014, 18:58</span></div><div class="comment_text" id="comment-body-455567"><p class="cye-lm-tag">I am trying to configure Spring Data with spring MVC application and run on Tomcat server. I tried both XML and Java configuration ways. But it doesn’t run when I add dependent jars. Could you please help me with this. I have a created a normal web application and controller and services.<br> Thanks in Advance</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-456043"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">April 14, 2014, 20:48</span></div><div class="comment_text" id="comment-body-456043"><p class="cye-lm-tag">I have a few questions to you:</p>
<ul><li>Which Tomcat version do you use?</li><li>Do you configure your web application by using Java configuration or do you use <code>web.xml</code>?</li><li>What exactly happens when you try to run the application?</li></ul><p class="cye-lm-tag">If you answer to these questions, I might be able to figure out what your problem is.</p>
</div> </div></li></ul></li><li class="comment odd alt thread-even depth-1" id="comment-490818"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Suresh Kumar</span>  <span class="comment_date cye-lm-tag">April 21, 2014, 18:46</span></div><div class="comment_text" id="comment-body-490818"><p class="cye-lm-tag">Petri, I have two data sources with different credentials and database and host server names. The datasource_one has regular tables and views where as datasource_two has stored procedures for authentication and authorization. How do I map both datasources and get them CDI’s inside the application. Do you have any simple tutorial or example that we can follow. Appreciate any help.<br> Tks.</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-491322"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">April 21, 2014, 20:51</span></div><div class="comment_text" id="comment-body-491322"><p class="cye-lm-tag">Hi,</p>
<p class="cye-lm-tag">read a blog post titled <a href="http://scattercode.co.uk/2013/11/18/spring-data-multiple-databases/" target="_blank" rel="nofollow">Spring Data repositories with multiple databases</a>. It should answer to your question.</p>
</div> </div></li></ul></li><li class="comment odd alt thread-odd thread-alt depth-1" id="comment-559740"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Diego</span>  <span class="comment_date cye-lm-tag">May 6, 2014, 18:43</span></div><div class="comment_text" id="comment-body-559740"><p class="cye-lm-tag">Hi Petri, I tried to apply the basic principles of your post in my web application, but I still can’t make the service I developed work. The service uses two different repositories and I used commons-dbcp to make my application get data. It just seems the @transactional annotation on the service’s method doesn’t work. I don’t know what else I can do. Can I send you a piece of my code so you can tell me what I’m doing wrong?</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-559768"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">May 6, 2014, 18:49</span></div><div class="comment_text" id="comment-body-559768"><p class="cye-lm-tag">Hi,</p>
<p class="cye-lm-tag">Can you add the source code of your service class and your application context configuration to <a href="http://pastebin.com/" target="_blank" rel="nofollow">Pastebin</a>? After you have done this, just add the link here and I will take a look at it.</p>
</div> </div><ul class="children"><li class="comment odd alt depth-3" id="comment-559910"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Diego</span>  <span class="comment_date cye-lm-tag">May 6, 2014, 19:26</span></div><div class="comment_text" id="comment-body-559910"><p class="cye-lm-tag">Thank you for replying so soon.<br> My application context file is in: <a href="http://pastebin.com/cXUZ663r" rel="nofollow">http://pastebin.com/cXUZ663r</a></p>
</div> </div><ul class="children"><li class="comment even depth-4" id="comment-559921"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Diego</span>  <span class="comment_date cye-lm-tag">May 6, 2014, 19:28</span></div><div class="comment_text" id="comment-body-559921"><p class="cye-lm-tag">My service is in: <a href="http://pastebin.com/q8vaV3t3" rel="nofollow">http://pastebin.com/q8vaV3t3</a><br> and my controller (where the service is injected) is in: <a href="http://pastebin.com/McAEAyUF" rel="nofollow">http://pastebin.com/McAEAyUF</a></p>
<p class="cye-lm-tag">Thanks again</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-5" id="comment-560250"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">May 6, 2014, 20:55</span></div><div class="comment_text" id="comment-body-560250"><p class="cye-lm-tag">I forgot to ask one thing:</p>
<p class="cye-lm-tag">is your problem that the <code>clear()</code> method of the <code>TransactionServiceImpl</code> class doesn’t save anything to the database? If that is not the problem, what is it?</p>
</div></div></li><li class="comment even depth-5" id="comment-560483"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Diego</span>  <span class="comment_date cye-lm-tag">May 6, 2014, 22:00</span></div><div class="comment_text" id="comment-body-560483"><p class="cye-lm-tag">The problem is that the crear() method isn’t working as a transaction, because when the call for the save method of the second repository throws an exception, there is no rollback of data saved through the call for the save method in the first repository.</p>
</div></div></li><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-5" id="comment-565449"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">May 7, 2014, 21:06</span></div><div class="comment_text" id="comment-body-565449"><p class="cye-lm-tag">Where do you you configure the classpath scanning for service classes? Move this <code>&lt;context-scan/&gt;</code> element to the application context configuration file which you added to Pastebin (and remove it from the old file). Also, let me know if this did the trick.</p>
</div></div></li></ul></li></ul></li></ul></li></ul></li><li class="comment even thread-even depth-1" id="comment-619105"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Leandro Souza</span>  <span class="comment_date cye-lm-tag">May 19, 2014, 17:38</span></div><div class="comment_text" id="comment-body-619105"><p class="cye-lm-tag">Thanks for your great post.<br> I am trying to configure Spring JPA.<br> I have some questions.<br> The DataJPAExampleInitializer isn’t loading.<br> Do I need to configure something at web.xml?<br> I am using Eclipse, Tomcat 7.<br> Thanks very much!</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-623560"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">May 20, 2014, 21:30</span></div><div class="comment_text" id="comment-body-623560"><p class="cye-lm-tag">You don’t need the <code>web.xml</code> file anymore as long as you deploy the example application to a servlet container which supports the servlet 3.x API (Tomcat 7 supports it).</p>
<p class="cye-lm-tag">Are you trying to deploy the war file to Tomcat 7 or are you trying to start the application in Eclipse by using its Tomcat support?</p>
</div> </div></li></ul></li><li class="comment even thread-odd thread-alt depth-1" id="comment-642938"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Marc</span>  <span class="comment_date cye-lm-tag">May 25, 2014, 19:35</span></div><div class="comment_text" id="comment-body-642938"><p class="cye-lm-tag">Hi Petri,</p>
<p class="cye-lm-tag">I discoverd your site a few days ago and I love it.  It’s amazing.<br> After reading your article I decided to convert the xml application configuration files to Java based configuration  but I’m encountering a problem with the entityManager.</p>
<p class="cye-lm-tag">My goal is to access to the Derby database of embedded glassfish with Spring Data JPA. It used to work well with the xml files (persistence + web)</p>
<p class="cye-lm-tag">I posted my question on StackOverFlow.  Could you have a look please ?   I’ve spent hours unsucessfully.<br> <a href="http://stackoverflow.com/questions/23857114/spring-java-config-error-creating-bean-with-name-entitymanagerfactory-defined" rel="nofollow">http://stackoverflow.com/questions/23857114/spring-java-config-error-creating-bean-with-name-entitymanagerfactory-defined</a></p>
<p class="cye-lm-tag">Could you explain the pros and cons of the entityManager as described in the doc<br> <a href="http://docs.spring.io/spring/docs/4.0.5.RELEASE/spring-framework-reference/htmlsingle/#orm-jpa-setup-jndi" rel="nofollow">http://docs.spring.io/spring/docs/4.0.5.RELEASE/spring-framework-reference/htmlsingle/#orm-jpa-setup-jndi</a><br> Obtaining an EntityManagerFactory from JNDI<br> LocalContainerEntityManagerFactoryBean</p>
<p class="cye-lm-tag">Thank you !<br> Marc</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-647835"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">May 26, 2014, 20:45</span></div><div class="comment_text" id="comment-body-647835"><p class="cye-lm-tag">Hi Marc,</p>
<p class="cye-lm-tag">Did the answer given to your StackOverflow question solve your problem?</p>
<p class="cye-lm-tag">About your second question: I think <a href="http://stackoverflow.com/questions/8479996/which-spring-entity-manager-factory-should-i-use" target="_blank" rel="nofollow">the answers of this StackOverflow question</a> answers to your question. Also, pay attention to <a href="http://docs.spring.io/spring/docs/4.0.5.RELEASE/spring-framework-reference/htmlsingle/#orm-jpa-setup" target="_blank" rel="nofollow">these tips given in the Spring Framework Reference Manual</a>:</p>
<ul><li>Use the <code>LocalEntityManagerFactoryBean</code> in simple deployment environments such as stand-alone applications and integration tests.</li><li>Obtain the <code>EntityManagerFactory</code> from JNDI when deploying to a Java EE 5 server. Check your server’s documentation on how to deploy a custom JPA provider into your server, allowing for a different provider than the server’s default.</li><li>Use the <code>LocalContainerEntityManagerFactoryBean</code> for full JPA capabilities in a Spring-based application environment. This includes web containers such as Tomcat as well as stand-alone applications and integration tests with sophisticated persistence requirements.</li></ul><p class="cye-lm-tag">If you read <a href="http://docs.spring.io/spring/docs/4.0.5.RELEASE/spring-framework-reference/htmlsingle/#orm-jpa-setup" target="_blank" rel="nofollow">this section of the Spring Framework Reference Manual</a>, you will notice that the pros and cons of each approach are described in it.</p>
<p class="cye-lm-tag">I hope that this answered to your question.</p>
</div> </div><ul class="children"><li class="comment even depth-3" id="comment-697363"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Marc</span>  <span class="comment_date cye-lm-tag">June 16, 2014, 00:55</span></div><div class="comment_text" id="comment-body-697363"><p class="cye-lm-tag">A little late but… thank you for your help.<br> Keep blogging and making tutorials :-)<br> Marc</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-4" id="comment-698545"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">June 16, 2014, 21:29</span></div><div class="comment_text" id="comment-body-698545"><p class="cye-lm-tag">You are welcome!</p>
</div> </div></li></ul></li></ul></li></ul></li><li class="comment even thread-even depth-1" id="comment-724813"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">mo</span>  <span class="comment_date cye-lm-tag">July 10, 2014, 15:16</span></div><div class="comment_text" id="comment-body-724813"><p class="cye-lm-tag">Hi Petri,</p>
<p class="cye-lm-tag">I can’t understand what do with the pom.xml . I do mvn install but generated is not a project structure but only a target directory.</p>
<p class="cye-lm-tag">Where do I place ApplicationContext.java next?</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-724854"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">July 10, 2014, 16:17</span></div><div class="comment_text" id="comment-body-724854"><p class="cye-lm-tag">Hi Mo,</p>
<p class="cye-lm-tag">if you use the default directory layout of Maven, you have to put your source code to the <em>src/main/java</em> directory (you should of course separate them to packages).  Have you checked out the <a href="https://github.com/pkainulainen/spring-data-jpa-examples/tree/master/query-methods" target="_blank" rel="nofollow">example application</a> of this blog post? If not, I suggest that you take a look at it.</p>
</div> </div></li></ul></li><li class="comment even thread-odd thread-alt depth-1" id="comment-743133"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Sanjeev K</span>  <span class="comment_date cye-lm-tag">July 29, 2014, 14:14</span></div><div class="comment_text" id="comment-body-743133"><p class="cye-lm-tag">Hi Petri,<br> Excellent Tutorials.<br> I am new to SpringData JPA,I refer your tutorials,I create a tutorial-part-one project using IntelliJ IDE &amp; Maven, Maven is build Successfully,But whenever i run  through tomcat server I did not get any out put  where i mistake, please help me</p>
<p class="cye-lm-tag">Thank you!,<br> Sanjeev K</p>
</div> </div></li><li class="comment odd alt thread-even depth-1" id="comment-849966"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Anonymous</span>  <span class="comment_date cye-lm-tag">October 4, 2014, 21:44</span></div><div class="comment_text" id="comment-body-849966"><p class="cye-lm-tag">Hi Petri,</p>
<p class="cye-lm-tag">Now I have performance problem when I load application it takes 9-10seconds where server itself<br> takes not more than 2, 2.5 seconds. How to load spring jars faster ?<br> Thank you.<br> Boris</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-850123"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">October 4, 2014, 23:24</span></div><div class="comment_text" id="comment-body-850123"><p class="cye-lm-tag">Is the “extra time” spend on loading the Spring application context or does it look like that the server is not doing anything?</p>
<p class="cye-lm-tag">If the log file shows that the extra time is spend when the server loads the Spring application context, you cannot really do anything to it (I will come back to this later).</p>
<p class="cye-lm-tag">On the other hand, if the server appears to be idle, it is probably scanning the jar files of your application. If this is the case, check out this wiki page found from the Jetty wiki: <a href="http://wiki.eclipse.org/Jetty/Howto/Avoid_slow_deployment" target="_blank" rel="nofollow">Avoid Slow Deployment</a>.</p>
<p class="cye-lm-tag">If you don’t want to start your server every time when you make a minor change to your application, you can avoid it by using one of these products (there might be others too):</p>
<ul><li><a href="http://zeroturnaround.com/software/jrebel/" target="_blank" rel="nofollow">JRebel</a> is a commercial product that will help you to be more productive because it can reload Java classes at runtime.</li><li><a href="https://github.com/spring-projects/spring-loaded" target="_blank" rel="nofollow">Spring Loaded</a> is an open source JVM agent that can reload Java classes at runtime.</li></ul></div> </div></li></ul></li><li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1068708"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Pradip</span>  <span class="comment_date cye-lm-tag">December 25, 2014, 08:48</span></div><div class="comment_text" id="comment-body-1068708"><p class="cye-lm-tag">Thanks , very useful and nice explanation</p>
<p class="cye-lm-tag">Sir which  one is better tool develop application in spring Eclipse(Kepler/Luna) or STS</p>
<p class="cye-lm-tag">Thanx</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-1070322"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">December 26, 2014, 11:22</span></div><div class="comment_text" id="comment-body-1070322"><p class="cye-lm-tag">Thank you for kind words. I really appreciate them.</p>
<p class="cye-lm-tag">Unfortunately I cannot provide a clear answer to your question because I  don’t use Eclipse. However, I assume that the Spring Tool Suite is a better choice because it is customized for developing Spring applications.</p>
</div> </div></li></ul></li><li class="comment odd alt thread-even depth-1" id="comment-1086750"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">coolscitist</span>  <span class="comment_date cye-lm-tag">January 7, 2015, 08:17</span></div><div class="comment_text" id="comment-body-1086750"><p class="cye-lm-tag">Hi, I am having problems with multiple transactionManagerRef attribute in @EnableJpaRepositories<br> For example, in your PersistenceContext class, I defined two transaction managers transactionManager1 and transactionManager2. Then added transactionManagerRef = “transactionManager1” inside @EnableJpaRepositories</p>
<p class="cye-lm-tag">But I get error:</p>
<p class="cye-lm-tag">Caused by: org.springframework.beans.factory.NoUniqueBeanDefinitionException: No qualifying bean of type [org.springframework.transaction.PlatformTransactionManager] is defined: expected single matching bean but found 2: transactionManager1,transactionManager2</p>
<p class="cye-lm-tag">The error disappears when I remove transactionManager2. Could you help resolving this problem?</p>
<pre><code>
@Bean
public JpaTransactionManager transactionManager1() {
	JpaTransactionManager transactionManager = new JpaTransactionManager();
	transactionManager.setEntityManagerFactory(entityManagerFactory().getObject());
	return transactionManager;
}

@Bean
public JpaTransactionManager transactionManager2() {
	JpaTransactionManager transactionManager = new JpaTransactionManager();
	transactionManager.setEntityManagerFactory(entityManagerFactory().getObject());
	return transactionManager;
}
</code>
</pre></div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-1087238"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">January 7, 2015, 19:33</span></div><div class="comment_text" id="comment-body-1087238"><p class="cye-lm-tag">Did you remember to configure the used transaction manager when you configured the annotation-driven transaction management? If you did not do this, this will throw the exception you mentioned.</p>
<p class="cye-lm-tag">You might want to check out these links:</p>
<ul><li><a href="http://docs.spring.io/spring/docs/current/spring-framework-reference/htmlsingle/#tx-multiple-tx-mgrs-with-attransactional" target="_blank" rel="nofollow">Spring Framework Reference Manual: Multiple Transaction Managers with @Transactional</a></li><li><a href="http://stackoverflow.com/questions/8050183/enabletransactionmanagement-annotation-with-2-transaction-managers" target="_blank" rel="nofollow">@EnableTransactionManagement annotation with 2 transaction managers</a></li><li><a href="http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/transaction/annotation/EnableTransactionManagement.html" target="_blank" rel="nofollow">The Javadoc of the <code>@EnableTransactionManagement</code> annotation</a></li></ul><p class="cye-lm-tag">If you have any further questions, don’t hesitate to ask them.</p>
</div> </div><ul class="children"><li class="comment odd alt depth-3" id="comment-1089555"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">coolscitist</span>  <span class="comment_date cye-lm-tag">January 9, 2015, 08:59</span></div><div class="comment_text" id="comment-body-1089555"><p class="cye-lm-tag">Actually, that error came up when I was using JpaRepository’s findAll() method.</p>
<p class="cye-lm-tag">I think it is due to some version incompatibility between spring-data-jpa and spring-orm.</p>
<p class="cye-lm-tag">I actually upgraded all libraries: (spring 4.1.4.RELEASE, hibernate 4.3.7.FINAL and everything else to latest versions). The problem was solved when spring-orm 4.1.4.RELEASE was moved above spring-data-jpa 1.7.1.RELEASE in pom, but problem re-surfaced when spring-data-jpa was placed above spring-orm. Still not exactly sure what was wrong, but I think it is due to mismatch in versions.</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-4" id="comment-1090071"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">January 9, 2015, 19:33</span></div><div class="comment_text" id="comment-body-1090071"><p class="cye-lm-tag">I agree that this problem is most likely caused by a dependency conflict. You can try to <a href="http://maven.apache.org/plugins/maven-dependency-plugin/examples/resolving-conflicts-using-the-dependency-tree.html" target="_blank" rel="nofollow">resolve this problem</a> by using the <a href="http://maven.apache.org/plugins/maven-dependency-plugin/" target="_blank" rel="nofollow">Maven Dependency plugin</a>.</p>
<p class="cye-lm-tag">Anyway, this is a pretty weird problem because I think that Spring Data JPA 1.7.1.RELEASE should be compatible with Spring Framework 4.1.4.RELEASE. I assume that some other dependency is causing this problem, but you will know this for sure after you have analyzed your project by using the Maven dependency plugin.</p>
</div> </div></li></ul></li></ul></li><li class="comment odd alt depth-2" id="comment-1092259"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">solv9kr</span>  <span class="comment_date cye-lm-tag">January 11, 2015, 18:00</span></div><div class="comment_text" id="comment-body-1092259"><p class="cye-lm-tag">If you’re using Spring 4.1.4, it is a major bug. See: <a href="https://jira.spring.io/browse/SPR-12577" rel="nofollow">https://jira.spring.io/browse/SPR-12577</a></p>
<p class="cye-lm-tag">This bug is fixed in 4.1.5, 4.2 RC1.</p>
</div> </div><ul class="children"><li class="comment even depth-3" id="comment-1092848"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">coolscitist</span>  <span class="comment_date cye-lm-tag">January 12, 2015, 08:13</span></div><div class="comment_text" id="comment-body-1092848"><p class="cye-lm-tag">So, it is a bug then. I am using Spring 4.1.1 without any problem. Hopefully, upgrading to 4.1.5, after it is released won’t give too much problem. Just wondering why such a bug would even exist in a project as good well developed and maintained as Spring.</p>
</div> </div></li><li class="comment odd alt depth-3" id="comment-1095092"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">coolscitist</span>  <span class="comment_date cye-lm-tag">January 14, 2015, 05:04</span></div><div class="comment_text" id="comment-body-1095092"><p class="cye-lm-tag">Thank you for the clarification. I am using Spring 4.1.1 and it works fine! (same code doesn’t work with 4.1.4).</p>
<p class="cye-lm-tag">PS: Looks like my previous comments did not get posted.<br> Thanks</p>
</div> </div></li></ul></li></ul></li><li class="comment even thread-odd thread-alt depth-1" id="comment-1095095"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">coolscitist</span>  <span class="comment_date cye-lm-tag">January 14, 2015, 05:07</span></div><div class="comment_text" id="comment-body-1095095"><p class="cye-lm-tag">Also, do you plan on making tutorials about Spring Data Rest? Especially clarifying how to combine our service and controller layers with spring data rest.</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-1095728"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">January 14, 2015, 21:18</span></div><div class="comment_text" id="comment-body-1095728"><p class="cye-lm-tag">I am going to write a Spring Data REST tutorial at some point. However, I am not sure when I have time to actually do it. In the meantime, you can get started by reading the following tutorials:</p>
<ul><li><a href="https://spring.io/guides/gs/accessing-data-rest/" target="_blank" rel="nofollow">Accessing JPA Data with REST</a></li><li><a href="http://www.javacodegeeks.com/2013/08/spring-data-rest-in-action.html" target="_blank" rel="nofollow">Spring Data REST in Action</a></li></ul></div> </div><ul class="children"><li class="comment even depth-3" id="comment-1096071"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">coolscitist</span>  <span class="comment_date cye-lm-tag">January 15, 2015, 05:58</span></div><div class="comment_text" id="comment-body-1096071"><p class="cye-lm-tag">Thank you for the reference. I read them.<br> But not sure if they really answer how to properly combine our normal service/controller layer and spring data rest mvc.</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-4" id="comment-1096498"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">January 15, 2015, 17:47</span></div><div class="comment_text" id="comment-body-1096498"><p class="cye-lm-tag">It seems that I misunderstood you. Anyway, you can get some ideas by reading the source code of <a href="https://github.com/pkainulainen/spring-data-jpa-examples/tree/master/query-methods" target="_blank" rel="nofollow">the example application</a>.</p>
<p class="cye-lm-tag">I am also writing a tutorial that helps you to get a better understanding of Spring web application architecture (<a href="/software-development/design/understanding-spring-web-application-architecture-the-classic-way/" rel="nofollow">read the first part of that tutorial</a>).</p>
</div> </div><ul class="children"><li class="comment even depth-5" id="comment-1097271"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">coolscitist</span>  <span class="comment_date cye-lm-tag">January 16, 2015, 15:45</span></div><div class="comment_text" id="comment-body-1097271"><p class="cye-lm-tag">Thank you that was very helpful! I think we won’t use spring data rest in our project. I am doing some study with architectures.</p>
<p class="cye-lm-tag">In his clean code talk (<a href="https://www.youtube.com/watch?v=asLUTiJJqdE" rel="nofollow">https://www.youtube.com/watch?v=asLUTiJJqdE</a>), Robert C. Martin talks about test driven development with focus on use cases, he states that web and database are both plugins and not really the core part of the software. What is your take on this? What is the practicality of such approach?</p>
</div></div></li><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-5" id="comment-1100547"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">January 19, 2015, 20:44</span></div><div class="comment_text" id="comment-body-1100547"><p class="cye-lm-tag">This sounds a lot like the <a href="http://www.dossier-andreas.net/software_architecture/ports_and_adapters.html" target="_blank" rel="nofollow">ports and adapters / hexagonal architecture</a>.</p>
<p class="cye-lm-tag">I have never used it, but I would love to use in the near future. It looks very interesting, especially if you combine it with <a href="http://olivergierke.de/2013/01/whoops-where-did-my-architecture-go/" target="_blank" rel="nofollow">the “flat” package hierarchy</a> (<a href="https://github.com/olivergierke/whoops-architecture" target="_blank" rel="nofollow">see the sample code too</a>).</p>
<p class="cye-lm-tag">Since I have never used it, I don’t know how practical it is, but you definitely have to write more code if you decide to use this architecture style. If you are interested in <a href="http://en.wikipedia.org/wiki/Domain-driven_design" target="_blank" rel="nofollow">domain-driven design</a>, you should check out these books:</p>
<ul><li><a href="http://www.amazon.com/Domain-Driven-Design-Tackling-Complexity-Software/dp/0321125215" target="_blank" rel="nofollow">Domain-Driven Design: Tackling Complexity in the Heart of Software</a></li><li><a href="http://www.amazon.com/Implementing-Domain-Driven-Design-Vaughn-Vernon/dp/0321834577" target="_blank" rel="nofollow">Implementing Domain-Driven Design</a></li></ul><p class="cye-lm-tag">Of course you can find a lot of stuff from Google as well.</p>
</div></div></li></ul></li></ul></li></ul></li></ul></li><li class="comment even thread-even depth-1" id="comment-1123983"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Mark</span>  <span class="comment_date cye-lm-tag">February 11, 2015, 08:44</span></div><div class="comment_text" id="comment-body-1123983"><p class="cye-lm-tag">Hi Petri,</p>
<p class="cye-lm-tag">Great tutorials, very thorough! I’m fairly new to spring, but I was curious if some of this configuration work has been superseded by Spring Boot. I seem to keep reading conflicting information about whether Spring Data JPA is a provider in Spring 4. Do I still need to create a PersistenceContext in the latest Spring?</p>
<p class="cye-lm-tag">Thanks,</p>
<p class="cye-lm-tag">-Mark</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-1124202"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">February 11, 2015, 13:17</span></div><div class="comment_text" id="comment-body-1124202"><p class="cye-lm-tag">If you use Spring Boot, you don’t have to create the <code>PersistenceContext</code> class (you can use its auto configuration feature). If you want to learn how you can do this, you should read the blog post titled: <a href="https://spring.io/guides/gs/accessing-data-jpa/" target="_blank" rel="nofollow">Accessing Data With JPA</a>.</p>
</div> </div><ul class="children"><li class="comment even depth-3" id="comment-1124428"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Mark</span>  <span class="comment_date cye-lm-tag">February 11, 2015, 19:20</span></div><div class="comment_text" id="comment-body-1124428"><p class="cye-lm-tag">Ah great, I’d gotten that guide working before i found you tutorial and realized this might be the wrong approach for using Boot. Now to figure out why Hibernate can’t find my table resource when I execute my REST methods…</p>
<p class="cye-lm-tag">Thanks for the response!</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-4" id="comment-1125266"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">February 12, 2015, 18:35</span></div><div class="comment_text" id="comment-body-1125266"><p class="cye-lm-tag">You are welcome!</p>
<p class="cye-lm-tag">By the way, what did you mean when you said that Hibernate cannot find your table resource? Do you mean that it cannot find the database table?</p>
</div> </div></li></ul></li></ul></li></ul></li><li class="comment even thread-odd thread-alt depth-1" id="comment-1162364"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">guor</span>  <span class="comment_date cye-lm-tag">March 23, 2015, 14:06</span></div><div class="comment_text" id="comment-body-1162364"><p class="cye-lm-tag">Thank you for the reference. But I wonder if spring-data-jpa support multi datasource? Or who can tell me a solution about multi datasource?</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-1162382"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">March 23, 2015, 14:32</span></div><div class="comment_text" id="comment-body-1162382"><p class="cye-lm-tag">Read this blog post: <a href="http://www.baeldung.com/spring-data-jpa-multiple-databases" target="_blank" rel="nofollow">Spring JPA – Multiple Databases</a>. It describes how you can use Spring Data JPA if you need to support multiple datasources.</p>
</div> </div></li></ul></li><li class="comment even thread-even depth-1" id="comment-1179249"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">DungTV</span>  <span class="comment_date cye-lm-tag">April 11, 2015, 21:09</span></div><div class="comment_text" id="comment-body-1179249"><p class="cye-lm-tag">Hi Petri,</p>
<p class="cye-lm-tag">I’m import Part 8 to ecilipse to run.</p>
<p class="cye-lm-tag">I would use JpaRepository annotation, so I have been changed in POM.xml and change version of spring-data-jpa to 1.4.1. And in ApplicationContext.java, I added @EnableJpaRepositories(basePackages={“net.petrikainulainen.spring.datajpa.repository”}) to it.</p>
<p class="cye-lm-tag">When run, I get this error:</p>
<p class="cye-lm-tag">Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name ‘personRepository’: FactoryBean threw exception on object creation; nested exception is org.springframework.data.mapping.PropertyReferenceException: No property find found for type net.petrikainulainen.spring.datajpa.model.Person.</p>
<p class="cye-lm-tag">Do you can help me fix it?</p>
<p class="cye-lm-tag">Many Thanks!</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-1179267"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">April 11, 2015, 21:50</span></div><div class="comment_text" id="comment-body-1179267"><p class="cye-lm-tag">Hi,</p>
<blockquote><p class="cye-lm-tag">I would use JpaRepository annotation, so I have been changed in POM.xml and change version of spring-data-jpa to 1.4.1.</p>
</blockquote><p class="cye-lm-tag">What is the <code>@JpaRepository</code> annotation? I have never heard of it, but <a href="https://github.com/mkuthan/example-ddd-cqrs-server/blob/master/src/main/java/example/scrumboard/infrastructure/jpa/repositories/JpaRepository.java" target="_blank" rel="nofollow">I found something from Github</a>. Do you mean that you want to annotate your Spring Data JPA repositories with that annotation?</p>
<p class="cye-lm-tag">By the way, the latest stable release of Spring Data JPA is 1.8.0. I recommend that you use it instead of 1.4.1.</p>
<blockquote><p class="cye-lm-tag">org.springframework.data.mapping.PropertyReferenceException: No property find found for type net.petrikainulainen.spring.datajpa.model.Person.</p>
</blockquote><p class="cye-lm-tag">This means that Spring Data JPA expects to find a property called <code>find</code> from the <code>Person</code> class. Because it cannot find it, it throws an exception.</p>
<p class="cye-lm-tag">One possible reason for this is that the name of the custom repository implementation is <code>PaginatingPersonRepositoryImpl</code>. This works with Spring Data 1.1, but if you use Spring Data JPA 1.2.0 (or newer), the name of the custom repository implementation must use this syntax: <em>[The name of the actual repository interface][postfix]</em>. Because the example application uses the default configuration, you must change the name of the custom repository implementation to: <code>PersonRepositoryImpl</code>.</p>
<p class="cye-lm-tag">I assume that the reason why the exception is thrown is that Spring Data JPA tries to create implementations for the methods that are declared in the <code>PaginatingPersonRepository</code> interface (it thinks that they are “standard” query methods). Because it cannot find the <code>find</code> property, it throws an exception.</p>
</div> </div></li></ul></li><li class="comment even thread-odd thread-alt depth-1" id="comment-1203282"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Juan</span>  <span class="comment_date cye-lm-tag">May 13, 2015, 21:56</span></div><div class="comment_text" id="comment-body-1203282"><p class="cye-lm-tag">Thanks for the tutorials! are great explained!!</p>
<p class="cye-lm-tag">I just wonder if is possible you know how to call the files of the configurations and where on the project structure put them?</p>
<p class="cye-lm-tag">Thanks!</p>
<p class="cye-lm-tag"><strong>Note:</strong> <em>I removed the empty list and the empty configuration class because they made the comment a bit hard to read – Petri</em>.</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-1203295"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">May 13, 2015, 22:21</span></div><div class="comment_text" id="comment-body-1203295"><p class="cye-lm-tag">Hi Juan,</p>
<p class="cye-lm-tag">If you are creating a web application and you use a server that supports the Servlet API 3.0 (or newer), you can create a class that configures the <code>ServletContext</code> programmatically. This configuration class must implement the <a href="http://docs.spring.io/spring-framework/docs/4.1.x/javadoc-api/org/springframework/web/WebApplicationInitializer.html" target="_blank" rel="nofollow"><code>WebApplicationInitializer</code></a> interface.</p>
<p class="cye-lm-tag">For example, the example application of this blog post has a package <code>net.petrikainulainen.springdata.jpa.config</code> that contains all <code>@Configuration</code> classes and the custom <a href="https://github.com/pkainulainen/spring-data-jpa-examples/blob/master/query-methods/src/main/java/net/petrikainulainen/springdata/jpa/config/WebAppConfig.java" target="_blank" rel="nofollow"><code>WebApplicationInitializer</code></a> class. It doesn’t really matter where you put these classes (as long as they are packaged to the created WAR file), but I like to organize them in this way.</p>
<p class="cye-lm-tag">By the way, the Spring Framework Reference Manual has a pretty comprehensive documentation about the <a href="http://docs.spring.io/spring-framework/docs/4.1.x/spring-framework-reference/htmlsingle/#beans-java" target="_blank" rel="nofollow">Java-based container configuration</a>.</p>
<p class="cye-lm-tag">I hope that this answers to your question. Also, if you have any further questions, don’t hesitate to ask them!</p>
</div> </div></li></ul></li><li class="comment even thread-even depth-1" id="comment-1208173"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">sathish</span>  <span class="comment_date cye-lm-tag">May 20, 2015, 11:38</span></div><div class="comment_text" id="comment-body-1208173"><p class="cye-lm-tag">hi Petri,<br> Thanks for your useful blog.<br> I have a probelm using the spring data,<br> i use custom queries to create Query , the entities are mapped by Eclipse link with associaition<br> In one particular filter criteria<br> i have message table and status table ,where messageid has one to many relation in status table<br> there are 4 filter critera three to be filteres with the message table one wiht the status table<br> my filter query gets all message entity wiht the status , but i want to get only the elements with latest status which matches with the filter criteria .</p>
<p class="cye-lm-tag">I use pagination , where the page object returns all the message enity that matches the status .but i want the message enetity with only the latest status which matches filter criteria<br> i</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-1208297"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">May 20, 2015, 20:05</span></div><div class="comment_text" id="comment-body-1208297"><p class="cye-lm-tag">Hi Sathish,</p>
<p class="cye-lm-tag">Unfortunately I am not 100% sure what you are trying to do. Could you leave a new comment to this blog post, and add the relevant entities and your query to that comment?</p>
</div> </div></li></ul></li><li class="comment even thread-odd thread-alt depth-1" id="comment-1210066"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">ismail</span>  <span class="comment_date cye-lm-tag">May 23, 2015, 06:30</span></div><div class="comment_text" id="comment-body-1210066"><p class="cye-lm-tag">Even I put</p>
<p class="cye-lm-tag"> io.spring.platform<br> platform-bom<br> 1.1.0.RELEASE<br> pom<br> import</p>
<p class="cye-lm-tag">it still ask me version for hibernate and others(only not spring one).</p>
</div> </div></li><li class="comment odd alt thread-even depth-1" id="comment-1210069"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">ismail</span>  <span class="comment_date cye-lm-tag">May 23, 2015, 06:36</span></div><div class="comment_text" id="comment-body-1210069"><p class="cye-lm-tag">sorry for the bad comment above.<br> Even I put BOM(dependencyManagment) to pom still asking version. For example I don’t see any version for jpa provider in your pom.xml.<br> Am I doing something wrong.</p>
</div> </div><ul class="children"><li class="comment even depth-2" id="comment-1210072"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">ismail</span>  <span class="comment_date cye-lm-tag">May 23, 2015, 06:42</span></div><div class="comment_text" id="comment-body-1210072"><p class="cye-lm-tag">I think I realized there is platform-bom and spring-framework-bom. Platform adjusted all versions.</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-3" id="comment-1210251"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">May 23, 2015, 12:32</span></div><div class="comment_text" id="comment-body-1210251"><p class="cye-lm-tag">Hi,</p>
<p class="cye-lm-tag">Don’t worry about the bad comment. It happens to all of us sometimes.</p>
<p class="cye-lm-tag">I described the dependency management of the example application in the <a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-getting-the-required-dependencies/" rel="nofollow">previous part of this tutorial</a>, but you are right. You don’t have to worry about the dependency versions because the Spring IO Platform takes care of them after you have enabled it in your <em>pom.xml</em> file.</p>
<p class="cye-lm-tag">Also, the Spring IO Platform Reference Guide has a <a href="http://docs.spring.io/platform/docs/1.1.2.RELEASE/reference/htmlsingle/#appendix-dependency-versions" target="_blank" rel="nofollow">section that describes the artifacts</a> which are part of the Spring IO Platform.</p>
</div> </div></li></ul></li></ul></li><li class="comment even thread-odd thread-alt depth-1" id="comment-1274417"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Ketki</span>  <span class="comment_date cye-lm-tag">September 20, 2015, 21:15</span></div><div class="comment_text" id="comment-body-1274417"><p class="cye-lm-tag">Hi Petri, thanks for the wonderful blog. It is very easy to read and understand and yes, very up to date. I am hooked here from last two days. I have taken up Spring Data as my topic of study.<br> We are already using in it in our project but I just got curious to understand the configurations which have been done already. We are using XML configuration there.</p>
<p class="cye-lm-tag">Question 1: Which configuration method is preferable, Java based or XML?<br> Question 2: There is this following bean definition in our applicationContext:</p>
<p class="cye-lm-tag">After a little search through its javadoc n google, I could only understand that it is used for injecting entityManager. But it is optional because a default PersistenceAnnotationBeanPostProcessor is registered by the  XML tags.<br> Can you please explain a little on this? I am confused as to whether this should be there or not. If it should be, then why?</p>
<p class="cye-lm-tag">Thanks.</p>
</div> </div><ul class="children"><li class="comment odd alt depth-2" id="comment-1274418"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Ketki</span>  <span class="comment_date cye-lm-tag">September 20, 2015, 21:17</span></div><div class="comment_text" id="comment-body-1274418"><p class="cye-lm-tag">oops.. seems like the code part has been removed once the comment got posted..  I was mentioning about “org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor”  bean declaration in application context.</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-3" id="comment-1274447"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">September 20, 2015, 22:21</span></div><div class="comment_text" id="comment-body-1274447"><p class="cye-lm-tag">Hi Ketki,</p>
<p class="cye-lm-tag">Thank you for your kind words. I really appreciate them.</p>
<blockquote><p class="cye-lm-tag">Question 1: Which configuration method is preferable, Java based or XML?</p>
</blockquote><p class="cye-lm-tag">I think that this is a matter of preference. I use Java configuration, but I know some people who like to use XML configuration.</p>
<blockquote><p class="cye-lm-tag">Question 2: There is this following bean definition in our applicationContext: <code>PersistenceAnnotationBeanPostProcessor</code>?</p>
</blockquote><p class="cye-lm-tag">It’s probably a remnant from the past, and you don’t need it (unless you want to override something). <a href="http://stackoverflow.com/questions/12471019/is-persistenceannotationbeanpostprocessor-of-any-use-at-all" target="_blank" rel="nofollow">This StackOverflow question</a> provides more details about the role of the <code>PersistenceAnnotationBeanPostProcessor</code> bean.</p>
<p class="cye-lm-tag">If you have any additional questions, don’t hesitate to ask them.</p>
</div> </div></li></ul></li></ul></li><li class="comment odd alt thread-even depth-1" id="comment-1274828"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Gaurav Dighe</span>  <span class="comment_date cye-lm-tag">September 21, 2015, 15:12</span></div><div class="comment_text" id="comment-body-1274828"><p class="cye-lm-tag">Hello,<br> I have previously used SpringMVC and Spring-Data-JPA for project. For this I did XML Configuration.<br> In these examples, you have demonstrated Java Configurations, so my question is:<br> 1. Can we use both kind of configurations – XML and JAVA configurations together or do I need to stay with either of two throughout the application?</p>
<p class="cye-lm-tag">Please reply.</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-1274967"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">September 21, 2015, 21:41</span></div><div class="comment_text" id="comment-body-1274967"><p class="cye-lm-tag">Hi,</p>
<blockquote><p class="cye-lm-tag">1. Can we use both kind of configurations – XML and JAVA configurations together or do I need to stay with either of two throughout the application?</p>
</blockquote><p class="cye-lm-tag">We can use XML and Java configuration together, but there are some restrictions:</p>
<ul><li>If we use Java configuration, we can import XML configuration files by annotating our <code>@Configuration</code> class with the <a href="http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/annotation/ImportResource.html" target="_blank" rel="nofollow"><code>@ImportResource</code></a> annotation.</li><li>If we use XML configuration, we can annotate our beans with the relevant annotations (such as <code>@Controller</code>, <code>@Component</code>, <code>@Service</code>, and <code>@Repository</code>) as long as these beans are placed in a package that is scanned by the Spring container.  However, if we use XML, we cannot import Java configuration classes (or at least I don’t know a way to do it).</li></ul><p class="cye-lm-tag">If you have any additional questions, don’t hesitate to ask them.</p>
</div> </div></li></ul></li><li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1278008"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Manjunath</span>  <span class="comment_date cye-lm-tag">September 28, 2015, 05:06</span></div><div class="comment_text" id="comment-body-1278008"><p class="cye-lm-tag">Hi Petri,</p>
<p class="cye-lm-tag">Thank you for such a nice article and your blogs will help beginners a lot.  This is my first spring data project and face some issue with the configuration. Which I posted my query in the following link, <a href="http://stackoverflow.com/questions/32811188/no-qualifying-bean-of-type-repository-found-for-dependency-in-spring-data-jpa?noredirect=1#comment53462720_32811188" rel="nofollow">http://stackoverflow.com/questions/32811188/no-qualifying-bean-of-type-repository-found-for-dependency-in-spring-data-jpa?noredirect=1#comment53462720_32811188</a></p>
<p class="cye-lm-tag">Can you please have a look at and help me the needful.</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-1278228"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">September 28, 2015, 20:33</span></div><div class="comment_text" id="comment-body-1278228"><p class="cye-lm-tag">Hi Manjunath,</p>
<p class="cye-lm-tag">Typically the <code>NoSuchBeanDefinitionException</code> is thrown when the Spring container cannot find the bean definition. If you want to get more information about this exception, read this blog post: <a href="http://www.baeldung.com/spring-nosuchbeandefinitionexception" target="_blank" rel="nofollow">Spring NoSuchBeanDefinitionException</a>.</p>
<p class="cye-lm-tag">Because the missing bean is a Spring Data JPA repository, the most likely reason for this error is that the repository interface is not placed in a package that is scanned by Spring Data JPA. In other words, check that <a href="http://docs.spring.io/spring-data/jpa/docs/current/api/org/springframework/data/jpa/repository/config/EnableJpaRepositories.html#basePackages--" target="_blank" rel="nofollow">the <code>basePackages</code> attribute of the <code>@EnableJpaRepositories</code> annotation</a> contains the correct package.</p>
<p class="cye-lm-tag">Also, you probably want to <a href="http://stackoverflow.com/questions/32811188/no-qualifying-bean-of-type-repository-found-for-dependency-in-spring-data-jpa?noredirect=1#comment53462720_32811188" target="_blank" rel="nofollow">change this as well</a> (your entity managers tries to find entities from a wrong package).</p>
<p class="cye-lm-tag">If you have any additional questions, don’t hesitate to ask them.</p>
</div> </div></li></ul></li><li class="comment odd alt thread-even depth-1" id="comment-1348628"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Souma</span>  <span class="comment_date cye-lm-tag">January 15, 2016, 08:52</span></div><div class="comment_text" id="comment-body-1348628"><p class="cye-lm-tag">Suppose a join select query returns multiple column from different tables.How can the select query return a specific type of List of bean(not a type of entity) in the @Query of the interface extending JpaRepository interface?</p>
<p class="cye-lm-tag">public interface XYZRepository extends JpaRepository{<br> @Query(query=”select ordatt.eNo as eNo, ord.Id as Id from Ord ord,Attr ordatt  where ord.Id =ordatt.Id)<br> public List selectAllSendOutOrderInfo();<br> }</p>
<p class="cye-lm-tag">class XY{<br> int eNo;<br> int Id;<br> //getter and setter</p>
<p class="cye-lm-tag">}</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-1349490"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">January 16, 2016, 12:23</span></div><div class="comment_text" id="comment-body-1349490"><p class="cye-lm-tag">Hi,</p>
<p class="cye-lm-tag">Read <a href="programming/spring-framework/spring-data-jpa-tutorial-three-custom-queries-with-query-methods/#comment-274786" rel="nofollow">this comment</a>. It explains how you can create a query method that returns an object, which is not an entity, by using the <code>@Query</code> annotation and JPQL. Also, if you want to return a list of objects, you can use this technique as well.</p>
</div> </div></li></ul></li><li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1361737"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Guilherme</span>  <span class="comment_date cye-lm-tag">January 31, 2016, 14:36</span></div><div class="comment_text" id="comment-body-1361737"><p class="cye-lm-tag">Petri, I was reading this topic : <a href="https://github.com/brettwooldridge/HikariCP/wiki/Hibernate4" rel="nofollow">https://github.com/brettwooldridge/HikariCP/wiki/Hibernate4</a></p>
<p class="cye-lm-tag">Has an official ConnectionProvider class from Hibernate, which should be used instead of the HikariCP implementation.</p>
<p class="cye-lm-tag">Using the class HikariConfig I can set  properties like pool size, idle timeout, etc.. but I can’t set the connection provider.</p>
<p class="cye-lm-tag">I tried to set using the application.properties using this line:<br> hibernate.connection.provider_class=org.hibernate.hikaricp.internal.HikariCPConnectionProvider<br> And on PersistenceContext<br> properties.put(PROPERTY_HIBERNATE_CONNECION_PROVIDER , environment.getRequiredProperty(PROPERTY_HIBERNATE_CONNECION_PROVIDER));</p>
<p class="cye-lm-tag">But I got  an error:<br> Caused by: org.hibernate.boot.registry.selector.spi.StrategySelectionException: Unable to resolve name [org.hibernate.hikaricp.internal.HikariCPConnectionProvider] as strategy [org.hibernate.engine.jdbc.connections.spi.ConnectionProvider]</p>
<p class="cye-lm-tag">Do you know if the HikariCP automaticly sets the hibernate connection provider to com.zaxxer.hikari.hibernate.HikariConnectionProvider, or we need to set this manualy?</p>
<p class="cye-lm-tag">Some relevant doc:<br> <a href="https://docs.jboss.org/hibernate/orm/5.0/userGuide/en-US/html/ch05.html#database-connectionprovider-hikari" rel="nofollow">https://docs.jboss.org/hibernate/orm/5.0/userGuide/en-US/html/ch05.html#database-connectionprovider-hikari</a></p>
<p class="cye-lm-tag">p.s.: I’m using Hibernate 5 and Hikari 2.4.3</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-1361809"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">January 31, 2016, 16:08</span></div><div class="comment_text" id="comment-body-1361809"><p class="cye-lm-tag">Hi Guilherme,</p>
<p class="cye-lm-tag">I have never done this myself, but it seems that if you want to use the new <code>HikariConnectionProvider</code>, you shouldn’t use the <code>HikariConfig</code> class. You should configure HikariCP by using the properties described <a href="https://github.com/brettwooldridge/HikariCP/wiki/Hibernate4" target="_blank" rel="nofollow">on the wiki page</a>. In other words, you should pass the configuration to Hibernate that configures the HikariCP connection pool.</p>
<p class="cye-lm-tag">Also, I don’t know if HikariCP supports Hibernate 5 yet. Have you tried downgrading to Hibernate  4.3.6?</p>
</div> </div></li></ul></li><li class="comment odd alt thread-even depth-1" id="comment-1367960"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Mayank</span>  <span class="comment_date cye-lm-tag">February 9, 2016, 12:54</span></div><div class="comment_text" id="comment-body-1367960"><p class="cye-lm-tag">Hi Petri,</p>
<p class="cye-lm-tag">What are your suggestion on transaction commit in SPring. I mean if we want to commit a single transaction in parts how can it be achieved.?</p>
<p class="cye-lm-tag">Regards,<br> Mayank.</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-1368068"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">February 9, 2016, 17:43</span></div><div class="comment_text" id="comment-body-1368068"><p class="cye-lm-tag">Hi Mayank,</p>
<p class="cye-lm-tag">If you want to commit one transaction in several parts, you need divide it into smaller transactions. The reason for this is that a database transaction must either complete entirely or fail (and have no effect).</p>
</div> </div></li></ul></li><li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1382926"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">mbeddedsoft</span>  <span class="comment_date cye-lm-tag">March 1, 2016, 15:40</span></div><div class="comment_text" id="comment-body-1382926"><p class="cye-lm-tag">Hello Petri,<br> I was looking through your tutorial and found it very informative and helpful.<br> I have a question, why did you implement TodoMapper class? I typically used Mapper classes when using DAOs and I thought a reason for using Repository, instead of DAO, was so that I would not need to use Mapper classes for my Domain objects anymore.</p>
<p class="cye-lm-tag">Can you please answer?</p>
<p class="cye-lm-tag">thank you,<br> mbeddedsoft</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-1383071"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">March 1, 2016, 20:33</span></div><div class="comment_text" id="comment-body-1383071"><p class="cye-lm-tag">The reason why I need mappers is that I don’t want to expose my entities to the web layer. I have also written a blog post that explains <a href="/software-development/design/understanding-spring-web-application-architecture-the-classic-way/" rel="nofollow">why I think that exposing them is a bad idea</a>.</p>
<p class="cye-lm-tag">However, I don’t implement these mappers myself when I write real-world applications. I use <a href="https://github.com/DozerMapper/dozer" target="_blank" rel="nofollow">Dozer</a>, <a href="http://modelmapper.org/" target="_blank" rel="nofollow">ModelMapper</a>, or <a href="http://jtransfo.org/" target="_blank" rel="nofollow">jTransfo</a>. However, since this is a tutorial that is meant for beginners, I want to keep things simple and avoid unnecessary dependencies.</p>
</div> </div><ul class="children"><li class="comment odd alt depth-3" id="comment-1411253"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Rob</span>  <span class="comment_date cye-lm-tag">April 5, 2016, 11:22</span></div><div class="comment_text" id="comment-body-1411253"><p class="cye-lm-tag">I’d also like to mention MapStruct <a href="http://mapstruct.org" rel="nofollow">http://mapstruct.org</a> as another model mapper, it makes use of code generation but in a way that a human might write it EG: personDto.setName(person.getName())</p>
<p class="cye-lm-tag">I’m not sure how it compares to the others, I’ve only used Dozer before and that was several years ago. I’m sure that they are all pretty much capable of the same thing but it would be nice to do a feature comparison at some point.</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-4" id="comment-1413014"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">April 7, 2016, 17:48</span></div><div class="comment_text" id="comment-body-1413014"><p class="cye-lm-tag">Thank you for sharing. I will take a look at it. By the way, it would be interesting to see a some kind of performance comparison as well.</p>
</div> </div></li></ul></li></ul></li></ul></li><li class="comment odd alt thread-even depth-1" id="comment-1384573"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Rohit</span>  <span class="comment_date cye-lm-tag">March 4, 2016, 00:37</span></div><div class="comment_text" id="comment-body-1384573"><p class="cye-lm-tag">Thank you.  Not only your article but also you replies to readers questions are also excellent source of information.</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-1385037"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">March 4, 2016, 15:01</span></div><div class="comment_text" id="comment-body-1385037"><p class="cye-lm-tag">You are welcome. Also, thank you for your kind words. I really appreciate them.</p>
</div> </div></li></ul></li><li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1400869"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Jonas</span>  <span class="comment_date cye-lm-tag">March 25, 2016, 03:21</span></div><div class="comment_text" id="comment-body-1400869"><p class="cye-lm-tag">Thank you very much for this guide.  I am trying to integrate spring data jpa into our application, but I am getting the following error when attempting to start Tomcat:</p>
<p class="cye-lm-tag">Error creating bean with name ‘academyRepository’: Cannot resolve reference to bean ‘jpaMappingContext’ while setting bean property ‘mappingContext’; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name ‘jpaMappingContext’: Invocation of init method failed; nested exception is java.lang.NullPointerException<br> …<br> …<br> Caused by: java.lang.NullPointerException<br> at org.springframework.data.jpa.repository.config.JpaMetamodelMappingContextFactoryBean.createInstance(JpaMetamodelMappingContextFactoryBean.java:61)<br> at org.springframework.data.jpa.repository.config.JpaMetamodelMappingContextFactoryBean.createInstance(JpaMetamodelMappingContextFactoryBean.java:26)<br> at org.springframework.beans.factory.config.AbstractFactoryBean.afterPropertiesSet(AbstractFactoryBean.java:134)<br> at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1637)<br> at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1574)</p>
<p class="cye-lm-tag">Have you ever seen this before, or have any idea what might be causing it?  I am using XML configuration and am sure it is correct because this is a established project.  The only thing I did was add this entry to our applicationContext.xml:</p>
<p class="cye-lm-tag"></p>
<p class="cye-lm-tag">And then created a single repository:</p>
<p class="cye-lm-tag">public interface AcademyRepository extends JpaRepository {</p>
<p class="cye-lm-tag"> List findByName(String name);<br> }</p>
<p class="cye-lm-tag">Thanks for any help you may be able to provide.</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-1404930"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">March 29, 2016, 17:46</span></div><div class="comment_text" id="comment-body-1404930"><p class="cye-lm-tag">Hi Jonas,</p>
<p class="cye-lm-tag">I have never seen this exception myself, but I found this <a href="http://stackoverflow.com/questions/30271112/spring-boot-error-creating-bean-with-name-jpamappingcontext-java-lang-nullp" target="_blank" rel="nofollow">StackOverflow question</a>. It seems that this might be caused by “duplicate” configuration. Unfortunately Wordpress removes XML markup from comments =&gt; I cannot “guess” what your problem is.</p>
<p class="cye-lm-tag">Could you add your application context configuration files into Pastebin and add the link here?</p>
</div> </div></li></ul></li><li class="comment odd alt thread-even depth-1" id="comment-1406753"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Alex001</span>  <span class="comment_date cye-lm-tag">March 31, 2016, 18:54</span></div><div class="comment_text" id="comment-body-1406753"><p class="cye-lm-tag">Petri, thank you for this nice tutorial. For me it is quite the right level to introduce me to SpringIO. Additional I like your links to corresponding areas like maven and how you describe finding the right way within two or more alternatives!</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-1407649"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">April 1, 2016, 18:19</span></div><div class="comment_text" id="comment-body-1407649"><p class="cye-lm-tag">Thank you for your kind words. I really appreciate them!</p>
</div> </div></li></ul></li><li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1451517"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Farooq Ahmed Rahu</span>  <span class="comment_date cye-lm-tag">June 3, 2016, 10:35</span></div><div class="comment_text" id="comment-body-1451517"><p class="cye-lm-tag">Hi Petri,</p>
<p class="cye-lm-tag"> I have connected my application with oracle, mysql db everything is working fine but when I change the configuration to connect same application with MS Sql Sever tables are not auto created with the entities.<br> No exception is returned.</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-1452007"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">June 4, 2016, 11:42</span></div><div class="comment_text" id="comment-body-1452007"><p class="cye-lm-tag">Hi,</p>
<p class="cye-lm-tag">I don’t have a lot of experience from MS SQL Server. I used it in one project and I was able to create the tables automatically. However, I found one interesting <a href="http://stackoverflow.com/a/35081652/313554" target="_blank" rel="nofollow">StackOverflow answer</a> that might help you to solve your problem.</p>
</div> </div><ul class="children"><li class="comment odd alt depth-3" id="comment-1456414"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Farooq Ahmed Rahu</span>  <span class="comment_date cye-lm-tag">June 14, 2016, 10:52</span></div><div class="comment_text" id="comment-body-1456414"><p class="cye-lm-tag">Hi Dear Petri,</p>
<p class="cye-lm-tag"> Issue has been resolved just by adding both of lines<br> spring.jpa.database-platform=org.hibernate.dialect.SQLServerDialect<br> and hibernate.dialect=org.hibernate.dialect.SQLServerDialect<br> in property file.</p>
<p class="cye-lm-tag">Thanks</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-4" id="comment-1458784"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">June 20, 2016, 22:03</span></div><div class="comment_text" id="comment-body-1458784"><p class="cye-lm-tag">Hi,</p>
<p class="cye-lm-tag">Great! I am happy to hear that you were able solve your problem.</p>
</div> </div></li></ul></li></ul></li></ul></li><li class="comment odd alt thread-even depth-1" id="comment-1456920"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Vishal</span>  <span class="comment_date cye-lm-tag">June 15, 2016, 19:10</span></div><div class="comment_text" id="comment-body-1456920"><p class="cye-lm-tag">I have been going through various docs for configuring multiple databases with spring boot 1.3.4 release. I also read spring doc to do this:<br> <a href="http://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/" rel="nofollow">http://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/</a></p>
<p class="cye-lm-tag">However, the issue is that all the docs talk about configuration of two different data sources but none talks about configuration  of two different database platform. I mean, I am looking into how to configure, say, SQLServer and Oracle in my spring boot REST API. I could not find any way where I could define two different hibernate dialect (one for SQLServer and one for Oracle) in my application properties.</p>
<p class="cye-lm-tag">Is it even possible to achieve this. Can you please direct me towards  any of your blogs or tutorial that could help.</p>
<p class="cye-lm-tag">Thanks.</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-1458792"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">June 20, 2016, 22:23</span></div><div class="comment_text" id="comment-body-1458792"><p class="cye-lm-tag">Hi,</p>
<p class="cye-lm-tag"><strong>First</strong>, I am sorry that it took me so long to answer to your question.</p>
<p class="cye-lm-tag"><strong>Second</strong>, check out <a href="https://scattercode.co.uk/2016/01/05/multiple-databases-with-spring-boot-and-spring-data-jpa/" target="_blank" rel="nofollow">this blog post</a>. Although the example uses two MySQL databases, it is easy to modify the configuration to use different databases (just modify the Spring Boot configuration file).</p>
</div> </div></li></ul></li><li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1459333"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Farooq Ahmed Rahu</span>  <span class="comment_date cye-lm-tag">June 22, 2016, 09:47</span></div><div class="comment_text" id="comment-body-1459333"><p class="cye-lm-tag">Hi Dear Petri,</p>
<p class="cye-lm-tag">I don’t know where to post this question in your blog or article but writing here..</p>
<p class="cye-lm-tag">I want to create an application  in Spring MVC+Spring Security+SpringBoot configured with both JSPs in WEB-INF/views and Thymeleaf in resources/templates.<br> or simply the springBoot application with jsps in WEB-INF,<br> and should serve the JSP view from running jar file created with maven.</p>
<p class="cye-lm-tag">I have already created web applications in SpringMVC+Spring Security+SpringBoot +Thymeleaf and Spring MVC+Spring Security+JSP.</p>
<p class="cye-lm-tag">Thanks</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-1459890"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">June 23, 2016, 23:17</span></div><div class="comment_text" id="comment-body-1459890"><p class="cye-lm-tag">Hi,</p>
<p class="cye-lm-tag">It is a bit tricky to use JSP with Spring Boot. I have to admit that before you asked this question, I had no idea that it is even possible. However, I found a blog post that <a href="http://hillert.blogspot.fi/2016/03/spring-boot-with-jsp-in-executable-jar.html" target="_blank" rel="nofollow"> explains how you can do it</a> (and still use the executable jar file). If you need to use both Thymeleaf and JSP, you should take a look at <a href="http://stackoverflow.com/questions/31985798/mixing-thymeleaf-and-jsp-files-in-spring-boot" target="_blank" rel="nofollow">this StackOverflow question</a>.</p>
<p class="cye-lm-tag">I hope that this helps.</p>
</div> </div></li></ul></li><li class="comment odd alt thread-even depth-1" id="comment-1465323"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Soumadeep</span>  <span class="comment_date cye-lm-tag">July 6, 2016, 15:36</span></div><div class="comment_text" id="comment-body-1465323"><p class="cye-lm-tag">I want to develop a simple stand alone Spring Data JPA application with java annotation based configuration.For this  I have prepared an entity , a configuration file. Now how to get entityManager in DAO class to execute a simple query.With XML based configuration it is working fine.Please help.</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-1465666"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">July 7, 2016, 11:56</span></div><div class="comment_text" id="comment-body-1465666"><p class="cye-lm-tag">Hi,</p>
<p class="cye-lm-tag">If you use Spring Data JPA, you don’t need to use the entity manager because you can create repository interfaces and use them instead of the entity manager. If you don’t know how you can create or use these repository interfaces, you should take a look at my <a href="/spring-data-jpa-tutorial/" rel="nofollow">Spring Data JPA tutorial</a>.</p>
</div> </div></li></ul></li><li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1513567"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Manu</span>  <span class="comment_date cye-lm-tag">December 23, 2016, 09:26</span></div><div class="comment_text" id="comment-body-1513567"><p class="cye-lm-tag">Can you please show how to view the content of the h2 db while debugging the application.  I have seen the stackoverflow comments on how to do it.  But not clear on what all configurations are required.</p>
</div> </div></li><li class="comment even thread-even depth-1" id="comment-1519744"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">chen</span>  <span class="comment_date cye-lm-tag">January 30, 2017, 16:31</span></div><div class="comment_text" id="comment-body-1519744"><p class="cye-lm-tag">Your tutorials are very comprehensive. Thank you for your time and effort!</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-1519841"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">January 31, 2017, 11:17</span></div><div class="comment_text" id="comment-body-1519841"><p class="cye-lm-tag">You are welcome.</p>
</div> </div></li></ul></li><li class="comment even thread-odd thread-alt depth-1" id="comment-1523871"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">mbedded</span>  <span class="comment_date cye-lm-tag">February 24, 2017, 15:34</span></div><div class="comment_text" id="comment-body-1523871"><p class="cye-lm-tag">Hello Petri,<br> Your Spring JPA tutorials have been an invaluable resource.<br> I was wondering do you have any examples or know how I could separate my Spring data entities into a separate Maven project and then configure my primary WebApp to use that data project as a dependency?</p>
<p class="cye-lm-tag">thank you,<br> mbedded</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-1526184"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">March 4, 2017, 11:50</span></div><div class="comment_text" id="comment-body-1526184"><p class="cye-lm-tag">Hi,</p>
<p class="cye-lm-tag">Are you talking about JPA entities? If so, you can simply include the jar in your classpath and set the value of the <code>packagesToScan</code> property of the <code>LocalContainerEntityManagerFactoryBean</code> bean. Note that I haven’t tested this, but AFAIK it should do the trick.</p>
</div> </div></li></ul></li></ul></div> </section>
<br><hr>

<h2>4 CRUD</h2>
<div class="post_content" itemprop="articleBody"><p class="cye-lm-tag">We have now <a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-part-one-configuration/">configured the persistence layer of our Spring application</a>. We are finally ready to create our first Spring Data JPA repository.</p>
<p class="cye-lm-tag">This blog post describes how we can create a repository that provides CRUD operations for todo entries.</p>
<p class="cye-lm-tag">Let’s get started.</p>
<div class="note"> <strong>Additional Reading:</strong><p class="cye-lm-tag"></p>
<p class="cye-lm-tag">If you are not familiar with Spring Data JPA, <strong>you should read</strong> the following blog posts before you continue reading this blog post:</p>
<ul><li><a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-introduction/">Spring Data JPA Tutorial: Introduction</a> provides a quick introduction to Spring Data JPA and gives an overview of the Spring Data repository interfaces.</li><li><a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-getting-the-required-dependencies/">Spring Data JPA Tutorial: Getting the Required Dependencies</a> describes how you can get the required dependencies.</li><li><a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-part-one-configuration/">Spring Data JPA Tutorial: Configuration</a> describes how you can configure the persistence layer of a Spring application that uses Spring Data JPA.</li></ul></div><h2>Creating the Repository</h2><p class="cye-lm-tag">Before we can create our first Spring Data JPA repository, we have to create an entity class that contains the information of a single todo entry. The relevant part of the <em>Todo</em> class looks as follows:</p>
<div><div id="highlighter_689552" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div class="line number23 index22 alt2">23</div><div class="line number24 index23 alt1">24</div><div class="line number25 index24 alt2">25</div><div class="line number26 index25 alt1">26</div><div class="line number27 index26 alt2">27</div><div class="line number28 index27 alt1">28</div><div class="line number29 index28 alt2">29</div><div class="line number30 index29 alt1">30</div><div class="line number31 index30 alt2">31</div><div class="line number32 index31 alt1">32</div><div class="line number33 index32 alt2">33</div><div class="line number34 index33 alt1">34</div><div class="line number35 index34 alt2">35</div><div class="line number36 index35 alt1">36</div><div class="line number37 index36 alt2">37</div><div class="line number38 index37 alt1">38</div><div class="line number39 index38 alt2">39</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">import</code> <code class="java plain">org.hibernate.annotations.Type;</code></div><div class="line number2 index1 alt1">&nbsp;</div><div class="line number3 index2 alt2"><code class="java keyword">import</code> <code class="java plain">javax.persistence.Column;</code></div><div class="line number4 index3 alt1"><code class="java keyword">import</code> <code class="java plain">javax.persistence.Entity;</code></div><div class="line number5 index4 alt2"><code class="java keyword">import</code> <code class="java plain">javax.persistence.GeneratedValue;</code></div><div class="line number6 index5 alt1"><code class="java keyword">import</code> <code class="java plain">javax.persistence.GenerationType;</code></div><div class="line number7 index6 alt2"><code class="java keyword">import</code> <code class="java plain">javax.persistence.Id;</code></div><div class="line number8 index7 alt1"><code class="java keyword">import</code> <code class="java plain">javax.persistence.PrePersist;</code></div><div class="line number9 index8 alt2"><code class="java keyword">import</code> <code class="java plain">javax.persistence.Table;</code></div><div class="line number10 index9 alt1"><code class="java keyword">import</code> <code class="java plain">javax.persistence.Version;</code></div><div class="line number11 index10 alt2"><code class="java keyword">import</code> <code class="java plain">java.time.ZonedDateTime;</code></div><div class="line number12 index11 alt1">&nbsp;</div><div class="line number13 index12 alt2"><code class="java color1">@Entity</code></div><div class="line number14 index13 alt1"><code class="java color1">@Table</code><code class="java plain">(name = &amp;quot;todos&amp;quot;)</code></div><div class="line number15 index14 alt2"><code class="java keyword">final</code> <code class="java keyword">class</code> <code class="java plain">Todo {</code></div><div class="line number16 index15 alt1">&nbsp;</div><div class="line number17 index16 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Id</code></div><div class="line number18 index17 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@GeneratedValue</code><code class="java plain">(strategy = GenerationType.AUTO)</code></div><div class="line number19 index18 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java plain">Long id;</code></div><div class="line number20 index19 alt1">&nbsp;</div><div class="line number21 index20 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Column</code><code class="java plain">(name = &amp;quot;creation_time&amp;quot;, nullable = </code><code class="java keyword">false</code><code class="java plain">)</code></div><div class="line number22 index21 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Type</code><code class="java plain">(type = &amp;quot;org.jadira.usertype.dateandtime.threeten.PersistentZonedDateTime&amp;quot;)</code></div><div class="line number23 index22 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java plain">ZonedDateTime creationTime;</code></div><div class="line number24 index23 alt1">&nbsp;</div><div class="line number25 index24 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Column</code><code class="java plain">(name = &amp;quot;description&amp;quot;, length = </code><code class="java value">500</code><code class="java plain">)</code></div><div class="line number26 index25 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java plain">String description;</code></div><div class="line number27 index26 alt2">&nbsp;</div><div class="line number28 index27 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Column</code><code class="java plain">(name = &amp;quot;modification_time&amp;quot;)</code></div><div class="line number29 index28 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Type</code><code class="java plain">(type = &amp;quot;org.jadira.usertype.dateandtime.threeten.PersistentZonedDateTime&amp;quot;)</code></div><div class="line number30 index29 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java plain">ZonedDateTime modificationTime;</code></div><div class="line number31 index30 alt2">&nbsp;</div><div class="line number32 index31 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Column</code><code class="java plain">(name = &amp;quot;title&amp;quot;, nullable = </code><code class="java keyword">false</code><code class="java plain">, length = </code><code class="java value">100</code><code class="java plain">)</code></div><div class="line number33 index32 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java plain">String title;</code></div><div class="line number34 index33 alt1">&nbsp;</div><div class="line number35 index34 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Version</code></div><div class="line number36 index35 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java keyword">long</code> <code class="java plain">version;</code></div><div class="line number37 index36 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number38 index37 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java comments">//The constructor, builder, and other methods are omitted</code></div><div class="line number39 index38 alt2"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><div class="note"> <strong>Additional Reading:</strong><p class="cye-lm-tag"></p>
<ul><li><a href="http://docs.jboss.org/hibernate/orm/4.3/manual/en-US/html_single/#types-custom" target="_blank">Hibernate Reference Documentation: 6.4 Custom Types</a></li></ul></div><p class="cye-lm-tag">We are now ready to create our first Spring Data JPA repository. We can create the repository that provides CRUD operations for <em>Todo</em> objects by using one of the following methods:</p>
<ol><li>Create an interface that extends the <a href="http://docs.spring.io/spring-data/data-commons/docs/current/api/org/springframework/data/repository/CrudRepository.html" target="_blank"><em>CrudRepository</em></a> interface.</li><li>Create an interface that extends the <a href="http://docs.spring.io/spring-data/data-commons/docs/current/api/org/springframework/data/repository/Repository.html" target="_blank"><em>Repository</em></a> interface and add the required methods to the created interface.</li></ol><p class="cye-lm-tag">Let’s take a closer look at these methods.</p>
<p class="cye-lm-tag"></p>
<h3>Extending the <em>CrudRepository</em> Interface</h3><p class="cye-lm-tag">If we create our repository by extending the <em>CrudRepository</em> interface, we have to provide two type parameters:</p>
<ol><li>The type of the entity that is managed by our repository.</li><li>The type of the entity’s id field.</li></ol><p class="cye-lm-tag">In other words, when we create the repository that provides CRUD operations for <em>Todo</em> objects, we have to provide the following type parameters:</p>
<ol><li>The type of the entity is <em>Todo</em>.</li><li>The type of the entity’s id field is <em>Long</em>.</li></ol><p class="cye-lm-tag">The source code of the <em>TodoRepository</em> interface looks as follows:</p>
<div><div id="highlighter_71144" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.repository.CrudRepository;</code></div><div class="line number2 index1 alt1">&nbsp;</div><div class="line number3 index2 alt2"><code class="java keyword">interface</code> <code class="java plain">TodoRepository </code><code class="java keyword">extends</code> <code class="java plain">CrudRepository&amp;lt;Todo, Long&amp;gt; {</code></div><div class="line number4 index3 alt1">&nbsp;</div><div class="line number5 index4 alt2"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><div class="note"> <strong>Additional Reading:</strong><p class="cye-lm-tag"></p>
<ul><li><a href="http://docs.spring.io/spring-data/data-commons/docs/current/api/org/springframework/data/repository/CrudRepository.html" target="_blank">The Javadoc of the <em>CrudRepository</em> interface</a></li><li><a href="http://docs.spring.io/spring-data/jpa/docs/1.8.x/reference/html/#repositories.definition" target="_blank">Spring Data JPA Reference Manual: 3.3 Defining Repository Interfaces</a></li></ul></div><p class="cye-lm-tag">The <em>CrudRepository</em> interface declares many methods, but the methods that are relevant for this blog post are described in the following:</p>
<ul><li><a href="http://docs.spring.io/spring-data/data-commons/docs/current/api/org/springframework/data/repository/CrudRepository.html#delete-ID-" target="_blank">The <em>void delete(T entity)</em> method</a> deletes the entity whose id is given as a method parameter.</li><li><a href="http://docs.spring.io/spring-data/data-commons/docs/current/api/org/springframework/data/repository/CrudRepository.html#findAll--" target="_blank">The <em>Iterable&lt;T&gt; findAll()</em> method</a> returns all entities that are saved to the database.</li><li><a href="http://docs.spring.io/spring-data/data-commons/docs/current/api/org/springframework/data/repository/CrudRepository.html#findOne-ID-" target="_blank">The <em>T findOne(Long id)</em> method</a> returns the entity whose id is given as method parameter. If no entity is found, this method returns <em>null</em>.</li><li><a href="http://docs.spring.io/spring-data/data-commons/docs/current/api/org/springframework/data/repository/CrudRepository.html#save-S-" target="_blank">The <em>T save(T entity)</em> method</a> saves the entity given as a method parameter and returns the persisted entity.</li></ul><div class="note"> The <a href="https://github.com/pkainulainen/spring-data-jpa-examples/blob/master/query-methods/src/main/java/net/petrikainulainen/springdata/jpa/todo/RepositoryTodoService.java" target="_blank">service class</a> that provides CRUD operations for todo entries uses these methods for fulfilling its responsibilities.</div><p class="cye-lm-tag">Let’s find out how we can create a repository interface that extends the <em>Repository</em> interface.</p>
<h3>Extending the <em>Repository</em> Interface</h3><p class="cye-lm-tag">If we create our repository by extending the <em>Repository</em> interface, we have to follow these steps:</p>
<ol><li>Provide two type parameters:<ol><li>The type of the managed entity (<em>Todo</em>).</li><li>The type of the entity’s id field (<em>Long</em>).</li></ol></li><li>Add the required methods to the repository interface:<ol><li>The <em>void delete(Todo deleted)</em> method deletes the <em>Todo</em> object given as a method parameter.</li><li>The <em>List&lt;Todo&gt; findAll()</em> method returns all <em>Todo</em> objects that are found from the database.</li><li>The <em>Optional&lt;Todo&gt; findOne(Long id)</em> method finds the todo entry whose id is given as a method parameter. If no todo entry is found, this method returns an empty <em>Optional</em>.</li><li>The <em>Todo save(Todo persisted)</em> method saves the <em>Todo</em> object given as a method parameter and returns the persisted object.</li></ol></li></ol><p class="cye-lm-tag">The source code of the <em>TodoRepository</em> interface looks as follows:</p>
<div><div id="highlighter_227033" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.repository.Repository;</code></div><div class="line number2 index1 alt1">&nbsp;</div><div class="line number3 index2 alt2"><code class="java keyword">import</code> <code class="java plain">java.util.List;</code></div><div class="line number4 index3 alt1"><code class="java keyword">import</code> <code class="java plain">java.util.Optional;</code></div><div class="line number5 index4 alt2">&nbsp;</div><div class="line number6 index5 alt1"><code class="java keyword">interface</code> <code class="java plain">TodoRepository </code><code class="java keyword">extends</code> <code class="java plain">Repository&amp;lt;Todo, Long&amp;gt; {</code></div><div class="line number7 index6 alt2">&nbsp;</div><div class="line number8 index7 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">void</code> <code class="java plain">delete(Todo deleted);</code></div><div class="line number9 index8 alt2">&nbsp;</div><div class="line number10 index9 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">List&amp;lt;Todo&amp;gt; findAll();</code></div><div class="line number11 index10 alt2">&nbsp;</div><div class="line number12 index11 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">Optional&amp;lt;Todo&amp;gt; findOne(Long id);</code></div><div class="line number13 index12 alt2">&nbsp;</div><div class="line number14 index13 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">Todo save(Todo persisted);</code></div><div class="line number15 index14 alt2"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><div class="note"> If we don’t want to return <em>Optional</em> (Guava / Java 8) objects, we can also use the “traditional” <em>Todo findOne(Long id)</em> method.<p class="cye-lm-tag"></p>
<p class="cye-lm-tag"><strong>Additional Reading:</strong></p>
<ul><li><a href="http://docs.spring.io/spring-data/data-commons/docs/current/api/org/springframework/data/repository/Repository.html" target="_blank">The Javadoc of the <em>Repository</em> interface</a></li><li><a href="http://docs.spring.io/spring-data/jpa/docs/1.8.x/reference/html/#repositories.definition-tuning" target="_blank">Spring Data JPA Reference Manual: 3.3.1 Fine-tuning repository definition</a></li><li><a href="https://spring.io/blog/2014/05/21/what-s-new-in-spring-data-dijkstra" target="_blank">What’s New in Spring Data Dijkstra</a> (search for ‘support for wrapper types as return values’)</li></ul></div><p class="cye-lm-tag">Let’s move on and find out which method we should use.</p>
<h2>Which Method Should We Use?</h2><p class="cye-lm-tag">It depends.</p>
<p class="cye-lm-tag">I know that this is probably the most annoying answer one can give to a question. That is why I created two rules that we can follow when we are creating Spring Data JPA repositories. These rules are:</p>
<ul><li>If we want to expose all repository methods that are declared by the <em>CrudRepository</em> interface <strong>AND</strong> we don’t want to return <em>Optional</em> (Guava / Java 8) objects, our repository interfaces should extend the <em>CrudRepository</em> interface.</li><li>If we don’t want to expose all repository methods that are declared by the <em>CrudRepository</em> interface <strong>OR</strong> we want to return <em>Optional</em> (Guava / Java 8) objects, our repository interfaces must extend the <em>Repository</em> interface.</li></ul><p class="cye-lm-tag">Case closed?</p>
<p class="cye-lm-tag">Not exactly. I argue that <strong>we should always use the second method</strong>. This opinion is based on two reasons:</p>
<ul><li>When we create an interface, we should not add unnecessary methods to it. We should keep the interface as small as possible because small interfaces are easier to use and they help us to create components that have only one job.</li><li><em>Optional</em> helps us to create better APIs because it reveals that there might not be a return value.</li></ul><div class="note"> <strong>Additional Reading:</strong><p class="cye-lm-tag"></p>
<ul><li><a href="http://martinfowler.com/bliki/MinimalInterface.html" target="_blank">Minimal Interface</a></li><li><a href="http://blog.codefx.org/techniques/intention-revealing-code-java-8-optional/" target="_blank">Intention Revealing Code With Java 8’s New Type ‘Optional’</a></li><li><a href="http://www.oracle.com/technetwork/articles/java/java8-optional-2175753.html" target="_blank">Tired of Null Pointer Exceptions? Consider Using Java SE 8’s Optional</a></li><li><a href="http://blog.codefx.org/jdk/dev/design-optional/" target="_blank">The Design of Optional</a></li><li><a href="http://web.archive.org/web/20160323005315/http://blog.informatech.cr:80/2013/04/10/java-optional-objects/" target="_blank">Java 8 Optional Objects</a></li></ul></div><p class="cye-lm-tag">If we create our repositories by extending the <em>Repository</em> interface and adding the required methods to the created repository interfaces, we need to add the “same” methods to every interface. Right?</p>
<p class="cye-lm-tag"><strong>Wrong</strong>.</p>
<p class="cye-lm-tag">We can avoid this by following these steps:</p>
<ol><li>Create a base interface that extends the <em>Repository</em> interface and add the common methods to that interface.</li><li>Create the actual repository interface that extends our base interface.</li></ol><p class="cye-lm-tag">Let’s move on and take a closer look at these steps.</p>
<p class="cye-lm-tag"><strong>First</strong>, we have to create a base interface that declares the methods shared by our repositories. We can do this by following these steps:</p>
<ol><li>Create the <em>BaseRepository</em> interface that extends the <em>Repository</em> interface. This interface has two type parameters:<ol><li><em>T</em> describes the type of the managed entity.</li><li><em>ID</em> describes the type of the entity’s id field.</li></ol></li><li>Annotate the created interface with the <em>@NoRepositoryBean</em> annotation. This ensures that Spring Data JPA doesn’t try to create an implementation for our base repository interface.</li><li>Add the common methods to the created interface.</li></ol><p class="cye-lm-tag">The source code of the <em>BaseRepository</em> interface looks as follows:</p>
<div><div id="highlighter_410601" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.repository.NoRepositoryBean;</code></div><div class="line number2 index1 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.repository.Repository;</code></div><div class="line number3 index2 alt2">&nbsp;</div><div class="line number4 index3 alt1"><code class="java keyword">import</code> <code class="java plain">java.util.List;</code></div><div class="line number5 index4 alt2"><code class="java keyword">import</code> <code class="java plain">java.util.Optional;</code></div><div class="line number6 index5 alt1">&nbsp;</div><div class="line number7 index6 alt2"><code class="java color1">@NoRepositoryBean</code></div><div class="line number8 index7 alt1"><code class="java keyword">interface</code> <code class="java plain">BaseRepository&amp;lt;T, ID </code><code class="java keyword">extends</code> <code class="java plain">Serializable&amp;gt; </code><code class="java keyword">extends</code> <code class="java plain">Repository&amp;lt;T, ID&amp;gt; {</code></div><div class="line number9 index8 alt2">&nbsp;</div><div class="line number10 index9 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">void</code> <code class="java plain">delete(T deleted);</code></div><div class="line number11 index10 alt2">&nbsp;</div><div class="line number12 index11 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">List&amp;lt;T&amp;gt; findAll();</code></div><div class="line number13 index12 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number14 index13 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">Optional&amp;lt;T&amp;gt; findOne(ID id);</code></div><div class="line number15 index14 alt2">&nbsp;</div><div class="line number16 index15 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">T save(T persisted);</code></div><div class="line number17 index16 alt2"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><div class="note"> <strong>Additional Reading:</strong><p class="cye-lm-tag"></p>
<ul><li><a href="http://docs.spring.io/spring-data/commons/docs/current/api/org/springframework/data/repository/NoRepositoryBean.html" target="_blank">The Javadoc of the <em>@NoRepositoryBean</em> annotation</a></li></ul></div><p class="cye-lm-tag"><strong>Second</strong>, we have to create the actual repository interface that extends our base interface. We can do this by following these steps:</p>
<ol><li>Create the <em>TodoRepository</em> interface.</li><li>Extend the <em>BaseRepository</em> interface and provide two type parameters:<ol><li>The type of the managed entity is <em>Todo</em>.</li><li>The type of the entity’s id field is <em>Long</em>.</li></ol></li></ol><p class="cye-lm-tag">The source code of the <em>TodoRepository</em> interface looks as follows:</p>
<div><div id="highlighter_284256" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">interface</code> <code class="java plain">TodoRepository </code><code class="java keyword">extends</code> <code class="java plain">BaseRepository&amp;lt;Todo, Long&amp;gt; {</code></div><div class="line number2 index1 alt1">&nbsp;</div><div class="line number3 index2 alt2"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><p class="cye-lm-tag">We have now created a repository hierarchy that allows us to:</p>
<ul><li>Create repositories that provides CRUD operations for entities without declaring the “same” methods in every repository interface.</li><li>Create repositories that do not provide all CRUD operations. For example, we can create a repository that provides only the <em>findAll()</em> method.</li></ul><p class="cye-lm-tag">The following figure illustrates the benefits of this solution:</p>
<p class="cye-lm-tag"><img src="/wp-content/uploads/springdatajpabaserepository.png" alt="springdatajpabaserepository" width="710" height="585" class="aligncenter size-full wp-image-9697" srcset="https://www.petrikainulainen.net/wp-content/uploads/springdatajpabaserepository.png 710w, https://www.petrikainulainen.net/wp-content/uploads/springdatajpabaserepository-300x247.png 300w" sizes="(max-width: 710px) 100vw, 710px"></p>
<p class="cye-lm-tag">Let’s move on and summarize what we learned from this blog post.</p>
<p class="cye-lm-tag"></p>
<h2>Summary</h2><p class="cye-lm-tag">This blog post has taught us three things:</p>
<ul><li>We can create repository interfaces by extending either the <em>CrudRepository</em> or the <em>Repository</em> interface.</li><li>We should create our repositories by extending the <em>Repository</em> interface and adding the required methods to the created repository interface.</li><li>If our application has more than one repository, we should create a base repository interface that declares the methods that are shared by our “concrete” repositories.</li></ul><p class="cye-lm-tag">The next part of this tutorial gives an <a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-introduction-to-query-methods/">introduction to query methods</a>.</p>
<p class="cye-lm-tag"><strong>P.S.</strong> You can <a href="https://github.com/pkainulainen/spring-data-jpa-examples/tree/master/query-methods" target="_blank">get the example application of this blog post from Github</a>.</p>
<div class="note">If you want to learn how to use Spring Data JPA, you should read my <a href="/spring-data-jpa-tutorial/">Spring Data JPA tutorial</a>.</div> <span id="tve_leads_end_content" style="display: block; visibility: hidden; border: 1px solid transparent;" class="cye-lm-tag"></span>
</div>

</div>




</div>
</div>
</div>
</div>
</div>
</div><p style="line-height: 24px;" data-unit="px" class="tve_p_center cye-lm-tag"><span class="tve_custom_font_size cye-lm-tag" style="font-size: 16px;">I will never rent, sell, or share your email address.<br></span></p>

</div></div></div></div></div></div></div>
<section id="comments"><div class="comments_intro"><span class="num_comments cye-lm-tag">172</span> comments… <a href="#commentform" rel="nofollow">add one</a></div><ul class="comment_list"><li class="comment even thread-even depth-1" id="comment-3774"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Kononen</span>  <span class="comment_date cye-lm-tag">January 27, 2012, 09:46</span></div><div class="comment_text" id="comment-body-3774"><p class="cye-lm-tag">Great stuff.</p>
</div> </div></li><li class="comment odd alt thread-odd thread-alt depth-1" id="comment-4188"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Chris</span>  <span class="comment_date cye-lm-tag">February 23, 2012, 15:52</span></div><div class="comment_text" id="comment-body-4188"><p class="cye-lm-tag">Hello,</p>
<p class="cye-lm-tag">Thanks for your article. But where is the controller.createRedirectViewPath(REDIRECT_PATH) method in the net.petrikainulainen.spring.datajpa.controller.AbstractControllerTest class?</p>
<p class="cye-lm-tag">Best regards.</p>
<p class="cye-lm-tag">Chris</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-4190"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">February 23, 2012, 16:06</span></div><div class="comment_text" id="comment-body-4190"><p class="cye-lm-tag">Hi Chris,</p>
<p class="cye-lm-tag">it is good to hear that you liked the article. The method you mentioned is found from the net.petrikainulainen.spring.datajpa.controller.AbstractController class. The AbstractControllerTest class declares the inner class called TestController only because the AbstractController class is abstract and it cannot be instantiated.</p>
</div> </div></li></ul></li><li class="comment odd alt thread-even depth-1" id="comment-5368"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Rance moest</span>  <span class="comment_date cye-lm-tag">May 18, 2012, 13:46</span></div><div class="comment_text" id="comment-body-5368"><p class="cye-lm-tag">Why bother with dtos? I thought that was ejb 2 nonsense</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-5457"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">May 22, 2012, 20:10</span></div><div class="comment_text" id="comment-body-5457"><p class="cye-lm-tag">Hi Rance,</p>
<p class="cye-lm-tag">Thanks for your comment. I prefer using DTOs as form objects from following reasons:</p>
<p class="cye-lm-tag">1) Since the transaction boundary is on the service layer, the model object is no longer associated with the persistence context when the transaction ends (unless you use an extended persistence context but that is an another story). This means that if you are using them as a form objects, you will have to synchronize its state with the database. Even though you “can” use the merge() method of the EntityManager interface, it can be PITA, and a source of interesting features. Thus, I prefer to avoid this if possible.</p>
<p class="cye-lm-tag">2) The domain model should not be designed to make sense as a form object. It should be designed and implemented to make sense in the context of its domain. Also, you have to often make some ORM related compromises. This means that the building forms by using entity classes as form objects can be cumbersome. It is often easier to use DTOs even though it is not so “sexy”.</p>
<p class="cye-lm-tag">3) Often you have to add validation related metadata to the form objects. Adding these annotations to an entity object will object produce messy outcome, since entities are already annotated with JPA related annotations.</p>
<p class="cye-lm-tag">I know that using DTOs as form objects means that I have to write some boilerplate code. However, it helps me to isolate the different layers of my software and to avoid weird features, which are sponsored by the used ORM.</p>
</div> </div><ul class="children"><li class="comment odd alt depth-3" id="comment-268002"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Marco</span>  <span class="comment_date cye-lm-tag">July 26, 2013, 11:12</span></div><div class="comment_text" id="comment-body-268002"><p class="cye-lm-tag">Hi.</p>
<p class="cye-lm-tag">First of all congratulations for your blog and for the tutorials that you post, they are very interesting and useful! I’ve also read your Spring Data book, and I have found this page that your are the author :) !</p>
<p class="cye-lm-tag">I’ve reached this page searching google for DTO. So my problem is more related to usage of DTO than to the usage of JPA, but if you have few minutes to spare, I would make you my question.</p>
<p class="cye-lm-tag">Most likely you have had to deal with applications where the same domain Entity must be able to be modified by users with different privileges, and depending on the user privilege, only a subset of the fields could be editable.</p>
<p class="cye-lm-tag">I think that it is one of the case where usage of DTOs make sense!</p>
<p class="cye-lm-tag">In my case I have a Job entity that can be modified by different user with different roles, and based on the role only some field can be modified.</p>
<p class="cye-lm-tag">So my question:  a good approach could be to define an entity related DTO for each user ROLE? (For example: JobAdminDTO, JobUserDTO, JobGuestDTO).</p>
<p class="cye-lm-tag">So in MVC application controller, given the user role i create the correct DTO and pass it to the view. I think that could be a bit harder to handle the correct type of the object returned from the view..</p>
<p class="cye-lm-tag">In your opinion, could it be a good approach?</p>
<p class="cye-lm-tag">Thanks again and sorry if I’ve bored<br> Marco</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-4" id="comment-268008"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">July 26, 2013, 12:07</span></div><div class="comment_text" id="comment-body-268008"><p class="cye-lm-tag">Hi Marco,</p>
<p class="cye-lm-tag">That is an interesting question because the requirement which you have to implement is quite common. As always, there are many ways to implement this requirement.</p>
<p class="cye-lm-tag">You found the first one which often comes to mind (use different DTOs for different roles).</p>
<p class="cye-lm-tag">This approach has four problems:</p>
<ol><li>You have to implement different DTOs for different roles. Creating different DTOs is a minor annoyance but the bigger problem is that you have to implement the logic which creates these DTOs.</li><li>Each DTO must have a different view.</li><li>You have to implement handling logic for each role specific DTO. This leads into a situation where you will have to implement several methods which are pretty much doing the same thing.</li><li>When you add a new role to the system, you have to: create a new DTO, create a new view for the created DTO and implement the logic which processes the created DTO. It is a lot of work. On the other hand, if you are sure that new roles are not added very often, this is not a problem.</li></ol><p class="cye-lm-tag">The second option is to use the same DTO for all roles and limit the editability of the form fields by using <a href="http://static.springsource.org/spring-security/site/docs/3.1.x/reference/springsecurity-single.html#d0e6875" target="_blank" rel="nofollow">the <code>authorize</code> tag of the Spring Security JSP tag library</a>.</p>
<p class="cye-lm-tag">You can also create a custom <a href="http://static.springsource.org/spring/docs/3.2.x/javadoc-api/org/springframework/web/method/support/HandlerMethodArgumentResolver.html" target="_blank" rel="nofollow"><em>HandlerMethodArgumentResolver</em></a> which makes it possible to <a href="http://stackoverflow.com/questions/8764545/best-practice-for-getting-active-users-userdetails" target="_blank" rel="nofollow">add the logged in user as a method parameter to your controller method</a>.</p>
<p class="cye-lm-tag">This approach has two problems:</p>
<ol><li>The logic which handles the form submission must select the updated fields by using the user role of the logged in user. This means that the implementation can be quite complex.</li><li>The code of your view can be quite complex because you have to add the authorization logic in it.</li></ol><p class="cye-lm-tag">There is also a third option but it might not be usable if you are implementing a “normal” Spring MVC application (no REST API) because it requires that you add several submit buttons to your page. This option is that you are create one form for the fields which are common for all users and one form per each user role.</p>
<p class="cye-lm-tag">As you can see, this problem has no “right” answer. There are several ways to implement this requirement and each one has different pros and cons. However, I hope that was able to give you something to think about.</p>
</div> </div></li></ul></li></ul></li></ul></li><li class="comment odd alt thread-odd thread-alt depth-1" id="comment-6350"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">David</span>  <span class="comment_date cye-lm-tag">July 7, 2012, 17:12</span></div><div class="comment_text" id="comment-body-6350"><p class="cye-lm-tag">Great tutorial, it really helped clear up some confusion I had.  I have been playing with this code and i was wondering if you could show how to use Jersey REST instead of Spring MVC?  I have not been able to replace the Servlet with the Jersey SpringServlet because of the need to load the context programatically (which I love how you did).</p>
<p class="cye-lm-tag">I tried this in the DataJPAExampleInitializer but of course it failed:<br> rootContext.addApplicationListener(new org.springframework.web.context.request.RequestContextListener());<br> rootContext.addApplicationListener(new org.springframework.web.util.Log4jConfigListener());<br> SpringServlet springServlet = new com.sun.jersey.spi.spring.container.servlet.SpringServlet();<br> ServletRegistration.Dynamic dispatcher = servletContext.addServlet(DISPATCHER_SERVLET_NAME, springServlet);</p>
<p class="cye-lm-tag">Any ides on how this might work?</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-6451"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">July 10, 2012, 14:29</span></div><div class="comment_text" id="comment-body-6451"><p class="cye-lm-tag">David,</p>
<p class="cye-lm-tag">Thanks for your comments. It is good to hear that this tutorial was useful to you. Regarding to your problem:</p>
<p class="cye-lm-tag">The attached source code does not set an url mapping for the springServlet. What kind of exception are you getting? Is it related to the missing url mapping?</p>
</div> </div><ul class="children"><li class="comment odd alt depth-3" id="comment-6465"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">David</span>  <span class="comment_date cye-lm-tag">July 11, 2012, 05:19</span></div><div class="comment_text" id="comment-body-6465"><p class="cye-lm-tag">Petri,</p>
<p class="cye-lm-tag">I was trying to use the Jersey Spring Servlet instead of the DispatchServlet.  But two things convinced me to change my direction and stick with SpringMVC:</p>
<p class="cye-lm-tag">1) Version 3.1.1 added much better REST support, which previous attempts were so kludgy I went with Jersey.<br> 2) While looking at the Jersey site for a solution, I see that they will be releasing 2.0 that will not be backwards compatible, and I really don’t feel like rewriting my work for that in the near future.</p>
<p class="cye-lm-tag">Thank you again for a great tutorial, and I look forward to learning how SpringMVC and JPA work together now.</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-4" id="comment-6658"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">July 17, 2012, 11:31</span></div><div class="comment_text" id="comment-body-6658"><p class="cye-lm-tag">Hi David,</p>
<p class="cye-lm-tag">I am happy to hear that you found an answer to your problem. Also, I agree that the REST support of Spring Framework is rather good at the moment.</p>
<p class="cye-lm-tag">Please remember that you can use JPA with Spring Framework without using Spring Data JPA but that does not really make any sense if you can build your applications from scratch.</p>
<p class="cye-lm-tag">On the other hand, if you are working with existing applications, you might not want to replace existing persistence layer with Spring Data JPA repositories.</p>
</div> </div></li></ul></li></ul></li></ul></li><li class="comment odd alt thread-even depth-1" id="comment-6713"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Ramesh</span>  <span class="comment_date cye-lm-tag">July 18, 2012, 05:57</span></div><div class="comment_text" id="comment-body-6713"><p class="cye-lm-tag">Hi Petri,</p>
<p class="cye-lm-tag">Great articles on spring data jpa. One thing I noticed was the update method on the serviceImpl is not actually updating. I tested the code and the updates don’t seem to get persisted. Am I making a mistake or is it really missing? Let me know. I am a bit confused because after so many views, none have pointed that one out.</p>
<p class="cye-lm-tag">-Ramesh</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-6720"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">July 18, 2012, 11:37</span></div><div class="comment_text" id="comment-body-6720"><p class="cye-lm-tag">Hi Ramesh,</p>
<p class="cye-lm-tag">Thanks for your feedback. Did you experience this issue when running my example application? The reason why I am asking this is that I just tested the example application (<a href="https://github.com/pkainulainen/Examples/tree/master/Spring/data-jpa/tutorial-part-two" rel="nofollow">https://github.com/pkainulainen/Examples/tree/master/Spring/data-jpa/tutorial-part-two</a>) and found out that updating the information of a person works on my computer (Yeah, epic excude). Anyway, if you are running this example application application and the update method does not work, could you let me know. Also, if you have made any changes to the code, could you paste them to <a href="http://pastebin.com/">Pastebin</a> so that I can help you out.</p>
<p class="cye-lm-tag">If you are trying to apply the principles mentioned in this blog entry in another application, ensure that when the update method is called, you are inside a read-write transaction. The save() method of the repository is not called in my example because all changes made to persistent objects are flushed back to the database when a read-write transaction is committed.</p>
</div> </div><ul class="children"><li class="comment odd alt depth-3" id="comment-6812"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Ramesh</span>  <span class="comment_date cye-lm-tag">July 21, 2012, 19:18</span></div><div class="comment_text" id="comment-body-6812"><p class="cye-lm-tag">Thanks for the reply Petri. I was not exactly trying out your example, but had followed your example in a sample project of mine. I’ve extracted the relevant pieces and loaded it into paste bin at <a href="http://pastebin.com/SMR9fbWV" rel="nofollow">http://pastebin.com/SMR9fbWV</a>. I have the disable method as a part of the transaction. Please take a look and let me know. In the meantime, I will also test our your application as it is.</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-4" id="comment-6827"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">July 22, 2012, 11:18</span></div><div class="comment_text" id="comment-body-6827"><p class="cye-lm-tag">Hi Ramesh,</p>
<p class="cye-lm-tag">The codes you pasted in Pastebin seems fine to me. It would be helpful if you could answer to following questions:</p>
<p class="cye-lm-tag">– Are you using Hibernate or some other persistence provider? Which version do you use?<br> – Which version of the Spring Data JPA are you using?<br> – Which transaction manager are you using?<br> – Which database you are using?</p>
<p class="cye-lm-tag">This would help me to replicate your environment which helps me to find the reason of your problem.</p>
</div> </div><ul class="children"><li class="comment odd alt depth-5" id="comment-6902"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Ramesh</span>  <span class="comment_date cye-lm-tag">July 25, 2012, 06:31</span></div><div class="comment_text" id="comment-body-6902"><p class="cye-lm-tag">Hi Petri,</p>
<p class="cye-lm-tag">– Are you using Hibernate or some other persistence provider? Which version do you use?<br> I am using hibernate 3.5.6<br> – Which version of the Spring Data JPA are you using?<br> 1.0.3<br> – Which transaction manager are you using?<br> Spring’s transaction manager<br> – Which database you are using?<br> HSQLDB</p>
<p class="cye-lm-tag">I have the relevant parts of the POM in paste bin here <a href="http://pastebin.com/igSc1MK9" rel="nofollow">http://pastebin.com/igSc1MK9</a></p>
</div></div></li><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-5" id="comment-6929"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">July 25, 2012, 21:19</span></div><div class="comment_text" id="comment-body-6929"><p class="cye-lm-tag">Hi Ramesh,</p>
<p class="cye-lm-tag">I tried changing the dependency versions of my example application to match yours, and updating the information of a person is working without calling the save() method of the PersonRepository. When you said that you are using Spring’s transaction manager, were you referring to the JpaTransactionManager (I use it in my example application)?</p>
</div></div></li><li class="comment odd alt depth-5" id="comment-6954"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Ramesh</span>  <span class="comment_date cye-lm-tag">July 26, 2012, 15:59</span></div><div class="comment_text" id="comment-body-6954"><p class="cye-lm-tag">Hi Petri,</p>
<p class="cye-lm-tag">I was not able to reply to your last comment. So doing it here. First, thank you for your patience and persistence in trying to find the cause. It rare to find people like that. In my case, I pretty much use the same configuration as yours, but I use XML instead of java for configuration. Relevant parts of my configuration are at <a href="http://pastebin.com/ix2v6hmY" rel="nofollow">http://pastebin.com/ix2v6hmY</a>. I have not yet tried your exact application. I will do so tonight and update you.</p>
<p class="cye-lm-tag">Thanks,<br> Ramesh</p>
</div></div></li><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-5" id="comment-6955"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">July 26, 2012, 16:21</span></div><div class="comment_text" id="comment-body-6955"><p class="cye-lm-tag">Hi Ramesh,</p>
<p class="cye-lm-tag">It is always nice to do some detective work and solve interesting problems. :)</p>
<p class="cye-lm-tag">I looked at the configuration, which you added at Pastebin, and it looked fine to me. However, have you enabled the annotation driven transaction management in your application context configuration file? If you are using XML, you can do this by adding the following line to your application context configuration (or by adding the @EnableTransactionManagement annotation to your application context configuration class):</p>
<p class="cye-lm-tag"><code>&lt;tx:annotation-driven transaction-manager="transactionManager"/&gt;</code></p>
<p class="cye-lm-tag">More information about this is found at the reference documentation of Spring Framework 3.1.x:</p>
<p class="cye-lm-tag"><a href="http://static.springsource.org/spring/docs/3.1.x/spring-framework-reference/htmlsingle/spring-framework-reference.html#transaction-declarative-annotations" rel="nofollow">http://static.springsource.org/spring/docs/3.1.x/spring-framework-reference/htmlsingle/spring-framework-reference.html#transaction-declarative-annotations</a></p>
</div></div></li></ul></li></ul></li></ul></li></ul></li><li class="comment odd alt thread-odd thread-alt depth-1" id="comment-6990"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Applebee</span>  <span class="comment_date cye-lm-tag">July 27, 2012, 21:33</span></div><div class="comment_text" id="comment-body-6990"><p class="cye-lm-tag">Hi Petri,</p>
<p class="cye-lm-tag">very nice tutorial, learning new things, very helpful.</p>
<p class="cye-lm-tag">can you just show how to block crud operations.<br> I created one entity and repository using spring-data-Jpa extending CrudRepository. But I dont want to allow CRUD operations, I need to block them. For in case if I want to delete any entry in database throu service I need to get an error code. Is there any way to block crud operations? Thanks</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-6991"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">July 27, 2012, 21:41</span></div><div class="comment_text" id="comment-body-6991"><p class="cye-lm-tag">Hi Applebee,</p>
<p class="cye-lm-tag">I would use Spring Security to deny access to unwanted operations. Check out the homepage of the Spring Security project: <a href="http://static.springsource.org/spring-security/site/" rel="nofollow">http://static.springsource.org/spring-security/site/</a>.</p>
</div> </div><ul class="children"><li class="comment odd alt depth-3" id="comment-6992"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Applebee</span>  <span class="comment_date cye-lm-tag">July 27, 2012, 21:47</span></div><div class="comment_text" id="comment-body-6992"><p class="cye-lm-tag">can you show with an example how to use Spring Security to deny access?</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-4" id="comment-7001"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">July 27, 2012, 23:42</span></div><div class="comment_text" id="comment-body-7001"><p class="cye-lm-tag">Hi Applebee,</p>
<p class="cye-lm-tag">The exact process is too long to be described in a comment but there are several Spring Security tutorials available on the internet. Here are few of them:</p>
<ul><li><a href="http://static.springsource.org/spring-security/site/tutorial.html" rel="nofollow">Spring Security Tutorial</a></li><li><a href="http://static.springsource.org/spring-security/site/petclinic-tutorial.html" rel="nofollow">Spring Security – Tutorial: Adding Security to Petclinic</a></li><li><a href="http://javabeginnerstutorial.com/spring-security-tutorial/spring-security-introduction-tutorial/" rel="nofollow">Spring Security Introduction Tutorial</a></li></ul></div> </div><ul class="children"><li class="comment odd alt depth-5" id="comment-7099"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Applebee</span>  <span class="comment_date cye-lm-tag">July 30, 2012, 18:54</span></div><div class="comment_text" id="comment-body-7099"><p class="cye-lm-tag">Hi Petri,</p>
<p class="cye-lm-tag">Thanks for your reply. I have one more question, from the above Person example</p>
<p class="cye-lm-tag">when I created the PersonRepository I added one method findByFirstName which I am able to get the results. Here I don’t want to add findBy for other attributes.</p>
<p class="cye-lm-tag">So when I was trying to search with other attibutes it is giving 500 Internal Server Error. Is there any way to customize that kind of exceptions.</p>
<p class="cye-lm-tag">Thank you.</p>
</div></div></li><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-5" id="comment-7103"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">July 30, 2012, 20:09</span></div><div class="comment_text" id="comment-body-7103"><p class="cye-lm-tag">Hi Applebee,</p>
<p class="cye-lm-tag">If you are talking about the exceptions that are thrown by Spring Data JPA or Spring Framework, it is not possible to customize them without changing the source code of the framework in question.</p>
<p class="cye-lm-tag">However, it is possible to configure an exception handler that specifies the view that is rendered when a specific exception is thrown. More information about this is found from the reference manual of Spring Framework:</p>
<p class="cye-lm-tag"><a href="http://static.springsource.org/spring/docs/current/spring-framework-reference/html/mvc.html#mvc-exceptionhandlers" rel="nofollow">http://static.springsource.org/spring/docs/current/spring-framework-reference/html/mvc.html#mvc-exceptionhandlers</a></p>
<p class="cye-lm-tag">Also, I would probably use the approaches described in later parts of my Spring Data JPA tutorial for implementing the search function you mentioned. Using the query generation from method name strategy for this purpose is not very user friendly because is not possible to implement a case insensitive search with it.</p>
</div></div></li></ul></li></ul></li><li class="comment odd alt depth-3" id="comment-611604"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Jagadish</span>  <span class="comment_date cye-lm-tag">May 17, 2014, 16:03</span></div><div class="comment_text" id="comment-body-611604"><p class="cye-lm-tag">Hi Petri,<br> this is Jagadeesh i am developing one web application in which i am using spring mvc4.0 and spring data jpa .In this application i am developing simple registration page which contains fields of three entities now, the problem is how to insert data into three tables or three entites  by form submission of registration page.Along with i am having small doubt i.e. in JPA we are having save() which meant for saving data into database<br> but for updating data is their any default method in JPA?<br> The above are the two problems which i am facing from few days onwards<br> if Know please help me to get rid of this problem<br> Thanks&amp;Regards<br> jagadeesh</p>
</div> </div></li></ul></li></ul></li><li class="comment even thread-even depth-1" id="comment-7203"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Applebee</span>  <span class="comment_date cye-lm-tag">August 3, 2012, 22:17</span></div><div class="comment_text" id="comment-body-7203"><p class="cye-lm-tag">Hi Petri,</p>
<p class="cye-lm-tag">I have a database view “Example”</p>
<p class="cye-lm-tag">Example<br> id    name<br> ——————–<br> 100 HELLO<br> 100 HELLO WORLD<br> 200 TEST<br> 200 TEST123<br> 300 APPLE</p>
<p class="cye-lm-tag">Created entity and repository for Example using JPA Annotations<br> Entity: Example.java and the repository class ExampleRepository extends CrudRepository</p>
<p class="cye-lm-tag">HTTP GET to the application:</p>
<p class="cye-lm-tag">localhost:8080/data</p>
<p class="cye-lm-tag">{<br> “_links” : [ {<br> “rel” : “data”,<br> “href” : “http://localhost:8080/data/data”<br> } ]<br> }</p>
<p class="cye-lm-tag">localhost:8080/data/data</p>
<p class="cye-lm-tag">{<br> “_links” : [ {<br> “rel” : “data.Example.100”,<br> “href” : “http://localhost:8080/data/data/100”<br> }, {<br> “rel” : “data.Example.100”,<br> “href” : “http://localhost:8080/data/data/100”<br> }, {<br> “rel” : “data.Example.200”,<br> “href” : “http://localhost:8080/data/data/200”<br> }, {<br> “rel” : “data.Example.200”,<br> “href” : “http://localhost:8080/data/data/200”<br> }, {<br> “rel” : “data.Example.300”,<br> “href” : “http://localhost:8080/data/data/300”<br> }, {<br> “rel” : “data.search”,<br> “href” : “http://localhost:8080/data/data/search”<br> } ]<br> }</p>
<p class="cye-lm-tag">Is there any way I can search using multiple parameters like<br> localhost:8080/data/data/search/id?id=(100,200)</p>
<p class="cye-lm-tag">or using IN operator</p>
<p class="cye-lm-tag">Thanks</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-7226"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">August 4, 2012, 20:43</span></div><div class="comment_text" id="comment-body-7226"><p class="cye-lm-tag">Hi Applebee,</p>
<p class="cye-lm-tag">One comment about your web layer:</p>
<p class="cye-lm-tag">I would consider using POST and sending the search conditions as JSON in the request body. This makes a lot more sense than your current approach since it seems that you want to send 0..* ids to your controller method.</p>
<p class="cye-lm-tag">About the query creation:</p>
<p class="cye-lm-tag">I would use Querydsl or the JPA Criteria API to build the actual query. If you have no experience from these techniques, you might want to check out these blog entries:</p>
<ul><li><a href="http://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-part-four-jpa-criteria-queries/" rel="nofollow">Creating dynamic queries with the JPA Criteria API</a></li><li><a href="http://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-part-five-querydsl/" rel="nofollow">Creating dynamic queries with Querydsl</a></li></ul><p class="cye-lm-tag">However, the creation of a query that uses the IN operator is not described in those entries. I managed to find one article that has an example of the usage of IN operator and the JPA Criteria API: <a href="http://www.ibm.com/developerworks/java/library/j-typesafejpa/" rel="nofollow">Dynamic, typesafe queries with JPA 2.0</a>.</p>
</div> </div></li></ul></li><li class="comment even thread-odd thread-alt depth-1" id="comment-8708"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Marc R.</span>  <span class="comment_date cye-lm-tag">September 21, 2012, 07:42</span></div><div class="comment_text" id="comment-body-8708"><p class="cye-lm-tag">Hi Petri,</p>
<p class="cye-lm-tag">Your tutorial is honestly the best source of information about Spring Data right now, you are also very good at explaining everything.</p>
<p class="cye-lm-tag">Unfortunately, I recently encountered a problem and didn’t really figured out any easy way to deal with it.</p>
<p class="cye-lm-tag">Let’s say you want to add the following Column to Person.java<br> @Column(name = “Alias”, unique = true)<br> private String alias;</p>
<p class="cye-lm-tag">How would you ensure the Uniqueness of this alias. So far, adding a custom validator that check for unicity using a query at the DTO level doesn’t really solve the problem as any concurrent transaction could modify data after a manual check but before the commit of the ongoing transaction. And secondly, as I’m not using @Validator on the Entity itself but on the DTO, there’s isn’t any straightforward way to get the errors and feed it back to my view.</p>
<p class="cye-lm-tag">Any idea on how to solve this problem?</p>
<p class="cye-lm-tag">Thank you</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-8711"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">September 21, 2012, 10:25</span></div><div class="comment_text" id="comment-body-8711"><p class="cye-lm-tag">Hi Marc,</p>
<p class="cye-lm-tag">It is good to hear that you like my tutorial. About your problem:</p>
<p class="cye-lm-tag">This is indeed a tricky one since you cannot really know whether a unique constraint is broken until you save the entity to the database (I am assuming that you have got unique constraint for the Alias column at database). There are some useful pointers at stackoverflow:</p>
<ul><li><a href="http://stackoverflow.com/questions/3502279/how-to-handle-jpa-unique-constraint-violations" rel="nofollow">How to handle JPA unique constraint violations?</a></li><li><a href="http://stackoverflow.com/questions/2519902/elegantly-handling-constraint-violations-in-ejb-jpa-environment" rel="nofollow">Elegantly handling constraint violations in EJB/JPA environment?</a></li></ul><p class="cye-lm-tag">It seems that there is no elegant and portable way to handle this. However, we can do something about it. I would try to minimize the chance that the unique constraint is broken by following these steps:</p>
<ol><li>Implement a controller method that processes Ajax requests and finds out if a certain alias is free. This controller method would be used to do some client side validation (or to provide a check availability function).</li><li>When a new person is added, I would check the availability of the alias at the controller method that processes the request. This way I can add an error to the BindingResult object if the alias is already in use.</li><li>As you pointed out, this does not solve a situation where a concurrent transaction modifies the data after the alias has been checked manually but before the ongoing transaction is committed. The third step would be to take of this problem. I would probably catch the exception that is thrown when the unique constraint is broken and add an error to the BindingResult object. However, finding out the cause of the exception can be ugly as explained in the links that I pasted before.</li></ol><p class="cye-lm-tag">What do you think about this solution?</p>
</div> </div></li></ul></li><li class="comment even thread-even depth-1" id="comment-8841"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">don</span>  <span class="comment_date cye-lm-tag">September 24, 2012, 16:49</span></div><div class="comment_text" id="comment-body-8841"><p class="cye-lm-tag">Petri,</p>
<p class="cye-lm-tag">Thanks for the wonderful tutorials!</p>
<p class="cye-lm-tag">It is not rare for  real-world application to involve a couple of hundred database tables. Normally we would use code-generation tools such as Jboss Tools to reverse-engineer an existing database and automatically generate entity classes and JPA annotations. The Person class in your tutorial is highly customized. How do you  generate that kind of customized code if you have to deal with a couple of hundred tables?</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-8858"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">September 24, 2012, 23:02</span></div><div class="comment_text" id="comment-body-8858"><p class="cye-lm-tag">Hi Don,</p>
<p class="cye-lm-tag">It was nice to hear to that you like my tutorials. Also, I want to thank for an excellent question.</p>
<p class="cye-lm-tag">Unfortunately, as far as I know, there is no way generate “customized” domain model classes automatically. As you said, one can use code generators to generate entities from an existing database but typically this leads in to a <a href="http://martinfowler.com/bliki/AnemicDomainModel.html" rel="nofollow">anemic domain model</a>. For a quite long time I was writing applications that used this approach and I was perfectly happy with it.</p>
<p class="cye-lm-tag">However, then I read a book called <a href="http://www.amazon.com/Domain-Driven-Design-Tackling-Complexity-Software/dp/0321125215" rel="nofollow">Domain Driven Design</a> and saw the light. The problem with my old approach was that I kind of got all the problems caused by object-relational mismatch and got none of the benefits. All my business logic was scattered around the service layer, which made my service classes look like a mess. Now, when I moved the business logic from the service layer to the domain model, I got the following benefits:</p>
<ul><li>The service layer is clean and it is responsible of application logic.</li><li>All business logic is put into a single place: to the domain model. This way I always know where I can find it. I don’t have to search it from a messy service layer anymore.</li><li>Structuring the code this way makes it easier to write GOOD unit tests for it.</li></ul><p class="cye-lm-tag">Because of these benefits I am ready accept that I will spend a lot of time working with my domain model. Also, since I have been mostly participated in software development projects that uses Agile methods, the implementation and design of the application is divided in to sprints so I never have to face the horrible task of fixing the whole domain model at once (As you stated, it would be a huge task since the databases of real world applications tend to have a lot of tables).</p>
</div> </div></li></ul></li><li class="comment even thread-odd thread-alt depth-1" id="comment-10014"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Mladen</span>  <span class="comment_date cye-lm-tag">October 22, 2012, 16:49</span></div><div class="comment_text" id="comment-body-10014"><p class="cye-lm-tag">Why is it so difficult to write package statements in the code?<br> some libraries is not in the initial pom file e.g. apache lang commons</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-10016"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">October 22, 2012, 17:08</span></div><div class="comment_text" id="comment-body-10016"><p class="cye-lm-tag">Hi Mladen,</p>
<p class="cye-lm-tag">I left the import statements out because I felt that including them would make this blog entry too long. Also, since I have included a <a href="https://github.com/pkainulainen/spring-data-jpa-examples/tree/master/query-methods" target="_blank" rel="nofollow">fully functional example application</a>, I thought that adding them would add little value. It seems that I might have rethink my attitude and add import statements (I will leave the obvious ones out though) to the code samples that are attached to my blog entries. This might take some time so be patient. :)</p>
<p class="cye-lm-tag">Regarding to your second point, the <a href="https://github.com/pkainulainen/spring-data-jpa-examples/tree/master/query-methods/pom.xml" target="_blank" rel="nofollow">pom file of my example application</a> declares all the required dependencies (including commons lang).</p>
</div> </div></li></ul></li><li class="comment even thread-even depth-1" id="comment-10625"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Mildo</span>  <span class="comment_date cye-lm-tag">November 5, 2012, 02:02</span></div><div class="comment_text" id="comment-body-10625"><p class="cye-lm-tag">Hi Petri,</p>
<p class="cye-lm-tag">Great tutorial!! Excellent Job!! I’m having some trouble running the tutorial on Tomcat could you guide me on how to migrate it from jetty to tomcat? I tried removing the webdefault.xml  and writting an new web.xml but it isn’t working the Spring context is not beeing loaded.</p>
<p class="cye-lm-tag">Thanks in advance</p>
<p class="cye-lm-tag">Mildo</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-10644"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">November 5, 2012, 10:21</span></div><div class="comment_text" id="comment-body-10644"><p class="cye-lm-tag">Hi Mildo,</p>
<p class="cye-lm-tag">Thanks for your comment. It is nice to know that you like this tutorial.</p>
<p class="cye-lm-tag">Are you trying to deploy the created war file directly to Tomcat or are you using the Tomcat Maven plugin? The <em>webdefault.xml</em> file is required only because the sample project is using an old version of the Jetty Maven plugin. I should probably update this plugin and remove the unnecessary files from the sample project.</p>
<p class="cye-lm-tag"><strong>Update: <a href="http://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-part-two-crud/#comment-10696" rel="nofollow">Check this comment out if you are using Tomcat 6</a>.</strong></p>
</div> </div></li></ul></li><li class="comment even thread-odd thread-alt depth-1" id="comment-10694"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Vipul Popat</span>  <span class="comment_date cye-lm-tag">November 6, 2012, 12:37</span></div><div class="comment_text" id="comment-body-10694"><p class="cye-lm-tag">Hi Petri</p>
<p class="cye-lm-tag">Thanks for the wonderful article but cannot deploy the example on tomcat<br> Can you please send me a web.xml for tomcat asap</p>
<p class="cye-lm-tag">Regards<br> Vipul</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-10696"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">November 6, 2012, 12:56</span></div><div class="comment_text" id="comment-body-10696"><p class="cye-lm-tag">Hi Vipul,</p>
<p class="cye-lm-tag">Thanks for your comment!</p>
<p class="cye-lm-tag">This example requires that a Servlet 3.0 compliant servlet container is used and it should work fine with Tomcat 7. If you are using an older version of Tomcat, you cannot configure your web application by using programmatic configuration. In other words, you have to delete the <code>DataJPAExampleInitializer</code> class and create a <em>web.xml</em> file. This process is explained in the following article:</p>
<p class="cye-lm-tag"><a href="http://java.dzone.com/articles/bootstrapping-web-application" rel="nofollow">Bootstrapping a web application with Spring 3.1 and Java based Configuration, part 1</a></p>
<p class="cye-lm-tag">Also, let me know if you are using Tomcat 7 and cannot deploy the example application.</p>
</div> </div></li></ul></li><li class="comment even thread-even depth-1" id="comment-11986"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Josh</span>  <span class="comment_date cye-lm-tag">December 10, 2012, 05:59</span></div><div class="comment_text" id="comment-body-11986"><p class="cye-lm-tag">Petri,</p>
<p class="cye-lm-tag">Perhaps I’m missing the advantage of using the builder pattern because of the simplicity of its use in the Person class, but it doesn’t seem like it is buying you anything more than a straight constructor or a static method would. Instead by using it you have to construct an extra object and make an extra call.</p>
<p class="cye-lm-tag">What am I missing?</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-12016"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">December 10, 2012, 20:15</span></div><div class="comment_text" id="comment-body-12016"><p class="cye-lm-tag">Hi Josh,</p>
<p class="cye-lm-tag">you are right. In this example the builder pattern is definitely an overkill and it would be better to use a regular constructor. However, I used it on this example because wanted to emphasize that it is a good way to create new objects (especially when the created object has a lot of optional parameters). The alternatives of the builder pattern are:</p>
<ul><li>The first option is to use the <a href="http://www.captaindebug.com/2011/05/telescoping-constructor-antipattern.html" rel="nofollow">telescoping constructor</a> pattern to create objects that have multiple optional parameters. This means that you up writing many constructors (the actual amount depends from the number of optional parameters). This has two disadvantages: it is hard to create objects (especially if the parameters have the same type), and the code becomes really messy and hard to read. However, this approach is one advantage: it ensures that your code is thread safe.</li><li>The second option is to use so called <a href="http://www.javapractices.com/topic/TopicAction.do?Id=84" rel="nofollow">Javabeans style construction</a>. The problem with this approach is that even though the resulting code is quite easy to read, the created object is in inconsistent state during its creation and it prevents you from making your class immutable. Also, you have to manually ensure that your code is thread safe.</li></ul><p class="cye-lm-tag">The builder pattern combines the safety of the telescoping constructor pattern and the readability of the Javabeans style construction. That is why it should be used on model objects unless you have a REALLY good reason not to use it.</p>
</div> </div><ul class="children"><li class="comment even depth-3" id="comment-12082"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Josh</span>  <span class="comment_date cye-lm-tag">December 12, 2012, 08:54</span></div><div class="comment_text" id="comment-body-12082"><p class="cye-lm-tag">So, perhaps the issue I’m having in seeing the applicability is that all of the main fields in the Person object are required. How does this pattern take care of the telescoping constructor pattern for optional parameters? Say you add height, weight, and hairColor to Person. Do you just end up with telescoping parameters in your builder object? Or do you construct the object with the builder and then resume using the setters for the rest?</p>
<p class="cye-lm-tag">When I searched for the pattern online the applicability seemed to center on complex construction tasks, like in the cases where object creation involves the coordination of several other objects or involves some tricky sequencing.</p>
<p class="cye-lm-tag">Thanks</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-4" id="comment-12084"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">December 12, 2012, 09:18</span></div><div class="comment_text" id="comment-body-12084"><p class="cye-lm-tag">Hi Josh,</p>
<p class="cye-lm-tag">Optional properties are dealt with by creating so called property methods that are used to set the optional parameters. Here is the source code of the <em>Person</em> class that has the optional parameters you suggested:<br> <code></code></p>
<pre><code>public class Person {
   
    private String firstName;
    private Color hairColor;
    private int height;
    private String lastName;
    private int weight;
    
    //This sucks but it is required by Hibernate
    public Person() {
    }

    //Getters and other methods. No Setters

    public static Builder getBuilder(String firstName, String lastName) {
        return new Builder(firstName, lastName);
    }

    public static class Builder {
        Person built;

        Builder(String firstName, String lastName) {
            built = new Person();
            built.firstName = firstName;
            built.lastName = lastName;
        }

        public Builder hairColor(Color hairColor) {
            built.hairColor = hairColor;
            return this;
        }

        public Builder height(int height) {
            built.heigth = height;
            return this;
        }

        public Builder weight(int weight) {
            built.weight = weight;
            return this;
        }

        public Person build() {
            return built;
        }
    }
}
</code></pre><p class="cye-lm-tag"><br> Here are some examples that illustrate the usage of these property methods:<br> <code></code></p>
<pre><code>//Only mandatory properties are set
Person onlyMandatory = Person.getBuilder("John", "Smith").build();

//Sets first name, last name and hair color
Person blonde = Person.getBuilder("Jane", "Smith").hairColor(Color.YELLOW).build();

//Creates new person and sets the values of all properties
Person person = Person.getBuilder("John", "Smith")
		.hairColor(Color.BROWN)
		.height(100)
		.weight(100)
		.build();
</code></pre><p class="cye-lm-tag"><br> I hope that this example answered to your question.</p>
</div> </div><ul class="children"><li class="comment even depth-5" id="comment-12231"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Josh</span>  <span class="comment_date cye-lm-tag">December 16, 2012, 21:47</span></div><div class="comment_text" id="comment-body-12231"><p class="cye-lm-tag">Thanks, yes that helps. So from your latest example I can see where you could put some integrity checks in the build() method allowing you to ensure that the optional attributes are set consistently with each other before giving access to the Person object. However, I can also see where you would need to be careful with this pattern as your objects could easily become immutable or very difficult to update without client classes also maintaining a reference to the builder that created the object in the first place.</p>
</div></div></li><li class="comment odd alt depth-5" id="comment-292626"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Marco</span>  <span class="comment_date cye-lm-tag">November 28, 2013, 11:55</span></div><div class="comment_text" id="comment-body-292626"><p class="cye-lm-tag">what is difference bettween setId(String id) and id(String id)<br> is the second method so helpfull ?</p>
</div></div></li><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-5" id="comment-292783"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">November 28, 2013, 20:27</span></div><div class="comment_text" id="comment-body-292783"><p class="cye-lm-tag">You should take a look at the blog post titled: <a href="http://jlordiales.wordpress.com/2012/12/13/the-builder-pattern-in-practice/" target="_blank" rel="nofollow">The builder pattern in practice</a>. It provides a very nice explanation of the builder pattern and describes its benefits as well.</p>
</div></div></li><li class="comment odd alt depth-5" id="comment-684662"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Belden</span>  <span class="comment_date cye-lm-tag">June 7, 2014, 07:56</span></div><div class="comment_text" id="comment-body-684662"><p class="cye-lm-tag">Hi Petri,</p>
<p class="cye-lm-tag">I want to thank you for creating such an excellent post! This series has definitely given me a good introduction to Spring Data JPA.</p>
<p class="cye-lm-tag">I’m comparing your Builder pattern with how it’s demonstrated in the book, ‘Effective Java’, by Joshua Bloch. One difference I notice is that you don’t re-define the properties within the nested ‘Builder’ class. Is the way you are doing it a cleaner technique because you don’t have to re-define the properties again (once in the ‘Person’ class and then once again the nested ‘Builder’ class)?</p>
<p class="cye-lm-tag">Also, I’ve heard that one advantage of the a Builder class is that it can be immutable, however, I notice you have an ‘update’ method, a ‘preUpdate’ method, and some other methods that effectively update the class after it’s been instantiated. Wouldn’t this break the contract of it being an immutable class? Or is there no way around this and you need these “updating” methods because of how Spring Data JPA works? Instead of these “updating” methods, could you create a new ‘Person Object’ with the new properties it needs and use that as the new updated object somehow?</p>
</div></div></li><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-5" id="comment-684945"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">June 7, 2014, 11:47</span></div><div class="comment_text" id="comment-body-684945"><p class="cye-lm-tag">Hi Belden,</p>
<p class="cye-lm-tag">it is good to hear that this tutorial has been useful to you. I will answer to your questions in the following:</p>
<p class="cye-lm-tag"><em>“Is the way you are doing it a cleaner technique because you don’t have to re-define the properties again (once in the ‘Person’ class and then once again the nested ‘Builder’ class)?”</em></p>
<p class="cye-lm-tag">Yes. That was my original reason for doing this. However, this approach has a serious drawback: you cannot really create immutable objects because you cannot use the <code>final</code> keyword in the fields of the created class. That is why I have abandoned my approach and started using the approach described by Joshua Bloch. The reason why I haven’t updated my old blog posts is that it would take too much work.</p>
<p class="cye-lm-tag"><em>Also, I’ve heard that one advantage of the a Builder class is that it can be immutable</em></p>
<p class="cye-lm-tag">Yes. That is one advantage of the builder patter. Another advantage is that you can create a domain-specific language for building new object.</p>
<p class="cye-lm-tag"><em>however, I notice you have an ‘update’ method, a ‘preUpdate’ method, and some other methods that effectively update the class after it’s been instantiated. Wouldn’t this break the contract of it being an immutable class?</em></p>
<p class="cye-lm-tag">Yes.</p>
<p class="cye-lm-tag"><em>Or is there no way around this and you need these “updating” methods because of how Spring Data JPA works? Instead of these “updating” methods, could you create a new ‘Person Object’ with the new properties it needs and use that as the new updated object somehow?</em></p>
<p class="cye-lm-tag">The problem is that if you use an ORM tool, it means that entities must be mutable (e.g. Hibernate requires that each entity has a default constructor). However, you can reduce mutability by using immutable value types (<code>@Embeddable</code> classes). I try to move as much information as I can to value types because this way I can minimize the effects of mutability.</p>
</div></div></li></ul></li></ul></li></ul></li></ul></li><li class="comment odd alt thread-odd thread-alt depth-1" id="comment-12007"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Jan</span>  <span class="comment_date cye-lm-tag">December 10, 2012, 17:08</span></div><div class="comment_text" id="comment-body-12007"><p class="cye-lm-tag">Hi,</p>
<p class="cye-lm-tag">First of all a big thank you – this is the tutorial I have been looking for, great job!</p>
<p class="cye-lm-tag">I do have one issue. I guess it is a configuration issue (or a stupid typo I did as it works for everyone else). I created my own application using yours as a template. I use tomcat 7, I start it from Eclipse (Juno).</p>
<p class="cye-lm-tag">Server starts without issues at <a href="http://localhost:8080/myapp/" rel="nofollow">http://localhost:8080/myapp/</a> and shows me the list of records I put in the database.</p>
<p class="cye-lm-tag">As soon as I click any of the links, my url becomes:<br> <a href="http://localhost:8080/person/edit/2" rel="nofollow">http://localhost:8080/person/edit/2</a></p>
<p class="cye-lm-tag">… which does not exist (is your app designed to run as ROOT.war in Tomcat by any chance?)</p>
<p class="cye-lm-tag">As soon as I change the URL to <a href="http://localhost:8080/myapp/person/edit/2" rel="nofollow">http://localhost:8080/myapp/person/edit/2</a>, I get to the edit view.</p>
<p class="cye-lm-tag">However, all the links on the edit page change either to<br> <a href="http://localhost:8080/" rel="nofollow">http://localhost:8080/</a> (back)<br> or<br> <a href="http://localhost:8080/person/edit" rel="nofollow">http://localhost:8080/person/edit</a> (save)</p>
<p class="cye-lm-tag">so needles to say, both save and back do not work.</p>
<p class="cye-lm-tag">To sum it up: How do I change the configuration when using Java configuration in Spring so that I can deploy your application just like I did?</p>
<p class="cye-lm-tag">Thank you,<br> Jan</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-12019"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">December 10, 2012, 20:37</span></div><div class="comment_text" id="comment-body-12019"><p class="cye-lm-tag">Hi Jan,</p>
<p class="cye-lm-tag">Good to hear that you liked this tutorial.</p>
<p class="cye-lm-tag">I have to confess that I was a bit lazy when I created the user interface of the example application. Like you suspected, the links are working correctly only if the context path of the application is ‘/’.</p>
<p class="cye-lm-tag">Luckily, this problem should be pretty easy to fix: You can use the <a href="http://static.springsource.org/spring/docs/3.1.x/spring-framework-reference/html/spring.tld.html#spring.tld.url" rel="nofollow"><em>url</em></a> tag to construct an url that contains the context path. Check out this StackOverflow question for more details about this: <a href="http://stackoverflow.com/questions/5007210/how-to-use-springurl-with-an-a-tag" rel="nofollow">how to use &lt;spring:url /&gt; with an &lt;a&gt; tag?</a></p>
</div> </div><ul class="children"><li class="comment odd alt depth-3" id="comment-12020"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Jan</span>  <span class="comment_date cye-lm-tag">December 10, 2012, 20:48</span></div><div class="comment_text" id="comment-body-12020"><p class="cye-lm-tag">Hi Petri,</p>
<p class="cye-lm-tag">Thank you for your quick answer. I will try the solution first thing in the morning tomorrow. I got a bit rusty on the subject of creating a new project from the scratch … and in the meantime the world has changed ;-).</p>
<p class="cye-lm-tag">Oh I would not dare to call you lazy after all the tutorial parts you published and after answering all the questions on your page!</p>
<p class="cye-lm-tag">If you ever come to Holland, I owe you a beer ;)</p>
<p class="cye-lm-tag">Regards,<br> Jan</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-4" id="comment-12040"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">December 11, 2012, 09:28</span></div><div class="comment_text" id="comment-body-12040"><p class="cye-lm-tag">Jan,</p>
<p class="cye-lm-tag">I have to come to visit Holland then!</p>
<p class="cye-lm-tag">About the fix, let me know if it did the trick. I know at least one other way to fix this but that fix is kind of ugly. That is why I did not suggest it as the first option.</p>
</div> </div></li></ul></li></ul></li></ul></li><li class="comment odd alt thread-even depth-1" id="comment-15932"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">MiB</span>  <span class="comment_date cye-lm-tag">January 15, 2013, 23:08</span></div><div class="comment_text" id="comment-body-15932"><p class="cye-lm-tag">Excellent article. It got me interested in your book. I can’t import part five, six and eight of the source code as there’s an error when setting up maven plugin connectors in Eclipse Juno ( SpringSource Tool Suite 3.1): “No marketplace entries found to handle /pom.xml in Eclipse.”</p>
<p class="cye-lm-tag">I installed m2e-apt from Jboss. This is not enough? Anyone know?</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-15940"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag"><a href="http://www.petrikainulainen.net/about-me" rel="external nofollow" class="url">Petri</a></span>  <span class="comment_date cye-lm-tag">January 15, 2013, 23:37</span></div><div class="comment_text" id="comment-body-15940"><p class="cye-lm-tag">MiB,</p>
<p class="cye-lm-tag">Thank you for you comment. I have not been using Eclipse for a while now but I found some links that might help you out:</p>
<ul><li><a href="http://stackoverflow.com/questions/11242107/maven-with-eclipse-juno" rel="nofollow">Maven with Eclipse Juno</a></li><li><a href="http://www.itcuties.com/tools/installing-maven-plugin-in-eclipse-juno/" rel="nofollow">Installing Maven plugin in Eclipse JUNO</a></li><li><a href="http://marketplace.eclipse.org/content/maven-integration-eclipse-juno-and-newer" rel="nofollow">Maven Integration for Eclipse</a></li></ul><p class="cye-lm-tag">Let me know if this solved your problem.</p>
</div> </div></li></ul></li><li class="comment odd alt thread-odd thread-alt depth-1" id="comment-16051"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">MiB</span>  <span class="comment_date cye-lm-tag">January 16, 2013, 07:16</span></div><div class="comment_text" id="comment-body-16051"><p class="cye-lm-tag">I had to replace the bean definition in applicationContext.xml:</p>
<p class="cye-lm-tag">and update Spring Data Jpa to 1.2 in the pom in order to avoid the error “sch.props.correct.2: A schema cannot contain two global components of the same name” in Springsource Tool Suite.</p>
<p class="cye-lm-tag">“Spring Data- JPA Schema validation error in STS” <a href="https://jira.springsource.org/browse/DATAJPA-160" rel="nofollow">https://jira.springsource.org/browse/DATAJPA-160</a></p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-16093"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">January 16, 2013, 09:10</span></div><div class="comment_text" id="comment-body-16093"><p class="cye-lm-tag">MiB,</p>
<p class="cye-lm-tag">Good to hear that you were able to solve your problem. Also, if you want to get rid of the XML configuration file which is used to configure Spring Data JPA, you can simply add the <a href="http://static.springsource.org/spring-data/jpa/docs/dev/api/org/springframework/data/jpa/repository/config/EnableJpaRepositories.html" rel="nofollow"><code>@EnableJpaRepositories</code></a> annotation (supported in Spring Data JPA 1.2) to your application context configuration class and delete the XML configuration file.</p>
</div> </div></li></ul></li><li class="comment odd alt thread-even depth-1" id="comment-16187"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">MiB</span>  <span class="comment_date cye-lm-tag">January 16, 2013, 13:12</span></div><div class="comment_text" id="comment-body-16187"><p class="cye-lm-tag">Well, I also had to set m2e to ignore execution of the maven-apt-plugin.<br> I got this classic before that:<br> “Plugin execution not covered by lifecycle configuration: com.mysema.maven:maven-apt-plugin:1.0.2:process (execution: default, phase: generate-sources)”</p>
<p class="cye-lm-tag">Then run that generate-sources phase, set source folder, then clean build. For some reason in some cases —&nbsp;Part five I think — I had  to run the tests as junit tests and not maven tests in order for them to run green.</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-16202"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">January 16, 2013, 14:03</span></div><div class="comment_text" id="comment-body-16202"><p class="cye-lm-tag">Unfortunately the Maven APT plugin does not work very well with Eclipse. However, at least one of my readers has managed to configure it. See <a href="http://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-part-five-querydsl/#comment-11088" rel="nofollow">the comment written by Eric B</a> for more details.</p>
</div> </div></li></ul></li><li class="comment odd alt thread-odd thread-alt depth-1" id="comment-16207"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">MiB</span>  <span class="comment_date cye-lm-tag">January 16, 2013, 14:15</span></div><div class="comment_text" id="comment-body-16207"><p class="cye-lm-tag">Thanks!</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-16208"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">January 16, 2013, 14:17</span></div><div class="comment_text" id="comment-body-16208"><p class="cye-lm-tag">You are welcome.</p>
</div> </div></li></ul></li><li class="comment odd alt thread-even depth-1" id="comment-68402"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Philipp</span>  <span class="comment_date cye-lm-tag">March 13, 2013, 13:34</span></div><div class="comment_text" id="comment-body-68402"><p class="cye-lm-tag">Thank you very much for your tutorials!</p>
<p class="cye-lm-tag">I’m currently digging into Spring Data, Hibernate and JPA. The goal is to build a simple application that involves Wicket for web logic and Spring Data for easy persistence support. I’m struggling a bit with configure Spring Data outside of a Spring MVC context: What configuration files are relevant and where to put them? For example you named you applicationContext-persistence.xml instead of just applicationContext.xml. Does this have impact on how the file is handled? Do you have examples for how to use Spring Data outside of a Spring MVC application? Do I have to understand the whole Spring framework at the end or is it possible to use just a potion of the framework without getting to much invovled with the others?</p>
<p class="cye-lm-tag">Furthermore, I learn a lot about application infrastructure and patterns just by reading your comments. Thank you for sharing your expertise!</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-68900"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">March 13, 2013, 20:14</span></div><div class="comment_text" id="comment-body-68900"><p class="cye-lm-tag">The example application configures the Spring application context by using a combination of Java and XML configuration. This approach is described in <a href="http://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-part-one-configuration/" rel="nofollow">the first part of my Spring Data JPA tutorial</a>.</p>
<p class="cye-lm-tag">I have also written <a href="http://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-part-one-configuration/#comment-28196" rel="nofollow">a comment</a> to that blog entry which describes how you can configure Spring Data JPA, Hibernate and Spring transaction management by using XML configuration.</p>
<p class="cye-lm-tag">I guess the question is: Do you want to configure your application context by using Java configuration or XML configuration files?</p>
<p class="cye-lm-tag">About Wicket and Spring Data:</p>
<p class="cye-lm-tag">Unfortunately, all my Spring Data examples use Spring MVC. However, I have used Spring with Wicket (1.4.x) in the past and I think that I can give you some pointers which should help you to get started:</p>
<ul><li><a href="https://cwiki.apache.org/WICKET/spring.html" target="_blank" rel="nofollow">Spring @ Wicket Wiki</a> describes the Spring integration of Apache Wicket.</li><li><a href="http://tomaszdziurko.pl/2011/01/wicket-tutorial-part-1-setting-up-project-with-spring-3-jpa-2-and-mysql/" target="_blank" rel="nofollow">Wicket Tutorial, part 1 – setting up project with Spring 3, JPA 2 and MySQL</a> looks like an interesting tutorial which describes how you can use Spring with Apache Wicket. You should combine <a href="http://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-part-one-configuration/#comment-28196" rel="nofollow">the XML configuration described in the comment of my blog entry</a> with the application context configuration file of this Wicket tutorial.</li></ul><p class="cye-lm-tag">I hope that this answered to your question. If you have any other questions, feel free to ask them!</p>
</div> </div></li></ul></li><li class="comment odd alt thread-odd thread-alt depth-1" id="comment-232446"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Ankit</span>  <span class="comment_date cye-lm-tag">May 16, 2013, 22:13</span></div><div class="comment_text" id="comment-body-232446"><p class="cye-lm-tag">Hi Petri,<br> Your example is very good for beginners to start with as an console based application. Can u give me simple example of Spring Data JPA with MVC integration using MySql and Maven.<br> If u can help me out in this , it would be great help for me</p>
<p class="cye-lm-tag">Thankxxxx</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-236774"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">May 17, 2013, 15:16</span></div><div class="comment_text" id="comment-body-236774"><p class="cye-lm-tag">Hi Ankit,</p>
<p class="cye-lm-tag">You can enable the MySQL support of the example application by following these steps:</p>
<ol><li>Remove the H2 database dependency from the <em>pom.xml</em> file.</li><li>Uncomment the MySQL connector dependency declaration found from the <em>pom.xml</em> file.</li><li>Open the <em>application.properties</em> file and set the used JDBC driver, database url and Hibernate dialect.  This file contains valid MySQL configuration which is commented out by default. In other words, all you have to do is to remove the H2 configuration and enable the MySQL configuration.</li></ol><p class="cye-lm-tag">I hope that this answered to your question.</p>
</div> </div></li></ul></li><li class="comment odd alt thread-even depth-1" id="comment-263339"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag"><a href="http://agung-setiawan.com" rel="external nofollow" class="url">Agung Setiawan</a></span>  <span class="comment_date cye-lm-tag">May 29, 2013, 12:52</span></div><div class="comment_text" id="comment-body-263339"><p class="cye-lm-tag">Hi Petri, great tutorial to begin the journey of Spring Data JPA :D<br> i see your code in the Github and there’s no Unit Test for Repository class<br> my assumption is because it is part of the framework, so we just can trust the author lol<br> if we want to test how can we do it, i didn’t see you write the implementation of the Repository interface</p>
<p class="cye-lm-tag">thanks,</p>
</div> </div><ul class="children"><li class="comment even depth-2" id="comment-263340"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag"><a href="http://agung-setiawan.com" rel="external nofollow" class="url">Agung Setiawan</a></span>  <span class="comment_date cye-lm-tag">May 29, 2013, 12:58</span></div><div class="comment_text" id="comment-body-263340"><p class="cye-lm-tag">wupss i meant Integration Test</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-3" id="comment-263342"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">May 29, 2013, 13:07</span></div><div class="comment_text" id="comment-body-263342"><p class="cye-lm-tag">I answered your original comment before I saw this comment. :)</p>
<p class="cye-lm-tag">Anyway, check out my answer to your original comment. It has an link to an example application which has integration tests for its repository interface.</p>
</div> </div></li></ul></li><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-263341"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">May 29, 2013, 13:04</span></div><div class="comment_text" id="comment-body-263341"><p class="cye-lm-tag">Hi Agung,</p>
<p class="cye-lm-tag">Thank you for your comment.</p>
<p class="cye-lm-tag">The reason why there is no unit test for the repository interface is that when you are using Spring Data JPA, you don’t have to implement your repository interfaces. Spring Data JPA is capable of providing an implementation for them as long as your repository interfaces extends one of the “special” interfaces of Spring Data. The base interface of these “special” interfaces is the <code>Repository</code> interface.</p>
<p class="cye-lm-tag">You can however write integration tests to your repository interfaces. I have been planning to write a blog post about for some time now. Perhaps I should do it in the near future?</p>
<p class="cye-lm-tag">In the meanwhile, you can check out the <a href="https://github.com/pkainulainen/spring-data-jpa-examples/tree/master/querydsl-multi-module" target="_blank" rel="nofollow">example application</a> of my <a href="http://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-using-querydsl-in-a-multi-module-maven-project/" rel="nofollow">blog post which describes how you can use Querydsl in a multi-module Maven project</a>. This application has integration tests for the repository interface.</p>
<p class="cye-lm-tag"><strong>Update</strong>: I took look at the project and it seems that I wrote integration tests for the service implementation. You can, however, use the same technique when you are writing integration tests for your repositories. It seems that I should probably write a blog post about this soon.</p>
<p class="cye-lm-tag">I hope that this answered to your question.</p>
</div> </div></li></ul></li><li class="comment odd alt thread-odd thread-alt depth-1" id="comment-265628"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">HAIKI MONCEF</span>  <span class="comment_date cye-lm-tag">June 26, 2013, 15:34</span></div><div class="comment_text" id="comment-body-265628"><p class="cye-lm-tag">HI ,<br> great work there , i’m new to webapps i was wondering how can i deploy this application on jboss 7.1.0 as</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-265639"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">June 26, 2013, 16:48</span></div><div class="comment_text" id="comment-body-265639"><p class="cye-lm-tag">You can do it by following these steps:</p>
<ol><li>Create a war file by running the command <em>mvn clean package</em> at the root directory of the project (the directory which has the <em>pom.xml</em> file).</li><li>Deploy the created war file by using either auto deploy mode or manual deploy mode. Read the answers of <a href="http://stackoverflow.com/questions/7013783/how-to-deploy-a-war-file-in-jboss-as-7" target="_blank" rel="nofollow">this StackOverflow question</a> for more details about this.</li></ol><p class="cye-lm-tag">I hope that this answered to your question.</p>
<p class="cye-lm-tag"><strong>Update:</strong> <a href="http://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-part-one-configuration/#comment-265883" rel="nofollow">JBoss might not support Spring applications which use Java configuration</a>.</p>
</div> </div></li></ul></li><li class="comment odd alt thread-even depth-1" id="comment-266773"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Bowen</span>  <span class="comment_date cye-lm-tag">July 11, 2013, 17:13</span></div><div class="comment_text" id="comment-body-266773"><p class="cye-lm-tag">Hello Petri, you are really a great writter. Like every one else, I have seen a lot of tutorial websites, however, you are the only person who literally replies to every single comment. I greatly admire your spirit. Wish you have even greater success on your future career.</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-266779"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">July 11, 2013, 18:25</span></div><div class="comment_text" id="comment-body-266779"><p class="cye-lm-tag">Hi Bowen,</p>
<p class="cye-lm-tag">Thank you for your kind words. I really appreciate them.</p>
<p class="cye-lm-tag">Yes, I like to reply to every comment I get (especially if there is a question) because I feel that it makes no point to give a reader the possibility to comment your blog posts unless you are willing to communicate with them.</p>
<p class="cye-lm-tag">I think that the comments I get are valuable in two ways:</p>
<ol><li>They might reveal a problem in my blog post. These comments are extremely valuable because I can avoid making the same mistake in the future. Also, I get a chance to fix the original blog post.</li><li>They force me to look the solved problem from a different perspective. Again, this is a good thing because usually I learn something new during the process.</li></ol><p class="cye-lm-tag">I wish you all the best in your future career as well!</p>
</div> </div></li></ul></li><li class="comment odd alt thread-odd thread-alt depth-1" id="comment-270031"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">WS</span>  <span class="comment_date cye-lm-tag">August 14, 2013, 23:31</span></div><div class="comment_text" id="comment-body-270031"><p class="cye-lm-tag">Hi Petri, I’ve followed this tutorial (thanks a lot) and everything worked perfectly until I added a one-to-many relationship. I’m encountering an EntityNotFoundException and just can’t figure it out. I’ve tried so many different methods, but still stuck. Posted a question on stackoverflow if you have time to check it out. Thanks. <a href="http://stackoverflow.com/questions/18237689/hibernate-4-2-onetomany-entitynotfoundexception/" rel="nofollow">http://stackoverflow.com/questions/18237689/hibernate-4-2-onetomany-entitynotfoundexception/</a></p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-270063"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">August 15, 2013, 08:47</span></div><div class="comment_text" id="comment-body-270063"><p class="cye-lm-tag">It seems that you found the answer to your question while I was sleeping (based on the StackOverflow question). Am I correct?</p>
</div> </div></li></ul></li><li class="comment odd alt thread-even depth-1" id="comment-270095"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">WS</span>  <span class="comment_date cye-lm-tag">August 15, 2013, 16:28</span></div><div class="comment_text" id="comment-body-270095"><p class="cye-lm-tag">Petri, it appeared to be working but ran into an issue after I added subsequent records. The primary key on the keywords table is text in my solution, but I wanted it to be the docid. Didn’t realize that until I had duplicate keywords in other documents. Any ideas?</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-270099"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">August 15, 2013, 17:21</span></div><div class="comment_text" id="comment-body-270099"><p class="cye-lm-tag">So your problem is that you cannot add new documents because the same keyword appears in more than one document?</p>
<p class="cye-lm-tag">You have to add a new field to the <code>Keyword</code> class and use that field as the id of the entity. You cannot use the <em>docid</em> column as the private key because this means that you could add only one keyword per document (private key has to be unique).</p>
</div> </div><ul class="children"><li class="comment odd alt depth-3" id="comment-270103"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">WS</span>  <span class="comment_date cye-lm-tag">August 15, 2013, 18:01</span></div><div class="comment_text" id="comment-body-270103"><p class="cye-lm-tag">That’s right, each `Document` could have similar keywords. Last night I experimented with a `kywd_id` on the `Keyword` class, but then the keywords were duplicated on updates. `kywd_id` was auto-incrementing.</p>
<p class="cye-lm-tag">Say `Document` has keywords: one, two, three. And the `docid` is `abcd`.</p>
<p class="cye-lm-tag">Then the table rows looked like,</p>
<p class="cye-lm-tag">1, one, abcd<br> 2, two, abcd<br> 3, three, abcd</p>
<p class="cye-lm-tag">If I added a new keyword to `abcd`, then the table looked like,</p>
<p class="cye-lm-tag">1, one, abcd<br> 2, two, abcd<br> 3, three, abcd<br> 4, one, abcd<br> 5, two, abcd<br> 6, three, abcd<br> 7, four, abcd</p>
<p class="cye-lm-tag">I’m expecting,</p>
<p class="cye-lm-tag">1, one, abcd<br> 2, two, abcd<br> 3, three, abcd<br> 4, four, abcd</p>
<p class="cye-lm-tag">If I added a new document `efgh` and it has the same keywords, I’d expect the table to have,</p>
<p class="cye-lm-tag">1, one, abcd<br> 2, two, abcd<br> 3, three, abcd<br> 4, four, abcd<br> 5, one, efgh<br> 6, two, efgh<br> 7, three, efgh<br> 8, four, efgh</p>
<p class="cye-lm-tag">I can’t figure out the primary keys or constraints for this scenario. I was thinking the keywords table could have a unique constraint on `docid` and `text` and both be primary keys.</p>
</div> </div><ul class="children"><li class="comment even depth-4" id="comment-270111"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">WS</span>  <span class="comment_date cye-lm-tag">August 15, 2013, 19:02</span></div><div class="comment_text" id="comment-body-270111"><p class="cye-lm-tag">Something I just realized might not be handled automatically is if we remove keywords from a document.</p>
</div> </div></li><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-4" id="comment-270115"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">August 15, 2013, 19:45</span></div><div class="comment_text" id="comment-body-270115"><p class="cye-lm-tag">I assume that you are not loading the document (and its keywords) from the database when you are updating it?</p>
<p class="cye-lm-tag">Because the <code>Keyword</code> objects of your document are transient, new rows are added to the database.</p>
<p class="cye-lm-tag">You don’t get duplicate documents because the your <code>Document</code> has a <em>docid</em> (I assume that you read it from the XML file). The repository implementation notices this and calls the <code>merge()</code> method of the <code>EntityManager</code> class instead of the <code>persist()</code> method.</p>
<p class="cye-lm-tag">I recommend that you you follow this approach (inside a read-write transaction):</p>
<ol><li>Load <code>Document</code> object from the database.</li><li>If no document is found, save a new object.</li><li>If a document is found, update this object instead of saving the object which you created from the XML file.</li></ol></div> </div></li></ul></li></ul></li></ul></li><li class="comment even thread-odd thread-alt depth-1" id="comment-270123"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">WS</span>  <span class="comment_date cye-lm-tag">August 15, 2013, 21:48</span></div><div class="comment_text" id="comment-body-270123"><p class="cye-lm-tag">That sounds like a nice approach. One question before I get into that. On `Document` I have, @JoinColumn(name = “docid_fk”). Is there any way to make `docid_fk` and `text` both primary keys on `kywd_t` since `docid_fk` isn’t directly defined on `Keyword`?</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-270126"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">August 15, 2013, 23:06</span></div><div class="comment_text" id="comment-body-270126"><p class="cye-lm-tag">It is possible to use composite private keys with JPA 2. However, I would not use them unless it is absolutely necessary (they tend to make your code a bit complex). If you want to use a composite private key anyway, you should check out the following tutorials / websites:</p>
<ul><li><a href="http://uaihebert.com/?p=42" target="_blank" rel="nofollow">Tutorial JPA Composite Primary-Key</a></li><li><a href="http://stackoverflow.com/questions/6450780/jpa-composite-primary-key" target="_blank" rel="nofollow">JPA composite private key @ StackOverflow</a></li><li><a href="http://www.objectdb.com/java/jpa/entity/id#Composite_Primary_Key_" target="_blank" rel="nofollow">JPA Entity Private Key (Composite Primary Key)</a></li><li><a href="http://mprabhat.wordpress.com/2012/07/16/jpa-hibernate-embeddable-primary-key/" target="_blank" rel="nofollow">JPA, Hibernate Composite Embeddable Primary Key</a></li></ul><p class="cye-lm-tag">I hope that this answered to your question.</p>
</div> </div></li></ul></li><li class="comment even thread-even depth-1" id="comment-270129"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">WS</span>  <span class="comment_date cye-lm-tag">August 15, 2013, 23:34</span></div><div class="comment_text" id="comment-body-270129"><p class="cye-lm-tag">I’d rather not make it unnecessarily complex if possible. Seems many people agree with you too. Right now I’m tinkering with a @JoinTable but it has some issues as well.</p>
<p class="cye-lm-tag">In `Document`,</p>
<p class="cye-lm-tag">@OneToMany(cascade = CascadeType.ALL)<br> @JoinTable(<br> name = “mtdt_kywd_t”,<br> joinColumns = {<br> @JoinColumn(name=”docid”, referencedColumnName=”docid”, unique = true)<br> },<br> inverseJoinColumns = {<br> @JoinColumn(name=”text”, referencedColumnName=”text”)<br> }<br> )<br> @XmlPath(“head/meta/kb:keywords/kb:keyword”)<br> private Set keywords;</p>
<p class="cye-lm-tag">And in `Keyword`,</p>
<p class="cye-lm-tag">@OneToOne(cascade = CascadeType.ALL)<br> @JoinTable(<br> name = “mtdt_kywd_t”,<br> joinColumns = {<br> @JoinColumn(name=”text”, referencedColumnName=”text”, unique = true)<br> },inverseJoinColumns = {<br> @JoinColumn(name=”docid”, referencedColumnName=”docid”)<br> }<br> )<br> private Document document;</p>
<p class="cye-lm-tag">I don’t want to take anymore of your time, you’ve been most helpful. If/When I discover a solution I’ll report back. Thanks Petri.</p>
</div> </div></li><li class="comment odd alt thread-odd thread-alt depth-1" id="comment-270217"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">WS</span>  <span class="comment_date cye-lm-tag">August 16, 2013, 17:47</span></div><div class="comment_text" id="comment-body-270217"><p class="cye-lm-tag">Petri, been working on this for quite a while with a coworker and he figured it out yesterday afternoon. Here’s what we came up with.</p>
<p class="cye-lm-tag">On `Document` we have,</p>
<p class="cye-lm-tag"> @OneToMany(cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.EAGER)<br> @OrderColumn<br> @JoinColumn(name = “docid”)<br> @XmlPath(“head/meta/kb:keywords/kb:keyword”)<br> private Set keywords;</p>
<p class="cye-lm-tag">On `Keyword` we have an auto-generated id now,</p>
<p class="cye-lm-tag"> @Id<br> @GeneratedValue(strategy = GenerationType.AUTO)<br> @XmlTransient<br> private Long id;</p>
<p class="cye-lm-tag">and,</p>
<p class="cye-lm-tag"> @ManyToOne<br> @JoinColumn(name = “docid”, insertable = false, updatable = false)<br> @XmlTransient<br> private Document document;</p>
<p class="cye-lm-tag">Thanks again for the help.</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-270223"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">August 16, 2013, 18:47</span></div><div class="comment_text" id="comment-body-270223"><p class="cye-lm-tag">You are welcome! Also, it is great to hear that you could solve your problem.</p>
</div> </div></li></ul></li><li class="comment odd alt thread-even depth-1" id="comment-274845"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Vikas</span>  <span class="comment_date cye-lm-tag">September 26, 2013, 15:13</span></div><div class="comment_text" id="comment-body-274845"><p class="cye-lm-tag">Hello Petri,</p>
<p class="cye-lm-tag">First of all I want to thank you for your excellent work here.. you are simply great. you explained things very simply…. I worked in Spring , Hibernate projects in 2006 / 2007  after that I had to work in a middleware Microsoft Biztalk sever. But recently I started looking my old old skills and happened to find your articles.<br> I have some Questions to you. :-)</p>
<p class="cye-lm-tag">Do we have any tools that support following sequence of development?<br> 1. Develop Database tables and relationships first using any tool.<br> 2. Then based on those tables auto generate Java entity classes and Service for CRUD operations<br> 3. Then Auto Generate the Skeleton for the  controller classes.<br> 4. Then Auto generate Model/View for those CRUD operations.<br> 5. Then Build and Deploy.</p>
<p class="cye-lm-tag">My aim is to generate an initial working web application skeleton with  minimal or zero lines of java code manually. Later we can change and customize the auto generated code.</p>
<p class="cye-lm-tag">Is this Possible Using Eclipse latest version? If so would it be possible to post the minimal sequence of steps that need to perform to make a working skeleton of REST full java web app. I</p>
<p class="cye-lm-tag">Any help would be greatly appreciated.</p>
<p class="cye-lm-tag">Regards<br> Vikas</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-274866"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">September 26, 2013, 19:56</span></div><div class="comment_text" id="comment-body-274866"><p class="cye-lm-tag">You are welcome! I am happy to hear that I could help you get started again.</p>
<p class="cye-lm-tag">You might want to check out the following projects:</p>
<ul><li><a href="https://github.com/spring-projects/spring-boot" target="_blank" rel="nofollow">Spring Boot</a></li><li><a href="https://github.com/spring-projects/spring-roo" target="_blank" rel="nofollow">Spring Roo</a></li><li><a href="http://www.springfuse.com/" target="_blank" rel="nofollow">SpringFuse</a></li></ul><p class="cye-lm-tag">These are a bit different projects but they have the same goal: help you to get started as soon as possible.</p>
<p class="cye-lm-tag">Based on your questions, Spring Roo might be what you are looking for. I haven’t personally tried it out, but <a href="http://docs.spring.io/spring-roo/reference/html/" target="_blank" rel="nofollow">the reference manual of Spring Roo</a> looks quite promising.</p>
<p class="cye-lm-tag">Also, I think that <a href="http://www.hibernate.org/subprojects/tools.html" target="_blank" rel="nofollow">Hibernate Tools</a> can create domain model classes from an existing database.</p>
</div> </div></li></ul></li><li class="comment odd alt thread-odd thread-alt depth-1" id="comment-274932"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Vikas</span>  <span class="comment_date cye-lm-tag">September 27, 2013, 12:45</span></div><div class="comment_text" id="comment-body-274932"><p class="cye-lm-tag">Once again Thank you Petri .. I will explore these and see how fast we can develop<br> Vikas</p>
</div> </div></li><li class="comment even thread-even depth-1" id="comment-287578"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Katie</span>  <span class="comment_date cye-lm-tag">November 13, 2013, 22:44</span></div><div class="comment_text" id="comment-body-287578"><p class="cye-lm-tag">Petri, I followed your steps in this post to set up my repository.  But when I try to test it against real database, updated data wasn’t actually reflected in database unless I call save.  Any idea what could be the problem?</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-287587"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">November 13, 2013, 23:06</span></div><div class="comment_text" id="comment-body-287587"><p class="cye-lm-tag">Hi Katie,</p>
<p class="cye-lm-tag">One possible reason is that your code is not executed inside a read-write transaction. Have you annotated your service method with the <code>@Transactional</code> annotation?</p>
<p class="cye-lm-tag">The changes made to persistent objects should be updated back to the database as long as changes are made inside a read-write transaction. That is why you don’t have to call the <code>save()</code> method when you are updating information inside a read-write transaction.</p>
<p class="cye-lm-tag">Also, you might find want to read my blog post which talks about the <a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-integration-testing/" rel="nofollow">integration testing of Spring Data JPA repositories</a>.</p>
<p class="cye-lm-tag">If this didn’t solve your problem, please let me know. :)</p>
</div> </div></li></ul></li><li class="comment even thread-odd thread-alt depth-1" id="comment-287610"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Alicja</span>  <span class="comment_date cye-lm-tag">November 14, 2013, 01:44</span></div><div class="comment_text" id="comment-body-287610"><p class="cye-lm-tag">Petri,<br> I use your tutorial and it’s very helpful but in my application I have to use postgresql and I don’t know how to configure it. When I uncomment in your application parts about postgres (in pom and application.properties) it doesn’t work. I start app, got info:<br> ‘DEBUG – LogicalConnectionImpl      – Obtaining JDBC connection’<br> and nothing happens. Could you tell me what should I change to fix it?<br> Thanks,<br> Alicja</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-287823"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">November 14, 2013, 18:11</span></div><div class="comment_text" id="comment-body-287823"><p class="cye-lm-tag">If you want to use PostgreSQL, you have to make following changes to the example application:</p>
<ol><li>Remove the H2 database driver dependency from the <em>pom.xml</em> file.</li><li>Uncomment the PostgreSQL driver dependency found from the <em>pom.xml file.</em></li><li>Change the configuration found from the <em>application.properties</em> file.</li></ol><p class="cye-lm-tag">If you want to use PostgreSQL, the database and Hibernate configuration found from the <em>src/main/resources/application.properties</em> file looks as follows:</p>
<pre><code>
#Database Configuration
db.driver=db.driver=org.postgresql.Driver
db.url=jdbc:postgresql://localhost/datajpa
db.username=username
db.password=password

#Hibernate Configuration
hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
hibernate.format_sql=true
hibernate.hbm2ddl.auto=create-drop
hibernate.ejb.naming_strategy=org.hibernate.cfg.ImprovedNamingStrategy
hibernate.show_sql=true
</code>
</pre><p class="cye-lm-tag">I hope that this answered to your question.</p>
</div> </div><ul class="children"><li class="comment even depth-3" id="comment-1522114"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag"><a href="https://javatpoint10.blogspot.in/" rel="external nofollow" class="url">shahbaz</a></span>  <span class="comment_date cye-lm-tag">February 14, 2017, 20:06</span></div><div class="comment_text" id="comment-body-1522114"><p class="cye-lm-tag">Very good java tutorials for beginners</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-4" id="comment-1522298"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">February 15, 2017, 18:20</span></div><div class="comment_text" id="comment-body-1522298"><p class="cye-lm-tag">Thank you for your kind words. I really appreciate them.</p>
</div> </div></li></ul></li></ul></li></ul></li><li class="comment even thread-even depth-1" id="comment-297775"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">David</span>  <span class="comment_date cye-lm-tag">December 7, 2013, 16:03</span></div><div class="comment_text" id="comment-body-297775"><p class="cye-lm-tag">Great blog and tutorials!  How do you handle entities that have a lot of properties (5 or more)?  The update method’s parameter list gets too large in these cases and it seems having setters would be a bit cleaner.</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-299024"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">December 8, 2013, 22:29</span></div><div class="comment_text" id="comment-body-299024"><p class="cye-lm-tag">Thank your for your kind words. I really appreciate them.</p>
<p class="cye-lm-tag">You are absolutely right. If entities have a lot of properties, having a single update method is not practical. Typically I separate the properties into value objects (e.g. <code>Address</code> and so on) and create a separate update method per value object.</p>
<p class="cye-lm-tag">On other hand, if the properties are entities, I try to follow a pattern called <a href="http://martinfowler.com/bliki/DDD_Aggregate.html" target="_blank" rel="nofollow">aggregate</a>. At the moment it seems to make perfect sense to me but I might change my mind after a few years or so (this happens).</p>
<p class="cye-lm-tag">I hope that you find this answer useful.</p>
</div> </div></li></ul></li><li class="comment even thread-odd thread-alt depth-1" id="comment-340454"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag"><a href="http://www.edwardbeckett.com" rel="external nofollow" class="url">Edward Beckett</a></span>  <span class="comment_date cye-lm-tag">January 20, 2014, 04:12</span></div><div class="comment_text" id="comment-body-340454"><p class="cye-lm-tag">@Petri … Awesome Job … As Expected… ;-)</p>
<p class="cye-lm-tag">FYI … Running a modified version of this on Glassfish required me to implement Serializable on the DTO or I was getting Invalid Attribute errors …. FWIW …</p>
<p class="cye-lm-tag">Great Job Chief!!!</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-341239"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">January 20, 2014, 18:06</span></div><div class="comment_text" id="comment-body-341239"><p class="cye-lm-tag">Thank you for you kind words. I really appreciate them.</p>
<p class="cye-lm-tag">Also, thanks for leaving a note regarding the Glassfish &amp; Serializable problem. Maybe It will be useful to someone.</p>
</div> </div></li></ul></li><li class="comment even thread-even depth-1" id="comment-362064"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">varun</span>  <span class="comment_date cye-lm-tag">February 11, 2014, 17:22</span></div><div class="comment_text" id="comment-body-362064"><p class="cye-lm-tag">Hi Petri<br> I have three entities like below</p>
<p class="cye-lm-tag">1. CompanyInfo</p>
<pre><code>
@Entity
public class CompanyInfo {
	@Id
	@GeneratedValue
	private long companyId;
	private String companyName;

	@OneToMany(mappedBy = "companyInfo")
	private Collection userInfos = new ArrayList();
}
</code>
</pre><p class="cye-lm-tag">2. UserInfo</p>
<pre><code>
@Entity
public class UserInfo {
	@Id
	@GeneratedValue
	private long userId;
	private String userName;

	@ManyToOne
	@JoinColumn(name = "COMPANY_ID")
	private CompanyInfo companyInfo;        

	@ManyToMany
	@JoinTable(name = "USER_ROLES", 
			joinColumns = @JoinColumn(name = "USER_ID"), 
			inverseJoinColumns = @JoinColumn(name = "ROLE_ID")
	)
	private Collection roles = new ArrayList();
}
</code>
</pre><p class="cye-lm-tag">3. Roles</p>
<pre><code>
@Entity
public class Roles {
	@Id
	@GeneratedValue
	private long roleId;

	private String roleName;
        
	@ManyToMany(mappedBy = "roles")
	private UserInfo userInfo;
	
	private List userInfos = new ArrayList();
}
</code>
</pre><p class="cye-lm-tag">and created the repositories for the above three entities now I want to query using hibernate relations like</p>
<p class="cye-lm-tag">In CompanyInfoRepository</p>
<p class="cye-lm-tag">1. I have userId and I want get the user companyInfo. we can get using two ways, one is from UserInfoRepository table which is straight forward and the other is from companyInfo table. Now the problem is I tried to query from CompanyInfoRepository but didn’t succeeded.</p>
<pre><code>
@query("select c from CompanyInfo c where :userId IN c.userInfo.id ")
List findByUserId(@param("userId") long userId);
</code>
</pre><p class="cye-lm-tag">I kept :userID for the argument and I used “IN” because in companyInfo UserInfos is a list</p>
<p class="cye-lm-tag">In UserInfoRepository</p>
<p class="cye-lm-tag">similary I have roleId and I want query it from UserInfoRepository(relation between UserInfo and Roles is ManyToMany) and here also I am getting error , I have userId and want to query from Roles table</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-362245"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">February 11, 2014, 21:28</span></div><div class="comment_text" id="comment-body-362245"><p class="cye-lm-tag">Hi Varun,</p>
<p class="cye-lm-tag">Have you tried using inner join instead of the IN expression? Here is an example JPQL query which uses inner join (you can use the same approach for getting the users which have a specific role):</p>
<pre><code>
@query("SELECT DISTINCT c from CompanyInfo c INNER JOIN c.userInfos u where u.id=:userId")
List findByUserId(@param("userId") long userId);
</code>
</pre></div> </div></li></ul></li><li class="comment even thread-odd thread-alt depth-1" id="comment-367213"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Nikhil Bhalwankar</span>  <span class="comment_date cye-lm-tag">February 17, 2014, 10:37</span></div><div class="comment_text" id="comment-body-367213"><p class="cye-lm-tag">Hi Petri,</p>
<p class="cye-lm-tag">First of all, thanks a lot for such a nice tutorial. I am learning JPA and your tutorials are really helpful. As a matter of study, I have tried creating a maven project using the example you have given above through eclipse and then added JPA and JSF facets to the project. The necessary jar files are in place. My problem is whenever I call inbuilt methods findOne(), findAll(), save() etc of the JPARepository, It throws Null Pointer Exception. I am stuck up at this point.</p>
<p class="cye-lm-tag">I have uploaded my project files on dropbox public folder and sharing the same here. Kindly help me on this.</p>
<p class="cye-lm-tag">Entity:- Person.java<br> <a href="https://dl.dropboxusercontent.com/u/16250517/JPA%20Project/Person.java" rel="nofollow">https://dl.dropboxusercontent.com/u/16250517/JPA%20Project/Person.java</a></p>
<p class="cye-lm-tag">Repository:- PersonRepository.java (This extends JPARepository)<br> <a href="https://dl.dropboxusercontent.com/u/16250517/JPA%20Project/PersonRepository.java" rel="nofollow">https://dl.dropboxusercontent.com/u/16250517/JPA%20Project/PersonRepository.java</a></p>
<p class="cye-lm-tag">Service:- PersonService.java<br> <a href="https://dl.dropboxusercontent.com/u/16250517/JPA%20Project/PersonService.java" rel="nofollow">https://dl.dropboxusercontent.com/u/16250517/JPA%20Project/PersonService.java</a></p>
<p class="cye-lm-tag">Service Implementation:- RepositoryPersonService.java<br> <a href="https://dl.dropboxusercontent.com/u/16250517/JPA%20Project/RepositoryPersonService.java" rel="nofollow">https://dl.dropboxusercontent.com/u/16250517/JPA%20Project/RepositoryPersonService.java</a></p>
<p class="cye-lm-tag">Transfer Object:- PersonDTO.java<br> <a href="https://dl.dropboxusercontent.com/u/16250517/JPA%20Project/PersonDTO.java" rel="nofollow">https://dl.dropboxusercontent.com/u/16250517/JPA%20Project/PersonDTO.java</a></p>
<p class="cye-lm-tag">UI:- PersonController.java<br> <a href="https://dl.dropboxusercontent.com/u/16250517/JPA%20Project/PersonController.java" rel="nofollow">https://dl.dropboxusercontent.com/u/16250517/JPA%20Project/PersonController.java</a></p>
<p class="cye-lm-tag">Webpage:- index.xhtml<br> <a href="https://dl.dropboxusercontent.com/u/16250517/JPA%20Project/index.xhtml" rel="nofollow">https://dl.dropboxusercontent.com/u/16250517/JPA%20Project/index.xhtml</a></p>
<p class="cye-lm-tag">Also attached pom.xml, persistence.xml, applicationContext.xml, faces-config.xml and web.xml for reference.<br> <a href="https://dl.dropboxusercontent.com/u/16250517/JPA%20Project/pom.xml" rel="nofollow">https://dl.dropboxusercontent.com/u/16250517/JPA%20Project/pom.xml</a><br> <a href="https://dl.dropboxusercontent.com/u/16250517/JPA%20Project/applicationContext.xml" rel="nofollow">https://dl.dropboxusercontent.com/u/16250517/JPA%20Project/applicationContext.xml</a><br> <a href="https://dl.dropboxusercontent.com/u/16250517/JPA%20Project/faces-config.xml" rel="nofollow">https://dl.dropboxusercontent.com/u/16250517/JPA%20Project/faces-config.xml</a><br> <a href="https://dl.dropboxusercontent.com/u/16250517/JPA%20Project/web.xml" rel="nofollow">https://dl.dropboxusercontent.com/u/16250517/JPA%20Project/web.xml</a><br> <a href="https://dl.dropboxusercontent.com/u/16250517/JPA%20Project/persistence.xml" rel="nofollow">https://dl.dropboxusercontent.com/u/16250517/JPA%20Project/persistence.xml</a></p>
<p class="cye-lm-tag">Thanks in Advance,<br> Nikhil</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-367482"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">February 17, 2014, 20:09</span></div><div class="comment_text" id="comment-body-367482"><p class="cye-lm-tag">Hi Nikhil,</p>
<p class="cye-lm-tag">Thank you for your kind words. I really appreciate them.</p>
<p class="cye-lm-tag">I have never used JSF so I have no idea how you can use Spring beans in an application which uses JSF. However, I did find this blog post which describes how you can <a href="http://murygin.wordpress.com/2013/08/29/integrate-spring-jsf/" target="_blank" rel="nofollow">use Spring in web applications that use JSF 2</a>. Maybe it will help you to solve your problem.</p>
</div> </div><ul class="children"><li class="comment even depth-3" id="comment-369050"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Nikhil Bhalwankar</span>  <span class="comment_date cye-lm-tag">February 20, 2014, 15:34</span></div><div class="comment_text" id="comment-body-369050"><p class="cye-lm-tag">Hi Petri,</p>
<p class="cye-lm-tag">Thanks for the link. I will go through the same. Meanwhile, I tried to find the mistake from my side and it looks like the repository is not getting initialized. So, it looks like the methods are not throwing NullPointer but the repository is. Is there any way to check whether repository is initialized or not? Please let me know.</p>
<p class="cye-lm-tag">Thanks in Advance,<br> Nikhil</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-4" id="comment-369210"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">February 20, 2014, 20:47</span></div><div class="comment_text" id="comment-body-369210"><p class="cye-lm-tag">Hi Nikhil,</p>
<p class="cye-lm-tag">Unfortunately I don’t know if it is possible to detect this in a JSF application. In a Spring application <a href="http://www.baeldung.com/spring-beancreationexception" target="_blank" rel="nofollow">the Spring container throws an exception if it cannot create a bean</a>.</p>
</div> </div></li></ul></li></ul></li></ul></li><li class="comment even thread-even depth-1" id="comment-368977"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Akalanka</span>  <span class="comment_date cye-lm-tag">February 20, 2014, 12:45</span></div><div class="comment_text" id="comment-body-368977"><p class="cye-lm-tag">Hi Petri,</p>
<p class="cye-lm-tag">I am totally new to spring mvc. Currently i am working with struts 2, spring and hibernate with Model driven. I see too many classes here to do CRUD operations. The way i use i have one struts layer class and one service layer class and the domain object class(Entity) and the DAO class. I feel like some kind of messy here. Please don’t  misunderstand me. I just need to learn the technology with a good design pattern. :)</p>
</div> </div></li><li class="comment odd alt thread-odd thread-alt depth-1" id="comment-377357"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Dean</span>  <span class="comment_date cye-lm-tag">March 5, 2014, 02:22</span></div><div class="comment_text" id="comment-body-377357"><p class="cye-lm-tag">I’m trying to run your application with Postgres however it fails with the following stacktrace:</p>
<p class="cye-lm-tag">Caused by:<br> org.springframework.beans.factory.BeanCreationException: Error creating bean with name ‘entityManagerFactoryBean’ defined in class net.petrikainulaine<br> n.spring.datajpa.config.ApplicationContext: Instantiation of bean failed; nested exception is org.springframework.beans.factory.BeanDefinitionStoreExc<br> eption: Factory method [public org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean net.petrikainulainen.spring.datajpa.config.Applicati<br> onContext.entityManagerFactoryBean() throws java.lang.ClassNotFoundException] threw exception; nested exception is java.lang.IllegalStateException: re<br> quired key [hibernate.hbm2ddl.auto] not found</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-379679"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">March 6, 2014, 22:24</span></div><div class="comment_text" id="comment-body-379679"><p class="cye-lm-tag">Did you make any changes to the example application? The reason why I am asking this is that the error message suggests that the property <code>hibernate.hbm2ddl.auto</code> was not found.</p>
<p class="cye-lm-tag">This property is found from the <a href="https://github.com/pkainulainen/spring-data-jpa-examples/blob/master/query-methods/src/main/resources/application.properties" target="_blank" rel="nofollow"><em>application.properties</em></a> file and the <a href="https://github.com/pkainulainen/spring-data-jpa-examples/blob/master/query-methods/src/main/java/net/petrikainulainen/springdata/jpa/config/PersistenceContext.java" target="_blank" rel="nofollow"><code>PersistenceContext</code></a> class sets the Hibernate properties to the <code>LocalContainerEntityManagerFactoryBean</code>.</p>
<p class="cye-lm-tag">If you didn’t change anything, let me know so that I can investigate this issue.</p>
<p class="cye-lm-tag">Also, thank you for asking this question. It helped me to notice that this wasn’t mentioned in the <a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-part-one-configuration/" rel="nofollow">first part of my Spring Data JPA tutorial</a>. I think that I will have to update that blog post next week.</p>
</div> </div></li></ul></li><li class="comment odd alt thread-even depth-1" id="comment-389615"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Jim</span>  <span class="comment_date cye-lm-tag">March 13, 2014, 23:30</span></div><div class="comment_text" id="comment-body-389615"><p class="cye-lm-tag">Hi Petri:</p>
<p class="cye-lm-tag">Your blog is amazing .. honestly.  Your examples are very pertinent and useful – thanks!</p>
<p class="cye-lm-tag">I have a question about this example.  I’m also going to pull down your github example on this and test out your code with this scenario.</p>
<p class="cye-lm-tag">You use ‘version’ and the annotation, but you don’t set the version in your DTO and you don’t set it in your Builder classes.  Why?  Doesn’t this mean that version (i.e. optimistic locking) is therefore being ignored?</p>
<p class="cye-lm-tag">In my application, if I use findOne and do not detach I am able to save Entities that ‘violate’ the version property (i.e. second version overwrites first).  If I use findOne and then detach and update, I get the update…. OR if I create a brand new Entity and set the ID in (if it existed) and then save I also get the Optimistic Locking Exception.</p>
<p class="cye-lm-tag">So I’m curious why you don’t have a version property in your DTO and how your example would work with optimistic locking otherwise?</p>
<p class="cye-lm-tag">I’ve also read your book and in your chapter on this you do not manage Version there either.</p>
<p class="cye-lm-tag">Thanks!!<br> Jim</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-389666"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">March 14, 2014, 00:26</span></div><div class="comment_text" id="comment-body-389666"><p class="cye-lm-tag">Hi Jim,</p>
<p class="cye-lm-tag">Thank you for your kind words. I really appreciate them!</p>
<p class="cye-lm-tag">About your question: The optimistic locking isn’t handled properly in this blog post (or in my book) because handling it isn’t really a Spring Data JPA specific issue. Another reason why I decided to not handle it was that it keeps the code a bit cleaner. Now that I think about this, I should have probably mentioned this in the book. :(</p>
<p class="cye-lm-tag">Like you said, the ideal way to handle this is to put the version field to the DTO and check its value in the service method before updating the information of the entity. If you use this approach, you can decide how you should handle this. You can either overwrite the information or ask user to decide what to do.</p>
<p class="cye-lm-tag">Also, like you suspected, the optimistic locking is ignored if other transactions haven’t changed the data when the current transaction is committed (this is the typical case). If other transactions have modified the data when the current transaction is committed, an <code>OptimisticLockException</code> is thrown and the current transaction is rolled back (this is a rare situation but it can happen).</p>
</div> </div><ul class="children"><li class="comment odd alt depth-3" id="comment-394927"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Jim</span>  <span class="comment_date cye-lm-tag">March 17, 2014, 18:44</span></div><div class="comment_text" id="comment-body-394927"><p class="cye-lm-tag">Thanks for the confirmation Petri.</p>
<p class="cye-lm-tag">Makes perfect sense to me, it’s funny that most examples use the @Version but I haven’t really seen 1 example that discusses the implications of this if you are going to use a DTO based approach, maybe b/c most examples assume the entity will be surfaced at all tiers.</p>
<p class="cye-lm-tag">Which brings me to another question I wonder if you know the answer to.  The key to the above approach working is either detaching the object PRIOR to copying any edits from the DTO class OR creating a new entity (detached) and then setting the primary key id into it .. which essentially is the same result (i.e. the JPA figures out what the row is and updates it accordingly).</p>
<p class="cye-lm-tag">What I don’t understand is WHY the entity needs to be detached for the updates to work?  I would have thought the end result was the same, but I’m obviously missing something.</p>
<p class="cye-lm-tag">Any insight appreciated.  Thanks again!<br> Jim</p>
</div> </div></li><li class="comment even depth-3" id="comment-902145"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag"><a href="http://sayemdb.wordpress.com" rel="external nofollow" class="url">Sayem Ahmed</a></span>  <span class="comment_date cye-lm-tag">October 22, 2014, 06:12</span></div><div class="comment_text" id="comment-body-902145"><p class="cye-lm-tag">Hi Petri,</p>
<p class="cye-lm-tag">Regarding optimistic locking, what will happen if I just put the Version annotation in my entity and do not check for its value in the service layer? Should it throw an OptimisticLockException automatically?<br> Also I was wondering about the locking mechanism implemented by JPA providers and the locking mechanism provided by the databases (i.e., in MySQL the “lock tables …” command). Does the optimistic locking need any table locking permission for the underlying database?</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-4" id="comment-904693"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">October 22, 2014, 20:34</span></div><div class="comment_text" id="comment-body-904693"><p class="cye-lm-tag">Hi Sayem,</p>
<blockquote><p class="cye-lm-tag">Regarding optimistic locking, what will happen if I just put the Version annotation in my entity and do not check for its value in the service layer? Should it throw an OptimisticLockException automatically?</p>
</blockquote><p class="cye-lm-tag">Yes. The Javadoc of the <a href="http://docs.oracle.com/javaee/6/api/javax/persistence/OptimisticLockException.html" target="_blank" rel="nofollow"><code>OptimisticLockException</code></a> class states that:</p>
<p class="cye-lm-tag"><em>“Thrown by the persistence provider when an optimistic locking conflict occurs. This exception may be thrown as part of an API call, a flush or at commit time. The current transaction, if one is active, will be marked for rollback.”</em></p>
<blockquote><p class="cye-lm-tag">Also I was wondering about the locking mechanism implemented by JPA providers and the locking mechanism provided by the databases (i.e., in MySQL the “lock tables …” command). Does the optimistic locking need any table locking permission for the underlying database?</p>
</blockquote><p class="cye-lm-tag"><a href="http://vladmihalcea.com/" target="_blank" rel="nofollow">Vlad Mihalcea</a> has written three great blog posts that answer to your question better than I ever could. These blog posts are:</p>
<ul><li><a href="http://vladmihalcea.com/2014/09/14/a-beginners-guide-to-database-locking-and-the-lost-update-phenomena/" target="_blank" rel="nofollow">A beginner’s guide to database locking and the lost update phenomena</a></li><li><a href="http://vladmihalcea.com/2014/09/22/preventing-lost-updates-in-long-conversations/" target="_blank" rel="nofollow">Preventing lost updates in long conversations</a></li><li><a href="http://vladmihalcea.com/2014/10/03/logical-vs-physical-clock-optimistic-locking/" target="_blank" rel="nofollow">Logical vs physical clock optimistic locking</a></li></ul></div> </div></li></ul></li></ul></li></ul></li><li class="comment even thread-odd thread-alt depth-1" id="comment-403182"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">gowtham</span>  <span class="comment_date cye-lm-tag">March 22, 2014, 16:56</span></div><div class="comment_text" id="comment-body-403182"><p class="cye-lm-tag">Hi Petri,<br> An awesome work, thanks for it and am using spring-data-dynamodb and I used annotation based confuguration and for validation is it possible to configure through annotation at present. Am struggling in that phase because am entirely new to spring environment. If its possible please guide me with a good link/sample to go through in it.</p>
</div> </div></li><li class="comment odd alt thread-even depth-1" id="comment-421845"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Ron C</span>  <span class="comment_date cye-lm-tag">April 1, 2014, 17:26</span></div><div class="comment_text" id="comment-body-421845"><p class="cye-lm-tag">Overall like the article but I think tests should be the first step not the last step. Write a failing test that does what you expect users to do then build the bare minimum you need to pass it, rinse and repeat. It will help stop things such as scope creep and adding in code that is not needed.</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-421867"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">April 1, 2014, 17:52</span></div><div class="comment_text" id="comment-body-421867"><p class="cye-lm-tag">I agree that TDD is very useful design tool but I am not sure if the test first approach works very well in tutorials (unless you are writing a TDD tutorial). However, I think that I might use this approach when I write my testing book.</p>
</div> </div></li></ul></li><li class="comment odd alt thread-odd thread-alt depth-1" id="comment-495465"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Ravi</span>  <span class="comment_date cye-lm-tag">April 22, 2014, 14:59</span></div><div class="comment_text" id="comment-body-495465"><p class="cye-lm-tag">Thank you for your tutorial and codes. I find it very useful as I feel my way around JPA for my project.</p>
<p class="cye-lm-tag">I have one question.</p>
<p class="cye-lm-tag">My understanding is that,</p>
<p class="cye-lm-tag">methods like create, delete in PersonService (implemented by RepositoryPersonService) use a PersonRepository instance to save to the database using the JpaRepository commands (save and delete)</p>
<p class="cye-lm-tag">However, the update method only calls person.update. The value of the instance will be updated, but am i right i saying that the changes wont be written to the database?</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-496946"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">April 22, 2014, 21:16</span></div><div class="comment_text" id="comment-body-496946"><p class="cye-lm-tag">The reason why you don’t have to call the <code>save()</code> method when you are updating the information of  a <code>Person</code> object is that the object is in <code>managed / persisted</code> state, and the changes made to this object are automatically saved to the database when the transaction is committed.</p>
<p class="cye-lm-tag">If you want to get more information about this, you should read the <a href="http://docs.jboss.org/hibernate/orm/4.0/devguide/en-US/html/ch03.html" target="_blank" rel="nofollow">Chapter 3. Persistence Contexts</a> of the Hibernate reference manual.</p>
</div> </div><ul class="children"><li class="comment odd alt depth-3" id="comment-499382"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Ravi</span>  <span class="comment_date cye-lm-tag">April 23, 2014, 08:18</span></div><div class="comment_text" id="comment-body-499382"><p class="cye-lm-tag">Thank you for your prompt reply. You explanation helped.</p>
</div> </div></li></ul></li></ul></li><li class="comment even thread-even depth-1" id="comment-539491"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Nikhil Agrawal</span>  <span class="comment_date cye-lm-tag">May 1, 2014, 17:56</span></div><div class="comment_text" id="comment-body-539491"><p class="cye-lm-tag">Hi Petri,<br> The your tutorial seem to be very helpful for me as I am new to learn Spring Data JPA.<br> Please with me so that I can do well.<br> All the Best and thans for precious guidance.</p>
<p class="cye-lm-tag">Nikhil Agrawal</p>
</div> </div></li><li class="comment odd alt thread-odd thread-alt depth-1" id="comment-723998"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Boris</span>  <span class="comment_date cye-lm-tag">July 9, 2014, 20:24</span></div><div class="comment_text" id="comment-body-723998"><p class="cye-lm-tag">I got lost, how to config DB connection? Which file do I need? Which driver?</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-724010"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">July 9, 2014, 20:37</span></div><div class="comment_text" id="comment-body-724010"><p class="cye-lm-tag">The <a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-part-one-configuration/" rel="nofollow">first part</a> of this tutorial describes how you can configure Spring Data JPA. Remember that you can get rid off the XML configuration by using the <code>@EnableJpaRepositories</code> annotation (this tutorial was published before it was possible to use that annotation).</p>
</div> </div><ul class="children"><li class="comment odd alt depth-3" id="comment-725515"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Gaurav Dighe</span>  <span class="comment_date cye-lm-tag">July 11, 2014, 08:57</span></div><div class="comment_text" id="comment-body-725515"><p class="cye-lm-tag">I have fair knowledge on Spring -DI and Hibernate with JPA. I need to know, who create entity bean/object. Is it repository or service?<br> I just tried calling ${person.name} in my JSP page. It worked. therefore, I have this question.</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-4" id="comment-725545"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">July 11, 2014, 09:52</span></div><div class="comment_text" id="comment-body-725545"><blockquote><p class="cye-lm-tag"> I need to know, who create entity bean/object. Is it repository or service?</p>
</blockquote><p class="cye-lm-tag">There are two answers to this question:</p>
<ul><li>When the example application creates a new entity object, the object is created by the service class but it becomes <em>persistent / managed</em> when the <code>save()</code> method of the <code>PersonRepository</code> interface is invoked.</li><li>When the example application finds an entity object from the database, Hibernate fetches the requested information from the database, creates a new entity object, and populates its properties by using the information found from the database.</li></ul><p class="cye-lm-tag">The following articles will shed more light to the entity life cycle:</p>
<ul><li><a href="http://www.objectdb.com/java/jpa/persistence/managed" target="_blank" rel="nofollow">Working with JPA Entity Objects</a></li><li><a href="http://learningviacode.blogspot.fi/2012/02/hibernate-object-life-cycle.html" target="_blank" rel="nofollow">The Hibernate Object Life-Cycle</a></li></ul></div> </div></li></ul></li></ul></li></ul></li><li class="comment odd alt thread-even depth-1" id="comment-725626"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Francois</span>  <span class="comment_date cye-lm-tag">July 11, 2014, 12:31</span></div><div class="comment_text" id="comment-body-725626"><p class="cye-lm-tag">Hi Petri,</p>
<p class="cye-lm-tag">I really appreciate your blog and those are great tutorials.<br> I’m facing the following in my current project:</p>
<p class="cye-lm-tag">I have 2 entities Process and SubProcess. Those are split for a reason and cannot be merged. Although I want to display them in one single paged grid on the ui.</p>
<p class="cye-lm-tag">I was thinking to create a repository that would extend both repositories I already have for the process and subProcess. (So infine create a superRepo). My question is the following: would the find All(Pageable) of that superRepo get the findAll of both extended repositories?<br> If not what would be the direction I should go?</p>
<p class="cye-lm-tag">thanks in advance</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-725894"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">July 11, 2014, 19:41</span></div><div class="comment_text" id="comment-body-725894"><p class="cye-lm-tag">To be honest, I don’t know the answer to your question.</p>
<p class="cye-lm-tag">Could you tell a bit more about the relationship of the <code>Process</code> and <code>SubProcess</code> classes? If they are totally “separate” entities, it is hard to see how the super repository could work because it should support two entities and afaik this is not possible (without using inheritance).</p>
</div> </div><ul class="children"><li class="comment odd alt depth-3" id="comment-727838"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Francois</span>  <span class="comment_date cye-lm-tag">July 14, 2014, 10:11</span></div><div class="comment_text" id="comment-body-727838"><p class="cye-lm-tag">Hello Petri,</p>
<p class="cye-lm-tag">Thanks for your prompt answer. Yes they are completely separate entites. I guess I’ll solve this with displaying 2 grids instead of one. Out of curiosity I’d be interested on how you would imagine solving it with inheritance, because at the moment I don’t see how.</p>
<p class="cye-lm-tag">Thanks in advance</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-4" id="comment-727865"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">July 14, 2014, 10:59</span></div><div class="comment_text" id="comment-body-727865"><blockquote><p class="cye-lm-tag">Out of curiosity I’d be interested on how you would imagine solving it with inheritance, because at the moment I don’t see how.</p>
</blockquote><p class="cye-lm-tag">I cannot see it either. I just wondered if the <code>SubProcess</code> extends the <code>Process</code> class.</p>
<p class="cye-lm-tag">The reason I mentioned inheritance was that you can actually create a repository for a super class and obtain all sub class objects (regardless of their type) by using its <code>findAll()</code> method.</p>
<p class="cye-lm-tag">If I would have to solve this problem, I would probably follow these steps:</p>
<ol><li>Create a DTO which contains the information shown in a single row.</li><li>Add a custom method to my repository and fetch the information of all rows. This method can return either a <code>List&lt;DTO&gt;</code> or <code>Page&lt;DTO&gt;</code> object (if you need pagination meta data, return <code>Page</code> object). I would probably implement this method by using JDBC because Spring Data JPA doesn’t have a very good support for querying DTOs (it is possible but the support is a bit awkward).</li><li>Show the results on the user interface.</li></ol><p class="cye-lm-tag">Do you think that this could work?</p>
</div> </div><ul class="children"><li class="comment odd alt depth-5" id="comment-733810"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Francois</span>  <span class="comment_date cye-lm-tag">July 21, 2014, 16:51</span></div><div class="comment_text" id="comment-body-733810"><p class="cye-lm-tag">Hello,</p>
<p class="cye-lm-tag">Thanks for your answer, yes this seems to work, and yes the spring data queriying of a DTO is ackward. Now I just need to convince my TA that this is the solution :)</p>
</div></div></li><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-5" id="comment-733905"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">July 21, 2014, 18:35</span></div><div class="comment_text" id="comment-body-733905"><p class="cye-lm-tag">Hi Francois,</p>
<p class="cye-lm-tag">Does TA mean technical architect?</p>
<p class="cye-lm-tag">Anyway, you can probably convince this person by arguing that this is the most efficient (in terms of performance) and the cleanest way to do this.</p>
<p class="cye-lm-tag">My second point is of course a matter of opinion, but if you need to show everything in the same table, it is hard to figure out another solution which would be cleaner than this solution.</p>
</div></div></li></ul></li></ul></li></ul></li></ul></li><li class="comment odd alt thread-odd thread-alt depth-1" id="comment-727430"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Boris</span>  <span class="comment_date cye-lm-tag">July 13, 2014, 19:54</span></div><div class="comment_text" id="comment-body-727430"><p class="cye-lm-tag">I got<br> Description	Resource	Path	Location	Type<br> The import org.apache.commons.lang cannot be resolved	Person.java	/data-jpa-tutorial-part-one/src/main/java	line 3	Java Problem.<br> Can’t download it by maven. Temporary I download it from the site not I am looking more clean way.<br> What’s wrong here?</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-727443"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">July 13, 2014, 20:18</span></div><div class="comment_text" id="comment-body-727443"><p class="cye-lm-tag">You need to add the commons-lang to your <em>pom.xml</em> file. The example application of this blog post uses version 2.6 (<a href="https://github.com/pkainulainen/spring-data-jpa-examples/blob/master/tutorial-part-two/pom.xml" target="_blank" rel="nofollow">see the <em>pom.xml</em> file</a>), but <a href="http://mvnrepository.com/artifact/org.apache.commons/commons-lang3/3.3.2" target="_blank" rel="nofollow">the newest available version is 3.3.2</a>.</p>
<p class="cye-lm-tag">You mentioned that you cannot download it by using Maven. What do you mean?</p>
</div> </div></li></ul></li><li class="comment odd alt thread-even depth-1" id="comment-727439"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Boris</span>  <span class="comment_date cye-lm-tag">July 13, 2014, 20:11</span></div><div class="comment_text" id="comment-body-727439"><p class="cye-lm-tag">The same problem<br> Description	Resource	Path	Location	Type<br> The import org.hibernate.validator.constraints.NotEmpty cannot be resolved	PersonDTO.java	/data-jpa-tutorial-part-one/src/main/java	line 2	Java Problem</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-727445"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">July 13, 2014, 20:20</span></div><div class="comment_text" id="comment-body-727445"><p class="cye-lm-tag">You need to add hibernate-validator to your <em>pom.xml</em> file. The example application uses version 4.2.0.Final. See its <a href="https://github.com/pkainulainen/spring-data-jpa-examples/tree/master/query-methods/pom.xml" target="_blank" rel="nofollow"><em>pom.xml</em> file</a> for more details about this.</p>
</div> </div></li></ul></li><li class="comment odd alt thread-odd thread-alt depth-1" id="comment-730508"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Boris</span>  <span class="comment_date cye-lm-tag">July 17, 2014, 15:11</span></div><div class="comment_text" id="comment-body-730508"><p class="cye-lm-tag">Hi Perti,<br> Thanks  it works, there is  one more question how can I use it with spring version 4.<br> Just update pom.xml? How?</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-730576"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">July 17, 2014, 17:27</span></div><div class="comment_text" id="comment-body-730576"><p class="cye-lm-tag">Well,</p>
<p class="cye-lm-tag">you should probably update all dependency versions since some of them are very old (Spring and Spring Data JPA to mention a few).</p>
<p class="cye-lm-tag">If you are working on a greenfield project, I recommend that you take a look at the <a href="http://spring.io/platform" target="_blank" rel="nofollow">Spring IO platform</a>. Its goal is to make dependency management easier for developers by providing a POM file which contains the dependency versions which are known to work.</p>
<p class="cye-lm-tag">If you want get more information about the Spring IO Platform, <a href="http://docs.spring.io/platform/docs/1.0.1.RELEASE/reference/htmlsingle/" target="_blank" rel="nofollow">you should read its reference manual</a>.</p>
</div> </div></li></ul></li><li class="comment odd alt thread-even depth-1" id="comment-730571"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Boris</span>  <span class="comment_date cye-lm-tag">July 17, 2014, 17:16</span></div><div class="comment_text" id="comment-body-730571"><p class="cye-lm-tag">It works thanks, In additional I like to use spring 4.xx with  jdk 7 not 8.0  which changes requires?</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-730581"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">July 17, 2014, 17:33</span></div><div class="comment_text" id="comment-body-730581"><p class="cye-lm-tag">The configuration of the Maven compiler plugin sets the “version” of the source code and the “version” of the byte code. You should change this version from ‘1.6’ to ‘1.7.’ (search for the <code>source</code> and <code>target</code> elements).</p>
</div> </div><ul class="children"><li class="comment odd alt depth-3" id="comment-732211"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Boris</span>  <span class="comment_date cye-lm-tag">July 19, 2014, 23:09</span></div><div class="comment_text" id="comment-body-732211"><p class="cye-lm-tag">Thanks again, In additional I miss how JpaRepository interface knows on which DB connec<br> useful, I mean “who” realize something like  repository.setConnection(mycon) or repository.setEntitymanager() ,and how can I do it dynamically (similar to JDBC style)?</p>
</div> </div><ul class="children"><li class="comment even depth-4" id="comment-732216"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Boris</span>  <span class="comment_date cye-lm-tag">July 19, 2014, 23:21</span></div><div class="comment_text" id="comment-body-732216"><p class="cye-lm-tag">I mean entityManager.set(myJPARepository) where myRepository is my own class impements<br> JPARepository or custom interface which extends a  standard Spring interface.</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-5" id="comment-732570"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">July 20, 2014, 11:21</span></div><div class="comment_text" id="comment-body-732570"><p class="cye-lm-tag">The first part of this tutorial describes <a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-part-one-configuration/" rel="nofollow">how you can configure Spring Data JPA</a>. It is a bit outdated (it configures Spring Data JPA by using XML configuration instead of using the <code>@EnableJpaRepositories</code> annotation), but it should still provide some answers to your questions.</p>
<p class="cye-lm-tag">The beans which are relevant to your question are:</p>
<ul><li>The <code>DataSource</code> bean configures the used database connection.</li><li>The <code>LocalContainerEntityManagerFactoryBean</code> is responsible of creating new <code>EntityManager</code> objects. The method which configures this bean is responsible of configuring the used JPA provider (in this case Hibernate).</li></ul><p class="cye-lm-tag">Spring Data JPA finds your repositories by scanning the configured base package (and its child packages). You can set this base package by using either the <code>base-package</code> attribute of the <code>repositories</code> element or the <code>basePackages</code> attribute of the <code>@EnableJpaRepositories</code> annotation.</p>
</div></div></li><li class="comment even depth-5" id="comment-732808"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Boris</span>  <span class="comment_date cye-lm-tag">July 20, 2014, 18:15</span></div><div class="comment_text" id="comment-body-732808"><p class="cye-lm-tag">But how application knows that is entityManagerFactoryBean  which time is really occurs?<br> On server start-up?<br> In other words I have to implement on method with any name which return LocalContainerEntityManagerFactoryBean? Don’t I? And what about   public JpaTransactionManager transactionManager() throws ClassNotFoundException {} which part of application run it . And last, who responsible to open/close JDBC connection?</p>
</div></div></li><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-5" id="comment-732962"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">July 20, 2014, 21:51</span></div><div class="comment_text" id="comment-body-732962"><blockquote><p class="cye-lm-tag">But how application knows that is entityManagerFactoryBean which time is really occurs?</p>
</blockquote><p class="cye-lm-tag">Well, actually the application doesn’t know about it. The Spring container injects a proxy implementation of the repository interface to all beans which use it.</p>
<blockquote><p class="cye-lm-tag">On server start-up?</p>
</blockquote><p class="cye-lm-tag">This happens when the Spring IoC container is started. If your application is a web application, this happens when on server start-up. If you are not familiar with the Spring IoC container, you should read <a href="http://docs.spring.io/spring/docs/4.0.x/spring-framework-reference/htmlsingle/#beans" target="_blank" rel="nofollow">the Chapter 4 of the Spring Reference Manual</a>.</p>
<blockquote><p class="cye-lm-tag">In other words I have to implement on method with any name which return LocalContainerEntityManagerFactoryBean? Don’t I?</p>
</blockquote><p class="cye-lm-tag">If you want to use JPA, you have to create this bean. Read <a href="http://docs.spring.io/spring/docs/4.0.x/spring-framework-reference/htmlsingle/#orm-jpa" target="_blank" rel="nofollow">the section 14.5 of the Spring Reference Manual</a> for more details about this.</p>
<blockquote><p class="cye-lm-tag">And what about public JpaTransactionManager transactionManager() throws ClassNotFoundException {} which part of application run it .</p>
</blockquote><p class="cye-lm-tag">That method configures that transaction manager bean. If you use JPA, you should use the <a href="http://docs.spring.io/spring/docs/4.0.x/javadoc-api/org/springframework/orm/jpa/JpaTransactionManager.html" target="_blank" rel="nofollow"><code>JpaTransactionManager</code></a> as a transaction manager bean.</p>
<p class="cye-lm-tag">You can get more information about transaction management by reading <a href="http://docs.spring.io/spring/docs/4.0.x/spring-framework-reference/htmlsingle/#transaction" target="_blank" rel="nofollow">the chapter 11 of the Spring Reference Manual</a>.</p>
<blockquote><p class="cye-lm-tag">And last, who responsible to open/close JDBC connection?</p>
</blockquote><p class="cye-lm-tag">You can request a new connection from the <code>DataSource</code> bean, but you don’t have to do it yourself. If you use Hibernate as a JPA provider, it will take care of this.</p>
</div></div></li></ul></li></ul></li></ul></li></ul></li><li class="comment even thread-odd thread-alt depth-1" id="comment-782940"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Deepak Jain</span>  <span class="comment_date cye-lm-tag">August 27, 2014, 16:21</span></div><div class="comment_text" id="comment-body-782940"><p class="cye-lm-tag">I have a Entity class Trade.java which uses a composite key TradeKey.java. I am using @EmbeddedId annotation.<br> TradeKey has two attributes tradeId and companyNumber.<br> I have written a ITradeRepository which extends CrudRepository.<br> I want to select all trades based on companyNumber. How to write find method in ITradeRepository?</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-784549"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">August 28, 2014, 18:22</span></div><div class="comment_text" id="comment-body-784549"><p class="cye-lm-tag">You could try something like this:</p>
<pre><code>
@Query("SELECT t FROM Trade t WHERE t.key.companyNumber=:companyNumber")
public List&lt;Trade&gt; findByCompanyNumber(@Param("companyNumber") Integer companyNumber);
</code>
</pre><p class="cye-lm-tag">Note that the <code>key</code> is the name of the composite key property that is found from the <code>Trade</code> class.</p>
</div> </div></li></ul></li><li class="comment even thread-even depth-1" id="comment-808337"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Sandeep</span>  <span class="comment_date cye-lm-tag">September 11, 2014, 23:34</span></div><div class="comment_text" id="comment-body-808337"><p class="cye-lm-tag">Hi,<br> Great tutorial! Can you help with this bcoz Im using Spring Data JPA, I thought you could help on this : <a href="http://stackoverflow.com/questions/25771892/column-insertable-updateble-dont-go-well-with-spring-jpa" rel="nofollow">http://stackoverflow.com/questions/25771892/column-insertable-updateble-dont-go-well-with-spring-jpa</a></p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-812919"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">September 14, 2014, 21:20</span></div><div class="comment_text" id="comment-body-812919"><p class="cye-lm-tag">Hi,</p>
<p class="cye-lm-tag">When you are creating a new <code>Offer</code> object, do you get the <code>Channel</code> object from the database or simply just create a new <code>Channel</code> object?</p>
<p class="cye-lm-tag">If you aren’t fetching the <code>Channel</code> object from the database, Hibernate probably performs insert to the <code>channel</code> table when you save a new offer because the <code>Channel</code> object is not in the <code>managed</code> state.</p>
<p class="cye-lm-tag">Unfortunately the code that you added to your StackOverflow question didn’t reveal how the <code>Channel</code> object is created. If you can shed some light to this issue, I can probably give you a better answer.</p>
</div> </div></li></ul></li><li class="comment even thread-odd thread-alt depth-1" id="comment-882772"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">marco</span>  <span class="comment_date cye-lm-tag">October 16, 2014, 21:14</span></div><div class="comment_text" id="comment-body-882772"><p class="cye-lm-tag">Hi,</p>
<p class="cye-lm-tag">very intresting and clear tutorial. I have a couple of question left before to start evolving an old project to Spring.</p>
<p class="cye-lm-tag">1. You mentioned you would use VOs instead of the ‘monolitich’ DTO  in case of more complex entities, I suppose this is valid also in case of collection fields (@OneToMany relations). Will you in that case include in VO/DTO collection of Domain Entity (as in the Domain entity itself) or  collections of reduced DTO/VTO tailored to the needs of the client? Where Will you put the logic to assemble/dissassemble Domain Objects in DTO/VO? Specific servers or into the Domain Object itself?. How will you handle transactions when different entities are involved? bit confused…</p>
<p class="cye-lm-tag">2. In your example, Person is the Domain Entity AND the Persistence Object, DTO/VO are involved only from domain to UI and viceversa. Is this the common/best practice with spring? You don’t want to separate the data layer, just in case you need to move from a RDMS to a NoSQL DB or…</p>
<p class="cye-lm-tag">3. For some Domain Object I actualy retrive some data from the database AND some other from somewere else (today is the filesystem, but I’m late to provide access to a legacy filesharing application, and It’s easy precognize the needs for clouds based or web services). How will you handle this without create new artificial domain entities? Now I’ve a method directly in the Entity class, but as you could understand, this is on e of the majr concerne that move me to reengineer the application.</p>
<p class="cye-lm-tag">Quite articulate question, sorry about that.</p>
<p class="cye-lm-tag">Marco</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-887927"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">October 18, 2014, 11:40</span></div><div class="comment_text" id="comment-body-887927"><p class="cye-lm-tag">Thank you for you kind words. I really appreciate them. Also, thank you for writing such an awesome question!</p>
<blockquote><p class="cye-lm-tag">You mentioned you would use VOs instead of the ‘monolitich’ DTO in case of more complex entities, I suppose this is valid also in case of collection fields (@OneToMany relations). Will you in that case include in VO/DTO collection of Domain Entity (as in the Domain entity itself) or collections of reduced DTO/VTO tailored to the needs of the client?</p>
</blockquote><p class="cye-lm-tag">I only fetch and return the information that is needed by the client (in case of REST API) or the view. Even though I call these objects DTOs, I guess you call them view objects as well.</p>
<p class="cye-lm-tag">I might reuse the same DTO if two two views need exactly the same information or two REST API endpoints return exactly the same information.</p>
<p class="cye-lm-tag">If I need to return an object that contains a collection of objects, I will create a separate DTO that contains the information of the objects found from that collection. In other words, I will create a DTO that has a collection of DTOs.</p>
<p class="cye-lm-tag">I never return domain model objects (entities or value objects). However, the example application of this tutorial uses a different approach because it was written a few years ago. Nowadays I use the approach which I described here.</p>
<blockquote><p class="cye-lm-tag">Where Will you put the logic to assemble/dissassemble Domain Objects in DTO/VO? Specific servers or into the Domain Object itself?.</p>
</blockquote><p class="cye-lm-tag">If I am inside a read-write transaction, I put the logic to a special mapper classes and use these classes in my service layer. I might also use a library such as <a href="http://jtransfo.org/" target="_blank" rel="nofollow">jTransfo</a>, <a href="https://github.com/DozerMapper/dozer" target="_blank" rel="nofollow">Dozer</a>, and <a href="http://modelmapper.org/" target="_blank" rel="nofollow">ModelMapper</a>.</p>
<p class="cye-lm-tag">If I am inside a read-only transaction, I query DTOs directly from the database. This way I can get only the information I need and avoid the overhead of Hibernate (or any other JPA provider). In this case, I put the logic that converts query results into DTOs to my repository class. Typically I use the <a href="http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html" target="_blank" rel="nofollow"><code>JdbcTemplate</code></a> and the <a href="http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/core/BeanPropertyRowMapper.html" target="_blank" rel="nofollow"><code>BeanPropertyRowMapper</code></a> classes for this purpose.</p>
<blockquote><p class="cye-lm-tag">How will you handle transactions when different entities are involved? bit confused…</p>
</blockquote><p class="cye-lm-tag">Spring Framework has a <a href="http://docs.spring.io/spring/docs/4.1.x/spring-framework-reference/htmlsingle/#transaction" target="_blank" rel="nofollow">comprehensive support for transactions</a>. I use <a href="http://docs.spring.io/spring/docs/4.1.x/spring-framework-reference/htmlsingle/#transaction-declarative-annotations" target="_blank" rel="nofollow">the annotation driven transaction management</a>, and add the <a href="http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/transaction/annotation/Transactional.html" target="_blank" rel="nofollow"><code>@Transactional</code></a> annotation to my service methods.</p>
<blockquote><p class="cye-lm-tag">In your example, Person is the Domain Entity AND the Persistence Object, DTO/VO are involved only from domain to UI and viceversa. Is this the common/best practice with spring? You don’t want to separate the data layer, just in case you need to move from a RDMS to a NoSQL DB or…</p>
</blockquote><p class="cye-lm-tag">I want to avoid complexity when it is not absolutely necessary. In other words, if the requirements of the application don’t state that the application must support both relational databases and NoSQL databases, I won’t take this possibility into account when I design and implement the application.</p>
<p class="cye-lm-tag">The truth is that no one cannot know what happens in the future. This means that there are many variables that can change, and if we want to support all of them, we need to over engineer everything. Over engineering has two big problems:</p>
<ul><li>Writing new features is slow because we need to pass the information through too many layers.</li><li>Maintaining our software is a huge pain in the ass because no one cannot understand how our application really works.</li></ul><p class="cye-lm-tag">This is of course a tradeoff, but I have noticed that doing the simplest thing that works is often the best choice.</p>
<blockquote><p class="cye-lm-tag">For some Domain Object I actualy retrive some data from the database AND some other from somewere else (today is the filesystem, but I’m late to provide access to a legacy filesharing application, and It’s easy precognize the needs for clouds based or web services). How will you handle this without create new artificial domain entities? Now I’ve a method directly in the Entity class, but as you could understand, this is on e of the majr concerne that move me to reengineer the application.</p>
</blockquote><p class="cye-lm-tag">I would create a new domain object that has references to the entity (or entities) in question and to the information that you fetch from the file sharing application. This gives you the possiblity to keep that information together, and you can also add relevant business logic to that domain object. On the other hand, if you only need to provide that information to the user’s of your application and you don’t need any business logic, adding a transient field to the entity is probably fine as well.</p>
</div> </div><ul class="children"><li class="comment even depth-3" id="comment-888747"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Anonymous</span>  <span class="comment_date cye-lm-tag">October 18, 2014, 17:24</span></div><div class="comment_text" id="comment-body-888747"><p class="cye-lm-tag">Hi, great answers and I’ll need some time to elaborate them.</p>
<p class="cye-lm-tag">I understand your point about avoiding complexity and it was what I did at the beginning, using Swing application famework with netbeams. It was usefull and now at least I know very well the ‘domain’ of the application, but is time to evolve, and my concern are:</p>
<p class="cye-lm-tag">a. provide a better integration and distribution respect as today.<br> b. enable web and mobile clients for all or at least part of the application domain.<br> c. move from swing to other (and more modern and rich) ‘rich’ GUI container (if one is still needed).<br> d. be ready to move from mySQL + MS/SAMBA directory sharing to other DBMS and fileservers/clouds application.</p>
<p class="cye-lm-tag">Your advise will be greatly appreciated on every point, but strictly to the point of this blog d. only is involved. Your answer state You don’t want take care of what is not a requirement at the moment, but what if it is? Would you still handle it with spring?</p>
<p class="cye-lm-tag">I’ve read the spring tutorial and I’m aware is possible to have different datasouces at the same time for differents entitities, but in that tutorial persistence.model.entity and domain.model.entity are two separated class and this pattern will for sure lend to many heavy extracost  (i.e you are going to always deal with detached entities and updates must be atomics, a real nightmare with collection fields), I’m not aware of tools who could help you using this pattern, but maybe you are.</p>
<p class="cye-lm-tag">What is not clear to me and urged me to my first question to you is: is this a required pattern with Spring using different datasources?</p>
<p class="cye-lm-tag">If not, is it the best/common practice?</p>
<p class="cye-lm-tag">Why not use the same Entity Class instead (as you did) eventually implementing different interfaces for different needs (i.e one interface is ‘anhemic’ and rapresent the entity in the data layer, onother is rich and rapresent the entity in the domain layer) in order to ensure ‘logical’ separation?</p>
<p class="cye-lm-tag">Of course  when heavy security (?) or performance constraints apply, then you have no choice.</p>
<p class="cye-lm-tag">Probably I’m wrong, but I’m interested in your opinion.</p>
<p class="cye-lm-tag">Regards, Marco.</p>
</div> </div><ul class="children"><li class="comment odd alt depth-4" id="comment-890086"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">marco</span>  <span class="comment_date cye-lm-tag">October 19, 2014, 00:03</span></div><div class="comment_text" id="comment-body-890086"><p class="cye-lm-tag">Don’t know why I posted as anonimus… sorry about that.</p>
</div> </div></li><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-4" id="comment-891841"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">October 19, 2014, 11:36</span></div><div class="comment_text" id="comment-body-891841"><p class="cye-lm-tag">Thank you for writing another great question.</p>
<p class="cye-lm-tag">It seems that you might want to take a look at the following Spring projects:</p>
<ul><li><a href="http://projects.spring.io/spring-batch/" target="_blank" rel="nofollow">Spring Batch</a></li><li><a href="http://projects.spring.io/spring-boot/" target="_blank" rel="nofollow">Spring Boot</a></li><li><a href="http://projects.spring.io/spring-integration/" target="_blank" rel="nofollow">Spring Integration</a></li></ul><blockquote><p class="cye-lm-tag">Your answer state You don’t want take care of what is not a requirement at the moment, but what if it is? Would you still handle it with spring?</p>
</blockquote><p class="cye-lm-tag">Well, Spring does provide a good support for relational databases and NoSQL databases. The first thing that you should do is to find the answer to the following questions:</p>
<ul><li>Do you need to store all information either to a relational database or to a NoSQL database?</li><li>Do you want to use <a href="http://martinfowler.com/bliki/PolyglotPersistence.html" target="_blank" rel="nofollow">polyglot persistence</a>? In other words, do you want to store some information to a relational database and some information to a NoSQL database?</li></ul><p class="cye-lm-tag">If you want to store all information either to a relational database or to a NoSQL database, there is no framework that can save you from the additional complexity. This means that you have to create a domain model and encapsulate the database specific details into your repositories. Spring can help you to implement these repositories because <a href="http://projects.spring.io/spring-data/" target="_blank" rel="nofollow">the Spring Data project</a> provides a first class support for both relational and NoSQL databases.</p>
<p class="cye-lm-tag">If you want to store information to a relational database and some information to a NoSQL database, Spring can make your job a lot easier because it you can eliminate the boilerplate code by using <a href="http://projects.spring.io/spring-data/" target="_blank" rel="nofollow">Spring Data</a>.</p>
<blockquote><p class="cye-lm-tag">I’ve read the spring tutorial and I’m aware is possible to have different datasouces at the same time for differents entitities,but in that tutorial persistence.model.entity and domain.model.entity are two separated class and this pattern will for sure lend to many heavy extracost (i.e you are going to always deal with detached entities and updates must be atomics, a real nightmare with collection fields), I’m not aware of tools who could help you using this pattern, but maybe you are.</p>
</blockquote><p class="cye-lm-tag">Are you talking about a specific tutorial? It would be easier to answer to this question if you would identify the tutorial you are talking about.</p>
<blockquote><p class="cye-lm-tag">What is not clear to me and urged me to my first question to you is: is this a required pattern with Spring using different datasources?</p>
</blockquote><p class="cye-lm-tag">Well, if you want to use Spring Data JPA and some other Spring Data project, you have to create a domain model that is supported by both projects. This can tie your hands because</p>
<ol><li>Relational databases and NoSQL databases are totally different beasts. NoSQL databases don’t support all features of the relational databases (and vice versa).</li><li>You have to configure the way your entities and value objects are stored to the used database. JPA provides a far richer set of configuration options than the NoSQL specific Spring Data projects.</li></ol><p class="cye-lm-tag">That is why it is a better idea to encapsulate the persistence specific details into your repositories and use a common domain model that isn’t database specific.</p>
<blockquote><p class="cye-lm-tag">If not, is it the best/common practice?</p>
</blockquote><p class="cye-lm-tag">This is the simplest thing than could possibly work. Using the same entities might seem like a simple idea, but you might run into problems when you need to support relationships between different entities and the other stuff supported by JPA. If you want to use JDBC or a “native” NoSQL database client library, you can probably dodge this bullet, but this means that you have to add a lot of boilerplate code to your repositories.</p>
<blockquote><p class="cye-lm-tag">Why not use the same Entity Class instead (as you did) eventually implementing different interfaces for different needs (i.e one interface is ‘anhemic’ and rapresent the entity in the data layer, onother is rich and rapresent the entity in the domain layer) in order to ensure ‘logical’ separation?</p>
</blockquote><p class="cye-lm-tag">See my previous answers.</p>
<p class="cye-lm-tag">Again, if you think that I missed something or you have some additional questions, feel free to ask them!</p>
</div> </div><ul class="children"><li class="comment odd alt depth-5" id="comment-893363"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">marco</span>  <span class="comment_date cye-lm-tag">October 19, 2014, 23:42</span></div><div class="comment_text" id="comment-body-893363"><p class="cye-lm-tag">Hi, thanks again for your precious help.</p>
<p class="cye-lm-tag">This is the tutorial: <a href="http://spring.io/guides/tutorials/data/" rel="nofollow">http://spring.io/guides/tutorials/data/</a></p>
<p class="cye-lm-tag">I understand your answer and I think I’m in an intermediate situation:</p>
<p class="cye-lm-tag">1.The ‘core’ is based on one RDB an I could not see the need of more (filesystem apart, as we already discussed. I’m cosidering to move the filesystem integration to the service layer (as you suggested), that way the ‘core’ (and any module) will interact with only one persistence subsystem).</p>
<p class="cye-lm-tag">2. Other part of the system (say modules) are served by web services and they are loosely coupled by  design.</p>
<p class="cye-lm-tag">3. It could be possible in the near future to replace the filesystem and/or web service access with one or more additional database access, this could introduce the need of one more persistence subsystem, but not necessarly will lend to a tighter integration between modules.</p>
<p class="cye-lm-tag">In this situation, and accepting the risk that could arise if needs will change in future, I could not see any caveat in adopting your way, even if in the whole system more than one persistence subsystem is used, but probably I’m missing the point.</p>
<p class="cye-lm-tag">Any way, if I’ll have to go the other way, as you wrote I’ll have to write a lot of boilerplate and code just to map the domain objects to the entities. Then arise my question about how to handle updates, particolary in case of entities with collection fields (relations). I was not able to find any Spring tutorial on that matter, are you aware of any example or tutorial about this?</p>
<p class="cye-lm-tag">p.s.<br> I’ll be very happy to owe you a beer, but considering you  gave me seven more project/library to study… I think I’m not going to earn much money in the next couple of months :).</p>
<p class="cye-lm-tag">Marco.</p>
</div></div></li><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-5" id="comment-896785"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">October 20, 2014, 22:26</span></div><div class="comment_text" id="comment-body-896785"><p class="cye-lm-tag">Hi Marco,</p>
<p class="cye-lm-tag">you are welcome. And thank you for coming back and asking more questions (these questions help me to learn new things).</p>
<blockquote><p class="cye-lm-tag">This is the tutorial: <a href="http://spring.io/guides/tutorials/data/" rel="nofollow">http://spring.io/guides/tutorials/data/</a></p>
</blockquote><p class="cye-lm-tag">I took a quick look at it and it seems that this tutorial separates the “core domain” and the “persistence data model” because the application needs to support multiple different databases / data storages. I wouldn’t use this approach unless it is absolutely necessary because most of the time this adds unnecessary complexity to the application.</p>
<blockquote><p class="cye-lm-tag">I understand your answer and I think I’m in an intermediate situation:</p>
</blockquote><p class="cye-lm-tag">Often the best solution is to find a some kind of compromise between flexibility and simplicity. The thing is that there is no perfect solution that would be suitable for every situation.</p>
<p class="cye-lm-tag">If you decide that you need to be able switch from a relational database to a NoSQL database (and vice versa) without making any changes to the source code, you have to write more code before you can “release” your application.</p>
<p class="cye-lm-tag">On the other hand, if you want to write less code before you can “release” your application, you cannot switch from a relational database to a NoSQL database (and vice versa) without making changes to the source code.</p>
<p class="cye-lm-tag">However, you can identify the modules that have to support multiple different databases, and add this support only to these modules. I know that this isn’t a perfect solution but it can be a good compromise.</p>
<blockquote><p class="cye-lm-tag">Any way, if I’ll have to go the other way, as you wrote I’ll have to write a lot of boilerplate and code just to map the domain objects to the entities. Then arise my question about how to handle updates, particolary in case of entities with collection fields (relations). I was not able to find any Spring tutorial on that matter, are you aware of any example or tutorial about this?</p>
</blockquote><p class="cye-lm-tag">I wrote a very similar update function today at work. I can share it here but I have to “anonymize” it first. I think that I can do that tomorrow. I will send you an email after I have published it.</p>
<blockquote><p class="cye-lm-tag">’ll be very happy to owe you a beer, but considering you gave me seven more project/library to study… I think I’m not going to earn much money in the next couple of months :).</p>
</blockquote><p class="cye-lm-tag">But you won’t spend any money either because you will spend the next couple of months at home studying these libraries… ;)</p>
<p class="cye-lm-tag">By the way, you might want to read my latest blog post titled: <a href="/software-development/design/understanding-spring-web-application-architecture-the-classic-way/" rel="nofollow">Understanding Spring Web Application Architecture: The Classic Way</a>.</p>
</div></div></li><li class="comment odd alt depth-5" id="comment-899510"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">marco</span>  <span class="comment_date cye-lm-tag">October 21, 2014, 14:04</span></div><div class="comment_text" id="comment-body-899510"><p class="cye-lm-tag">Hi,</p>
<p class="cye-lm-tag">I’m looking forward for your update function, and I’ll read for sure your blog, write the web app will be next step.</p>
<p class="cye-lm-tag">Marco</p>
</div></div></li><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-5" id="comment-900561"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">October 21, 2014, 20:45</span></div><div class="comment_text" id="comment-body-900561"><p class="cye-lm-tag">Hi Marco,</p>
<p class="cye-lm-tag">My use case is very simple but essentially I have two entities: <code>Task</code> and <code>Tag</code>. Their source code looks as follows:</p>
<pre><code>
@Entity
@Table(name = "tasks")
public class Task {

    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    private Long id;
	
    @OneToMany(cascade = CascadeType.ALL, orphanRemoval = true)
    @JoinTable(name = "task_tags",
            joinColumns = @JoinColumn(name = "task_id", nullable = false),
            inverseJoinColumns = @JoinColumn(name = "tag_id", nullable = false)
    )
    private Set&lt;Tag&gt; tags = new HashSet&lt;&gt;();
}

@Entity
@Table(name = "tags")
public class Tag {
    
	@Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    private Long id;
	
	@Column(name = "name", nullable=false)
	private String name;
}
</code>
</pre><p class="cye-lm-tag">Now, I had to write an update method that updates every <code>Tag</code> object that is linked with a <code>Task</code> object. Also, I could assume that existing tags are not removed and new tags are not added. The source code of my update method looks as follows:</p>
<pre><code>
@Service
public class TaskUpdateService {

	private final TaskRepository repository;
	
	@Autowired
	public TaskUpdateService(TaskRepository repository) {
		this.repository = repository;
	}

	@Transactional
	public TaskDTO update(TaskDTO task) {
		//No null check because it doesn't matter in this example
		Task updated = repository.findOne(task.getId());
	
		updateTags(updated.getTags(), task.getTags())
		
		//Create a new TaskDTO object from the updated Task object and return it
		TaskDTO returned = ...
	}
	
	/**
	 * Updates all tags. This method assumes that existing tags 
	 * cannot be removed and new tags cannot be added. 
	 * Also, this method makes sense only if the number of
	 * tags is relatively small.
	 */
	private updateTags(Set&lt;Tag&gt; targetTags, Set&lt;TagDTO&gt; sourceTags) {
		for (Tag targetTag: targetTags) {
			TagDTO sourceTag = findSourceTag(targetTag.getId(), sourceTags);
			targetTag.setName(sourceTag.getName());
			sourceTags.remove(sourceTag);
		}
	}
	
	private TagDTO findSourceTag(Long tagId, Set&lt;TagDTO&gt; sourceTags) {
		Optional&lt;TagDTO&gt; sourceTag = sourceTags.stream()
		                .filter(t -&gt; t.getId().equals(tagId))
		                .findFirst();
		return sourceTag.orElseThrow(() -&gt; new NotFoundException());
	}
}
</code>
</pre><p class="cye-lm-tag">Any feedback?</p>
</div></div></li><li class="comment odd alt depth-5" id="comment-903661"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">marco</span>  <span class="comment_date cye-lm-tag">October 22, 2014, 14:26</span></div><div class="comment_text" id="comment-body-903661"><p class="cye-lm-tag">HI, tanks for the example, for the matter of updating the collection field is similar to the one I was thinking of (but I need also add and remove methods, so I’m actualy thinking on a ‘sub service’ to handle the inner collection, with findRemoved, remove, findAdded, add, find and update methods). If interested in it, I could post an early version as soon as I’ll have sketched, but I think you got the idea.</p>
<p class="cye-lm-tag">My real concern is: what if you have other fields and maybe other collections in Task? Will you then have differerent ‘atomic’ TaskUpdateService for each field? Same for Tags and any other entity.</p>
<p class="cye-lm-tag">Using non atomic updates (on detached entities) could land you in big troubles of ‘logical’ concurrency, depending on the number of users and lasting life of DTO’s.I don’t think @Transactional is going to help us in this matter.</p>
<p class="cye-lm-tag">From a genaral point of view, I don’t like the idea to have this kind of stuff in the service layer (no business logic here, it’s just a different implementation of the data access layer than using an ORM), maybe – if we really need it – we are better introducing a layer of abstraction between repositories and the service layer, so Service layer will not change if we change kind and number of datasources or repo implementation.</p>
<p class="cye-lm-tag">Marco.</p>
</div></div></li><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-5" id="comment-905022"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">October 22, 2014, 21:59</span></div><div class="comment_text" id="comment-body-905022"><blockquote><p class="cye-lm-tag">for the matter of updating the collection field is similar to the one I was thinking of (but I need also add and remove methods, so I’m actualy thinking on a ‘sub service’ to handle the inner collection, with findRemoved, remove, findAdded, add, find and update methods). If interested in it, I could post an early version as soon as I’ll have sketched, but I think you got the idea.</p>
</blockquote><p class="cye-lm-tag">I would just add the <code>addTag()</code> and <code>removeTag()</code> methods to the service class, and then delegate the request forward to the <code>Task</code> object since it is the aggregate root (<a href="http://martinfowler.com/bliki/DDD_Aggregate.html" target="_blank" rel="nofollow">DDD Aggregate</a>).</p>
<blockquote><p class="cye-lm-tag">My real concern is: what if you have other fields and maybe other collections in Task? Will you then have differerent ‘atomic’ TaskUpdateService for each field? Same for Tags and any other entity.</p>
</blockquote><p class="cye-lm-tag">It depends. My situation is pretty simple since I only need to update one field. If I would have to update a few fields, I would update them all at the same time. But if I would have to update a child collection of a <code>Task</code> object or more than just a few fields, things would get ugly.</p>
<blockquote><p class="cye-lm-tag">Using non atomic updates (on detached entities) could land you in big troubles of ‘logical’ concurrency, depending on the number of users and lasting life of DTO’s.I don’t think @Transactional is going to help us in this matter.</p>
</blockquote><p class="cye-lm-tag">That is why I would update all fields inside the same transaction.</p>
<blockquote><p class="cye-lm-tag">From a genaral point of view, I don’t like the idea to have this kind of stuff in the service layer (no business logic here, it’s just a different implementation of the data access layer than using an ORM), maybe – if we really need it – we are better introducing a layer of abstraction between repositories and the service layer, so Service layer will not change if we change kind and number of datasources or repo implementation.</p>
</blockquote><p class="cye-lm-tag">Actually I decided move this logic to the <code>Task</code> class. I added the <code>updateTag(Long id, String name)</code> method to the <code>Task</code> class. This method finds the updated <code>Tag</code> object and updates its name. Of course this works only because a <code>Task</code> object won’t have many <code>Tag</code> objects and I have to update only one field.</p>
</div></div></li><li class="comment odd alt depth-5" id="comment-929013"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Marco</span>  <span class="comment_date cye-lm-tag">October 29, 2014, 20:10</span></div><div class="comment_text" id="comment-body-929013"><p class="cye-lm-tag">Hi, If I well understand your point, you will have the</p>
<p class="cye-lm-tag">addTag(Task task, Long tagId, String TagName);<br> removeTag(Task task, Tag tag);</p>
<p class="cye-lm-tag">in your TaskService class that delegate to same methods in Task:</p>
<p class="cye-lm-tag">addTag(Long tagId, String TagName);<br> removeTag(Tag tag);</p>
<p class="cye-lm-tag">assuming addTag has to first create the tag (if not exists) and removeTag delete the tag if not used anymore, where you will add this logics?</p>
<p class="cye-lm-tag">If in Task, it will not be a DTO anymore, but a Class that incapsulate data and logics, very similar to the concept of Entity in my opinion. More, Task must know how to persist/remove Tag. This breaks the original requirement to be able to switch the way Task or Tag are persisted.</p>
<p class="cye-lm-tag">For this reason I was thinking – if and only if we really need this capability – to introduce an intermediate level of abstraction  – let’s call it TaskIntermediate –  between the DAO/DTO (TaskDAO, TagDAO, TaskDTO, TagDTO) and the domain object Task.</p>
<p class="cye-lm-tag">This way Task only have addTag(Tag tag) and RemoveTag(Tag tag) abstract methods, TaskIntermediate implements  the methods via call to:</p>
<p class="cye-lm-tag">Tag tag = TagDTO.create(tagId, TagName) ;<br> TagDTO.persist(tag);<br> this.getTagList().add(tag);</p>
<p class="cye-lm-tag">and so on.</p>
<p class="cye-lm-tag">The benefit is that you could use ORM to handle DTOs and generics for CRUD operations in DAOs, concentrate the ‘assembling’ logics in the Intermediate Class (and an intermediate server implementing the aggregate CRUD operations onto the aggregate) and live with ‘clean’ and not anhemic at all domain objects and services, completely unrelated to where and how data are stored.</p>
<p class="cye-lm-tag">Thanks to you I’ve cleared up my mind and now I could better articulate my original question: If TaskIntermediate is just TaskDTO + the logics to handle related Tags (the add/remove methods) and the list of tags, could TaskIntermediate extend TaskDTO via inheritance or composition? if not why?</p>
<p class="cye-lm-tag">Same for Task vs. TaskImplementation, assuming Task adds some business related methods.</p>
<p class="cye-lm-tag">Looking forward for your opinion.</p>
<p class="cye-lm-tag">Marco.</p>
</div></div></li><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-5" id="comment-945140"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">November 3, 2014, 21:09</span></div><div class="comment_text" id="comment-body-945140"><p class="cye-lm-tag">Hi Marco,</p>
<blockquote><p class="cye-lm-tag">If I well understand your point, you will have the</p>
<p class="cye-lm-tag">addTag(Task task, Long tagId, String TagName);<br> removeTag(Task task, Tag tag);</p>
<p class="cye-lm-tag">in your TaskService class that delegate to same methods in Task:</p>
<p class="cye-lm-tag">addTag(Long tagId, String TagName);<br> removeTag(Tag tag);</p>
</blockquote><p class="cye-lm-tag">Yes, and no. In this case the <code>TaskService</code> class would have the following methods:</p>
<pre><code>
public Tag addTag(Long taskId, String tagName);
public Tag removeTag(Long taskId, Long tagId);
</code>
</pre><p class="cye-lm-tag">And the <code>Task</code> class would have the following methods:</p>
<pre><code>
public Tag addTag(String tagName);
public Tag removeTag(Long tagId);
</code>
</pre><p class="cye-lm-tag">Actually I don’t have the <code>removeTag()</code> method because there is no way to remove tags (they aren’t really tags).</p>
<blockquote><p class="cye-lm-tag"> assuming addTag has to first create the tag (if not exists) and removeTag delete the tag if not used anymore, where you will add this logics?</p>
</blockquote><p class="cye-lm-tag">I would add this logic inside the <code>Task</code> class because of two reasons:</p>
<ol><li>It is an aggregate root class so it makes sense to add it there.</li><li>Adding and removing tags is so simple that I don’t need an additional builder component.</li></ol><blockquote><p class="cye-lm-tag"> If in Task, it will not be a DTO anymore, but a Class that incapsulate data and logics, very similar to the concept of Entity in my opinion.</p>
</blockquote><p class="cye-lm-tag">Yes. The <code>Task</code> class is an entity (at least in my application).</p>
<blockquote><p class="cye-lm-tag"> More, Task must know how to persist/remove Tag. This breaks the original requirement to be able to switch the way Task or Tag are persisted.</p>
</blockquote><p class="cye-lm-tag">It doesn’t have to know this as long as it returns the added / removed <code>Tag</code> object. When you get the returned <code>Tag</code> object, you can do what you want with it.</p>
<blockquote><p class="cye-lm-tag"> For this reason I was thinking – if and only if we really need this capability – to introduce an intermediate level of abstraction – let’s call it TaskIntermediate – between the DAO/DTO (TaskDAO, TagDAO, TaskDTO, TagDTO) and the domain object Task.</p>
<p class="cye-lm-tag">This way Task only have addTag(Tag tag) and RemoveTag(Tag tag) abstract methods, TaskIntermediate implements the methods via call to:</p>
<p class="cye-lm-tag">Tag tag = TagDTO.create(tagId, TagName) ;<br> TagDTO.persist(tag);<br> this.getTagList().add(tag);</p>
<p class="cye-lm-tag">and so on.</p>
</blockquote><p class="cye-lm-tag">I am not sure if I understand what you mean. I use DTOs to transform information between different layers (web -&gt; service and service -&gt; web), and I think that there shouldn’t be any dependencies between DTOs and entities. If I need to assemble objects that requires special assembling logic, I create a domain service that creates those objects.</p>
<p class="cye-lm-tag">On the other hand, If would have to support multiple different databases, I would probably just separate the domain model and the data model by using the approach that was described on the Spring Data tutorial (it seems that the link is not working anymore so I couldn’t link to it).</p>
<blockquote><p class="cye-lm-tag"> The benefit is that you could use ORM to handle DTOs and generics for CRUD operations in DAOs, concentrate the ‘assembling’ logics in the Intermediate Class (and an intermediate server implementing the aggregate CRUD operations onto the aggregate) and live with ‘clean’ and not anhemic at all domain objects and services, completely unrelated to where and how data are stored.</p>
</blockquote><p class="cye-lm-tag">I am not sure if I understand this because my DTOs aren’t passed to the data access layer. Also, since I don’t have to support multiple different databases, I can just use JPA entities (this means that my data model and domain model are kind of the same thing).</p>
<blockquote><p class="cye-lm-tag"> Thanks to you I’ve cleared up my mind and now I could better articulate my original question: If TaskIntermediate is just TaskDTO + the logics to handle related Tags (the add/remove methods) and the list of tags, could TaskIntermediate extend TaskDTO via inheritance or composition? if not why?</p>
</blockquote><p class="cye-lm-tag">I think that I don’t understand what the role of the intermediate layer is. Is it a some kind of domain service that assembles objets that require complex assemling logic? Or is it a mapper layer that separates the service layer from the repository layer?</p>
<blockquote><p class="cye-lm-tag"> Same for Task vs. TaskImplementation, assuming Task adds some business related methods.</p>
</blockquote><p class="cye-lm-tag">What is the difference between <code>Task</code> and <code>TaskImplementation</code>?</p>
</div></div></li></ul></li></ul></li></ul></li></ul></li><li class="comment odd alt thread-even depth-1" id="comment-1056061"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">David</span>  <span class="comment_date cye-lm-tag">December 18, 2014, 22:23</span></div><div class="comment_text" id="comment-body-1056061"><p class="cye-lm-tag">Hello Petri.</p>
<p class="cye-lm-tag">First of all, thanks for your great posts. I’m working in an app using the architecture defined here and Spring Data JPA. I’m enjoying programming this following your advices but there is a thing that I don’t understand. According to your diagram, web layer should use only DTOs and in this post you return a list of Person insteand a PersonDTO. Is there a justification for this? If not, how could I rewrite that method to return DTOs instead?</p>
<p class="cye-lm-tag">Thanks again por your help. Great job! ;)</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-1058043"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">December 19, 2014, 20:16</span></div><div class="comment_text" id="comment-body-1058043"><p class="cye-lm-tag">Hi David,</p>
<p class="cye-lm-tag">Thank you for your kind words. I really appreciate them.</p>
<blockquote><p class="cye-lm-tag">According to your diagram, web layer should use only DTOs and in this post you return a list of Person insteand a PersonDTO. Is there a justification for this?</p>
</blockquote><p class="cye-lm-tag">I assume that you are talking about the diagram <a href="/software-development/design/understanding-spring-web-application-architecture-the-classic-way/" rel="nofollow">that is found from this blog post</a>?</p>
<p class="cye-lm-tag">Anyway, the only reason why the service layer of the example application returns entities is that it was written almost three years ago, and three years ago I thought that returning entities is a good idea.</p>
<p class="cye-lm-tag">If you want to return DTOs from your service layer, you have to simply transform the domain objects into DTO objects and return the created DTO objects from your service methods.</p>
<p class="cye-lm-tag">If you want to see an example application that uses this approach, check out <a href="https://github.com/pkainulainen/jooq-with-spring-examples/tree/master/jooq-only" target="_blank" rel="nofollow">the example application</a> of my <a href="/using-jooq-with-spring/" rel="nofollow">Using jOOQ with Spring tutorial</a>.</p>
<p class="cye-lm-tag">Its service methods transform domain objects into DTOs by using <a href="http://jtransfo.org/" target="_blank" rel="nofollow">jTransfo</a> and return the created DTO objects. However, you don’t have to use an external library. You can simple write the mapper code yourself if it makes more sense to you.</p>
<p class="cye-lm-tag">I hope that this answered to your question.</p>
</div> </div></li></ul></li><li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1101342"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Awadhesh</span>  <span class="comment_date cye-lm-tag">January 20, 2015, 13:50</span></div><div class="comment_text" id="comment-body-1101342"><p class="cye-lm-tag">Hi Perti,<br> Thank you so much.Its very helpful tutorial.</p>
<p class="cye-lm-tag">I have a requirement to connect with multiple (let’s say two as of now) databases. So I am creating two repositories and using both of them in one service method.</p>
<p class="cye-lm-tag">I am trying to fetch record from one repo and persist in second repo but getting below error –</p>
<p class="cye-lm-tag">org.springframework.beans.factory.NoUniqueBeanDefinitionException: No qualifying bean of type [org.springframework.transaction.PlatformTransactionManager] is defined: expected single matching bean but found 2:</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-1101410"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">January 20, 2015, 15:34</span></div><div class="comment_text" id="comment-body-1101410"><p class="cye-lm-tag">Hi,</p>
<p class="cye-lm-tag">That exception was thrown because Spring expected to find only one <code>PlatformTransactionManager</code> bean but it found two <code>PlatformTransactionManager</code> beans. Did you configure the used transaction manager when you annotated your configuration class with the <code>@EnableJpaRepositories</code> annotation?</p>
<p class="cye-lm-tag">Also, you might want to <a href="http://scattercode.co.uk/2013/11/18/spring-data-multiple-databases/" target="_blank" rel="nofollow">read this blog post</a>. It describes how you can use multiple databases with Spring Data JPA.</p>
</div> </div></li></ul></li><li class="comment odd alt thread-even depth-1" id="comment-1103559"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">BB</span>  <span class="comment_date cye-lm-tag">January 22, 2015, 12:59</span></div><div class="comment_text" id="comment-body-1103559"><p class="cye-lm-tag">Hi your site is excellent.<br> Thank you for your hard work.</p>
<p class="cye-lm-tag">Maybe you can write one some think like this – “how to use spring-data-jpa-tutorial-part-two-crud in Rest resources” I mean “how to inject/@Autowire  @Repository variable in rest resource”</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-1103945"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">January 22, 2015, 20:49</span></div><div class="comment_text" id="comment-body-1103945"><p class="cye-lm-tag">Thank you for your kind words. I really appreciate them.</p>
<p class="cye-lm-tag">Also, thank you for your suggestion. I think that I will add a few practical blog posts to my Spring web application architecture tutorial (<a href="/software-development/design/understanding-spring-web-application-architecture-the-classic-way/" rel="nofollow">read the first part of this tutorial</a>). What do you think?</p>
</div> </div></li></ul></li><li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1376474"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Ben</span>  <span class="comment_date cye-lm-tag">February 21, 2016, 07:37</span></div><div class="comment_text" id="comment-body-1376474"><p class="cye-lm-tag">Thank you very much for the wonderful articles.</p>
<p class="cye-lm-tag"> When you created the BaseRepository, you added @NoRepositoryBean, so that spring will not try to create implementation of it. And that makes sense.</p>
<p class="cye-lm-tag">But when i see the CrudRepository Interface from the org.springframework.data.repository package, it have the @NoRepositoryBean annotation on top of the class.</p>
<p class="cye-lm-tag">Why is this annotation needed for the crudRepository interface ? Don’t  we need spring to create implementation of the methods for the methods in the crudRepository interface ?</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-1376727"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">February 21, 2016, 21:21</span></div><div class="comment_text" id="comment-body-1376727"><p class="cye-lm-tag">Hi Ben,</p>
<p class="cye-lm-tag">Thank you for your kind words. I really appreciate them.</p>
<blockquote><p class="cye-lm-tag">But when i see the CrudRepository Interface from the org.springframework.data.repository package, it have the @NoRepositoryBean annotation on top of the class. Why is this annotation needed for the crudRepository interface ? Don’t we need spring to create implementation of the methods for the methods in the crudRepository interface ?</p>
</blockquote><p class="cye-lm-tag">Check out <a href="http://docs.spring.io/spring-data/commons/docs/current/api/org/springframework/data/repository/NoRepositoryBean.html" target="_blank" rel="nofollow">the Javadoc of the <code>@NoRepositoryBean</code> annotation</a>. These interfaces are annotated with that annotation because we don’t want that the Spring container creates beans for those base interfaces. Instead, we want that the Spring container creates beans for our “concrete” repository interfaces.</p>
</div> </div></li></ul></li><li class="comment odd alt thread-even depth-1" id="comment-1491522"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">john</span>  <span class="comment_date cye-lm-tag">September 28, 2016, 05:22</span></div><div class="comment_text" id="comment-body-1491522"><p class="cye-lm-tag">purpose: update some columns of same table by given list of primary keys and return ordered int[] to indicate if a row update is successful or not</p>
<p class="cye-lm-tag">query (not native): update MyEntity e set e.col_1 = :v1, e.col_2 = :v2 where e.id in :ids</p>
<p class="cye-lm-tag">@Modifying(clearAutomatically = true) @Transactional public int updateCols(@Param(“v1”) String v1, @Param(“v2”) String v2, @Param(“ids”) List idList);</p>
<p class="cye-lm-tag">Spring JpaTransactionManager is used</p>
<p class="cye-lm-tag">Questions: 1) With Spring Data JPA only, how to do that? (customize repository not an option due to large existing codes), we want to achieve effects equivalent to JDBC batch update with Spring data JPA only. 2) Is it possible that spring data JAP will return an integer by the update method above that is less then the input list size? If that could happen, how do we know which one on my input list failed? In any order? 3) Noticed that after the above method successfully finished, database rows not being updated at all. How could we force it synchronized with database with spring data jpa? 4) If the entity update not flushed by spring data JPA, then even we update one by one instead of in a batch, still we will not see database changes? Thanks in advance</p>
</div> </div></li><li class="comment even thread-odd thread-alt depth-1" id="comment-1493377"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Anonymous</span>  <span class="comment_date cye-lm-tag">October 4, 2016, 15:59</span></div><div class="comment_text" id="comment-body-1493377"><p class="cye-lm-tag">Not clear as article, Repository topic it’s not clear enough.</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-1493448"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">October 4, 2016, 23:48</span></div><div class="comment_text" id="comment-body-1493448"><p class="cye-lm-tag">Could you clarify that comment? I am not sure what you mean.</p>
</div> </div></li></ul></li><li class="comment even thread-even depth-1" id="comment-1517239"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Arun</span>  <span class="comment_date cye-lm-tag">January 14, 2017, 05:40</span></div><div class="comment_text" id="comment-body-1517239"><p class="cye-lm-tag">Hi Pettric,<br> need your help regarding the below</p>
<p class="cye-lm-tag">EntityClass{<br> @Id<br> @GeneratedValue(strategy=GenerationType.IDENTITY)<br> @Column(name=”ID”,columnDefinition=” INT UNSIGNED”)<br> private Integer id;</p>
<p class="cye-lm-tag"> @Column(name=”TOKEN_CODE”,length=80,nullable=false,unique=true)<br> private String regionId;</p>
<p class="cye-lm-tag"> @Column(name=”FM_NAME”,length=80)<br> private String fmName;</p>
<p class="cye-lm-tag"> @OneToOne(cascade=CascadeType.ALL)<br> @JoinColumn(name=”COURIER_NO”)<br> private Courier courier;<br> @OneToMany(mappedBy=”admin”)<br> private List privilege = new ArrayList();</p>
<p class="cye-lm-tag">I have tried two scenario 1-when using findbyid for retrieving the object and try to set the data in the object in the same field then we are getting an identity already attached with other session 2-when we commented all property setter method which has one to one then it is always creating a new entity in(admin) the table which has one to many relationship As saveorUpdate also not available in Spring Data JPA so could any suggest how we can do the cascade update in Spring Data</p>
</div> </div></li></ul></div> </section>
<br><hr>

<h2>5 Introduction to Query Methods</h2>
<div class="post_content cye-lm-tag" itemprop="articleBody"><p class="cye-lm-tag">Earlier we created our first Spring Data JPA repository that provides <a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-part-two-crud/">CRUD operations</a> for todo entries.</p>
<p class="cye-lm-tag"> Although that is a good start, that doesn’t help us to write real life applications because we have no idea how we can query information from the database by using custom search criteria.</p>
<p class="cye-lm-tag">One way to find information from the database is to use query methods. However, before we can create custom database queries with query methods, we have to find the answers to the following questions:</p>
<ul><li>What are query methods?</li><li>What kind of return values can we use?</li><li>How can we pass parameters to our query methods?</li></ul><p class="cye-lm-tag">This blog post answers to all of these questions. Let’s start by finding out the answer to the first question.</p>
<div class="note"> <strong>Additional Reading:</strong><p class="cye-lm-tag"></p>
<p class="cye-lm-tag">If you are not familiar with Spring Data JPA, <strong>you should read</strong> the following blog posts before you continue reading this blog post:</p>
<ul><li><a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-introduction/">Spring Data JPA Tutorial: Introduction</a> provides a quick introduction to Spring Data JPA and gives an overview of the Spring Data repository interfaces.</li><li><a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-getting-the-required-dependencies/">Spring Data JPA Tutorial: Getting the Required Dependencies</a> describes how you can get the required dependencies.</li><li><a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-part-one-configuration/">Spring Data JPA Tutorial: Configuration</a> describes how you can configure the persistence layer of a Spring application that uses Spring Data JPA.</li></ul></div><h2>A Very Short Introduction to Query Methods</h2><p class="cye-lm-tag">Query methods are methods that find information from the database and are declared on the repository interface. For example, if we want to create a database query that finds the <em>Todo</em> object that has a specific id, we can create the query method by adding the <em>findById()</em> method to the <em>TodoRepository</em> interface. After we have done this, our repository interface looks as follows:</p>
<div><div id="highlighter_258974" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2 highlighted">5</div><div class="line number6 index5 alt1 highlighted">6</div><div class="line number7 index6 alt2">7</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.repository.Repository;</code></div><div class="line number2 index1 alt1">&nbsp;</div><div class="line number3 index2 alt2"><code class="java keyword">interface</code> <code class="java plain">TodoRepository </code><code class="java keyword">extends</code> <code class="java plain">Repository&lt;Todo, Long&gt; { </code></div><div class="line number4 index3 alt1">&nbsp;</div><div class="line number5 index4 alt2 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java comments">//This is a query method.</code></div><div class="line number6 index5 alt1 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">Todo findById(Long id);</code></div><div class="line number7 index6 alt2"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><div class="note"> Don’t worry if you don’t understand how this query method works. The next part of my Spring Data JPA tutorial describes how you can <a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-three-custom-queries-with-query-methods/">add query methods to your Spring Data JPA repositories</a>.</div><p class="cye-lm-tag">Let’s move on and find out what kind of values we can return from our query methods.</p>
<h2>Returning Values From Query Methods</h2><p class="cye-lm-tag">A query method can return only one result or more than one result. Also, we can create a query method that is invoked asynchronously. This section addresses each of these situations and describes what kind of return values we can use in each situation.</p>
<p class="cye-lm-tag"></p>
<p class="cye-lm-tag"><strong>First</strong>, if we are writing a query that should return only one result, we can return the following types:</p>
<ul><li><em>Basic type</em>. Our query method will return the found basic type or <em>null</em>.</li><li><em>Entity</em>. Our query method will return an entity object or <em>null</em>.</li><li>Guava / Java 8 <em>Optional&lt;T&gt;</em>. Our query method will return an <em>Optional</em> that contains the found object or an empty <em>Optional</em>.</li></ul><p class="cye-lm-tag">Here are some examples of query methods that return only one result:</p>
<div><div id="highlighter_271814" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">import</code> <code class="java plain">java.util.Optional;</code></div><div class="line number2 index1 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.jpa.repository.Query;</code></div><div class="line number3 index2 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.repository.Repository;</code></div><div class="line number4 index3 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.repository.query.Param;</code></div><div class="line number5 index4 alt2">&nbsp;</div><div class="line number6 index5 alt1"><code class="java keyword">interface</code> <code class="java plain">TodoRepository </code><code class="java keyword">extends</code> <code class="java plain">Repository&lt;Todo, Long&gt; { </code></div><div class="line number7 index6 alt2">&nbsp;</div><div class="line number8 index7 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Query</code><code class="java plain">(</code><code class="java string">"SELECT t.title FROM Todo t where t.id = :id"</code><code class="java plain">) </code></div><div class="line number9 index8 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">String findTitleById(</code><code class="java color1">@Param</code><code class="java plain">(</code><code class="java string">"id"</code><code class="java plain">) Long id);</code></div><div class="line number10 index9 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number11 index10 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Query</code><code class="java plain">(</code><code class="java string">"SELECT t.title FROM Todo t where t.id = :id"</code><code class="java plain">) </code></div><div class="line number12 index11 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">Optional&lt;String&gt; findTitleById(</code><code class="java color1">@Param</code><code class="java plain">(</code><code class="java string">"id"</code><code class="java plain">) Long id);</code></div><div class="line number13 index12 alt2">&nbsp;</div><div class="line number14 index13 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">Todo findById(Long id);</code></div><div class="line number15 index14 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number16 index15 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">Optional&lt;Todo&gt; findById(Long id);</code></div><div class="line number17 index16 alt2"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><div class="note"> <strong>Additional Reading:</strong><p class="cye-lm-tag"></p>
<ul><li><a href="https://spring.io/blog/2014/05/21/what-s-new-in-spring-data-dijkstra#support-for-wrapper-types-as-return-values" target="_blank">What’s New In Spring Data Dijkstra – Support for wrapper types as return values</a></li><li><a href="https://github.com/spring-projects/spring-data-examples/tree/master/jpa/java8" target="_blank">Spring Data – Java 8 Examples</a></li><li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/Optional.html" target="_blank">The Javadoc of the <em>Optional&lt;T&gt;</em> class</a></li></ul></div><p class="cye-lm-tag"><strong>Second</strong>, if we are writing a query method that should return more than one result, we can return the following types:</p>
<ul><li><em>List&lt;T&gt;</em>. Our query method will return a list that contains the query results or an empty list.</li><li><em>Stream&lt;T&gt;</em>. Our query method will return a <em>Stream</em> that can be used to access the query results or an empty <em>Stream</em>.</li></ul><p class="cye-lm-tag">Here are some examples of query methods that return more than one result:</p>
<div><div id="highlighter_375506" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">import</code> <code class="java plain">java.util.stream.Stream;</code></div><div class="line number2 index1 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.repository.Repository;</code></div><div class="line number3 index2 alt2">&nbsp;</div><div class="line number4 index3 alt1"><code class="java keyword">interface</code> <code class="java plain">TodoRepository </code><code class="java keyword">extends</code> <code class="java plain">Repository&lt;Todo, Long&gt; { </code></div><div class="line number5 index4 alt2">&nbsp;</div><div class="line number6 index5 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">List&lt;Todo&gt; findByTitle(String title);</code></div><div class="line number7 index6 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number8 index7 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">Stream&lt;Todo&gt; findByTitle(String title);</code></div><div class="line number9 index8 alt2"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><div class="note"> <strong>Additional Reading:</strong><p class="cye-lm-tag"></p>
<ul><li><a href="http://docs.spring.io/spring-data/jpa/docs/1.8.x/reference/html/#repositories.query-streaming" target="_blank">Spring Data JPA Reference Manual: 3.4.6 Streaming query results</a></li><li><a href="https://github.com/spring-projects/spring-data-examples/tree/master/jpa/java8" target="_blank">Spring Data – Java 8 Examples</a></li><li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html" target="_blank">The Javadoc of the <em>Stream&lt;T&gt;</em> interface</a></li></ul></div><p class="cye-lm-tag"><strong>Third</strong>, if we want that our query method is executed asynchronously, we have to annotate it with the <em>@Async</em> annotation and return a <em>Future&lt;T&gt;</em> object. Here are some examples of query methods that are executed asynchronously:</p>
<div><div id="highlighter_948249" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div class="line number23 index22 alt2">23</div><div class="line number24 index23 alt1">24</div><div class="line number25 index24 alt2">25</div><div class="line number26 index25 alt1">26</div><div class="line number27 index26 alt2">27</div><div class="line number28 index27 alt1">28</div><div class="line number29 index28 alt2">29</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">import</code> <code class="java plain">java.util.concurrent.Future;</code></div><div class="line number2 index1 alt1"><code class="java keyword">import</code> <code class="java plain">java.util.stream.Stream;</code></div><div class="line number3 index2 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.jpa.repository.Query;</code></div><div class="line number4 index3 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.repository.Repository;</code></div><div class="line number5 index4 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.repository.query.Param;</code></div><div class="line number6 index5 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.scheduling.annotation.Async;</code></div><div class="line number7 index6 alt2">&nbsp;</div><div class="line number8 index7 alt1"><code class="java keyword">interface</code> <code class="java plain">TodoRepository </code><code class="java keyword">extends</code> <code class="java plain">Repository&lt;Todo, Long&gt; { </code></div><div class="line number9 index8 alt2">&nbsp;</div><div class="line number10 index9 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Async</code></div><div class="line number11 index10 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Query</code><code class="java plain">(</code><code class="java string">"SELECT t.title FROM Todo t where t.id = :id"</code><code class="java plain">) </code></div><div class="line number12 index11 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">Future&lt;String&gt; findTitleById(</code><code class="java color1">@Param</code><code class="java plain">(</code><code class="java string">"id"</code><code class="java plain">) Long id);</code></div><div class="line number13 index12 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number14 index13 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Async</code></div><div class="line number15 index14 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Query</code><code class="java plain">(</code><code class="java string">"SELECT t.title FROM Todo t where t.id = :id"</code><code class="java plain">) </code></div><div class="line number16 index15 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">Future&lt;Optional&lt;String&gt;&gt; findTitleById(</code><code class="java color1">@Param</code><code class="java plain">(</code><code class="java string">"id"</code><code class="java plain">) Long id);</code></div><div class="line number17 index16 alt2">&nbsp;</div><div class="line number18 index17 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Async</code></div><div class="line number19 index18 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">Future&lt;Todo&gt; findById(Long id);</code></div><div class="line number20 index19 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number21 index20 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Async</code></div><div class="line number22 index21 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">Future&lt;Optional&lt;Todo&gt;&gt; findById(Long id);</code></div><div class="line number23 index22 alt2">&nbsp;</div><div class="line number24 index23 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Async</code></div><div class="line number25 index24 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">Future&lt;List&lt;Todo&gt;&gt; findByTitle(String title);</code></div><div class="line number26 index25 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number27 index26 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Async</code></div><div class="line number28 index27 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">Future&lt;Stream&lt;Todo&gt;&gt; findByTitle(String title);</code></div><div class="line number29 index28 alt2"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><div class="note"> <strong>Additional Reading:</strong><p class="cye-lm-tag"></p>
<ul><li><a href="https://spring.io/blog/2014/05/21/what-s-new-in-spring-data-dijkstra#asynchronous-repository-method-invocations" target="_blank">What’s New In Spring Data Dijkstra – Asynchronous repository method invocation</a></li><li><a href="http://docs.spring.io/spring/docs/4.1.x/spring-framework-reference/htmlsingle/#scheduling-annotation-support-async" target="_blank">Spring Framework Reference Manual: 28.4.3 The @Async Annotation</a></li><li><a href="http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scheduling/annotation/Async.html" target="_blank">The Javadoc of the <em>@Async</em> annotation</a></li><li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Future.html" target="_blank">The Javadoc of the <em>Future&lt;V&gt;</em> interface</a></li></ul></div><p class="cye-lm-tag">Let’s move on and find out how we can pass method parameters to our query methods.</p>
<h2>Passing Method Parameters to Query Methods</h2><p class="cye-lm-tag">We can pass parameters to our database queries by passing method parameters to our query methods. Spring Data JPA supports both position based parameter binding and named parameters. Both of these options are described in the following.</p>
<p class="cye-lm-tag">The position based parameter binding means that the order of our method parameters decides which placeholders are replaced with them. In other words, the first placeholder is replaced with the first method parameter, the second placeholder is replaced with the second method parameter, and so on.</p>
<p class="cye-lm-tag"></p>
<p class="cye-lm-tag">Here are some query methods that use the position based parameter binding:</p>
<div><div id="highlighter_542563" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">import</code> <code class="java plain">java.util.Optional</code></div><div class="line number2 index1 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.jpa.repository.Query;</code></div><div class="line number3 index2 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.repository.Repository;</code></div><div class="line number4 index3 alt1">&nbsp;</div><div class="line number5 index4 alt2">&nbsp;</div><div class="line number6 index5 alt1"><code class="java keyword">interface</code> <code class="java plain">TodoRepository </code><code class="java keyword">extends</code> <code class="java plain">Repository&lt;Todo, Long&gt; { </code></div><div class="line number7 index6 alt2">&nbsp;</div><div class="line number8 index7 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java plain">Optional&lt;Todo&gt; findByTitleAndDescription(String title, String description);</code></div><div class="line number9 index8 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number10 index9 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Query</code><code class="java plain">(</code><code class="java string">"SELECT t FROM Todo t where t.title = ?1 AND t.description = ?2"</code><code class="java plain">)</code></div><div class="line number11 index10 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java plain">Optional&lt;Todo&gt; findByTitleAndDescription(String title, String description);</code></div><div class="line number12 index11 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number13 index12 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Query</code><code class="java plain">(value = </code><code class="java string">"SELECT * FROM todos t where t.title = ?0 AND t.description = ?1"</code><code class="java plain">, </code></div><div class="line number14 index13 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">nativeQuery=</code><code class="java keyword">true</code></div><div class="line number15 index14 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">)</code></div><div class="line number16 index15 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java plain">Optional&lt;Todo&gt; findByTitleAndDescription(String title, String description);</code></div><div class="line number17 index16 alt2"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><p class="cye-lm-tag">Using position based parameter binding is a bit error prone because we cannot change the order of the method parameters or the order of the placeholders without breaking our database query. We can solve this problem by using named parameters.</p>
<p class="cye-lm-tag">We can use named parameters by replacing the numeric placeholders found from our database queries with concrete parameter names, and annotating our method parameters with the <em>@Param</em> annotation.</p>
<div class="note">The <em>@Param</em> annotation configures the name of the named parameter that is replaced with the value of the method parameter.</div><p class="cye-lm-tag">Here are some query methods that use named parameters:</p>
<div><div id="highlighter_513366" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">import</code> <code class="java plain">java.util.Optional</code></div><div class="line number2 index1 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.jpa.repository.Query;</code></div><div class="line number3 index2 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.repository.Repository;</code></div><div class="line number4 index3 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.repository.query.Param;</code></div><div class="line number5 index4 alt2">&nbsp;</div><div class="line number6 index5 alt1">&nbsp;</div><div class="line number7 index6 alt2"><code class="java keyword">interface</code> <code class="java plain">TodoRepository </code><code class="java keyword">extends</code> <code class="java plain">Repository&lt;Todo, Long&gt; { </code></div><div class="line number8 index7 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number9 index8 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Query</code><code class="java plain">(</code><code class="java string">"SELECT t FROM Todo t where t.title = :title AND t.description = :description"</code><code class="java plain">)</code></div><div class="line number10 index9 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java plain">Optional&lt;Todo&gt; findByTitleAndDescription(</code><code class="java color1">@Param</code><code class="java plain">(</code><code class="java string">"title"</code><code class="java plain">) String title, </code></div><div class="line number11 index10 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Param</code><code class="java plain">(</code><code class="java string">"description"</code><code class="java plain">) String description);</code></div><div class="line number12 index11 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number13 index12 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Query</code><code class="java plain">(</code></div><div class="line number14 index13 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">value = </code><code class="java string">"SELECT * FROM todos t where t.title = :title AND t.description = :description"</code><code class="java plain">, </code></div><div class="line number15 index14 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">nativeQuery=</code><code class="java keyword">true</code></div><div class="line number16 index15 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">)</code></div><div class="line number17 index16 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java plain">Optional&lt;Todo&gt; findByTitleAndDescription(</code><code class="java color1">@Param</code><code class="java plain">(</code><code class="java string">"title"</code><code class="java plain">) String title, </code></div><div class="line number18 index17 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Param</code><code class="java plain">(</code><code class="java string">"description"</code><code class="java plain">) String description);</code></div><div class="line number19 index18 alt2"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><div class="note"> <strong>Additional Reading:</strong><p class="cye-lm-tag"></p>
<ul><li><a href="http://docs.spring.io/spring-data/commons/docs/current/api/org/springframework/data/repository/query/Param.html" target="_blank">The Javadoc of the <em>@Param</em> annotation</a></li><li><a href="http://docs.spring.io/spring-data/jpa/docs/1.8.x/reference/html/#jpa.named-parameters" target="_blank">Spring Data JPA Reference Manual: 4.3.5 Using named parameters</a></li></ul></div><p class="cye-lm-tag">Let’s move on and summarize what we learned from this blog post.</p>
<h2>Summary</h2><p class="cye-lm-tag">This blog post has taught us three things:</p>
<ul><li>Query methods are methods that find information from the database and are declared on the repository interface.</li><li>Spring Data has pretty versatile support for different return values that we can leverage when we are adding query methods to our Spring Data JPA repositories.</li><li>We can pass parameters to our database queries by using either position based parameter binding or named parameters.</li></ul><p class="cye-lm-tag">The next part of my Spring Data JPA tutorial describes how we can <a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-creating-database-queries-from-method-names/">create database queries from the method names of our query methods</a>.</p>
<p class="cye-lm-tag"><strong>P.S.</strong> You can <a href="https://github.com/pkainulainen/spring-data-jpa-examples/tree/master/query-methods" target="_blank">get the example application of this blog post from Github</a>.</p>
<div class="note">If you want to learn how to use Spring Data JPA, you should read my <a href="/spring-data-jpa-tutorial/">Spring Data JPA tutorial</a>.</div> <span id="tve_leads_end_content" style="display: block; visibility: hidden; border: 1px solid transparent;" class="cye-lm-tag"></span>
</div>

</div>




</div>
</div>
</div>
</div>
</div>
</div><p style="line-height: 24px;" data-unit="px" class="tve_p_center cye-lm-tag"><span class="tve_custom_font_size cye-lm-tag" style="font-size: 16px;">I will never rent, sell, or share your email address.<br></span></p>

</div></div></div></div></div></div></div>

<section id="comments"><div class="comments_intro"><span class="num_comments cye-lm-tag">36</span> comments… <a href="#commentform" rel="nofollow">add one</a></div><ul class="comment_list"><li class="comment even thread-even depth-1" id="comment-1216428"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">nancyprasana</span>  <span class="comment_date cye-lm-tag">June 1, 2015, 12:28</span></div><div class="comment_text" id="comment-body-1216428"><p class="cye-lm-tag">Nice to given sharing about java example it is very easy to understand</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-1216432"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">June 1, 2015, 12:33</span></div><div class="comment_text" id="comment-body-1216432"><p class="cye-lm-tag">Thank you. I am happy to hear that this blog post was useful to you.</p>
</div> </div></li></ul></li><li class="comment even thread-odd thread-alt depth-1" id="comment-1217764"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Ti</span>  <span class="comment_date cye-lm-tag">June 3, 2015, 07:44</span></div><div class="comment_text" id="comment-body-1217764"><p class="cye-lm-tag">You’re the man!<br> Your articles are so well written and easily understandable. It’s amazing!</p>
<p class="cye-lm-tag">Keep up the good work Petri.</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-1218052"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">June 3, 2015, 17:35</span></div><div class="comment_text" id="comment-body-1218052"><p class="cye-lm-tag">Thank you for your kind words. I really appreciate them!</p>
</div> </div></li><li class="comment even depth-2" id="comment-1221063"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">incze</span>  <span class="comment_date cye-lm-tag">June 7, 2015, 18:26</span></div><div class="comment_text" id="comment-body-1221063"><p class="cye-lm-tag">+1</p>
</div> </div></li></ul></li><li class="comment odd alt thread-even depth-1" id="comment-1236555"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag"><a href="http://blog.ercanezin.com" rel="external nofollow" class="url">Ercan Ezin</a></span>  <span class="comment_date cye-lm-tag">July 2, 2015, 10:28</span></div><div class="comment_text" id="comment-body-1236555"><p class="cye-lm-tag">Thanks for your clean and simple explaination. Sharing is caring and it is your kindness to share and care :)</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-1236578"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">July 2, 2015, 11:47</span></div><div class="comment_text" id="comment-body-1236578"><p class="cye-lm-tag">You are welcome!</p>
</div> </div></li></ul></li><li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1278095"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Tauseef</span>  <span class="comment_date cye-lm-tag">September 28, 2015, 11:07</span></div><div class="comment_text" id="comment-body-1278095"><p class="cye-lm-tag">When I executed my “String findTitleById(Long id)” I got ToDo object instead of String.Also I had to change “interface TodoRepository extends Repository { ” to “interface TodoRepository extends JpaRepository { ” as the former did not work. Can you please help me resolve this.</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-1278445"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">September 29, 2015, 12:23</span></div><div class="comment_text" id="comment-body-1278445"><p class="cye-lm-tag">Hi,</p>
<blockquote><p class="cye-lm-tag">When I executed my “String findTitleById(Long id)” I got ToDo object instead of String</p>
</blockquote><p class="cye-lm-tag">This was my mistake. I thought that Spring Data JPA would support this, but it doesn’t. You can still do this, but you have to specify your own query by using the <code>@Query</code> annotation. By the way, you might want to check out this Jira ticket: <a href="https://jira.spring.io/browse/DATAJPA-804" target="_blank" rel="nofollow">Support Projections as Query results</a>.</p>
<p class="cye-lm-tag">Thank you for pointing this out!</p>
<blockquote><p class="cye-lm-tag">Also I had to change “interface TodoRepository extends Repository { ” to “interface TodoRepository extends JpaRepository { ” as the former did not work.</p>
</blockquote><p class="cye-lm-tag">Did your code throw an exception or how did you figure out that it didn’t work?</p>
</div> </div><ul class="children"><li class="comment odd alt depth-3" id="comment-1278454"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Tauseef</span>  <span class="comment_date cye-lm-tag">September 29, 2015, 12:55</span></div><div class="comment_text" id="comment-body-1278454"><p class="cye-lm-tag">Oh that was a mistake by me. I had 2 Repository classes imported and had to use one directly(fully qualified class name). One is for the annotation @Repository and the other one you mentioned.That is why i changed it to JpaRepository.</p>
<p class="cye-lm-tag">Anyways thanks for letting me know that there is an open ticket for this feature.</p>
</div> </div></li></ul></li></ul></li><li class="comment even thread-even depth-1" id="comment-1406413"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Manuel</span>  <span class="comment_date cye-lm-tag">March 31, 2016, 10:41</span></div><div class="comment_text" id="comment-body-1406413"><p class="cye-lm-tag">Thanks for the post! :) It was very useful to me but I had one problem with it:<br> what JPA returns when findBy_ sentence? I supposed it would be null, but I had an exception<br> Thanks for the help!</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-1407652"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">April 1, 2016, 18:21</span></div><div class="comment_text" id="comment-body-1407652"><p class="cye-lm-tag">Hi,</p>
<p class="cye-lm-tag">It shouldn’t throw an exception. What exception does it throw?</p>
</div> </div></li></ul></li><li class="comment even thread-odd thread-alt depth-1" id="comment-1426695"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Sash</span>  <span class="comment_date cye-lm-tag">April 22, 2016, 14:24</span></div><div class="comment_text" id="comment-body-1426695"><p class="cye-lm-tag">Hi, thanks for your very clear tutorials. However, I have a question.</p>
<p class="cye-lm-tag">Are you sure these examples will work? There are several interfaces here with attempts to overload methods with the same signature. Probably won’t compile?</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-1426705"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">April 22, 2016, 14:37</span></div><div class="comment_text" id="comment-body-1426705"><p class="cye-lm-tag">You are right. They don’t compile. The reason why I decided to put these query methods to the same interface is that this way it is easy to compare different query methods that do the same thing.</p>
</div> </div></li></ul></li><li class="comment even thread-even depth-1" id="comment-1429879"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Luc</span>  <span class="comment_date cye-lm-tag">April 26, 2016, 13:18</span></div><div class="comment_text" id="comment-body-1429879"><p class="cye-lm-tag">Hello! Thank you very much for such a good tutorials, but I have one question.</p>
<p class="cye-lm-tag">How to make some params optional (varying number of params), something like this:<br> List  findByOptionalLastnameAndOptionalFirstNameAnd…(String lastname, String firstname,…); ?<br> Is there a way to do it?</p>
<p class="cye-lm-tag">Best regards!</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-1430116"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">April 26, 2016, 19:55</span></div><div class="comment_text" id="comment-body-1430116"><p class="cye-lm-tag">Hi Luc,</p>
<p class="cye-lm-tag">Thank you for your kind words. I really appreciate them.</p>
<blockquote><p class="cye-lm-tag">How to make some params optional (varying number of params). Is there a way to do it?</p>
</blockquote><p class="cye-lm-tag">If you want to create dynamic queries with Spring Data JPA, you have to use either <a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-part-four-jpa-criteria-queries/" rel="nofollow">JPA Criteria API</a> or <a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-part-five-querydsl/" rel="nofollow">Querydsl</a>.</p>
</div> </div><ul class="children"><li class="comment even depth-3" id="comment-1436752"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Luc</span>  <span class="comment_date cye-lm-tag">May 6, 2016, 10:40</span></div><div class="comment_text" id="comment-body-1436752"><p class="cye-lm-tag">Thank you very much! Both tutorials are very useful! I used JPA Criteria API and it works perfect for me!</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-4" id="comment-1443373"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">May 17, 2016, 09:20</span></div><div class="comment_text" id="comment-body-1443373"><p class="cye-lm-tag">You are welcome!</p>
</div> </div></li></ul></li></ul></li></ul></li><li class="comment even thread-odd thread-alt depth-1" id="comment-1464352"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">dmitry</span>  <span class="comment_date cye-lm-tag">July 4, 2016, 13:28</span></div><div class="comment_text" id="comment-body-1464352"><p class="cye-lm-tag">Hello! Thank you for that tutorial.<br> But I have a question, is there a way how to return Stream of rows from database using org.springframework.data.jpa.domain.Specification interface. In other words I need to filter rows from database and I can’t just do within query annotation.</p>
<p class="cye-lm-tag">Thanks in advance!</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-1464496"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">July 4, 2016, 23:18</span></div><div class="comment_text" id="comment-body-1464496"><p class="cye-lm-tag">Hi,</p>
<p class="cye-lm-tag">I took a look at <a href="http://docs.spring.io/spring-data/jpa/docs/current/api/org/springframework/data/jpa/repository/JpaSpecificationExecutor.html" target="_blank" rel="nofollow">the Javadoc of the <code>JpaSpecificationExecutor&lt;T&gt;</code> interface</a>, and it seems that if you want to get a more than one result, you can return only <code>List&lt;T&gt;</code> and <code>Page&lt;T&gt;</code> objects.</p>
</div> </div></li></ul></li><li class="comment even thread-even depth-1" id="comment-1471788"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Alfred Huang</span>  <span class="comment_date cye-lm-tag">August 1, 2016, 22:01</span></div><div class="comment_text" id="comment-body-1471788"><p class="cye-lm-tag">Nice introduction. one question  about JPA. what difference between Spring JPA and Spring Hibernate?</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-1472059"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">August 2, 2016, 13:55</span></div><div class="comment_text" id="comment-body-1472059"><p class="cye-lm-tag">Hi,</p>
<p class="cye-lm-tag">The Spring Hibernate module provides support for Hibernate. In other words, it ensures that you can use Hibernate in a Spring application. However, you still have to use either the Hibernate API or the “pure” JPA API.</p>
<p class="cye-lm-tag">Spring Data JPA introduces an additional layer that helps you to remove the boilerplate code that is required when you write queries by using the “pure” JPA API. However, you still have to use a JPA provider such as Hibernate.</p>
</div> </div></li></ul></li><li class="comment even thread-odd thread-alt depth-1" id="comment-1491636"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Raj</span>  <span class="comment_date cye-lm-tag">September 28, 2016, 12:52</span></div><div class="comment_text" id="comment-body-1491636"><p class="cye-lm-tag">how to find unique name using spring data jpa and also display all columns data</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-1492243"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">September 30, 2016, 12:16</span></div><div class="comment_text" id="comment-body-1492243"><p class="cye-lm-tag">Hi,</p>
<p class="cye-lm-tag">I need a bit more input before I can answer to your question. For example, I need to see the source code of the entity that contains the queried name.</p>
</div> </div></li></ul></li><li class="comment even thread-even depth-1" id="comment-1491640"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Smith</span>  <span class="comment_date cye-lm-tag">September 28, 2016, 13:08</span></div><div class="comment_text" id="comment-body-1491640"><p class="cye-lm-tag">Is valid in JPA   distinct…?<br> List findDistinctByName(String name);</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-1492244"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">September 30, 2016, 12:19</span></div><div class="comment_text" id="comment-body-1492244"><p class="cye-lm-tag">Yes. It should work. If you need more information, you should <a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-creating-database-queries-from-method-names/" rel="nofollow">read this blog post</a>.</p>
</div> </div></li><li class="comment even depth-2" id="comment-1492441"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Smith</span>  <span class="comment_date cye-lm-tag">October 1, 2016, 08:20</span></div><div class="comment_text" id="comment-body-1492441"><p class="cye-lm-tag">@Query(“SELECT DISTINCT r.Id,r.Desc,r.isActive,r.createdBy FROM categories r where  r.isActive=?1”)</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-3" id="comment-1493451"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">October 5, 2016, 00:08</span></div><div class="comment_text" id="comment-body-1493451"><p class="cye-lm-tag">That query doesn’t work because you are not selecting an entity. If you want to select only a few fields of an entity, you need to <a href="http://stackoverflow.com/questions/20120619/optimize-spring-data-jpa-queries/20121813#20121813" target="_blank" rel="nofollow">return a DTO</a>.</p>
</div> </div><ul class="children"><li class="comment even depth-4" id="comment-1495504"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Anonymous</span>  <span class="comment_date cye-lm-tag">October 12, 2016, 15:31</span></div><div class="comment_text" id="comment-body-1495504"><p class="cye-lm-tag">thank u</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-5" id="comment-1495627"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">October 12, 2016, 19:01</span></div><div class="comment_text" id="comment-body-1495627"><p class="cye-lm-tag">You are welcome.</p>
</div></div></li></ul></li></ul></li></ul></li></ul></li><li class="comment even thread-odd thread-alt depth-1" id="comment-1504112"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Shrirang</span>  <span class="comment_date cye-lm-tag">November 16, 2016, 12:06</span></div><div class="comment_text" id="comment-body-1504112"><p class="cye-lm-tag">Hello Petri, excellent tutorials.<br> I have some issue.<br> I want the query method to generate query like “FROM ABC  WHERE (NAME=? OR LASTNAME=?) AND IN(?,?,?)”<br> I wrote method “findByNameOrLastnameAndCityIn()” but it generating query “FROM ABC  WHERE NAME=? OR LASTNAME=? AND IN(?,?,?)”.<br> What can I do to get required result??</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-1504224"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">November 16, 2016, 22:31</span></div><div class="comment_text" id="comment-body-1504224"><p class="cye-lm-tag">Hi,</p>
<p class="cye-lm-tag">you need to <a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-creating-database-queries-with-the-query-annotation/" rel="nofollow">use the <code>@Query</code> annotation</a> and specify the used JPQL query manually.</p>
</div> </div><ul class="children"><li class="comment even depth-3" id="comment-1504284"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Shrirang</span>  <span class="comment_date cye-lm-tag">November 17, 2016, 07:59</span></div><div class="comment_text" id="comment-body-1504284"><p class="cye-lm-tag">Actually, the no. of parameters in IN operator are not fixed, it can be one or more. So I am passing List to it, but then it is giving me error;<br> Query is like :<br> @Query(“FROM ABC WHERE (NAME=:name OR LASTNAME=:lastName) AND IN(:cities)”);<br> ‘cities’ is of type List</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-4" id="comment-1505277"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">November 21, 2016, 23:06</span></div><div class="comment_text" id="comment-body-1505277"><p class="cye-lm-tag">That is strange. Does your code throw an exception when you run it? If so, could you add the stack trace here? Also, just to clarify, does your repository method look like this:</p>
<pre><code>
@Query("FROM ABC WHERE (NAME=:name OR LASTNAME=:lastName) AND IN(:cities)")
List<abc> search(@Param("name" String name, 
			   	 @Param("lastName") String lastName, 
			   	 @Param("cities") List<string> cities)
</string></abc></code>
</pre></div> </div></li></ul></li></ul></li></ul></li></ul></div> </section>

<br><hr>

<h2>6 Creating Database Queries From Method Names</h2>
<div class="post_content" itemprop="articleBody"><p class="cye-lm-tag"><a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-introduction-to-query-methods/">The previous part of this tutorial</a> taught us to pass method parameters to our query methods and described what kind of values we can return from them.</p>
<p class="cye-lm-tag">This blog post describes how we can create query methods by using the query generation from the method name strategy.</p>
<p class="cye-lm-tag">We will also implement a simple search function that has two requirements:</p>
<ol><li>It must return todo entries whose title or description contains the given search term.</li><li>The search must be case insensitive.</li></ol><p class="cye-lm-tag">Let’s get started.</p>
<div class="note"> <strong>Additional Reading:</strong><p class="cye-lm-tag"></p>
<p class="cye-lm-tag">If you are not familiar with Spring Data JPA, <strong>you should read</strong> the following blog posts before you continue reading this blog post:</p>
<ul><li><a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-introduction/">Spring Data JPA Tutorial: Introduction</a> provides a quick introduction to Spring Data JPA and gives an overview of the Spring Data repository interfaces.</li><li><a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-getting-the-required-dependencies/">Spring Data JPA Tutorial: Getting the Required Dependencies</a> describes how you can get the required dependencies.</li><li><a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-part-one-configuration/">Spring Data JPA Tutorial: Configuration</a> describes how you can configure the persistence layer of a Spring application that uses Spring Data JPA.</li><li><a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-introduction-to-query-methods/">Spring Data JPA Tutorial: Introduction to Query Methods</a> describes how you can pass method parameters to your query methods and identifies the “legal” return values of Spring Data JPA query methods.</li></ul></div><h2>Creating Query Methods</h2><p class="cye-lm-tag">The query generation from the method name is a query generation strategy where the invoked query is derived from the name of the query method.</p>
<p class="cye-lm-tag">We can create query methods that use this strategy by following these rules:</p>
<ul><li>The name of our query method must start with one of the following prefixes: <em>find…By</em>, <em>read…By</em>, <em>query…By</em>, <em>count…By</em>, and <em>get…By</em>.</li><li>If we want to limit the number of returned query results, we can add the <em>First</em> or the <em>Top</em> keyword before the first <em>By</em> word. If we want to get more than one result, we have to append the optional numeric value to the <em>First</em> and the <em>Top</em> keywords. For example, <em>findTopBy</em>, <em>findTop1By</em>, <em>findFirstBy</em>, and <em>findFirst1By</em> all return the first entity that matches with the specified search criteria.</li><li>If we want to select unique results, we have to add the <em>Distinct</em> keyword before the first <em>By</em> word. For example, <em>findTitleDistinctBy</em> or <em>findDistinctTitleBy</em> means that we want to select all unique titles that are found from the database.</li><li>We must add the search criteria of our query method after the first <em>By</em> word. We can specify the search criteria by combining <a href="http://docs.spring.io/spring-data/jpa/docs/1.8.x/reference/html/#repositories.query-methods.query-property-expressions" target="_blank">property expressions</a> with the <a href="http://docs.spring.io/spring-data/jpa/docs/1.8.x/reference/html/#repository-query-keywords" target="_blank">supported keywords</a>.</li><li>If our query method specifies x search conditions, we must add x method parameters to it. In other words, the number of method parameters must be equal than the number of search conditions. Also, the method parameters must be given in the same order than the search conditions.</li><li> We must set the return type of the query method by following the rules that were described in <a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-introduction-to-query-methods/">the previous part of this tutorial</a>.</li></ul><p class="cye-lm-tag"></p>
<p class="cye-lm-tag"></p>
<br> The following examples demonstrate how we can create simple query methods by using the query generation from the method name strategy:<p class="cye-lm-tag"></p>
<p class="cye-lm-tag"><strong>Example 1:</strong> If we want to create a query method that returns the todo entry whose id is given as a method parameter, we have to add one of the following query methods to our repository interface:</p>
<div><div id="highlighter_324657" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1 highlighted">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2 highlighted">19</div><div class="line number20 index19 alt1">20</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.repository.Repository;</code></div><div class="line number2 index1 alt1">&nbsp;</div><div class="line number3 index2 alt2"><code class="java keyword">import</code> <code class="java plain">java.util.Optional;</code></div><div class="line number4 index3 alt1">&nbsp;</div><div class="line number5 index4 alt2"><code class="java keyword">interface</code> <code class="java plain">TodoRepository </code><code class="java keyword">extends</code> <code class="java plain">Repository&lt;Todo, Long&gt; {</code></div><div class="line number6 index5 alt1">&nbsp;</div><div class="line number7 index6 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java preprocessor">/**</code></div><div class="line number8 index7 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java preprocessor">* Returns the found todo entry by using its id as search </code></div><div class="line number9 index8 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java preprocessor">* criteria. If no todo entry is found, this method</code></div><div class="line number10 index9 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java preprocessor">* returns null. </code></div><div class="line number11 index10 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java preprocessor">*/</code></div><div class="line number12 index11 alt1 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java plain">Todo findById(Long id);</code></div><div class="line number13 index12 alt2">&nbsp;</div><div class="line number14 index13 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java preprocessor">/**</code></div><div class="line number15 index14 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java preprocessor">* Returns an Optional which contains the found todo </code></div><div class="line number16 index15 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java preprocessor">* entry by using its id as search criteria. If no to entry</code></div><div class="line number17 index16 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java preprocessor">* is found, this method returns an empty Optional.</code></div><div class="line number18 index17 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java preprocessor">*/</code></div><div class="line number19 index18 alt2 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java plain">Optional&lt;Todo&gt; findById(Long id);</code></div><div class="line number20 index19 alt1"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><p class="cye-lm-tag"><strong>Example 2:</strong> If we want to create a query method that returns todo entries whose title or description is given as a method parameter, we have to add the following query method to our repository interface:</p>
<div><div id="highlighter_767220" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1 highlighted">12</div><div class="line number13 index12 alt2">13</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.repository.Repository;</code></div><div class="line number2 index1 alt1">&nbsp;</div><div class="line number3 index2 alt2"><code class="java keyword">import</code> <code class="java plain">java.util.List;</code></div><div class="line number4 index3 alt1">&nbsp;</div><div class="line number5 index4 alt2"><code class="java keyword">interface</code> <code class="java plain">TodoRepository </code><code class="java keyword">extends</code> <code class="java plain">Repository&lt;Todo, Long&gt; {</code></div><div class="line number6 index5 alt1">&nbsp;</div><div class="line number7 index6 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java preprocessor">/**</code></div><div class="line number8 index7 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java preprocessor">* Returns the found todo entry whose title or description is given</code></div><div class="line number9 index8 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java preprocessor">* as a method parameter. If no todo entry is found, this method</code></div><div class="line number10 index9 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java preprocessor">* returns an empty list.</code></div><div class="line number11 index10 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java preprocessor">*/</code></div><div class="line number12 index11 alt1 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java plain">List&lt;Todo&gt; findByTitleOrDescription(String title, String description);</code></div><div class="line number13 index12 alt2"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><p class="cye-lm-tag"><strong>Example 3:</strong> If we want to create a query method that returns the number of todo entries whose title is given as a method parameter, we have to add the following query method to our repository interface:</p>
<div><div id="highlighter_935733" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2 highlighted">9</div><div class="line number10 index9 alt1">10</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.repository.Repository;</code></div><div class="line number2 index1 alt1">&nbsp;</div><div class="line number3 index2 alt2"><code class="java keyword">interface</code> <code class="java plain">TodoRepository </code><code class="java keyword">extends</code> <code class="java plain">Repository&lt;Todo, Long&gt; {</code></div><div class="line number4 index3 alt1">&nbsp;</div><div class="line number5 index4 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java preprocessor">/**</code></div><div class="line number6 index5 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java preprocessor">* Returns the number of todo entry whose title is given</code></div><div class="line number7 index6 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java preprocessor">* as a method parameter.</code></div><div class="line number8 index7 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java preprocessor">*/</code></div><div class="line number9 index8 alt2 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java keyword">long</code> <code class="java plain">countByTitle(String title);</code></div><div class="line number10 index9 alt1"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><p class="cye-lm-tag"><strong>Example 4:</strong> If we want to return the distinct todo entries whose title is given as a method parameter, we have to add the following query method to our repository interface:</p>
<div><div id="highlighter_918164" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1 highlighted">12</div><div class="line number13 index12 alt2">13</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.repository.Repository;</code></div><div class="line number2 index1 alt1">&nbsp;</div><div class="line number3 index2 alt2"><code class="java keyword">import</code> <code class="java plain">java.util.List;</code></div><div class="line number4 index3 alt1">&nbsp;</div><div class="line number5 index4 alt2"><code class="java keyword">interface</code> <code class="java plain">TodoRepository </code><code class="java keyword">extends</code> <code class="java plain">Repository&lt;Todo, Long&gt; {</code></div><div class="line number6 index5 alt1">&nbsp;</div><div class="line number7 index6 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java preprocessor">/**</code></div><div class="line number8 index7 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java preprocessor">* Returns the distinct todo entries whose title is given</code></div><div class="line number9 index8 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java preprocessor">* as a method parameter. If no todo entries is found, this</code></div><div class="line number10 index9 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java preprocessor">* method returns an empty list.</code></div><div class="line number11 index10 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java preprocessor">*/</code></div><div class="line number12 index11 alt1 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java plain">List&lt;Todo&gt; findDistinctByTitle(String title);</code></div><div class="line number13 index12 alt2"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><p class="cye-lm-tag"><strong>Example 5:</strong> If we want to to return the first 3 todo entries whose title is given as a method parameter, we have to add one of the following query methods to our repository interface:</p>
<div><div id="highlighter_586523" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1 highlighted">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2 highlighted">19</div><div class="line number20 index19 alt1">20</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.repository.Repository;</code></div><div class="line number2 index1 alt1">&nbsp;</div><div class="line number3 index2 alt2"><code class="java keyword">import</code> <code class="java plain">java.util.List;</code></div><div class="line number4 index3 alt1">&nbsp;</div><div class="line number5 index4 alt2"><code class="java keyword">interface</code> <code class="java plain">TodoRepository </code><code class="java keyword">extends</code> <code class="java plain">Repository&lt;Todo, Long&gt; {</code></div><div class="line number6 index5 alt1">&nbsp;</div><div class="line number7 index6 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java preprocessor">/**</code></div><div class="line number8 index7 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java preprocessor">* Returns the first three todo entries whose title is given</code></div><div class="line number9 index8 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java preprocessor">* as a method parameter. If no todo entries is found, this</code></div><div class="line number10 index9 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java preprocessor">* method returns an empty list.</code></div><div class="line number11 index10 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java preprocessor">*/</code></div><div class="line number12 index11 alt1 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java plain">List&lt;Todo&gt; findFirst3ByTitleOrderByTitleAsc(String title);</code></div><div class="line number13 index12 alt2">&nbsp;</div><div class="line number14 index13 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java preprocessor">/**</code></div><div class="line number15 index14 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java preprocessor">* Returns the first three todo entries whose title is given</code></div><div class="line number16 index15 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java preprocessor">* as a method parameter. If no todo entries is found, this</code></div><div class="line number17 index16 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java preprocessor">* method returns an empty list.</code></div><div class="line number18 index17 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java preprocessor">*/</code></div><div class="line number19 index18 alt2 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java plain">List&lt;Todo&gt; findTop3ByTitleOrderByTitleAsc(String title);</code></div><div class="line number20 index19 alt1"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><div class="note"> <strong>Additional Reading:</strong><p class="cye-lm-tag"></p>
<ul><li><a href="http://docs.spring.io/spring-data/jpa/docs/1.8.x/reference/html/#repositories.query-methods.query-creation" target="_blank">Spring Data JPA Reference Manual: 3.4.2 Query Creation</a></li><li><a href="http://docs.spring.io/spring-data/jpa/docs/1.8.x/reference/html/#repositories.query-methods.query-property-expressions" target="_blank">Spring Data JPA Reference Manual: 3.4.3 Property expressions</a></li><li><a href="http://docs.spring.io/spring-data/jpa/docs/1.8.x/reference/html/#repositories.special-parameters" target="_blank">Spring Data JPA Reference Manual: 3.4.4 Special parameter handling</a></li><li><a href="http://docs.spring.io/spring-data/jpa/docs/1.8.x/reference/html/#repositories.limit-query-result" target="_blank">Spring Data JPA Reference Manual: 3.4.5 Limiting query results</a></li><li><a href="http://docs.spring.io/spring-data/jpa/docs/1.8.x/reference/html/#jpa.query-methods.query-creation" target="_blank">Spring Data JPA Reference Manual: 4.3.2 Query creation</a></li><li><a href="http://docs.spring.io/spring-data/jpa/docs/1.8.x/reference/html/#repository-query-keywords" target="_blank">Spring Data JPA Reference Manual: Appendix C:  Repository query keywords</a></li></ul></div><p class="cye-lm-tag">Let’s move on and create the query method that fulfils the requirements of our search function.</p>
<h2>Implementing the Search Function</h2><p class="cye-lm-tag">We can implement the search function by following these steps:</p>
<ol><li>Create a query method whose name starts with the prefix <em>findBy</em>.</li><li>Ensure that the query method returns todo entries whose description contains the given search term. We can do this by appending the property expression: <em>Description</em> and the keyword: <em>Contains</em> to the method name.</li><li>Configure the query method to return the information of a todo entry if the previous (2) or the next (4) search condition is true. We can do this by appending the keyword: <em>Or</em> to the method name.</li><li>Ensure that the query method returns todo entries whose title contains the given search term. We can do this by appending the property expression: <em>Title</em> and the keyword: <em>Contains</em> to the method name.</li><li>Ensure that the search is case insensitive. We can do this by appending the keyword: <em>AllIgnoreCase</em> to the method name.</li><li>Add two method parameters to the query method:<ol><li>Spring Data JPA uses the <em>descriptionPart</em> method parameter when it ensures that the description of the returned todo entry contains the given search term.</li><li>Spring Data JPA uses the <em>titlePart</em> method parameter when it ensures that the title of the returned todo entry contains the given search term.</li></ol></li><li>Set the type of the returned object to <em>List&lt;Todo&gt;</em>.</li></ol><p class="cye-lm-tag">The source code of our repository interface looks as follows:</p>
<div><div id="highlighter_605903" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1 highlighted">8</div><div class="line number9 index8 alt2 highlighted">9</div><div class="line number10 index9 alt1">10</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.jpa.repository.Query;</code></div><div class="line number2 index1 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.repository.Repository;</code></div><div class="line number3 index2 alt2">&nbsp;</div><div class="line number4 index3 alt1"><code class="java keyword">import</code> <code class="java plain">java.util.List;</code></div><div class="line number5 index4 alt2">&nbsp;</div><div class="line number6 index5 alt1"><code class="java keyword">interface</code> <code class="java plain">TodoRepository </code><code class="java keyword">extends</code> <code class="java plain">Repository&lt;Todo, Long&gt; {</code></div><div class="line number7 index6 alt2">&nbsp;</div><div class="line number8 index7 alt1 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">List&lt;Todo&gt; findByDescriptionContainsOrTitleContainsAllIgnoreCase(String descriptionPart,</code></div><div class="line number9 index8 alt2 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">String titlePart);</code></div><div class="line number10 index9 alt1"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><p class="cye-lm-tag">Let’s move on and find out when we should create our query methods by using the query generation from the method name strategy.</p>
<h2>When Should We Use the Query Generation From the Method Name Strategy?</h2><p class="cye-lm-tag">This query generation strategy has the following benefits:</p>
<ul><li>Creating simple queries is fast.</li><li>The method name of our query method describes the selected value(s) and the used search condition(s).</li></ul><p class="cye-lm-tag">This query generation strategy has the following weaknesses:</p>
<ul><li>The features of the method name parser determine what kind of queries we can create. If the method name parser doesn’t support the required keyword, we cannot use this strategy.</li><li>The method names of complex query methods are long and ugly.</li><li>There is no support for dynamic queries.</li></ul><p class="cye-lm-tag">When we think about the pros and cons of this strategy and take a second look at our examples, it becomes clear that the length of our query method name determines whether or not we should use this strategy.</p>
<p class="cye-lm-tag">I am not a big fan of “super long” method names because they become unreadable very fast. If we compare the method name: <em>findById</em> with the method name: <em>findByDescriptionContainsOrTitleContainsAllIgnoreCase</em>, we notice that first one is very easy to read. The second method name is not nearly as easy to read as the first one, but it is not impossible to read either (yet). It is a borderline case.</p>
<p class="cye-lm-tag">Because I want to write code that is easy to read, I think that we should use this strategy only when we are creating simple queries that have only one or two search conditions.</p>
<p class="cye-lm-tag">Let’s move on and summarize what we learned from this blog post.<br></p>
<p class="cye-lm-tag"></p>
<p class="cye-lm-tag"></p>
<h2>Summary</h2><p class="cye-lm-tag">This blog post has taught us the following things:</p>
<ul><li>If we want to use the query generation by method name strategy, the name of our query method must start with a special prefix.</li><li>We can select unique results by using the <em>Distinct</em> keyword.</li><li>We can limit the number of returned query results by using either the <em>Top</em> or the <em>First</em> keyword.</li><li>We can create search conditions by using property expressions and the keywords supported by Spring Data JPA.</li><li>We should use the query generation from the method name strategy only when our query is simple and has only one or two search conditions.</li></ul><p class="cye-lm-tag">The next part of this tutorial describes how we can <a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-creating-database-queries-with-the-query-annotation/">create query methods by using the <em>@Query</em> annotation</a>.</p>
<p class="cye-lm-tag"><strong>P.S.</strong> You can <a href="https://github.com/pkainulainen/spring-data-jpa-examples/tree/master/query-methods" target="_blank">get the example application of this blog post from Github</a>.</p>
<div class="note"> If you want to learn how to use Spring Data JPA, you should read my <a href="/spring-data-jpa-tutorial/">Spring Data JPA tutorial</a>.</div> <span id="tve_leads_end_content" style="display: block; visibility: hidden; border: 1px solid transparent;" class="cye-lm-tag"></span>
</div>

</div>




</div>
</div>
</div>
</div>
</div>
</div><p style="line-height: 24px;" data-unit="px" class="tve_p_center cye-lm-tag"><span class="tve_custom_font_size cye-lm-tag" style="font-size: 16px;">I will never rent, sell, or share your email address.<br></span></p>

</div></div></div></div></div></div></div>
<section id="comments"><div class="comments_intro"><span class="num_comments cye-lm-tag">15</span> comments… <a href="#commentform" rel="nofollow">add one</a></div><ul class="comment_list"><li class="comment even thread-even depth-1" id="comment-1346613"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Aleksandar</span>  <span class="comment_date cye-lm-tag">January 12, 2016, 18:02</span></div><div class="comment_text" id="comment-body-1346613"><p class="cye-lm-tag">Hi Petri,</p>
<p class="cye-lm-tag">Can I create a method that will return field instead the whole Todo entity by only using approach that you described above?</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-1346630"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">January 12, 2016, 18:41</span></div><div class="comment_text" id="comment-body-1346630"><p class="cye-lm-tag">Hi,</p>
<p class="cye-lm-tag">Unfortunately that is not supported by Spring Data JPA. However, you can create this query by <a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-creating-database-queries-with-the-query-annotation/" rel="nofollow">using the <code>@Query annotation</code></a>.</p>
</div> </div><ul class="children"><li class="comment even depth-3" id="comment-1419257"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Thomas Darimont</span>  <span class="comment_date cye-lm-tag">April 15, 2016, 12:02</span></div><div class="comment_text" id="comment-body-1419257"><p class="cye-lm-tag">For an @Query example that returns a single field value have a look at:<br> <a href="https://github.com/spring-projects/spring-data-jpa/blob/55d0e400eafc83b9b7f54db378c9fc742e768468/src/test/java/org/springframework/data/jpa/repository/sample/UserRepository.java#L289" rel="nofollow">https://github.com/spring-projects/spring-data-jpa/blob/55d0e400eafc83b9b7f54db378c9fc742e768468/src/test/java/org/springframework/data/jpa/repository/sample/UserRepository.java#L289</a></p>
</div> </div></li></ul></li></ul></li><li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1368713"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Mayank</span>  <span class="comment_date cye-lm-tag">February 10, 2016, 17:52</span></div><div class="comment_text" id="comment-body-1368713"><p class="cye-lm-tag">Hi Petri,</p>
<p class="cye-lm-tag">How can we write query for situation like below:</p>
<p class="cye-lm-tag">Select * from USER where ‘2016-02-15’ between VALID_FROM and VALID_TO;</p>
<p class="cye-lm-tag">Regards,<br> Mayank.</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-1368824"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">February 10, 2016, 21:20</span></div><div class="comment_text" id="comment-body-1368824"><p class="cye-lm-tag">Before I can answer to your question, I need a bit more information about your use case:</p>
<ul><li>Is the date: ‘2016-02-15’ stored into a field of the <code>User</code> entity? If so, what is the name of this field?</li><li>Do you want to create this query by using the query generation from the method name strategy or do you want to use JPQL?</li></ul></div> </div></li></ul></li><li class="comment odd alt thread-even depth-1" id="comment-1377412"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Gabriel Lourenco</span>  <span class="comment_date cye-lm-tag">February 22, 2016, 18:30</span></div><div class="comment_text" id="comment-body-1377412"><p class="cye-lm-tag">Hi Petri,</p>
<p class="cye-lm-tag">Your post helped me a lot. But I’m still having some problem on this one :</p>
<p class="cye-lm-tag">I need to retrieve all users from the table User where the name contains the letters on the input box, without taking in count Case Sensitive and Accent Sensitive.</p>
<p class="cye-lm-tag">So far I got this: findByNameIgnoreCaseContainsOrderByNameAsc() . But still not working. Can you give me some advice?</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-1377542"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">February 22, 2016, 22:09</span></div><div class="comment_text" id="comment-body-1377542"><p class="cye-lm-tag">Hi Gabriel,</p>
<p class="cye-lm-tag">I assume that the generated query ignores case, but it isn’t accent sensitive. Am I right? Which database are you using?</p>
<p class="cye-lm-tag">I think that it is not possible to create accent sensitive query if you use the query generation from the method name strategy or JPQL, but it might be possible to configure your database to ignore the accent of the name column. Also, you can always use a native SQL query for this purpose.</p>
</div> </div><ul class="children"><li class="comment odd alt depth-3" id="comment-1378353"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Gabriel Lourenco</span>  <span class="comment_date cye-lm-tag">February 23, 2016, 21:34</span></div><div class="comment_text" id="comment-body-1378353"><p class="cye-lm-tag">Hi Petri.</p>
<p class="cye-lm-tag">I’m using postgre (9.3). That is the point where I got stuck. My new approach is it to use native query indeed. I guess it will be easier. I’m thinking of enabling the unaccent extention from Postgre and use it in a native query. Do you think it is the best idea?</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-4" id="comment-1378370"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">February 23, 2016, 22:10</span></div><div class="comment_text" id="comment-body-1378370"><p class="cye-lm-tag">Hi Gabriel,</p>
<p class="cye-lm-tag">It is probably the fastest (and the best) way to solve your problem. Go for it! :)</p>
</div> </div><ul class="children"><li class="comment odd alt depth-5" id="comment-1380447"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Gabriel Lourenco</span>  <span class="comment_date cye-lm-tag">February 26, 2016, 16:55</span></div><div class="comment_text" id="comment-body-1380447"><p class="cye-lm-tag">Hi Petri.</p>
<p class="cye-lm-tag">I want to thank you. It worked perfectly. Thanks a lot.</p>
</div></div></li><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-5" id="comment-1380503"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">February 26, 2016, 19:01</span></div><div class="comment_text" id="comment-body-1380503"><p class="cye-lm-tag">You are welcome.</p>
</div></div></li></ul></li></ul></li></ul></li></ul></li><li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1421893"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Rafael Fuchs</span>  <span class="comment_date cye-lm-tag">April 17, 2016, 17:44</span></div><div class="comment_text" id="comment-body-1421893"><p class="cye-lm-tag">Hi</p>
<p class="cye-lm-tag">I would like to do the following, but the named method doesn’t work the way I want.<br> This way I’m getting the following error:</p>
<p class="cye-lm-tag">SEVERE: Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.springframework.dao.InvalidDataAccessApiUsageException: Parameter with that position [1] did not exist; nested exception is java.lang.IllegalArgumentException: Parameter with that position [1] did not exist] with root cause<br> java.lang.IllegalArgumentException: Parameter with that position [1] did not exist</p>
<p class="cye-lm-tag">@Query(value = “select j from Journal j where (j.title like ‘%?1%’ or j.description like ‘%?2%’) and j.category=?3”)<br> Page findByTitleContainingOrDescriptionContainingAndCategoryEqualsAllIgnoreCase(<br> String title, String description, String category, Pageable pageable);</p>
</div> </div><ul class="children"><li class="comment even depth-2" id="comment-1421897"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Rafael Fuchs</span>  <span class="comment_date cye-lm-tag">April 17, 2016, 17:51</span></div><div class="comment_text" id="comment-body-1421897"><p class="cye-lm-tag">I’ve tried with named paramenters, but it said that the parameter doesn’t exist like below.</p>
<p class="cye-lm-tag">SEVERE: Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.springframework.dao.InvalidDataAccessApiUsageException: Parameter with that name [partitle] did not exist; nested exception is java.lang.IllegalArgumentException: Parameter with that name [partitle] did not exist] with root cause<br> java.lang.IllegalArgumentException: Parameter with that name [partitle] did not exist</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-3" id="comment-1423014"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">April 18, 2016, 18:23</span></div><div class="comment_text" id="comment-body-1423014"><p class="cye-lm-tag">That is indeed a weird problem (I have not experienced this myself). What Spring Data JPA version are you using? Also, have you tried using the CONCAT function (<a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-creating-database-queries-with-the-query-annotation/" rel="nofollow">see this blog post</a>)?</p>
</div> </div></li></ul></li></ul></li></ul></div> </section>
<br><hr>

<h2>7 Creating Database Queries With the @Query Annotation</h2>
<div class="post_content" itemprop="articleBody"><p class="cye-lm-tag"><a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-creating-database-queries-from-method-names/">The previous part of this tutorial</a> described how we can create database queries from the method names of our query methods.</p>
<p class="cye-lm-tag">Although that strategy has its advantages, it has its weaknesses as well. This blog post describes how we can avoid those weaknesses by using the <em>@Query</em> annotation.</p>
<p class="cye-lm-tag">We will also implement a simple search function that has two requirements:</p>
<ul><li>It must return todo entries whose title or description contains the given search term.</li><li>The search must be case insensitive.</li></ul><p class="cye-lm-tag">Let’s get started.</p>
<div class="note"> <strong>Additional Reading:</strong><p class="cye-lm-tag"></p>
<p class="cye-lm-tag">If you are not familiar with Spring Data JPA, <strong>you should read</strong> the following blog posts before you continue reading this blog post:</p>
<ul><li><a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-introduction/">Spring Data JPA Tutorial: Introduction</a> provides a quick introduction to Spring Data JPA and gives an overview of the Spring Data repository interfaces.</li><li><a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-getting-the-required-dependencies/">Spring Data JPA Tutorial: Getting the Required Dependencies</a> describes how you can get the required dependencies.</li><li><a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-part-one-configuration/">Spring Data JPA Tutorial: Configuration</a> describes how you can configure the persistence layer of a Spring application that uses Spring Data JPA.</li><li><a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-introduction-to-query-methods/">Spring Data JPA Tutorial: Introduction to Query Methods</a> describes how you can pass method parameters to your query methods and identifies the “legal” return values of Spring Data JPA query methods.</li></ul></div><h2>Creating Query Methods</h2><p class="cye-lm-tag">We can configure the invoked database query by annotating the query method with the <em>@Query</em> annotation. It supports both JPQL and SQL queries, and the query that is specified by using the <em>@Query</em> annotation precedes all other query generation strategies.</p>
<p class="cye-lm-tag">In other words, if we create a query method called <em>findbyId()</em> and annotate it with the <em>@Query</em> annotation, Spring Data JPA won’t (necessarily) find the entity whose <em>id</em> property is equal than the given method parameter. It invokes the query that is configured by using the <em>@Query</em> annotation.</p>
<p class="cye-lm-tag"></p>
<p class="cye-lm-tag"><strong>Example:</strong></p>
<p class="cye-lm-tag">Let’s assume that our repository interface looks as follows:</p>
<div><div id="highlighter_691285" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2 highlighted">7</div><div class="line number8 index7 alt1 highlighted">8</div><div class="line number9 index8 alt2">9</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.repository.Repository;</code></div><div class="line number2 index1 alt1"><code class="java spaces">&nbsp;</code>&nbsp;</div><div class="line number3 index2 alt2"><code class="java keyword">import</code> <code class="java plain">java.util.Optional;</code></div><div class="line number4 index3 alt1"><code class="java spaces">&nbsp;</code>&nbsp;</div><div class="line number5 index4 alt2"><code class="java keyword">interface</code> <code class="java plain">TodoRepository </code><code class="java keyword">extends</code> <code class="java plain">Repository&lt;Todo, Long&gt; {</code></div><div class="line number6 index5 alt1"><code class="java spaces">&nbsp;</code>&nbsp;</div><div class="line number7 index6 alt2 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Query</code><code class="java plain">(</code><code class="java string">"SELECT t FROM Todo t WHERE t.title = 'title'"</code><code class="java plain">)</code></div><div class="line number8 index7 alt1 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java plain">List&lt;Todo&gt; findById();</code></div><div class="line number9 index8 alt2"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><p class="cye-lm-tag">Even though the <em>findById()</em> method follows the naming convention that is used to create database queries from the method name of the query method, the <em>findById()</em> method returns todo entries whose title is ‘title’, because that is the query which is specified by using the <em>@Query</em> annotation.</p>
<div class="note"> <strong>Additional Reading:</strong><p class="cye-lm-tag"></p>
<ul><li><a href="http://docs.spring.io/spring-data/jpa/docs/current/api/org/springframework/data/jpa/repository/Query.html" target="_blank">The Javadoc of the <em>@Query</em> annotation</a></li><li><a href="http://docs.spring.io/spring-data/jpa/docs/1.8.x/reference/html/#jpa.query-methods.at-query" target="_blank">Spring Data JPA Reference Manual: 4.3 Using @Query</a></li><li><a href="https://spring.io/blog/2014/07/15/spel-support-in-spring-data-jpa-query-definitions" target="_blank">SpEL support in Spring Data JPA @Query definitions</a></li></ul></div><p class="cye-lm-tag">Let’s find out how we can create both JPQL and SQL queries with the <em>@Query</em> annotation.</p>
<h3>Creating JPQL Queries</h3><p class="cye-lm-tag">We can create a JPQL query with the @Query annotation by following these steps:</p>
<ol><li>Add a query method to our repository interface.</li><li>Annotate the query method with the <em>@Query</em> annotation, and specify the invoked query by setting it as the value of the <em>@Query</em> annotation.</li></ol><p class="cye-lm-tag">The source code of our repository interface looks as follows:</p>
<div><div id="highlighter_484831" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2 highlighted">7</div><div class="line number8 index7 alt1 highlighted">8</div><div class="line number9 index8 alt2">9</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.repository.Repository;</code></div><div class="line number2 index1 alt1"><code class="java spaces">&nbsp;</code>&nbsp;</div><div class="line number3 index2 alt2"><code class="java keyword">import</code> <code class="java plain">java.util.Optional;</code></div><div class="line number4 index3 alt1"><code class="java spaces">&nbsp;</code>&nbsp;</div><div class="line number5 index4 alt2"><code class="java keyword">interface</code> <code class="java plain">TodoRepository </code><code class="java keyword">extends</code> <code class="java plain">Repository&lt;Todo, Long&gt; {</code></div><div class="line number6 index5 alt1"><code class="java spaces">&nbsp;</code>&nbsp;</div><div class="line number7 index6 alt2 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Query</code><code class="java plain">(</code><code class="java string">"SELECT t FROM Todo t WHERE t.title = 'title'"</code><code class="java plain">)</code></div><div class="line number8 index7 alt1 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java plain">List&lt;Todo&gt; findByTitle();</code></div><div class="line number9 index8 alt2"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><div class="note"> <strong>Additional Reading:</strong><p class="cye-lm-tag"></p>
<ul><li><a href="http://docs.oracle.com/javaee/7/tutorial/persistence-querylanguage.htm#BNBTG" target="_blank">Java EE 7 tutorial: The Java Persistence Query Language</a></li></ul></div><h3>Creating SQL Queries</h3><p class="cye-lm-tag">We can create a SQL query with the <em>@Query</em> annotation by following these steps:</p>
<ol><li>Add a query method to our repository interface.</li><li>Annotate the query method with the <em>@Query</em> annotation, and specify the invoked query by setting it as the value of the <em>@Query</em> annotation’s <em>value</em> attribute.</li><li>Set the value of the <em>@Query</em> annotation’s <em>nativeQuery</em> attribute to true.</li></ol><p class="cye-lm-tag">The source code of our repository interface looks as follows:</p>
<div><div id="highlighter_316723" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2 highlighted">7</div><div class="line number8 index7 alt1 highlighted">8</div><div class="line number9 index8 alt2 highlighted">9</div><div class="line number10 index9 alt1 highlighted">10</div><div class="line number11 index10 alt2">11</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.repository.Repository;</code></div><div class="line number2 index1 alt1"><code class="java spaces">&nbsp;</code>&nbsp;</div><div class="line number3 index2 alt2"><code class="java keyword">import</code> <code class="java plain">java.util.Optional;</code></div><div class="line number4 index3 alt1"><code class="java spaces">&nbsp;</code>&nbsp;</div><div class="line number5 index4 alt2"><code class="java keyword">interface</code> <code class="java plain">TodoRepository </code><code class="java keyword">extends</code> <code class="java plain">Repository&lt;Todo, Long&gt; {</code></div><div class="line number6 index5 alt1"><code class="java spaces">&nbsp;</code>&nbsp;</div><div class="line number7 index6 alt2 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Query</code><code class="java plain">(value = </code><code class="java string">"SELECT * FROM todos t WHERE t.title = 'title'"</code><code class="java plain">,</code></div><div class="line number8 index7 alt1 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">nativeQuery=</code><code class="java keyword">true</code></div><div class="line number9 index8 alt2 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">)</code></div><div class="line number10 index9 alt1 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java plain">List&lt;Todo&gt; findByTitle();</code></div><div class="line number11 index10 alt2"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><div class="note"> <strong>Additional Reading:</strong><p class="cye-lm-tag"></p>
<ul><li><a href="https://blog.udemy.com/beginners-guide-to-sql/" target="_blank">A Beginner’s Guide to SQL</a></li><li><a href="http://www.w3schools.com/sql/" target="_blank">W3schools.com: SQL Tutorial</a></li></ul></div><p class="cye-lm-tag">Let’s move on and find out how we can create a query method that fulfils the requirements of our search function.</p>
<h2>Implementing the Search Function</h2><p class="cye-lm-tag">This section describes how we can implement a case insensitive search function that returns all todo entries whose title or description contains the given search term.</p>
<h3>Implementing the Search Function With JPQL</h3><p class="cye-lm-tag">We can create the JPQL query that fulfils the requirements of our search function by following these steps:</p>
<ol><li>Create a query method that returns a list of <em>Todo</em> objects.</li><li>Annotate the method with the <em>@Query</em> annotation.</li><li>Create the JPQL query which uses named parameters and returns todo entries whose title or description contains the given search term (remember to ignore case). Set the created query as the value of the <em>@Query</em> annotation.</li><li>Add one method parameter to the query method and configure the name of the named parameter by annotating the method parameter with the <em>@Param</em> annotation.</li></ol><p class="cye-lm-tag">The source code of our repository interface looks as follows:</p>
<div><div id="highlighter_608444" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2 highlighted">9</div><div class="line number10 index9 alt1 highlighted">10</div><div class="line number11 index10 alt2 highlighted">11</div><div class="line number12 index11 alt1 highlighted">12</div><div class="line number13 index12 alt2">13</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.jpa.repository.Query;</code></div><div class="line number2 index1 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.repository.Repository;</code></div><div class="line number3 index2 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.repository.query.Param;</code></div><div class="line number4 index3 alt1">&nbsp;</div><div class="line number5 index4 alt2"><code class="java keyword">import</code> <code class="java plain">java.util.List;</code></div><div class="line number6 index5 alt1">&nbsp;</div><div class="line number7 index6 alt2"><code class="java keyword">interface</code> <code class="java plain">TodoRepository </code><code class="java keyword">extends</code> <code class="java plain">Repository&lt;Todo, Long&gt; {</code></div><div class="line number8 index7 alt1">&nbsp;</div><div class="line number9 index8 alt2 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Query</code><code class="java plain">(</code><code class="java string">"SELECT t FROM Todo t WHERE "</code> <code class="java plain">+</code></div><div class="line number10 index9 alt1 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java string">"LOWER(t.title) LIKE LOWER(CONCAT('%',:searchTerm, '%')) OR "</code> <code class="java plain">+</code></div><div class="line number11 index10 alt2 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java string">"LOWER(t.description) LIKE LOWER(CONCAT('%',:searchTerm, '%'))"</code><code class="java plain">)</code></div><div class="line number12 index11 alt1 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">List&lt;Todo&gt; findBySearchTerm(</code><code class="java color1">@Param</code><code class="java plain">(</code><code class="java string">"searchTerm"</code><code class="java plain">) String searchTerm);</code></div><div class="line number13 index12 alt2"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><div class="note"> <strong>Additional Reading:</strong><p class="cye-lm-tag"></p>
<ul><li><a href="http://www.objectdb.com/java/jpa/query/jpql/string#CONCAT_-_String_Concatenation_" target="_blank">CONCAT – String Concatenation</a></li><li><a href="http://www.objectdb.com/java/jpa/query/jpql/string#LOWER_and_UPPER_-_Changing_String_Case_" target="_blank">LOWER and UPPER – Changing String Case</a></li><li><a href="http://docs.spring.io/spring-data/commons/docs/current/api/org/springframework/data/repository/query/Param.html" target="_blank">The Javadoc of the <em>@Param</em> annotation</a></li><li><a href="http://docs.spring.io/spring-data/jpa/docs/1.8.x/reference/html/#jpa.named-parameters" target="_blank">Spring Data JPA Reference Manual: 4.3.5 Using named parameters</a></li></ul></div><p class="cye-lm-tag">Let’s find out how we can implement our search function by using SQL.</p>
<h3>Implementing the Search Function With SQL</h3><p class="cye-lm-tag">We can create the SQL query that fulfils the requirements of our search function by following these steps:</p>
<ol><li>Create a query method that returns a list of <em>Todo</em> objects.</li><li>Annotate the method with the <em>@Query</em> annotation.</li><li>Create the invoked SQL query by following these steps:<ol><li>Create the SQL query which uses named parameters and returns todo entries whose title or description contains the given search term (remember to ignore case). Set the created query as the value of the <em>@Query</em> annotation’s <em>value</em> attribute.</li><li>Set the value of the <em>@Query</em> annotation’s <em>nativeQuery</em> attribute to <em>true</em>.</li></ol></li><li>Add one method parameter to the query method and configure the name of the named parameter by annotating the method parameter with the <em>@Param</em> annotation.</li></ol><p class="cye-lm-tag">The source code of our repository interface looks as follows:</p>
<div><div id="highlighter_822400" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2 highlighted">9</div><div class="line number10 index9 alt1 highlighted">10</div><div class="line number11 index10 alt2 highlighted">11</div><div class="line number12 index11 alt1 highlighted">12</div><div class="line number13 index12 alt2 highlighted">13</div><div class="line number14 index13 alt1 highlighted">14</div><div class="line number15 index14 alt2">15</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.jpa.repository.Query;</code></div><div class="line number2 index1 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.repository.Repository;</code></div><div class="line number3 index2 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.repository.query.Param;</code></div><div class="line number4 index3 alt1">&nbsp;</div><div class="line number5 index4 alt2"><code class="java keyword">import</code> <code class="java plain">java.util.List;</code></div><div class="line number6 index5 alt1">&nbsp;</div><div class="line number7 index6 alt2"><code class="java keyword">interface</code> <code class="java plain">TodoRepository </code><code class="java keyword">extends</code> <code class="java plain">Repository&lt;Todo, Long&gt; {</code></div><div class="line number8 index7 alt1">&nbsp;</div><div class="line number9 index8 alt2 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Query</code><code class="java plain">(value = </code><code class="java string">"SELECT * FROM todos t WHERE "</code> <code class="java plain">+</code></div><div class="line number10 index9 alt1 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java string">"LOWER(t.title) LIKE LOWER(CONCAT('%',:searchTerm, '%')) OR "</code> <code class="java plain">+</code></div><div class="line number11 index10 alt2 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java string">"LOWER(t.description) LIKE LOWER(CONCAT('%',:searchTerm, '%'))"</code><code class="java plain">,</code></div><div class="line number12 index11 alt1 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">nativeQuery = </code><code class="java keyword">true</code></div><div class="line number13 index12 alt2 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">)</code></div><div class="line number14 index13 alt1 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">List&lt;Todo&gt; findBySearchTermNative(</code><code class="java color1">@Param</code><code class="java plain">(</code><code class="java string">"searchTerm"</code><code class="java plain">) String searchTerm);</code></div><div class="line number15 index14 alt2"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><div class="note"> <strong>Additional Reading:</strong><p class="cye-lm-tag"></p>
<ul><li><a href="http://www.tutorialspoint.com/sql/sql-concat-function.htm" target="_blank">SQL – CONCAT Function</a></li><li><a href="http://www.tutorialspoint.com/sql/sql-string-functions.htm#function_lower" target="_blank">SQL – LOWER Function</a></li><li><a href="http://docs.spring.io/spring-data/commons/docs/current/api/org/springframework/data/repository/query/Param.html" target="_blank">The Javadoc of the <em>@Param</em> annotation</a></li><li><a href="http://docs.spring.io/spring-data/jpa/docs/1.8.x/reference/html/#jpa.named-parameters" target="_blank">Spring Data JPA Reference Manual: 4.3.5 Using named parameters</a></li></ul></div><p class="cye-lm-tag">Let’s move on and find out when we should create our database queries with the <em>@Query</em> annotation.</p>
<h2>When Should We Use the @Query Annotation?</h2><p class="cye-lm-tag">The <em>@Query</em> annotation has the following benefits:</p>
<ul><li>It supports both JPQL and SQL.</li><li>The invoked query is found above the query method. In other words, it is easy to find out what the query method does.</li><li>There is no naming convention for query method names.</li></ul><p class="cye-lm-tag">The <em>@Query</em> annotation has the following drawbacks:</p>
<ul><li>There is no support for dynamic queries.</li><li>If we use SQL queries, we cannot change the used database without testing that our SQL queries work as expected.</li></ul><p class="cye-lm-tag">When we think about the pros and cons of the <em>@Query</em> annotation, it becomes clear that the query methods that use this strategy aren’t as easy to write or read as the query methods that use the <a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-creating-database-queries-from-method-names/">query generation from the method name strategy</a>.</p>
<p class="cye-lm-tag">However, these query methods have two crucial advantages:</p>
<ol><li>If we need to find out what database query is invoked by our query method, we can find the invoked query above the query method.</li><li>The code that uses our query methods is easy to read because we don’t have to use long method names.</li></ol><p class="cye-lm-tag">Thus, if we don’t want to use the query generation from the method name strategy, because the names of our query methods would be too long, we should use the <em>@Query</em> annotation.</p>
<p class="cye-lm-tag">Let’s move on and summarize what we learned from this blog post.<br></p>
<p class="cye-lm-tag"></p>
<p class="cye-lm-tag"></p>
<h2>Summary</h2><p class="cye-lm-tag">This blog post has taught us three things:</p>
<ul><li>The database queries specified by using the <em>@Query</em> annotation precedes all other query generation strategies.</li><li>The <em>@Query</em> annotation supports both JPQL and SQL queries.</li><li>If we cannot create our database queries from the method names of our query methods, because the method names would be too long, we should create them by using the <em>@Query</em> annotation.</li></ul><p class="cye-lm-tag">The next part of my Spring Data JPA tutorial describes how we can <a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-creating-database-queries-with-named-queries/">create database queries by using named queries</a>.</p>
<p class="cye-lm-tag"><strong>P.S.</strong> You get can <a href="https://github.com/pkainulainen/spring-data-jpa-examples/tree/master/query-methods" target="_blank">get the example application of this blog post from Github</a>.</p>
<div class="note"> If you want to learn how to use Spring Data JPA, you should read my <a href="/spring-data-jpa-tutorial/">Spring Data JPA tutorial</a>.</div> <span id="tve_leads_end_content" style="display: block; visibility: hidden; border: 1px solid transparent;" class="cye-lm-tag"></span>
</div>

</div>




</div>
</div>
</div>
</div>
</div>
</div><p style="line-height: 24px;" data-unit="px" class="tve_p_center cye-lm-tag"><span class="tve_custom_font_size cye-lm-tag" style="font-size: 16px;">I will never rent, sell, or share your email address.<br></span></p>

</div></div></div></div></div></div></div>
<section id="comments"><div class="comments_intro"><span class="num_comments cye-lm-tag">27</span> comments… <a href="#commentform" rel="nofollow">add one</a></div><ul class="comment_list"><li class="comment even thread-even depth-1" id="comment-1242646"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag"><a href="http://Nod.Edu.vn/" rel="external nofollow" class="url">tin tuc</a></span>  <span class="comment_date cye-lm-tag">July 16, 2015, 05:41</span></div><div class="comment_text" id="comment-body-1242646"><p class="cye-lm-tag">Thanks very іnteresting blog!</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-1242700"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">July 16, 2015, 10:50</span></div><div class="comment_text" id="comment-body-1242700"><p class="cye-lm-tag">You are welcome!</p>
</div> </div></li></ul></li><li class="comment even thread-odd thread-alt depth-1" id="comment-1299394"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">TheZeroCode</span>  <span class="comment_date cye-lm-tag">October 27, 2015, 15:51</span></div><div class="comment_text" id="comment-body-1299394"><p class="cye-lm-tag">This is the first tym m reading about “Spring Data JPA” and this blog has given me crystal clear idea about the topic.<br> Thanks :)</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-1299559"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">October 27, 2015, 19:28</span></div><div class="comment_text" id="comment-body-1299559"><p class="cye-lm-tag">You are welcome! Also, thank you for your kind words. I really appreciate them.</p>
</div> </div></li></ul></li><li class="comment even thread-even depth-1" id="comment-1364170"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Marissa</span>  <span class="comment_date cye-lm-tag">February 3, 2016, 17:38</span></div><div class="comment_text" id="comment-body-1364170"><p class="cye-lm-tag">Your tutorials have been very helpful. I’ve been following along with my own tables/entities, and I’m having an issue I haven’t been able to solve at this point. My table is named poc_site, and my entity class is Site. I can’t use any of these as queries:</p>
<pre><code> 
"select s from Site s where s.site_name = 'Test Site'
"select s from PocSite s where s.site_name = 'Test Site'"
"select s from Poc_site s where s.site_name = 'Test Site'"
</code></pre><p class="cye-lm-tag">I've been googling for how to determine the appropriate name to enter, and haven't found anything... how are these names determined here?<br> Thanks!</p>
</div> </div><ul class="children"><li class="comment odd alt depth-2" id="comment-1364179"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Marissa</span>  <span class="comment_date cye-lm-tag">February 3, 2016, 17:47</span></div><div class="comment_text" id="comment-body-1364179"><p class="cye-lm-tag">Actually, I figured out my issue…</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-3" id="comment-1364182"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">February 3, 2016, 17:55</span></div><div class="comment_text" id="comment-body-1364182"><p class="cye-lm-tag">Hi Marissa,</p>
<p class="cye-lm-tag">I am happy to hear that you where able to solve your problem. I assume that your problem was that the <code>site_name</code> is the name of the database column and not the name of the entity class’ field. Am I correct?</p>
</div> </div></li></ul></li></ul></li><li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1379450"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Venkata</span>  <span class="comment_date cye-lm-tag">February 25, 2016, 07:10</span></div><div class="comment_text" id="comment-body-1379450"><p class="cye-lm-tag">Hi Petri,<br> Thank You for the blog.<br> How we can give setfetchsize with @Query.<br> Thanks in advance</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-1379850"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">February 25, 2016, 20:35</span></div><div class="comment_text" id="comment-body-1379850"><p class="cye-lm-tag">Hi Venkata,</p>
<p class="cye-lm-tag">You can use <a href="http://docs.spring.io/spring-data/jpa/docs/current/api/org/springframework/data/jpa/repository/QueryHints.html" target="_blank" rel="nofollow">the <code>@QueryHints</code> annotation</a> for this purpose. Check out <a href="http://stackoverflow.com/questions/20284503/set-the-fetch-size-with-spring-data" target="_blank" rel="nofollow">this StackOverflow question</a>. Its answer explains how you can set the fetch size.</p>
</div> </div></li></ul></li><li class="comment odd alt thread-even depth-1" id="comment-1410668"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Lukas Tibursky</span>  <span class="comment_date cye-lm-tag">April 4, 2016, 18:29</span></div><div class="comment_text" id="comment-body-1410668"><p class="cye-lm-tag">thanks a lot! this passage in the custom query gave me headaches before I read this: LIKE LOWER(CONCAT(‘%’,:searchTerm, ‘%’))</p>
<p class="cye-lm-tag">Now its clear!<br> :)</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-1410729"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">April 4, 2016, 20:16</span></div><div class="comment_text" id="comment-body-1410729"><p class="cye-lm-tag">You are welcome! I am happy to hear that this blog post was useful to you.</p>
</div> </div></li></ul></li><li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1432157"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Fernando</span>  <span class="comment_date cye-lm-tag">April 29, 2016, 14:35</span></div><div class="comment_text" id="comment-body-1432157"><p class="cye-lm-tag">Hey Petri, your blog is awesome. It is being very useful to me and my projects.. I want to ask you if could you make a post about calling stored procedures that returns data (for example a list of articles) with JPA (Spring or Hibernate).</p>
<p class="cye-lm-tag">Thank you!</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-1435780"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">May 4, 2016, 22:19</span></div><div class="comment_text" id="comment-body-1435780"><p class="cye-lm-tag">Hi Fernando,</p>
<p class="cye-lm-tag">Check out a blog post titled: <a href="http://www.thoughts-on-java.org/call-stored-procedures-jpa/" target="_blank" rel="nofollow">How to call stored procedures in JPA</a>.</p>
</div> </div></li></ul></li><li class="comment odd alt thread-even depth-1" id="comment-1436903"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Joao</span>  <span class="comment_date cye-lm-tag">May 6, 2016, 16:11</span></div><div class="comment_text" id="comment-body-1436903"><p class="cye-lm-tag">Hi Petri!</p>
<p class="cye-lm-tag">Is there a way to eager load enities wher usin native queries?</p>
<p class="cye-lm-tag">Assume EntityA has a list of EntityB and a list of EntityC. What i want is:</p>
<p class="cye-lm-tag">@Query(value = “SELECT a.*, b.*, c.* ” +<br> “FROM A a ” +<br> “JOIN B b ON b.idA = a.id ” +<br> “JOIN C c ON c.idA = a.id ” +<br> “WHERE a.title = ‘title'”,<br> nativeQuery=true<br> )<br> public EntityA findByTitle();</p>
<p class="cye-lm-tag">i would like thies method to return the full graph(A’s with its B’s and C’s), and not only A’s, lazy loading B’s and C’s.</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-1443614"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">May 17, 2016, 19:19</span></div><div class="comment_text" id="comment-body-1443614"><p class="cye-lm-tag">Hi,</p>
<p class="cye-lm-tag">I have to admit that I don’t know if JPA supports this. However, it is possible to do this if you are using Hibernate. Unfortunately you have to use Hibernate specific API. If you want to do this, <a href="http://www.journaldev.com/3422/hibernate-native-sql-example-addscalar-addentity-addjoin-parameter-example" target="_blank" rel="nofollow">you should check out this blog post</a>.</p>
</div> </div></li></ul></li><li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1444092"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Branko</span>  <span class="comment_date cye-lm-tag">May 18, 2016, 17:30</span></div><div class="comment_text" id="comment-body-1444092"><p class="cye-lm-tag">Hello,</p>
<p class="cye-lm-tag">I am having problems getting Page results for generic repository.</p>
<pre><code>
// find all by username - pageable
Page findByUsername(final String username,Pageable pageable);  returns empty.
</code>
</pre><p class="cye-lm-tag">also</p>
<pre><code>
@Query("select d from #{#entityName} d where d.username= :username")
Page findByUsername(@Param("username")final String username,Pageable pageable);
</code>
</pre><p class="cye-lm-tag">Interesting thing is if i use List everything works just fine.<br> Do you have any idea how to get around this issue?</p>
<p class="cye-lm-tag">Thanks.</p>
</div> </div><ul class="children"><li class="comment even depth-2" id="comment-1444494"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Branko</span>  <span class="comment_date cye-lm-tag">May 19, 2016, 11:46</span></div><div class="comment_text" id="comment-body-1444494"><p class="cye-lm-tag">Let me correct myself. It is not generic repository, rather another interface with custom methods.</p>
<p class="cye-lm-tag">public interface MyRepository extends jpaRepository,IRepositoryWithUsername</p>
<p class="cye-lm-tag">then</p>
<pre><code>
public interface IRepositoryWithUsername {

	@Query("select count (*) from #{#entityName} a where a.username=:username")
	Long countForUsername(@Param("username")final String username);
	
	// find one
	T2 findByIdAndUsername(final Long id,final String username);
	
	// find all by username - pageable
	Page findByUsername(final String username,Pageable pageable);
	
	// find all by username 
	List findByUsername(final String username);

	// find all by username Sort
	Iterable findAllByUsername(final String username,Sort sort);

	T2 findOneByUsername(final String username);
}
</code>
</pre><p class="cye-lm-tag">Works fine for one instance and also List but Slice and Page are returning empty result.</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-3" id="comment-1444674"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">May 19, 2016, 19:31</span></div><div class="comment_text" id="comment-body-1444674"><p class="cye-lm-tag">Hi,</p>
<p class="cye-lm-tag">Hi have a vague memory that I had a similar problem (although I used the <code>@Query</code> annotation). If I remember correctly, I solved it by specifying the count query. You can specify it by annotating your query method with the <code>@Query</code> annotation and setting the count query as the value of <a href="http://docs.spring.io/spring-data/jpa/docs/1.10.1.RELEASE/api/org/springframework/data/jpa/repository/Query.html#countQuery--" target="_blank" rel="nofollow">the <code>@Query</code> annotation’s <code>countQuery</code> attribute</a>.</p>
<p class="cye-lm-tag">Let me know if this solved your problem.</p>
</div> </div></li></ul></li></ul></li><li class="comment even thread-even depth-1" id="comment-1448343"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Farooq Ahmed</span>  <span class="comment_date cye-lm-tag">May 27, 2016, 16:39</span></div><div class="comment_text" id="comment-body-1448343"><p class="cye-lm-tag">Hi Dear,</p>
<p class="cye-lm-tag"> Your link has helped me a lot but I have a question.<br> I want to write the native  query in @Query annotation with where clause customized like select a.name from tableA a where [param1]=?1 and  [param1]=?2</p>
<p class="cye-lm-tag">If i do not send a param1 value it should not restrict the query upon it.</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-1448391"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">May 27, 2016, 18:59</span></div><div class="comment_text" id="comment-body-1448391"><p class="cye-lm-tag">Hi,</p>
<p class="cye-lm-tag">Unfortunately you cannot use that query with the <code>@Query</code> annotation. You have to use either <a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-part-four-jpa-criteria-queries/" rel="nofollow">JPA criteria API</a> or <a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-part-five-querydsl/" rel="nofollow">Querydsl</a>.</p>
</div> </div><ul class="children"><li class="comment even depth-3" id="comment-1450336"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Farooq Ahmed Rahu</span>  <span class="comment_date cye-lm-tag">May 31, 2016, 14:48</span></div><div class="comment_text" id="comment-body-1450336"><p class="cye-lm-tag">Hi Dear,</p>
<p class="cye-lm-tag">I am using StringBuilder to use with createNamedQuery but on line javax.persistence.Query query = em.createNamedQuery(queryBuilder.toString());  it returns null pointer.</p>
<p class="cye-lm-tag">do not know what is causing the exception.</p>
<p class="cye-lm-tag">here is my code.</p>
<pre><code>
@Repository
@Transactional
public class JpaUserDaoImpl implements UserDao 
{
	@PersistenceContext
	private EntityManager em;
	
	@Override
	@Transactional(readOnly=true)
	public List getCustomerReport(String custId, String brandId) {
		
		 StringBuilder queryBuilder = new StringBuilder(
			        "SELECT a FROM tableA c WHERE ");
			    List paramList = new ArrayList();
			    if(custId!=null &amp;&amp; !custId.isEmpty()){
			    paramList.add(" c.customer_id = '?'"
			        .replace("?", custId));
			    }
			    if(brandId!=null &amp;&amp; !brandId.isEmpty()){
			    paramList.add(" o.brand_id = '?'"
			        .replace("?", brandId));
			    }			 
			    Iterator itr = paramList.iterator();
			    while(itr.hasNext()) {
			        queryBuilder.append(itr.next());			       
			        if (itr.hasNext()) {
			            queryBuilder.append(" and ");
			        }
			    }
----&gt; NPE       javax.persistence.Query query = em
						.createNamedQuery(queryBuilder.toString()); 

			    List resultList = (List)query.getResultList();
			    return resultList;
	}
}
</code>
</pre><p class="cye-lm-tag">Project based on Spring boot Spring JPA repositories.</p>
<p class="cye-lm-tag">Thanks</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-4" id="comment-1451006"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">June 1, 2016, 21:13</span></div><div class="comment_text" id="comment-body-1451006"><p class="cye-lm-tag">I cannot find any obvious bugs from your code. If the <code>NullPointerException</code> is thrown from that line, either <code>EntityManager</code> or <code>StringBuilder</code> is <code>null</code>. I recommend that you use a debugger since it will tell you which object is <code>null</code>.</p>
<p class="cye-lm-tag">Also, since you are writing a dynamic query, you should use JPA Criteria API or Querydsl. These tools will make your code cleaner (if you use Querydsl) and safer.</p>
</div> </div></li></ul></li></ul></li></ul></li><li class="comment even thread-odd thread-alt depth-1" id="comment-1451206"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Farooq Ahmed Rahu</span>  <span class="comment_date cye-lm-tag">June 2, 2016, 08:23</span></div><div class="comment_text" id="comment-body-1451206"><p class="cye-lm-tag">Dear Petri,<br> I have just implemented the JDBC through which run queries and returning the list.<br> See the chunk of code.<br> [<br> Connection con = getConnection();<br> ResultSet resultset = getStatement(con).executeQuery(queryBuilder.toString());</p>
<p class="cye-lm-tag"> CustomerReportBean customerReportBean = new CustomerReportBean();<br> while (resultset.next()) {<br> customerReportBean = new CustomerReportBean();<br> if (resultset.getString(1) != null) {<br> customerReportBean.setDate(resultset.getString(1));<br> customerReportList.add(customerReportBean);<br> }<br> // Closed connection<br> con.close();<br> ]</p>
<p class="cye-lm-tag"> private Connection getConnection() {<br> DataSource ds = (DataSource) ApplicationContextProvider.getApplicationContext().getBean(“dataSource”);<br> Connection con = null;<br> try {<br> con = ds.getConnection();<br> } catch (SQLException e) {<br> e.printStackTrace();<br> }<br> return con;<br> }</p>
<p class="cye-lm-tag">Kindly let me know is it a good practice or not, will it reduce the efficiency of the application.<br> Just i am doing for reporting purpose as i am not using any reporting tool.</p>
<p class="cye-lm-tag">Thanks</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-1451339"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">June 2, 2016, 17:39</span></div><div class="comment_text" id="comment-body-1451339"><p class="cye-lm-tag">Hi,</p>
<p class="cye-lm-tag">Spring Framework provides <a href="http://docs.spring.io/spring/docs/4.2.x/spring-framework-reference/htmlsingle/#jdbc-core" target="_blank" rel="nofollow">an excellent support for invoking SQL queries</a>. If you use the <code>JdbcTemplate</code> (or <code>NamedParameterJdbcTemplate</code>) you don’t have to write so much boilerplate code. This keeps your code a lot cleaner. In other words, use the components provided by Spring Framework (you won’t be disappointed).</p>
</div> </div><ul class="children"><li class="comment even depth-3" id="comment-1451498">


<ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-4" id="comment-1452004"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">June 4, 2016, 11:36</span></div><div class="comment_text" id="comment-body-1452004"><p class="cye-lm-tag">You are welcome!</p>
</div> </div></li></ul></li></ul></li></ul></li></ul></div> </section>
<br><hr>

<h2>8 Creating Database Queries With Named Queries</h2>
<div class="post_content" itemprop="articleBody"><p class="cye-lm-tag">The previous part of this tutorial described how we can <a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-creating-database-queries-with-the-query-annotation/">create database queries with the @Query annotation</a>.</p>
<p class="cye-lm-tag">This tutorial has now covered two of the three methods which we can use to create query methods with Spring Data JPA. This blog post describes the last method. We will learn to create database queries by using named queries.</p>
<p class="cye-lm-tag">We will also implement a search function that has two requirements:</p>
<ul><li>It must return todo entries whose title or description contains the given search term.</li><li>The search must be case-insensitive.</li></ul><p class="cye-lm-tag">Let’s get started.</p>
<div class="note"> <strong>Additional Reading:</strong><p class="cye-lm-tag"></p>
<p class="cye-lm-tag">If you are not familiar with Spring Data JPA, <strong>you should read</strong> the following blog posts before you continue reading this blog post:</p>
<ul><li><a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-introduction/">Spring Data JPA Tutorial: Introduction</a> provides a quick introduction to Spring Data JPA and gives an overview of the Spring Data repository interfaces.</li><li><a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-getting-the-required-dependencies/">Spring Data JPA Tutorial: Getting the Required Dependencies</a> describes how you can get the required dependencies.</li><li><a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-part-one-configuration/">Spring Data JPA Tutorial: Configuration</a> describes how you can configure the persistence layer of a Spring application that uses Spring Data JPA.</li><li><a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-introduction-to-query-methods/">Spring Data JPA Tutorial: Introduction to Query Methods</a> describes how you can pass method parameters to your query methods and identifies the “legal” return values of Spring Data JPA query methods.</li></ul></div><h2>Using Named Queries With Spring Data JPA</h2><p class="cye-lm-tag">Before we can implement our search function, we have to understand how we can use named queries with Spring Data JPA. In other words, we have to find the answers to these questions:</p>
<ol><li>How can we create named queries?</li><li>How can we create the query methods that invokes our named queries?</li></ol><p class="cye-lm-tag">Let’s start by finding out the answer to the first question.<br></p>
<p class="cye-lm-tag"></p>
<p class="cye-lm-tag"></p>
<h3>Creating Named Queries</h3><p class="cye-lm-tag">We can specify named queries with Spring Data JPA by using a properties file, annotations, or the <em>orm.xml</em> file.</p>
<p class="cye-lm-tag">Before can take a closer look at these methods, we have to learn a few rules that we must follow when we are specifying the names of our named queries. These rules are:</p>
<ul><li>If we want to use the default naming strategy of Spring Data JPA, we have to specify the name of the named query by using this syntax: <em>[entity class name].[name of the invoked query method]</em>.</li><li>If we want to use some other syntax, we have to configure the name of named query when we create the query method that invokes it. We can do this by using <a href="http://docs.spring.io/spring-data/jpa/docs/current/api/org/springframework/data/jpa/repository/Query.html#name--" target="_blank">the <em>name</em> attribute of the <em>@Query</em> annotation</a>.</li></ul><p class="cye-lm-tag">We are now ready to create named queries with Spring Data JPA. Let’s start by adding our named queries into a properties file.</p>
<h4>Using a Properties File</h4><p class="cye-lm-tag">We can declare named queries by adding them into the <em>jpa-named-queries.properties</em> file that is found from the <em>META-INF</em> folder of our classpath.</p>
<div class="note"> If we want to use a different properties file or move the <em>jpa-named-queries.properties</em> file to a different directory, we can configure its location by using these two options:<p class="cye-lm-tag"></p>
<ul><li>If we configure the application context of our application by using Java configuration, we can configure the location of the properties file by setting the value of <a href="http://docs.spring.io/spring-data/jpa/docs/current/api/org/springframework/data/jpa/repository/config/EnableJpaRepositories.html#namedQueriesLocation--" target="_blank">the <em>namedQueriesLocation</em> attribute of the <em>@EnableJpaRepositories</em> annotation</a>.</li><li>If we configure the application context of our application by using XML configuration files, we can configure the location of the properties file by setting the value of <a href="http://docs.spring.io/spring-data/jpa/docs/1.8.x/reference/html/#populator.namespace-dao-config" target="_blank">the <em>repository</em> element’s <em>named-queries-location</em> attribute</a>.</li></ul></div><p class="cye-lm-tag">We can declare a new named query by following these steps:</p>
<ol><li>Set the name of the named query as the name of the property.</li><li>Set the invoked query as the value of the property.</li></ol><p class="cye-lm-tag">In other words, our properties file must use the following format:</p>
<div><div id="highlighter_788592" class="syntaxhighlighter  plain"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="plain plain">name=query</code></div></div></td></tr></tbody></table></div></div><p class="cye-lm-tag"><strong>Example:</strong></p>
<p class="cye-lm-tag">We want to create a named query whose name is ‘<em>Todo.findByTitleIs</em>‘. It returns all todo entries whose title is ‘title’.</p>
<p class="cye-lm-tag">If we want to use JPQL, we have to add the following line into our properties file:</p>
<div><div id="highlighter_21937" class="syntaxhighlighter  plain"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="plain plain">Todo.findByTitleIs=SELECT t FROM Todo t WHERE t.title = 'title'</code></div></div></td></tr></tbody></table></div></div><p class="cye-lm-tag">If we want to use SQL, we have to add the following line into our properties file:</p>
<div><div id="highlighter_656288" class="syntaxhighlighter  plain"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="plain plain">Todo.findByTitleIs=SELECT * FROM todos t WHERE t.title = 'title'</code></div></div></td></tr></tbody></table></div></div><p class="cye-lm-tag">Let’s move on and find out how we can declare named queries by using annotations.</p>
<h4>Using Annotations</h4><p class="cye-lm-tag">We can declare named queries by annotating our entities with the following annotations:</p>
<ul><li>If we want to create a JPQL query, we have to annotate our entity with the <em>@NamedQuery</em> annotation.</li><li>If we want to create a SQL query, we have to annotate our entity with the <em>@NamedNativeQuery</em> annotation.</li></ul><div class="note">If we want to create more than one named query, we have to wrap our queries inside the <em>@NamedQueries</em> or the <em>@NamedNativeQueries</em> annotation.</div><p class="cye-lm-tag"><strong>Example:</strong></p>
<p class="cye-lm-tag">We want to create a named query whose name is ‘<em>Todo.findByTitleIs</em>‘. It returns all todo entries whose title is ‘title’.</p>
<p class="cye-lm-tag">If we want to create a JPQL query, we must follow these steps:</p>
<ol><li>Annotate the entity with the <em>@NamedQuery</em> annotation.</li><li>Set the name of the named query (<em>Todo.findByTitleIs</em>) as the value of the <em>@NamedQuery</em> annotation’s <em>name</em> attribute.</li><li>Set the JPQL query (<em>SELECT t FROM Todo t WHERE t.title = ‘title’</em>) as the value of the <em>@NamedQuery</em> annotation’s <em>query</em> attribute.</li></ol><p class="cye-lm-tag">The relevant part of our entity looks as follows:</p>
<div><div id="highlighter_589334" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1 highlighted">6</div><div class="line number7 index6 alt2 highlighted">7</div><div class="line number8 index7 alt1 highlighted">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">import</code> <code class="java plain">javax.persistence.Entity;</code></div><div class="line number2 index1 alt1"><code class="java keyword">import</code> <code class="java plain">javax.persistence.NamedQuery;</code></div><div class="line number3 index2 alt2"><code class="java keyword">import</code> <code class="java plain">javax.persistence.Table;</code></div><div class="line number4 index3 alt1">&nbsp;</div><div class="line number5 index4 alt2"><code class="java color1">@Entity</code></div><div class="line number6 index5 alt1 highlighted"><code class="java color1">@NamedQuery</code><code class="java plain">(name = "Todo.findByTitleIs”,</code></div><div class="line number7 index6 alt2 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">query = </code><code class="java string">"SELECT t FROM Todo t WHERE t.title = 'title'"</code></div><div class="line number8 index7 alt1 highlighted"><code class="java plain">)</code></div><div class="line number9 index8 alt2"><code class="java color1">@Table</code><code class="java plain">(name = </code><code class="java string">"todos"</code><code class="java plain">)</code></div><div class="line number10 index9 alt1"><code class="java keyword">final</code> <code class="java keyword">class</code> <code class="java plain">Todo {</code></div><div class="line number11 index10 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number12 index11 alt1"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><div class="note"> <strong>Additional Reading:</strong><p class="cye-lm-tag"></p>
<ul><li><a href="http://docs.oracle.com/javaee/7/api/javax/persistence/NamedQuery.html" target="_blank">The Javadoc of the <em>@NamedQuery</em> annotation</a></li><li><a href="http://docs.oracle.com/javaee/7/api/javax/persistence/NamedQueries.html" target="_blank">The Javadoc of the <em>@NamedQueries</em> annotation</a></li></ul></div><p class="cye-lm-tag">If we want to create a SQL query, we must follow these steps:</p>
<ol><li>Annotate the entity with the <em>@NamedNativeQuery</em> annotation.</li><li>Set the name of the named query (<em>Todo.findByTitleIs</em>) as the value of the <em>@NamedNativeQuery</em> annotation’s <em>name</em> attribute.</li><li>Set the SQL query (<em>SELECT * FROM todos t WHERE t.title = ‘title’</em>) as the value of the <em>@NamedNativeQuery</em> annotation’s <em>name</em> attribute.</li><li>Set the returned entity class (<em>Todo.class</em>) as the value of the of the <em>@NamedNativeQuery</em> annotation’s <em>resultClass</em> attribute.</li></ol><p class="cye-lm-tag">The relevant part of our entity looks as follows:</p>
<div><div id="highlighter_165101" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1 highlighted">6</div><div class="line number7 index6 alt2 highlighted">7</div><div class="line number8 index7 alt1 highlighted">8</div><div class="line number9 index8 alt2 highlighted">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">import</code> <code class="java plain">javax.persistence.Entity;</code></div><div class="line number2 index1 alt1"><code class="java keyword">import</code> <code class="java plain">javax.persistence.NamedNativeQuery;</code></div><div class="line number3 index2 alt2"><code class="java keyword">import</code> <code class="java plain">javax.persistence.Table;</code></div><div class="line number4 index3 alt1">&nbsp;</div><div class="line number5 index4 alt2"><code class="java color1">@Entity</code></div><div class="line number6 index5 alt1 highlighted"><code class="java color1">@NamedNativeQuery</code><code class="java plain">(name = "Todo.findByTitleIs”,</code></div><div class="line number7 index6 alt2 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">query=</code><code class="java string">"SELECT * FROM todos t WHERE t.title = 'title'"</code><code class="java plain">,</code></div><div class="line number8 index7 alt1 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">resultClass = Todo.</code><code class="java keyword">class</code></div><div class="line number9 index8 alt2 highlighted"><code class="java plain">)</code></div><div class="line number10 index9 alt1"><code class="java color1">@Table</code><code class="java plain">(name = </code><code class="java string">"todos"</code><code class="java plain">)</code></div><div class="line number11 index10 alt2"><code class="java keyword">final</code> <code class="java keyword">class</code> <code class="java plain">Todo {</code></div><div class="line number12 index11 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number13 index12 alt2"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><div class="note"> <strong>Additional Reading:</strong><p class="cye-lm-tag"></p>
<ul><li><a href="http://docs.oracle.com/javaee/7/api/javax/persistence/NamedNativeQuery.html" target="_blank">The Javadoc of the <em>@NamedNativeQuery</em> annotation</a></li><li><a href="http://docs.oracle.com/javaee/7/api/javax/persistence/NamedNativeQueries.html" target="_blank">The Javadoc of the <em>@NamedNativeQueries</em> annotation</a></li></ul><p class="cye-lm-tag">If you need to create complex SQL queries, you might have to map the results of your SQL query by using the <em>@SqlResultSetMapping</em> and the <em>@SqlResultSetMappings</em> annotations. If you want to get more information about this, check out the following webpages:</p>
<ul><li><a href="http://docs.oracle.com/javaee/7/api/javax/persistence/SqlResultSetMapping.html" target="_blank">The Javadoc of the <em>@SqlResultSetMapping</em> annotation</a></li><li><a href="http://docs.oracle.com/javaee/7/api/javax/persistence/SqlResultSetMappings.html" target="_blank">The Javadoc of the <em>@SqlResultSetMappings</em> annotation</a></li><li><a href="http://www.thoughts-on-java.org/result-set-mapping-basics/" target="_blank">Result Set Mapping: The Basics</a></li><li><a href="http://www.thoughts-on-java.org/result-set-mapping-complex-mappings/" target="_blank">Result Set Mapping: Complex Mappings</a></li><li><a href="http://www.thoughts-on-java.org/result-set-mapping-constructor-result-mappings/" target="_blank">Result Set Mapping: Constructor Result Mappings</a></li></ul></div><p class="cye-lm-tag">Let’s find out how we can create named queries by using the <em>orm.xml</em> file.</p>
<h4>Using the orm.xml File</h4><p class="cye-lm-tag">We can declare named queries by adding them into the <em>orm.xml</em> file that is found from the <em>META-INF</em> folder of our classpath. We have to use one of these two XML elements:</p>
<ul><li>If we want to create a JPQL query, we have to use the <em>named-query</em> element.</li><li>If we want to create a SQL query, we have to use the <em>named-native-query</em> element.</li></ul><p class="cye-lm-tag"><strong>Example:</strong></p>
<p class="cye-lm-tag">We want to create a named query whose name is ‘<em>Todo.findByTitleIs</em>‘. It returns all todo entries whose title is ‘title’.</p>
<p class="cye-lm-tag">If we want to create a JPQL query, we must follow these steps:</p>
<ol><li>Add a <em>named-query</em> element into the <em>orm.xml</em> file.</li><li>Set the name of the named query (<em>Todo.findByTitleIs</em>) as the value of the <em>named-query</em> element’s <em>name</em> attribute.</li><li>Add a <em>query</em> element as the child of the <em>named-query</em> element and set the invoked JPQL query (<em>SELECT t FROM Todo t WHERE t.title = ‘title’</em>) as the value of the <em>query</em> element.</li></ol><p class="cye-lm-tag">The relevant part of the <em>orm.xml</em> file looks as follows:</p>
<div><div id="highlighter_450891" class="syntaxhighlighter  xml"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1 highlighted">8</div><div class="line number9 index8 alt2 highlighted">9</div><div class="line number10 index9 alt1 highlighted">10</div><div class="line number11 index10 alt2">11</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="xml plain">&lt;?</code><code class="xml keyword">xml</code> <code class="xml color1">version</code><code class="xml plain">=</code><code class="xml string">"1.0"</code> <code class="xml color1">encoding</code><code class="xml plain">=</code><code class="xml string">"UTF-8"</code><code class="xml plain">?&gt;</code></div><div class="line number2 index1 alt1"><code class="xml plain">&lt;</code><code class="xml keyword">entity-mappings</code></div><div class="line number3 index2 alt2"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml color1">xmlns</code><code class="xml plain">=</code><code class="xml string">"http://java.sun.com/xml/ns/persistence/orm"</code></div><div class="line number4 index3 alt1"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml color1">xmlns:xsi</code><code class="xml plain">=</code><code class="xml string">"http://www.w3.org/2001/XMLSchema-instance"</code></div><div class="line number5 index4 alt2"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml color1">xsi:schemaLocation</code><code class="xml plain">=</code><code class="xml string">"http://java.sun.com/xml/ns/persistence/orm http://java.sun.com/xml/ns/persistence/orm_2_0.xsd"</code></div><div class="line number6 index5 alt1"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml color1">version</code><code class="xml plain">=</code><code class="xml string">"2.0"</code><code class="xml plain">&gt;</code></div><div class="line number7 index6 alt2">&nbsp;</div><div class="line number8 index7 alt1 highlighted"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">named-query</code> <code class="xml color1">name</code><code class="xml plain">=</code><code class="xml string">"Todo.findByTitleIs"</code><code class="xml plain">&gt;</code></div><div class="line number9 index8 alt2 highlighted"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">query</code><code class="xml plain">&gt;SELECT t FROM Todo t WHERE t.title = 'title'&lt;/</code><code class="xml keyword">query</code><code class="xml plain">&gt;</code></div><div class="line number10 index9 alt1 highlighted"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;/</code><code class="xml keyword">named-query</code><code class="xml plain">&gt;</code></div><div class="line number11 index10 alt2"><code class="xml plain">&lt;/</code><code class="xml keyword">entity-mappings</code><code class="xml plain">&gt;</code></div></div></td></tr></tbody></table></div></div><p class="cye-lm-tag">If we want to create a SQL query, we must follow these steps:</p>
<ol><li>Add a <em>named-native-query</em> element to the <em>orm.xml</em> file.</li><li>Set the name of the named query (<em>Todo.findByTitleIs</em>) as the value of the <em>named-native-query</em> element’s <em>name</em> attribute.</li><li>Set the type of the returned object (<em>net.petrikainulainen.springdata.jpa.todo.Todo</em>) as the value of the <em>named-native-query</em> element’s <em>result-class</em> attribute.</li><li>Add a <em>query</em> element as the child of the <em>named-native-query</em> element and set the invoked SQL query (<em>SELECT * FROM todos t WHERE t.title = ‘title’</em>) as the value of the <em>query</em> element.</li></ol><p class="cye-lm-tag">The relevant part of the <em>orm.xml</em> file looks as follows:</p>
<div><div id="highlighter_427930" class="syntaxhighlighter  xml"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1 highlighted">8</div><div class="line number9 index8 alt2 highlighted">9</div><div class="line number10 index9 alt1 highlighted">10</div><div class="line number11 index10 alt2 highlighted">11</div><div class="line number12 index11 alt1">12</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="xml plain">&lt;?</code><code class="xml keyword">xml</code> <code class="xml color1">version</code><code class="xml plain">=</code><code class="xml string">"1.0"</code> <code class="xml color1">encoding</code><code class="xml plain">=</code><code class="xml string">"UTF-8"</code><code class="xml plain">?&gt;</code></div><div class="line number2 index1 alt1"><code class="xml plain">&lt;</code><code class="xml keyword">entity-mappings</code></div><div class="line number3 index2 alt2"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml color1">xmlns</code><code class="xml plain">=</code><code class="xml string">"http://java.sun.com/xml/ns/persistence/orm"</code></div><div class="line number4 index3 alt1"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml color1">xmlns:xsi</code><code class="xml plain">=</code><code class="xml string">"http://www.w3.org/2001/XMLSchema-instance"</code></div><div class="line number5 index4 alt2"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml color1">xsi:schemaLocation</code><code class="xml plain">=</code><code class="xml string">"http://java.sun.com/xml/ns/persistence/orm http://java.sun.com/xml/ns/persistence/orm_2_0.xsd"</code></div><div class="line number6 index5 alt1"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml color1">version</code><code class="xml plain">=</code><code class="xml string">"2.0"</code><code class="xml plain">&gt;</code></div><div class="line number7 index6 alt2">&nbsp;</div><div class="line number8 index7 alt1 highlighted"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">named-native-query</code> <code class="xml color1">name</code><code class="xml plain">=</code><code class="xml string">"Todo.findByTitleIs"</code></div><div class="line number9 index8 alt2 highlighted"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml color1">result-class</code><code class="xml plain">=</code><code class="xml string">"net.petrikainulainen.springdata.jpa.todo.Todo"</code><code class="xml plain">&gt;</code></div><div class="line number10 index9 alt1 highlighted"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">query</code><code class="xml plain">&gt;SELECT * FROM todos t WHERE t.title = 'title'&lt;/</code><code class="xml keyword">query</code><code class="xml plain">&gt;</code></div><div class="line number11 index10 alt2 highlighted"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;/</code><code class="xml keyword">named-native-query</code><code class="xml plain">&gt;</code></div><div class="line number12 index11 alt1"><code class="xml plain">&lt;/</code><code class="xml keyword">entity-mappings</code><code class="xml plain">&gt;</code></div></div></td></tr></tbody></table></div></div><div class="note"> If you need to create complex SQL queries, you might have to map the results of your SQL query by using the <em>sql-result-set-mapping</em> element. If you want to get more information about SQL result set mapping, you should read these blog posts:<p class="cye-lm-tag"></p>
<ul><li><a href="http://www.thoughts-on-java.org/result-set-mapping-basics/" target="_blank">Result Set Mapping: The Basics</a></li><li><a href="http://www.thoughts-on-java.org/result-set-mapping-complex-mappings/" target="_blank">Result Set Mapping: Complex Mappings</a></li><li><a href="http://www.thoughts-on-java.org/result-set-mapping-constructor-result-mappings/" target="_blank">Result Set Mapping: Constructor Result Mappings</a></li></ul></div><p class="cye-lm-tag">Let’s move on and find out how we can create the query methods that invoke our named queries.</p>
<h3>Creating the Query Methods</h3><p class="cye-lm-tag">We can create the query method that invokes a specific named query by following these steps:</p>
<ol><li>Add a query method into our repository interface and follow these rules:<ul><li>If our named query uses the default naming strategy of Spring Data JPA, we must ensure that the name of the query method identifies the invoked named query.</li><li>If our named query doesn’t use the default naming strategy, we have to annotate the query method with the <em>@Query</em> annotation and configure the name of invoked named query by using the <em>name</em> attribute of the <em>@Query</em> annotation.</li></ul></li><li>If the invoked named query is a SQL query, we have to annotate the query method with the <em>@Query</em> annotation and set the value of its <em>nativeQuery</em> attribute to <em>true</em>.</li><li>Add the correct method parameters to the query method.</li><li>Specify the return type of the query method.</li></ol><div class="note"> <strong>Additional Reading:</strong><p class="cye-lm-tag"></p>
<ul><li><a href="http://docs.spring.io/spring-data/jpa/docs/current/api/org/springframework/data/jpa/repository/Query.html" target="_blank">The Javadoc of the <em>@Query</em> annotation</a></li><li><a href="http://docs.spring.io/spring-data/jpa/docs/1.8.x/reference/html/#jpa.query-methods.named-queries" target="_blank">Spring Data JPA Reference Manual: 4.3.3 Using JPA NamedQueries</a></li></ul></div><p class="cye-lm-tag"><strong>Example 1:</strong></p>
<p class="cye-lm-tag">We want to create a query method that invokes the named query whose name is: <em>Todo.findByTitleIs</em>. Because this named query returns todo entries whose title is ‘title’, it doesn’t have any parameters.</p>
<p class="cye-lm-tag">If the invoked named query is a JPQL query, we have to add the following query method into our repository interface:</p>
<div><div id="highlighter_559707" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2 highlighted">7</div><div class="line number8 index7 alt1">8</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.repository.Repository;</code></div><div class="line number2 index1 alt1">&nbsp;</div><div class="line number3 index2 alt2"><code class="java keyword">import</code> <code class="java plain">java.util.List;</code></div><div class="line number4 index3 alt1">&nbsp;</div><div class="line number5 index4 alt2"><code class="java keyword">interface</code> <code class="java plain">TodoRepository </code><code class="java keyword">extends</code> <code class="java plain">Repository&lt;Todo, Long&gt; {</code></div><div class="line number6 index5 alt1">&nbsp;</div><div class="line number7 index6 alt2 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java plain">List&lt;Todo&gt; findByTitleIs();</code></div><div class="line number8 index7 alt1"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><p class="cye-lm-tag">If the invoked named query is a SQL query, we have to add the following query method into our repository interface:</p>
<div><div id="highlighter_224705" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1 highlighted">8</div><div class="line number9 index8 alt2 highlighted">9</div><div class="line number10 index9 alt1">10</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.jpa.repository.Query;</code></div><div class="line number2 index1 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.repository.Repository;</code></div><div class="line number3 index2 alt2">&nbsp;</div><div class="line number4 index3 alt1"><code class="java keyword">import</code> <code class="java plain">java.util.List;</code></div><div class="line number5 index4 alt2">&nbsp;</div><div class="line number6 index5 alt1"><code class="java keyword">interface</code> <code class="java plain">TodoRepository </code><code class="java keyword">extends</code> <code class="java plain">Repository&lt;Todo, Long&gt; {</code></div><div class="line number7 index6 alt2">&nbsp;</div><div class="line number8 index7 alt1 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Query</code><code class="java plain">(nativeQuery = </code><code class="java keyword">true</code><code class="java plain">)</code></div><div class="line number9 index8 alt2 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java plain">List&lt;Todo&gt; findByTitleIs();</code></div><div class="line number10 index9 alt1"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><p class="cye-lm-tag"><strong>Example 2:</strong></p>
<p class="cye-lm-tag">We want to create the query method which invokes the named query whose name is: <em>Todo.findByDesc</em>. This named query has one named parameter called <em>description</em>.</p>
<p class="cye-lm-tag">If the invoked query is a JPQL query, we have to add the following query method into our repository interface:</p>
<div><div id="highlighter_456747" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1 highlighted">8</div><div class="line number9 index8 alt2">9</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.repository.Repository;</code></div><div class="line number2 index1 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.repository.query.Param;</code></div><div class="line number3 index2 alt2">&nbsp;</div><div class="line number4 index3 alt1"><code class="java keyword">import</code> <code class="java plain">java.util.List;</code></div><div class="line number5 index4 alt2">&nbsp;</div><div class="line number6 index5 alt1"><code class="java keyword">interface</code> <code class="java plain">TodoRepository </code><code class="java keyword">extends</code> <code class="java plain">Repository&lt;Todo, Long&gt; {</code></div><div class="line number7 index6 alt2">&nbsp;</div><div class="line number8 index7 alt1 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java plain">List&lt;Todo&gt; findByDesc(</code><code class="java color1">@Param</code><code class="java plain">(</code><code class="java string">"description"</code><code class="java plain">) String description);</code></div><div class="line number9 index8 alt2"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><p class="cye-lm-tag">If the invoked query is a SQL query, we have to add the following query method into our repository interface:</p>
<div><div id="highlighter_86687" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2 highlighted">9</div><div class="line number10 index9 alt1 highlighted">10</div><div class="line number11 index10 alt2">11</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.jpa.repository.Query;</code></div><div class="line number2 index1 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.repository.Repository;</code></div><div class="line number3 index2 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.repository.query.Param;</code></div><div class="line number4 index3 alt1">&nbsp;</div><div class="line number5 index4 alt2"><code class="java keyword">import</code> <code class="java plain">java.util.List;</code></div><div class="line number6 index5 alt1">&nbsp;</div><div class="line number7 index6 alt2"><code class="java keyword">interface</code> <code class="java plain">TodoRepository </code><code class="java keyword">extends</code> <code class="java plain">Repository&lt;Todo, Long&gt; {</code></div><div class="line number8 index7 alt1">&nbsp;</div><div class="line number9 index8 alt2 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Query</code><code class="java plain">(nativeQuery=</code><code class="java keyword">true</code><code class="java plain">)</code></div><div class="line number10 index9 alt1 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java plain">List&lt;Todo&gt; findByDesc(</code><code class="java color1">@Param</code><code class="java plain">(</code><code class="java string">"description"</code><code class="java plain">) String description);</code></div><div class="line number11 index10 alt2"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><p class="cye-lm-tag">We are now ready to implement our search function. Let’s find out how we can do it.</p>
<h2>Implementing the Search Function</h2><p class="cye-lm-tag">We can implement our search function by following these steps:</p>
<ol><li>Create the JPQL and SQL queries that are case-insensitive and return todo entries whose title or description contains the given search term.</li><li>Create the named queries that invoke the created JPQL and SQL queries.</li><li>Create the query methods that invoke our named queries.</li></ol><p class="cye-lm-tag">Let’s get started.</p>
<h3>Creating the Database Queries</h3><p class="cye-lm-tag">Our search function must fulfil two requirements:</p>
<ul><li>It must return todo entries whose title or description contains the given search term.</li><li>It must be case-insensitive.</li></ul><p class="cye-lm-tag">This section describes the JPQL and SQL queries that fulfil these requirements.</p>
<p class="cye-lm-tag"><strong>First</strong>, the JPQL query that fulfils our requirements looks as follows:</p>
<div><div id="highlighter_251661" class="syntaxhighlighter  sql"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="sql keyword">SELECT</code> <code class="sql plain">t </code><code class="sql keyword">FROM</code> <code class="sql plain">Todo t </code><code class="sql keyword">WHERE</code></div><div class="line number2 index1 alt1"><code class="sql spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="sql color2">LOWER</code><code class="sql plain">(t.title) </code><code class="sql color1">LIKE</code> <code class="sql color2">LOWER</code><code class="sql plain">(CONCAT(</code><code class="sql string">'%'</code><code class="sql plain">,:searchTerm, </code><code class="sql string">'%'</code><code class="sql plain">)) </code><code class="sql color1">OR</code></div><div class="line number3 index2 alt2"><code class="sql spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="sql color2">LOWER</code><code class="sql plain">(t.description) </code><code class="sql color1">LIKE</code> <code class="sql color2">LOWER</code><code class="sql plain">(CONCAT(</code><code class="sql string">'%'</code><code class="sql plain">,:searchTerm, </code><code class="sql string">'%'</code><code class="sql plain">))</code></div></div></td></tr></tbody></table></div></div><div class="note"> <strong>Additional Reading:</strong><p class="cye-lm-tag"></p>
<ul><li><a href="http://www.objectdb.com/java/jpa/query/jpql/string#CONCAT_-_String_Concatenation_" target="_blank">CONCAT – String Concatenation</a></li><li><a href="http://www.objectdb.com/java/jpa/query/jpql/string#LOWER_and_UPPER_-_Changing_String_Case_" target="_blank">LOWER and UPPER – Changing String Case</a></li><li><a href="http://docs.oracle.com/javaee/7/tutorial/persistence-querylanguage.htm#BNBTG" target="_blank">The Java EE 7 Tutorial: The Java Persistence Query Language</a></li></ul></div><p class="cye-lm-tag"><strong>Second</strong>, the SQL query that fulfils our requirements looks as follows:</p>
<div><div id="highlighter_319739" class="syntaxhighlighter  sql"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="sql keyword">SELECT</code> <code class="sql plain">* </code><code class="sql keyword">FROM</code> <code class="sql plain">todos t </code><code class="sql keyword">WHERE</code></div><div class="line number2 index1 alt1"><code class="sql spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="sql color2">LOWER</code><code class="sql plain">(t.title) </code><code class="sql color1">LIKE</code> <code class="sql color2">LOWER</code><code class="sql plain">(CONCAT(</code><code class="sql string">'%'</code><code class="sql plain">,:searchTerm, </code><code class="sql string">'%'</code><code class="sql plain">)) </code><code class="sql color1">OR</code></div><div class="line number3 index2 alt2"><code class="sql spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="sql color2">LOWER</code><code class="sql plain">(t.description) </code><code class="sql color1">LIKE</code> <code class="sql color2">LOWER</code><code class="sql plain">(CONCAT(</code><code class="sql string">'%'</code><code class="sql plain">,:searchTerm, </code><code class="sql string">'%'</code><code class="sql plain">))</code></div></div></td></tr></tbody></table></div></div><div class="note"> <strong>Additional Reading:</strong><p class="cye-lm-tag"></p>
<ul><li><a href="http://www.tutorialspoint.com/sql/sql-concat-function.htm" target="_blank">SQL – CONCAT Function</a></li><li><a href="http://www.tutorialspoint.com/sql/sql-string-functions.htm#function_lower" target="_blank">SQL – LOWER Function</a></li><li><a href="http://www.w3schools.com/sql/" target="_blank">W3Schools.com: SQL Tutorial</a></li></ul></div><p class="cye-lm-tag">Let’s move on and create our named queries.</p>
<h3>Creating the Named Queries</h3><p class="cye-lm-tag">This section describes how we can specify the required named queries by using a properties file, annotations, and the <em>orm.xml</em> file. We need to create two named queries:</p>
<ul><li>The <em>Todo.findBySearchTermNamed</em> is a named query that uses JPQL.</li><li>The <em>Todo.findBySearchTermNamedNative</em> is a named query that uses SQL.</li></ul><p class="cye-lm-tag">Let’s get started.</p>
<h4>Using a Properties File</h4><p class="cye-lm-tag">After we have added both named queries (<em>Todo.findBySearchTermNamed</em> and <em>Todo.findBySearchTermNamedNative</em>) into the <em>META-INF/jpa-named-queries.properties</em> file, its content looks as follows:</p>
<div><div id="highlighter_651514" class="syntaxhighlighter  plain"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="plain plain">Todo.findBySearchTermNamed=SELECT t FROM Todo t WHERE LOWER(t.title) LIKE LOWER(CONCAT('%', :searchTerm, '%')) OR LOWER(t.description) LIKE LOWER(CONCAT('%', :searchTerm, '%'))</code></div><div class="line number2 index1 alt1"><code class="plain plain">Todo.findBySearchTermNamedNative=SELECT * FROM todos t WHERE LOWER(t.title) LIKE LOWER(CONCAT('%',:searchTerm, '%')) OR LOWER(t.description) LIKE LOWER(CONCAT('%',:searchTerm, '%'))</code></div></div></td></tr></tbody></table></div></div><p class="cye-lm-tag">Let’s move on and declare these named queries by using annotations.</p>
<h4>Using Annotations</h4><p class="cye-lm-tag">After we have created both named queries (<em>Todo.findBySearchTermNamed</em> and <em>Todo.findBySearchTermNamedNative</em>) by using the <em>@NamedQuery</em> and the <em>@NamedNativeQuery</em> annotations, the relevant part of our entity class looks as follows:</p>
<div><div id="highlighter_421309" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2 highlighted">7</div><div class="line number8 index7 alt1 highlighted">8</div><div class="line number9 index8 alt2 highlighted">9</div><div class="line number10 index9 alt1 highlighted">10</div><div class="line number11 index10 alt2 highlighted">11</div><div class="line number12 index11 alt1 highlighted">12</div><div class="line number13 index12 alt2 highlighted">13</div><div class="line number14 index13 alt1 highlighted">14</div><div class="line number15 index14 alt2 highlighted">15</div><div class="line number16 index15 alt1 highlighted">16</div><div class="line number17 index16 alt2 highlighted">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">import</code> <code class="java plain">javax.persistence.Entity;</code></div><div class="line number2 index1 alt1"><code class="java keyword">import</code> <code class="java plain">javax.persistence.NamedNativeQuery;</code></div><div class="line number3 index2 alt2"><code class="java keyword">import</code> <code class="java plain">javax.persistence.NamedQuery;</code></div><div class="line number4 index3 alt1"><code class="java keyword">import</code> <code class="java plain">javax.persistence.Table;</code></div><div class="line number5 index4 alt2">&nbsp;</div><div class="line number6 index5 alt1"><code class="java color1">@Entity</code></div><div class="line number7 index6 alt2 highlighted"><code class="java color1">@NamedNativeQuery</code><code class="java plain">(name = </code><code class="java string">"Todo.findBySearchTermNamedNative"</code><code class="java plain">,</code></div><div class="line number8 index7 alt1 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">query=</code><code class="java string">"SELECT * FROM todos t WHERE "</code> <code class="java plain">+</code></div><div class="line number9 index8 alt2 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java string">"LOWER(t.title) LIKE LOWER(CONCAT('%',:searchTerm, '%')) OR "</code> <code class="java plain">+</code></div><div class="line number10 index9 alt1 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java string">"LOWER(t.description) LIKE LOWER(CONCAT('%',:searchTerm, '%'))"</code><code class="java plain">,</code></div><div class="line number11 index10 alt2 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">resultClass = Todo.</code><code class="java keyword">class</code></div><div class="line number12 index11 alt1 highlighted"><code class="java plain">)</code></div><div class="line number13 index12 alt2 highlighted"><code class="java color1">@NamedQuery</code><code class="java plain">(name = </code><code class="java string">"Todo.findBySearchTermNamed"</code><code class="java plain">,</code></div><div class="line number14 index13 alt1 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">query = </code><code class="java string">"SELECT t FROM Todo t WHERE "</code> <code class="java plain">+</code></div><div class="line number15 index14 alt2 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java string">"LOWER(t.title) LIKE LOWER(CONCAT('%', :searchTerm, '%')) OR "</code> <code class="java plain">+</code></div><div class="line number16 index15 alt1 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java string">"LOWER(t.description) LIKE LOWER(CONCAT('%', :searchTerm, '%'))"</code></div><div class="line number17 index16 alt2 highlighted"><code class="java plain">)</code></div><div class="line number18 index17 alt1"><code class="java color1">@Table</code><code class="java plain">(name = </code><code class="java string">"todos"</code><code class="java plain">)</code></div><div class="line number19 index18 alt2"><code class="java keyword">final</code> <code class="java keyword">class</code> <code class="java plain">Todo {</code></div><div class="line number20 index19 alt1">&nbsp;</div><div class="line number21 index20 alt2"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><p class="cye-lm-tag">Let’s find out how we can declare these named queries by using the <em>orm.xml</em> file.</p>
<h4>Using the orm.xml File</h4><p class="cye-lm-tag">After we have created both named queries (<em>Todo.findBySearchTermNamed</em> and <em>Todo.findBySearchTermNamedNative</em>) by using the <em>named-query</em> and the <em>named-native-query</em> elements, the <em>META-INF/orm.xml</em> file looks as follows:</p>
<div><div id="highlighter_82" class="syntaxhighlighter  xml"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1 highlighted">8</div><div class="line number9 index8 alt2 highlighted">9</div><div class="line number10 index9 alt1 highlighted">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1 highlighted">12</div><div class="line number13 index12 alt2 highlighted">13</div><div class="line number14 index13 alt1 highlighted">14</div><div class="line number15 index14 alt2 highlighted">15</div><div class="line number16 index15 alt1">16</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="xml plain">&lt;?</code><code class="xml keyword">xml</code> <code class="xml color1">version</code><code class="xml plain">=</code><code class="xml string">"1.0"</code> <code class="xml color1">encoding</code><code class="xml plain">=</code><code class="xml string">"UTF-8"</code><code class="xml plain">?&gt;</code></div><div class="line number2 index1 alt1"><code class="xml plain">&lt;</code><code class="xml keyword">entity-mappings</code></div><div class="line number3 index2 alt2"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml color1">xmlns</code><code class="xml plain">=</code><code class="xml string">"http://java.sun.com/xml/ns/persistence/orm"</code></div><div class="line number4 index3 alt1"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml color1">xmlns:xsi</code><code class="xml plain">=</code><code class="xml string">"http://www.w3.org/2001/XMLSchema-instance"</code></div><div class="line number5 index4 alt2"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml color1">xsi:schemaLocation</code><code class="xml plain">=</code><code class="xml string">"http://java.sun.com/xml/ns/persistence/orm http://java.sun.com/xml/ns/persistence/orm_2_0.xsd"</code></div><div class="line number6 index5 alt1"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml color1">version</code><code class="xml plain">=</code><code class="xml string">"2.0"</code><code class="xml plain">&gt;</code></div><div class="line number7 index6 alt2">&nbsp;</div><div class="line number8 index7 alt1 highlighted"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">named-query</code> <code class="xml color1">name</code><code class="xml plain">=</code><code class="xml string">"Todo.findBySearchTermNamedOrmXml"</code><code class="xml plain">&gt;</code></div><div class="line number9 index8 alt2 highlighted"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">query</code><code class="xml plain">&gt;SELECT t FROM Todo t WHERE LOWER(t.title) LIKE LOWER(CONCAT('%', :searchTerm, '%')) OR LOWER(t.description) LIKE LOWER(CONCAT('%', :searchTerm, '%'))&lt;/</code><code class="xml keyword">query</code><code class="xml plain">&gt;</code></div><div class="line number10 index9 alt1 highlighted"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;/</code><code class="xml keyword">named-query</code><code class="xml plain">&gt;</code></div><div class="line number11 index10 alt2">&nbsp;</div><div class="line number12 index11 alt1 highlighted"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">named-native-query</code> <code class="xml color1">name</code><code class="xml plain">=</code><code class="xml string">"Todo.findBySearchTermNamedNativeOrmXml"</code></div><div class="line number13 index12 alt2 highlighted"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml color1">result-class</code><code class="xml plain">=</code><code class="xml string">"net.petrikainulainen.springdata.jpa.todo.Todo"</code><code class="xml plain">&gt;</code></div><div class="line number14 index13 alt1 highlighted"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">query</code><code class="xml plain">&gt;SELECT * FROM todos t WHERE LOWER(t.title) LIKE LOWER(CONCAT('%',:searchTerm, '%')) OR LOWER(t.description) LIKE LOWER(CONCAT('%',:searchTerm, '%'))&lt;/</code><code class="xml keyword">query</code><code class="xml plain">&gt;</code></div><div class="line number15 index14 alt2 highlighted"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;/</code><code class="xml keyword">named-native-query</code><code class="xml plain">&gt;</code></div><div class="line number16 index15 alt1"><code class="xml plain">&lt;/</code><code class="xml keyword">entity-mappings</code><code class="xml plain">&gt;</code></div></div></td></tr></tbody></table></div></div><p class="cye-lm-tag">Let’s move on and create the query methods that invoke these named queries.</p>
<h3>Creating the Query Methods</h3><p class="cye-lm-tag">We can create the query methods that invoke our named queries by following these steps:</p>
<ol><li>Create the query method that invokes the JPQL query (<em>Todo.findBySearchTermNamed</em>) by following these steps:<ol><li>Create a query method called <em>findBySearchTermNamed()</em>.</li><li>Set the return type of the query method to <em>List&lt;Todo&gt;</em>.</li><li>Add one method parameter to the query method and configure the name of the named parameter (<em>searchTerm</em>) by annotating the method parameter with the <em>@Param</em> annotation.</li></ol></li><li>Create the query method that invokes the SQL query (<em>Todo.findBySearchTermNamedNative</em>) by following these steps:<ol><li>Create a query method called <em>findBySearchTermNamedNative()</em>.</li><li>Annotate the method with the <em>@Query</em> annotation and set value of its <em>nativeQuery</em> attribute to <em>true</em>.</li><li>Set the return type of the query method to <em>List&lt;Todo&gt;</em>.</li><li>Add one method parameter to the query method and configure the name of the named parameter (<em>searchTerm</em>) by annotating the method parameter with the <em>@Param</em> annotation.</li></ol></li></ol><p class="cye-lm-tag">The source code of our repository interface looks as follows:</p>
<div><div id="highlighter_887884" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2 highlighted">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2 highlighted">11</div><div class="line number12 index11 alt1 highlighted">12</div><div class="line number13 index12 alt2">13</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.jpa.repository.Query;</code></div><div class="line number2 index1 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.repository.Repository;</code></div><div class="line number3 index2 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.repository.query.Param;</code></div><div class="line number4 index3 alt1">&nbsp;</div><div class="line number5 index4 alt2"><code class="java keyword">import</code> <code class="java plain">java.util.List;</code></div><div class="line number6 index5 alt1">&nbsp;</div><div class="line number7 index6 alt2"><code class="java keyword">interface</code> <code class="java plain">TodoRepository </code><code class="java keyword">extends</code> <code class="java plain">Repository&lt;Todo, Long&gt; {</code></div><div class="line number8 index7 alt1">&nbsp;</div><div class="line number9 index8 alt2 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">List&lt;Todo&gt; findBySearchTermNamed(</code><code class="java color1">@Param</code><code class="java plain">(</code><code class="java string">"searchTerm"</code><code class="java plain">) String searchTerm);</code></div><div class="line number10 index9 alt1">&nbsp;</div><div class="line number11 index10 alt2 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Query</code><code class="java plain">(nativeQuery = </code><code class="java keyword">true</code><code class="java plain">)</code></div><div class="line number12 index11 alt1 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">List&lt;Todo&gt; findBySearchTermNamedNative(</code><code class="java color1">@Param</code><code class="java plain">(</code><code class="java string">"searchTerm"</code><code class="java plain">) String searchTerm);</code></div><div class="line number13 index12 alt2"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><div class="note"> <strong>Additional Reading:</strong><p class="cye-lm-tag"></p>
<ul><li><a href="http://docs.spring.io/spring-data/commons/docs/current/api/org/springframework/data/repository/query/Param.html" target="_blank">The Javadoc of the @Param annotation</a></li><li><a href="http://docs.spring.io/spring-data/jpa/docs/current/api/org/springframework/data/jpa/repository/Query.html" target="_blank">The Javadoc of the @Query annotation</a></li></ul></div><p class="cye-lm-tag">Let’s move on and find out when we should create our database queries by using named queries.</p>
<h2>When Should We Use Named Queries?</h2><p class="cye-lm-tag">Named queries have the following benefits:</p>
<ul><li>Named queries support both JPQL and SQL.</li><li>If we have an existing application that uses named queries, it is easy to refactor it to use use Spring Data JPA (if we want to).</li><li>Named queries provide support for SQL result set mapping. This means that we can write complex SQL queries and map the query results into objects.</li></ul><p class="cye-lm-tag">Named queries have the following drawbacks:</p>
<ul><li>We cannot see the invoked database query from the repository interface.</li><li>There is no support for dynamic queries.</li><li>If we specify named queries by using annotations, they “litter” the source code of our entity classes.</li></ul><p class="cye-lm-tag">If we think about the pros and cons of named queries, it becomes clear that the query methods which use named queries aren’t as easy to read or write as the query methods that use either <a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-creating-database-queries-from-method-names/">the query generation from the method name strategy</a> or <a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-creating-database-queries-with-the-query-annotation/">the <em>@Query</em> annotation</a>.</p>
<p class="cye-lm-tag">However, named queries have two advantages:</p>
<ol><li>We can write complex SQL queries and map the query results into objects.</li><li>If we need to refactor an existing application to use Spring Data JPA, we don’t have to move its named queries to our repository interfaces.</li></ol><p class="cye-lm-tag">Thus, I think that we should create our query methods by using the query generation from the method name strategy or the <em>@Query</em> annotation.</p>
<p class="cye-lm-tag">However, if we cannot create the query method by using these two methods, we can use named queries.</p>
<p class="cye-lm-tag">Also, if we are refactoring an existing application to use Spring Data JPA, using its existing named queries is a no-brainer because it can save us a lot of work.</p>
<p class="cye-lm-tag">Let’s move on and summarize what we learned from this blog post.<br></p>
<p class="cye-lm-tag"></p>
<p class="cye-lm-tag"></p>
<h2>Summary</h2><p class="cye-lm-tag">This blog post has taught us four things:</p>
<ul><li>We can create named queries by using a properties file, annotations, or the <em>orm.xml</em> file.</li><li>Named queries support both JPQL and SQL.</li><li>If we need to create complex SQL queries, we can map the query results into objects by using SQL result set mapping.</li><li>We should use named queries only if we don’t have a choice OR we are refactoring an existing application to use Spring Data JPA.</li></ul><p class="cye-lm-tag">The next part of this tutorial describes how we can <a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-part-four-jpa-criteria-queries/">create dynamic queries by using the JPA Criteria API</a>.</p>
<p class="cye-lm-tag"><strong>P.S.</strong> You can <a href="https://github.com/pkainulainen/spring-data-jpa-examples/tree/master/query-methods" target="_blank">get the example application of this blog post from Github</a>.</p>
<div class="note">If you want to learn how to use Spring Data JPA, you should read my <a href="/spring-data-jpa-tutorial/">Spring Data JPA tutorial</a>.</div> <span id="tve_leads_end_content" style="display: block; visibility: hidden; border: 1px solid transparent;" class="cye-lm-tag"></span>
</div>

</div>




</div>
</div>
</div>
</div>
</div>
</div><p style="line-height: 24px;" data-unit="px" class="tve_p_center cye-lm-tag"><span class="tve_custom_font_size cye-lm-tag" style="font-size: 16px;">I will never rent, sell, or share your email address.<br></span></p>

</div></div></div></div></div></div></div>
<section id="comments"><div class="comments_intro"><span class="num_comments cye-lm-tag">8</span> comments… <a href="#commentform" rel="nofollow">add one</a></div><ul class="comment_list"><li class="comment even thread-even depth-1" id="comment-1301111"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Jan</span>  <span class="comment_date cye-lm-tag">October 29, 2015, 17:34</span></div><div class="comment_text" id="comment-body-1301111"><p class="cye-lm-tag">Hi,</p>
<p class="cye-lm-tag">I followed your example for @NamedNativeQuery with a parameter, using analogy of title = ‘title’ in the query.<br> However, in my implementation, that did not work. What did work, was title = :title</p>
<p class="cye-lm-tag">I am on Java 8, spring data jpa 1.8.0-release.<br> Any ideas?</p>
<p class="cye-lm-tag">Thanks,<br> Jan</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-1301211"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">October 29, 2015, 20:53</span></div><div class="comment_text" id="comment-body-1301211"><p class="cye-lm-tag">Hi,</p>
<p class="cye-lm-tag">Do you pass this parameter to your query method as a method parameter? If so, you need to specify the name of the parameter by using syntax: <code>:name_of_the_parameter</code>. You can specify the name of the parameter by using the <code>@Param</code> annotation.</p>
<p class="cye-lm-tag">On the other hand, if you want to specify the parameter value in the query string, you should be able to add it to your SQL query (like I did in some of my examples). Is it possible to see your named query?</p>
</div> </div><ul class="children"><li class="comment even depth-3" id="comment-1304134"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Jan</span>  <span class="comment_date cye-lm-tag">November 2, 2015, 16:47</span></div><div class="comment_text" id="comment-body-1304134"><p class="cye-lm-tag">Hi,<br> I did try to answer your question a couple of times but the answer never appeared. Let’s try again …</p>
</div> </div><ul class="children"><li class="comment odd alt depth-4" id="comment-1304136"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Jan</span>  <span class="comment_date cye-lm-tag">November 2, 2015, 16:50</span></div><div class="comment_text" id="comment-body-1304136"><p class="cye-lm-tag">Can’t seem to get any code in the post. Send me an email if you want to see my code …</p>
<p class="cye-lm-tag">Cheers,<br> Jan</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-5" id="comment-1304249"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">November 2, 2015, 20:03</span></div><div class="comment_text" id="comment-body-1304249"><p class="cye-lm-tag">Hi Jan,</p>
<p class="cye-lm-tag">I sent you an email!</p>
</div></div></li></ul></li></ul></li></ul></li></ul></li><li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1451420"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Anonymous</span>  <span class="comment_date cye-lm-tag">June 3, 2016, 04:52</span></div><div class="comment_text" id="comment-body-1451420"><p class="cye-lm-tag">Hi</p>
<p class="cye-lm-tag">can you please add some example for join query to fetch the data from two tables .</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-1452011"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">June 4, 2016, 11:47</span></div><div class="comment_text" id="comment-body-1452011"><p class="cye-lm-tag">Hi,</p>
<p class="cye-lm-tag">This article describes how you can <a href="http://www.objectdb.com/java/jpa/query/jpql/from" target="_blank" rel="nofollow">create joins with JPQL</a>.</p>
</div> </div></li></ul></li></ul></div> </section>
<br><hr>

<h2>9 Creating Database Queries With the JPA Criteria API</h2>
<div class="post_content" itemprop="articleBody"><p class="cye-lm-tag">The previous part of this tutorial described how we can <a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-creating-database-queries-with-named-queries/">create database queries with named queries</a>.</p>
<p class="cye-lm-tag"><a href="/spring-data-jpa-tutorial/">This tutorial</a> has already taught us how we can create static database queries with Spring Data JPA. However, when we are writing real-life applications, we have to able to create dynamic database queries as well.</p>
<p class="cye-lm-tag">This blog post describes how we can create dynamic database queries by using the JPA Criteria API. We will also implement a search function that has two requirements:</p>
<ul><li>It must return todo entries whose title or description contains the given search term.</li><li>The search must be case-insensitive.</li></ul><p class="cye-lm-tag">Let’s start by ensuring that Maven creates the JPA static metamodel classes when we compile our project.</p>
<div class="note"> <strong>Additional Reading:</strong><p class="cye-lm-tag"></p>
<p class="cye-lm-tag">If you are not familiar with Spring Data JPA, <strong>you should read</strong> the following blog posts before you continue reading this blog post:</p>
<ul><li><a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-introduction/">Spring Data JPA Tutorial: Introduction</a> provides a quick introduction to Spring Data JPA and gives an overview of the Spring Data repository interfaces.</li><li><a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-getting-the-required-dependencies/">Spring Data JPA Tutorial: Getting the Required Dependencies</a> describes how you can get the required dependencies.</li><li><a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-part-one-configuration/">Spring Data JPA Tutorial: Configuration</a> describes how you can configure the persistence layer of a Spring application that uses Spring Data JPA.</li></ul></div><h2>Creating the JPA Static Metamodel Classes</h2><p class="cye-lm-tag">A static metamodel consists of classes that describe the entity and embeddable classes found from our domain model. These metamodel classes provide static access to the metadata that describes the attributes of our domain model classes.</p>
<p class="cye-lm-tag">We want to  use these classes because they give us the possibility to create type-safe criteria queries, but we don’t want to create them manually.</p>
<p class="cye-lm-tag">Luckily, we can create these classes automatically by using the <a href="http://bsorrentino.github.io/maven-annotation-plugin/index.html" target="_blank">Maven Processor Plugin</a> and the <a href="http://docs.jboss.org/hibernate/orm/4.3/topical/html/metamodelgen/MetamodelGenerator.html" target="_blank">JPA Static Metamodel Generator</a>. We can configure these tools by following these steps:</p>
<ol><li>Add the Maven Processor Plugin (version 2.2.4) declaration to the <em>plugins</em> section of the <em>pom.xml</em> file.</li><li>Configure the dependencies of this plugin and add the JPA static metamodel generator dependency (version 4.3.8) to the plugin’s <em>dependencies</em> section.</li><li>Create an execution that invokes the plugin’s <em>process</em> goal in the <em>generate-sources</em> phase of the Maven default lifecycle.</li><li>Ensure that the plugin runs only the <em>org.hibernate.jpamodelgen.JPAMetaModelEntityProcessor</em>. This annotation processor scans our entities and embeddable classes, and creates the static metamodel classes.</li></ol><p class="cye-lm-tag">The configuration of the Maven Processor Plugin looks as follows:</p>
<div><div id="highlighter_592917" class="syntaxhighlighter  xml"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div class="line number23 index22 alt2">23</div><div class="line number24 index23 alt1">24</div><div class="line number25 index24 alt2">25</div><div class="line number26 index25 alt1">26</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="xml plain">&lt;</code><code class="xml keyword">plugin</code><code class="xml plain">&gt;</code></div><div class="line number2 index1 alt1"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">groupId</code><code class="xml plain">&gt;org.bsc.maven&lt;/</code><code class="xml keyword">groupId</code><code class="xml plain">&gt;</code></div><div class="line number3 index2 alt2"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">artifactId</code><code class="xml plain">&gt;maven-processor-plugin&lt;/</code><code class="xml keyword">artifactId</code><code class="xml plain">&gt;</code></div><div class="line number4 index3 alt1"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">version</code><code class="xml plain">&gt;2.2.4&lt;/</code><code class="xml keyword">version</code><code class="xml plain">&gt;</code></div><div class="line number5 index4 alt2"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">executions</code><code class="xml plain">&gt;</code></div><div class="line number6 index5 alt1"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">execution</code><code class="xml plain">&gt;</code></div><div class="line number7 index6 alt2"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">id</code><code class="xml plain">&gt;process&lt;/</code><code class="xml keyword">id</code><code class="xml plain">&gt;</code></div><div class="line number8 index7 alt1"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">goals</code><code class="xml plain">&gt;</code></div><div class="line number9 index8 alt2"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">goal</code><code class="xml plain">&gt;process&lt;/</code><code class="xml keyword">goal</code><code class="xml plain">&gt;</code></div><div class="line number10 index9 alt1"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;/</code><code class="xml keyword">goals</code><code class="xml plain">&gt;</code></div><div class="line number11 index10 alt2"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">phase</code><code class="xml plain">&gt;generate-sources&lt;/</code><code class="xml keyword">phase</code><code class="xml plain">&gt;</code></div><div class="line number12 index11 alt1"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">configuration</code><code class="xml plain">&gt;</code></div><div class="line number13 index12 alt2"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">processors</code><code class="xml plain">&gt;</code></div><div class="line number14 index13 alt1"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">processor</code><code class="xml plain">&gt;org.hibernate.jpamodelgen.JPAMetaModelEntityProcessor&lt;/</code><code class="xml keyword">processor</code><code class="xml plain">&gt;</code></div><div class="line number15 index14 alt2"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;/</code><code class="xml keyword">processors</code><code class="xml plain">&gt;</code></div><div class="line number16 index15 alt1"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;/</code><code class="xml keyword">configuration</code><code class="xml plain">&gt;</code></div><div class="line number17 index16 alt2"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;/</code><code class="xml keyword">execution</code><code class="xml plain">&gt;</code></div><div class="line number18 index17 alt1"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;/</code><code class="xml keyword">executions</code><code class="xml plain">&gt;</code></div><div class="line number19 index18 alt2"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">dependencies</code><code class="xml plain">&gt;</code></div><div class="line number20 index19 alt1"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">dependency</code><code class="xml plain">&gt;</code></div><div class="line number21 index20 alt2"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">groupId</code><code class="xml plain">&gt;org.hibernate&lt;/</code><code class="xml keyword">groupId</code><code class="xml plain">&gt;</code></div><div class="line number22 index21 alt1"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">artifactId</code><code class="xml plain">&gt;hibernate-jpamodelgen&lt;/</code><code class="xml keyword">artifactId</code><code class="xml plain">&gt;</code></div><div class="line number23 index22 alt2"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">version</code><code class="xml plain">&gt;4.3.8.Final&lt;/</code><code class="xml keyword">version</code><code class="xml plain">&gt;</code></div><div class="line number24 index23 alt1"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;/</code><code class="xml keyword">dependency</code><code class="xml plain">&gt;</code></div><div class="line number25 index24 alt2"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;/</code><code class="xml keyword">dependencies</code><code class="xml plain">&gt;</code></div><div class="line number26 index25 alt1"><code class="xml plain">&lt;/</code><code class="xml keyword">plugin</code><code class="xml plain">&gt;</code></div></div></td></tr></tbody></table></div></div><div class="note"> <strong>Additional Reading:</strong><p class="cye-lm-tag"></p>
<ul><li><a href="https://docs.jboss.org/hibernate/entitymanager/3.6/reference/en/html/metamodel.html" target="_blank">Hibernate Entity Manager 3. 6 Reference Manual: Chapter 4 Metamodel</a></li><li><a href="https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html" target="_blank">Introduction to the Maven Build Lifecycle</a></li><li><a href="http://bsorrentino.github.io/maven-annotation-plugin/usage.html" target="_blank">Maven Processor Plugin – Usage</a></li><li><a href="http://docs.jboss.org/hibernate/orm/4.3/topical/html/metamodelgen/MetamodelGenerator.html" target="_blank">JPA Static Metamodel Generator</a></li></ul></div><p class="cye-lm-tag">When we compile our project, the invoked annotation processor creates the JPA static metamodel classes to the <em>target/generated-sources/apt</em> directory. Because our domain model has only one entity, the annotation processor creates only one class called <em>Todo_</em>. The source code of the <em>Todo_</em> class looks as follows:</p>
<div><div id="highlighter_681130" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">package</code> <code class="java plain">net.petrikainulainen.springdata.jpa.todo;</code></div><div class="line number2 index1 alt1">&nbsp;</div><div class="line number3 index2 alt2"><code class="java keyword">import</code> <code class="java plain">java.time.ZonedDateTime;</code></div><div class="line number4 index3 alt1"><code class="java keyword">import</code> <code class="java plain">javax.annotation.Generated;</code></div><div class="line number5 index4 alt2"><code class="java keyword">import</code> <code class="java plain">javax.persistence.metamodel.SingularAttribute;</code></div><div class="line number6 index5 alt1"><code class="java keyword">import</code> <code class="java plain">javax.persistence.metamodel.StaticMetamodel;</code></div><div class="line number7 index6 alt2">&nbsp;</div><div class="line number8 index7 alt1"><code class="java color1">@Generated</code><code class="java plain">(value = </code><code class="java string">"org.hibernate.jpamodelgen.JPAMetaModelEntityProcessor"</code><code class="java plain">)</code></div><div class="line number9 index8 alt2"><code class="java color1">@StaticMetamodel</code><code class="java plain">(Todo.</code><code class="java keyword">class</code><code class="java plain">)</code></div><div class="line number10 index9 alt1"><code class="java keyword">public</code> <code class="java keyword">abstract</code> <code class="java keyword">class</code> <code class="java plain">Todo_ {</code></div><div class="line number11 index10 alt2">&nbsp;</div><div class="line number12 index11 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java keyword">static</code> <code class="java keyword">volatile</code> <code class="java plain">SingularAttribute&lt;Todo, ZonedDateTime&gt; creationTime;</code></div><div class="line number13 index12 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java keyword">static</code> <code class="java keyword">volatile</code> <code class="java plain">SingularAttribute&lt;Todo, String&gt; createdByUser;</code></div><div class="line number14 index13 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java keyword">static</code> <code class="java keyword">volatile</code> <code class="java plain">SingularAttribute&lt;Todo, ZonedDateTime&gt; modificationTime;</code></div><div class="line number15 index14 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java keyword">static</code> <code class="java keyword">volatile</code> <code class="java plain">SingularAttribute&lt;Todo, String&gt; modifiedByUser;</code></div><div class="line number16 index15 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java keyword">static</code> <code class="java keyword">volatile</code> <code class="java plain">SingularAttribute&lt;Todo, String&gt; description;</code></div><div class="line number17 index16 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java keyword">static</code> <code class="java keyword">volatile</code> <code class="java plain">SingularAttribute&lt;Todo, Long&gt; id;</code></div><div class="line number18 index17 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java keyword">static</code> <code class="java keyword">volatile</code> <code class="java plain">SingularAttribute&lt;Todo, String&gt; title;</code></div><div class="line number19 index18 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java keyword">static</code> <code class="java keyword">volatile</code> <code class="java plain">SingularAttribute&lt;Todo, Long&gt; version;</code></div><div class="line number20 index19 alt1">&nbsp;</div><div class="line number21 index20 alt2"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><p class="cye-lm-tag">Let’s move and find out how we can create database queries with the JPA criteria API.</p>
<p class="cye-lm-tag"></p>
<h2>Creating Database Queries With the JPA Criteria API</h2><p class="cye-lm-tag">We can create database queries with the JPA Criteria API by following these steps:</p>
<ol><li>Modify the repository interface to support queries that use the JPA Criteria API.</li><li>Specify the conditions of the invoked database query.</li><li>Invoke the database query.</li></ol><p class="cye-lm-tag">Let’s get started.</p>
<h3>Modifying the Repository Interface</h3><p class="cye-lm-tag">The <em>JpaSpecificationExecutor&lt;T&gt;</em> interface declares the methods that can be used to invoke database queries that use the JPA Criteria API. This interface has one type parameter <em>T</em> that describes the type of the queried entity.</p>
<p class="cye-lm-tag">In other words, if we need to modify our repository interface to support database queries that use the JPA Criteria API, we have to follow these steps:</p>
<ol><li>Extend the <em>JpaSpecificationExecutor&lt;T&gt;</em> interface.</li><li>Set the type of the managed entity.</li></ol><p class="cye-lm-tag"><strong>Example:</strong><br> The only Spring Data JPA repository of our example application (<em>TodoRepository</em>) manages <em>Todo</em> objects. After we have modified this repository to support criteria queries, its source code looks as follows:</p>
<div><div id="highlighter_267738" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1 highlighted">4</div><div class="line number5 index4 alt2">5</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.jpa.repository.JpaSpecificationExecutor;</code></div><div class="line number2 index1 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.repository.Repository;</code></div><div class="line number3 index2 alt2">&nbsp;</div><div class="line number4 index3 alt1 highlighted"><code class="java keyword">interface</code> <code class="java plain">TodoRepository </code><code class="java keyword">extends</code> <code class="java plain">Repository&lt;Todo, Long&gt;, JpaSpecificationExecutor&lt;Todo&gt; {</code></div><div class="line number5 index4 alt2"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><p class="cye-lm-tag">After we have extended the <em>JpaSpeciticationExecutor</em> interface, the classes that use our repository interface get access to the following methods:</p>
<ul><li>The <em>long count(Specification&lt;T&gt; spec)</em> method returns the number of objects that fulfil the conditions specified by the <em>Specification&lt;T&gt;</em> object given as a method parameter.</li><li>The <em>List&lt;T&gt; findAll(Specification&lt;T&gt; spec)</em> method returns objects that fulfil the conditions specified by the <em>Specification&lt;T&gt;</em> object given as a method parameter.</li><li>The <em>T findOne(Specification&lt;T&gt; spec)</em> method returns an object that fulfils the conditions specified by the <em>Specification&lt;T&gt;</em> object given as a method parameter.</li></ul><div class="note"> The <em>JpaSpecificationExecutor&lt;T&gt;</em> interface declares also two other methods that are used to sort and paginate objects that fulfil the conditions specified by the <em>Specification&lt;T&gt;</em> object. We will talk more about these methods when we learn to <a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-part-six-sorting/">sort</a> and <a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-part-seven-pagination/">paginate</a> our query results.<p class="cye-lm-tag"></p>
<p class="cye-lm-tag"><strong>Additional Reading:</strong></p>
<ul><li><a href="http://docs.spring.io/spring-data/jpa/docs/current/api/org/springframework/data/jpa/repository/JpaSpecificationExecutor.html" target="_blank">The Javadoc of the <em>JpaSpecificationExecutor&lt;T&gt;</em> interface</a></li></ul></div><p class="cye-lm-tag">Let’s find out how we can specify the conditions of the invoked database query.</p>
<h3>Specifying the Conditions of the Invoked Database Query</h3><p class="cye-lm-tag">We can specify the conditions of the invoked database query by following these steps:</p>
<ol><li>Create a new <em>Specification&lt;T&gt;</em> object.</li><li>Set the type of the queried entity as the value of the type parameter (<em>T</em>).</li><li>Specify the conditions by implementing the <em>toPredicate()</em> method of the <em>Specification&lt;T&gt;</em> interface.</li></ol><p class="cye-lm-tag"><strong>Example 1:</strong></p>
<p class="cye-lm-tag">If we have to create a criteria query that returns <em>Todo</em> objects, we have to create the following specification:</p>
<div><div id="highlighter_273891" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">new</code> <code class="java plain">Specification&lt;Todo&gt;() {</code></div><div class="line number2 index1 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Override</code></div><div class="line number3 index2 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java plain">Predicate toPredicate(Root&lt;Todo&gt; root, </code></div><div class="line number4 index3 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">CriteriaQuery&lt;?&gt; query, </code></div><div class="line number5 index4 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">CriteriaBuilder cb) {</code></div><div class="line number6 index5 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java comments">//Create the query by using the JPA Criteria API</code></div><div class="line number7 index6 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number8 index7 alt1"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><div class="note"> <strong>Additional Reading:</strong><p class="cye-lm-tag"></p>
<ul><li><a href="http://www.ibm.com/developerworks/java/library/j-typesafejpa/" target="_blank">Dynamic, typesafe queries in JPA 2.0</a></li><li><a href="http://www.altuure.com/2010/09/23/jpa-criteria-api-by-samples-part-i/" target="_blank">JPA Criteria API by samples – Part I</a></li><li><a href="http://www.altuure.com/2010/09/23/jpa-criteria-api-by-samples-%E2%80%93-part-ii/" target="_blank">JPA Criteria API by samples – Part II</a></li><li><a href="https://www.jumpingbean.co.za/blogs/jpa2-criteria-api" target="_blank">JPA 2 Criteria API Tutorial</a></li><li><a href="https://docs.oracle.com/javaee/7/api/javax/persistence/criteria/CriteriaBuilder.html" target="_blank">The Javadoc of the <em>CriteriaBuilder</em> interface</a></li><li><a href="https://docs.oracle.com/javaee/7/api/javax/persistence/criteria/CriteriaQuery.html" target="_blank">The Javadoc of the <em>CriteriaQuery</em> interface</a></li><li><a href="https://docs.oracle.com/javaee/7/api/javax/persistence/criteria/Predicate.html" target="_blank">The Javadoc of the <em>Predicate</em> interface</a></li><li><a href="https://docs.oracle.com/javaee/7/api/javax/persistence/criteria/Root.html" target="_blank">The Javadoc of the <em>Root&lt;X&gt;</em> interface</a></li><li><a href="http://docs.spring.io/spring-data/jpa/docs/current/api/org/springframework/data/jpa/domain/Specification.html" target="_blank">The Javadoc of the <em>Specification&lt;T&gt;</em> interface</a></li></ul></div><p class="cye-lm-tag">The obvious next question is:</p>
<p class="cye-lm-tag">Where should we create these <em>Specification&lt;T&gt;</em> objects?</p>
<p class="cye-lm-tag">I argue that we should create our <em>Specification&lt;T&gt;</em> objects by using specification builder classes because:</p>
<ul><li>We can put our query generation logic into one place. In other words, we don’t litter the source code of our service classes (or other components) with the query generation logic.</li><li>We can create reusable specifications and combine them in the classes that invoke our database queries.</li></ul><p class="cye-lm-tag"><strong>Example 2:</strong></p>
<p class="cye-lm-tag">If we need to create a specification builder class that constructs <em>Specification&lt;Todo&gt;</em> objects, we have to follow these steps:</p>
<ol><li>Create a <em>final TodoSpecifications</em> class. The name of this class isn’t important, but I like to use the naming convention: <em>[The name of the queried entity class]Specifications</em>.</li><li>Add a private constructor the created class. This ensures that no one can instantiate our specification builder class.</li><li>Add static specification builder methods to this class. In our case, we will add only one specification builder method (<em>hasTitle(String title)</em>) to this class and implement it by returning a new <em>Specification&lt;Todo&gt;</em> object.</li></ol><p class="cye-lm-tag">The source code of the <em>TodoSpecifications</em> class looks as follows:</p>
<div><div id="highlighter_307560" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1">22</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.jpa.domain.Specification;</code></div><div class="line number2 index1 alt1">&nbsp;</div><div class="line number3 index2 alt2"><code class="java keyword">import</code> <code class="java plain">javax.persistence.criteria.CriteriaBuilder;</code></div><div class="line number4 index3 alt1"><code class="java keyword">import</code> <code class="java plain">javax.persistence.criteria.CriteriaQuery;</code></div><div class="line number5 index4 alt2"><code class="java keyword">import</code> <code class="java plain">javax.persistence.criteria.Predicate;</code></div><div class="line number6 index5 alt1"><code class="java keyword">import</code> <code class="java plain">javax.persistence.criteria.Root;</code></div><div class="line number7 index6 alt2">&nbsp;</div><div class="line number8 index7 alt1"><code class="java keyword">final</code> <code class="java keyword">class</code> <code class="java plain">TodoSpecifications {</code></div><div class="line number9 index8 alt2">&nbsp;</div><div class="line number10 index9 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java plain">TodoSpecifications() {}</code></div><div class="line number11 index10 alt2">&nbsp;</div><div class="line number12 index11 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">static</code> <code class="java plain">Specification&lt;Todo&gt; hasTitle(String title) {</code></div><div class="line number13 index12 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">return</code> <code class="java keyword">new</code> <code class="java plain">Specification&lt;Todo&gt;() {</code></div><div class="line number14 index13 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Override</code></div><div class="line number15 index14 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java plain">Predicate toPredicate(Root&lt;Todo&gt; root,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </code></div><div class="line number16 index15 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">CriteriaQuery&lt;?&gt; query, </code></div><div class="line number17 index16 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">CriteriaBuilder cb) {</code></div><div class="line number18 index17 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java comments">//Create the query here.</code></div><div class="line number19 index18 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number20 index19 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number21 index20 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number22 index21 alt1"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><p class="cye-lm-tag">If we use Java 8, we can clean up the implementation of the <em>hasTitle(String title)</em> method by using lambda expressions. The source code of our new specification builder class looks as follows:</p>
<div><div id="highlighter_449927" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1 highlighted">14</div><div class="line number15 index14 alt2 highlighted">15</div><div class="line number16 index15 alt1 highlighted">16</div><div class="line number17 index16 alt2 highlighted">17</div><div class="line number18 index17 alt1 highlighted">18</div><div class="line number19 index18 alt2">19</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.jpa.domain.Specification;</code></div><div class="line number2 index1 alt1">&nbsp;</div><div class="line number3 index2 alt2"><code class="java keyword">import</code> <code class="java plain">javax.persistence.criteria.CriteriaBuilder;</code></div><div class="line number4 index3 alt1"><code class="java keyword">import</code> <code class="java plain">javax.persistence.criteria.CriteriaQuery;</code></div><div class="line number5 index4 alt2"><code class="java keyword">import</code> <code class="java plain">javax.persistence.criteria.Predicate;</code></div><div class="line number6 index5 alt1"><code class="java keyword">import</code> <code class="java plain">javax.persistence.criteria.Root;</code></div><div class="line number7 index6 alt2">&nbsp;</div><div class="line number8 index7 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.jpa.domain.Specification;</code></div><div class="line number9 index8 alt2">&nbsp;</div><div class="line number10 index9 alt1"><code class="java keyword">final</code> <code class="java keyword">class</code> <code class="java plain">TodoSpecifications {</code></div><div class="line number11 index10 alt2">&nbsp;</div><div class="line number12 index11 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java plain">TodoSpecifications() {}</code></div><div class="line number13 index12 alt2">&nbsp;</div><div class="line number14 index13 alt1 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">static</code> <code class="java plain">Specification&lt;Todo&gt; hasTitle(String title) {</code></div><div class="line number15 index14 alt2 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">return</code> <code class="java plain">(root, query, cb) -&gt; {</code></div><div class="line number16 index15 alt1 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java comments">//Create query here</code></div><div class="line number17 index16 alt2 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">};</code></div><div class="line number18 index17 alt1 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number19 index18 alt2"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><p class="cye-lm-tag">Let’s find out how we can invoke the created database query.</p>
<h3>Invoking the Created Database Query</h3><p class="cye-lm-tag">After we have specified the conditions of the invoked database query by creating a new <em>Specification&lt;T&gt;</em> object, we can invoke the database query by using the methods that are provided by the <em>JpaSpecificationExecutor&lt;T&gt;</em> interface.</p>
<p class="cye-lm-tag">The following examples demonstrates how we can invoke different database queries:</p>
<p class="cye-lm-tag"><strong>Example 1:</strong></p>
<p class="cye-lm-tag">If we want to get the number of <em>Todo</em> objects that have the title ‘foo’, we have to create and invoke our database query by using this code:</p>
<div><div id="highlighter_563492" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java plain">Specification&lt;Todo&gt; spec = TodoSpecifications.hasTitle(</code><code class="java string">"foo"</code><code class="java plain">);</code></div><div class="line number2 index1 alt1"><code class="java keyword">long</code> <code class="java plain">count =&nbsp; repository.count(spec);</code></div></div></td></tr></tbody></table></div></div><p class="cye-lm-tag"><strong>Example 2:</strong></p>
<p class="cye-lm-tag">If we want to the get a list of <em>Todo</em> objects that have the title ‘foo’, we have to create and invoke our database query by using this code:</p>
<div><div id="highlighter_725257" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java plain">Specification&lt;Todo&gt; spec = TodoSpecifications.hasTitle(</code><code class="java string">"foo"</code><code class="java plain">);</code></div><div class="line number2 index1 alt1"><code class="java plain">List&lt;Todo&gt; todoEntries =&nbsp; repository.findAll(spec);</code></div></div></td></tr></tbody></table></div></div><p class="cye-lm-tag"><strong>Example 3:</strong></p>
<p class="cye-lm-tag">If we want to get the <em>Todo</em> object whose title is ‘foo’, we have to create and invoke our database query by using this code:</p>
<div><div id="highlighter_844740" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java plain">Specification&lt;Todo&gt; spec = TodoSpecifications.hasTitle(</code><code class="java string">"foo"</code><code class="java plain">);</code></div><div class="line number2 index1 alt1"><code class="java plain">List&lt;Todo&gt; todoEntries =&nbsp; repository.findOne(spec);</code></div></div></td></tr></tbody></table></div></div><p class="cye-lm-tag">If we need to create a new specification that combines our existing specifications, we don’t have to add a new method to our specification builder class. We can simply combine our existing specifications by using the <em>Specifications&lt;T&gt;</em> class. The following examples demonstrates how we can use that class:</p>
<p class="cye-lm-tag"><strong>Example 4:</strong></p>
<p class="cye-lm-tag">If we have specifications A and B, and we want to create a database query that returns <em>Todo</em> objects which fulfil the specification A and the specification B, we can combine these specifications by using the following code:</p>
<div><div id="highlighter_334041" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java plain">Specification&lt;Todo&gt; specA = ...</code></div><div class="line number2 index1 alt1"><code class="java plain">Specification&lt;Todo&gt; specB = ...</code></div><div class="line number3 index2 alt2"><code class="java plain">List&lt;Todo&gt; todoEntries =&nbsp; repository.findAll(</code></div><div class="line number4 index3 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">Specifications.where(specA).and(specB)</code></div><div class="line number5 index4 alt2"><code class="java plain">);</code></div></div></td></tr></tbody></table></div></div><p class="cye-lm-tag"><strong>Example 5:</strong></p>
<p class="cye-lm-tag">If we have specifications A and B, and we want to create a database query that returns <em>Todo</em> objects which fulfil the specification A or the specification B, we can combine these specifications by using the following code:</p>
<div><div id="highlighter_445644" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java plain">Specification&lt;Todo&gt; specA = ...</code></div><div class="line number2 index1 alt1"><code class="java plain">Specification&lt;Todo&gt; specB = ...</code></div><div class="line number3 index2 alt2"><code class="java plain">Lis&lt;Todo&gt; todoEntries =&nbsp; repository.findAll(</code></div><div class="line number4 index3 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">Specifications.where(specA).or(specB)</code></div><div class="line number5 index4 alt2"><code class="java plain">);</code></div></div></td></tr></tbody></table></div></div><p class="cye-lm-tag"><strong>Example 6:</strong></p>
<p class="cye-lm-tag">If we have specifications A and B, and we want to create a database query that returns <em>Todo</em> objects which fulfil the specification A but not the specification B, we can combine these specifications by using the following code:</p>
<div><div id="highlighter_329499" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java plain">Specification&lt;Todo&gt; specA = ...</code></div><div class="line number2 index1 alt1"><code class="java plain">Specification&lt;Todo&gt; specB = ...</code></div><div class="line number3 index2 alt2"><code class="java plain">List&lt;Todo&gt; searchResults = repository.findAll(</code></div><div class="line number4 index3 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">Specifications.where(specA).and(</code></div><div class="line number5 index4 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">Specifications.not(specB)</code></div><div class="line number6 index5 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">)</code></div><div class="line number7 index6 alt2"><code class="java plain">);</code></div></div></td></tr></tbody></table></div></div><div class="note"> <strong>Additional Reading:</strong><p class="cye-lm-tag"></p>
<ul><li><a href="http://docs.spring.io/spring-data/jpa/docs/current/api/org/springframework/data/jpa/domain/Specifications.html" target="_blank">The Javadoc of the <em>Specifications&lt;T&gt;</em> class</a></li><li><a href="http://docs.spring.io/spring-data/jpa/docs/1.8.x/reference/html/#specifications" target="_blank">Spring Data JPA Reference Manual: 4.5 Specifications</a></li></ul></div><p class="cye-lm-tag">Let’s move on and find out how we can implement the search function.</p>
<h2>Implementing the Search Function</h2><p class="cye-lm-tag">We can implement our search function by following these steps:</p>
<ol><li>Modify our repository interface to support criteria queries.</li><li>Create the specification builder class that creates <em>Specification&lt;Todo&gt;</em> objects.</li><li>Implement the service method that uses our specification builder class and invokes the created database queries by using our repository interface.</li></ol><p class="cye-lm-tag">Let’s start by modifying our repository interface.</p>
<h3>Modifying Our Repository Interface</h3><p class="cye-lm-tag">We can make the necessary modifications to our repository interface by following these steps:</p>
<ol><li>Extend the <em>JpaSpecificationExecutor&lt;T&gt;</em> interface.</li><li>The type of the queried entity to <em>Todo</em>.</li></ol><p class="cye-lm-tag">The source code of our repository interface looks as follows:</p>
<div><div id="highlighter_248211" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2 highlighted">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.jpa.repository.JpaSpecificationExecutor;</code></div><div class="line number2 index1 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.repository.Repository;</code></div><div class="line number3 index2 alt2">&nbsp;</div><div class="line number4 index3 alt1"><code class="java keyword">import</code> <code class="java plain">java.util.List;</code></div><div class="line number5 index4 alt2"><code class="java keyword">import</code> <code class="java plain">java.util.Optional;</code></div><div class="line number6 index5 alt1">&nbsp;</div><div class="line number7 index6 alt2 highlighted"><code class="java keyword">interface</code> <code class="java plain">TodoRepository </code><code class="java keyword">extends</code> <code class="java plain">Repository&lt;Todo, Long&gt;, JpaSpecificationExecutor&lt;Todo&gt; {</code></div><div class="line number8 index7 alt1">&nbsp;</div><div class="line number9 index8 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">void</code> <code class="java plain">delete(Todo deleted);</code></div><div class="line number10 index9 alt1">&nbsp;</div><div class="line number11 index10 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">List&lt;Todo&gt; findAll();</code></div><div class="line number12 index11 alt1">&nbsp;</div><div class="line number13 index12 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">Optional&lt;Todo&gt; findOne(Long id);</code></div><div class="line number14 index13 alt1">&nbsp;</div><div class="line number15 index14 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">void</code> <code class="java plain">flush();</code></div><div class="line number16 index15 alt1">&nbsp;</div><div class="line number17 index16 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">Todo save(Todo persisted);</code></div><div class="line number18 index17 alt1"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><p class="cye-lm-tag">Let’s move on and create the specification builder class.</p>
<h3>Creating the Specification Builder Class</h3><p class="cye-lm-tag">We can create a specification builder class that fulfils the requirements of our search function by following these steps:</p>
<ol><li>Create the specification builder class and ensure that it cannot be instantiated.</li><li>Create a <em>private static getContainsLikePattern(String searchTerm)</em> method and implement it by following these rules:<ul><li>If the <em>searchTerm</em> is <em>null</em> or empty, return the String “%”. This ensures that if the search term is not given, our specification builder class will create a specification that returns all todo entries.</li><li>If the search isn’t null or empty, transform the search term into lowercase and return the like pattern that fulfils the requirements of our search function.</li></ul></li><li>Add a static <em>titleOrDescriptionContainsIgnoreCase(String searchTerm)</em> method to the specification builder class and set its return type to <em>Specification&lt;Todo&gt;</em>.</li><li>Implement this method by following these steps:<ol><li>Create a <em>Specification&lt;Todo&gt;</em> object that selects todo entries whose title or description contains the given search term.</li><li>Return the created <em>Specification&lt;Todo&gt;</em> object.</li></ol></li></ol><p class="cye-lm-tag">The source code or our specification builder class looks as follows:</p>
<div><div id="highlighter_883206" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div class="line number23 index22 alt2">23</div><div class="line number24 index23 alt1">24</div><div class="line number25 index24 alt2">25</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.jpa.domain.Specification;</code></div><div class="line number2 index1 alt1">&nbsp;</div><div class="line number3 index2 alt2"><code class="java keyword">final</code> <code class="java keyword">class</code> <code class="java plain">TodoSpecifications {</code></div><div class="line number4 index3 alt1">&nbsp;</div><div class="line number5 index4 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java plain">TodoSpecifications() {}</code></div><div class="line number6 index5 alt1">&nbsp;</div><div class="line number7 index6 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">static</code> <code class="java plain">Specification&lt;Todo&gt; titleOrDescriptionContainsIgnoreCase(String searchTerm) {</code></div><div class="line number8 index7 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">return</code> <code class="java plain">(root, query, cb) -&gt; {</code></div><div class="line number9 index8 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">String containsLikePattern = getContainsLikePattern(searchTerm);</code></div><div class="line number10 index9 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">return</code> <code class="java plain">cb.or(</code></div><div class="line number11 index10 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">cb.like(cb.lower(root.&lt;String&gt;get(Todo_.title)), containsLikePattern),</code></div><div class="line number12 index11 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">cb.like(cb.lower(root.&lt;String&gt;get(Todo_.description)), containsLikePattern)</code></div><div class="line number13 index12 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">);</code></div><div class="line number14 index13 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">};</code></div><div class="line number15 index14 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number16 index15 alt1">&nbsp;</div><div class="line number17 index16 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java keyword">static</code> <code class="java plain">String getContainsLikePattern(String searchTerm) {</code></div><div class="line number18 index17 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">if</code> <code class="java plain">(searchTerm == </code><code class="java keyword">null</code> <code class="java plain">|| searchTerm.isEmpty()) {</code></div><div class="line number19 index18 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">return</code> <code class="java string">"%"</code><code class="java plain">;</code></div><div class="line number20 index19 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number21 index20 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">else</code> <code class="java plain">{</code></div><div class="line number22 index21 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">return</code> <code class="java string">"%"</code> <code class="java plain">+ searchTerm.toLowerCase() + </code><code class="java string">"%"</code><code class="java plain">;</code></div><div class="line number23 index22 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number24 index23 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number25 index24 alt2"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><p class="cye-lm-tag">Let’s find out how we can implement the service method that creates and invokes our database query.</p>
<h3>Implementing the Service Method</h3><p class="cye-lm-tag">The first thing that we have to do is to create an interface called <em>TodoSearchService</em>. This interface declares one method called <em>findBySearchTerm()</em>. This method takes the search term as a method parameter and returns a list of <em>TodoDTO</em> objects. The source code of the <em>TodoSearchService</em> interface looks as follows:</p>
<div><div id="highlighter_463544" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">import</code> <code class="java plain">java.util.List;</code></div><div class="line number2 index1 alt1">&nbsp;</div><div class="line number3 index2 alt2"><code class="java keyword">public</code> <code class="java keyword">interface</code> <code class="java plain">TodoSearchService {</code></div><div class="line number4 index3 alt1">&nbsp;</div><div class="line number5 index4 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">List&lt;TodoDTO&gt; findBySearchTerm(String searchTerm);</code></div><div class="line number6 index5 alt1"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><p class="cye-lm-tag">We can implement this interface by following these steps:</p>
<ol><li>Create a <em>RepositoryTodoSearchService</em> class, implement the <em>TodoSearchService</em> interface, and annotate the class with the <em>@Service</em> annotation.</li><li>Add a private <em>final TodoRepository</em> field to the created class.</li><li>Create a constructor that injects a <em>TodoRepository</em> object to the created field by using constructor injection.</li><li>Override the <em>findBySearchTerm()</em> method. Annotate the method with the <em>@Transactional</em> annotation and ensure that the transaction is read-only.</li><li>Implement the <em>findBySearchTerm()</em> method by following these steps:<ol><li>Get the <em>Specification&lt;Todo&gt;</em> object by invoking the <em>static titleOrDescriptionContainsIgnoreCase()</em> method of the <em>TodoSpecifications</em> class.</li><li>Get the todo entries whose title or description contains the given search term by invoking the <em>findAll()</em> method of the <em>JpaSpecificationExecutor</em> interface. Pass the created <em>Specification&lt;Todo&gt;</em> object as a method parameter.</li><li>Transform the list of <em>Todo</em> objects into a list of <em>TodoDTO</em> objects and return the created list.</li></ol></li></ol><p class="cye-lm-tag">The source of our service class looks as follows:</p>
<div><div id="highlighter_311236" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div class="line number23 index22 alt2">23</div><div class="line number24 index23 alt1">24</div><div class="line number25 index24 alt2">25</div><div class="line number26 index25 alt1">26</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.beans.factory.annotation.Autowired;</code></div><div class="line number2 index1 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.stereotype.Service;</code></div><div class="line number3 index2 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.transaction.annotation.Transactional;</code></div><div class="line number4 index3 alt1">&nbsp;</div><div class="line number5 index4 alt2"><code class="java keyword">import</code> <code class="java plain">java.util.List;</code></div><div class="line number6 index5 alt1">&nbsp;</div><div class="line number7 index6 alt2"><code class="java keyword">import</code> <code class="java keyword">static</code> <code class="java plain">net.petrikainulainen.springdata.jpa.todo.TodoSpecifications.titleOrDescriptionContainsIgnoreCase;</code></div><div class="line number8 index7 alt1">&nbsp;</div><div class="line number9 index8 alt2"><code class="java color1">@Service</code></div><div class="line number10 index9 alt1"><code class="java keyword">final</code> <code class="java keyword">class</code> <code class="java plain">RepositoryTodoSearchService </code><code class="java keyword">implements</code> <code class="java plain">TodoSearchService {</code></div><div class="line number11 index10 alt2">&nbsp;</div><div class="line number12 index11 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java keyword">final</code> <code class="java plain">TodoRepository repository;</code></div><div class="line number13 index12 alt2">&nbsp;</div><div class="line number14 index13 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Autowired</code></div><div class="line number15 index14 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java plain">RepositoryTodoSearchService(TodoRepository repository) {</code></div><div class="line number16 index15 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">this</code><code class="java plain">.repository = repository;</code></div><div class="line number17 index16 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number18 index17 alt1">&nbsp;</div><div class="line number19 index18 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Transactional</code><code class="java plain">(readOnly = </code><code class="java keyword">true</code><code class="java plain">)</code></div><div class="line number20 index19 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Override</code></div><div class="line number21 index20 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java plain">List&lt;TodoDTO&gt; findBySearchTerm(String searchTerm) {</code></div><div class="line number22 index21 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">Specification&lt;Todo&gt; searchSpec = titleOrDescriptionContainsIgnoreCase(searchTerm);</code></div><div class="line number23 index22 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">List&lt;Todo&gt; searchResults = repository.findAll(searchSpec);</code></div><div class="line number24 index23 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">return</code> <code class="java plain">TodoMapper.mapEntitiesIntoDTOs(searchResults);</code></div><div class="line number25 index24 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number26 index25 alt1"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><div class="note"> <strong>Additional Reading:</strong><p class="cye-lm-tag"></p>
<ul><li><a href="http://docs.spring.io/spring/docs/4.1.x/javadoc-api/org/springframework/beans/factory/annotation/Autowired.html" target="_blank">The Javadoc of the <em>@Autowired</em> annotation</a></li><li><a href="http://docs.spring.io/spring/docs/4.1.x/javadoc-api/org/springframework/stereotype/Service.html" target="_blank">The Javadoc of the <em>@Service</em> annotation</a></li><li><a href="http://docs.spring.io/spring/docs/4.1.x/spring-framework-reference/htmlsingle/#transaction-declarative-annotations" target="_blank">Spring Framework Reference Manual: 12.5.6 Using @Transactional</a></li><li><a href="http://docs.spring.io/spring/docs/4.1.x/javadoc-api/org/springframework/transaction/annotation/Transactional.html" target="_blank">The Javadoc of the <em>@Transactional</em> annotation</a></li></ul></div><p class="cye-lm-tag">Let’s move on and find out when we should create our database queries by using the JPA Criteria API.</p>
<h2>Why Should We Use the JPA Criteria API?</h2><p class="cye-lm-tag">This tutorial has already taught us how we can create database queries by using <a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-creating-database-queries-from-method-names/">the method names of our query methods</a>, <a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-creating-database-queries-with-the-query-annotation/">the <em>@Query</em> annotation</a>, and <a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-creating-database-queries-with-named-queries/">named queries</a>. The problem of these query generation methods is that we cannot use them if we have to create dynamic queries (i.e queries that don’t have a constant number of conditions).</p>
<p class="cye-lm-tag">If we need to create dynamic queries, we have to create these queries programmatically, and using the JPA Criteria API is one way to do it. The pros of using the JPA Criteria API are:</p>
<ul><li>It supports dynamic queries.</li><li>If we have an existing application that uses the JPA Criteria API, it is easy to refactor it to use Spring Data JPA (if we want to).</li><li>It is the standard way to create dynamic queries with the Java Persistence API (this doesn’t necessarily matter, but sometimes it does matter).</li></ul><p class="cye-lm-tag">That sounds impressive. Unfortunately, the JPA Criteria API has one big problem:</p>
<p class="cye-lm-tag"><strong>It is very hard to implement complex queries and even harder to read them.</strong></p>
<p class="cye-lm-tag">That is why I think that we should use criteria queries only when it is absolutely necessary (and we cannot use <a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-part-five-querydsl/">Querydsl</a>).</p>
<p class="cye-lm-tag">Let’s move on and summarize what we have learned from this blog post.</p>
<p class="cye-lm-tag"></p>
<h2>Summary</h2><p class="cye-lm-tag">This blog post has taught us six things:</p>
<ul><li>We can create the JPA static metamodel classes by using the Maven Processor Plugin.</li><li>If we want to invoke queries that use the JPA Criteria API, our repository interface must extend the <em>JpaSpecificationExecutor&lt;T&gt;</em> interface.</li><li>We can specify the conditions of our database queries by creating new <em>Specification&lt;T&gt;</em> objects.</li><li>We should create our <em>Specification&lt;T&gt;</em> objects by using specification builder classes.</li><li>We can combine <em>Specification&lt;T&gt;</em> objects by using the methods provided by the <em>Speficications&lt;T&gt;</em> class.</li><li>We should use criteria queries only when we don’t have a choice.</li></ul><p class="cye-lm-tag">The next part of this tutorial describes how we can <a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-part-five-querydsl/">create database queries with Querydsl</a>.</p>
<p class="cye-lm-tag"><strong>P.S.</strong> You can <a href="https://github.com/pkainulainen/spring-data-jpa-examples/tree/master/criteria-api" target="_blank">get the example application of this blog post from Github</a>.</p>
<div class="note">If you want to learn how to use Spring Data JPA, you should read my <a href="/spring-data-jpa-tutorial/">Spring Data JPA tutorial</a>.</div> <span id="tve_leads_end_content" style="display: block; visibility: hidden; border: 1px solid transparent;" class="cye-lm-tag"></span>
</div>

</div>




</div>
</div>
</div>
</div>
</div>
</div><p style="line-height: 24px;" data-unit="px" class="tve_p_center cye-lm-tag"><span class="tve_custom_font_size cye-lm-tag" style="font-size: 16px;">I will never rent, sell, or share your email address.<br></span></p>

</div></div></div></div></div></div></div>
<section id="comments"><div class="comments_intro"><span class="num_comments cye-lm-tag">179</span> comments… <a href="#commentform" rel="nofollow">add one</a></div><ul class="comment_list"><li class="comment even thread-even depth-1" id="comment-4083"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Stone</span>  <span class="comment_date cye-lm-tag">February 15, 2012, 20:43</span></div><div class="comment_text" id="comment-body-4083"><p class="cye-lm-tag">Your project structure is amazing.  I was blown away by how well you laid it out.  I am still trying to soak it all in and I’m going to keep poring over it to really understand it all.  I expect that it will serve as a foundation for future Spring 3.1 JPA based projects.  I can’t thank you enough for putting together such a wonderful tutorial where you took the time to set up an elegant foundation.</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-4085"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">February 15, 2012, 21:54</span></div><div class="comment_text" id="comment-body-4085"><p class="cye-lm-tag">Stone,</p>
<p class="cye-lm-tag">thanks for your comment. It is always nice to hear that I could actually help someone to learn something new. Also, it would be nice to hear which things are hard to understand so that I could try to provide a bit better explanation.</p>
</div> </div><ul class="children"><li class="comment even depth-3" id="comment-4263"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Stone</span>  <span class="comment_date cye-lm-tag">February 28, 2012, 23:21</span></div><div class="comment_text" id="comment-body-4263"><p class="cye-lm-tag">It took some time for me to grasp how the Specification stuff worked, I still don’t think I’m very clear on that.  It also took a little bit of time to understand how the environment was getting initialized in the ApplicationContext (I’m still a bit of a novice when it comes to Spring configurations, and from what I’ve gathered, it seems that Spring parsed the data from the @ImportResource and @PropertySource specifications to initialize the environment).  One other issue that I had was figuring out how to access all of the pages and when it was deployed locally (I had to prefix all of the form:action and href values to include the project name prefix).  Lastly, the verify statements in the test cases were also new to me, so I learned about Mockito from this project as well.</p>
<p class="cye-lm-tag">I’d like to give back to you — I found a few issues in the code that you may want to include.  I kept getting a NPE in AbstractPathImpl.get() method.  To get around it, I had to move the Person_ class into the same package as Person (~.model).  I also changed the return statement on the PersonRepositoryService.update() method to “return personRepository.save(person);<br> ” instead of “return person;” — the value was never getting updated in the database.  This necessitated changing the PersonRepositoryServiceTest.update() method to:</p>
<p class="cye-lm-tag"> PersonDTO updated = PersonTestUtil.createDTO(PERSON_ID, FIRST_NAME_UPDATED, LAST_NAME_UPDATED);<br> Person person = PersonTestUtil.createModelObject(PERSON_ID, FIRST_NAME, LAST_NAME);</p>
<p class="cye-lm-tag"> when(personRepositoryMock.findOne(updated.getId())).thenReturn(person);<br> when(personRepositoryMock.save(person)).thenReturn(person);</p>
<p class="cye-lm-tag"> Person returned = personService.update(updated);</p>
<p class="cye-lm-tag"> verify(personRepositoryMock, times(1)).findOne(updated.getId());<br> verify(personRepositoryMock, times(1)).save(person);<br> verifyNoMoreInteractions(personRepositoryMock);</p>
<p class="cye-lm-tag"> assertPerson(updated, returned);</p>
<p class="cye-lm-tag">Finally, there was a simple type in the PersonRepositoryServiceTest.assertPerson() — the last assert statement should read “assertEquals(expected.getLastName(), actual.getLastName());”.</p>
<p class="cye-lm-tag">Again, thank you so much for such a thoughtful and well designed tutorial — I learned a lot.</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-4" id="comment-4270"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">February 29, 2012, 10:17</span></div><div class="comment_text" id="comment-body-4270"><p class="cye-lm-tag">Stone,</p>
<p class="cye-lm-tag">thanks your comment. I am planning to add more links to resources which contains tutorials and other material about the used libraries and frameworks. I will also check out the issues you mentioned later today. By the way, did you use the H2 in memory database when you noticed these problems? In any case, thanks for your contribution. :)</p>
</div> </div><ul class="children"><li class="comment even depth-5" id="comment-4273"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Stone</span>  <span class="comment_date cye-lm-tag">February 29, 2012, 14:51</span></div><div class="comment_text" id="comment-body-4273"><p class="cye-lm-tag">I didn’t use H2, I used MySQL.</p>
</div></div></li></ul></li><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-4" id="comment-4277"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">February 29, 2012, 19:11</span></div><div class="comment_text" id="comment-body-4277"><p class="cye-lm-tag">Stone,</p>
<p class="cye-lm-tag">I tried to reproduce the problem you were having with the update() method of Person RepositoryPersonService class by using MySQL 5.5.19. Unfortunately I was not able to reproduce it. In my environment the updates made to the Person instance were updated to the database.</p>
<p class="cye-lm-tag">The thing is that you should not have to call the save() method of PersonRepository when you are updating the information of a person. The reason for this is that Hibernate will automatically detect the changes made to persistent objects during the transaction and synchronize the changes with the database after the transaction is committed.</p>
<p class="cye-lm-tag">Check the Working with Objects Section of the Hibernate reference manual for more details: <a href="http://docs.jboss.org/hibernate/core/4.0/manual/en-US/html/objectstate.html#objectstate-overview" rel="nofollow">http://docs.jboss.org/hibernate/core/4.0/manual/en-US/html/objectstate.html#objectstate-overview</a></p>
<p class="cye-lm-tag">Common causes for the problem you were having are:</p>
<p class="cye-lm-tag">You do not have got transaction at all (the @Transactional annotation is not used either at method or class level)</p>
<p class="cye-lm-tag">The transaction is read only (The readOnly property of the @Transactional annotation is set to true)</p>
<p class="cye-lm-tag">The state of the updated entity is not persistent (Check the link to the reference manual for more details).</p>
<p class="cye-lm-tag">I am wondering if this advice helped you? (I am bit of a perfectionist so it would be a personal victory for me to help you to remove that unnecessary call to  the save() method of PersonRepository).</p>
</div> </div></li></ul></li></ul></li></ul></li><li class="comment even thread-odd thread-alt depth-1" id="comment-4131"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">David</span>  <span class="comment_date cye-lm-tag">February 19, 2012, 05:22</span></div><div class="comment_text" id="comment-body-4131"><p class="cye-lm-tag">Hi Petri,</p>
<p class="cye-lm-tag">Thank you for the very nice explanation. For Spring Data JPA + criteria queries, is this the only signature available ?</p>
<p class="cye-lm-tag">List repository.findAll(Specification s);</p>
<p class="cye-lm-tag">If I know that my query will return only a single result, can I use something like</p>
<p class="cye-lm-tag">T repository.find(Specification s);</p>
<p class="cye-lm-tag">I tried find(), but I exceptions, e.g. “No property find found for type class domain.Customer”.</p>
<p class="cye-lm-tag">So, is findAll() the only available query method with the Specification parameter?</p>
<p class="cye-lm-tag">Thanks,<br> David</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-4143"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">February 19, 2012, 19:12</span></div><div class="comment_text" id="comment-body-4143"><p class="cye-lm-tag">Hi David,</p>
<p class="cye-lm-tag">You can use the findOne(Specification&lt;T&gt; spec) method of the JpaSpecificationExecutor interface to get a single entity which matches with the given specification.</p>
<p class="cye-lm-tag">See the API for more details: <a href="http://static.springsource.org/spring-data/data-jpa/docs/1.0.x/api/org/springframework/data/jpa/repository/JpaSpecificationExecutor.html" rel="nofollow">http://static.springsource.org/spring-data/data-jpa/docs/1.0.x/api/org/springframework/data/jpa/repository/JpaSpecificationExecutor.html</a></p>
<p class="cye-lm-tag">I hope that this was helpful.</p>
</div> </div></li></ul></li><li class="comment even thread-even depth-1" id="comment-4810"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">amol</span>  <span class="comment_date cye-lm-tag">April 12, 2012, 17:53</span></div><div class="comment_text" id="comment-body-4810"><p class="cye-lm-tag">Hi Petri,</p>
<p class="cye-lm-tag">Nice tutorial with good and clear examples which gives good insight on Spring Data JPA. Thanks for that.</p>
<p class="cye-lm-tag">I tried to implement jpa criteria and got NPE on org.hibernate.ejb.criteria.path.AbstractPathImpl.get(AbstractPathImpl.java:141)<br> Apparently, I got exact same exception, when i tried to run your project – tutorial 4.</p>
<p class="cye-lm-tag">Then I moved my staticMetamodel to the package where my entity is and this exception went away. But the simple criteria is also not returning anything. I did check the table and can retrive data before I apply criteria to filter. So I am stumped. any clues ?</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-4811"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">April 12, 2012, 18:25</span></div><div class="comment_text" id="comment-body-4811"><p class="cye-lm-tag">Hi Amol,</p>
<p class="cye-lm-tag">Thanks for your comment. I finally ended up moving the static meta model class to the same package where the Person entity is located. Hopefully this will finally fix the issue with the NPE you (and Stone) mentioned. Thanks for the bug report. I should have done this ages ago but somehow I managed to forget this issue.</p>
<p class="cye-lm-tag">In my experience, if a query is not returning the correct results, the problem is almost always in the created criteria. It would be helpful if you could give a bit more detailed description about your problem. The answers to following questions would help me to get a better idea of the situation:</p>
<ul><li>What kind of entities do you have?</li><li>What kind of condition are you trying to implement with JPA criteria API?</li></ul></div> </div><ul class="children"><li class="comment even depth-3" id="comment-4864"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">amol</span>  <span class="comment_date cye-lm-tag">April 17, 2012, 12:12</span></div><div class="comment_text" id="comment-body-4864"><p class="cye-lm-tag">Well, I managed to fix that. It was with the created criteria as you rightly said.<br> Thanks again.</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-4" id="comment-4865"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">April 17, 2012, 12:19</span></div><div class="comment_text" id="comment-body-4865"><p class="cye-lm-tag">Hi Amol,</p>
<p class="cye-lm-tag">great to hear that you managed to solve your problem.</p>
</div> </div></li></ul></li></ul></li></ul></li><li class="comment even thread-odd thread-alt depth-1" id="comment-4861"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">albert</span>  <span class="comment_date cye-lm-tag">April 17, 2012, 10:48</span></div><div class="comment_text" id="comment-body-4861"><p class="cye-lm-tag">Hei Petri of all the tutorials about jpa I found yours has been the most helpful! But I have still a doubt, we will see if you can find a solution: If I want to create an specification of one object that it is a parameter in another object how can I do it? for example: imagine that your object person has another attribute that is adress, and Adress has as attributes street and number, how can I create an specification that obtain all the people that live in one street?</p>
<p class="cye-lm-tag">Thanks in advance!!!</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-4862"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">April 17, 2012, 10:55</span></div><div class="comment_text" id="comment-body-4862"><p class="cye-lm-tag">Hi Albert,</p>
<p class="cye-lm-tag">Thanks for your comment. It was nice to see that that you enjoyed my tutorials. The answer to your question is: it can be done. I am currently at work but I will describe the solution after I get back to home.</p>
</div> </div><ul class="children"><li class="comment even depth-3" id="comment-4869"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">amol</span>  <span class="comment_date cye-lm-tag">April 17, 2012, 14:44</span></div><div class="comment_text" id="comment-body-4869"><p class="cye-lm-tag">Hi Petri,</p>
<p class="cye-lm-tag">I am also trying to implement similar criteria. Hoping to see some input from you.</p>
<p class="cye-lm-tag">Many Thanks,</p>
</div> </div></li></ul></li><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-4871"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">April 17, 2012, 17:11</span></div><div class="comment_text" id="comment-body-4871"><p class="cye-lm-tag">Hi Albert,</p>
<p class="cye-lm-tag">Lets assume that you have got a Person object which has a reference to a Address object. So, the source code of the Person class could be something like this:</p>
<p class="cye-lm-tag"><code lang="java"><br> @Entity<br> @Table("persons")<br> public class Person {<br> private Address address;</code></p>
<p class="cye-lm-tag"><code lang="java"> public Person() {</code></p>
<p class="cye-lm-tag"><code lang="java"> }</code></p>
<p class="cye-lm-tag"><code lang="java"> public Address getAddress() {<br> return address;<br> }<br> }<br> </code></p>
<p class="cye-lm-tag">Now, the source code of the Address class is following:</p>
<p class="cye-lm-tag"><code lang="java"><br> @Embeddable<br> public class Address {</code></p>
<p class="cye-lm-tag"><code lang="java"> private String street;</code></p>
<p class="cye-lm-tag"><code lang="java"> private int number;</code></p>
<p class="cye-lm-tag"><code lang="java"> public Address() {</code></p>
<p class="cye-lm-tag"><code lang="java"> }</code></p>
<p class="cye-lm-tag"><code lang="java"> public String getStreet() {<br> return street;<br> }</code></p>
<p class="cye-lm-tag"><code lang="java"> public int getNumber() {<br> return number;<br> }<br> }<br> </code></p>
<p class="cye-lm-tag">As you said, you want search all persons which are living in the same street. This criteria is built like this (Note that I am not using the static meta model in this example):</p>
<p class="cye-lm-tag"><code lang="java"><br> public class PersonSpecifications {</code></p>
<p class="cye-lm-tag"><code lang="java"> public static Specification<person> livesInGivenStreet(final String street) {</person></code></p>
<p class="cye-lm-tag"><code lang="java"> return new Specification<person>() {<br> @Override<br> public Predicate toPredicate(Root</person><person> personRoot, CriteriaQuery&lt; ?&gt; query, CriteriaBuilder cb) {<br> return cb.equal(root.</person></code></p>
<code lang="java"> <address>get("address").<string>get("street"), street);<br> }<br> };<br> }<br> }<br> </string></address> </code><p class="cye-lm-tag"></p>
<p class="cye-lm-tag">In this solution I have assumed the the database column containing the street in which the person lives is found from persons database table. Is the case for you or are you using a separate entity object in your domain model instead of component?</p>
</div> </div><ul class="children"><li class="comment even depth-3" id="comment-4873"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">albert</span>  <span class="comment_date cye-lm-tag">April 17, 2012, 18:15</span></div><div class="comment_text" id="comment-body-4873"><p class="cye-lm-tag">this is exactly what I was looking for. I was having problems in this line:<br> “root.get(“address”).get(“street”), street);”</p>
<p class="cye-lm-tag">I didn’t know how to reach the street from address, I thought I had to make an “innerjoin” but I have seen that if I execute your code the innerjoin is created alone when the query is created.</p>
<p class="cye-lm-tag">Thanks a lot for your help!!!! I’ll try now to make it a little more complicate using the metamodel and using classes than extend from other classes, we will see if it works fine…thanks again.</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-4" id="comment-4875"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">April 17, 2012, 18:20</span></div><div class="comment_text" id="comment-body-4875"><p class="cye-lm-tag">Albert,</p>
<p class="cye-lm-tag">Good to see that I could help you out. If you need more information about the the JPA Criteria API, you should check out this article:</p>
<p class="cye-lm-tag"><a href="http://www.ibm.com/developerworks/java/library/j-typesafejpa/" rel="nofollow">http://www.ibm.com/developerworks/java/library/j-typesafejpa/</a></p>
</div> </div></li></ul></li></ul></li></ul></li><li class="comment even thread-even depth-1" id="comment-4886"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">amol</span>  <span class="comment_date cye-lm-tag">April 18, 2012, 13:45</span></div><div class="comment_text" id="comment-body-4886"><p class="cye-lm-tag">Hi Petri,<br> I have 3 tables as Check, User and UserDetail</p>
<p class="cye-lm-tag">Check – main search table has<br> userid<br> and other fields</p>
<p class="cye-lm-tag">User table has<br> userid<br> and other fields</p>
<p class="cye-lm-tag">UserDetail table has<br> userid<br> firstname<br> lastname</p>
<p class="cye-lm-tag">the domain model is</p>
<p class="cye-lm-tag">Check class<br> has User</p>
<p class="cye-lm-tag">User class<br> has userDetail</p>
<p class="cye-lm-tag">I am trying to build predicate to perform search on firstname and that is giving me trouble.<br> my predicate is as below<br> predicate = cb.equal(root.get(“user”).get(“userid”).get(“userDetail”).get(“firstname”), searchName)<br> this throws exception as Illegal attempt to dereference path source [null,user]<br> Any clues on how to build the search with these 3 tables ? Do i have to use some Join while building predicate ?</p>
<p class="cye-lm-tag">If I create a link between Check and UserDetail table by adding userdetail in Check then following works fine<br> predicate = cb.equal(root.get(“userDetail”).get(“firstname”), searchName)</p>
<p class="cye-lm-tag">Thanks in advance</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-4888"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">April 18, 2012, 19:35</span></div><div class="comment_text" id="comment-body-4888"><p class="cye-lm-tag">Hi Amol,</p>
<p class="cye-lm-tag">If I understood your domain model correctly, you can obtain the correct predicate with this code:</p>
<p class="cye-lm-tag"><code lang="java"><br> cb.equal(root.&lt;User&gt;get(“user”).&lt;UserDetail&gt;get(“userDetail”).&lt;String&gt;get(“firstname”), searchName);<br> </code></p>
</div> </div><ul class="children"><li class="comment even depth-3" id="comment-4891"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">amol</span>  <span class="comment_date cye-lm-tag">April 18, 2012, 20:09</span></div><div class="comment_text" id="comment-body-4891"><p class="cye-lm-tag">Thanks for the reply Petri but that throws exception as “Unable to resolve attribute [userDetail] against path”. ?</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-4" id="comment-4893"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">April 18, 2012, 20:37</span></div><div class="comment_text" id="comment-body-4893"><p class="cye-lm-tag">Hi Amol,</p>
<p class="cye-lm-tag">it seems that I would have to see the source code in order to help you. It seems that the attribute called <i>userDetail</i> cannot be resolved. This means that the property called <i>userDetail</i> is not found.</p>
<p class="cye-lm-tag">This seems a bit puzzling because I assumed that the <i>Check</i> class contains a property called <i>user</i>, the <i>User</i> class contains a property called <i>userDetail</i> and the <i>UserDetail</i> class contains property <i>firstName</i>. Are you trying to navigate from <i>Check</i> to <i>UserDetail</i> when building the <i>Predicate</i>?</p>
</div> </div><ul class="children"><li class="comment even depth-5" id="comment-4894"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">amol</span>  <span class="comment_date cye-lm-tag">April 18, 2012, 21:03</span></div><div class="comment_text" id="comment-body-4894"><p class="cye-lm-tag">Hi Petri,<br> Here is the code snippet. I have removed unwanted comments, fields and getter/setter methods.<br> You are right CheckRecord has User has userDetail has firstName.</p>
<p class="cye-lm-tag"><code lang="java><br /> @Entity<br /> @Table(name = " checkrecord")<br=""> @PersistenceUnit(name = "core-dal")<br> public class CheckRecord {<br> private Long id;<br> private String status;<br> private Date expiry;<br> private User user;</code></p>
<p class="cye-lm-tag"><code lang="java><br /> @Entity<br /> @Table(name = " checkrecord")<br=""> @ManyToOne(optional = true, fetch = FetchType.LAZY, targetEntity = User.class)<br> @JoinColumn(name = "userId")<br> public User getUser() {<br> return user;<br> }<br> }</code></p>
<p class="cye-lm-tag"><code lang="java><br /> @Entity<br /> @Table(name = " checkrecord")<br="">@Entity<br> @Table(name = "UserTable")<br> @PersistenceUnit(name = "core-dal")<br> public class User {<br> private Long id;<br> private String username;<br> private Account account;<br> private UserDetail userDetail;</code></p>
<p class="cye-lm-tag"><code lang="java><br /> @Entity<br /> @Table(name = " checkrecord")<br=""> @OneToOne(mappedBy = "user", cascade = CascadeType.ALL)<br> public UserDetail getUserDetail() {<br> return userDetail;<br> }<br> }</code></p>
<p class="cye-lm-tag"><code lang="java><br /> @Entity<br /> @Table(name = " checkrecord")<br="">@Entity<br> @Table(name = "UserDetail")<br> @PersistenceUnit(name = "core-dal")<br> public class UserDetail {<br> private Long id;<br> private String firstName;<br> private String lastName;<br> private User user;<br> public String getFirstName() {<br> return firstName;<br> }<br> }<br> </code></p>
<p class="cye-lm-tag"><strong>Note: Added code tags and removed some unnecessary setters – Petri</strong></p>
</div></div></li><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-5" id="comment-4895"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">April 18, 2012, 21:21</span></div><div class="comment_text" id="comment-body-4895"><p class="cye-lm-tag">Hi Amol,</p>
<p class="cye-lm-tag">I noticed that the <em>getUser()</em> method of <em>UserDetail</em> class is missing. Does it look like this:</p>
<p class="cye-lm-tag"><code><br> @OneToOne<br> @JoinColumn("userId")<br> public User getUser() {<br> return user;<br> }<br> </code></p>
</div></div></li></ul></li></ul></li></ul></li></ul></li><li class="comment even thread-odd thread-alt depth-1" id="comment-4896"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">amol</span>  <span class="comment_date cye-lm-tag">April 18, 2012, 23:19</span></div><div class="comment_text" id="comment-body-4896"><p class="cye-lm-tag">Hi Petri,<br> yes it is like that. I removed that and others so my post is not too big.</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-4901"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">April 19, 2012, 09:44</span></div><div class="comment_text" id="comment-body-4901"><p class="cye-lm-tag">In this case the following specification builder should work:</p>
<p class="cye-lm-tag"><code lang="java"><br> public class CheckRecordSpecifications {</code></p>
<p class="cye-lm-tag"><code lang="java"> public static Specification&lt;CheckRecord&gt; firstNameIs(final String searchTerm) {</code></p>
<p class="cye-lm-tag"><code lang="java"> return new Specification&lt;CheckRecord&gt;() {<br> @Override<br> public Predicate toPredicate(Root&lt;CheckRecord&gt; root, CriteriaQuery&lt;?&gt; query, CriteriaBuilder cb) {<br> return cb.equal(root.&lt;User&gt;get(“user”).&lt;UserDetail&gt;get(“userDetail”).&lt;String&gt;get(“firstName”), searchTerm);<br> }<br> };<br> }<br> }<br> </code></p>
</div> </div></li></ul></li><li class="comment even thread-even depth-1" id="comment-4907"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">amol</span>  <span class="comment_date cye-lm-tag">April 19, 2012, 16:11</span></div><div class="comment_text" id="comment-body-4907"><p class="cye-lm-tag">spot on.. that did work.. I think last night eclipse was culprit as it was not picking up the latest class file.<br> Many Thanks for your help.</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-4909"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">April 19, 2012, 17:50</span></div><div class="comment_text" id="comment-body-4909"><p class="cye-lm-tag">Amol,</p>
<p class="cye-lm-tag">Great!</p>
</div> </div></li></ul></li><li class="comment even thread-odd thread-alt depth-1" id="comment-4957"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">albert</span>  <span class="comment_date cye-lm-tag">April 23, 2012, 14:05</span></div><div class="comment_text" id="comment-body-4957"><p class="cye-lm-tag">Hi Petri!</p>
<p class="cye-lm-tag">I have been working in this issue last week, but when I thought it was working well suddenly this problem has appeared: “org.springframework.web.util.NestedServletException: Request processing failed; nested exception is org.springframework.dao.InvalidDataAccessApiUsageException: Illegal attempt to dereference path source [null];”</p>
<p class="cye-lm-tag">What I´m doing is this:<br> Path path = root.get(CustomsOrder_.messageType);<br> predicates.add(cb.equal(path.get(MessageType_.group), messageGroup));</p>
<p class="cye-lm-tag">My CustomsOrder has a MessageType, this type belongs to a group and I would like to find a CustomsOrder by the group.<br> Do u have an idea what can happen here?</p>
<p class="cye-lm-tag">Tahnks in advance</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-4962"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">April 23, 2012, 19:32</span></div><div class="comment_text" id="comment-body-4962"><p class="cye-lm-tag">Hi Albert,</p>
<p class="cye-lm-tag">the exception you mentioned is thrown when the path used to get the compared property is not correct. You should definitely try to create the predicate without using the static meta model. Does the following work or is the same exception thrown?<br> <code language="java"><br> predicates.add(cb.equal(root.get("messageType").get("group"), messageGroup));<br> </code><br> Also, are you saying that <em>CustomsOrder</em> class has a property called <em>messageType</em>, and <em>MessageType</em> has a property called <em>group</em>?</p>
</div> </div><ul class="children"><li class="comment even depth-3" id="comment-4976"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">albert</span>  <span class="comment_date cye-lm-tag">April 24, 2012, 12:43</span></div><div class="comment_text" id="comment-body-4976"><p class="cye-lm-tag">Hi Petri!<br> I found the problem, after some hours checking the solution I have discovered that MessageType is an enumerator that is grouped by another enumerator that it is MessageGroup, as I didn’t do this code I assumed both were regular classes. So when I was getting the MessageType I could not reach the MessageGroup.My finall solution is to obtain from MessageType all the messages that belong to a group and search by list of messages instead of group. If you think that another solution more elegant exists please make me know it.<br> Code I have used:</p>
<p class="cye-lm-tag">List list =getMessagesTypeByGroup(group); //obtain msg by group selected<br> predicates.add(root.get(CustomsOrder_.messageType).in(list));</p>
<p class="cye-lm-tag">Thanks for your replying.</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-4" id="comment-5000"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">April 25, 2012, 18:08</span></div><div class="comment_text" id="comment-body-5000"><p class="cye-lm-tag">Hi Albert,</p>
<p class="cye-lm-tag">Good to see that you were able to solve your problem.</p>
</div> </div></li></ul></li></ul></li></ul></li><li class="comment even thread-even depth-1" id="comment-7115"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Raghu</span>  <span class="comment_date cye-lm-tag">July 31, 2012, 04:47</span></div><div class="comment_text" id="comment-body-7115"><p class="cye-lm-tag">Hi Petri,<br> Thank you very much for your detailed article.<br> I am trying to implement the below scenario in my project, but i dont see any distinct key word in spring JPA.</p>
<p class="cye-lm-tag">I mean in below way.<br> E.g- select c from customer<br> customer table– has firstname, lastname as columns.<br> Now I need to pull data as below.<br> select distinct c.lastname from customer c ;</p>
<p class="cye-lm-tag">Is there anyway we can achieve it ? I mean using NamedQuery or Specifications.</p>
<p class="cye-lm-tag">Thank you in advance.</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-7122"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">July 31, 2012, 10:05</span></div><div class="comment_text" id="comment-body-7122"><p class="cye-lm-tag">Hi Raghu,</p>
<p class="cye-lm-tag">You have two options for implementing this:</p>
<ul><li>Use the DISTINCT keyword of JPQL when you are creating query by using the @NamedQuery or @Query annotation.</li><li>Call the disctinct() method of the CriteriaQuery class in your specification builder method (The toPredicate() method of the Specification interface gets a reference of the CriteriaQuery object as a parameter).</li></ul><p class="cye-lm-tag"><strong>JPQL Example:</strong><br> <code><br> SELECT DISTINCT p FROM Person p WHERE...<br> </code><br> <strong>Criteria API with Specification Builder:</strong><br> <code><br> public class PersonSpecifications {<br> public static Specification<person> lastNameIsLike(final String searchTerm) {</person></code></p>
<p class="cye-lm-tag"><code> return new Specification<person>() {<br> @Override<br> public Predicate toPredicate(Root</person><person> personRoot, CriteriaQuery&lt; ?&gt; query, CriteriaBuilder cb) {<br> query.distinct(true);<br> //Build Predicate<br> }<br> };<br> }<br> } </person></code></p>
<p class="cye-lm-tag">In your case, I would add the following method to the CustomerRepository interface (or whatever your repository interface is):<br> <code><br> @Query("SELECT DISTINCT c.lastName FROM Customer c")<br> public List&lt;String&gt; findLastNames();<br> </code></p>
</div> </div><ul class="children"><li class="comment even depth-3" id="comment-1425634"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Kam</span>  <span class="comment_date cye-lm-tag">April 21, 2016, 11:10</span></div><div class="comment_text" id="comment-body-1425634"><p class="cye-lm-tag">Hi Petri,</p>
<p class="cye-lm-tag">The bunch of spring jpa tutorial is really worthful, i have tried @Query and Specification and QueryDSL also to implement my need, how ever not 100% success in it.</p>
<p class="cye-lm-tag">I need to fetch first 200 rows from EMP table where emp_loc is distinct<br> Table Structure :</p>
<p class="cye-lm-tag">EMP ID – PK<br> EMP NAME<br> EMP LOCA</p>
<p class="cye-lm-tag">public Predicate toPredicate(Root EmplRoot, CriteriaQuery query, CriteriaBuilder cb) {<br> query.distinct(true);<br> //What should be placed here as Predicate need to be returned<br> //cb.???<br> }<br> };<br> Thanks in advance</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-4" id="comment-1426095"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">April 21, 2016, 23:19</span></div><div class="comment_text" id="comment-body-1426095"><p class="cye-lm-tag">Hi Kam,</p>
<p class="cye-lm-tag">It was nice to hear that my blog posts have been useful to you. If you want to use criteria queries, the easiest way to achieve your goal is to <a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-part-seven-pagination/" rel="nofollow">use the pagination support of Spring Data JPA</a>. Just set the page size to 200 and get the first page.</p>
</div> </div></li></ul></li></ul></li></ul></li><li class="comment even thread-odd thread-alt depth-1" id="comment-7358"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Dhana kumar</span>  <span class="comment_date cye-lm-tag">August 10, 2012, 16:57</span></div><div class="comment_text" id="comment-body-7358"><p class="cye-lm-tag">Hi Petri,</p>
<p class="cye-lm-tag">Really loved your way of explanation and thanks for sharing, I read the entire comments and was really useful.</p>
<p class="cye-lm-tag">I have a below scenerio, how can we achieve conditions on one-to-many relation ship, below is predicate method for me.</p>
<p class="cye-lm-tag">public static Specification hasRole(final String roleName) {<br> return new Specification() {<br> public Predicate toPredicate(Root root, CriteriaQuery query, CriteriaBuilder builder) {<br> if (null != roleName) {<br> Expression&lt;List&gt; roleExpression = root.get(User_.roles);<br> // TODO: Need to do how can I join one-to-many relationship ?<br> }<br> return builder.conjunction();<br> }<br> };<br> }</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-7366"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">August 10, 2012, 22:52</span></div><div class="comment_text" id="comment-body-7366"><p class="cye-lm-tag">Hi Dhana,</p>
<p class="cye-lm-tag">thanks for your comment. It is nice to hear that you found this tutorial useful.</p>
<p class="cye-lm-tag">If you are trying to fetch all users who have a certain role, you can do this by using the <em>isMember()</em> method of the <em>CriteriaBuilder class</em>:</p>
<p class="cye-lm-tag"><code>Predicate hasRole = builder.isMember(roleName, roleExpression);</code></p>
<p class="cye-lm-tag">Also, check out <a href="http://www.objectdb.com/java/jpa/query/jpql/collection" rel="nofollow">Collections in JPQL and Criteria Queries</a>.</p>
</div> </div><ul class="children"><li class="comment even depth-3" id="comment-7388"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Dhana kumar</span>  <span class="comment_date cye-lm-tag">August 11, 2012, 18:32</span></div><div class="comment_text" id="comment-body-7388"><p class="cye-lm-tag">Hi Petri,<br> thanks, I have issue here, <code>roleName</code> is a String, but <code>roleExpression</code> is <code>Expression&lt;List&lt;Role&gt;&gt;</code>.</p>
<p class="cye-lm-tag">The generic bounded is expecting to pass <code>Role</code> object instead of <code>roleName</code>. Didn’t find solution, here is the my code.<br> <code><br> public static Specification&lt;User&gt; hasRole(final String roleName) {<br> return new Specification&lt;User&gt;() {<br> public Predicate toPredicate(Root&lt;User&gt; root,<br> CriteriaQuery&lt; ?&gt; query, CriteriaBuilder builder) {<br> if (null != roleName) {<br> Expression&lt;List&lt;Role&gt;&gt; roleExpression = root<br> .get(User_.roles);<br> return builder.isMember(roleName, roleExpression);<br> }<br> return builder.conjunction();<br> }<br> };<br> }<br> </code><br> <code>List<user> users = userRepository.findAll(where(isActiveUser()).and(hasAddress(address)).and(hasRole(roleName)));</user></code></p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-4" id="comment-7390"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">August 11, 2012, 18:45</span></div><div class="comment_text" id="comment-body-7390"><p class="cye-lm-tag">Hi Dhana,</p>
<p class="cye-lm-tag">Is the <code>Role</code> an enum? If it is, you have to change this line:</p>
<p class="cye-lm-tag"><code>return builder.isMember(roleName, roleExpression);</code></p>
<p class="cye-lm-tag">To:</p>
<p class="cye-lm-tag"><code>return builder.isMember(Role.valueOf(roleName), roleExpression);</code></p>
<p class="cye-lm-tag">Let me know if this works. Also, if some exception is thrown, it would be useful to know what it is.</p>
</div> </div></li></ul></li></ul></li></ul></li><li class="comment even thread-even depth-1" id="comment-7395"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Dhana kumar</span>  <span class="comment_date cye-lm-tag">August 11, 2012, 20:34</span></div><div class="comment_text" id="comment-body-7395"><p class="cye-lm-tag">No Petri, Role is an entity which is mapped as one to many for the User.</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-7396"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">August 11, 2012, 20:53</span></div><div class="comment_text" id="comment-body-7396"><p class="cye-lm-tag">Hi Dhana,</p>
<p class="cye-lm-tag">My bad. I totally missed the one to many relationship. You can use join for this purpose. Try the following code:<br> <code><br> //Roles is a list?<br> ListJoin&lt;User, Role&gt; roleJoin = root.joinList(User_.roles);<br> //Role name matches with the role name given as a parameter<br> return builder.equal(roleJoin.&lt;String&gt;get(Role_.name), roleName);<br> </code></p>
</div> </div></li></ul></li><li class="comment even thread-odd thread-alt depth-1" id="comment-7411"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Dhana kumar</span>  <span class="comment_date cye-lm-tag">August 12, 2012, 13:15</span></div><div class="comment_text" id="comment-body-7411"><p class="cye-lm-tag">Thanks, it works now, appreciate your help.</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-7413"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">August 12, 2012, 13:38</span></div><div class="comment_text" id="comment-body-7413"><p class="cye-lm-tag">You are welcome. I am happy to hear that you solved your problem.</p>
</div> </div><ul class="children"><li class="comment even depth-3" id="comment-1186134"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">svlada</span>  <span class="comment_date cye-lm-tag">April 21, 2015, 17:24</span></div><div class="comment_text" id="comment-body-1186134"><p class="cye-lm-tag">How to join two Entities with Specification API?</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-4" id="comment-1186901"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">April 22, 2015, 18:25</span></div><div class="comment_text" id="comment-body-1186901"><p class="cye-lm-tag">Check out a blog post titled: <a href="http://www.altuure.com/2010/09/23/jpa-criteria-api-by-samples-%E2%80%93-part-ii/" target="_blank" rel="nofollow">JPA Criteria API by samples – Part-II</a>. It explains how you can create a join query, a fetch join query, and sub select join query.</p>
<p class="cye-lm-tag">You can use the techniques described in that blog post when you implement <a href="http://docs.spring.io/spring-data/jpa/docs/current/api/org/springframework/data/jpa/domain/Specification.html#toPredicate-javax.persistence.criteria.Root-javax.persistence.criteria.CriteriaQuery-javax.persistence.criteria.CriteriaBuilder-" target="_blank" rel="nofollow">the <code>toPredicate()</code> method of the <code>Specification</code> interface</a>.</p>
</div> </div></li></ul></li></ul></li></ul></li><li class="comment even thread-even depth-1" id="comment-8016"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Gauthier Peel</span>  <span class="comment_date cye-lm-tag">September 5, 2012, 13:48</span></div><div class="comment_text" id="comment-body-8016"><p class="cye-lm-tag">I noticed than you cannot have the following 2 extensions simultaniously  :  (1) a custom extension of the JpaRepository (to introduce a new generic method for all repo) and (2) implements JpaSpecificationExecutor.<br> If you try it you get exception when Spring builds your repo:<br> Error creating bean with name ‘pilotRepository’: FactoryBean threw exception on object creation; nested exception …<br> Caused by: org.springframework.data.mapping.PropertyReferenceException: No property delete found for type pilot.business.model.Pilot<br> In the preceeding comment David may have encountered the same problem …</p>
</div> </div><ul class="children"><li class="comment odd alt depth-2" id="comment-12391"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Martin</span>  <span class="comment_date cye-lm-tag">December 21, 2012, 10:13</span></div><div class="comment_text" id="comment-body-12391"><p class="cye-lm-tag">Hi,<br> I stumbled in the same type of problem. Do you have a solution for the problem in the meantime?</p>
<p class="cye-lm-tag">TIA</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-3" id="comment-12392"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">December 21, 2012, 10:44</span></div><div class="comment_text" id="comment-body-12392"><p class="cye-lm-tag">Follow these steps:</p>
<ol><li>Create an interface for the custom methods that are introduced to all repositories and extend both <code>JpaRepository</code> and <code>JpaSpecificationExecutor</code> interfaces in it.</li><li>Create an implementation for the base repository that extends the <code>SimpleJpaRepository</code> class.</li><li>Create repository factory bean for your new base repository class.</li><li>Create the actual repository interface and extend the base repository interface.</li></ol><p class="cye-lm-tag">Let me know if this solved your problem.</p>
</div> </div></li></ul></li></ul></li><li class="comment odd alt thread-odd thread-alt depth-1" id="comment-8886"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Alex</span>  <span class="comment_date cye-lm-tag">September 25, 2012, 22:01</span></div><div class="comment_text" id="comment-body-8886"><p class="cye-lm-tag">Thanks a lot for the tutorial. I’m just getting started with Spring Data JPA and I was having a hard time getting around how to extend it to do more complicated queries. This was a huge help.</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-8888"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">September 25, 2012, 22:24</span></div><div class="comment_text" id="comment-body-8888"><p class="cye-lm-tag">Alex,</p>
<p class="cye-lm-tag">It is great to hear that you liked this tutorial. Also, you might be interested to read my blog entry about <a href="http://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-part-five-querydsl/" rel="nofollow">Spring Data JPA and Querydsl</a>. To be honest, the JPA Criteria API can be a bit hard to use if you have to create a really complicated query with it. <a href="http://www.querydsl.com/" rel="nofollow">Querydsl</a> offers an solution to this problem.</p>
</div> </div></li></ul></li><li class="comment odd alt thread-even depth-1" id="comment-12320"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Lev</span>  <span class="comment_date cye-lm-tag">December 18, 2012, 20:47</span></div><div class="comment_text" id="comment-body-12320"><p class="cye-lm-tag">Hi Petri,<br> Awesome post! Most appreciated.<br> What is i want to match an id (for example) against a list of ids (List)? i can’t seem to use isMember cause the list is no good.</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-12325"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">December 18, 2012, 23:42</span></div><div class="comment_text" id="comment-body-12325"><p class="cye-lm-tag">Hi Lev,</p>
<p class="cye-lm-tag">It is nice to hear that you like this blog entry. About your problem, you can implement the in condition by using the <a href="http://docs.oracle.com/javaee/6/api/javax/persistence/criteria/Expression.html#in%28java.util.Collection%29" rel="nofollow"><code>in()</code> method of the <code>Expression</code> interface</a>. Here is a little example about this:</p>
<p class="cye-lm-tag"><code></code></p>
<pre><code>public class PersonSpecifications {
	public static Specification&lt;Person&gt; idIsIn(final List&lt;Long&gt; ids) {

		return new Specification&lt;Person&gt; () {
			@Override
			public Predicate toPredicate(Root root&lt;Person&gt;, 
                                              CriteriaQuery&lt; ?&gt; query, 
                                              CriteriaBuilder cb) {
				//This does not work if list is empty.
                                //Remember to check it here.
				return root.get("id").in(ids);
			}
		};
	}
}
</code></pre><p class="cye-lm-tag"></p>
</div> </div><ul class="children"><li class="comment odd alt depth-3" id="comment-12335"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Lev</span>  <span class="comment_date cye-lm-tag">December 19, 2012, 10:06</span></div><div class="comment_text" id="comment-body-12335"><p class="cye-lm-tag">works perfectly! thanks a lot</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-4" id="comment-12336"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri Kainulainen</span>  <span class="comment_date cye-lm-tag">December 19, 2012, 10:27</span></div><div class="comment_text" id="comment-body-12336"><p class="cye-lm-tag">You are welcome!</p>
</div> </div></li></ul></li></ul></li></ul></li><li class="comment odd alt thread-odd thread-alt depth-1" id="comment-18304"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">MiB</span>  <span class="comment_date cye-lm-tag">January 21, 2013, 14:20</span></div><div class="comment_text" id="comment-body-18304"><p class="cye-lm-tag">I believe that “Before going in to the details, I will introduce the source code of my static *metal* model class” is really supposed to be “Before going in to the details, I will introduce the source code of my static *meta* model class”, no?</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-18318"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">January 21, 2013, 14:42</span></div><div class="comment_text" id="comment-body-18318"><p class="cye-lm-tag">You are right. Fixed it. Thanks for pointing this out.</p>
</div> </div></li></ul></li><li class="comment odd alt thread-even depth-1" id="comment-27443"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Lev</span>  <span class="comment_date cye-lm-tag">February 4, 2013, 10:27</span></div><div class="comment_text" id="comment-body-27443"><p class="cye-lm-tag">Hi Petri,<br> I have two tables, one is a Users table and the other one is a Settings table. Per every user i have a settings row (they user the same id as PK).</p>
<p class="cye-lm-tag">The user has a created_date field and in the settings he has a number_of_days field which specifies the total days he had for his trial period (may vary from user to user). i wanna find all the users that passed their trial period but i need to get the created_date java Date object and number_of_days as an Integer object and do something like createdDate.addDays(numDays) and compare that with now’s date.</p>
<p class="cye-lm-tag">How can i get a Date object from root.get(“createdDate”)?</p>
<p class="cye-lm-tag">and how can i reference another table from one specification and get number_of_days as an int from withing the same specification?</p>
<p class="cye-lm-tag">Thanks a lot,<br> Lev</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-27891"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">February 4, 2013, 21:51</span></div><div class="comment_text" id="comment-body-27891"><p class="cye-lm-tag">I have not done any calculations with dates by using the JPA criteria API. Actually, it seems that <a href="http://stackoverflow.com/questions/7715059/how-to-calculate-age-with-jpa-2-criteria-queries" target="_blank" rel="nofollow">JPA 2.0 does not support arithmetic operations for date operands</a>. I suggest that you change your domain model by following these steps:</p>
<ol><li>Add a new <code>Date</code> property called <code>lastDayOfTrialPeriod</code> to the <code>Settings</code> entity. The value of this property can be calculated when a new user is added to the system. Also, you can use the <code>numberOfDays</code> property to calculate the value of this property to existing users.</li><li>Remove the <code>numberOfDays</code> property from the <code>Settings</code> entity.</li></ol><p class="cye-lm-tag">This way you could get the information you need by using a very simple query. If you want to use the JPA Criteria API, you can use the following specification builder class (I assume that the <code>Person</code> entity has a property called <code>settings</code> and that the relationship between the <code>Person</code> and <code>Settings</code> entities is one-to-one):</p>
<p class="cye-lm-tag"><code></code></p>
<pre><code>public class PersonSpecifications {
  public static Specification&lt;Person&gt; trialPeriodHasPassed() {

    return new Specification&lt;Person&gt; () {
      @Override
      public Predicate toPredicate(Root root&lt;Person&gt;, 
                                   CriteriaQuery&lt; ?&gt; query, 
                                   CriteriaBuilder cb) {
        return cb.lessThan(
	  root.&lt;Settings&gt;get("settings").&lt;Date&gt;get("lastDayOfTrialPeriod"), 
	  cb.currentDate()
	);
      }
    };
  }
}
</code></pre><p class="cye-lm-tag"><br> Did this solve your problem?</p>
</div> </div><ul class="children"><li class="comment odd alt depth-3" id="comment-28364"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Lev</span>  <span class="comment_date cye-lm-tag">February 5, 2013, 12:30</span></div><div class="comment_text" id="comment-body-28364"><p class="cye-lm-tag">Haha, this is actually what we ended up doing.<br> Yeah this did to do the trick!</p>
<p class="cye-lm-tag">thanks :)</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-4" id="comment-28470"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">February 5, 2013, 14:19</span></div><div class="comment_text" id="comment-body-28470"><p class="cye-lm-tag">You are welcome!</p>
</div> </div></li></ul></li></ul></li></ul></li><li class="comment odd alt thread-odd thread-alt depth-1" id="comment-59315"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">i42</span>  <span class="comment_date cye-lm-tag">March 6, 2013, 19:35</span></div><div class="comment_text" id="comment-body-59315"><p class="cye-lm-tag">Hi Petri,</p>
<p class="cye-lm-tag">thanx for your valuable article…</p>
<p class="cye-lm-tag">I’m currently working on a DAO.findAll with “specific branch fetching” (on an entity tree, with more than 3 level of depth, any relation declared as lazy, and you only want to fetch some custom one),</p>
<p class="cye-lm-tag">have you ever worked on this topic (not covered by your article… and not really mentionned in Spring Data… except if we include Root.JoinType.LEFT logic in Specification… which can be discussed… :), if yes any recommandation ?</p>
<p class="cye-lm-tag">the only valuable post i’ve found is this one:</p>
<p class="cye-lm-tag"><a href="http://jdevelopment.nl/fetching-arbitrary-object-graphs-jpa-2/comment-page-1/#comment-4208" rel="nofollow">http://jdevelopment.nl/fetching-arbitrary-object-graphs-jpa-2/comment-page-1/#comment-4208</a></p>
<p class="cye-lm-tag">which works perfectly for a findOne, but doesn’t work for a findAll (duplicated entities fetched… :(</p>
<p class="cye-lm-tag">++</p>
<p class="cye-lm-tag">i42</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-59367"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">March 6, 2013, 20:30</span></div><div class="comment_text" id="comment-body-59367"><p class="cye-lm-tag">Unfortunately I have not worked on this kind of structure before. Also, it is hard to give “good” answers without seeing the domain model and understanding what kind of query you want to create. I assume that you want to fetch a list of entities and use join to “overwrite” the lazy fetching. Am I correct?</p>
<p class="cye-lm-tag">You added a link to a blog entry and told that it works perfectly when you fetch only one entity. I assume that when you try to get a list of entities, the list contains duplicate entities. Is this correct?</p>
<p class="cye-lm-tag">If my assumption is correct, you might want to call the <code>distinct(boolean distinct)</code> method of the <code>CriteriaQuery</code> class and set the value of the <code>distinct</code> method parameter to true.</p>
<p class="cye-lm-tag">P.S. This is just a shot in the dark.</p>
</div> </div></li></ul></li><li class="comment odd alt thread-even depth-1" id="comment-60296"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">i42</span>  <span class="comment_date cye-lm-tag">March 7, 2013, 13:55</span></div><div class="comment_text" id="comment-body-60296"><p class="cye-lm-tag">Hi Petri, (and thx for your quick reply…)</p>
<p class="cye-lm-tag"><em>“you want to fetch a list of entities and use join to “overwrite” the lazy fetching. Am I correct?”</em></p>
<p class="cye-lm-tag">yes</p>
<p class="cye-lm-tag"><em>“when you try to get a list of entities, the list contains duplicate entities. Is this correct?”</em></p>
<p class="cye-lm-tag">yes</p>
<p class="cye-lm-tag"><em>“call the distinct(boolean distinct) method of the CriteriaQuery”</em></p>
<p class="cye-lm-tag">already tried, this method is rejected by the DB telling us in return:<br> -&gt; com.sybase.jdbc3.jdbc.SybSQLException: TEXT, IMAGE, UNITEXT and off-row Java datatypes may not be selected as DISTINCT.</p>
<p class="cye-lm-tag">your both previous assumptions were right Petri…</p>
<p class="cye-lm-tag">to simplify, the model would be similar to something like: Class O[List&lt;A&gt; lA, List lZ] A[B b, C c] Z[X x, Y y], everything (one/many) constraintly declared as lazy.</p>
<p class="cye-lm-tag">We want the DAO.findAllBranch method to be able to fetch branch with calls like findAllBranch(O.class, “lA.b”) or findAllBranch(O.class, “lZ.y”), fetching then all O objets + only associated list + sub property.</p>
<p class="cye-lm-tag">currently using join operator produces duplicates O instances for each A or Z instances… :(</p>
<p class="cye-lm-tag">P.S: “A shot in the dark”… you mean <a href="http://www.youtube.com/watch?v=uzzQp6slqqQ" rel="nofollow">http://www.youtube.com/watch?v=uzzQp6slqqQ</a> (yeah, me to I love techno musik) :D</p>
</div> </div></li><li class="comment even thread-odd thread-alt depth-1" id="comment-71906"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">i42</span>  <span class="comment_date cye-lm-tag">March 15, 2013, 18:15</span></div><div class="comment_text" id="comment-body-71906"><p class="cye-lm-tag">No further comment Petri ?</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-72065"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">March 15, 2013, 20:33</span></div><div class="comment_text" id="comment-body-72065"><p class="cye-lm-tag">I have to confess that I forgot this comment. I am sorry about that.</p>
<p class="cye-lm-tag">The information you gave changes things a bit because I thought that you were trying to get a list of objects from the “middle” of the entity tree.</p>
<p class="cye-lm-tag">It seems that you want to select all O objects, a list of A objects and all properties of A (or the same stuff for Z).</p>
<p class="cye-lm-tag">Am I correct? What is the search criteria which is used to select the O objects or do you simply want to get all O objects found from the database?</p>
<p class="cye-lm-tag">Unfortunately I cannot give you an answer straight away. However, I could try to replicate this scenario and see if I can figure out an answer. In order to do this, I need to see the real domain model because otherwise I might create a solution which works for me but is totally useless to you (especially since it seems that you storing binary data to the database). Is this possible?</p>
</div> </div></li></ul></li><li class="comment even thread-even depth-1" id="comment-75199"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">i42</span>  <span class="comment_date cye-lm-tag">March 18, 2013, 11:36</span></div><div class="comment_text" id="comment-body-75199"><p class="cye-lm-tag">Hey,</p>
<p class="cye-lm-tag">no worries mate…</p>
<p class="cye-lm-tag">to re-sum up the scene:</p>
<p class="cye-lm-tag">– it’s a findAll,<br> – for a massive model (not postable, hundreds of entities… you can switch it to any one you want indeed, not really mattering…),<br> – ALL relations declared as Lazy,<br> – we have 100% configurable &amp; generic Criteria building with Root.JoinType.LEFT (let’s say, to simplify the case, no other use of Criteria than entities’ joining)</p>
<p class="cye-lm-tag">-&gt; issue: method is returning duplicates entries with JPA</p>
<p class="cye-lm-tag">– setDistinct(true) is refused by JDBC driver-&gt;DB command</p>
<p class="cye-lm-tag">and (new info…), if I use 100% Hibernate processing, (through<br> – (Session) getEntityManager().getDelegate();<br> – and then org.hibernate.Criteria.setResultTransformer( Criteria.DISTINCT_ROOT_ENTITY);)</p>
<p class="cye-lm-tag">the findAll behaves correctly, no duplicates entries are return, result is fully consistent !</p>
<p class="cye-lm-tag">my temporary empirik conclusion are:</p>
<p class="cye-lm-tag">JPA facade for building findAll is functionnaly under-efficient/functionnal than its delegated/Wrapped full Hibernate processing…</p>
<p class="cye-lm-tag">so Petri, do you like challenges ?</p>
<p class="cye-lm-tag">:)</p>
<p class="cye-lm-tag">i42</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-76005"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">March 18, 2013, 22:47</span></div><div class="comment_text" id="comment-body-76005"><p class="cye-lm-tag">It seems that I have to try to solve this puzzle. :) However, I am not sure if I can use any time to this before next weekend. I will keep you posted in any case.</p>
</div> </div></li><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-85103"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">March 24, 2013, 22:41</span></div><div class="comment_text" id="comment-body-85103"><p class="cye-lm-tag">I have started working on this.</p>
</div> </div></li><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-109169"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">April 7, 2013, 17:59</span></div><div class="comment_text" id="comment-body-109169"><p class="cye-lm-tag">I managed to reproduce this problem with H2 database as well. However, when I used the <code>distinct(true)</code> method, the criteria query returned correct results.</p>
<p class="cye-lm-tag">This issue is discussed with more details in this <a href="http://stackoverflow.com/questions/11031690/criteria-api-fetch-of-a-list-returns-repeated-main-entity" target="_blank" rel="nofollow">Stack Overflow question</a>. It seems that you should either continue using your current approach or use sub queries as suggested in the answer of the linked question.</p>
</div> </div><ul class="children"><li class="comment even depth-3" id="comment-110635"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">i42</span>  <span class="comment_date cye-lm-tag">April 8, 2013, 12:08</span></div><div class="comment_text" id="comment-body-110635"><p class="cye-lm-tag">Thx a lot Petri for investing my problem…</p>
<p class="cye-lm-tag">unfortunately the “distinct” call is refused by Sybase 15 (not allowed on Text/CLOB value), so I guess I’ll keep my generic Hibernate delegated session implementation (using setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY)) which is 100% efficiently working…</p>
<p class="cye-lm-tag">BTW, the link you’ve mentionned is the one which decided me previously to pass through JPA and use 100% Hibernate querying…</p>
<p class="cye-lm-tag">Once again, thanx Petri for your concern and your help, all the best…</p>
<p class="cye-lm-tag">Dimitri42</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-4" id="comment-111368"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">April 8, 2013, 19:54</span></div><div class="comment_text" id="comment-body-111368"><p class="cye-lm-tag">You are welcome! I agree that you should keep your current implementation because it is working for you. There is no point in trying to find another solution which might not exist.</p>
</div> </div></li></ul></li></ul></li></ul></li><li class="comment even thread-odd thread-alt depth-1" id="comment-94601"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">J Romero</span>  <span class="comment_date cye-lm-tag">March 30, 2013, 02:17</span></div><div class="comment_text" id="comment-body-94601"><p class="cye-lm-tag">Hi Petri, this is an amazing help from your part, I’ve been following your blog and I’ve read most of your notes and well, definitely there is always something else to learn, and this is my case.</p>
<p class="cye-lm-tag">This is similar to Raghu’s case [July 31, 2012 at 4:47 am EDIT] about to distinct, except I had not chance to use it in my repository interface because precisely I had to work with Specification idea (filtering conditions in a dynamic query using OR operator — but was resolved with your help) and I see that distinct is for all the table’s fields and I just need to distinct some of them because business logic. I’ve read a lot notes from Sn Google without luck, so, that is the challenge, to use DISTINCT for some fields through Specification class. Is there any solution?</p>
<p class="cye-lm-tag">And also is there a way to get the query built from Specification just to confirm what Specification object will send to the Repository for its execution.</p>
<p class="cye-lm-tag">Any help I’d really appreciate.<br> The best.<br> /JRomero.</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-98478"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">April 1, 2013, 11:32</span></div><div class="comment_text" id="comment-body-98478"><p class="cye-lm-tag">I have to confess that I am not sure if this can be done with the JPA Criteria API. Do you need to get the full information of the entities or do you want to get only the information stored to the distinct fields?</p>
</div> </div></li></ul></li><li class="comment even thread-even depth-1" id="comment-266977"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Dhana kumar Anem</span>  <span class="comment_date cye-lm-tag">July 14, 2013, 16:30</span></div><div class="comment_text" id="comment-body-266977"><p class="cye-lm-tag">Hi Petri,</p>
<p class="cye-lm-tag">is there a simple way of finding greatest size of one-to-many relationship using max function. for example, need to find one customer who has more orders done so far. i.e, customer.orders is one-to-many relationship.</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-266983"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">July 14, 2013, 17:45</span></div><div class="comment_text" id="comment-body-266983"><p class="cye-lm-tag">Hi Dhana,</p>
<p class="cye-lm-tag">The first solution which came to my mind had these steps:</p>
<ol><li>Sort the customers in descending order by using the number of orders.</li><li>Get the first result.</li></ol><p class="cye-lm-tag">Then I noticed the <a href="http://docs.oracle.com/javaee/6/api/javax/persistence/criteria/CriteriaBuilder.html#greatest%28javax.persistence.criteria.Expression%29" target="_blank" rel="nofollow"><code>greatest()</code> method of the <code>CriteriaBuilder</code> class</a>.</p>
<p class="cye-lm-tag">Then I came up with a solution which uses the JPA Criteria API and Spring Data JPA (I have not tried it out so I have no idea if it works).</p>
<p class="cye-lm-tag">The source code of my specification builder class looks as follows:</p>
<pre><code>
public class CustomerSpecifications {
  public static Specification&lt;Customer&gt; customerWithMostOrders() {

    return new Specification&lt;Customer&gt; () {
      @Override
      public Predicate toPredicate(Root root&lt;Customer&gt;, 
                                   CriteriaQuery&lt; ?&gt; query, 
                                   CriteriaBuilder cb) {
		
		//Note that this can return multiple customers 
		//if they have the same number of orders.
                return cb.equal(
			cb.size(root.get("orders")), 
			cb.greatest(cb.size(root.get("orders")))
		);
      }
    };
  }
}
</code>
</pre><p class="cye-lm-tag">Let me know if this did the trick.</p>
</div> </div></li></ul></li><li class="comment even thread-odd thread-alt depth-1" id="comment-267056"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Dhana kumar Anem</span>  <span class="comment_date cye-lm-tag">July 15, 2013, 18:49</span></div><div class="comment_text" id="comment-body-267056"><p class="cye-lm-tag">Liked your response Petri, thanks a lot making your blog being read very interesting. :)<br> It didn’t work somehow, I have got the following error and sql generated is</p>
<pre><code>
SELECT
    customer0_.id AS id1_0_ ,
    customer0_.email AS email2_0_ ,
    customer0_.firstName AS firstNam3_0_ ,
    customer0_.lastName AS lastName4_0_ ,
    customer0_.notes AS notes5_0_ ,
    customer0_.phone AS phone6_0_
FROM
    CUSTOMER customer0_
WHERE
    (
        SELECT
            COUNT(orders1_.customer_id)
        FROM
            ITEM_ORDER orders1_
        WHERE
            customer0_.id = orders1_.customer_id
    ) = MAX(
        (
            SELECT
                COUNT(orders2_.customer_id)
            FROM
                ITEM_ORDER orders2_
            WHERE
                customer0_.id = orders2_.customer_id
        )
    )
</code>
</pre><p class="cye-lm-tag"><b><br> SQL Error [42574]: expression not in aggregate or GROUP BY columns: CUSTOMER0_.ID<br> expression not in aggregate or GROUP BY columns: CUSTOMER0_.ID<br> </b></p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-267062"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">July 15, 2013, 19:53</span></div><div class="comment_text" id="comment-body-267062"><p class="cye-lm-tag">It seems that you already <a href="http://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-part-four-jpa-criteria-queries/#comment-267060" rel="nofollow">solved the first part of the problem (no group by clause)</a>. I will move my other comments to your latest comment.</p>
</div> </div></li></ul></li><li class="comment even thread-even depth-1" id="comment-267060"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Dhana kumar Anem</span>  <span class="comment_date cye-lm-tag">July 15, 2013, 19:19</span></div><div class="comment_text" id="comment-body-267060"><p class="cye-lm-tag">I found the right sql query and need to design the speicification.</p>
<p class="cye-lm-tag">Ref from: <a href="http://www.techonthenet.com/sql/max.php" rel="nofollow">http://www.techonthenet.com/sql/max.php</a></p>
<pre><code>
SELECT
    query1. customer_id
FROM
    (
        SELECT
            Customer_id ,
            COUNT(*) AS order_count
        FROM
            item_order
        GROUP BY
            item_order.Customer_id
    ) query1 ,
    (
        SELECT
            MAX(query2.order_count) AS highest_count
        FROM
            (
                SELECT
                    Customer_id ,
                    COUNT(*) AS order_count
                FROM
                    item_order
                GROUP BY
                    item_order.Customer_id
            ) query2
    ) query3
WHERE
    query1.order_count = query3.highest_count
;
</code>
</pre></div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-267064"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">July 15, 2013, 20:17</span></div><div class="comment_text" id="comment-body-267064"><p class="cye-lm-tag">Like you already figured out, this problem can be solved by using the GROUP BY clause (check this <a href="http://stackoverflow.com/questions/581043/sql-query-throws-not-in-aggregate-function-or-group-by-clause-exception" target="_blank" rel="nofollow">StackOverflow question</a> for more details about this).</p>
<p class="cye-lm-tag">The <a href="http://docs.oracle.com/javaee/6/api/javax/persistence/criteria/CriteriaQuery.html#groupBy%28javax.persistence.criteria.Expression...%29" target="_blank" rel="nofollow">CriteriaQuery class has a groupBy() method</a> which can be used for this purpose.</p>
<p class="cye-lm-tag">The problem is that I am not sure how this can be used in the <a href="http://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-part-four-jpa-criteria-queries/#comment-266983" rel="nofollow">original specification builder method</a>. One option would be to to add this line to that method:</p>
<p class="cye-lm-tag"><code><br> query.groupBy(root.get("id"));<br> </code><br> The problem is that the “main” query does not use aggregate functions. I have to confess that I have no idea how this could work.</p>
<p class="cye-lm-tag">I also tried to find some examples about the correct usage of the <code>greatest()</code> method but I had no luck. Do you have any other ideas?</p>
</div> </div></li></ul></li><li class="comment even thread-odd thread-alt depth-1" id="comment-267212"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Dhana kumar Anem</span>  <span class="comment_date cye-lm-tag">July 17, 2013, 21:44</span></div><div class="comment_text" id="comment-body-267212"><p class="cye-lm-tag">Resolved with a different solution, pls sugest if you have better way,<br> wrote a specification on Order</p>
<pre><code>
public static Specification<order> highestOrdersGroupedByCustomer() {

	return new Specification</order><order>() {
		@SuppressWarnings("unchecked")
		@Override
		public Predicate toPredicate(Root</order><order> root,
				CriteriaQuery&lt; ?&gt; query, CriteriaBuilder builder) {

			CriteriaQuery<long> query1 = (CriteriaQuery</long><long>) query;
			query1.select(root.get(Order_.customer).get(Customer_.id));

			query1.groupBy(root.get(Order_.customer).get(Customer_.id));
			query1.orderBy(
				builder.desc(builder.count(root.get(Order_.id)))
			);
			return null;
		}
	};
}
</long></order></code>
</pre><p class="cye-lm-tag">And my repository supports to execute the above specification which returns the following.</p>
<pre><code>
List<long> customerId = repository.findAll(
	Long.class, 
	OrderSpecifications.highestOrdersGroupedByCustomer(), 
	1
);// 1 represents max rows
Assert.assertFalse(customerId.isEmpty());
System.out.println(customerId.get(0));
</long></code>
</pre><p class="cye-lm-tag">Later do a find by id of this customer Id.</p>
<p class="cye-lm-tag">sql generated is like this,</p>
<pre><code>
SELECT
    order0_.customer_id AS col_0_0_
FROM
    ITEM_ORDER order0_
GROUP BY
    order0_.customer_id
ORDER BY
    COUNT(order0_.ORDER_ID) DESC FETCH FIRST 1 ROWS ONLY
</code>
</pre></div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-267581"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">July 22, 2013, 15:13</span></div><div class="comment_text" id="comment-body-267581"><p class="cye-lm-tag">Thank you for posting your solution.</p>
<p class="cye-lm-tag">Unfortunately I have not found a solution for this yet. It is extremely hard to find examples about the correct usage of the <code>greatest()</code> method which is kind of weird because this is not an uncommon requirement. Maybe I should write a blog post about this.</p>
<p class="cye-lm-tag">What do you think?</p>
</div> </div></li></ul></li><li class="comment even thread-even depth-1" id="comment-275262"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Chinmay</span>  <span class="comment_date cye-lm-tag">September 30, 2013, 09:06</span></div><div class="comment_text" id="comment-body-275262"><p class="cye-lm-tag">How do i get to know when I fail to enter a duplicate database entry?</p>
<p class="cye-lm-tag">I’m using Spring Data JPA with Hibernate.</p>
<p class="cye-lm-tag">I have a class with a composite key mapped to a database table.</p>
<p class="cye-lm-tag">When I perform a save operation using the JPARepository extended interface object, I see the following log in the console:</p>
<p class="cye-lm-tag"> Hibernate: select rolefuncti0_.functionalityId as function1_4_0_, rolefuncti0_.roleId as roleId2_4_0_ from RoleFunctionality_Mapping rolefuncti0_ where rolefuncti0_.functionalityId=? and rolefuncti0_.roleId=?<br> Hibernate: insert into RoleFunctionality_Mapping (functionalityId, roleId) values (?, ?)</p>
<p class="cye-lm-tag">This is what I see when i repeat the operation with the same data:</p>
<p class="cye-lm-tag"> Hibernate: select rolefuncti0_.functionalityId as function1_4_0_, rolefuncti0_.roleId as roleId2_4_0_ from RoleFunctionality_Mapping rolefuncti0_ where rolefuncti0_.functionalityId=? and rolefuncti0_.roleId=?</p>
<p class="cye-lm-tag">It appears Spring Data first checks whether the Key exists in the database, and then proceeds to perform insertion.</p>
<p class="cye-lm-tag">There should be a way to catch the information which hibernate has found (that the database entry/key exists in the database)? How can we check that? There should be some kind of information which would be possible to get from Spring that it would return/give in any other way to the application- if it is not going to go ahead with insertion in the event of a duplicate entry. (Spring makes a decision (based on some information) not to insert after finding an existing primary key.)</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-275330"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">September 30, 2013, 20:50</span></div><div class="comment_text" id="comment-body-275330"><p class="cye-lm-tag">The <code>SimpleJpaRepository</code> class provides an implementation for the <code>save()</code> method. The source code of this method looks as follows:</p>
<pre><code>
@Transactional
public &lt;S extends T&gt; S save(S entity) {

	//This returns true if the id of the entity is null.
	if (entityInformation.isNew(entity)) {
		em.persist(entity);
		return entity;
	} 
	else {
		return em.merge(entity);
	}
}
</code>
</pre><p class="cye-lm-tag">As we can see, the <code>SimpleJpaRepository</code> class calls the <a href="http://docs.oracle.com/javaee/6/api/javax/persistence/EntityManager.html#persist%28java.lang.Object%29" target="_blank" rel="nofollow"><code>persist()</code> method of the <code>EntityManager</code> class</a> if the id of the entity is null. If the id is not null, the <a href="http://docs.oracle.com/javaee/6/api/javax/persistence/EntityManager.html#merge%28T%29" target="_blank" rel="nofollow"><code>merge()</code> method of the <code>EntityManager</code> class</a> is called.</p>
<p class="cye-lm-tag">In other words, if the id of the saved entity is not null, the entity is not persisted. It is merged into the current persistence context. Here is a nice blog post which <a href="http://spitballer.blogspot.fi/2010/04/jpa-persisting-vs-merging-entites.html" target="_blank" rel="nofollow">describes the difference</a>.</p>
<p class="cye-lm-tag">In your case, this is what happens:</p>
<ol><li>When you call the <code>save()</code> method for the first time, Hibernate checks if an entity exists. Because it does not exists, it is inserted to the database.</li><li>When you call the <code>save()</code> method for the second time, Spring Data JPA notices that the id is not null. Thus, it tries to merge the entity into the current persistence context. Nothing “happens” because the information of the detached entity is equal than the information of the persisted entity.</li></ol><p class="cye-lm-tag">Of course, you can always handle this in the service layer. This is the approach which I use when I want to verify that unique constraints aren’t broken (I don’t use this for primary keys though. I am happy with the way Spring Data JPA takes care of this).</p>
</div> </div></li></ul></li><li class="comment even thread-odd thread-alt depth-1" id="comment-279055"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Mukunda</span>  <span class="comment_date cye-lm-tag">October 16, 2013, 10:52</span></div><div class="comment_text" id="comment-body-279055"><p class="cye-lm-tag">NPE while accessing the getter method for a field annotated with @ManyToMany annotation. Pls. find the outline of the sample code below.<br> Repository &amp; Service layer were the default implementation provided by Spring using Spring Roo commands.. I am a newbie and could you pls. help me what I am doing wrong ?</p>
<p class="cye-lm-tag">class A {<br> …<br> @ManyToMany( CASCADE.ALL, FetchType.LAZY)<br> List&lt;B&gt; b;<br> }</p>
<p class="cye-lm-tag">class B {</p>
<p class="cye-lm-tag">}</p>
<p class="cye-lm-tag">interface ARepository {<br> List&lt;A&gt; findAllAs();<br> }</p>
<p class="cye-lm-tag">class AService {<br> List&lt;A&gt; findAllAs() { return aRepository.findAllAs()}<br> }</p>
<p class="cye-lm-tag">Application code:</p>
<p class="cye-lm-tag">List&lt;A&gt; aList = aService.findAllAs();<br> for (A a : aList)<br> {<br> for (B b : a.getB()) {     &lt;—- Results in NPE<br> { …</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-279593"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">October 20, 2013, 22:14</span></div><div class="comment_text" id="comment-body-279593"><p class="cye-lm-tag">Take a look at this <a href="http://blog.jbaysolutions.com/2012/12/17/jpa-2-relationships-many-to-many/" target="_blank" rel="nofollow">blog post</a>. It describes how you can create a many-to-many relationship with JPA.</p>
</div> </div></li></ul></li><li class="comment even thread-even depth-1" id="comment-280390"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Pedro</span>  <span class="comment_date cye-lm-tag">October 28, 2013, 17:05</span></div><div class="comment_text" id="comment-body-280390"><p class="cye-lm-tag">Hi Petri,</p>
<p class="cye-lm-tag">After looking at your blog and reading the documentation, I think it might be a good idea to show how to make joins and concat specifications. Here is my approach:</p>
<p class="cye-lm-tag"> Specification filterSpec = null; // query by lastname in the post. I parse filters from jqGrid, out of scope.<br> Specification joinSpec = new Specification() {<br> @Override<br> public Predicate toPredicate(Root root, CriteriaQuery query, CriteriaBuilder cb) {<br> Join join = root.join(Transaction_.parentCard, JoinType.INNER);<br> return cb.equal(join.get(Card_.id), idFromRequest);<br> }<br> };<br> myRepo.findAll(Specifications.where(joinSpec).and(filterSpec), pageable);</p>
<p class="cye-lm-tag">Hope you find it useful.</p>
<p class="cye-lm-tag">Regards.</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-280406"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">October 28, 2013, 20:13</span></div><div class="comment_text" id="comment-body-280406"><p class="cye-lm-tag">Hi Pedro,</p>
<p class="cye-lm-tag">thanks for sharing this. I think that it will be useful to my readers. I am actually a bit surprised that there are so few good tutorials about the JPA Criteria API.</p>
</div> </div></li></ul></li><li class="comment even thread-odd thread-alt depth-1" id="comment-282818"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Va</span>  <span class="comment_date cye-lm-tag">November 4, 2013, 23:20</span></div><div class="comment_text" id="comment-body-282818"><p class="cye-lm-tag">hello thanks, thats a lot of good information.<br> I am using the hibernateJpaProvider,<br> I am got the basic app working,<br> now I am trying to read the SEQUENCE, in a query, how to do it</p>
<p class="cye-lm-tag">@Query(“select party_id_seq.nextval from dual”)<br> double findNextSeq4PartyId();</p>
<p class="cye-lm-tag">but I am getting<br> nested exception is java.lang.IllegalArgumentException: org.hibernate.hql.internal.ast.QuerySyntaxException: dual is not mapped</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-282822"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">November 4, 2013, 23:41</span></div><div class="comment_text" id="comment-body-282822"><p class="cye-lm-tag">If you want to create a native query by using a <a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-three-custom-queries-with-query-methods/" rel="nofollow">query method</a> annotated with the <a href="http://docs.spring.io/spring-data/jpa/docs/1.4.x/api/org/springframework/data/jpa/repository/Query.html" target="_blank" rel="nofollow"><code>@Query</code></a> annotation, you have to set the value of its <code>nativeQuery</code> attribute to true. In other words, you have to add the following method to your repository interface:</p>
<pre><code>
@Query(value="select party_id_seq.nextval from dual", nativeQuery="true")
public long findNextSeq4PartyId(); 
</code>
</pre><p class="cye-lm-tag">If you are trying the get next available id for the private key of an entity, you should use the <a href="http://docs.oracle.com/javaee/6/api/javax/persistence/GeneratedValue.html" target="_blank" rel="nofollow"><code>@GeneratedValue</code></a> annotation because it makes your code a lot cleaner.</p>
</div> </div><ul class="children"><li class="comment even depth-3" id="comment-319311"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Mario</span>  <span class="comment_date cye-lm-tag">December 31, 2013, 12:19</span></div><div class="comment_text" id="comment-body-319311"><p class="cye-lm-tag">Is it possible to use @GeneratedValue in case of composite (@Embeddable) ids ? What is the best practice in this case ?</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-4" id="comment-319660"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">December 31, 2013, 22:47</span></div><div class="comment_text" id="comment-body-319660"><p class="cye-lm-tag">Check out this <a href="http://stackoverflow.com/a/10914340/313554" target="_blank" rel="nofollow">StackOverflow answer</a>. It describes how you can use the <code>@GeneratedValue</code> annotation inside embedded composite ids.</p>
<p class="cye-lm-tag">However, there is another option as well. You can use the <code>@IdClass</code> annotation. The difference between the <code>@EmbeddedId</code> and <code>@IdClass</code> annotations is explained in these StackOverflow questions:</p>
<ul><li><a href="http://stackoverflow.com/questions/212350/which-annotation-should-i-use-idclass-or-embeddedid" target="_blank" rel="nofollow">Which annotation should I use: <code>@IdClass</code> or <code>@EmbeddedId</code></a></li><li><a href="http://stackoverflow.com/questions/4024800/jpa-hibernate-whats-better-for-composite-primary-keys-idclass-or-embeddedid" target="_blank" rel="nofollow">JPA/Hibernate: What’s better for composite primary keys, <code>@IdClass</code> or <code>@EmbeddedId</code> implementations and why?</a></li></ul><p class="cye-lm-tag">I hope that this answered to your question.</p>
</div> </div></li></ul></li></ul></li></ul></li><li class="comment even thread-even depth-1" id="comment-318934"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Dex</span>  <span class="comment_date cye-lm-tag">December 30, 2013, 23:13</span></div><div class="comment_text" id="comment-body-318934"><p class="cye-lm-tag">Great set of articles!</p>
<p class="cye-lm-tag">I’ve been living in the world of NamedQueries in my Entities, and more complex Native queries defined as Autowired Strings (becoming difficult to manage).  This tutorial is just what I need to move beyond queries and dive into the Criteria API.</p>
<p class="cye-lm-tag">My question might be a bit naive, but what I don’t understand or see is how your service implementation resolves your custom Specification methods ( lastNameIsLike() ).  I put together a rather simple scenario in my project and I am unable to resolve these methods.</p>
<p class="cye-lm-tag">Example Code:</p>
<pre><code>
public interface AgencyDao extends JpaRepository, JpaSpecificationExecutor {}

public class AgencySpecifications {
    public static Specification isInJurisdiction( final JurisdictionType jurisdictionType ) {
        return new Specification() {
            @Override
            public Predicate toPredicate( Root root, CriteriaQuery query, CriteriaBuilder cb ){
                return cb.equal( root.get( Agency_.jurisdictionType ), jurisdictionType );
            }
        };
    }
}
</code>
</pre><p class="cye-lm-tag">This service method does not resolved my Spec method isInJurisdiction:</p>
<pre><code>List agencies = agencyDao.findAll( isInJurisdiction(JurisdictionType.AZ) );</code>
</pre></div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-318944"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">December 30, 2013, 23:27</span></div><div class="comment_text" id="comment-body-318944"><p class="cye-lm-tag">Hi Dex,</p>
<p class="cye-lm-tag">I assume that you get a compilation error because the static <code>isInJurisdiction()</code> method of the <code>AgencySpecifications</code> class is not found?</p>
<p class="cye-lm-tag">I noticed that I had forgot to add one crucial static import to the source code of the <code>RepositoryPersonService</code> class which is found from this page (the example is changed and doesn’t have this class anymore). I added that import to the source code found from this page as well.</p>
<p class="cye-lm-tag">Let’s assume that the <code>AgencySpecifications</code> class is found from package <code>foo</code>. If this is the case, you have to add the following static import to your service class:</p>
<pre><code>import static foo.AgencySpecifications.isInJurisdiction;</code>
</pre><p class="cye-lm-tag">This should solve your problem. Again, I am sorry for the trouble I caused to you.</p>
</div> </div></li></ul></li><li class="comment even thread-odd thread-alt depth-1" id="comment-318951"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Dex</span>  <span class="comment_date cye-lm-tag">December 30, 2013, 23:40</span></div><div class="comment_text" id="comment-body-318951"><p class="cye-lm-tag">Yes, I completely missed that.  Again great job, and keep up the great work.</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-318954"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">December 30, 2013, 23:45</span></div><div class="comment_text" id="comment-body-318954"><p class="cye-lm-tag">Thanks! If you have any other questions in the future, I am happy to help you out.</p>
</div> </div></li></ul></li><li class="comment even thread-even depth-1" id="comment-691487"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Ray</span>  <span class="comment_date cye-lm-tag">June 11, 2014, 16:58</span></div><div class="comment_text" id="comment-body-691487"><p class="cye-lm-tag">Hi petri , you are doing a great job , the post is very useful thank you . I ‘m using spring Data and i have a problem with duplicate entries :</p>
<p class="cye-lm-tag">this is a code sample :</p>
<pre><code> 
public static Specification finByAmount(final double amount) {
	return new Specification() {
		
		@Override
		public Predicate toPredicate(Root root,
								CriteriaQuery arg1, 
								CriteriaBuilder cb) {
			return cb.lt(
				root.join(Tarif_.timeUnits).get(TarifTimeUnit_.amount),
				amount
			);
		}
	};
}
</code>
</pre><p class="cye-lm-tag">the join is returning duplicate result is there a way to apply DISTINCT to this Criteria. thank you</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-691740"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">June 11, 2014, 21:01</span></div><div class="comment_text" id="comment-body-691740"><p class="cye-lm-tag">You can use <a href="http://docs.oracle.com/javaee/6/api/javax/persistence/criteria/CriteriaQuery.html#distinct%28boolean%29" target="_blank" rel="nofollow">the <code>distinct(boolean distinct)</code> method of the <code>CriteriaQuery</code></a> class for this purpose.</p>
</div> </div></li></ul></li><li class="comment even thread-odd thread-alt depth-1" id="comment-789939"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">artiko</span>  <span class="comment_date cye-lm-tag">September 1, 2014, 15:54</span></div><div class="comment_text" id="comment-body-789939"><p class="cye-lm-tag">Hi petri, your tutorial help me a lot, thanks. Actually I have a question, how to select some columns, using specification? It is like DTO in your tutorial part 3. Because I don’t want to select all columns from table. Thanks in advance.</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-790493"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">September 1, 2014, 21:55</span></div><div class="comment_text" id="comment-body-790493"><p class="cye-lm-tag">I am not sure if it possible to select only a few columns by using Spring Data JPA specifications. Also, I searched the answer from Google but I didn’t find any solutions to this problem. However, it is possible to <a href="http://stackoverflow.com/a/12619810/313554" target="_blank" rel="nofollow">select specific columns by using Hibernate criteria queries</a>.</p>
<p class="cye-lm-tag">If you decide to follow this approach, you need to <a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-part-eight-adding-functionality-to-a-repository/" rel="nofollow">add a custom method to your repository</a> and implement the query in that method.</p>
</div> </div></li></ul></li><li class="comment even thread-even depth-1" id="comment-819259"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Yvau</span>  <span class="comment_date cye-lm-tag">September 19, 2014, 08:35</span></div><div class="comment_text" id="comment-body-819259"><p class="cye-lm-tag">Hello petri,<br> first thanks for your blog, im new in jpa data but  have successfully followed the step of the part four, it works when but i’m struggling to add two specifcations<br> like example: statusIsLike, skillLike<br> <code><br> projectRepostory.findAll(where(statusIsLike("done")).and(skillLike("manager");<br> </code><br> Thanks in advance,</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-824383"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">September 22, 2014, 22:43</span></div><div class="comment_text" id="comment-body-824383"><p class="cye-lm-tag">Hi Yvau,</p>
<p class="cye-lm-tag">If you take a look at the Javadocs of the <a href="http://docs.spring.io/spring-data/jpa/docs/current/api/org/springframework/data/jpa/domain/Specification.html" target="_blank" rel="nofollow"><code>Specification&lt;T&gt;</code></a> and <a href="http://docs.spring.io/spring-data/jpa/docs/current/api/org/springframework/data/jpa/repository/JpaSpecificationExecutor.html" target="_blank" rel="nofollow"><code>JpaSpecificationExecutor&lt;T&gt;</code></a> interfaces, you can see that you cannot combine <code>Specification&lt;T&gt;</code> objects in that manner.</p>
<p class="cye-lm-tag">I would probably add a new method to the specification builder class and return a <code>Specification&lt;T&gt;</code> object that contains all the required conditions.</p>
</div> </div><ul class="children"><li class="comment even depth-3" id="comment-824789"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Anonymous</span>  <span class="comment_date cye-lm-tag">September 23, 2014, 05:14</span></div><div class="comment_text" id="comment-body-824789"><p class="cye-lm-tag">Hello petri,<br> To solve it, I was passing the data as object from my form like <code>final SearchDTO searchTerm</code> instead of <code>final String searchTerm</code> and customizing everything with <code>if else statement </code> ,in one specification. But now i got it, i’ll try your approach.</p>
<p class="cye-lm-tag">Thank you for your response !</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-4" id="comment-827890"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">September 24, 2014, 23:17</span></div><div class="comment_text" id="comment-body-827890"><p class="cye-lm-tag">You are welcome!</p>
<p class="cye-lm-tag">Actually, I would also wrap the search conditions into a DTO and then pass this object to my specification builder method. This makes sense if you have to support more than a few search conditions (especially if these conditions have the same type).</p>
<p class="cye-lm-tag">Let me know if you have any other questions.</p>
</div> </div></li></ul></li></ul></li></ul></li><li class="comment even thread-odd thread-alt depth-1" id="comment-1052369"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Sanjay Jain</span>  <span class="comment_date cye-lm-tag">December 17, 2014, 06:16</span></div><div class="comment_text" id="comment-body-1052369"><p class="cye-lm-tag">Hello Petri,</p>
<p class="cye-lm-tag">Nice article.I have used above information to use specification in my project. Currently facing one issue with it.</p>
<p class="cye-lm-tag">Is it possible to tranform Specification of type T to specification of Type T1.</p>
<p class="cye-lm-tag">Here T and T1 having same type of attributes and I am using it for having seperate DTO for different layer (Business layer / Persistence layer). So at business layer I am getting specification. Now to tranfer it to persistence layer I need to have Specification. So is it possible to transform it from one type to another type (having same attribute applied in specification) ?</p>
<p class="cye-lm-tag">Thanks in advance</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-1053586"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">December 17, 2014, 20:44</span></div><div class="comment_text" id="comment-body-1053586"><p class="cye-lm-tag">I think that it is not possible to transform a <code>Specification&lt;A&gt;</code> object into a <code>Specification&lt;B&gt;</code> object (or at least I don’t know how to do this).</p>
<p class="cye-lm-tag">Maybe I don’t understand your use case, but you shouldn’t have to do this. Remember that the type parameter, which is given when you create a new <code>Specification&lt;T&gt;</code> object, describes the type of the entity. Thus, you should create only one specification that specifies the invoked query by using the JPA Criteria API.</p>
</div> </div></li></ul></li><li class="comment even thread-even depth-1" id="comment-1232294"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Paul</span>  <span class="comment_date cye-lm-tag">June 24, 2015, 22:54</span></div><div class="comment_text" id="comment-body-1232294"><p class="cye-lm-tag">Hi Petri,</p>
<p class="cye-lm-tag">Question about the StaticMetaModel, in this case you’re just using the lastName attribute of the Person class.</p>
<p class="cye-lm-tag">But say you wanted to build a query based on all attributes of the Person class (say age, firstname, lastname, location etc.)</p>
<p class="cye-lm-tag">Would using this StaticMetaModel combined with a JpaSpecifcationExecutor/JpaRepository be a good way to acheive this level of filtering?</p>
<p class="cye-lm-tag">Thanks,<br> Paul</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-1232313"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">June 24, 2015, 23:20</span></div><div class="comment_text" id="comment-body-1232313"><p class="cye-lm-tag">Hi Paul,</p>
<p class="cye-lm-tag">It depends.</p>
<p class="cye-lm-tag">Although you can use property names as well, the problem is that you notice your mistakes (typos, missing properties, and so on) at runtime. If you use static model classes, you will notice these mistakes at compile time. This is of course a lot faster than running your application just to realize that it doesn’t work.</p>
<p class="cye-lm-tag">I think that if you are going to write only a few criteria queries AND you want to make your build as fast as possible, you could consider using property names. If you need to write many criteria queries, you should generate static meta model classes when you project is compiled and use these classes when you create your queries.</p>
<p class="cye-lm-tag">By the way, have you considered <a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-part-five-querydsl/" rel="nofollow">using Querydsl</a>? I am not a big fan of the JPA Criteria API because complex queries tend to be extremely hard to write and read. Querydsl provides a bit better user experience.</p>
</div> </div></li></ul></li><li class="comment even thread-odd thread-alt depth-1" id="comment-1236203"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Anthony</span>  <span class="comment_date cye-lm-tag">July 1, 2015, 21:56</span></div><div class="comment_text" id="comment-body-1236203"><p class="cye-lm-tag">First, many thanks for this highly informative series! I have a question regarding filtering/searching. If one needs to obtain a list of an entity type filtered by multiple (optional) elements (say in the case of a Person, lastNameStartsWith, yearOfBirth, gender, etc…), what’s the best approach? I shall also need to perform sorting and pagination on this list…<br> Many Thanks!</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-1236211"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">July 1, 2015, 22:13</span></div><div class="comment_text" id="comment-body-1236211"><p class="cye-lm-tag">Hi Anthony,</p>
<p class="cye-lm-tag">thank you for your kind words! I really appreciate them.</p>
<p class="cye-lm-tag">Does optional mean that the condition might or might be present? For example, do you need to find persons whose:</p>
<ul><li>last name starts with X AND year of birth is Y</li><li>last name starts with X AND gender is Z</li><li>last name starts with X AND year of birth is Y AND gender is Z</li></ul><p class="cye-lm-tag">If so, I recommend that you use either JPA Criteria API or Querydsl. I would use Querydsl just because I don’t a big fan of the JPA Criteria API, but you can definitely use it if you don’t want to add another dependency to your project.</p>
</div> </div></li></ul></li><li class="comment even thread-even depth-1" id="comment-1244841"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">ANI</span>  <span class="comment_date cye-lm-tag">July 21, 2015, 12:09</span></div><div class="comment_text" id="comment-body-1244841"><p class="cye-lm-tag">Hi Petri,<br> I want to say that is amazing tutorial but i have some problems with jpa criteria api and I want your help. I have installed eclipse mars and also mysql. I made the connection between them and generate entities from the tables that I had created in mysql. I also installed JPA but the problems stay when I start to create criteria api. I have put some criteria api code and it doesn’t execute due to the libraries or something else.But when I put the right libraries and  the code don’t have any problems it is unable to execute and a Failure trace message. Could you help me what to do to resolve the problem and execute criteria api.</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-1245026"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">July 21, 2015, 21:58</span></div><div class="comment_text" id="comment-body-1245026"><p class="cye-lm-tag">Hi Ani,</p>
<p class="cye-lm-tag">Unfortunately I don’t know what is wrong without seeing the stack trace and the code that throws an exception. If you can add this information here, I can try to figure out what is wrong.</p>
</div> </div><ul class="children"><li class="comment even depth-3" id="comment-1245058"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Ani</span>  <span class="comment_date cye-lm-tag">July 21, 2015, 23:43</span></div><div class="comment_text" id="comment-body-1245058"><pre><code>
package ani;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;

import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Root;

import org.junit.Test;

public class CriteriaApi {
    
	@PersistenceContext
    EntityManager em;
	
	@Test
	public void test() {
		CriteriaBuilder cb = em.getCriteriaBuilder();
		CriteriaQuery crit = cb.createQuery(Person.class);
		Root candidateRoot = crit.from(Person.class);
		candidateRoot.alias("p");		
		}
	}
</code>
</pre><p class="cye-lm-tag">Stack Trace<br> give me a failure trace<br> java.lang.NullPointerException<br> at ani.CriteriaApi.test(CriteriaApi.java:25)</p>
</div> </div><ul class="children"><li class="comment odd alt depth-4" id="comment-1245059"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">ANI</span>  <span class="comment_date cye-lm-tag">July 21, 2015, 23:44</span></div><div class="comment_text" id="comment-body-1245059"><p class="cye-lm-tag">I will appreciate if you give me a solution for this problem as soon as possible.</p>
</div> </div></li><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-4" id="comment-1245081"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">July 22, 2015, 00:26</span></div><div class="comment_text" id="comment-body-1245081"><p class="cye-lm-tag">A <code>NullPointerException</code> is thrown because the value of the <code>em</code> is <code>null</code>. You need to create an <code>EntityManager</code> object and inject it to the <code>em</code> field before you can write tests that use it.</p>
<p class="cye-lm-tag">If you are using Spring Data JPA, check out my blog post titled: <a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-integration-testing/" rel="nofollow">Spring Data JPA Tutorial: Integration Testing</a>. It explains how you can write integration tests for your Spring powered repositories.</p>
<p class="cye-lm-tag">If you are using Java EE, you should take a look at <a href="http://arquillian.org/" target="_blank" rel="nofollow">Arquillian</a>.  I have never used it myself, but you can <a href="http://arquillian.org/guides/testing_java_persistence/" target="_blank" rel="nofollow">write tests for your persistence layer by using Arquillian</a>.</p>
</div> </div></li></ul></li></ul></li></ul></li><li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1245511"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">ANI</span>  <span class="comment_date cye-lm-tag">July 22, 2015, 21:44</span></div><div class="comment_text" id="comment-body-1245511"><p class="cye-lm-tag">Hell Petri,<br> I have another issue if you could help me. I don’t know how to add data with criteria api.</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-1245525"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">July 22, 2015, 22:14</span></div><div class="comment_text" id="comment-body-1245525"><p class="cye-lm-tag">Hi Ani,</p>
<p class="cye-lm-tag">You cannot add or update data with criteria API. You need to use either Spring Data repositories or the methods provided by the entity manager (if you use Java EE).</p>
</div> </div><ul class="children"><li class="comment odd alt depth-3" id="comment-1245562"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">ANI</span>  <span class="comment_date cye-lm-tag">July 22, 2015, 23:55</span></div><div class="comment_text" id="comment-body-1245562"><p class="cye-lm-tag">How? For example I need to add a person’s data in a table like first name, last name.</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-4" id="comment-1245767"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">July 23, 2015, 11:44</span></div><div class="comment_text" id="comment-body-1245767"><p class="cye-lm-tag">If you are using Spring Data JPA, <a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-part-two-crud/" rel="nofollow">read this blog post</a>. If you are using Java EE, <a href="http://www.thejavageek.com/2014/01/12/jpa-crud-example/" target="_blank" rel="nofollow">read this blog post</a>.</p>
</div> </div></li></ul></li></ul></li></ul></li><li class="comment odd alt thread-even depth-1" id="comment-1250002"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Clement</span>  <span class="comment_date cye-lm-tag">August 1, 2015, 11:35</span></div><div class="comment_text" id="comment-body-1250002"><p class="cye-lm-tag">Hi Petri</p>
<p class="cye-lm-tag">I want to fetch some records from the table. But am getting the record only if all the selected column is not null otherwise, that row is not returning in the final result.</p>
<p class="cye-lm-tag">@Query(Select le.id,le.name,le.address.no from Ent le)</p>
<p class="cye-lm-tag">If i execute the above query, it will return the result only if all the three columns are not null.<br> If le.address is null in table , it is getting skip and not fetching while am executing.</p>
<p class="cye-lm-tag">Can you please tell me, how can i fetch selected column from table, even if it is null<br> Thanks</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-1250012"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">August 1, 2015, 12:37</span></div><div class="comment_text" id="comment-body-1250012"><p class="cye-lm-tag">Hi Clement,</p>
<p class="cye-lm-tag">does your query method return an entity object or an object array?</p>
</div> </div><ul class="children"><li class="comment odd alt depth-3" id="comment-1250029"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Clement</span>  <span class="comment_date cye-lm-tag">August 1, 2015, 13:44</span></div><div class="comment_text" id="comment-body-1250029"><p class="cye-lm-tag">Hi Petri</p>
<p class="cye-lm-tag">Returning the result with entity object only.<br> But am not selecting the whole entity object, trying to fetch selected columns only. If the column has null value, that record is not getting fetch</p>
<p class="cye-lm-tag">Please provide any solution if you have any</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-4" id="comment-1250415"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">August 2, 2015, 11:32</span></div><div class="comment_text" id="comment-body-1250415"><p class="cye-lm-tag">I tried to reproduce your problem, but I ran into a different problem.  My query method looks as follows:</p>
<pre><code>
@Query("SELECT t.title, t.description FROM Todo t WHERE t.id=:id")
Todo findPartial(@Param("id") Long id);
</code>
</pre><p class="cye-lm-tag">When I invoke it, the <code>ConversionFailedException</code> is thrown (even if the <code>title</code> and <code>description</code> fields are not null):</p>
<p class="cye-lm-tag">org.springframework.core.convert.ConversionFailedException: Failed to convert from type java.lang.Object[] to type net.petrikainulainen.springdata.jpa.todo.Todo for value ‘{title, description}’; nested exception is org.springframework.core.convert.ConverterNotFoundException: No converter found capable of converting from type java.lang.String to type net.petrikainulainen.springdata.jpa.todo.Todo</p>
<p class="cye-lm-tag">There two solutions to this problem:</p>
<ul><li>You can <a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-three-custom-queries-with-query-methods/#comment-1230445" rel="nofollow">return a DTO</a> (or a list of DTOs).</li><li>You can <a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-three-custom-queries-with-query-methods/#comment-1230453" rel="nofollow">return an object array</a> (or a list of object arrays).</li></ul><p class="cye-lm-tag">I hope that this answered to your question.</p>
</div> </div><ul class="children"><li class="comment odd alt depth-5" id="comment-1250456"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Clement</span>  <span class="comment_date cye-lm-tag">August 2, 2015, 15:09</span></div><div class="comment_text" id="comment-body-1250456"><p class="cye-lm-tag">Hi petri</p>
<p class="cye-lm-tag">Thanks for your reply.<br> I do have an option by bindind the result in generic object. But that way i should not follow. i have to bind the result to corresponding pojo</p>
</div></div></li><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-5" id="comment-1250470"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">August 2, 2015, 16:48</span></div><div class="comment_text" id="comment-body-1250470"><p class="cye-lm-tag">But a DTO is a POJO, right?</p>
<p class="cye-lm-tag">If you want to return an entity, you can add a similar constructor to your entity class as well, but I think that it is a bad idea. If remember correctly, the returned object is not registered to the entity manager =&gt; you cannot save or update it, lazy loading doesn’t work, and so on.</p>
<p class="cye-lm-tag">If I would be you, I would return a DTO. Is there some reason why you cannot do it?</p>
</div></div></li><li class="comment odd alt depth-5" id="comment-1250713"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Clement</span>  <span class="comment_date cye-lm-tag">August 3, 2015, 08:23</span></div><div class="comment_text" id="comment-body-1250713"><p class="cye-lm-tag">Hi Petri</p>
<p class="cye-lm-tag">I can return a DTO . Am not facing any problem in getting result.<br> The problem is, am not getting the exact result set count. Because JPA skips the record when i am trying to select columns from the entity</p>
<p class="cye-lm-tag">For Eg : Select le.id,le.name,le.address from personal le.</p>
<p class="cye-lm-tag">In the above query, le.id and le.name is a string in that personal entity<br> But le.address is in manyToOne relation in personal entity.<br> So , if am trying to execute the query, JPA returns the records only if le.address is not null,<br> If it is null, JPA skips the record in the final result set.</p>
<p class="cye-lm-tag">Finally, I want all the records including null and not null of le.address</p>
<p class="cye-lm-tag">Thanks Petri</p>
</div></div></li><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-5" id="comment-1250729"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">August 3, 2015, 09:07</span></div><div class="comment_text" id="comment-body-1250729"><blockquote><p class="cye-lm-tag">In the above query, le.id and le.name is a string in that personal entity<br> But le.address is in manyToOne relation in personal entity.</p>
</blockquote><p class="cye-lm-tag">Ah, that explains it. I couldn’t figure out what is wrong because I thought that you are trying to select the fields of the <code>Personal</code> entity. However, if the <code>address</code> field contains another entity, you should use <code>LEFT JOIN</code>. These links describe how you can use left joins in your JPQL queries:</p>
<ul><li><a href="https://en.wikibooks.org/wiki/Java_Persistence/JPQL#LEFT_JOIN" target="_blank" rel="nofollow">JPQL – Left Join</a></li><li><a href="https://depressedprogrammer.wordpress.com/2007/11/20/performing-a-left-outer-join-using-jpql-and-jpa/" target="_blank" rel="nofollow">Performing a LEFT OUTER JOIN using JPQL and JPA</a></li><li><a href="http://stackoverflow.com/questions/9270060/how-to-combine-left-join-and-where-clause-with-jpql" target="_blank" rel="nofollow">How to combine LEFT JOIN and Where clause with JPQL? @StackOverflow</a></li></ul><p class="cye-lm-tag">I hope that this helps you to solve your problem.</p>
</div></div></li><li class="comment odd alt depth-5" id="comment-1250735"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">clement</span>  <span class="comment_date cye-lm-tag">August 3, 2015, 09:36</span></div><div class="comment_text" id="comment-body-1250735"><p class="cye-lm-tag">Hi Petri</p>
<p class="cye-lm-tag">Thanks for your immediate answer.<br> I am using left join only .  Please find the exact query that am using below.</p>
<p class="cye-lm-tag">@Query(“SELECT NEW com.test.las.domain.reports.testPojo(le.id,le.a, le.k, le.b, ”<br> + “le.c.id, le.d.id) from pojo1 le LEFT JOIN le.pojo2 ge order by le.id”)</p>
<p class="cye-lm-tag">In the above query , if le.c is null, am not getting that corresponding row.. but am getting all other rows as well</p>
<p class="cye-lm-tag">Thanks</p>
</div></div></li><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-5" id="comment-1250954"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">August 3, 2015, 19:36</span></div><div class="comment_text" id="comment-body-1250954"><p class="cye-lm-tag">It’s a bit hard to provide an exact answer because I don’t know which of the selected values are fields of the original entity and which are other entities. However, there are two rules that you should follow:</p>
<ol><li>If you select fields whose values are other entities, you have to specify that all of them are fetched by using left join.</li><li>When you select fields of other entities, you have use the alias which you specified when you created the left join.</li></ol><p class="cye-lm-tag"><strong>Example:</strong></p>
<p class="cye-lm-tag">I need to select the following values:</p>
<ul><li>The title of a todo entry. The title of the todo entry is stored to the <code>title</code> field of the <code>Todo</code> class.</li><li>The name of the person who created the selected todo entry. The name of the person is stored to the <code>name</code> field of the <code>Person</code> class. The person who created the todo entry is stored to the <code>creator</code> field of the <code>Todo</code> class.</li></ul><p class="cye-lm-tag">If want to create a query method that returns the title of the todo entry even if the creator is null, I have to use the following query method:</p>
<pre><code>
@Query(
	"SELECT new foo.bar.TodoDTO(t.title, p.name) " + 
	"FROM Todo t " + 
	"LEFT JOIN t.creator p " +
	"WHERE t.id=:id"
)
public TodoDTO findPartial(@Param("id") Long id)
</code>
</pre></div></div></li><li class="comment odd alt depth-5" id="comment-1251241"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Clement</span>  <span class="comment_date cye-lm-tag">August 4, 2015, 09:06</span></div><div class="comment_text" id="comment-body-1251241"><p class="cye-lm-tag">Hi Petri</p>
<p class="cye-lm-tag">SELECT le.a,le.b from table le<br> Please note that, query will return all the result even if le.a or le.b has null values because both are defined as string in their own entity.</p>
<p class="cye-lm-tag">But if Select le.a,le.b,le.address.name from table le<br> In this scenario, le.address is an object and if it is null,  It will skip the records that having address as null. Only will get the address as not null.<br> I want all the result to be fetched</p>
<p class="cye-lm-tag">Thanks</p>
</div></div></li><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-5" id="comment-1251315"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">August 4, 2015, 11:45</span></div><div class="comment_text" id="comment-body-1251315"><p class="cye-lm-tag">Hi Clement,</p>
<p class="cye-lm-tag">If the <code>Address</code> object is an entity, you can solve your problem by following the instructions given in <a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-part-four-jpa-criteria-queries/#comment-1250954" rel="nofollow">this comment</a>.</p>
<p class="cye-lm-tag">Is the <code>Address</code> an entity or an <code>@Embeddable</code> value object?</p>
</div></div></li><li class="comment odd alt depth-5" id="comment-1251336"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Clement</span>  <span class="comment_date cye-lm-tag">August 4, 2015, 12:37</span></div><div class="comment_text" id="comment-body-1251336"><p class="cye-lm-tag">Hi Petri</p>
<p class="cye-lm-tag">Thanks for the reply..<br> Address is an entity only in my scenario.</p>
<p class="cye-lm-tag">And in the example that you mentioned, if p.name is an object (ManytoOne) in ToDo, Row wil be skipped during execution of query.</p>
</div></div></li><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-5" id="comment-1251377"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">August 4, 2015, 13:51</span></div><div class="comment_text" id="comment-body-1251377"><p class="cye-lm-tag">Actually <a href="https://en.wikibooks.org/wiki/Java_Persistence/JPQL#LEFT_JOIN" target="_blank" rel="nofollow"><code>LEFT JOIN</code></a> includes todo entries that don’t have a creator:</p>
<blockquote><p class="cye-lm-tag">By default all joins in JPQL are INNER joins. This means that results that do not have the relationship will be filtered from the query results. To avoid this, a join can be defined as an OUTER join using the LEFT options.</p>
</blockquote></div></div></li><li class="comment odd alt depth-5" id="comment-1251911"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Clement</span>  <span class="comment_date cye-lm-tag">August 5, 2015, 09:29</span></div><div class="comment_text" id="comment-body-1251911"><p class="cye-lm-tag">Hi Petri</p>
<p class="cye-lm-tag">I have tried in all the way but still i couldn’t get all the rows as expected :-(</p>
</div></div></li><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-5" id="comment-1252008"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">August 5, 2015, 14:59</span></div><div class="comment_text" id="comment-body-1252008"><p class="cye-lm-tag">I modified your original query to use <code>LEFT JOIN</code>. The modified query looks as follows:</p>
<pre><code>
@Query(
	"SELECT new foo.bar.EntDTO(le.id, le.name, a.no) " +
	"FROM Ent le " +
	"LEFT JOIN le.address a"
)
</code>
</pre><p class="cye-lm-tag">This should return the wanted result (and not ignore rows that don’t have address information).</p>
<p class="cye-lm-tag">Are you by any chance sorting the query results of your query? Also, which JPA provider are you using?</p>
</div></div></li><li class="comment odd alt depth-5" id="comment-1252559"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Clement</span>  <span class="comment_date cye-lm-tag">August 6, 2015, 13:25</span></div><div class="comment_text" id="comment-body-1252559"><p class="cye-lm-tag">Hi Petri</p>
<p class="cye-lm-tag">Thanks for the information. I tried exactly like this but still am not getting the exact result.<br> And am using order by le.id</p>
</div></div></li><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-5" id="comment-1252753"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">August 6, 2015, 19:58</span></div><div class="comment_text" id="comment-body-1252753"><p class="cye-lm-tag">The reason why I asked about sorting is that if you would have sorted your query results by using a property of an entity that can be null, you would have faced <a href="http://tomaszdziurko.pl/2011/12/problem-withjpa-join-column-null-values-and-orderby/" target="_blank" rel="nofollow">this problem</a>. However, since you don’t do it, I have to admit that I don’t know what is wrong. :(</p>
</div></div></li><li class="comment odd alt depth-5" id="comment-1253129"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Clement</span>  <span class="comment_date cye-lm-tag">August 7, 2015, 09:11</span></div><div class="comment_text" id="comment-body-1253129"><p class="cye-lm-tag">Hi petri</p>
<p class="cye-lm-tag">Thanks a lot for your help . I will also try . If i found anything i will let you know.</p>
<p class="cye-lm-tag">Thanks!!!!</p>
</div></div></li><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-5" id="comment-1253348"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">August 7, 2015, 19:52</span></div><div class="comment_text" id="comment-body-1253348"><p class="cye-lm-tag">You are welcome. I hope that you find a solution to your problem!</p>
</div></div></li><li class="comment odd alt depth-5" id="comment-1253670"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">clement</span>  <span class="comment_date cye-lm-tag">August 8, 2015, 14:05</span></div><div class="comment_text" id="comment-body-1253670"><p class="cye-lm-tag">Hi Petri</p>
<p class="cye-lm-tag">I found the solution for my scenario.</p>
<p class="cye-lm-tag">Previously  i was using like select:</p>
<pre><code>
SELECT NEW com.foo.las.domain.table1(le.id,le.name,le.address,ge.time) 
FROM table1 le 
LEFT JOIN le.table2 re
</code>
</pre><p class="cye-lm-tag">In the above query , if address is null , i couldnt get the complete result.</p>
<p class="cye-lm-tag">So i changed the query like select:</p>
<pre><code>
SELECT NEW com.foo.las.domain.table1(le,ge.time) 
from table1 le 
LEFT JOIN le.table2 re
</code>
</pre><p class="cye-lm-tag">In POJO:</p>
<pre><code>
table1(table1 le,time time){
	this.id = le.id;
	this.name = le.name;
	this.address = le.address;
	this.time = time;
}
</code>
</pre><p class="cye-lm-tag">So, now its fetching all the results as expected.</p>
<p class="cye-lm-tag">Thanks for your try petri for me!! :-)</p>
<p class="cye-lm-tag"><em>Update: I modified the package name because it identified the end customer. – Petri</em></p>
</div></div></li><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-5" id="comment-1253681"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">August 8, 2015, 14:37</span></div><div class="comment_text" id="comment-body-1253681"><p class="cye-lm-tag">Great work! Also, thank you for posting the solution on my blog.</p>
<p class="cye-lm-tag">I think that I will write some blog posts that talk about these “special” scenarios and describe how you can solve them.</p>
</div></div></li></ul></li></ul></li></ul></li></ul></li><li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1258490"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Clement</span>  <span class="comment_date cye-lm-tag">August 19, 2015, 08:59</span></div><div class="comment_text" id="comment-body-1258490"><p class="cye-lm-tag">Hi Petri</p>
<p class="cye-lm-tag">Can you please tell me .. Is there any other way to handle this scenario in better way</p>
<p class="cye-lm-tag">I am trying to execute findAll() and am getting the result as List&lt;B&gt; totalList;<br> i want to set it to List&lt;C&gt; without iterating in for loop because i want to give parameter of List&lt;C&gt; to .save method</p>
</div> </div></li><li class="comment even thread-even depth-1" id="comment-1269019"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Mayank</span>  <span class="comment_date cye-lm-tag">September 10, 2015, 09:07</span></div><div class="comment_text" id="comment-body-1269019"><p class="cye-lm-tag">Hi Petri,</p>
<p class="cye-lm-tag">Thanks for an awesome article. Successfully followed it to introduce Specifications for my Project.</p>
<p class="cye-lm-tag">I am having an issue though for fetching data from Multiple table.</p>
<p class="cye-lm-tag">Suppose I have 3 tables.. Request_Details, Customer_Org_Details, Address_Details</p>
<p class="cye-lm-tag">Request_Details is primary table and it stores primary keys of Customer_Org_Details and  Address_Details table as foreign key in two different columns to maintain relations.</p>
<p class="cye-lm-tag">I have Delivery Address city, Customer Org name and request ID to fetch data. So I need to get data from three tables. I am unable to make this join using Specification.</p>
<p class="cye-lm-tag">Could you pls help.</p>
<p class="cye-lm-tag">Thanks,<br> Mayank.</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-1269264"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">September 10, 2015, 20:50</span></div><div class="comment_text" id="comment-body-1269264"><p class="cye-lm-tag">Could you add your entity classes into a new comment? The reason why ask this is that it’s impossible to answer to your question without seeing those classes. Also, I only need to see what kind of relationship the <code>RequestDetails</code> entity has with the <code>CustomerOrgDetails</code> and <code>AddressDetails</code> entities.</p>
</div> </div><ul class="children"><li class="comment even depth-3" id="comment-1269728"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Mayank</span>  <span class="comment_date cye-lm-tag">September 11, 2015, 16:39</span></div><div class="comment_text" id="comment-body-1269728"><p class="cye-lm-tag">Hi Petri,</p>
<p class="cye-lm-tag">Thanks for quick response.. Please find below drive url for seeing images of table structure:</p>
<p class="cye-lm-tag"><a href="https://drive.google.com/folderview?id=0By53-A1xA5XfWTlKT3cweDBmbjA&amp;usp=sharing" rel="nofollow">https://drive.google.com/folderview?id=0By53-A1xA5XfWTlKT3cweDBmbjA&amp;usp=sharing</a></p>
<p class="cye-lm-tag">As of now I am fetching value from one table and filtering the records at client side in backend for filter values from other table (Like filter on the basis of city name for requests).</p>
<p class="cye-lm-tag">Code for Specification:</p>
<pre><code>
public final class ReleaseByProdTypeReqSpecification {

    private ReleaseByProdTypeReqSpecification() {}

    public static Specification hasOrderType(String orderType) {
        return (root, query, cb) -&gt; {
            return cb.equal(
				root.get(JpaReleaseByProductTypeReq_.orderType), 
				orderType
			);
        };
    }

    public static Specification hasDeliveryIdentifier(String deliveryIdentifier) {
        return (root, query, cb) -&gt; {
            return cb.equal(
				root.get(JpaReleaseByProductTypeReq_.additionalDeliveryIdentifier), 
				deliveryIdentifier
			);
        };
    }

    public static Specification hasSendersReference(String sendersRef) {
        return (root, query, cb) -&gt; {
            return cb.equal(
				root.get(JpaReleaseByProductTypeReq_.sendersReference), 
				sendersRef
			);
        };
    }

    public static Specification hasDeliveryDate(Date desiredDeliveryDate) {
        return (root, query, cb) -&gt; {
            return cb.equal(
				root.get(JpaReleaseByProductTypeReq_.desiredDeliveryDate).as(Date.class), 
				desiredDeliveryDate
			);
        };
    }
}
</code>
</pre><p class="cye-lm-tag">Requirement is to have specifications for joins as well for these three related tables.</p>
<p class="cye-lm-tag">Insights appreciated.</p>
<p class="cye-lm-tag">Regards,<br> Mayank Porwal.</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-4" id="comment-1269924"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">September 12, 2015, 01:28</span></div><div class="comment_text" id="comment-body-1269924"><p class="cye-lm-tag">You can combine multiple specifications by using the <a href="http://docs.spring.io/spring-data/jpa/docs/current/api/org/springframework/data/jpa/domain/Specifications.html" target="_blank" rel="nofollow"><code>Specifications&lt;T&gt;</code></a> class.</p>
<p class="cye-lm-tag">If you have two specifications (<code>specA</code> and <code>specB</code>), and you want to get entities that fulfil both of them, you can use the following code:</p>
<pre><code>
Specification&lt;Todo&gt; specA = ...
Specification&lt;Todo&gt; specB = ...
List&lt;Todo&gt; todoEntries =  repository.findAll(
    Specifications.where(specA).and(specB)
);
</code>
</pre><p class="cye-lm-tag">I hope that this answered to your question. Also, if you have any other questions, do not hesitate to ask them!</p>
</div> </div><ul class="children"><li class="comment even depth-5" id="comment-1270122"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Anonymous</span>  <span class="comment_date cye-lm-tag">September 12, 2015, 10:26</span></div><div class="comment_text" id="comment-body-1270122"><p class="cye-lm-tag">Hi Petri,</p>
<p class="cye-lm-tag">I am already ady using “and” “or” for combining specs, but on one table columns only.. Is it allowed for specs from multiple tables as well.?</p>
<p class="cye-lm-tag">I do this when suppose I need filter on request desired date and sender.. But if I hv delivery city which is another table how to get requests for that..</p>
</div></div></li><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-5" id="comment-1270141"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">September 12, 2015, 11:30</span></div><div class="comment_text" id="comment-body-1270141"><blockquote><p class="cye-lm-tag">Is it allowed for specs from multiple tables as well.?</p>
</blockquote><p class="cye-lm-tag">Yes (and no). You can combine multiple <code>Specification&lt;A&gt;</code> objects, but you cannot combine <code>Specification&lt;A&gt;</code> and <code>Specification&lt;B&gt;</code> objects.</p>
<blockquote><p class="cye-lm-tag"> But if I hv delivery city which is another table how to get requests for that..</p>
</blockquote><p class="cye-lm-tag">I will demonstrate this by using an example. Let’s assume that</p>
<ul><li>The “main” entity is called <code>RequestDetails</code> and its has a one-to-one relationship with the <code>DeliveryAddress</code> entity.</li><li>You want to create a specification that fetches all request details objects whose <code>senderReference</code> is ‘XXX’ and <code>city</code> is ‘Atlanta’.</li></ul><p class="cye-lm-tag">The specification builder class that builds these individual specifications looks as follows:</p>
<pre><code>
public final class RequestDetailsSpecifications {

	public static Specification&lt;RequestDetails&gt; hasSendersReference(String ref) {
		return (root, query, cb) -&gt; {
            return cb.equal(
				root.&lt;String&gt;get("sendersReference"), 
				ref
			);
        };
    }
	
	public static Specification&lt;RequestDetails&gt; isDeliveredIntoCity(String city) {
		return (root, query, cb) -&gt; {
        	return cb.equal(
				root.&lt;DeliveryAddress&gt;get("deliveryAddress").&lt;String&gt;get("city"), 
				city
			);
    	};
	}
}
</code>
</pre><p class="cye-lm-tag">(I replaced the static meta model with strings because it makes this example a bit easier to read).</p>
<p class="cye-lm-tag">You can now combine these specifications by using the following code:</p>
<pre><code>
Specification&lt;RequestDetails&gt; senderReferenceSpec = hasSendersReference("XXX");
Specification&lt;RequestDetails&gt; deliveryCitySpec = isDeliveredIntoCity("Atlanta");
List<requestdetails> results =  repository.findAll(
    Specifications.where(senderReferenceSpec).and(deliveryCitySpec)
);
</requestdetails></code>
</pre><p class="cye-lm-tag">In other words, if you can navigate from the <code>Root&lt;RequestDetails&gt;</code> object to the preferred entity, you can create a <code>Specification&lt;RequestDetails&gt;</code> object and combine it with other <code>Specification&lt;RequestDetails&gt;</code> objects.</p>
<p class="cye-lm-tag">Again, if you have some questions, feel free to ask them.</p>
</div></div></li></ul></li></ul></li></ul></li></ul></li><li class="comment even thread-odd thread-alt depth-1" id="comment-1277845"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">John</span>  <span class="comment_date cye-lm-tag">September 27, 2015, 16:50</span></div><div class="comment_text" id="comment-body-1277845"><p class="cye-lm-tag">Hi,<br> I have an issue in fetching the associated records using Spring Data JPA<br> Suppose my repository is as below</p>
<pre><code>
public interface PersonRepository extends JpaRepository {    

	public final static String FIND_BY_ADDRESS_QUERY = "SELECT p " + 
			"FROM Person p LEFT JOIN p.addresses a " +
			"WHERE a.address = :address";
 
 	@Query(FIND_BY_ADDRESS_QUERY)
 	public List findByAddress(@Param("address") String address);
}
</code>
</pre><p class="cye-lm-tag">Entity as below</p>
<pre><code>
@Entity
@Table(name = "Person")
public class Person {

    @Id
    @GeneratedValue
    private Long Id;

    @Column(name = "name", length = 255, nullable = false)
    private String name;

    @OneToMany(cascade=CascadeType.ALL)
	@JoinColumn(name = "Id", referencedColumnName = "Id")
	private Set address;
}
</code>
</pre><p class="cye-lm-tag">I will get the list of Person and  and how will i get the addresses ?</p>
<p class="cye-lm-tag">Question is on how to fetch the associated table details</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-1278255"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">September 28, 2015, 22:27</span></div><div class="comment_text" id="comment-body-1278255"><p class="cye-lm-tag">Do you mean that “extra” SQL queries are invoked when you try to access the address of a person? If so, you might want to use a fetch join (<code>LEFT JOIN FETCH</code>). However, before you do that, you should read this blog post: <a href="http://www.kumaranuj.com/2013/07/jpa-2-fetch-joins-and-whether-we-should.html" target="_blank" rel="nofollow">Fetch Joins and whether we should use them</a>.</p>
</div> </div><ul class="children"><li class="comment even depth-3" id="comment-1447929"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Sam</span>  <span class="comment_date cye-lm-tag">May 26, 2016, 20:55</span></div><div class="comment_text" id="comment-body-1447929"><p class="cye-lm-tag">Hi,</p>
<p class="cye-lm-tag">The blog is simple and straight with syntax both in jpql and criteria api.</p>
<p class="cye-lm-tag">SQL SERVER QUERY<br> ———————<br> select<br> *<br> from<br> employee jj<br> inner join<br> (<br> select<br> max(join_date) as jdate,<br> empltype as emptype<br> from<br> employee<br> where<br> empltype=’clerk’<br> group by empltype<br> ) mm<br> on jj.join_date=mm.jdate and jj.empltype=mm.emptype;</p>
<p class="cye-lm-tag">JPQL :<br> ——-</p>
<p class="cye-lm-tag">em.createQuery(“Select e from EMPLOYEE e join e.empltype=:c.empltype,MAX(c.joindate) from EMPLOYEE c where c.emplytpe like :empltype GROUP BY c.empltype e1 ON e.empltype=e1.empltype AND e.joindate=e1.joindate”)</p>
<p class="cye-lm-tag">However i am stuck up in achieving the following functionality using both jpql and criteria.</p>
<p class="cye-lm-tag">Throwing an exception unexpepected token:=near line1,column 75[ ]</p>
<p class="cye-lm-tag">Any inputs  are really appreciated..</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-4" id="comment-1451011"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">June 1, 2016, 21:33</span></div><div class="comment_text" id="comment-body-1451011"><p class="cye-lm-tag">Hi,</p>
<p class="cye-lm-tag">If I remember correctly, JPQL does not have the <code>ON</code> keyword. In other words, you can join two entities only if they have a relationship. I think that your best bet is to use a native SQL query.</p>
</div> </div></li></ul></li></ul></li></ul></li><li class="comment even thread-even depth-1" id="comment-1310781"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">sandy</span>  <span class="comment_date cye-lm-tag">November 12, 2015, 16:56</span></div><div class="comment_text" id="comment-body-1310781"><p class="cye-lm-tag">I am Passing java.sql.date in my method and in my entity column contain Time stamp , now i want to find by only by date in my specification how can i do this .<br> below code snippet is not working</p>
<p class="cye-lm-tag"> public static Specification hasDesiredDeliveryDate(java.sql.Date desiredDeliveryDate) {<br> return (root, query, cb) -&gt; {<br> return cb.equal(<br> root.get(“productIndividual”).get(“deliveryPoint”).get(“desiredDeliveryDate”).as(java.sql.Timestamp.class), desiredDeliveryDate);<br> };<br> }</p>
</div> </div></li><li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1331874"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Vipul Jain</span>  <span class="comment_date cye-lm-tag">December 17, 2015, 15:00</span></div><div class="comment_text" id="comment-body-1331874"><p class="cye-lm-tag">How to use order by in specifications for example I am writing my specification like this<br> Specifications.where(getPositionSpecification(filterDTO.getPositions()))<br> .and(getUserSpecification(filterDTO.getUsers())).and(getDateBetween(filterDTO));</p>
<p class="cye-lm-tag">then how can I apply orderBy here ??</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-1332018"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">December 17, 2015, 19:55</span></div><div class="comment_text" id="comment-body-1332018"><p class="cye-lm-tag">Hi,</p>
<p class="cye-lm-tag">I have written a blog post that explains how you can <a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-part-six-sorting/" rel="nofollow">sort your query results with Spring Data JPA</a> (search for the title: ‘Sorting the Query Results of JPA Criteria Queries’).</p>
</div> </div></li></ul></li><li class="comment odd alt thread-even depth-1" id="comment-1341351"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Vinod</span>  <span class="comment_date cye-lm-tag">January 4, 2016, 07:08</span></div><div class="comment_text" id="comment-body-1341351"><p class="cye-lm-tag">Hello Petri,</p>
<p class="cye-lm-tag">Hope you are doing well. Thanks for the blog it’s really helpful for me. I am stuck with one issue can you please help me with it.</p>
<p class="cye-lm-tag">I want to generate dynamic conditonal filter for spring data jpa with feild “notificationId” but my dto has list for normal dtos without list i am able to create it by following your blog i.e is done for “email” and all. can you please help me with it. I am getting null.userGcmData</p>
<p class="cye-lm-tag">do i need to use builder.like or some other method if so can you give me syntax for it if possible.</p>
<p class="cye-lm-tag">Thanks in advance</p>
<pre><code>
public class UserSpecification implements Specification {

	private SearchCriteria searchCriteria;

	public UserSpecification(SearchCriteria searchCriteria) {
		super();
		this.searchCriteria = searchCriteria;
	}

	@Override
	public Predicate toPredicate(Root root, CriteriaQuery query, 	CriteriaBuilder builder) {
		//Not able to create the query its giving me null.userGcmData
		if ("notificationId".equalsIgnoreCase(searchCriteria.getKey())) {
			return builder.like(
				root.get("userGcmData").get("notificationId"), 
				"%" + searchCriteria.getValue() + "%"
			);
		}
	}
}

//My Pojo classes
@Entity
public class User {

    @JsonProperty("gcm")
    @OneToMany(mappedBy = "user", cascade = CascadeType.ALL, fetch = FetchType.LAZY)
    private List userGcmData;
}


@Entity
@Table(name = "user_gcm_data")
public class UserGcmData {

    @JsonProperty("notification_id")
    @Column(name = "notification_id")
    private String notificationId;
}
</code>
</pre><p class="cye-lm-tag"><em>Update: I removed the irrelevant parts of code listing since it was quite long – Petri</em></p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-1341632"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">January 4, 2016, 19:40</span></div><div class="comment_text" id="comment-body-1341632"><p class="cye-lm-tag">Hi,</p>
<p class="cye-lm-tag">The problem is that you cannot access a collection property by using the <code>get()</code> method. You need to use join for this purpose. You can fix this problem by replacing your return statement with this one:</p>
<pre><code>
return builder.like(
	root.join("userGcmData").get("notificationId"), 
	"%" + searchCriteria.getValue() + "%"
);
</code>
</pre><p class="cye-lm-tag">This blog post provides more information about joins: <a href="http://www.altuure.com/2010/09/23/jpa-criteria-api-by-samples-%E2%80%93-part-ii/" target="_blank" rel="nofollow">JPA Criteria API by samples – Part-II</a>.</p>
</div> </div></li></ul></li><li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1343227"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Mayank</span>  <span class="comment_date cye-lm-tag">January 7, 2016, 13:07</span></div><div class="comment_text" id="comment-body-1343227"><p class="cye-lm-tag">Hi Petri..</p>
<p class="cye-lm-tag">Thanks a lot for this series.. Its really helping.. Need one help..</p>
<p class="cye-lm-tag">Suppose I have 3 tables from which I need some.. Containing something like below structures:</p>
<pre><code>
@Entity
class Series {
	
	@Id
	Long id;

	@OneToMany(mappedBy="series")
	List dossiers;
}

@Entity
class Dossier {
  
	@Id
	Long id;

	@ManyToOne
	Series series;

	@OneToMany(mappedBy="dossier"
	List items;
}

@Entity
class Item {
	
	@Id
	Long id;

	@ManyToOne
	Dossier dossier;
}
</code>
</pre><p class="cye-lm-tag">I tried writing specification as given below:</p>
<pre><code>
public static Specification hasNoErrors(Long id) {
	return (root, query, cb) -&gt; {
		return cb.equal(
			root.get("dossiers").get("items").get("id"), 
			id
		);
	};
}
</code>
</pre><p class="cye-lm-tag">However, I get below exception:<br> org.springframework.dao.InvalidDataAccessApiUsageException: Illegal attempt to dereference path source [null.Series] of basic type; nested exception is java.lang.IllegalStateException: Illegal attempt to dereference path source</p>
<p class="cye-lm-tag">Kindly help… I am stuck here big time.</p>
<p class="cye-lm-tag">Regards,<br> Mayank</p>
</div> </div><ul class="children"><li class="comment even depth-2" id="comment-1343253"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Mayank</span>  <span class="comment_date cye-lm-tag">January 7, 2016, 14:12</span></div><div class="comment_text" id="comment-body-1343253"><p class="cye-lm-tag">Was able to do it by reading earlier comments.. Using join.. :)</p>
<p class="cye-lm-tag">Thanks anyways..</p>
<p class="cye-lm-tag">Regards,<br> Mayank</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-3" id="comment-1343438"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">January 7, 2016, 22:13</span></div><div class="comment_text" id="comment-body-1343438"><p class="cye-lm-tag">Hi,</p>
<p class="cye-lm-tag">It’s good to hear that you were able to solve your problem!</p>
</div> </div></li><li class="comment even depth-3" id="comment-1343780"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Mayank</span>  <span class="comment_date cye-lm-tag">January 8, 2016, 13:06</span></div><div class="comment_text" id="comment-body-1343780"><p class="cye-lm-tag">Hi petri,</p>
<p class="cye-lm-tag">Ran into another issue with the above query…</p>
<p class="cye-lm-tag">If I use join, I get Duplicate records due to OneToMany relationship, so i used query.distinct(true), as suggested by you in some of the solutions earlier.</p>
<p class="cye-lm-tag">However, that gives me error as I have one column as CLOB type in my parent class and seems CLOB datatypes are not supported with Distinct comparisons.</p>
<p class="cye-lm-tag">Can u suggest something.</p>
<p class="cye-lm-tag">Regards,<br> Mayank</p>
</div> </div><ul class="children"><li class="comment odd alt depth-4" id="comment-1343822"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Mayank</span>  <span class="comment_date cye-lm-tag">January 8, 2016, 14:39</span></div><div class="comment_text" id="comment-body-1343822"><p class="cye-lm-tag">Hi petri…</p>
<p class="cye-lm-tag">Was able to create oracle query w/o Distinct keyword.. However having issue now in converting to Specification..</p>
<p class="cye-lm-tag">Can u help. Below is the query..</p>
<p class="cye-lm-tag">Select * from STG_PRODEF_REQUEST where ID in<br> (Select PRODEF_PROD_TYPE_REQ.PRODEF_REQUEST_ID from PRODEF_PROD_TYPE_REQ<br> INNER JOIN<br> STG_PRODEF_RESPONSE on PRODEF_PROD_TYPE_REQ.ID = STG_PRODEF_RESPONSE.PRODEF_INDIVIDUAL_ID and STG_PRODEF_RESPONSE.ERROR_CODE is not null)</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-5" id="comment-1344018"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">January 8, 2016, 21:37</span></div><div class="comment_text" id="comment-body-1344018"><p class="cye-lm-tag">Hi Mayank,</p>
<p class="cye-lm-tag">Check out <a href="http://stackoverflow.com/questions/4483576/jpa-2-0-criteria-api-subqueries-in-expressions" target="_blank" rel="nofollow">this StackOverflow question</a>. It should help you to solve your problem. If not, let me know.</p>
</div></div></li><li class="comment odd alt depth-5" id="comment-1345673"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Mayank</span>  <span class="comment_date cye-lm-tag">January 11, 2016, 11:24</span></div><div class="comment_text" id="comment-body-1345673"><p class="cye-lm-tag">Hi Petri,</p>
<p class="cye-lm-tag">First of all, Thanks a lot for all your help.<br> Tried replicating the resolution suggested by you earlier. However not able to… Some insights on what I am doing wrong will be really helpful:</p>
<p class="cye-lm-tag">My table structure:</p>
<p class="cye-lm-tag">STG_PRODEF_REQUEST  Table:<br> __________________________________________________________________<br> public class JpaProDefRequest {</p>
<p class="cye-lm-tag"> @NotNull<br> @Id<br> @Column(name=”ID”)<br> private Long id;</p>
<p class="cye-lm-tag"> @NotNull<br> @Column(name=”REQUEST_XML”)<br> @Lob<br> private String proDefVersionRequestXML;</p>
<p class="cye-lm-tag"> @OneToMany(mappedBy = “orderId”)<br> private List proDefProductTypeReqs;<br> ____________________________________________________________________</p>
<p class="cye-lm-tag">PRODEF_PROD_TYPE_REQ Table:<br> ____________________________________________________________________<br> @Id<br> @Column(name=”ID”)<br> private Long id;</p>
<p class="cye-lm-tag"> @NotNull<br> @ManyToOne(fetch = FetchType.LAZY, cascade=CascadeType.ALL)<br> @JoinColumn(name=”PRODEF_REQUEST_ID”)<br> private JpaProDefRequest orderId;</p>
<p class="cye-lm-tag"> @OneToOne(mappedBy = “individualId”)<br> private JpaProDefServiceResponse serviceResponse;<br> ______________________________________________________________________</p>
<p class="cye-lm-tag">STG_PRODEF_RESPONSE Table:<br> ______________________________________________________________________<br> @NotNull<br> @Id<br> private Long id;</p>
<p class="cye-lm-tag"> @Nullable<br> @OneToOne(fetch = FetchType.LAZY, cascade=CascadeType.ALL)<br> @JoinColumn(name=”PRODEF_INDIVIDUAL_ID”)<br> private JpaProDefProductTypeReq individualId;</p>
<p class="cye-lm-tag"> @Nullable<br> @Column(name = “ERROR_CODE”)<br> private String errorCode;</p>
<p class="cye-lm-tag"> @Nullable<br> @Column(name = “ERROR_DESC”)<br> private String errorDescription;<br> ______________________________________________________________________</p>
<p class="cye-lm-tag">Need to fetch responses for below query:<br> ____________________________________________________________________________<br> Select * from STG_PRODEF_REQUEST where ID in<br> (Select PRODEF_PROD_TYPE_REQ.PRODEF_REQUEST_ID from PRODEF_PROD_TYPE_REQ<br> INNER JOIN<br> STG_PRODEF_RESPONSE on PRODEF_PROD_TYPE_REQ.ID = STG_PRODEF_RESPONSE.PRODEF_INDIVIDUAL_ID and STG_PRODEF_RESPONSE.ERROR_CODE is not null)<br> ____________________________________________________________________________</p>
<p class="cye-lm-tag">I tried:</p>
<p class="cye-lm-tag">public static Specification hasA() {<br> return new Specification() {<br> @Override<br> public javax.persistence.criteria.Predicate toPredicate(Root jpaProDefRequestRoot, CriteriaQuery criteriaQuery, CriteriaBuilder cb) {<br> CriteriaQuery query = cb.createQuery(JpaProDefRequest.class);<br> Root proDefRequestRoot = query.from(JpaProDefRequest.class);<br> Subquery sq = query.subquery(Long.class);<br> Root request = sq.from(JpaProDefProductTypeReq.class);<br> Join proDefProductTypeReqs = request.join(“proDefProductTypeReqs”);</p>
<p class="cye-lm-tag"> sq.select(proDefProductTypeReqs.get(JpaProDefRequest_.id)).where(<br> cb.isNotNull(request.get(JpaProDefProductTypeReq_.serviceResponse).get(“errorCode”)));</p>
<p class="cye-lm-tag"> return query.select(proDefRequestRoot).where(<br> cb.in(proDefRequestRoot.get(JpaProDefRequest_.id)).value(sq));<br> }<br> };<br> }</p>
<p class="cye-lm-tag">However doesn’t work.</p>
<p class="cye-lm-tag">Regards,<br> Mayank.</p>
</div></div></li><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-5" id="comment-1346011"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">January 11, 2016, 21:46</span></div><div class="comment_text" id="comment-body-1346011"><p class="cye-lm-tag">Hi Mayank,</p>
<p class="cye-lm-tag">Do you get an error message or does the query return wrong results? The reason why I ask this is that it is kind of hard to figure this out when I cannot run the actual code. If you get an error message, that could help me to find the problem.</p>
</div></div></li><li class="comment odd alt depth-5" id="comment-1346568"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Mayank</span>  <span class="comment_date cye-lm-tag">January 12, 2016, 16:33</span></div><div class="comment_text" id="comment-body-1346568"><p class="cye-lm-tag">Hi Petri,</p>
<p class="cye-lm-tag">Somehow was able to get it work. I was not using sub query properly. Realized how naive I am in Specifications.</p>
<p class="cye-lm-tag">Thanks for the support.</p>
<p class="cye-lm-tag">Regards,<br> Mayank.</p>
</div></div></li><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-5" id="comment-1346685"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">January 12, 2016, 20:21</span></div><div class="comment_text" id="comment-body-1346685"><p class="cye-lm-tag">Hi Mayank,</p>
<p class="cye-lm-tag">You are welcome! I am happy to hear that were able to solve your problem.</p>
</div></div></li></ul></li></ul></li></ul></li></ul></li><li class="comment odd alt thread-even depth-1" id="comment-1373916"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Subhash Koganti</span>  <span class="comment_date cye-lm-tag">February 17, 2016, 23:00</span></div><div class="comment_text" id="comment-body-1373916"><p class="cye-lm-tag">Hi There ,</p>
<p class="cye-lm-tag">Can you please do a tutorial by integrating the Spring Data JPA with Spring Boot and Mysql ??</p>
<p class="cye-lm-tag">I seem to have issues when i use Mysql instead of H2 Db.</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-1374639"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">February 18, 2016, 18:29</span></div><div class="comment_text" id="comment-body-1374639"><p class="cye-lm-tag">Hi,</p>
<p class="cye-lm-tag">What kind of issues are you having?</p>
</div> </div></li></ul></li><li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1376373"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Santiago</span>  <span class="comment_date cye-lm-tag">February 20, 2016, 22:35</span></div><div class="comment_text" id="comment-body-1376373"><p class="cye-lm-tag">Hello Petri,</p>
<p class="cye-lm-tag">Very good job with this site, I always end up here when I’m looking up for info about Spring and JPA. :)</p>
<p class="cye-lm-tag">I want to ask you something. I see in your examples you make use of predicates in the service layer, plus you expose in the repositories the functions from JpaSpecificationExecutor.</p>
<p class="cye-lm-tag">Is it really OK in a real world application to expose these signatures in your repository interface and making use of predicates in the service layer when you expect to have multiple implementations of both layers in a Spring app?</p>
<p class="cye-lm-tag">Thanks :)</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-1376733"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">February 21, 2016, 21:29</span></div><div class="comment_text" id="comment-body-1376733"><p class="cye-lm-tag">Hi Santiago,</p>
<p class="cye-lm-tag">Thank you for your kind words. I really appreciate them.</p>
<blockquote><p class="cye-lm-tag">Is it really OK in a real world application to expose these signatures in your repository interface and making use of predicates in the service layer when you expect to have multiple implementations of both layers in a Spring app?</p>
</blockquote><p class="cye-lm-tag">If you have multiple repository implementations, you cannot naturally expose implementation details to the service layer.</p>
<p class="cye-lm-tag">However, if I have only one repository implementation (right now), I always create the predicates on the service layer. The reason for this is that it’s a lot simpler and I can always hide it behind an additional interface if I need to create a second repository implementation (this is very rare).</p>
</div> </div></li></ul></li><li class="comment odd alt thread-even depth-1" id="comment-1442969"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Sam</span>  <span class="comment_date cye-lm-tag">May 16, 2016, 16:21</span></div><div class="comment_text" id="comment-body-1442969"><p class="cye-lm-tag">Hi Petri,</p>
<p class="cye-lm-tag">Your previous posts on QueryDSL solved many of my requirements, now am stuck up with sub query using Specification to satisft one requirement,tried couple of ways to achieve, but no luck.</p>
<p class="cye-lm-tag">I need to fetch the one record of employee role from empl_tbl whose JOINING DATE is the latest one.</p>
<p class="cye-lm-tag">SQL-QUERY<br> ——————–<br> select * from EMPL_TABLE WHERE EMPL_ROLE=’MGR’ and JOIN_DATE=<br> (select max(JOIN_DATE) as datecol from EMPL_TABLE WHERE EMPL_ID=’MGR’)</p>
<p class="cye-lm-tag">Entity — EmpTableEntity</p>
<p class="cye-lm-tag">How can i transform the above query using specifications.</p>
<p class="cye-lm-tag">Appreciate your response.</p>
<p class="cye-lm-tag">Thanks<br> Sam</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-1444665"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">May 19, 2016, 19:20</span></div><div class="comment_text" id="comment-body-1444665"><p class="cye-lm-tag">Hi Sam,</p>
<p class="cye-lm-tag"><a href="http://stackoverflow.com/a/14068224/313554" target="_blank" rel="nofollow">This StackOverflow answer</a> describes how you can create a specification that uses subqueries.</p>
</div> </div></li></ul></li><li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1459093"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Lucas Araújo</span>  <span class="comment_date cye-lm-tag">June 21, 2016, 20:46</span></div><div class="comment_text" id="comment-body-1459093"><p class="cye-lm-tag">I’m working in a project that i need create a Specification for this query:<br> “select l.* from lead as l<br> where l.id in (select t.lead_id from telefone as t where t.lead_id = l.id);”</p>
<p class="cye-lm-tag">The entity Phone has ManyToOne relationship for Lead.</p>
<p class="cye-lm-tag">But i’m having trouble for create a subquery for select column “lead_id” with join.<br> Someone can help me please?</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-1459897"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">June 23, 2016, 23:52</span></div><div class="comment_text" id="comment-body-1459897"><p class="cye-lm-tag">Hi,</p>
<p class="cye-lm-tag">Your query looks pretty similar as the query which I found from <a href="http://stackoverflow.com/a/9983123/313554" target="_blank" rel="nofollow">this StackOverflow answer</a>. The key is to create the subquery (check the link) and use it when you specify the IN condition by invoking the <code>in()</code> method of the <code>CriteriaBuilder</code> interface.</p>
<p class="cye-lm-tag">If you have any additional questions, don’t hesitate to ask them.</p>
</div> </div></li></ul></li><li class="comment odd alt thread-even depth-1" id="comment-1463102"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">sathishkumar</span>  <span class="comment_date cye-lm-tag">July 1, 2016, 22:04</span></div><div class="comment_text" id="comment-body-1463102"><p class="cye-lm-tag">Hi,</p>
<p class="cye-lm-tag">Help required, I got stuck with the below exception. Am getting this exception while executing the below piece of code from my junit test case</p>
<p class="cye-lm-tag">contractRepository.findAll(ContractSpecification.searchByContractId(“XXXX”));</p>
<p class="cye-lm-tag">i have my specification smehting like below</p>
<pre><code>
public static Specification searchByContractId(String contractNumber) {
	return (Root root, CriteriaQuery query, CriteriaBuilder cb) -&gt; {
		return cb.equal(root.get("contractNumber"), contractNumber);
	};
}
</code>
</pre><p class="cye-lm-tag">java.lang.ClassCastException: javax.persistence.criteria.$Impl_Predicate cannot be cast to org.hibernate.jpa.criteria.Renderable<br> at org.hibernate.jpa.criteria.QueryStructure.render(QueryStructure.java:262)<br> at org.hibernate.jpa.criteria.CriteriaQueryImpl.interpret(CriteriaQueryImpl.java:312)<br> at org.hibernate.jpa.criteria.compile.CriteriaCompiler.compile(CriteriaCompiler.java:147)<br> at org.hibernate.jpa.spi.AbstractEntityManagerImpl.createQuery(AbstractEntityManagerImpl.java:736)<br> at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)<br> at java.lang.reflect.Method.invoke(Method.java:498)</p>
<p class="cye-lm-tag"><em>Update: I removed the irrelevant part of this stack trace – Petri</em></p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-1465660"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">July 7, 2016, 11:42</span></div><div class="comment_text" id="comment-body-1465660"><p class="cye-lm-tag">Hi,</p>
<p class="cye-lm-tag">That looks really weird (I have never seen this problem myself). What Hibernate version are you using?</p>
</div> </div></li></ul></li><li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1498448"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">wenhao</span>  <span class="comment_date cye-lm-tag">October 24, 2016, 10:57</span></div><div class="comment_text" id="comment-body-1498448"><p class="cye-lm-tag">I prefer to <a href="https://github.com/wenhao/jpa-spec" rel="nofollow">https://github.com/wenhao/jpa-spec</a></p>
<p class="cye-lm-tag">public Page findAll(SearchRequest request) {<br> Specification specification = new Specifications()<br> .eq(StringUtils.isNotBlank(request.getName()), “name”, request.getName())<br> .gt(Objects.nonNull(request.getAge()), “age”, 18)<br> .between(“birthday”, new Range(new Date(), new Date()))<br> .like(“nickName”, “%og%”, “%me”)<br> .build();</p>
<p class="cye-lm-tag"> return personRepository.findAll(specification, new PageRequest(0, 15));<br> }</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-1498531"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">October 24, 2016, 22:20</span></div><div class="comment_text" id="comment-body-1498531"><p class="cye-lm-tag">Hi,</p>
<p class="cye-lm-tag">That looks pretty slick! Do you have any plans to add support for  JPA static metamodel classes?</p>
</div> </div></li></ul></li></ul></div> </section>
<br><hr>

<h2>10 Creating Database Queries With Querydsl</h2>
<div class="post_content" itemprop="articleBody"><p class="cye-lm-tag">The previous part of this tutorial described how we can <a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-part-four-jpa-criteria-queries/">create dynamic database queries with the JPA Criteria API</a>. Although it is easy to create simple criteria queries, the JPA Criteria API has one major flaw:</p>
<p class="cye-lm-tag"><strong>It is very hard to implement complex queries and even harder to read them.</strong></p>
<p class="cye-lm-tag">This blog post describes how we can solve these problems by using Querydsl. We will also implement a search function that has two requirements:</p>
<ul><li>It must return todo entries whose title or description contains the given search term.</li><li>The search must be case-insensitive.</li></ul><p class="cye-lm-tag">Let’s start by getting the required dependencies.</p>
<div class="note"> <strong>Additional Reading:</strong><p class="cye-lm-tag"></p>
<p class="cye-lm-tag">If you are not familiar with Spring Data JPA, <strong>you should read</strong> the following blog posts before you continue reading this blog post:</p>
<ul><li><a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-introduction/">Spring Data JPA Tutorial: Introduction</a> provides a quick introduction to Spring Data JPA and gives an overview of the Spring Data repository interfaces.</li><li><a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-getting-the-required-dependencies/">Spring Data JPA Tutorial: Getting the Required Dependencies</a> describes how you can get the required dependencies.</li><li><a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-part-one-configuration/">Spring Data JPA Tutorial: Configuration</a> describes how you can configure the persistence layer of a Spring application that uses Spring Data JPA.</li></ul></div><h2>Getting the Required Dependencies</h2><p class="cye-lm-tag">Before we can use Querydsl with Spring Data JPA, we have to add the Querydsl JPA module into our classpath. We can do this by adding the following dependency declaration into the <em>dependencies</em> section of our <em>pom.xml</em> file:</p>
<div><div id="highlighter_790384" class="syntaxhighlighter  xml"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="xml plain">&lt;</code><code class="xml keyword">dependency</code><code class="xml plain">&gt;</code></div><div class="line number2 index1 alt1"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">groupId</code><code class="xml plain">&gt;com.mysema.querydsl&lt;/</code><code class="xml keyword">groupId</code><code class="xml plain">&gt;</code></div><div class="line number3 index2 alt2"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">artifactId</code><code class="xml plain">&gt;querydsl-jpa&lt;/</code><code class="xml keyword">artifactId</code><code class="xml plain">&gt;</code></div><div class="line number4 index3 alt1"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">version</code><code class="xml plain">&gt;3.4.3&lt;/</code><code class="xml keyword">version</code><code class="xml plain">&gt;</code></div><div class="line number5 index4 alt2"><code class="xml plain">&lt;/</code><code class="xml keyword">dependency</code><code class="xml plain">&gt;</code></div></div></td></tr></tbody></table></div></div><p class="cye-lm-tag">After we have added the Querydsl JPA dependency into our <em>pom.xml</em> file, we have to ensure that Maven creates the Querydsl query types when we compile our project.</p>
<p class="cye-lm-tag"></p>
<h2>Creating the Querydsl Query Types</h2><p class="cye-lm-tag">Querydsl query types are classes that:</p>
<ul><li>Describe the structure of our domain model classes such as entities and <em>@Embeddable</em> classes.</li><li>Provide us a way to create the conditions of our database queries.</li></ul><p class="cye-lm-tag">We can create these classes automatically by using the <a href="https://github.com/querydsl/apt-maven-plugin" target="_blank">Maven APT Plugin</a>. We can configure the Maven APT Plugin by following these steps:</p>
<ol><li>Add the Maven APT Plugin (version 1.1.3) declaration to the <em>plugins</em> section of the <em>pom.xml</em> file.</li><li>Configure the dependencies of this plugin and add the <em>querydsl-apt</em> dependency (version 3.4.3) to the plugin’s <em>dependencies</em> section.</li><li>Create an execution that invokes the plugin’s <em>process</em> goal when our project is compiled.</li><li>Ensure that the Querydsl query types are created to the <em>target/generated-sources/apt</em> directory.</li><li>Ensure that the plugin runs only the <em>com.mysema.query.apt.jpa.JPAAnnotationProcessor</em>. This annotation processor scans our entities and embeddable classes, and creates the Querydsl query types.</li></ol><p class="cye-lm-tag">The configuration of the Maven APT plugin looks as follows:</p>
<div><div id="highlighter_260936" class="syntaxhighlighter  xml"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div class="line number23 index22 alt2">23</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="xml plain">&lt;</code><code class="xml keyword">plugin</code><code class="xml plain">&gt;</code></div><div class="line number2 index1 alt1"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">groupId</code><code class="xml plain">&gt;com.mysema.maven&lt;/</code><code class="xml keyword">groupId</code><code class="xml plain">&gt;</code></div><div class="line number3 index2 alt2"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">artifactId</code><code class="xml plain">&gt;apt-maven-plugin&lt;/</code><code class="xml keyword">artifactId</code><code class="xml plain">&gt;</code></div><div class="line number4 index3 alt1"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">version</code><code class="xml plain">&gt;1.1.3&lt;/</code><code class="xml keyword">version</code><code class="xml plain">&gt;</code></div><div class="line number5 index4 alt2"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">executions</code><code class="xml plain">&gt;</code></div><div class="line number6 index5 alt1"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">execution</code><code class="xml plain">&gt;</code></div><div class="line number7 index6 alt2"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">goals</code><code class="xml plain">&gt;</code></div><div class="line number8 index7 alt1"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">goal</code><code class="xml plain">&gt;process&lt;/</code><code class="xml keyword">goal</code><code class="xml plain">&gt;</code></div><div class="line number9 index8 alt2"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;/</code><code class="xml keyword">goals</code><code class="xml plain">&gt;</code></div><div class="line number10 index9 alt1"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">configuration</code><code class="xml plain">&gt;</code></div><div class="line number11 index10 alt2"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">outputDirectory</code><code class="xml plain">&gt;target/generated-sources/apt&lt;/</code><code class="xml keyword">outputDirectory</code><code class="xml plain">&gt;</code></div><div class="line number12 index11 alt1"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">processor</code><code class="xml plain">&gt;com.mysema.query.apt.jpa.JPAAnnotationProcessor&lt;/</code><code class="xml keyword">processor</code><code class="xml plain">&gt;</code></div><div class="line number13 index12 alt2"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;/</code><code class="xml keyword">configuration</code><code class="xml plain">&gt;</code></div><div class="line number14 index13 alt1"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;/</code><code class="xml keyword">execution</code><code class="xml plain">&gt;</code></div><div class="line number15 index14 alt2"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;/</code><code class="xml keyword">executions</code><code class="xml plain">&gt;</code></div><div class="line number16 index15 alt1"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">dependencies</code><code class="xml plain">&gt;</code></div><div class="line number17 index16 alt2"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">dependency</code><code class="xml plain">&gt;</code></div><div class="line number18 index17 alt1"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">groupId</code><code class="xml plain">&gt;com.mysema.querydsl&lt;/</code><code class="xml keyword">groupId</code><code class="xml plain">&gt;</code></div><div class="line number19 index18 alt2"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">artifactId</code><code class="xml plain">&gt;querydsl-apt&lt;/</code><code class="xml keyword">artifactId</code><code class="xml plain">&gt;</code></div><div class="line number20 index19 alt1"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">version</code><code class="xml plain">&gt;3.4.3&lt;/</code><code class="xml keyword">version</code><code class="xml plain">&gt;</code></div><div class="line number21 index20 alt2"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;/</code><code class="xml keyword">dependency</code><code class="xml plain">&gt;</code></div><div class="line number22 index21 alt1"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;/</code><code class="xml keyword">dependencies</code><code class="xml plain">&gt;</code></div><div class="line number23 index22 alt2"><code class="xml plain">&lt;/</code><code class="xml keyword">plugin</code><code class="xml plain">&gt;</code></div></div></td></tr></tbody></table></div></div><div class="note"> <strong>Additional Reading:</strong><p class="cye-lm-tag"></p>
<ul><li><a href="http://www.querydsl.com/static/querydsl/3.4.3/reference/html_single/#d0e123" target="_blank">Querydsl Reference Documentation: 2.1.1 Maven Integration</a></li><li><a href="https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html" target="_blank">Introduction to the Maven Build Lifecycle</a></li><li><a href="http://www.querydsl.com/static/querydsl/3.4.3/apidocs/com/mysema/query/apt/jpa/JPAAnnotationProcessor.html" target="_blank">The Javadoc of the <em>JPAAnnotationProcessor</em> class</a></li></ul></div><p class="cye-lm-tag">When we compile our project, the invoked annotation processor creates the Querydsl query types to the <em>target/generated-sources/apt</em> directory. Because our domain model has only one entity, the annotation processor creates only one class called <em>QTodo</em>. The source code of the <em>QTodo</em> class looks as follows:</p>
<div><div id="highlighter_467281" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div class="line number23 index22 alt2">23</div><div class="line number24 index23 alt1">24</div><div class="line number25 index24 alt2">25</div><div class="line number26 index25 alt1">26</div><div class="line number27 index26 alt2">27</div><div class="line number28 index27 alt1">28</div><div class="line number29 index28 alt2">29</div><div class="line number30 index29 alt1">30</div><div class="line number31 index30 alt2">31</div><div class="line number32 index31 alt1">32</div><div class="line number33 index32 alt2">33</div><div class="line number34 index33 alt1">34</div><div class="line number35 index34 alt2">35</div><div class="line number36 index35 alt1">36</div><div class="line number37 index36 alt2">37</div><div class="line number38 index37 alt1">38</div><div class="line number39 index38 alt2">39</div><div class="line number40 index39 alt1">40</div><div class="line number41 index40 alt2">41</div><div class="line number42 index41 alt1">42</div><div class="line number43 index42 alt2">43</div><div class="line number44 index43 alt1">44</div><div class="line number45 index44 alt2">45</div><div class="line number46 index45 alt1">46</div><div class="line number47 index46 alt2">47</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">package</code> <code class="java plain">net.petrikainulainen.springdata.jpa.todo;</code></div><div class="line number2 index1 alt1">&nbsp;</div><div class="line number3 index2 alt2"><code class="java keyword">import</code> <code class="java keyword">static</code> <code class="java plain">com.mysema.query.types.PathMetadataFactory.*;</code></div><div class="line number4 index3 alt1">&nbsp;</div><div class="line number5 index4 alt2"><code class="java keyword">import</code> <code class="java plain">com.mysema.query.types.path.*;</code></div><div class="line number6 index5 alt1">&nbsp;</div><div class="line number7 index6 alt2"><code class="java keyword">import</code> <code class="java plain">com.mysema.query.types.PathMetadata;</code></div><div class="line number8 index7 alt1"><code class="java keyword">import</code> <code class="java plain">javax.annotation.Generated;</code></div><div class="line number9 index8 alt2"><code class="java keyword">import</code> <code class="java plain">com.mysema.query.types.Path;</code></div><div class="line number10 index9 alt1">&nbsp;</div><div class="line number11 index10 alt2">&nbsp;</div><div class="line number12 index11 alt1"><code class="java color1">@Generated</code><code class="java plain">(</code><code class="java string">"com.mysema.query.codegen.EntitySerializer"</code><code class="java plain">)</code></div><div class="line number13 index12 alt2"><code class="java keyword">public</code> <code class="java keyword">class</code> <code class="java plain">QTodo </code><code class="java keyword">extends</code> <code class="java plain">EntityPathBase&lt;Todo&gt; {</code></div><div class="line number14 index13 alt1">&nbsp;</div><div class="line number15 index14 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java keyword">static</code> <code class="java keyword">final</code> <code class="java keyword">long</code> <code class="java plain">serialVersionUID = -797939782L;</code></div><div class="line number16 index15 alt1">&nbsp;</div><div class="line number17 index16 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java keyword">static</code> <code class="java keyword">final</code> <code class="java plain">QTodo todo = </code><code class="java keyword">new</code> <code class="java plain">QTodo(</code><code class="java string">"todo"</code><code class="java plain">);</code></div><div class="line number18 index17 alt1">&nbsp;</div><div class="line number19 index18 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java keyword">final</code> <code class="java plain">StringPath createdByUser = createString(</code><code class="java string">"createdByUser"</code><code class="java plain">);</code></div><div class="line number20 index19 alt1">&nbsp;</div><div class="line number21 index20 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java keyword">final</code> <code class="java plain">DateTimePath&lt;java.time.ZonedDateTime&gt; creationTime = createDateTime(</code><code class="java string">"creationTime"</code><code class="java plain">, java.time.ZonedDateTime.</code><code class="java keyword">class</code><code class="java plain">);</code></div><div class="line number22 index21 alt1">&nbsp;</div><div class="line number23 index22 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java keyword">final</code> <code class="java plain">StringPath description = createString(</code><code class="java string">"description"</code><code class="java plain">);</code></div><div class="line number24 index23 alt1">&nbsp;</div><div class="line number25 index24 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java keyword">final</code> <code class="java plain">NumberPath&lt;Long&gt; id = createNumber(</code><code class="java string">"id"</code><code class="java plain">, Long.</code><code class="java keyword">class</code><code class="java plain">);</code></div><div class="line number26 index25 alt1">&nbsp;</div><div class="line number27 index26 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java keyword">final</code> <code class="java plain">DateTimePath&lt;java.time.ZonedDateTime&gt; modificationTime = createDateTime(</code><code class="java string">"modificationTime"</code><code class="java plain">, java.time.ZonedDateTime.</code><code class="java keyword">class</code><code class="java plain">);</code></div><div class="line number28 index27 alt1">&nbsp;</div><div class="line number29 index28 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java keyword">final</code> <code class="java plain">StringPath modifiedByUser = createString(</code><code class="java string">"modifiedByUser"</code><code class="java plain">);</code></div><div class="line number30 index29 alt1">&nbsp;</div><div class="line number31 index30 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java keyword">final</code> <code class="java plain">StringPath title = createString(</code><code class="java string">"title"</code><code class="java plain">);</code></div><div class="line number32 index31 alt1">&nbsp;</div><div class="line number33 index32 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java keyword">final</code> <code class="java plain">NumberPath&lt;Long&gt; version = createNumber(</code><code class="java string">"version"</code><code class="java plain">, Long.</code><code class="java keyword">class</code><code class="java plain">);</code></div><div class="line number34 index33 alt1">&nbsp;</div><div class="line number35 index34 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java plain">QTodo(String variable) {</code></div><div class="line number36 index35 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">super</code><code class="java plain">(Todo.</code><code class="java keyword">class</code><code class="java plain">, forVariable(variable));</code></div><div class="line number37 index36 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number38 index37 alt1">&nbsp;</div><div class="line number39 index38 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java plain">QTodo(Path&lt;Todo&gt; path) {</code></div><div class="line number40 index39 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">super</code><code class="java plain">(path.getType(), path.getMetadata());</code></div><div class="line number41 index40 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number42 index41 alt1">&nbsp;</div><div class="line number43 index42 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java plain">QTodo(PathMetadata&lt;?&gt; metadata) {</code></div><div class="line number44 index43 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">super</code><code class="java plain">(Todo.</code><code class="java keyword">class</code><code class="java plain">, metadata);</code></div><div class="line number45 index44 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number46 index45 alt1">&nbsp;</div><div class="line number47 index46 alt2"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><div class="note">Every Querydsl query type is generated to the same package than the corresponding entity.</div><p class="cye-lm-tag">Let’s move on and find out how we can create database queries with Querydsl.</p>
<h2>Creating Database Queries With Querydsl</h2><p class="cye-lm-tag">We can create database queries with Querydsl by following these steps:</p>
<ol><li>Modify the repository interface to support queries that use Querydsl.</li><li>Specify the conditions of the invoked database query.</li><li>Invoke the database query.</li></ol><p class="cye-lm-tag">Let’s get started.</p>
<h3>Modifying the Repository Interface</h3><p class="cye-lm-tag">The <em>QueryDslPredicateExecutor&lt;T&gt;</em> interface declares the methods that can be used to invoke database queries that use Querydsl. This interface has one type parameter <em>T</em> that describes the type of the queried entity.</p>
<p class="cye-lm-tag">In other words, if we need to modify our repository interface to support database queries that use Querydsl, we have to follow these steps:</p>
<ol><li>Extend the <em>QueryDslPredicateExecutor&lt;T&gt;</em> interface.</li><li>Set the type of the queried entity.</li></ol><p class="cye-lm-tag"><strong>Example:</strong><br> The only Spring Data JPA repository of our example application (<em>TodoRepository</em>) manages <em>Todo</em> objects. After we have modified this repository to support Querydsl, its source code looks as follows:</p>
<div><div id="highlighter_484987" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1 highlighted">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.querydsl.QueryDslPredicateExecutor;</code></div><div class="line number2 index1 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.repository.Repository;</code></div><div class="line number3 index2 alt2">&nbsp;</div><div class="line number4 index3 alt1 highlighted"><code class="java keyword">interface</code> <code class="java plain">TodoRepository </code><code class="java keyword">extends</code> <code class="java plain">Repository&lt;Todo, Long&gt;, QueryDslPredicateExecutor&lt;Todo&gt; {</code></div><div class="line number5 index4 alt2">&nbsp;</div><div class="line number6 index5 alt1"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><p class="cye-lm-tag">After we have extended the <em>QueryDslPredicateExecutor&lt;T&gt;</em> interface, the classes that use our repository interface get access to the following methods:</p>
<ul><li>The <em>long count(Predicate predicate)</em> method returns the number of objects that fulfil the conditions specified by the <em>Predicate</em> object given as a method parameter.</li><li>The <em>boolean exists(Predicate predicate)</em> method checks if there are objects that fulfil the conditions specified by the <em>Predicate</em> object given as a method parameters. If such objects are found, this method returns <em>true</em>. Otherwise this method returns <em>false</em>.</li><li>The <em>Iterable&lt;T&gt; findAll(Predicate predicate)</em> returns objects that fulfil the conditions specified by the <em>Predicate</em> object given as a method parameter.</li><li>The <em>T findOne(Predicate predicate)</em> method returns an object that fulfils the conditions specified by the <em>Predicate</em> object given as a method parameter. If no object is found, this method returns <em>null</em>.</li></ul><div class="note"> The <em>QueryDslPredicateExecutor&lt;T&gt;</em> interface declares also other methods that are used to sort and paginate objects that fulfil the conditions specified by the <em>Predicate</em> object. We will talk more about these methods when we learn to <a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-part-six-sorting/">sort</a> and <a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-part-seven-pagination/">paginate</a> our query results.<p class="cye-lm-tag"></p>
<p class="cye-lm-tag"><strong>Additional Reading:</strong></p>
<ul><li><a href="http://docs.spring.io/spring-data/commons/docs/current/api/org/springframework/data/querydsl/QueryDslPredicateExecutor.html" target="_blank">The Javadoc of the <em>QueryDslPredicateExecutor&lt;T&gt;</em> interface</a></li></ul></div><p class="cye-lm-tag">Let’s find out how we can specify the conditions of the invoked database query.</p>
<h3>Specifying the Conditions of the Invoked Database Query</h3><p class="cye-lm-tag">We can specify the conditions of the invoked database query by using the generated Querydsl query types. To be more specific, we have to follow these steps:</p>
<ol><li>Get a reference to the query object that describes the queried entity.</li><li>Create the <em>Predicate</em> object that specifies the conditions of the invoked database query.</li></ol><p class="cye-lm-tag"><strong>First</strong>, we can get a reference to the query object that describes the queried entity by following these steps:</p>
<ol><li>Locate the query type that describes the queried entity.</li><li>Get the reference from a <em>static</em> field.</li></ol><p class="cye-lm-tag">If we need to query <em>Todo</em> objects, we can the required reference from the <em>todo</em> field of the <em>QTodo</em> class. The relevant part of the <em>QTodo</em> class looks follows:</p>
<div><div id="highlighter_600172" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2 highlighted">3</div><div class="line number4 index3 alt1">4</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">public</code> <code class="java keyword">class</code> <code class="java plain">QTodo </code><code class="java keyword">extends</code> <code class="java plain">EntityPathBase&lt;Todo&gt; {</code></div><div class="line number2 index1 alt1">&nbsp;</div><div class="line number3 index2 alt2 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java keyword">static</code> <code class="java keyword">final</code> <code class="java plain">QTodo todo = </code><code class="java keyword">new</code> <code class="java plain">QTodo(</code><code class="java string">"todo"</code><code class="java plain">);</code></div><div class="line number4 index3 alt1"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><p class="cye-lm-tag">The source code of our query generation code looks as follows:</p>
<div><div id="highlighter_812752" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java plain">QTodo todo = QTodo.todo;</code></div></div></td></tr></tbody></table></div></div><p class="cye-lm-tag"><strong>Second</strong>, We have to create the <em>Predicate</em> object that specifies the conditions of the invoked database query.</p>
<p class="cye-lm-tag">We can create a condition that limits the values of a single field by following these steps:</p>
<ol><li>Select the target field of the condition.</li><li>Specify the condition.</li></ol><p class="cye-lm-tag">If we want to create a <em>Predicate</em> object that returns <em>Todo</em> objects whose title is ‘Foo’, we can create the <em>Predicate</em> object by using the following code:</p>
<div><div id="highlighter_89393" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java plain">Predicate titleIs = QTodo.todo.title.eq(</code><code class="java string">"Foo"</code><code class="java plain">);</code></div></div></td></tr></tbody></table></div></div><p class="cye-lm-tag">We can also combine multiple <em>Predicate</em> objects by using the <a href="http://www.querydsl.com/static/querydsl/3.4.3/apidocs/com/mysema/query/types/expr/BooleanExpression.html" target="_blank"><em>BooleanExpression</em></a> class. The following examples demonstrates how we can use that class:</p>
<p class="cye-lm-tag"><strong>Example 1:</strong><br> If we want to select todo entries whose title is ‘Foo’ and description is ‘Bar’, we can create the <em>Predicate</em> object by using the following code:</p>
<div><div id="highlighter_567012" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java plain">Predicate titleAndDescriptionAre = QTodo.todo.title.eq(</code><code class="java string">"Foo"</code><code class="java plain">)</code></div><div class="line number2 index1 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">.and(QTodo.todo.description.eq(</code><code class="java string">"Bar"</code><code class="java plain">));</code></div></div></td></tr></tbody></table></div></div><p class="cye-lm-tag"><strong>Example 2:</strong><br> If we want select todo entries whose title is ‘Foo’ or ‘Bar’, we can create the <em>Predicate</em> object by using the following code:</p>
<div><div id="highlighter_116693" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java plain">Predicate titleIs = QTodo.todo.title.eq(</code><code class="java string">"Foo"</code><code class="java plain">)</code></div><div class="line number2 index1 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">.or(QTodo.todo.title.eq(</code><code class="java string">"Bar"</code><code class="java plain">));</code></div></div></td></tr></tbody></table></div></div><p class="cye-lm-tag"><strong>Example 3:</strong><br> If we want to select todo entries whose title is ‘Foo’ and description is not ‘Bar’, we can create the <em>Predicate</em> object by using the following code:</p>
<div><div id="highlighter_462777" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java plain">Predicate titleIsAndDescriptionIsNot = QTodo.todo.title.eq(</code><code class="java string">"Foo"</code><code class="java plain">)</code></div><div class="line number2 index1 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">.and(QTodo.todo.description.eq(</code><code class="java string">"Bar"</code><code class="java plain">).not());</code></div></div></td></tr></tbody></table></div></div><div class="note"> The package <a href="http://www.querydsl.com/static/querydsl/3.4.3/apidocs/com/mysema/query/types/expr/package-summary.html" target="_blank"><em>com.mysema.query.types.expr</em></a> contains the different expressions that you can use when you are creating conditions of your database query.<p class="cye-lm-tag"></p>
<p class="cye-lm-tag"><strong>Additional Reading:</strong></p>
<ul><li><a href="http://www.querydsl.com/static/querydsl/3.4.3/reference/html_single/#d0e202" target="_blank">Querydsl Reference Documentation: 2.1.5 Using query types</a></li><li><a href="http://www.querydsl.com/static/querydsl/3.4.3/apidocs/com/mysema/query/types/expr/BooleanExpression.html" target="_blank">The Javadoc of the <em>BooleanExpression</em> class</a></li><li><a href="http://www.querydsl.com/static/querydsl/3.4.3/apidocs/com/mysema/query/types/Predicate.html" target="_blank">The Javadoc of the <em>Predicate</em> interface</a></li><li><a href="http://www.querydsl.com/static/querydsl/3.4.3/apidocs/com/mysema/query/types/expr/package-summary.html" target="_blank">The package summary of the <em>com.mysema.query.types.expr</em> package</a></li></ul></div><p class="cye-lm-tag">The obvious next question is:</p>
<p class="cye-lm-tag">Where should we create these <em>Predicate</em> objects?</p>
<p class="cye-lm-tag">I argue that we should create these objects by using predicate builder classes because this way we will put our query generation logic into one place. In other words, we don’t litter the source code of our service classes (or other components) with the query generation logic.</p>
<p class="cye-lm-tag"><strong>Example:</strong></p>
<p class="cye-lm-tag">We can create a predicate builder class by following these steps:</p>
<ol><li>Create a <em>final TodoPredicates</em> class. The name of this class isn’t important, but I like to use the naming convention: <em>[The name of the queried entity class]Predicates</em>.</li><li>Add a private constructor the created class. This ensures that no one can instantiate our predicate builder class.</li><li>Add static predicate builder methods to this class. In our case, we will add only one predicate builder method (<em>hasTitle(String title)</em>) to this class and implement it by returning a new <em>Predicate</em> object.</li></ol><p class="cye-lm-tag">The source code of the <em>TodoPredicates</em> class looks as follows:</p>
<div><div id="highlighter_490024" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">import</code> <code class="java plain">com.mysema.query.types.Predicate;</code></div><div class="line number2 index1 alt1">&nbsp;</div><div class="line number3 index2 alt2"><code class="java keyword">final</code> <code class="java keyword">class</code> <code class="java plain">TodoPredicates {</code></div><div class="line number4 index3 alt1">&nbsp;</div><div class="line number5 index4 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java plain">TodoPredicates() {}</code></div><div class="line number6 index5 alt1">&nbsp;</div><div class="line number7 index6 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">static</code> <code class="java plain">Predicate hasTitle(String title) {</code></div><div class="line number8 index7 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">return</code> <code class="java plain">QTodo.todo.title.eq(title);</code></div><div class="line number9 index8 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number10 index9 alt1"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><p class="cye-lm-tag">Let’s move on and find out how we can invoke the created database query.</p>
<h3>Invoking the Created Database Query</h3><p class="cye-lm-tag">After we have specified the conditions of the invoked query by creating a new <em>Predicate</em> object, we can invoke the database query by using the methods provided by the <em>QueryDslPredicateExecutor&lt;T&gt;</em> interface.</p>
<p class="cye-lm-tag">The following examples demonstrates how we can invoke different database queries:</p>
<p class="cye-lm-tag"><strong>Example 1:</strong><br> If we want to get the number of <em>Todo</em> objects that have the title ‘foo’, we have to create and invoke our database query by using this code:</p>
<div><div id="highlighter_833054" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java plain">Predicate pred = TodoPredicates.hasTitle(</code><code class="java string">"foo"</code><code class="java plain">);</code></div><div class="line number2 index1 alt1"><code class="java keyword">long</code> <code class="java plain">count = repository.count(pred);</code></div></div></td></tr></tbody></table></div></div><p class="cye-lm-tag"><strong>Example 2:</strong><br> If we want to know if the database contains <em>Todo</em> objects that have the title ‘foo’, we have to create and invoke our database query by using this code:</p>
<div><div id="highlighter_575510" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java plain">Predicate pred = TodoPredicates.hasTitle(</code><code class="java string">"foo"</code><code class="java plain">);</code></div><div class="line number2 index1 alt1"><code class="java keyword">boolean</code> <code class="java plain">exists = repository.exists(pred);</code></div></div></td></tr></tbody></table></div></div><p class="cye-lm-tag"><strong>Example 3:</strong><br> If we want to the get all <em>Todo</em> objects that have the title ‘foo’, we have to create and invoke our database query by using this code:</p>
<div><div id="highlighter_299631" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java plain">Predicate pred = TodoPredicates.hasTitle(</code><code class="java string">"foo"</code><code class="java plain">);</code></div><div class="line number2 index1 alt1"><code class="java plain">Iterable&lt;Todo&gt; todoEntries = repository.findAll(pred);</code></div></div></td></tr></tbody></table></div></div><p class="cye-lm-tag"><strong>Example 4:</strong><br> If we want to get the <em>Todo</em> object whose title is ‘foo’, we have to create and invoke our database query by using this code:</p>
<div><div id="highlighter_895352" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java plain">Predicate pred = TodoPredicates.hasTitle(</code><code class="java string">"foo"</code><code class="java plain">);</code></div><div class="line number2 index1 alt1"><code class="java plain">Todo todoEntry = repository.findOne(pred);</code></div></div></td></tr></tbody></table></div></div><p class="cye-lm-tag">Let’s move on and find out how we can implement the search function.</p>
<h2>Implementing the Search Function</h2><p class="cye-lm-tag">We can implement our search function by following these steps:</p>
<ol><li>Modify our repository interface to support Querydsl.</li><li>Create the predicate builder class that creates <em>Predicate</em> objects.</li><li>Implement the service method that uses our predicate builder class and invokes the created database query by using our repository interface.</li></ol><p class="cye-lm-tag">Let’s start by modifying our repository interface.</p>
<h3>Modifying Our Repository Interface</h3><p class="cye-lm-tag">We can make the necessary modifications to our repository interface by following these steps:</p>
<ol><li>Extend the <em>QueryDslPredicateExecutor&lt;T&gt;</em> interface.</li><li>The type of the queried entity to <em>Todo</em>.</li></ol><p class="cye-lm-tag">The source code of our repository interface looks as follows:</p>
<div><div id="highlighter_445737" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2 highlighted">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.querydsl.QueryDslPredicateExecutor;</code></div><div class="line number2 index1 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.repository.Repository;</code></div><div class="line number3 index2 alt2">&nbsp;</div><div class="line number4 index3 alt1"><code class="java keyword">import</code> <code class="java plain">java.util.List;</code></div><div class="line number5 index4 alt2"><code class="java keyword">import</code> <code class="java plain">java.util.Optional;</code></div><div class="line number6 index5 alt1">&nbsp;</div><div class="line number7 index6 alt2 highlighted"><code class="java keyword">interface</code> <code class="java plain">TodoRepository </code><code class="java keyword">extends</code> <code class="java plain">Repository&lt;Todo, Long&gt;, QueryDslPredicateExecutor&lt;Todo&gt; {</code></div><div class="line number8 index7 alt1">&nbsp;</div><div class="line number9 index8 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">void</code> <code class="java plain">delete(Todo deleted);</code></div><div class="line number10 index9 alt1">&nbsp;</div><div class="line number11 index10 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">List&lt;Todo&gt; findAll();</code></div><div class="line number12 index11 alt1">&nbsp;</div><div class="line number13 index12 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">Optional&lt;Todo&gt; findOne(Long id);</code></div><div class="line number14 index13 alt1">&nbsp;</div><div class="line number15 index14 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">void</code> <code class="java plain">flush();</code></div><div class="line number16 index15 alt1">&nbsp;</div><div class="line number17 index16 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">Todo save(Todo persisted);</code></div><div class="line number18 index17 alt1"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><p class="cye-lm-tag">Let’s move on and create the predicate builder class.</p>
<h3>Creating the Predicate Builder Class</h3><p class="cye-lm-tag">We can create the predicate builder class that fulfils the requirements of our search function by following these steps:</p>
<ol><li>Create the predicate builder class and ensure that it cannot be instantiated.</li><li>Add a static <em>titleOrDescriptionContainsIgnoreCase(String searchTerm)</em> method to the predicate builder class and set its return type to <em>Predicate</em>.</li><li>Implement the <em>titleOrDescriptionContainsIgnoreCase(String searchTerm)</em> method by following these rules:<ul><li>If the <em>searchTerm</em> is <em>null</em> or empty, return a <em>Predicate</em> object that returns all todo entries.</li><li>If the <em>searchTerm</em> is not <em>null</em>, return a <em>Predicate</em> object that ignores case and returns todo entries whose title or description contains the given search term.</li></ul></li></ol><p class="cye-lm-tag">The source code of our predicate builder class looks as follows:</p>
<div><div id="highlighter_610727" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">import</code> <code class="java plain">com.mysema.query.types.Predicate;</code></div><div class="line number2 index1 alt1">&nbsp;</div><div class="line number3 index2 alt2"><code class="java keyword">final</code> <code class="java keyword">class</code> <code class="java plain">TodoPredicates {</code></div><div class="line number4 index3 alt1">&nbsp;</div><div class="line number5 index4 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java plain">TodoPredicates() {}</code></div><div class="line number6 index5 alt1">&nbsp;</div><div class="line number7 index6 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">static</code> <code class="java plain">Predicate titleOrDescriptionContainsIgnoreCase(String searchTerm) {</code></div><div class="line number8 index7 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">if</code> <code class="java plain">(searchTerm == </code><code class="java keyword">null</code> <code class="java plain">|| searchTerm.isEmpty()) {</code></div><div class="line number9 index8 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">return</code> <code class="java plain">QTodo.todo.isNotNull();</code></div><div class="line number10 index9 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number11 index10 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">else</code> <code class="java plain">{</code></div><div class="line number12 index11 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">return</code> <code class="java plain">QTodo.todo.description.containsIgnoreCase(searchTerm)</code></div><div class="line number13 index12 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">.or(QTodo.todo.title.containsIgnoreCase(searchTerm));</code></div><div class="line number14 index13 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number15 index14 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number16 index15 alt1"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><p class="cye-lm-tag">Let’s find out how we can implement the service method that creates and invokes our database query.</p>
<h3>Implementing the Service Method</h3><p class="cye-lm-tag">The first thing that we have to do is to create an interface called <em>TodoSearchService</em>. This interface declares one method called <em>findBySearchTerm()</em>. This method takes the search term as a method parameter and returns a list of <em>TodoDTO</em> objects. The source code of the <em>TodoSearchService</em> interface looks as follows:</p>
<div><div id="highlighter_572601" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">import</code> <code class="java plain">java.util.List;</code></div><div class="line number2 index1 alt1">&nbsp;</div><div class="line number3 index2 alt2"><code class="java keyword">public</code> <code class="java keyword">interface</code> <code class="java plain">TodoSearchService {</code></div><div class="line number4 index3 alt1">&nbsp;</div><div class="line number5 index4 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">List&lt;TodoDTO&gt; findBySearchTerm(String searchTerm);</code></div><div class="line number6 index5 alt1"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><p class="cye-lm-tag">We can implement this interface by following these steps:</p>
<ol><li>Create a <em>RepositoryTodoSearchService</em> class, implement the <em>TodoSearchService</em> interface, and annotate the class with the <em>@Service</em> annotation.</li><li>Add a private <em>final TodoRepository</em> field to the created class.</li><li>Create a constructor that injects a <em>TodoRepository</em> object to the created field by using constructor injection.</li><li>Override the <em>findBySearchTerm()</em> method. Annotate the method with the <em>@Transactional</em> annotation and ensure that the transaction is read-only.</li><li>Implement the <em>findBySearchTerm()</em> method by following these steps:<ol><li>Get the <em>Predicate</em> object by invoking the <em>static titleOrDescriptionContainsIgnoreCase()</em> method of the <em>TodoPredicates</em> class.</li><li>Get the todo entries whose title or description contains the given search term by invoking the <em>findAll()</em> method of the <em>QueryDslPredicateExecutor&lt;T&gt;</em> interface. Pass the created <em>Predicate</em> object as a method parameter.</li><li>Transform the <em>Iterable&lt;Todo&gt;</em> object into a list of <em>TodoDTO</em> objects and return the created list.</li></ol></li></ol><p class="cye-lm-tag">The source code of our service class looks as follows:</p>
<div><div id="highlighter_182457" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div class="line number23 index22 alt2">23</div><div class="line number24 index23 alt1">24</div><div class="line number25 index24 alt2">25</div><div class="line number26 index25 alt1">26</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.beans.factory.annotation.Autowired;</code></div><div class="line number2 index1 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.stereotype.Service;</code></div><div class="line number3 index2 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.transaction.annotation.Transactional;</code></div><div class="line number4 index3 alt1">&nbsp;</div><div class="line number5 index4 alt2"><code class="java keyword">import</code> <code class="java plain">java.util.List;</code></div><div class="line number6 index5 alt1">&nbsp;</div><div class="line number7 index6 alt2"><code class="java keyword">import</code> <code class="java keyword">static</code> <code class="java plain">net.petrikainulainen.springdata.jpa.todo.TodoPredicates.titleOrDescriptionContainsIgnoreCase;</code></div><div class="line number8 index7 alt1">&nbsp;</div><div class="line number9 index8 alt2"><code class="java color1">@Service</code></div><div class="line number10 index9 alt1"><code class="java keyword">final</code> <code class="java keyword">class</code> <code class="java plain">RepositoryTodoSearchService </code><code class="java keyword">implements</code> <code class="java plain">TodoSearchService {</code></div><div class="line number11 index10 alt2">&nbsp;</div><div class="line number12 index11 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java keyword">final</code> <code class="java plain">TodoRepository repository;</code></div><div class="line number13 index12 alt2">&nbsp;</div><div class="line number14 index13 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Autowired</code></div><div class="line number15 index14 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java plain">RepositoryTodoSearchService(TodoRepository repository) {</code></div><div class="line number16 index15 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">this</code><code class="java plain">.repository = repository;</code></div><div class="line number17 index16 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number18 index17 alt1">&nbsp;</div><div class="line number19 index18 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Transactional</code><code class="java plain">(readOnly = </code><code class="java keyword">true</code><code class="java plain">)</code></div><div class="line number20 index19 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Override</code></div><div class="line number21 index20 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java plain">List&lt;TodoDTO&gt; findBySearchTerm(String searchTerm) {</code></div><div class="line number22 index21 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">Predicate searchPred = titleOrDescriptionContainsIgnoreCase(searchTerm);</code></div><div class="line number23 index22 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">Iterable&lt;Todo&gt; searchResults = repository.findAll(searchPred);</code></div><div class="line number24 index23 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">return</code> <code class="java plain">TodoMapper.mapEntitiesIntoDTOs(searchResults);</code></div><div class="line number25 index24 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number26 index25 alt1"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><div class="note"> <strong>Additional Reading:</strong><p class="cye-lm-tag"></p>
<ul><li><a href="http://docs.spring.io/spring/docs/4.1.x/javadoc-api/org/springframework/beans/factory/annotation/Autowired.html" target="_blank">The Javadoc of the <em>@Autowired</em> annotation</a></li><li><a href="http://docs.spring.io/spring/docs/4.1.x/javadoc-api/org/springframework/stereotype/Service.html" target="_blank">The Javadoc of the <em>@Service</em> annotation</a></li><li><a href="http://docs.spring.io/spring/docs/4.1.x/spring-framework-reference/htmlsingle/#transaction-declarative-annotations" target="_blank">Spring Framework Reference Manual: 12.5.6 Using @Transactional</a></li><li><a href="http://docs.spring.io/spring/docs/4.1.x/javadoc-api/org/springframework/transaction/annotation/Transactional.html" target="_blank">The Javadoc of the <em>@Transactional</em> annotation</a></li></ul></div><p class="cye-lm-tag">Let’s move on and find out when we should create our database queries by using Querydsl.</p>
<h2>When Should We Use Querydsl?</h2><p class="cye-lm-tag">The previous parts of this tutorial described how we can create static database queries by using <a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-creating-database-queries-from-method-names/">the method names of our query methods</a>, <a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-creating-database-queries-with-the-query-annotation/">the <em>@Query</em> annotation</a>, and <a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-creating-database-queries-with-named-queries/">named queries</a>. Although these query generation methods are very useful, and they help us to get rid of boilerplate code, we cannot use them if we have to create dynamic queries (i.e queries that don’t have a constant number of conditions).</p>
<p class="cye-lm-tag">If we have to create dynamic database queries, we can use either <a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-part-four-jpa-criteria-queries/">the JPA Criteria API</a> or Querydsl. The pros of using Querydsl are:</p>
<ul><li>It supports dynamic queries.</li><li>It has a very clean API. In other words, it is easy to create complex queries with Querydsl, and the query generation code is easy to read.</li><li>It also supports JDO, Lucene, and MongoDB.</li></ul><p class="cye-lm-tag">The only “problem” of Querydsl is that it isn’t the standard way to create dynamic queries with the Java Persistence API. In my opinion this isn’t a real problem, but if you can use only standard APIs, it is definitely a problem to you.</p>
<p class="cye-lm-tag">If you read my <a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-part-four-jpa-criteria-queries/">the previous part of this tutorial</a>, you probably remember that we should use the JPA Criteria API only when we don’t have a choice. That is why my opinion shouldn’t be a surprise to you.</p>
<p class="cye-lm-tag"><strong>If we need to create dynamic database queries, we should use Querydsl</strong>.</p>
<p class="cye-lm-tag">Let’s summarize what we learned from this blog post.<br></p>
<p class="cye-lm-tag"></p>
<p class="cye-lm-tag"></p>
<h2>Summary</h2><p class="cye-lm-tag">This blog post has taught us five things:</p>
<ul><li>We can create Querydsl query types by using the Maven APT Plugin.</li><li>If we want to invoke queries that use Querydsl, our repository interface must extend the <em>QueryDslPredicateExecutor&lt;T&gt;</em> interface.</li><li>We can specify the conditions of our database queries by creating new <em>Predicate</em> objects.</li><li>We should create our <em>Predicate</em> objects by using predicate builder classes.</li><li>If we have to create dynamic database queries, we should use Querydsl.</li></ul><p class="cye-lm-tag">The next part of this tutorial describes how we can <a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-part-six-sorting/">sort the query results of our database queries</a>.</p>
<p class="cye-lm-tag"><strong>P.S.</strong> You can <a href="https://github.com/pkainulainen/spring-data-jpa-examples/tree/master/querydsl" target="_blank">get the example application of this blog post from Github</a>.</p>
<div class="note">If you want to learn how to use Spring Data JPA, you should read my <a href="/spring-data-jpa-tutorial/">Spring Data JPA tutorial</a>.</div> <span id="tve_leads_end_content" style="display: block; visibility: hidden; border: 1px solid transparent;" class="cye-lm-tag"></span>
</div>

</div>




</div>
</div>
</div>
</div>
</div>
</div><p style="line-height: 24px;" data-unit="px" class="tve_p_center cye-lm-tag"><span class="tve_custom_font_size cye-lm-tag" style="font-size: 16px;">I will never rent, sell, or share your email address.<br></span></p>

</div></div></div></div></div></div></div>
<section id="comments"><div class="comments_intro"><span class="num_comments cye-lm-tag">91</span> comments… <a href="#commentform" rel="nofollow">add one</a></div><ul class="comment_list"><li class="comment even thread-even depth-1" id="comment-4829"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">neo</span>  <span class="comment_date cye-lm-tag">April 14, 2012, 15:41</span></div><div class="comment_text" id="comment-body-4829"><p class="cye-lm-tag">hi,petri,why in code didn’t find QPerson class</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-4830"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">April 14, 2012, 15:56</span></div><div class="comment_text" id="comment-body-4830"><p class="cye-lm-tag">Hi Neo,</p>
<p class="cye-lm-tag">Did you remember to generate the Querydsl query type and add the <em>target/generated-sources</em> directory as a source directory for your project?</p>
</div> </div></li><li class="comment even depth-2" id="comment-8586"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Manolosoft</span>  <span class="comment_date cye-lm-tag">September 18, 2012, 17:34</span></div><div class="comment_text" id="comment-body-8586"><p class="cye-lm-tag">Hi neo, in the root project right click, in the maven option click in maven-generate-sources after process go to the folder target/generated-sources/your package, in this folder you find the class QPerson.java…</p>
<p class="cye-lm-tag">Greetings.</p>
<p class="cye-lm-tag">Petri, Thanks you, is the best of the best in tutorials, You helped me a lot.</p>
<p class="cye-lm-tag">PD: Sorry for my bad english… Im from Colombia… xD</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-3" id="comment-8685"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">September 20, 2012, 22:36</span></div><div class="comment_text" id="comment-body-8685"><p class="cye-lm-tag">Manolosoft,</p>
<p class="cye-lm-tag">Great to hear that I could help you out.</p>
</div> </div></li></ul></li></ul></li><li class="comment even thread-odd thread-alt depth-1" id="comment-4836"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">neo</span>  <span class="comment_date cye-lm-tag">April 15, 2012, 06:56</span></div><div class="comment_text" id="comment-body-4836"><p class="cye-lm-tag">Yes, got it, but don’t understand why. Thank you very much！</p>
</div> </div></li><li class="comment odd alt thread-even depth-1" id="comment-4903"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Tiago</span>  <span class="comment_date cye-lm-tag">April 19, 2012, 12:30</span></div><div class="comment_text" id="comment-body-4903"><p class="cye-lm-tag">Hi Petry, nice tutorial!</p>
<p class="cye-lm-tag">I have one question concerning this aproach:</p>
<p class="cye-lm-tag">Suppose  I declared some methods that will be parsed into queries by Spring Data JPA in the interface that extends both JpaRepository and QueryDslPredicateExecutor (PersonRepository). “findByFirstname” for instance.</p>
<p class="cye-lm-tag">In the service class (RepositoryPersonService) I implement the complex queries using QueryDsl.</p>
<p class="cye-lm-tag">In the classes that use the service I want to call the simple methods (parsed by JPA) and also the complex methods (QueryDsl). For that I’d have to inject both repositories in my classes? One of type “PersonRepository” and other of type “PersonService”.</p>
<p class="cye-lm-tag">I don’t think it’s a good idea to have two injections that has the same objective. A solution would be copping every relevant method signature to the “PersonService” interface, and implement then at the “RepositoryPersonService” class, making use of an injected “PersonRepository”. But it seems to me too much ctrl+c ctrl+v. Do you know a better approch?</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-4911"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">April 19, 2012, 19:31</span></div><div class="comment_text" id="comment-body-4911"><p class="cye-lm-tag">Hi Tiago,</p>
<p class="cye-lm-tag">Thank you for your comment. You made a good point concerning the problems related to a situation where the <em>PersonRepository</em> is injected to the <em>RepositoryPersonService</em> class. It is indeed true that some methods of the <em>PersonRepositoryService</em> class are just delegating the method call forward to person repository.</p>
<p class="cye-lm-tag">This sucks, but I still prefer this approach because this way I can use the service layer as transaction boundary and provide a decent separation between the controller “logic” and the application “logic”.</p>
<p class="cye-lm-tag">Adam Biem has some interesting ideas concerning the architecture of Java EE applications. He actually provides a solution for the problem you mentioned. Unfortunately, you cannot use his solution if you are using Spring MVC. If you are interested, you should definitely check out his blog: <a href="http://www.adam-bien.com/roller/abien/" rel="nofollow">http://www.adam-bien.com/roller/abien/</a></p>
</div> </div></li></ul></li><li class="comment odd alt thread-odd thread-alt depth-1" id="comment-10197"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Thomas Struntz</span>  <span class="comment_date cye-lm-tag">October 26, 2012, 09:32</span></div><div class="comment_text" id="comment-body-10197"><p class="cye-lm-tag">Hi Petri,<br> thanks for your tutorials. I have a question regarding querying  with querydsl. Is it possible to create a predicate that contains (multiple) Joins?</p>
<p class="cye-lm-tag">I have a many-to-many relationship with a link table. That link table contains an additional field and is also represented by a Entity class.</p>
<p class="cye-lm-tag">I can create findBy methods that span tables. However my actual comparison is not just String or numbers but an actual function call, eg in SQL: where myFunction(:param1, :param2) = true.</p>
<p class="cye-lm-tag">Is his possible?</p>
</div> </div><ul class="children"><li class="comment even depth-2" id="comment-10235"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag"><a href="http://blog.mysema.com" rel="external nofollow" class="url">Timo Westkämper</a></span>  <span class="comment_date cye-lm-tag">October 26, 2012, 22:04</span></div><div class="comment_text" id="comment-body-10235"><p class="cye-lm-tag">Hi Thomas.</p>
<p class="cye-lm-tag">Is your question how to create multiple joins in Spring Data with Querydsl or directly in a Querydsl query?</p>
<p class="cye-lm-tag">You can also use custom expressions in Querydsl, but you need to register your functions in some way on the JPA provider level.</p>
<p class="cye-lm-tag">Br,<br> Timo Westkämper</p>
</div> </div></li></ul></li><li class="comment odd alt thread-even depth-1" id="comment-11041"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Eric B</span>  <span class="comment_date cye-lm-tag">November 14, 2012, 18:09</span></div><div class="comment_text" id="comment-body-11041"><p class="cye-lm-tag">Hi Petri,</p>
<p class="cye-lm-tag">I’m using Eclipse 3.7 with m2e 1.1.  I tried loading your code and it complains that the maven-apt-plugin lifecycle is not covered.  I know I can manually generate the sources using maven generate-sources everytime something changes, but that is a bit of a nuissance.  I tried instaling the m2e-querydsl plugin (<a href="https://github.com/ilx/m2e-querydsl" rel="nofollow">https://github.com/ilx/m2e-querydsl</a>) and that removed the error in the pom, but did nothing to generate the sources in the outputDirectory nor add the generated-sources to the Deployment Assembly.</p>
<p class="cye-lm-tag">Are you aware of a functional m2e connector that works with querydsl?  I am hoping that you encountered some while writing your blog and/or book.</p>
<p class="cye-lm-tag">Thanks,</p>
<p class="cye-lm-tag">Eric</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-11043"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">November 14, 2012, 19:31</span></div><div class="comment_text" id="comment-body-11043"><p class="cye-lm-tag">Hi Eric,</p>
<p class="cye-lm-tag">Unfortunately the only advice that I was able to found was to generate the Querydsl query types by running the <em>mvn generate-sources</em> command at command prompt every time when something changes. This is indeed really irritating for Eclipse users and this is one drawback of Querydsl (at least at the moment).</p>
</div> </div></li></ul></li><li class="comment odd alt thread-odd thread-alt depth-1" id="comment-11088"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Eric B</span>  <span class="comment_date cye-lm-tag">November 15, 2012, 19:12</span></div><div class="comment_text" id="comment-body-11088"><p class="cye-lm-tag">Hi Petri,</p>
<p class="cye-lm-tag">After a lot of stuggling and searching, I did find the following.  Upgrading to m2e 1.2 and using the following in my pom.xml worked to compile your code.  Also enables auto-regen of querydsl classes:</p>
<pre><code>
&lt;plugin&gt;
    &lt;!-- Requires mysema m2e plugin (http://ilx.github.com/m2e-querydsl/repository/0.0.5/) --&gt;
    &lt;groupId&gt;com.mysema.maven&lt;/groupId&gt;
    &lt;artifactId&gt;maven-apt-plugin&lt;/artifactId&gt;
    &lt;version&gt;1.0.4&lt;/version&gt;
    &lt;executions&gt;
        &lt;execution&gt;
            &lt;goals&gt;
                &lt;goal&gt;process&lt;/goal&gt;
            &lt;/goals&gt;
            &lt;configuration&gt;
                &lt;logOnlyOnError&gt;true&lt;/logOnlyOnError&gt;
                &lt;outputDirectory&gt;target/generated-sources/apt&lt;/outputDirectory&gt;
                &lt;processor&gt;com.mysema.query.apt.jpa.JPAAnnotationProcessor&lt;/processor&gt;
            &lt;/configuration&gt;
        &lt;/execution&gt;
    &lt;/executions&gt;
    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.mysema.querydsl&lt;/groupId&gt;
            &lt;artifactId&gt;querydsl-apt&lt;/artifactId&gt;
            &lt;version&gt;${querydsl.version}&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.mysema.querydsl&lt;/groupId&gt;
            &lt;artifactId&gt;querydsl-jpa&lt;/artifactId&gt;
            &lt;classifier&gt;apt&lt;/classifier&gt;
            &lt;version&gt;${querydsl.version}&lt;/version&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;
&lt;/plugin&gt;
&lt;!-- right now this seems needed --&gt;
&lt;plugin&gt;
    &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;
    &lt;artifactId&gt;build-helper-maven-plugin&lt;/artifactId&gt;
    &lt;executions&gt;
        &lt;execution&gt;
            &lt;id&gt;add-source&lt;/id&gt;
            &lt;phase&gt;generate-sources&lt;/phase&gt;
            &lt;goals&gt;
                &lt;goal&gt;add-source&lt;/goal&gt;
            &lt;/goals&gt;
            &lt;configuration&gt;
                &lt;sources&gt;
                    &lt;source&gt;target/generated-sources/apt&lt;/source&gt;
                &lt;/sources&gt;
            &lt;/configuration&gt;
        &lt;/execution&gt;
    &lt;/executions&gt;
&lt;/plugin&gt;
</code>
</pre><p class="cye-lm-tag">This also required the m2e connector for build-helper-maven-plugin which was easily found via the m2e catalog.</p>
<p class="cye-lm-tag">According to the querydsl plugin site (<a href="https://github.com/mysema/maven-apt-plugin/issues/9" rel="nofollow">https://github.com/mysema/maven-apt-plugin/issues/9</a>), the apt plugin is supposed to work without the querydsl connector/plugin, but I have been unable to get it to work without that plugin.</p>
<p class="cye-lm-tag">Hopefully this info can help you or someone else in the future.</p>
<p class="cye-lm-tag">Thanks,</p>
<p class="cye-lm-tag">Eric</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-11090"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">November 15, 2012, 19:34</span></div><div class="comment_text" id="comment-body-11090"><p class="cye-lm-tag">Wow, that is valuable information. Thank you so much for posting it to my blog.</p>
</div> </div></li></ul></li><li class="comment odd alt thread-even depth-1" id="comment-11510"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">hari</span>  <span class="comment_date cye-lm-tag">November 25, 2012, 18:07</span></div><div class="comment_text" id="comment-body-11510"><p class="cye-lm-tag">Hi Petri,<br> Can you suggest on how to construct query by joining 2 tables?<br> Thanks,<br> Hari</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-11605"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">November 26, 2012, 20:09</span></div><div class="comment_text" id="comment-body-11605"><p class="cye-lm-tag">Hi Hari,</p>
<p class="cye-lm-tag">If you are using the Spring Data JPA, you have two options:</p>
<p class="cye-lm-tag">If your repository interface extends the <em>QueryDslPredicateExecutor</em> interface, you can use the <em>any()</em> method with collection path. More details about this approach is found from <a href="http://stackoverflow.com/questions/13534313/how-to-join-when-building-predicates-but-without-having-a-jpaquery-instance" rel="nofollow">this Stack Overflow question</a>.</p>
<p class="cye-lm-tag">If you have created a custom repository implementation that extends the <a href="http://static.springsource.org/spring-data/data-jpa/docs/1.2.0.RELEASE/api/org/springframework/data/jpa/repository/support/QueryDslRepositorySupport.html" rel="nofollow"><em>QueryDslRepositorySupport</em></a> class (<a href="http://blog.42.nl/articles/spring-data-with-querydsl-repositories-made-easy" rel="nofollow">details here</a>), you can use the <em>from()</em> method to get a <em>JPQLQuery</em> object and use the <a href="http://www.querydsl.com/static/querydsl/2.7.0/apidocs/com/mysema/query/jpa/JPQLQuery.html" rel="nofollow">methods provided by it</a>.</p>
<p class="cye-lm-tag">I hope that this answered to your question.</p>
</div> </div></li></ul></li><li class="comment odd alt thread-odd thread-alt depth-1" id="comment-11609"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">SGB</span>  <span class="comment_date cye-lm-tag">November 26, 2012, 22:42</span></div><div class="comment_text" id="comment-body-11609"><p class="cye-lm-tag">Petri,<br> Very nice tutorials.<br> As someone just starting to use SpringData and QueryDSL, this tutorial is very helpful.</p>
<p class="cye-lm-tag">That said, in my Service impl class, this is not working for me:<br> <code><br> Iterable persons = personRepository.findAll(lastNameIsLike(searchTerm));<br> </code><br> Instead, I am  having to do this:<br> <code><br> Iterable persons = personRepository.findAll(PersonPredicates.lastNameIsLike(searchTerm));<br> </code><br> to be able to use the static method lastNameIsLike in the PersonPredicates class.</p>
<p class="cye-lm-tag">Not sure why – I must be making some mistake…</p>
<p class="cye-lm-tag">Thanks again.</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-11610"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">November 26, 2012, 22:48</span></div><div class="comment_text" id="comment-body-11610"><p class="cye-lm-tag">Hi,</p>
<p class="cye-lm-tag">Good to hear that this blog entry was useful to you. About your problem, are you having a compilation error or a runtime error?</p>
</div> </div></li><li class="comment odd alt depth-2" id="comment-1169999"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Pedro Dusso</span>  <span class="comment_date cye-lm-tag">March 30, 2015, 22:15</span></div><div class="comment_text" id="comment-body-1169999"><p class="cye-lm-tag">I think what you are missing is the static import, like this:</p>
<p class="cye-lm-tag">import static org.your.app.predicates.PersonPredicates.nameIsLike;</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-3" id="comment-1170014"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">March 30, 2015, 22:29</span></div><div class="comment_text" id="comment-body-1170014"><p class="cye-lm-tag">That is true. I remove the imports which import classes (or static methods) that are found from the example application and described in the blog post. The reason for this is that if I wouldn’t do it, the code listings would become way too long. I leave the other imports as is since I have noticed that they are useful to the reader.</p>
</div> </div><ul class="children"><li class="comment odd alt depth-4" id="comment-1521584"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Vicky</span>  <span class="comment_date cye-lm-tag">February 11, 2017, 20:54</span></div><div class="comment_text" id="comment-body-1521584"><p class="cye-lm-tag">Spring data rest with Query DSL support is very good but wanted to change the default behavior of Predicate boolean builder and “logic” to “or” when 2 or more arguments are passed with request. Please let me know, how to get this done.</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-5" id="comment-1522299"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">February 15, 2017, 18:26</span></div><div class="comment_text" id="comment-body-1522299"><p class="cye-lm-tag">Hi,</p>
<p class="cye-lm-tag">Unfortunately I don’t know how you can modify the behavior of the predicate builder. One option is that you simply get its source code, make the required changes, and use your version of the predicate builder. However, if you want to update your Spring Data JPA version, you might have to rewrite your custom predicate builder component (if it has been changed by the Spring Data team).</p>
</div></div></li></ul></li></ul></li></ul></li></ul></li><li class="comment odd alt thread-even depth-1" id="comment-12694"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Sean Creedon</span>  <span class="comment_date cye-lm-tag">December 31, 2012, 19:44</span></div><div class="comment_text" id="comment-body-12694"><p class="cye-lm-tag">Hi,</p>
<p class="cye-lm-tag">good tutorial,<br> I am looking at passing multiple search terms (multiple predicates) which is fine within java as I can use BooleanExpression and or etc… methods to build a Predicate to pass to a findAll method.</p>
<p class="cye-lm-tag">Where I’m failing to find info on is how to express this on a REST URL. I don’t want to use findByXxxxAndYyyy as the number of properties is large enough to create a lot of these methods.</p>
<p class="cye-lm-tag">Any advice or pointers much appreciated</p>
<p class="cye-lm-tag">Regards<br> Sean</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-12721"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">January 1, 2013, 20:20</span></div><div class="comment_text" id="comment-body-12721"><p class="cye-lm-tag">Are you using using Spring Data REST or a “normal” Spring MVC controller?</p>
<p class="cye-lm-tag">If you are using a “normal” Spring MVC controller, you can create a request handler method that handles GET requests and specify the search conditions as optional request attributes (Use <em>@RequestParam</em> annotation and set the value of its <em>required</em> property to false.</p>
<p class="cye-lm-tag">I have not personally tried Spring Data REST but I took a quick look at it and it seems that it can be used to provide automatic CRUD operations as a REST API. It has a support for search as well, but it seems that you have to create your queries by using the query generation by method name strategy. Like you said, this means that you have to create multiple repository methods if you have many optional search parameters. If this is not an option, you can always create a “normal” Spring MVC controller and use the technique described above.</p>
</div> </div><ul class="children"><li class="comment odd alt depth-3" id="comment-12746"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Sean Creedon</span>  <span class="comment_date cye-lm-tag">January 2, 2013, 23:27</span></div><div class="comment_text" id="comment-body-12746"><p class="cye-lm-tag">Thanks<br> I’m using spring MVC controller at the moment, but I’m trying to ensure my URL is such that it aligns with spring data rest, so I’m trying to see what other people think. I’ll do a bit more digging on Spring data REST and post back here.</p>
</div> </div></li></ul></li><li class="comment even depth-2" id="comment-1170005"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Pedro Dusso</span>  <span class="comment_date cye-lm-tag">March 30, 2015, 22:21</span></div><div class="comment_text" id="comment-body-1170005"><p class="cye-lm-tag">If I may ask, how to you pass multiple predicates in the java?</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-3" id="comment-1170021"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">March 30, 2015, 22:35</span></div><div class="comment_text" id="comment-body-1170021"><p class="cye-lm-tag">Hi,</p>
<p class="cye-lm-tag">You can combine them by using the methods of the <a href="http://www.querydsl.com/static/querydsl/3.6.2/apidocs/com/mysema/query/types/expr/BooleanExpression.html" target="_blank" rel="nofollow">BooleanExpression</a> class. <a href="http://spring.io/blog/2011/04/26/advanced-spring-data-jpa-specifications-and-querydsl/" target="_blank" rel="nofollow">This blog post provides an example of this</a> (search for string: ‘Querydsl’).</p>
</div> </div></li></ul></li></ul></li><li class="comment even thread-odd thread-alt depth-1" id="comment-150941"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Stephane</span>  <span class="comment_date cye-lm-tag">April 25, 2013, 15:20</span></div><div class="comment_text" id="comment-body-150941"><p class="cye-lm-tag">Hi Petri,</p>
<p class="cye-lm-tag">I’m now using your book, it’s quite an easy ride into Spring Data JPA, thank you for that.</p>
<p class="cye-lm-tag">My only road block for now is that I have a multi modules Maven project and that maven-apt-plugin configuration gives an error with a basedir not being found.</p>
<p class="cye-lm-tag">[ERROR] execute error<br> java.lang.IllegalStateException: basedir /home/stephane/dev/java/projects/learnintouch/src/main/java does not exist</p>
<p class="cye-lm-tag">I guess there may be a property to set in there, specifying the input directory.</p>
<p class="cye-lm-tag">But I can’t yet find that information.</p>
<p class="cye-lm-tag">Kind Regards,</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-151622"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">April 25, 2013, 20:50</span></div><div class="comment_text" id="comment-body-151622"><p class="cye-lm-tag">Hi Stephane,</p>
<p class="cye-lm-tag">Have you configured the Maven APT plugin in the POM file of the module which contains your domain model classes?</p>
</div> </div></li></ul></li><li class="comment even thread-even depth-1" id="comment-199551"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Francois</span>  <span class="comment_date cye-lm-tag">May 10, 2013, 13:00</span></div><div class="comment_text" id="comment-body-199551"><p class="cye-lm-tag">Hello Petri,</p>
<p class="cye-lm-tag">Being new to Spring (and to java in general), I really enjoy your tutorials, this really help me get forward and learn new skills directly useable!<br> I tired this one and I had at first tried the querydsl version 3.1.1, however I always got a nice stack:</p>
<p class="cye-lm-tag">java.lang.NoSuchMethodError: com.mysema.query.jpa.impl.JPAQuery.from([Lcom/mysema/query/types/EntityPath;)Lcom/mysema/query/jpa/JPQLQueryBase;<br> ….<br> downgrading querydsl to 2.3.2 did the trick.</p>
<p class="cye-lm-tag">I tried reading their documentation for v3.1.1, but I could not find anything that would point me into the correct direction?<br> What should be changed in the above example to have it work with querydsl 3.1.1?</p>
<p class="cye-lm-tag">Thanks a lot in advance ;)<br> Francois</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-199685"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">May 10, 2013, 13:24</span></div><div class="comment_text" id="comment-body-199685"><p class="cye-lm-tag">Hi Francois,</p>
<p class="cye-lm-tag">this sounds like compatibility problem between Spring Data and Querydsl. It seems that the API of the <code>JPAQuery</code> class has changed between Querydsl versions and Spring Data is still using the old API. I took a look at the POM files of <a href="http://repo1.maven.org/maven2/org/springframework/data/spring-data-commons/1.5.1.RELEASE/spring-data-commons-1.5.1.RELEASE.pom" target="_blank" rel="nofollow">spring-data-commons</a> and <a href="http://repo1.maven.org/maven2/org/springframework/data/spring-data-jpa/1.3.1.RELEASE/spring-data-jpa-1.3.1.RELEASE.pom" target="_blank" rel="nofollow">spring-data-jpa</a>, and I found out that Spring Data supports Querydsl version 2.8.0. However, <a href="https://jira.springsource.org/browse/DATAJPA-320" target="_blank" rel="nofollow">Querydsl 3.0.0 will be supported when Spring Data JPA 1.4 is released</a>.</p>
<p class="cye-lm-tag">I hope that this answered to your question.</p>
</div> </div></li></ul></li><li class="comment even thread-odd thread-alt depth-1" id="comment-265379"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Nitin</span>  <span class="comment_date cye-lm-tag">June 25, 2013, 16:32</span></div><div class="comment_text" id="comment-body-265379"><p class="cye-lm-tag">Hi,</p>
<p class="cye-lm-tag">Thanks for the great tutorial. Is there any chance I can get this to work without maven? I have all the relevant queryDSL jars in my classpath. How do I go about generating the QueryDSL code (QPerson etc.)?</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-265382"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">June 25, 2013, 16:42</span></div><div class="comment_text" id="comment-body-265382"><p class="cye-lm-tag">I have not personally used Querydsl without Maven but luckily the Querydsl reference manual has a <a href="http://www.querydsl.com/static/querydsl/3.2.0/reference/html/ch02.html#jpa_integration" target="_blank" rel="nofollow">section which talks about this</a>. It seems that Querydsl supports</p>
<ul><li><a href="http://www.querydsl.com/static/querydsl/3.2.0/reference/html/ch02.html#d0e147" target="_blank" rel="nofollow">Ant</a></li><li><a href="http://www.querydsl.com/static/querydsl/3.2.0/reference/html/ch02.html#d0e182" target="_blank" rel="nofollow">Hibernate XML configuration files</a></li><li><a href="http://www.querydsl.com/static/querydsl/3.2.0/reference/html/ch02.html#d0e123" target="_blank" rel="nofollow">Maven</a></li><li><a href="http://www.querydsl.com/static/querydsl/3.2.0/reference/html/ch02.html#d0e165" target="_blank" rel="nofollow">Roo</a></li></ul><p class="cye-lm-tag">I am not sure how helpful this answer is since I have no idea which build system you want to use. I hope that it gave you a push to the right direction.</p>
</div> </div></li></ul></li><li class="comment even thread-even depth-1" id="comment-275053"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Pietro Bonanno</span>  <span class="comment_date cye-lm-tag">September 28, 2013, 14:39</span></div><div class="comment_text" id="comment-body-275053"><p class="cye-lm-tag">Petri, thanks for these great tutorials!<br> Actually I’m finding hard to use Querydsl extensively. Apart of NullPointerExceptions with some predicate, which could be my fault with packages’ version, I had to switch to Jpql because it’s not possible to specify eager load of properties inside predicate. I should do an extra call after querying and this would be inefficient.<br> Are you having similar issues?</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-275206"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">September 29, 2013, 20:19</span></div><div class="comment_text" id="comment-body-275206"><p class="cye-lm-tag">Hi Pietro,</p>
<p class="cye-lm-tag">I haven’t personally experienced any NPEs but I have to admit that I haven’t used Querydsl for creating complicated queries. The project in which I work now uses criteria queries and I use them too because I want to keep the code base consistent.</p>
<p class="cye-lm-tag">I think that it might be a good idea to <a href="https://github.com/mysema/querydsl/issues" target="_blank" rel="nofollow">create a bug report to Github</a>.</p>
<p class="cye-lm-tag">Have you considered using <a href="http://www.querydsl.com/static/querydsl/3.2.3/reference/html/ch02.html#d0e263" target="_blank" rel="nofollow">joins</a> or <a href="http://www.querydsl.com/static/querydsl/3.2.3/reference/html/ch02.html#d0e366" target="_blank" rel="nofollow">subqueries</a> for fetching the required properties of an entity?</p>
</div> </div></li></ul></li><li class="comment even thread-odd thread-alt depth-1" id="comment-276245"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Pietro Bonanno</span>  <span class="comment_date cye-lm-tag">October 7, 2013, 18:36</span></div><div class="comment_text" id="comment-body-276245"><p class="cye-lm-tag">It seems the problem was already raised, and waiting for a “higher level” solution: <a href="http://forum.spring.io/forum/spring-projects/data/108202-custom-fetch-groups-with-spring-data-jpa-possible" rel="nofollow">http://forum.spring.io/forum/spring-projects/data/108202-custom-fetch-groups-with-spring-data-jpa-possible</a><br> I’ll explore the subquery solution, but it would involve a sub select, don’t know if suits my needs. Anyway, thanks for your suggestions.</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-276436"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">October 8, 2013, 17:23</span></div><div class="comment_text" id="comment-body-276436"><p class="cye-lm-tag">You are welcome.</p>
<p class="cye-lm-tag">JPA 2.1 adds support for both <a href="http://www.datanucleus.org/products/datanucleus/jpa/entity_graphs.html" target="_blank" rel="nofollow">named and unnamed entity graphs</a>. I assume that it is just a matter of time before Spring Data JPA supports these features as well.</p>
</div> </div></li></ul></li><li class="comment even thread-even depth-1" id="comment-278961"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Pietro Bonanno</span>  <span class="comment_date cye-lm-tag">October 15, 2013, 16:12</span></div><div class="comment_text" id="comment-body-278961"><p class="cye-lm-tag">Hi Petri, I found the reason for my NPE when building predicates…<br> Querydsl by default initializes only direct properties, and leaves to the user the choice to init nested ones.<br> So, by default, if QPerson person is your Query type, person.address.city throws an NPE.<br> Solutions are to annotate entities, but I preferred the “create on demand” alternative, which is explained here:<br> <a href="https://github.com/mysema/querydsl/issues/134" rel="nofollow">https://github.com/mysema/querydsl/issues/134</a></p>
<p class="cye-lm-tag">Shortly, adding</p>
<p class="cye-lm-tag">&lt;querydsl.entityAccessors&gt;true&lt;/querydsl.entityAccessors&gt;</p>
<p class="cye-lm-tag">to your Maven APT configuration, will replace direct fields with accessors (and will screw your existing code :P)</p>
<p class="cye-lm-tag">Bye</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-279592"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">October 20, 2013, 22:03</span></div><div class="comment_text" id="comment-body-279592"><p class="cye-lm-tag">Great! Thanks for dropping a note about the solution!</p>
</div> </div></li></ul></li><li class="comment even thread-odd thread-alt depth-1" id="comment-289288"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">S Atah Ahmed Khan</span>  <span class="comment_date cye-lm-tag">November 18, 2013, 10:13</span></div><div class="comment_text" id="comment-body-289288"><p class="cye-lm-tag">Hi Petri;</p>
<p class="cye-lm-tag">I want to write a join like ‘Select * from A a  left join B b on a.MEDIA_ID = b.ID’,<br> how to achieve this in Spring Data JPA.</p>
<p class="cye-lm-tag">Thanks in advance.</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-289753"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">November 19, 2013, 18:52</span></div><div class="comment_text" id="comment-body-289753"><p class="cye-lm-tag">If the A class has a field called b and you have mapped your domain model correctly, you can create the query by adding the following query method to your repository interface:</p>
<pre><code>
@Query("Select a From A a LEFT JOIN FETCH a.b")
public List&lt;A&gt; getA();
</code>
</pre></div> </div><ul class="children"><li class="comment even depth-3" id="comment-293050"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">S Atah Ahmed Khan</span>  <span class="comment_date cye-lm-tag">November 29, 2013, 09:42</span></div><div class="comment_text" id="comment-body-293050"><p class="cye-lm-tag">thanks Petri,<br> How to make association?</p>
<p class="cye-lm-tag">I have two table TableA and TableB. Table A has column media_Id which is the primary key of Table B. and Table B has ‘description’ for a particular media_Id.</p>
<p class="cye-lm-tag">Now i want to get the content of Table A with description added in the for every record. I don’ t know what i need to write in My entities class for association.<br> But when as kept</p>
<p class="cye-lm-tag">@OneToOne(targetEntity=B.class)<br> @JoinColumn(name=’media_Id’)<br> private B b;</p>
<p class="cye-lm-tag">I am getting all the content of Table B in findAll() query.</p>
<p class="cye-lm-tag">But what i want is only description column from table b not entire row of table B. Hope you understand…</p>
<p class="cye-lm-tag">Wating for your reply. Happy weekend….</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-4" id="comment-293227"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">November 29, 2013, 20:01</span></div><div class="comment_text" id="comment-body-293227"><p class="cye-lm-tag">I think that your best option is to return a DTO instead of an entity. This way you can select the fields which you want to return. Take a look at <a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-three-custom-queries-with-query-methods/#comment-291433" rel="nofollow">this comment made by Dominik Werner</a>. It should help you to get started.</p>
<p class="cye-lm-tag">If you have further questions about this, don’t hesitate to ask!</p>
</div> </div></li></ul></li></ul></li></ul></li><li class="comment even thread-even depth-1" id="comment-293215"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Marco</span>  <span class="comment_date cye-lm-tag">November 29, 2013, 18:17</span></div><div class="comment_text" id="comment-body-293215"><p class="cye-lm-tag">Hi Petri!</p>
<p class="cye-lm-tag">I have read your Spring Data book and I’ve used your implementation example in order to create some QueryDsl Predicates, using them by extending in my repositories QueryDslPredicateExecutor interface.</p>
<p class="cye-lm-tag">Now I’ve a little bit complicated situation. My EntityA has a ManyToMany relationship with EntityB</p>
<p class="cye-lm-tag">EntityA{<br> …<br> @ManyToMany<br> Set entitiesB;<br> }</p>
<p class="cye-lm-tag">EntityB{<br> String name;<br> }</p>
<p class="cye-lm-tag">I have to filter EntityA based on the fact that EntityA have almost one EntityB which contained name string I’m looking for. For example I want to see all EntityA which have almost one EntityB with name like ‘ISO’.</p>
<p class="cye-lm-tag">Here is my JPA query:<br> select eA from EntityA eA join eA.entitiesB eB where eB.name in (:names) group by eA</p>
<p class="cye-lm-tag">This query works, I dont know if it is very optimized.. but it works.</p>
<p class="cye-lm-tag">I cannot realize how can I translate this in a predicate, that is required by  findAll method in my repository.. I have create a JpaQuery object, but Jpa repositories want Predicates..</p>
<p class="cye-lm-tag">Thank you for any suggestion!</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-293239"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">November 29, 2013, 21:03</span></div><div class="comment_text" id="comment-body-293239"><p class="cye-lm-tag">Hi,</p>
<p class="cye-lm-tag">It would be useful to see the SQL query which is created from your JPQL query. Could you add it here? The reason why I am asking this is that I am wondering what column is used in the group by clause.</p>
<p class="cye-lm-tag">I haven’t tested this predicate builder class in any way but here is what I have so far:</p>
<pre><code>
public class EntityAPredicates {
    public static Predicate entityBNameIn(final Collection&lt;String&gt; names) {
        return QEntityA.entityA.entitiesB.any().name.in(names); 
    }
}
</code>
</pre></div> </div><ul class="children"><li class="comment even depth-3" id="comment-294181"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Marco</span>  <span class="comment_date cye-lm-tag">December 2, 2013, 08:22</span></div><div class="comment_text" id="comment-body-294181"><p class="cye-lm-tag">This is the query. I’ve not changed real name of entities this time..</p>
<p class="cye-lm-tag">So the real query is:</p>
<p class="cye-lm-tag">select n from Norma n join n.entiNormazione e where e.sigla in (:sigle) group by n</p>
<p class="cye-lm-tag">that gives:</p>
<p class="cye-lm-tag"> select<br> entinormaz0_.norma as norma6_1_,<br> entinormaz0_.enti_normazione as enti2_7_1_,<br> entenormaz1_.id as id2_0_,<br> entenormaz1_.created_by as created2_2_0_,<br> entenormaz1_.created_date as created3_2_0_,<br> entenormaz1_.last_modified_by as last4_2_0_,<br> entenormaz1_.last_modified_date as last5_2_0_,<br> entenormaz1_.version as version2_0_,<br> entenormaz1_.sigla as sigla2_0_<br> from<br> norma_enti_normazione entinormaz0_<br> inner join<br> ente_normazione entenormaz1_<br> on entinormaz0_.enti_normazione=entenormaz1_.id<br> where<br> entinormaz0_.norma=?<br> order by<br> entenormaz1_.sigla</p>
<p class="cye-lm-tag">Thanks for now, I’ll let you know if it is correct.</p>
<p class="cye-lm-tag">Thank you very much for your reply.<br> Marco</p>
</div> </div></li><li class="comment odd alt depth-3" id="comment-294183"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Marco</span>  <span class="comment_date cye-lm-tag">December 2, 2013, 08:31</span></div><div class="comment_text" id="comment-body-294183"><p class="cye-lm-tag">Thank you very much, it works!</p>
<p class="cye-lm-tag">I had not really thought about this solution.</p>
<p class="cye-lm-tag">now the generated query is:</p>
<p class="cye-lm-tag">select<br> norma0_.id as id6_,<br> norma0_.created_by as created2_6_,<br> norma0_.created_date as created3_6_,<br> norma0_.last_modified_by as last4_6_,<br> norma0_.last_modified_date as last5_6_,<br> norma0_.version as version6_,<br> norma0_.aggiornamento as aggiorna7_6_,<br> norma0_.anno as anno6_,<br> norma0_.descrizione as descrizi9_6_,<br> norma0_.numero as numero6_,<br> norma0_.titolo as titolo6_<br> from<br> norma norma0_<br> where<br> (<br> exists (<br> select<br> 1<br> from<br> ente_normazione entenormaz1_<br> where<br> (<br> entenormaz1_.id in (<br> select<br> entinormaz2_.enti_normazione<br> from<br> norma_enti_normazione entinormaz2_<br> where<br> norma0_.id=entinormaz2_.norma<br> )<br> )<br> and entenormaz1_.sigla=?<br> )<br> )<br> and (<br> exists (<br> select<br> 1<br> from<br> ente_normazione entenormaz3_<br> where<br> (<br> entenormaz3_.id in (<br> select<br> entinormaz4_.enti_normazione<br> from<br> norma_enti_normazione entinormaz4_<br> where<br> norma0_.id=entinormaz4_.norma<br> )<br> )<br> and entenormaz3_.sigla=?<br> )<br> )<br> order by<br> norma0_.numero asc limit ?</p>
</div> </div></li></ul></li></ul></li><li class="comment even thread-odd thread-alt depth-1" id="comment-445524"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">David</span>  <span class="comment_date cye-lm-tag">April 11, 2014, 23:25</span></div><div class="comment_text" id="comment-body-445524"><p class="cye-lm-tag">Thank you for the great tutorials you have provided, they really help clarify issues.  I like the way you use QueryDSL, but I wonder if you have tried to use it with Gradle?  As far as I can tell, based upon searching, it should work but haven’t actually seen a working implementation.</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-450943"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">April 13, 2014, 11:24</span></div><div class="comment_text" id="comment-body-450943"><p class="cye-lm-tag">Thank you for your kind words. I really appreciate them!</p>
<p class="cye-lm-tag">I haven’t tried Gradle yet. However, I managed to find <a href="http://stackoverflow.com/questions/6431026/generating-jpa2-metamodel-from-a-gradle-build-script" target="_blank" rel="nofollow">this Stack Overflow question</a> which might help you out.</p>
</div> </div></li></ul></li><li class="comment even thread-even depth-1" id="comment-459292"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Toub</span>  <span class="comment_date cye-lm-tag">April 15, 2014, 11:46</span></div><div class="comment_text" id="comment-body-459292"><p class="cye-lm-tag">Hi,</p>
<p class="cye-lm-tag">This link is broken: <a href="http://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-part-four-jpa-criteria-queries/" rel="nofollow">http://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-part-four-jpa-criteria-queries/</a></p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-459357"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">April 15, 2014, 12:02</span></div><div class="comment_text" id="comment-body-459357"><p class="cye-lm-tag">It seems to be working fine now. Perhaps it was a temporary problem.</p>
</div> </div></li></ul></li><li class="comment even thread-odd thread-alt depth-1" id="comment-591414"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">gaurav</span>  <span class="comment_date cye-lm-tag">May 13, 2014, 12:32</span></div><div class="comment_text" id="comment-body-591414"><p class="cye-lm-tag">Hello, I was going through your amazing tutorials to learn Spring Data JPA. However, I am stuck with one issue i.e. I see reference for a class “net.petrikainulainen.spring.datajpa.model.QPerson”. However, This class is no where to be found in the source code shared by you. Now this is giving the compile error in my eclipse.<br> Kindly let me know if I am missing something.</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-592718"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">May 13, 2014, 18:07</span></div><div class="comment_text" id="comment-body-592718"><p class="cye-lm-tag">That class is generated by the Maven APT plugin. Its <code>process</code> goal is invoked at the <code>generate-sources</code> Maven lifecycle phase. If you cannot get this work in Eclipse, you should try <a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-part-five-querydsl/#comment-11088" rel="nofollow">the configuration explained in this comment</a>.</p>
</div> </div></li></ul></li><li class="comment even thread-even depth-1" id="comment-665741"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag"><a href="http://overridecode.blogspot.com" rel="external nofollow" class="url">Gustavo</a></span>  <span class="comment_date cye-lm-tag">May 30, 2014, 22:13</span></div><div class="comment_text" id="comment-body-665741"><p class="cye-lm-tag">Thanks!!!  great post i have the problem with “NoSuchMethodError: com.mysema.query.jpa.JPQLQuery.from” but after change the QUERYDSL dependecy for the versión 2.3.2 my proyect works!</p>
<p class="cye-lm-tag"> com.mysema.querydsl<br> querydsl-apt<br> 2.3.2</p>
<p class="cye-lm-tag"> com.mysema.querydsl<br> querydsl-jpa<br> 2.3.2</p>
<p class="cye-lm-tag">greetings from chile!</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-673230"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">June 2, 2014, 21:00</span></div><div class="comment_text" id="comment-body-673230"><p class="cye-lm-tag">The example application of this blog post uses rather old versions of Spring Data JPA and Querydsl. You might want to update both dependencies to the latest versions (Spring Data JPA 1.6.0.RELEASE should support Querydsl 3.3.3).</p>
<p class="cye-lm-tag">Anyway, It is good to hear that you were able to solve your problem!</p>
</div> </div></li></ul></li><li class="comment even thread-odd thread-alt depth-1" id="comment-1133121"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Anders M</span>  <span class="comment_date cye-lm-tag">February 25, 2015, 16:42</span></div><div class="comment_text" id="comment-body-1133121"><p class="cye-lm-tag">Hey Petri, awesome guide, though I’m trying to combine different requirements, like isNumberLike and isAmountEnough.<br> I can’t seem to access get any of the “.any”, “.and” etc. methods</p>
<p class="cye-lm-tag">versions:<br> compile(‘com.mysema.querydsl:querydsl-core:3.6.1’)<br> compile(‘com.mysema.querydsl:querydsl-apt:3.6.1’)<br> compile(‘com.mysema.querydsl:querydsl-jpa:3.6.1’)<br> springBootVersion = ‘1.2.1.RELEASE’</p>
<p class="cye-lm-tag">Any idea, or would you like code example ?</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-1133220"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">February 25, 2015, 20:31</span></div><div class="comment_text" id="comment-body-1133220"><p class="cye-lm-tag">I found a couple of blog posts that describe how you can combine different conditions with Querydsl. These blog posts are:</p>
<ul><li><a href="http://spring.io/blog/2011/04/26/advanced-spring-data-jpa-specifications-and-querydsl/" target="_blank" rel="nofollow">Advanced Spring Data JPA: Specifications and Querydsl</a> (search for ‘Querydsl’)</li><li><a href="https://blog.42.nl/articles/spring-data-jpa-with-querydsl-repositories-made-easy/" target="_blank" rel="nofollow">Spring Data JPA with QueryDSL: Repositories made easy</a> (search for ‘Query DSL’)</li></ul><p class="cye-lm-tag">I hope that these blog posts help you to solve your problem. Also, if you can share your code with me, I can take a look at it.</p>
</div> </div><ul class="children"><li class="comment even depth-3" id="comment-1134631"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Anders M</span>  <span class="comment_date cye-lm-tag">February 27, 2015, 08:20</span></div><div class="comment_text" id="comment-body-1134631"><p class="cye-lm-tag">Thanks, just what I needed :-)</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-4" id="comment-1136799"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">March 1, 2015, 10:04</span></div><div class="comment_text" id="comment-body-1136799"><p class="cye-lm-tag">You are welcome!</p>
</div> </div></li></ul></li></ul></li></ul></li><li class="comment even thread-even depth-1" id="comment-1183321"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Hongli</span>  <span class="comment_date cye-lm-tag">April 18, 2015, 02:29</span></div><div class="comment_text" id="comment-body-1183321"><p class="cye-lm-tag">Hi Petri,</p>
<p class="cye-lm-tag">Just want to say thank you for your awesome write up.<br> It’s amazing to see your efforts to help every one out here.</p>
<p class="cye-lm-tag">I will keep reading your posts.</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-1183566"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">April 18, 2015, 10:20</span></div><div class="comment_text" id="comment-body-1183566"><p class="cye-lm-tag">Hi Hongli,</p>
<p class="cye-lm-tag">Thank you for your kind words. I really appreciate them.</p>
</div> </div></li></ul></li><li class="comment even thread-odd thread-alt depth-1" id="comment-1211682"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">noviceQueryDslUser</span>  <span class="comment_date cye-lm-tag">May 25, 2015, 07:17</span></div><div class="comment_text" id="comment-body-1211682"><p class="cye-lm-tag">Hi</p>
<p class="cye-lm-tag">I am using queryDsl for complex search queries in my application. I am new to querydsl. I have started with a simple code to fetch few rows from one single table(TableA – Person table) by passing the id.<br> But I have to find list of person(Count) with the same id in some other table(TableB).<br> Can you please help me in finding the count of the pId to be fetched from tableB.<br> I would like to know how to use join and also how to fetch count of rows using queryDSL.</p>
<p class="cye-lm-tag">Please let me know if more info needed.<br> Thanks in advance.</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-1212242"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">May 25, 2015, 22:21</span></div><div class="comment_text" id="comment-body-1212242"><p class="cye-lm-tag">Hi,</p>
<blockquote><p class="cye-lm-tag">I would like to know how to use join</p>
</blockquote><p class="cye-lm-tag">The <a href="http://www.querydsl.com/static/querydsl/3.3.2/reference/html/ch02.html#d0e268" target="_blank" rel="nofollow">Querydsl tutorial: 2.1.7 Using Joins </a> describes how you can create joins with Querydsl.</p>
<blockquote><p class="cye-lm-tag">How to fetch count of rows using queryDSL</p>
</blockquote><p class="cye-lm-tag">You can get the number of persons which match with the created Querydsl <code>Predicate</code> by invoking <a href="http://docs.spring.io/spring-data/commons/docs/current/api/org/springframework/data/querydsl/QueryDslPredicateExecutor.html#count-com.mysema.query.types.Predicate-" target="_blank" rel="nofollow">the <code>count()</code> method of the <code>QuerydslPredicateExecutor</code> interface</a> and passing your <code>Predicate</code> as a method parameter.</p>
<p class="cye-lm-tag">I hope that this answered to your questions. If you have any additional questions, don’t hesitate to ask them.</p>
</div> </div><ul class="children"><li class="comment even depth-3" id="comment-1213542"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">noviceQueryDslUser</span>  <span class="comment_date cye-lm-tag">May 27, 2015, 18:34</span></div><div class="comment_text" id="comment-body-1213542"><p class="cye-lm-tag">Thank you very much. Count method worked successfully in my application. However when I refer the suggested URL and tried to join tables , I get error. Can you please help on that.</p>
<p class="cye-lm-tag">I tried to debug and get this value fetched from DEBUG editor in Eclipse.</p>
<pre><code>
select tabB 
from TABLEB tabB 
&nbsp; inner join TABLE tabA on tabB.quotation_no = ?1 
</code>
</pre><p class="cye-lm-tag">But I pass the id as Long value(1234). I am not aware of why did it formed “?1”.</p>
<p class="cye-lm-tag">Code Snippet:</p>
<pre><code>
BooleanBuilder booleanBuilder = new BooleanBuilder();
if (pId != null) {
	booleanBuilder.or(tabB.pID.eq(qId));
	jpaQuery =  jpaQuery.from(tabB).join(tabA).on(booleanBuilder.getValue());
}
</code>
</pre></div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-4" id="comment-1214221"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">May 28, 2015, 21:03</span></div><div class="comment_text" id="comment-body-1214221"><p class="cye-lm-tag">Hi,</p>
<p class="cye-lm-tag">I am sorry that it took me some time to answer to your question. I have one question for you:</p>
<p class="cye-lm-tag">What error do you get? Also, if your application throws an exception, I would like to see the stacktrace.</p>
<p class="cye-lm-tag">Anyway, it seems that you are trying to join the <code>tabA</code> table by specifying a join condition which states that the value of the <code>quotation_no</code> column must be X. The problem is that</p>
<ol><li>The <code>quotation_no</code> column is found from the <code>tabB</code> table.</li><li>The join condition must specify a value that is found from a column of the <code>tabA</code> table.</li></ol><p class="cye-lm-tag">Check out <a href="http://stackoverflow.com/questions/28849713/querydsl-left-join-with-additional-conditions-in-on" target="_blank" rel="nofollow">this StackOverflow question</a>. <a href="http://stackoverflow.com/a/28853423/313554" target="_blank" rel="nofollow">This answer</a> describes how you can specify join conditions by using the <code>on()</code> method.</p>
<p class="cye-lm-tag">By the way, if you want to write the actual SQL statements to the log file of your application, you should take look at <a href="https://github.com/arthurblake/log4jdbc" target="_blank" rel="nofollow">log4jdbc</a>.</p>
</div> </div><ul class="children"><li class="comment even depth-5" id="comment-1217100"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">noviceQueryDslUser</span>  <span class="comment_date cye-lm-tag">June 2, 2015, 09:58</span></div><div class="comment_text" id="comment-body-1217100"><p class="cye-lm-tag">Thankyou so much answering and also providing added info. It helped a lot.</p>
</div></div></li><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-5" id="comment-1217128"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">June 2, 2015, 11:04</span></div><div class="comment_text" id="comment-body-1217128"><p class="cye-lm-tag">You are welcome! I am happy to hear that I could help you.</p>
</div></div></li></ul></li></ul></li><li class="comment even depth-3" id="comment-1213546"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">noviceQueryDslUser</span>  <span class="comment_date cye-lm-tag">May 27, 2015, 18:41</span></div><div class="comment_text" id="comment-body-1213546"><p class="cye-lm-tag">My application has a search page, where the user have nearly 20 form fields to fill. It can be entered or even empty. All fields are search criteria and are present in multiple tables. I need to form a complex query by joining multiple tables using queryDSL. It would be really great if you can help to solve this. Thanks…</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-4" id="comment-1214224"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">May 28, 2015, 21:08</span></div><div class="comment_text" id="comment-body-1214224"><p class="cye-lm-tag">I answered to your question <a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-part-five-querydsl/#comment-1214221" rel="nofollow">here</a>.</p>
</div> </div></li></ul></li></ul></li></ul></li><li class="comment even thread-even depth-1" id="comment-1223748"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Java User</span>  <span class="comment_date cye-lm-tag">June 11, 2015, 06:42</span></div><div class="comment_text" id="comment-body-1223748"><p class="cye-lm-tag">Hi. Your tutorial was very useful. But i get a error when accessing entitymanager. I have posted in stack over flow [link](<a href="http://stackoverflow.com/questions/30700156/error-while-accessing-entitymanager-in-spring-boot" rel="nofollow">http://stackoverflow.com/questions/30700156/error-while-accessing-entitymanager-in-spring-boot</a>)<br> Can I ask for your help on the issue.<br> Thankyou.</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-1224777"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">June 12, 2015, 20:47</span></div><div class="comment_text" id="comment-body-1224777"><p class="cye-lm-tag">Hi,</p>
<p class="cye-lm-tag">I have to confess that I have no idea how you can solve your problem. I have one question though:</p>
<p class="cye-lm-tag">Why you want to access the <code>EntityManager</code> instead of creating the <code>Predicate</code> object by using the generated Querydsl query classes?</p>
</div> </div><ul class="children"><li class="comment even depth-3" id="comment-1225264"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Anonymous</span>  <span class="comment_date cye-lm-tag">June 13, 2015, 16:18</span></div><div class="comment_text" id="comment-body-1225264"><p class="cye-lm-tag">Thankyou so much. I got exception without using entity manager. Below is the error<br> java.lang.NullPointerException: null<br> at com.mysema.query.jpa.impl.AbstractJPAQuery.createQuery(AbstractJPAQuery.java:129)</p>
<p class="cye-lm-tag">So I tried adding entity manager.</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-4" id="comment-1227544"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">June 16, 2015, 21:48</span></div><div class="comment_text" id="comment-body-1227544"><p class="cye-lm-tag">But the thing is that you don’t have to create a new <code>JPAQuery</code> object. You can just:</p>
<ol><li>Create a <code>Predicate</code> object by using the generated Querydsl query classes.</li><li> Pass the created <code>Predicate</code> object forward to your Spring Data JPA repository.</li></ol><p class="cye-lm-tag">Why you decided to use your approach? The reason why I ask this is that I am wondering if I am missing something.</p>
</div> </div></li></ul></li></ul></li></ul></li><li class="comment even thread-odd thread-alt depth-1" id="comment-1252812"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Eva Tomovska</span>  <span class="comment_date cye-lm-tag">August 6, 2015, 23:16</span></div><div class="comment_text" id="comment-body-1252812"><p class="cye-lm-tag">Thank you for helpful tutorial:)</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-1252815"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">August 6, 2015, 23:21</span></div><div class="comment_text" id="comment-body-1252815"><p class="cye-lm-tag">You are welcome. I am happy to hear that this tutorial was useful to you!</p>
</div> </div></li></ul></li><li class="comment even thread-even depth-1" id="comment-1299277"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Pradeep</span>  <span class="comment_date cye-lm-tag">October 27, 2015, 12:31</span></div><div class="comment_text" id="comment-body-1299277"><p class="cye-lm-tag">Hi Petri,</p>
<p class="cye-lm-tag">I am forming a complex Query which has two subqueries with the help of SQLQuery and SQLSubQuery. I am putting the subquery in the projection(.list()) which will return a column with single row and the where clouse has user.id where user is the table i am also using in the main query. Separately all the query and subquery is working fine. But when I am putting it all together it is throwing null pointer exception.</p>
<p class="cye-lm-tag">Please note that I have tested both the sub query they are not returning multiple rows. and when I am removing the subqueries from the main query then the main query is executing perfectly.</p>
<p class="cye-lm-tag">Please share your views.</p>
<p class="cye-lm-tag">A</p>
</div> </div><ul class="children"><li class="comment odd alt depth-2" id="comment-1299369"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Pradeep</span>  <span class="comment_date cye-lm-tag">October 27, 2015, 15:07</span></div><div class="comment_text" id="comment-body-1299369"><p class="cye-lm-tag">Adding more to …..bellow is the replica what I am trying to do…</p>
<pre><code>
Configuration configuration = new Configuration(dialect);
SQLQuery query1 = new SQLQuery(conn, configuration); 
SQLSubQuery sql = new SQLSubQuery().from(user);
List&lt;List&gt; tupleList = query1.from(user)
			.list(sql.where(user.firstName.eq("Pradeep"))
			.list(user.firstName));
</code>
</pre><p class="cye-lm-tag">and generated query is</p>
<pre><code>
select (select USER.first_name from USER USER where USER.first_name = ?) from USER USER
</code>
</pre><p class="cye-lm-tag">which is correct. But I am getting null pointer exception.</p>
<p class="cye-lm-tag">Can we use subquery in list. Is this the problem.</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-3" id="comment-1299634"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">October 27, 2015, 20:53</span></div><div class="comment_text" id="comment-body-1299634"><p class="cye-lm-tag">Hi Pradeep,</p>
<p class="cye-lm-tag">I have to admit that I don’t know what is wrong. I suggest that you post this question to the <a href="https://groups.google.com/forum/#!forum/querydsl" target="_blank" rel="nofollow">Querydsl Google Group</a>. I hope that the readers of that group can answer to your question.</p>
</div> </div></li></ul></li></ul></li><li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1359029"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">jeremy</span>  <span class="comment_date cye-lm-tag">January 28, 2016, 16:48</span></div><div class="comment_text" id="comment-body-1359029"><p class="cye-lm-tag">Hi Petri<br> It also have to add<br></p>
<p class="cye-lm-tag"> com.mysema.querydsl<br> querydsl-jpa<br> ${querydsl.version}</p>
<p class="cye-lm-tag">to pom.xml</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-1359171"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">January 28, 2016, 20:09</span></div><div class="comment_text" id="comment-body-1359171"><p class="cye-lm-tag">Hi Jeremy,</p>
<p class="cye-lm-tag">You are right! I cannot believe that I missed that one. Anyway, I will update this blog post tomorrow. Thank you for reporting this.</p>
</div> </div></li></ul></li><li class="comment odd alt thread-even depth-1" id="comment-1382220"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Harris</span>  <span class="comment_date cye-lm-tag">February 29, 2016, 14:41</span></div><div class="comment_text" id="comment-body-1382220"><p class="cye-lm-tag">is there a way I can use query dsl to query numbers especially bigintergers. its an e-commerce application.</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-1383073"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">March 1, 2016, 20:43</span></div><div class="comment_text" id="comment-body-1383073"><p class="cye-lm-tag">AFAIK, if you have created the Querydsl query types from your database, you should be able to select individual property values. However, you need to <a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-part-eight-adding-functionality-to-a-repository/" rel="nofollow">add a custom method into your Spring Data JPA repository</a> and implement the query yourself.</p>
</div> </div></li></ul></li><li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1441977"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Lucien</span>  <span class="comment_date cye-lm-tag">May 14, 2016, 19:57</span></div><div class="comment_text" id="comment-body-1441977"><p class="cye-lm-tag">Hi Petri<br> How to config apt-maven-plugin in the gradle?<br> Thanks</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-1443620"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">May 17, 2016, 19:31</span></div><div class="comment_text" id="comment-body-1443620"><p class="cye-lm-tag">Hi Lucien,</p>
<p class="cye-lm-tag">You cannot use Maven plugins with Gradle. However, I found a StackOverflow answer that describes how you can <a href="http://stackoverflow.com/a/25920121/313554" target="_blank" rel="nofollow">create Querydsl query types with Gradle</a>.</p>
</div> </div><ul class="children"><li class="comment odd alt depth-3" id="comment-1443987"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Lucien</span>  <span class="comment_date cye-lm-tag">May 18, 2016, 13:40</span></div><div class="comment_text" id="comment-body-1443987"><p class="cye-lm-tag">Thanks a lot<br> The problem has been solved</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-4" id="comment-1444087"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">May 18, 2016, 17:13</span></div><div class="comment_text" id="comment-body-1444087"><p class="cye-lm-tag">You are welcome.</p>
</div> </div></li></ul></li></ul></li></ul></li><li class="comment odd alt thread-even depth-1" id="comment-1450961"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Daoudi Mohamed</span>  <span class="comment_date cye-lm-tag">June 1, 2016, 18:05</span></div><div class="comment_text" id="comment-body-1450961"><p class="cye-lm-tag">Hi Petry, nice tutorial<br> Thank you ;)</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-1451003"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag"><a href="http://www.petrikainulainen.net/about-me" rel="external nofollow" class="url">Petri</a></span>  <span class="comment_date cye-lm-tag">June 1, 2016, 21:05</span></div><div class="comment_text" id="comment-body-1451003"><p class="cye-lm-tag">You are welcome!</p>
</div> </div></li></ul></li><li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1501821"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">SGB</span>  <span class="comment_date cye-lm-tag">November 6, 2016, 20:32</span></div><div class="comment_text" id="comment-body-1501821"><p class="cye-lm-tag">I am working a sample app and followed this pattern of using a separate Predicate class where all the predicates live. I like the idea of extracting the predicate builders to a separate class so that it can be re-used in multiple business services. But upon testing, I find that when it is building a query from multiple Q* classes, it is doing a cross join instead of inner join.</p>
<p class="cye-lm-tag">For eg, Say, we have two entities :<br> Person {<br> Long id;</p>
<p class="cye-lm-tag"> … … … … … …<br> (mappedBy = “person”)<br> Address address;<br> }</p>
<p class="cye-lm-tag">Address {<br> Long id;<br> … … … … … …<br> @OneToOne<br> @JoinColumn(name = “person_id”, foreignKey = @ForeignKey(name = “address_to_person_fk”))<br> Person person;<br> }</p>
<p class="cye-lm-tag">In my service layer [ResidentService()], I have a method for a business function  where construct a complicated predicate, for eg:<br> public Person findResidentsWithLastnameInStreet(String lastNamePrefix, String street)) {<br> Predicate predicate = new BooleanBuilder()<br> .and(PersonPredicate.lastNameEndsWith(lastNamePrefix))<br> .and(AddressPredicate.addressLine1Eq(line1))<br> .getValue();<br> return personRepo.findAll(predicate);<br> }</p>
<p class="cye-lm-tag">The JPA query generated by QueryDSL seems to be a cross product. Something like this:</p>
<p class="cye-lm-tag"> from<br> person person0_ cross<br> join<br> address address1_</p>
<p class="cye-lm-tag"> where<br> address1_.person_id  = person0_.id<br> and address1_.line1=?<br> and person0_.lastName like ? escape ‘!’</p>
<p class="cye-lm-tag">Am using QueryDSL 4.1.4 &amp; spring-data-jpa 1.10.3</p>
</div> </div></li><li class="comment even thread-even depth-1" id="comment-1525930"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">David</span>  <span class="comment_date cye-lm-tag">March 3, 2017, 17:01</span></div><div class="comment_text" id="comment-body-1525930"><p class="cye-lm-tag">Hi.</p>
<p class="cye-lm-tag">I have used QueryDSL and I have expirience problems to make it work DISTINCT.<br> Typical select distinct field1, not worked for me, maybe I’m doing something wrong. Could you please provide an example.<br> thanks</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-1527634"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">March 8, 2017, 11:10</span></div><div class="comment_text" id="comment-body-1527634"><p class="cye-lm-tag">Hi,</p>
<p class="cye-lm-tag">Can you post your query generation code here?</p>
</div> </div></li></ul></li></ul></div> </section>
<br><hr>

<h2>11 Sorting</h2>
<div class="post_content cye-lm-tag" itemprop="articleBody"><p class="cye-lm-tag">My <a href="/spring-data-jpa-tutorial/">Spring Data JPA tutorial</a> has taught us how we can create both static and dynamic database queries with Spring Data JPA.</p>
<p class="cye-lm-tag">We have also implemented a search function that ignores case and returns todo entries whose title or description contains the given search term.</p>
<p class="cye-lm-tag">However, we haven’t paid any attention to one very important thing:</p>
<p class="cye-lm-tag"><strong>We have no idea how we can sort the query results of our database queries</strong>.</p>
<p class="cye-lm-tag">This blog post fixes this problem. We will learn to sort the query results of our database queries and add sorting support into the search function of our example application.</p>
<p class="cye-lm-tag">Let’s get started.</p>
<div class="note"> <strong>Additional Reading:</strong><p class="cye-lm-tag"></p>
<p class="cye-lm-tag">If you are not familiar with Spring Data JPA, <strong>you should read</strong> the following blog posts before you continue reading this blog post:</p>
<ul><li><a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-introduction/">Spring Data JPA Tutorial: Introduction</a> provides a quick introduction to Spring Data JPA and gives an overview of the Spring Data repository interfaces.</li><li><a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-getting-the-required-dependencies/">Spring Data JPA Tutorial: Getting the Required Dependencies</a> describes how you can get the required dependencies.</li><li><a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-part-one-configuration/">Spring Data JPA Tutorial: Configuration</a> describes how you can configure the persistence layer of a Spring application that uses Spring Data JPA.</li><li><a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-introduction-to-query-methods/">Spring Data JPA Tutorial: Introduction to Query Methods</a> describes how you can pass method parameters to your query methods and identifies the “legal” return values of Spring Data JPA query methods.</li><li><a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-creating-database-queries-from-method-names/">Spring Data JPA Tutorial: Creating Database Queries From Method Names</a> describes how you can create database queries from the method names of your query methods.</li><li><a href="http://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-creating-database-queries-with-the-query-annotation/">Spring Data JPA Tutorial: Creating Database Queries With the <em>@Query</em> Annotation</a> describes how you can create database queries by annotating your query methods with the <em>@Query</em> annotation.</li><li><a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-creating-database-queries-with-named-queries/">Spring Data JPA Tutorial: Creating Database Queries With Named Queries</a> describes how you can create database queries by using named queries.</li><li><a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-part-four-jpa-criteria-queries/">Spring Data JPA Tutorial: Creating Database Queries With the JPA Criteria API</a> describes how you can create dynamic queries by using the JPA Criteria API.</li><li><a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-part-five-querydsl/">Spring Data JPA Tutorial: Creating Database Queries With Querydsl</a> describes how you can create dynamic database queries by using Querydsl.</li></ul></div><h2>Sorting Query Results With the Method Names of Our Query Methods</h2><p class="cye-lm-tag">If we create our database queries by using the <a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-creating-database-queries-from-method-names/">query generation from the method name strategy</a>, we can sort the query results of our database queries by using the <em>OrderBy</em> keyword. We can use the <em>OrderBy</em> keyword by following these steps:</p>
<ol><li>Append the <em>OrderBy</em> keyword to the method name of our query method.</li><li>Append the name of the property to the method name of our query method and transform its first letter into uppercase. If we want to order our query results by using the title of a todo entry, we have to append the string: <em>Title</em> to the method name of our query method.</li><li>Describe the sort direction. If we want to sort the query results in ascending order, we have to append the keyword <em>Asc</em> to the method name of our query method. On the other hand, if we want to sort the query results in descending order, we have to append the keyword <em>Desc</em> to the method name of our query method.</li><li>If we need to sort our query results by using multiple properties, we have to go back to the step 2.</li></ol><p class="cye-lm-tag"></p>
<p class="cye-lm-tag"></p>
<br> The following examples demonstrate how we can use the <em>OrderBy</em> keyword:<p class="cye-lm-tag"></p>
<p class="cye-lm-tag"><strong>Example 1:</strong><br> We have created a query method that returns todo entries whose title is given as a method parameter. If we want to sort the query results of that query method in ascending order by using the value of the <em>title</em> field, we have to use the following code:</p>
<div><div id="highlighter_496144" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2 highlighted">7</div><div class="line number8 index7 alt1">8</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.repository.Repository;</code></div><div class="line number2 index1 alt1">&nbsp;</div><div class="line number3 index2 alt2"><code class="java keyword">import</code> <code class="java plain">java.util.List;</code></div><div class="line number4 index3 alt1">&nbsp;</div><div class="line number5 index4 alt2"><code class="java keyword">interface</code> <code class="java plain">TodoRepository </code><code class="java keyword">extends</code> <code class="java plain">Repository&lt;Todo, Long&gt; {</code></div><div class="line number6 index5 alt1">&nbsp;</div><div class="line number7 index6 alt2 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">List&lt;Todo&gt; findByTitleOrderByTitleAsc(String title);</code></div><div class="line number8 index7 alt1"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><p class="cye-lm-tag"><strong>Example 2:</strong><br> We have created a query method that returns todo entries whose title is given as a method parameter. If we want to sort the query results of that query method in ascending order by using the value of the <em>title</em> field and in descending order by using the value of the <em>description</em> field, we have to use the following code:</p>
<div><div id="highlighter_775927" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2 highlighted">7</div><div class="line number8 index7 alt1">8</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.repository.Repository;</code></div><div class="line number2 index1 alt1">&nbsp;</div><div class="line number3 index2 alt2"><code class="java keyword">import</code> <code class="java plain">java.util.List;</code></div><div class="line number4 index3 alt1">&nbsp;</div><div class="line number5 index4 alt2"><code class="java keyword">interface</code> <code class="java plain">TodoRepository </code><code class="java keyword">extends</code> <code class="java plain">Repository&lt;Todo, Long&gt; {</code></div><div class="line number6 index5 alt1">&nbsp;</div><div class="line number7 index6 alt2 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">List&lt;Todo&gt; findByTitleOrderByTitleAscDescriptionDesc(String title);</code></div><div class="line number8 index7 alt1"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><p class="cye-lm-tag"><strong>Example 3:</strong><br> The search function of our example application returns todo entries whose title or description contains the given search term. If we want to sort the search results in ascending order by using the value of the <em>title</em> field, we have to add the following query method into our repository interface:</p>
<div><div id="highlighter_483119" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2 highlighted">7</div><div class="line number8 index7 alt1 highlighted">8</div><div class="line number9 index8 alt2">9</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.repository.Repository;</code></div><div class="line number2 index1 alt1">&nbsp;</div><div class="line number3 index2 alt2"><code class="java keyword">import</code> <code class="java plain">java.util.List;</code></div><div class="line number4 index3 alt1">&nbsp;</div><div class="line number5 index4 alt2"><code class="java keyword">interface</code> <code class="java plain">TodoRepository </code><code class="java keyword">extends</code> <code class="java plain">Repository&lt;Todo, Long&gt; {</code></div><div class="line number6 index5 alt1">&nbsp;</div><div class="line number7 index6 alt2 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">List&lt;Todo&gt; findByDescriptionContainsOrTitleContainsAllIgnoreCaseOrderByTitleAsc(String descriptionPart,</code></div><div class="line number8 index7 alt1 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">String titlePart);</code></div><div class="line number9 index8 alt2"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><div class="note"> <strong>Additional Reading:</strong><p class="cye-lm-tag"></p>
<ul><li><a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-creating-database-queries-from-method-names/">Spring Data JPA Tutorial: Creating Database Queries From Method Names</a></li><li><a href="http://stackoverflow.com/a/25388068" target="_blank">How to sort by multiple properties in Spring Data (JPA) derived queries? @StackOverflow</a></li></ul></div><p class="cye-lm-tag">Let’s move on and find out how we can sort query results with query strings.</p>
<h2>Sorting Query Results With Query Strings</h2><p class="cye-lm-tag">If we create our database queries by using <a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-creating-database-queries-with-named-queries/">named queries</a> or the <a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-creating-database-queries-with-the-query-annotation/"><em>@Query annotation</em></a>, we can specify the sorting logic in our query strings.</p>
<div class="note">If our database queries are named queries or native queries that use the <em>@Query</em> annotation, we must specify the sorting logic in our query strings.</div><p class="cye-lm-tag">The search function of our example application is case-insensitive. It returns todo entries whose title or description contains the given search term. The following examples demonstrate how we can sort our query results by modifying the existing JPQL and SQL queries:</p>
<p class="cye-lm-tag"><strong>Example 1:</strong><br> If we want to modify an existing JPQL query to sort the query results in ascending order by using the value of the <em>title</em> field, we have to use the <a href="http://www.objectdb.com/java/jpa/query/jpql/order" target="_blank">JPQL <em>ORDER BY</em> clause</a>.</p>
<p class="cye-lm-tag">The modified JPQL query looks as follows:</p>
<div><div id="highlighter_324395" class="syntaxhighlighter  sql"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1 highlighted">4</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="sql keyword">SELECT</code> <code class="sql plain">t </code><code class="sql keyword">FROM</code> <code class="sql plain">Todo t </code><code class="sql keyword">WHERE</code></div><div class="line number2 index1 alt1"><code class="sql spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="sql color2">LOWER</code><code class="sql plain">(t.title) </code><code class="sql color1">LIKE</code> <code class="sql color2">LOWER</code><code class="sql plain">(CONCAT(</code><code class="sql string">'%'</code><code class="sql plain">,:searchTerm, </code><code class="sql string">'%'</code><code class="sql plain">)) </code><code class="sql color1">OR</code></div><div class="line number3 index2 alt2"><code class="sql spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="sql color2">LOWER</code><code class="sql plain">(t.description) </code><code class="sql color1">LIKE</code> <code class="sql color2">LOWER</code><code class="sql plain">(CONCAT(</code><code class="sql string">'%'</code><code class="sql plain">,:searchTerm, </code><code class="sql string">'%'</code><code class="sql plain">)) </code></div><div class="line number4 index3 alt1 highlighted"><code class="sql spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="sql keyword">ORDER</code> <code class="sql keyword">BY</code> <code class="sql plain">t.title </code><code class="sql keyword">ASC</code></div></div></td></tr></tbody></table></div></div><p class="cye-lm-tag"><strong>Example 2:</strong><br> If we want to modify an existing SQL query to sort the query results in ascending order by using the value of the <em>title</em> field, we have to use the <a href="http://www.w3schools.com/sql/sql_orderby.asp" target="_blank">SQL <em>ORDER BY</em> clause</a>.</p>
<div><div id="highlighter_518998" class="syntaxhighlighter  sql"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1 highlighted">4</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="sql keyword">SELECT</code> <code class="sql plain">* </code><code class="sql keyword">FROM</code> <code class="sql plain">todos t </code><code class="sql keyword">WHERE</code></div><div class="line number2 index1 alt1"><code class="sql spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="sql color2">LOWER</code><code class="sql plain">(t.title) </code><code class="sql color1">LIKE</code> <code class="sql color2">LOWER</code><code class="sql plain">(CONCAT(</code><code class="sql string">'%'</code><code class="sql plain">,:searchTerm, </code><code class="sql string">'%'</code><code class="sql plain">)) </code><code class="sql color1">OR</code></div><div class="line number3 index2 alt2"><code class="sql spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="sql color2">LOWER</code><code class="sql plain">(t.description) </code><code class="sql color1">LIKE</code> <code class="sql color2">LOWER</code><code class="sql plain">(CONCAT(</code><code class="sql string">'%'</code><code class="sql plain">,:searchTerm, </code><code class="sql string">'%'</code><code class="sql plain">)) </code></div><div class="line number4 index3 alt1 highlighted"><code class="sql spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="sql keyword">ORDER</code> <code class="sql keyword">BY</code> <code class="sql plain">t.title </code><code class="sql keyword">ASC</code></div></div></td></tr></tbody></table></div></div><div class="note"> <strong>Additional Reading:</strong><p class="cye-lm-tag"></p>
<ul><li><a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-creating-database-queries-with-the-query-annotation/">Spring Data JPA Tutorial: Creating Database Queries With the <em>@Query</em> Annotation</a></li><li><a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-creating-database-queries-with-named-queries/">Spring Data JPA Tutorial: Creating Database Queries With Named Queries</a></li><li><a href="http://www.objectdb.com/java/jpa/query/jpql/order" target="_blank">JPQL <em>ORDER BY</em> clause</a></li><li><a href="http://www.w3schools.com/sql/sql_orderby.asp" target="_blank">SQL <em>ORDER BY</em> clause</a></li></ul></div><p class="cye-lm-tag">Let’s find out how we can sort query results by using the <em>Sort</em> class.</p>
<h2>Sorting Query Results With the Sort Class</h2><p class="cye-lm-tag">If our database queries are not named queries or native queries that use the <em>@Query</em> annotation, we can sort their query results by using the <a href="http://docs.spring.io/spring-data/data-commons/docs/current/api/org/springframework/data/domain/Sort.html" target="_blank"><em>Sort</em></a> class. It is essentially a specification class that describes the sorting options of our database queries.</p>
<p class="cye-lm-tag">We can sort our query results by following these steps:</p>
<ol><li>Obtain the <em>Sort</em> object that describes the sorting options of the invoked database query.</li><li>Pass the <em>Sort</em> object forward to the correct repository method as a method parameter.</li></ol><p class="cye-lm-tag">Let’s find out how we can obtain the <em>Sort</em> object.</p>
<h3>Obtaining the Sort Object</h3><p class="cye-lm-tag">We can obtain the <em>Sort</em> object by using two different methods: we can specify the sort options manually or we can use <a href="http://docs.spring.io/spring-data/jpa/docs/1.8.x/reference/html/#core.web" target="_blank">Spring Data Web Support</a>.</p>
<p class="cye-lm-tag">Let’s start by specifying the sort options manually.</p>
<h4>Specifying the Sort Options Manually</h4><p class="cye-lm-tag">If we want to specify the sort options manually, the service class (or another component) that wants to sort the query results returned by a Spring Data JPA repository, must create the <em>Sort</em> object and pass it forward to the invoked repository method.</p>
<p class="cye-lm-tag">The source code of the <em>RepositoryTodoSearchService</em> class, which uses this method, looks as follows:</p>
<div><div id="highlighter_465991" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1 highlighted">18</div><div class="line number19 index18 alt2 highlighted">19</div><div class="line number20 index19 alt1 highlighted">20</div><div class="line number21 index20 alt2 highlighted">21</div><div class="line number22 index21 alt1 highlighted">22</div><div class="line number23 index22 alt2 highlighted">23</div><div class="line number24 index23 alt1 highlighted">24</div><div class="line number25 index24 alt2 highlighted">25</div><div class="line number26 index25 alt1 highlighted">26</div><div class="line number27 index26 alt2 highlighted">27</div><div class="line number28 index27 alt1">28</div><div class="line number29 index28 alt2 highlighted">29</div><div class="line number30 index29 alt1 highlighted">30</div><div class="line number31 index30 alt2 highlighted">31</div><div class="line number32 index31 alt1">32</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.beans.factory.annotation.Autowired;</code></div><div class="line number2 index1 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.domain.Sort;</code></div><div class="line number3 index2 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.stereotype.Service;</code></div><div class="line number4 index3 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.transaction.annotation.Transactional;</code></div><div class="line number5 index4 alt2">&nbsp;</div><div class="line number6 index5 alt1"><code class="java keyword">import</code> <code class="java plain">java.util.List;</code></div><div class="line number7 index6 alt2">&nbsp;</div><div class="line number8 index7 alt1"><code class="java color1">@Service</code></div><div class="line number9 index8 alt2"><code class="java keyword">final</code> <code class="java keyword">class</code> <code class="java plain">RepositoryTodoSearchService </code><code class="java keyword">implements</code> <code class="java plain">TodoSearchService {</code></div><div class="line number10 index9 alt1">&nbsp;</div><div class="line number11 index10 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java keyword">final</code> <code class="java plain">TodoRepository repository;</code></div><div class="line number12 index11 alt1">&nbsp;</div><div class="line number13 index12 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Autowired</code></div><div class="line number14 index13 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java plain">RepositoryTodoSearchService(TodoRepository repository) {</code></div><div class="line number15 index14 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">this</code><code class="java plain">.repository = repository;</code></div><div class="line number16 index15 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number17 index16 alt2">&nbsp;</div><div class="line number18 index17 alt1 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Transactional</code><code class="java plain">(readOnly = </code><code class="java keyword">true</code><code class="java plain">)</code></div><div class="line number19 index18 alt2 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Override</code></div><div class="line number20 index19 alt1 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java plain">List&lt;TodoDTO&gt; findBySearchTerm(String searchTerm) {</code></div><div class="line number21 index20 alt2 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">Sort sortSpec = orderBy();</code></div><div class="line number22 index21 alt1 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number23 index22 alt2 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java comments">//Obtain search results by invoking the preferred repository method.</code></div><div class="line number24 index23 alt1 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">List&lt;Todo&gt; searchResults = ...</code></div><div class="line number25 index24 alt2 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number26 index25 alt1 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">return</code> <code class="java plain">TodoMapper.mapEntitiesIntoDTOs(searchResults);</code></div><div class="line number27 index26 alt2 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number28 index27 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number29 index28 alt2 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java plain">Sort orderBy() {</code></div><div class="line number30 index29 alt1 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java comments">//Create a new Sort object here.</code></div><div class="line number31 index30 alt2 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number32 index31 alt1"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><p class="cye-lm-tag">The following examples demonstrates how we can implement the private <em>orderBy()</em> method:</p>
<p class="cye-lm-tag"><strong>Example 1:</strong></p>
<p class="cye-lm-tag">If we must sort the query results in ascending order by using the value of the <em>title</em> field, we have to create the <em>Sort</em> object by using the following code:</p>
<div><div id="highlighter_290693" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">private</code> <code class="java plain">Sort orderBy() {</code></div><div class="line number2 index1 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">return</code> <code class="java keyword">new</code> <code class="java plain">Sort(Sort.Direction.ASC, </code><code class="java string">"title"</code><code class="java plain">);</code></div><div class="line number3 index2 alt2"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><p class="cye-lm-tag"><strong>Example 2:</strong></p>
<p class="cye-lm-tag">If we must sort the query results by in descending order by using the values of the <em>title</em> and <em>description</em> fields, we have to create the <em>Sort</em> object by using the following code:</p>
<div><div id="highlighter_976398" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">private</code> <code class="java plain">Sort orderBy() {</code></div><div class="line number2 index1 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">return</code> <code class="java keyword">new</code> <code class="java plain">Sort(Sort.Direction.DESC, </code><code class="java string">"title"</code><code class="java plain">, </code><code class="java string">"description"</code><code class="java plain">);</code></div><div class="line number3 index2 alt2"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><p class="cye-lm-tag"><strong>Example 3:</strong></p>
<p class="cye-lm-tag">If we want to sort the query results in descending order by using the value of the <em>description</em> field and in ascending order by using the value of the <em>title</em> field, we have to create the <em>Sort</em> object by using the following code:</p>
<div><div id="highlighter_309620" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">private</code> <code class="java plain">Sort orderBy() {</code></div><div class="line number2 index1 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">return</code> <code class="java keyword">new</code> <code class="java plain">Sort(Sort.Direction.DESC, </code><code class="java string">"description"</code><code class="java plain">)</code></div><div class="line number3 index2 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">.and(</code><code class="java keyword">new</code> <code class="java plain">Sort(Sort.Direction.ASC, </code><code class="java string">"title"</code><code class="java plain">));</code></div><div class="line number4 index3 alt1"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><div class="note"> <strong>Additional Reading:</strong><p class="cye-lm-tag"></p>
<ul><li><a href="http://docs.spring.io/spring-data/data-commons/docs/current/api/org/springframework/data/domain/Sort.html" target="_blank">The Javadoc of the <em>Sort</em> class</a></li></ul></div><p class="cye-lm-tag">Let’s find out how we can obtain <em>Sort</em> objects by using Spring Data web support.</p>
<h4>Using Spring Data Web Support</h4><p class="cye-lm-tag">We can enable Spring Data web support by annotating our application context configuration class with the <em>@EnableSpringDataWebSupport</em> annotation. The relevant part of the <em>PersistenceContext</em> class, which configures the persistence layer of our example application, looks as follows:</p>
<div><div id="highlighter_158818" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1 highlighted">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.context.annotation.Configuration;</code></div><div class="line number2 index1 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.jpa.repository.config.EnableJpaAuditing;</code></div><div class="line number3 index2 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.jpa.repository.config.EnableJpaRepositories;</code></div><div class="line number4 index3 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.web.config.EnableSpringDataWebSupport;</code></div><div class="line number5 index4 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.transaction.annotation.EnableTransactionManagement;</code></div><div class="line number6 index5 alt1">&nbsp;</div><div class="line number7 index6 alt2">&nbsp;</div><div class="line number8 index7 alt1"><code class="java color1">@Configuration</code></div><div class="line number9 index8 alt2"><code class="java color1">@EnableJpaAuditing</code><code class="java plain">(dateTimeProviderRef = </code><code class="java string">"dateTimeProvider"</code><code class="java plain">)</code></div><div class="line number10 index9 alt1"><code class="java color1">@EnableJpaRepositories</code><code class="java plain">(basePackages = {</code></div><div class="line number11 index10 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java string">"net.petrikainulainen.springdata.jpa.todo"</code></div><div class="line number12 index11 alt1"><code class="java plain">})</code></div><div class="line number13 index12 alt2"><code class="java color1">@EnableTransactionManagement</code></div><div class="line number14 index13 alt1 highlighted"><code class="java color1">@EnableSpringDataWebSupport</code></div><div class="line number15 index14 alt2"><code class="java keyword">class</code> <code class="java plain">PersistenceContext {</code></div><div class="line number16 index15 alt1"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><p class="cye-lm-tag">This registers a new <em>SortHandlerMethodArgumentResolver</em> instance that can create <em>Sort</em> objects from request parameters or <em>@SortDefault</em> annotations. This means that we can specify the sorting logic by setting the value of the <em>sort</em> request parameter. <a href="http://docs.spring.io/spring-data/jpa/docs/1.8.x/reference/html/" target="_blank">The reference documentation of Spring Data JPA</a> describes the content of the <em>sort</em> request parameter as follows:</p>
<blockquote><p class="cye-lm-tag">Properties that should be sorted by in the format <em>property,property(,ASC|DESC)</em>. Default sort direction is ascending. Use multiple sort parameters if you want to switch directions, e.g. <em>?sort=firstname&amp;sort=lastname,asc</em>.</p>
</blockquote><p class="cye-lm-tag">After we have enabled Spring Data web support, we can inject <em>Sort</em> objects into controller handler methods. The source code of the <em>TodoSearchController</em> class, which utilizes Spring Data web support, looks as follows:</p>
<div><div id="highlighter_407908" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1 highlighted">22</div><div class="line number23 index22 alt2">23</div><div class="line number24 index23 alt1">24</div><div class="line number25 index24 alt2">25</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.beans.factory.annotation.Autowired;</code></div><div class="line number2 index1 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.domain.Sort;</code></div><div class="line number3 index2 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.web.bind.annotation.RequestMapping;</code></div><div class="line number4 index3 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.web.bind.annotation.RequestMethod;</code></div><div class="line number5 index4 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.web.bind.annotation.RequestParam;</code></div><div class="line number6 index5 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.web.bind.annotation.RestController;</code></div><div class="line number7 index6 alt2">&nbsp;</div><div class="line number8 index7 alt1"><code class="java keyword">import</code> <code class="java plain">java.util.List;</code></div><div class="line number9 index8 alt2">&nbsp;</div><div class="line number10 index9 alt1"><code class="java color1">@RestController</code></div><div class="line number11 index10 alt2"><code class="java keyword">final</code> <code class="java keyword">class</code> <code class="java plain">TodoSearchController {</code></div><div class="line number12 index11 alt1">&nbsp;</div><div class="line number13 index12 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java keyword">final</code> <code class="java plain">TodoSearchService searchService;</code></div><div class="line number14 index13 alt1">&nbsp;</div><div class="line number15 index14 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Autowired</code></div><div class="line number16 index15 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java plain">TodoSearchController(TodoSearchService searchService) {</code></div><div class="line number17 index16 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">this</code><code class="java plain">.searchService = searchService;</code></div><div class="line number18 index17 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number19 index18 alt2">&nbsp;</div><div class="line number20 index19 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@RequestMapping</code><code class="java plain">(value = </code><code class="java string">"/api/todo/search"</code><code class="java plain">, method = RequestMethod.GET)</code></div><div class="line number21 index20 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java plain">List&lt;TodoDTO&gt; findBySearchTerm(</code><code class="java color1">@RequestParam</code><code class="java plain">(</code><code class="java string">"searchTerm"</code><code class="java plain">) String searchTerm, </code></div><div class="line number22 index21 alt1 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">Sort sort) {</code></div><div class="line number23 index22 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">return</code> <code class="java plain">searchService.findBySearchTerm(searchTerm, sort);</code></div><div class="line number24 index23 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number25 index24 alt2"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><div class="note"> <strong>Additional Reading:</strong><p class="cye-lm-tag"></p>
<ul><li><a href="http://docs.spring.io/spring-data/jpa/docs/1.8.x/reference/html/#core.web" target="_blank">Spring Data JPA Reference Documentation: 3.7.1 Web Support</a></li><li><a href="http://docs.spring.io/spring-data/data-commons/docs/current/api/org/springframework/data/web/config/EnableSpringDataWebSupport.html" target="_blank">The Javadoc of the <em>@EnableSpringDataWebSupport</em> annotation</a></li><li><a href="http://docs.spring.io/spring-data/data-commons/docs/current/api/org/springframework/data/web/SortHandlerMethodArgumentResolver.html" target="_blank">The Javadoc of the <em>SortHandlerMethodArgumentResolver</em> class</a></li><li><a href="http://docs.spring.io/spring-data/data-commons/docs/current/api/org/springframework/data/web/SortDefault.html" target="_blank">The Javadoc of the <em>@SortDefault</em> annotation</a></li></ul></div><p class="cye-lm-tag">The <em>TodoSearchController</em> gets the information of the returned todo entries from the <em>TodoSearchService</em> object. The <em>RepositoryTodoSearchService</em> class implements the <em>TodoSearchService</em> interface, and its <em>findBySearchTerm()</em> method simply passes the search term and the <em>Sort</em> object forward to the invoked repository method.</p>
<p class="cye-lm-tag">The source code of the <em>RepositoryTodoSearchService</em> class looks as follows:</p>
<div><div id="highlighter_912360" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1 highlighted">18</div><div class="line number19 index18 alt2 highlighted">19</div><div class="line number20 index19 alt1 highlighted">20</div><div class="line number21 index20 alt2 highlighted">21</div><div class="line number22 index21 alt1 highlighted">22</div><div class="line number23 index22 alt2 highlighted">23</div><div class="line number24 index23 alt1 highlighted">24</div><div class="line number25 index24 alt2 highlighted">25</div><div class="line number26 index25 alt1">26</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.beans.factory.annotation.Autowired;</code></div><div class="line number2 index1 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.domain.Sort;</code></div><div class="line number3 index2 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.stereotype.Service;</code></div><div class="line number4 index3 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.transaction.annotation.Transactional;</code></div><div class="line number5 index4 alt2">&nbsp;</div><div class="line number6 index5 alt1"><code class="java keyword">import</code> <code class="java plain">java.util.List;</code></div><div class="line number7 index6 alt2">&nbsp;</div><div class="line number8 index7 alt1"><code class="java color1">@Service</code></div><div class="line number9 index8 alt2"><code class="java keyword">final</code> <code class="java keyword">class</code> <code class="java plain">RepositoryTodoSearchService </code><code class="java keyword">implements</code> <code class="java plain">TodoSearchService {</code></div><div class="line number10 index9 alt1">&nbsp;</div><div class="line number11 index10 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java keyword">final</code> <code class="java plain">TodoRepository repository;</code></div><div class="line number12 index11 alt1">&nbsp;</div><div class="line number13 index12 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Autowired</code></div><div class="line number14 index13 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java plain">RepositoryTodoSearchService(TodoRepository repository) {</code></div><div class="line number15 index14 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">this</code><code class="java plain">.repository = repository;</code></div><div class="line number16 index15 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number17 index16 alt2">&nbsp;</div><div class="line number18 index17 alt1 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Transactional</code><code class="java plain">(readOnly = </code><code class="java keyword">true</code><code class="java plain">)</code></div><div class="line number19 index18 alt2 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Override</code></div><div class="line number20 index19 alt1 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java plain">List&lt;TodoDTO&gt; findBySearchTerm(String searchTerm, Sort sort) {&nbsp;&nbsp;&nbsp;&nbsp; </code></div><div class="line number21 index20 alt2 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java comments">//Obtain search results by invoking the preferred repository method.</code></div><div class="line number22 index21 alt1 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">List&lt;Todo&gt; searchResults = ...</code></div><div class="line number23 index22 alt2 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number24 index23 alt1 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">return</code> <code class="java plain">TodoMapper.mapEntitiesIntoDTOs(searchResults);</code></div><div class="line number25 index24 alt2 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number26 index25 alt1"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><p class="cye-lm-tag">Let’s move on and find out how we can use the <em>Sort</em> object.</p>
<h3>Using the Sort Object</h3><p class="cye-lm-tag">After we have created the <em>Sort</em> object manually or obtained it by using Spring Data web support, we have to create the database query that sorts its query results by using the <em>Sort</em> object.</p>
<p class="cye-lm-tag">Let’s start by finding out how we can sort all entities found from the database.</p>
<h4>Sorting All Entities</h4><p class="cye-lm-tag">If we want to sort all entities found from the database, we can use one of the following methods:</p>
<p class="cye-lm-tag"><strong>First</strong>, if we created our repository interface by extending the <em>CrudRepository</em> interface, we can modify it to <strong>extend only</strong> the <em>PagingAndSortingRepository</em> interface.</p>
<p class="cye-lm-tag">The relevant part of our repository interface looks as follows:</p>
<div><div id="highlighter_266266" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2 highlighted">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.repository.PagingAndSortingRepository;</code></div><div class="line number2 index1 alt1"><code class="java spaces">&nbsp;</code>&nbsp;</div><div class="line number3 index2 alt2 highlighted"><code class="java keyword">interface</code> <code class="java plain">TodoRepository </code><code class="java keyword">extends</code> <code class="java plain">PagingAndSortingRepository&lt;Todo, Long&gt; {</code></div><div class="line number4 index3 alt1"><code class="java spaces">&nbsp;</code>&nbsp;</div><div class="line number5 index4 alt2"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><div class="note"> <strong>Additional Reading:</strong><p class="cye-lm-tag"></p>
<ul><li><a href="http://docs.spring.io/spring-data/commons/docs/current/api/org/springframework/data/repository/PagingAndSortingRepository.html" target="_blank">The Javadoc of the <em>PagingAndSortingRepository</em></a></li></ul></div><p class="cye-lm-tag">The <em>PagingAndSortingRepository</em> interface declares one method that we can use when we want to get all entities found from the database and sort them:</p>
<ul><li>The <em>Iterable&lt;T&gt; findAll(Sort sort)</em> method returns all entities found from the database and sorts them by using the sort options specified by the <em>Sort</em> object.</li></ul><p class="cye-lm-tag">In other words, if we want to get a sorted list of all entities found from the database, we have to use the <em>Iterable&lt;T&gt; findAll(Sort sort)</em> method instead of the <em>Iterable&lt;T&gt; findAll()</em> method.</p>
<p class="cye-lm-tag"><strong>Second</strong>, if we created our repository interface by extending the <em>Repository</em> interface, we can declare the <em>findAll(Sort sort)</em> method in our repository interface.</p>
<p class="cye-lm-tag">The relevant part of our repository interface looks as follows:</p>
<div><div id="highlighter_462379" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2 highlighted">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.domain.Sort;</code></div><div class="line number2 index1 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.repository.Repository;</code></div><div class="line number3 index2 alt2">&nbsp;</div><div class="line number4 index3 alt1"><code class="java keyword">import</code> <code class="java plain">java.util.List;</code></div><div class="line number5 index4 alt2"><code class="java keyword">import</code> <code class="java plain">java.util.Optional;</code></div><div class="line number6 index5 alt1">&nbsp;</div><div class="line number7 index6 alt2"><code class="java keyword">interface</code> <code class="java plain">TodoRepository </code><code class="java keyword">extends</code> <code class="java plain">Repository&lt;Todo, Long&gt; {</code></div><div class="line number8 index7 alt1">&nbsp;</div><div class="line number9 index8 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">void</code> <code class="java plain">delete(Todo deleted);</code></div><div class="line number10 index9 alt1">&nbsp;</div><div class="line number11 index10 alt2 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">List&lt;Todo&gt; findAll(Sort sort);</code></div><div class="line number12 index11 alt1">&nbsp;</div><div class="line number13 index12 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">Optional&lt;Todo&gt; findOne(Long id);</code></div><div class="line number14 index13 alt1">&nbsp;</div><div class="line number15 index14 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">void</code> <code class="java plain">flush();</code></div><div class="line number16 index15 alt1">&nbsp;</div><div class="line number17 index16 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">Todo save(Todo persisted);</code></div><div class="line number18 index17 alt1"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><p class="cye-lm-tag">We can now get a sorted of list of all entities found from the database by invoking the <em>findAll()</em> method and passing the <em>Sort</em> object as a method parameter.</p>
<div class="note"> <strong>Additional Reading:</strong><p class="cye-lm-tag"></p>
<ul><li><a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-part-two-crud/">Spring Data JPA Tutorial: CRUD</a></li></ul></div><p class="cye-lm-tag">Let’s find out how we can sort the query results of database queries that use the query generation from the method name strategy.</p>
<h4>Sorting the Query Results of Queries That Use the Query Generation From the Method Name Strategy</h4><p class="cye-lm-tag">If we create our database queries from <a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-creating-database-queries-from-method-names/">the method name of our query method</a>, we can sort the query results by adding a new method parameter (<em>Sort</em> object) to the query method.</p>
<p class="cye-lm-tag">The search function of our example application is case-insensitive. It returns todo entries whose title or description contains the given search term. If our query method uses the query generation from the method name strategy, its source code looks as follows:</p>
<div><div id="highlighter_276062" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1 highlighted">8</div><div class="line number9 index8 alt2 highlighted">9</div><div class="line number10 index9 alt1 highlighted">10</div><div class="line number11 index10 alt2">11</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.domain.Sort;</code></div><div class="line number2 index1 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.repository.Repository;</code></div><div class="line number3 index2 alt2">&nbsp;</div><div class="line number4 index3 alt1"><code class="java keyword">import</code> <code class="java plain">java.util.List;</code></div><div class="line number5 index4 alt2">&nbsp;</div><div class="line number6 index5 alt1"><code class="java keyword">interface</code> <code class="java plain">TodoRepository </code><code class="java keyword">extends</code> <code class="java plain">Repository&lt;Todo, Long&gt; {</code></div><div class="line number7 index6 alt2">&nbsp;</div><div class="line number8 index7 alt1 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">List&lt;Todo&gt; findByDescriptionContainsOrTitleContainsAllIgnoreCase(String descriptionPart,</code></div><div class="line number9 index8 alt2 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">String titlePart,</code></div><div class="line number10 index9 alt1 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">Sort sort);</code></div><div class="line number11 index10 alt2"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><div class="note"> <strong>Additional Reading:</strong><p class="cye-lm-tag"></p>
<ul><li><a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-creating-database-queries-from-method-names/">Spring Data JPA Tutorial: Creating Database Queries From Method Names</a></li></ul></div><p class="cye-lm-tag">Let’s move on and find out how we can sort the query results of JPQL queries that are created by using the <em>@Query</em> annotation.</p>
<h4>Sorting the Query Results of JPQL Queries That Use the @Query Annotation</h4><p class="cye-lm-tag">If we create our database queries by using JPQL and <a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-creating-database-queries-with-the-query-annotation/">the <em>@Query</em> annotation</a>, we can sort the query results by adding a new method parameter (<em>Sort</em> object) to the query method.</p>
<div class="note">If you are creating a native query with the <em>@Query</em> annotation, you cannot sort the query results by using the <em>Sort</em> class. You have to add the sorting logic into the SQL query.</div><p class="cye-lm-tag">The search function of our example application is case-insensitive. It returns todo entries whose title or description contains the given search term. If our query method uses the <em>@Query</em> annotation, its source code looks as follows:</p>
<div><div id="highlighter_27114" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2 highlighted">9</div><div class="line number10 index9 alt1 highlighted">10</div><div class="line number11 index10 alt2 highlighted">11</div><div class="line number12 index11 alt1 highlighted">12</div><div class="line number13 index12 alt2">13</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.domain.Sort;</code></div><div class="line number2 index1 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.repository.Repository;</code></div><div class="line number3 index2 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.repository.query.Param;</code></div><div class="line number4 index3 alt1">&nbsp;</div><div class="line number5 index4 alt2"><code class="java keyword">import</code> <code class="java plain">java.util.List;</code></div><div class="line number6 index5 alt1">&nbsp;</div><div class="line number7 index6 alt2"><code class="java keyword">interface</code> <code class="java plain">TodoRepository </code><code class="java keyword">extends</code> <code class="java plain">Repository&lt;Todo, Long&gt; {</code></div><div class="line number8 index7 alt1">&nbsp;</div><div class="line number9 index8 alt2 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Query</code><code class="java plain">(</code><code class="java string">"SELECT t FROM Todo t WHERE "</code> <code class="java plain">+</code></div><div class="line number10 index9 alt1 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java string">"LOWER(t.title) LIKE LOWER(CONCAT('%',:searchTerm, '%')) OR "</code> <code class="java plain">+</code></div><div class="line number11 index10 alt2 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java string">"LOWER(t.description) LIKE LOWER(CONCAT('%',:searchTerm, '%'))"</code><code class="java plain">)</code></div><div class="line number12 index11 alt1 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">List&lt;Todo&gt; findBySearchTerm(</code><code class="java color1">@Param</code><code class="java plain">(</code><code class="java string">"searchTerm"</code><code class="java plain">) String searchTerm, Sort sort);</code></div><div class="line number13 index12 alt2"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><div class="note"> <strong>Additional Reading:</strong><p class="cye-lm-tag"></p>
<ul><li><a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-creating-database-queries-with-the-query-annotation/">Spring Data JPA Tutorial: Creating Database Queries With the @Query Annotation</a></li></ul></div><p class="cye-lm-tag">Let’s move on and find out how we can sort the query results of JPA criteria queries.</p>
<h4>Sorting the Query Results of JPA Criteria Queries</h4><p class="cye-lm-tag">If we create our database queries by using <a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-part-four-jpa-criteria-queries/">the JPA Criteria API</a>, our repository interface must extend the <em>JpaSpecificationExecutor&lt;T&gt;</em> interface. This interface declares one method that we can use when we want to sort the query results of JPA criteria queries:</p>
<ul><li>The <em>List&lt;T&gt; findAll(Specification&lt;T&gt; spec, Sort sort)</em> method returns all entities that fulfil the conditions specified by the <em>Specification</em> object. It sorts the returned entities by using the <em>Sort</em> object given as a method parameter.</li></ul><p class="cye-lm-tag">In other words, we can sort the query results of JPA criteria queries by using the <em>List&lt;T&gt; findAll(Specification&lt;T&gt; spec, Sort sort)</em> method instead of the <em>List&lt;T&gt; findAll(Specification&lt;T&gt; spec)</em> method.</p>
<p class="cye-lm-tag">The source code of the <em>RepositoryTodoSearchService</em> class, which sorts our query results by using the <em>Sort</em> object, looks as follows:</p>
<div><div id="highlighter_183279" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1 highlighted">22</div><div class="line number23 index22 alt2">23</div><div class="line number24 index23 alt1 highlighted">24</div><div class="line number25 index24 alt2">25</div><div class="line number26 index25 alt1">26</div><div class="line number27 index26 alt2">27</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.beans.factory.annotation.Autowired;</code></div><div class="line number2 index1 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.domain.Sort;</code></div><div class="line number3 index2 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.stereotype.Service;</code></div><div class="line number4 index3 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.transaction.annotation.Transactional;</code></div><div class="line number5 index4 alt2"><code class="java spaces">&nbsp;</code>&nbsp;</div><div class="line number6 index5 alt1"><code class="java keyword">import</code> <code class="java plain">java.util.List;</code></div><div class="line number7 index6 alt2"><code class="java spaces">&nbsp;</code>&nbsp;</div><div class="line number8 index7 alt1"><code class="java keyword">import</code> <code class="java keyword">static</code> <code class="java plain">net.petrikainulainen.springdata.jpa.todo.TodoSpecifications.titleOrDescriptionContainsIgnoreCase;</code></div><div class="line number9 index8 alt2"><code class="java spaces">&nbsp;</code>&nbsp;</div><div class="line number10 index9 alt1"><code class="java color1">@Service</code></div><div class="line number11 index10 alt2"><code class="java keyword">final</code> <code class="java keyword">class</code> <code class="java plain">RepositoryTodoSearchService </code><code class="java keyword">implements</code> <code class="java plain">TodoSearchService {</code></div><div class="line number12 index11 alt1"><code class="java spaces">&nbsp;</code>&nbsp;</div><div class="line number13 index12 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java keyword">final</code> <code class="java plain">TodoRepository repository;</code></div><div class="line number14 index13 alt1"><code class="java spaces">&nbsp;</code>&nbsp;</div><div class="line number15 index14 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Autowired</code></div><div class="line number16 index15 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java plain">RepositoryTodoSearchService(TodoRepository repository) {</code></div><div class="line number17 index16 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">this</code><code class="java plain">.repository = repository;</code></div><div class="line number18 index17 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number19 index18 alt2"><code class="java spaces">&nbsp;</code>&nbsp;</div><div class="line number20 index19 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Transactional</code><code class="java plain">(readOnly = </code><code class="java keyword">true</code><code class="java plain">)</code></div><div class="line number21 index20 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Override</code></div><div class="line number22 index21 alt1 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java plain">List&lt;TodoDTO&gt; findBySearchTerm(String searchTerm, Sort sort) {</code></div><div class="line number23 index22 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">Specification&lt;Todo&gt; searchSpec = titleOrDescriptionContainsIgnoreCase(searchTerm);</code></div><div class="line number24 index23 alt1 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">List&lt;Todo&gt; searchResults = repository.findAll(searchSpec, sort);</code></div><div class="line number25 index24 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">return</code> <code class="java plain">TodoMapper.mapEntitiesIntoDTOs(searchResults);</code></div><div class="line number26 index25 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number27 index26 alt2"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><div class="note"> <strong>Additional Reading:</strong><p class="cye-lm-tag"></p>
<ul><li><a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-part-four-jpa-criteria-queries/">Spring Data JPA Tutorial: Creating Database Queries With the JPA Criteria API</a></li><li><a href="http://docs.spring.io/spring-data/jpa/docs/current/api/org/springframework/data/jpa/repository/JpaSpecificationExecutor.html" target="_blank">The Javadoc of the <em>JpaSpecificationExecutor</em> interface</a></li></ul></div><p class="cye-lm-tag">Let’s find out how we can sort the query results of database queries that are created by using Querydsl.</p>
<h2>Sorting Query Results of Querydsl Queries</h2><p class="cye-lm-tag">If we create our database queries by using <a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-part-five-querydsl/">Querydsl</a>, our repository interface must extend the <em>QueryDslPredicateExecutor&lt;T&gt;</em> interface. This interface declares one method that we can use when we want to sort the query results of the invoked query:</p>
<ul><li>The <em>Iterable&lt;T&gt; findAll(Predicate predicate, OrderSpecifier&lt;?&gt;… orders)</em> method returns all entities that fulfil the search conditions specified by the <em>Predicate</em> object and sorts the query results by using the sort options specified by the <em>OrderSpecifier</em> objects.</li></ul><p class="cye-lm-tag">This means that we can sort the query results of an existing Querydsl query by following these steps:</p>
<ol><li>Specify the sorting options by creating new <em>OrderSpecifier</em> objects.</li><li>Invoke the <em>findAll()</em> method, and pass the <em>Predicate</em> and <em>OrderSpecier</em> objects as method parameters.</li></ol><p class="cye-lm-tag">For example, if we want to modify the <em>findBySearchTerm()</em> method of the <em>RepositoryTodoSearchService</em> class to sort the query results in ascending order by using the value of the <em>title</em> field, we have to make following changes to the <em>RepositoryTodoSearchService</em> class:</p>
<ol><li>Add a <em>private orderByTitleAsc()</em> method to the class and implement by returning an <em>OrderSpecifier</em> object which specifies that the search results are sorted in ascending order by using the value of the <em>title</em> field.</li><li>Make the following changes to the <em>findBySearchTerm()</em> method:<ol><li>Get the <em>OrderSpecifier</em> object by invoking the <em>orderByTitleAsc()</em> method.</li><li>Invoke the <em>Iterable&lt;T&gt; findAll(Predicate predicate, OrderSpecifier&lt;?&gt;… orders)</em> method of the <em>QueryDslPredicateExecutor</em> interface instead of the <em>Iterable&lt;T&gt; findAll(Predicate predicate)</em> method. Pass the <em>Predicate</em> and <em>OrderSpecifier</em> objects as method parameters.</li></ol></li></ol><p class="cye-lm-tag">The source code of the <em>RepositoryTodoSearchService</em> class looks as follows:</p>
<div><div id="highlighter_248814" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div class="line number23 index22 alt2">23</div><div class="line number24 index23 alt1">24</div><div class="line number25 index24 alt2 highlighted">25</div><div class="line number26 index25 alt1 highlighted">26</div><div class="line number27 index26 alt2">27</div><div class="line number28 index27 alt1">28</div><div class="line number29 index28 alt2">29</div><div class="line number30 index29 alt1 highlighted">30</div><div class="line number31 index30 alt2 highlighted">31</div><div class="line number32 index31 alt1 highlighted">32</div><div class="line number33 index32 alt2">33</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">import</code> <code class="java plain">com.mysema.query.types.OrderSpecifier;</code></div><div class="line number2 index1 alt1"><code class="java keyword">import</code> <code class="java plain">com.mysema.query.types.Predicate predicate;</code></div><div class="line number3 index2 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.beans.factory.annotation.Autowired;</code></div><div class="line number4 index3 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.stereotype.Service;</code></div><div class="line number5 index4 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.transaction.annotation.Transactional;</code></div><div class="line number6 index5 alt1"><code class="java spaces">&nbsp;</code>&nbsp;</div><div class="line number7 index6 alt2"><code class="java keyword">import</code> <code class="java plain">java.util.List;</code></div><div class="line number8 index7 alt1"><code class="java spaces">&nbsp;</code>&nbsp;</div><div class="line number9 index8 alt2"><code class="java keyword">import</code> <code class="java keyword">static</code> <code class="java plain">net.petrikainulainen.springdata.jpa.todo.TodoPredicates.titleOrDescriptionContainsIgnoreCase;</code></div><div class="line number10 index9 alt1"><code class="java spaces">&nbsp;</code>&nbsp;</div><div class="line number11 index10 alt2"><code class="java color1">@Service</code></div><div class="line number12 index11 alt1"><code class="java keyword">final</code> <code class="java keyword">class</code> <code class="java plain">RepositoryTodoSearchService </code><code class="java keyword">implements</code> <code class="java plain">TodoSearchService {</code></div><div class="line number13 index12 alt2"><code class="java spaces">&nbsp;</code>&nbsp;</div><div class="line number14 index13 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java keyword">final</code> <code class="java plain">TodoRepository repository;</code></div><div class="line number15 index14 alt2"><code class="java spaces">&nbsp;</code>&nbsp;</div><div class="line number16 index15 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Autowired</code></div><div class="line number17 index16 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java plain">RepositoryTodoSearchService(TodoRepository repository) {</code></div><div class="line number18 index17 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">this</code><code class="java plain">.repository = repository;</code></div><div class="line number19 index18 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number20 index19 alt1"><code class="java spaces">&nbsp;</code>&nbsp;</div><div class="line number21 index20 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Transactional</code><code class="java plain">(readOnly = </code><code class="java keyword">true</code><code class="java plain">)</code></div><div class="line number22 index21 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Override</code></div><div class="line number23 index22 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java plain">List&lt;TodoDTO&gt; findBySearchTerm(String searchTerm) {</code></div><div class="line number24 index23 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">Predicate searchPred = titleOrDescriptionContainsIgnoreCase(searchTerm);</code></div><div class="line number25 index24 alt2 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">OrderSpecifier sortSpec = orderByTitleAsc();</code></div><div class="line number26 index25 alt1 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">Iterable&lt;Todo&gt; searchResults = repository.findAll(searchPred, sortSpec);</code></div><div class="line number27 index26 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">return</code> <code class="java plain">TodoMapper.mapEntitiesIntoDTOs(searchResults);</code></div><div class="line number28 index27 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number29 index28 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number30 index29 alt1 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java plain">OrderSpecifier&lt;String&gt; orderByTitleAsc() {</code></div><div class="line number31 index30 alt2 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">return</code> <code class="java plain">QTodo.todo.title.asc();</code></div><div class="line number32 index31 alt1 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number33 index32 alt2"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><div class="note"> <strong>Additional Reading:</strong><p class="cye-lm-tag"></p>
<ul><li><a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-part-five-querydsl/">Spring Data JPA Tutorial: Creating Database Queries With Querydsl</a></li><li><a href="http://www.querydsl.com/static/querydsl/3.4.3/apidocs/com/mysema/query/types/OrderSpecifier.html" target="_blank">The Javadoc of the <em>OrderSpecifier</em> class</a></li><li><a href="http://docs.spring.io/spring-data/commons/docs/current/api/org/springframework/data/querydsl/QueryDslPredicateExecutor.html" target="_blank">The Javadoc of the <em>QueryDslPredicateExecutor</em> interface</a></li></ul></div><p class="cye-lm-tag">Let’s move on and find out which sorting method we should use.</p>
<h2>Which Sorting Method Should We Use?</h2><p class="cye-lm-tag">Sometimes the technique that we use to create our database queries forces us to use a specific sorting method. For example,</p>
<ul><li>If our database queries are named queries or native queries that use the <em>@Query</em> annotation, we must add the sorting logic into our query strings.</li><li>If we create our database queries by using the JPA Criteria API, we have to sort the query results by using the <em>Sort</em> class.</li><li>If we create our database queries by using Querydsl, we have to sort the query results by using the <em>OrderSpecifier</em> class.</li></ul><p class="cye-lm-tag">However, if we have a choice, we should put our query generation logic and sorting logic to the same place because it makes our code easier to read. This means that:</p>
<ul><li>If we create our database queries by using SQL or JPQL, we should add the sorting logic into our query strings.</li><li>If we create our database queries by using the query generation from the method name strategy, we should use the same method for sorting our query results (append the <em>OrderBy</em> keyword to the method name). If we don’t want to use this method because the method name of our query method becomes too long, we should rewrite our query by using the <em>@Query</em> annotation.</li></ul><p class="cye-lm-tag">Nevertheless, there are a couple of situations when we must separate our query generation logic and sorting logic:</p>
<ul><li>If we have to paginate the query results of our database queries, we must sort them by using the <em>Sort</em> class. We will talk more about this in <a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-part-seven-pagination/">the next part of this tutorial</a>.</li><li>If we must support dynamic sorting (i.e. the sorting direction and the used fields can be changed), we must sort our query results by using the <em>Sort</em> class because it is the only way that allows us to fulfil this requirement.</li></ul><p class="cye-lm-tag">Let’s move on and summarize what we learned from this blog post.<br></p>
<p class="cye-lm-tag"></p>
<p class="cye-lm-tag"></p>
<h2>Summary</h2><p class="cye-lm-tag">This blog post has taught us five things:</p>
<ul><li>We can create <em>Sort</em> objects manually or obtain them by using Spring Data web support.</li><li>We can configure Spring Data web support by annotating our application context configuration class with <em>@EnableSpringDataWebSupport</em> annotation.</li><li>We can create <em>OrderSpecifier</em> objects by using the Querydsl query types.</li><li>If the technique that we use for creating our database queries doesn’t force us to use a specific sorting method, we should put our query generation logic and sorting logic to the same place.</li><li>If we have to paginate the query results of our database queries, or we must support dynamic sorting, we must sort the query results by using the <em>Sort</em> class.</li></ul><p class="cye-lm-tag">The next part of this tutorial describes how we can <a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-part-seven-pagination/">paginate the query results of our database queries</a>.</p>
<p class="cye-lm-tag"><strong>P.S.</strong> You can get the example applications of this blog post from Github: <a href="https://github.com/pkainulainen/spring-data-jpa-examples/tree/sorting/query-methods" target="_blank">query methods</a>, <a href="https://github.com/pkainulainen/spring-data-jpa-examples/tree/sorting/criteria-api" target="_blank">JPA Criteria API</a>, and <a href="https://github.com/pkainulainen/spring-data-jpa-examples/tree/sorting/querydsl" target="_blank">Querydsl</a>. If you decide to clone this repository, remember that the examples are found from the <em>sorting</em> branch.</p>
<div class="note">If you want to learn how to use Spring Data JPA, you should read my <a href="/spring-data-jpa-tutorial/">Spring Data JPA tutorial</a>.</div> <span id="tve_leads_end_content" style="display: block; visibility: hidden; border: 1px solid transparent;" class="cye-lm-tag"></span>
</div>

</div>




</div>
</div>
</div>
</div>
</div>
</div><p style="line-height: 24px;" data-unit="px" class="tve_p_center cye-lm-tag"><span class="tve_custom_font_size cye-lm-tag" style="font-size: 16px;">I will never rent, sell, or share your email address.<br></span></p>

</div></div></div></div></div></div></div>
<section id="comments"><div class="comments_intro"><span class="num_comments cye-lm-tag">55</span> comments… <a href="#commentform" rel="nofollow">add one</a></div><ul class="comment_list"><li class="comment even thread-even depth-1" id="comment-4801"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Devin</span>  <span class="comment_date cye-lm-tag">April 12, 2012, 05:40</span></div><div class="comment_text" id="comment-body-4801"><p class="cye-lm-tag">Great work, this blog was a big help for me.  I am just getting into using Spring Data JPA and there is not much info out there on it.  I now understand it.  Thanks.</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-4803"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">April 12, 2012, 08:25</span></div><div class="comment_text" id="comment-body-4803"><p class="cye-lm-tag">Devin,</p>
<p class="cye-lm-tag">thanks for your comment. It was great to hear that I could help you out.</p>
</div> </div></li></ul></li><li class="comment even thread-odd thread-alt depth-1" id="comment-75504"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Thiago Henrique</span>  <span class="comment_date cye-lm-tag">March 18, 2013, 15:08</span></div><div class="comment_text" id="comment-body-75504"><p class="cye-lm-tag">Hi Petry,</p>
<p class="cye-lm-tag">I have one question, how do you using one “Generic” repository, for example:</p>
<p class="cye-lm-tag">public interface GenericRepository<br> extends JpaRepository {</p>
<p class="cye-lm-tag"> //method custom<br> void sharedCustomMethod(ID id);<br> }</p>
<p class="cye-lm-tag">You must have a GenericRepositoryImpl ?</p>
<p class="cye-lm-tag">For I am following the documentation JPA is indicating the use of this form, most here is giving the error: Invalid derived query! In shared property found for type java.lang.Object in the declaration of method.</p>
<p class="cye-lm-tag">can you help me?</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-75878"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petr</span>  <span class="comment_date cye-lm-tag">March 18, 2013, 20:31</span></div><div class="comment_text" id="comment-body-75878"><p class="cye-lm-tag">Are you trying to add methods to a single repository or to all repositories?</p>
<p class="cye-lm-tag">If you are trying to add methods to a single repository, you can follow the instructions given in this blog post: <a href="http://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-part-eight-adding-functionality-to-a-repository/" rel="nofollow">Adding Functionality to a Repository</a>.</p>
<p class="cye-lm-tag">If you want to add methods to all repositories, you should follow the instructions given in the <a href="http://static.springsource.org/spring-data/data-jpa/docs/current/reference/html/repositories.html#repositories.custom-behaviour-for-all-repositories" target="_blank" rel="nofollow">reference manual of Spring Data JPA</a>.</p>
<p class="cye-lm-tag">I hope that this answered to your question.</p>
</div> </div></li></ul></li><li class="comment even thread-even depth-1" id="comment-75979"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Thiago Henrique</span>  <span class="comment_date cye-lm-tag">March 18, 2013, 22:20</span></div><div class="comment_text" id="comment-body-75979"><p class="cye-lm-tag">Hi,</p>
<p class="cye-lm-tag">I need to add methods to all repositories. And I put it as the specification:</p>
<p class="cye-lm-tag">public interface MyRepository<br> extends JpaRepository {</p>
<p class="cye-lm-tag">&nbsp;&nbsp; ClasseX sharedCustomMethod(ID id);<br> }</p>
<p class="cye-lm-tag">But, Is not working, an error occurs saying:</p>
<p class="cye-lm-tag">Invalid derived query! No property found for type sharedCustomMethod com.example.domain.ClasseX.</p>
<p class="cye-lm-tag">So, it if I put anotation @ Query upon the method, the error disappears. For example:</p>
<p class="cye-lm-tag">public interface MyRepository<br> extends JpaRepository {</p>
<p class="cye-lm-tag"> @Query<br> &nbsp;&nbsp; ClasseX sharedCustomMethod(ID id);<br> }</p>
<p class="cye-lm-tag">understand?</p>
<p class="cye-lm-tag">Thank you, for help me!</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-76020"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">March 18, 2013, 23:09</span></div><div class="comment_text" id="comment-body-76020"><p class="cye-lm-tag">The exception is caused by the fact that the Spring Data repository infrastructure thinks that you want to generate the executed query from the method name of your query method and cannot find the <em>sharedCustomMethod</em> property from <em>ClasseX</em> class.</p>
<p class="cye-lm-tag">If you annotate the method with the <em>@Query</em> annotation, the problem disappears because Spring Data JPA executes the query given as the value of the <em>@Query</em> annotation when your query method is called.</p>
<p class="cye-lm-tag">If you want to add custom methods to all repositories, you must follow the instructions given in these resources:</p>
<ul><li><a href="http://static.springsource.org/spring-data/data-jpa/docs/current/reference/html/repositories.html#repositories.custom-behaviour-for-all-repositories" target="_blank" rel="nofollow">The reference manual of Spring Data JPA</a> has a brief description of the required steps.</li><li><a href="http://www.borislam.com/2012/07/customizing-spring-data-jpa-repository.html" target="_blank" rel="nofollow">Customizing Spring Data JPA Repository</a> is a blog post written by Boris Lam and it explains how you can add custom methods to all repositories.</li></ul><p class="cye-lm-tag">I hope that this answered to your question.</p>
</div> </div><ul class="children"><li class="comment even depth-3" id="comment-1521333"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Dmitri Arkhipov</span>  <span class="comment_date cye-lm-tag">February 10, 2017, 04:11</span></div><div class="comment_text" id="comment-body-1521333"><p class="cye-lm-tag">Thank you sir!</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-4" id="comment-1522297"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">February 15, 2017, 18:19</span></div><div class="comment_text" id="comment-body-1522297"><p class="cye-lm-tag">You are welcome!</p>
</div> </div></li></ul></li></ul></li></ul></li><li class="comment even thread-odd thread-alt depth-1" id="comment-117726"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Hendrik</span>  <span class="comment_date cye-lm-tag">April 11, 2013, 18:45</span></div><div class="comment_text" id="comment-body-117726"><p class="cye-lm-tag">Hi, is there a way to sort for a sublist. I have an event which has participants and now I want to find the event with the most participants. Thought something like the following would work.<br> repository.findAll(QEvent.event.participants);<br> or<br> repository.findAll(QEvent.event.participants.size());<br> I think that is a little problem for you but I don’t get it to work.<br> Thanks for your help!</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-120239"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">April 12, 2013, 21:07</span></div><div class="comment_text" id="comment-body-120239"><p class="cye-lm-tag">Hi,</p>
<p class="cye-lm-tag">I think that the easiest way to do this is to create a query method and limit the query results by applying pagination. You can do this by following these steps:</p>
<ol><li>Add the query method to your repository interface. This method returns a list of <em>Event</em> objects and takes a <em>Pageable</em> object as a parameter.</li><li>Annotate the query method with the <em>@Query</em> annotation and set the executed query as its value.</li></ol><p class="cye-lm-tag">The source code of the event repository looks as follows:</p>
<pre><code>
public interface EventRepository extends JpaRepository&lt;Event, Long&gt; {
	
	@Query("SELECT e From Event e ORDER BY e.participants.size DESC")
	public List&lt;Event&gt; findEvents(Pageable page);
}
</code>
</pre><p class="cye-lm-tag">You can now get the Event which has the most participants by using the following code:</p>
<pre><code>
List&lt;Event&gt; events = repository.findEvents(new PageRequest(0, 1))
//Remember to verify that event was found. I left this out for the sake of clarity.
Event mostParticipants = event.get(0);
</code>
</pre><p class="cye-lm-tag">I did not test this but it should do the trick.</p>
</div> </div></li></ul></li><li class="comment even thread-even depth-1" id="comment-129915"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Hendrik</span>  <span class="comment_date cye-lm-tag">April 17, 2013, 11:55</span></div><div class="comment_text" id="comment-body-129915"><p class="cye-lm-tag">Thank you very much!<br> That did it!<br> I thought that there has to be a solution with predicates but with the @Query-annotation works great.</p>
<p class="cye-lm-tag">I have another Problem that I solved in the services but perhaps there is a solution without handling it manually. What is when there are two events with the same number of participants? I want to have that event on first position that has the number of participants at first time.<br> Is there a best practice doing it with a query or would you do that also in the code?</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-148541"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">April 24, 2013, 19:53</span></div><div class="comment_text" id="comment-body-148541"><p class="cye-lm-tag">You are welcome! I am happy that I could help you out.</p>
<p class="cye-lm-tag">About your other problem:</p>
<p class="cye-lm-tag">If your current solution works and it is not a resource hog, I recommend that you continue using it.</p>
<p class="cye-lm-tag">On the other hand, if you want to handle this on database, you can solve this by following these steps:</p>
<ol><li>Add a timestamp field to the <code>Event</code> class. This field is updated every time when a new participant registers to the event.</li><li>Modify the sorting logic of your query to take this new field into account.</li></ol><p class="cye-lm-tag">The source code of your repository interface looks as follows:</p>
<pre><code>
public interface EventRepository extends JpaRepository<event ,="" long=""> {
	
	@Query("SELECT e From Event e ORDER BY e.participants.size DESC,e.regTime ASC")
	public List&lt;Event&gt; findEvents(Pageable page);
}
</event></code>
</pre><p class="cye-lm-tag">I hope that this answered to your question.</p>
</div> </div></li></ul></li><li class="comment even thread-odd thread-alt depth-1" id="comment-150826"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Hendrik</span>  <span class="comment_date cye-lm-tag">April 25, 2013, 14:43</span></div><div class="comment_text" id="comment-body-150826"><p class="cye-lm-tag">The solution with with timestamp was an idea I also had. The problem with this is, that I always have to watch what happens when a participant is canceling its participation. Maybe this is something where it comes to errors in database when it is not well handled. So I think I will try the solution I have at the moment and when I see that it leads to lags I have to think about the solution with the timestamp.</p>
<p class="cye-lm-tag">Thank you again for your great help!</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-151376"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">April 25, 2013, 18:48</span></div><div class="comment_text" id="comment-body-151376"><p class="cye-lm-tag">I agree that dealing with a cancellations can be tricky and you might have to change your domain model in order to solve this problem. I though about this and I think that can you solve this problem by following these steps:</p>
<ol><li>Introduce a new model called <code>Registration</code>. This model contains a reference to the event, participant and a registration timestamp.</li><li>Change the <code>Event</code> class to contain a list of <code>Registration</code> objects.</li><li>When a participant cancels his registration, you have to remove the registration from the associated event.</li><li>Find the most recent registration and update the timestamp of the associated event.</li></ol><p class="cye-lm-tag">I think that this would do the trick.</p>
</div> </div></li></ul></li><li class="comment even thread-even depth-1" id="comment-197004"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Thiago Henrique</span>  <span class="comment_date cye-lm-tag">May 9, 2013, 22:37</span></div><div class="comment_text" id="comment-body-197004"><p class="cye-lm-tag">Hi Petri,</p>
<p class="cye-lm-tag">First I would like to apologize for not responding in time, but I was in an uproar here and I got no time to answer.</p>
<p class="cye-lm-tag">Thank you for your assistance because it was quite valid.</p>
<p class="cye-lm-tag">But now I got a question somewhat puzzling, and his experience must have been through it. It is this: I noticed that in the Spring MVC framework, the business rules of the application hum in the service layer, but if I need specific rules, also more common for the entire application when the use of that object in the service layer. Like, at some point my controller will call the desired service, but prior to persist itself, I’ll run some rules (validations), as it would be? as you do it in your applications in case.</p>
<p class="cye-lm-tag">Thanks again, and look forward …</p>
<p class="cye-lm-tag">PS: If you do not understand can ask what I try to explain better …</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-197204"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">May 9, 2013, 23:46</span></div><div class="comment_text" id="comment-body-197204"><p class="cye-lm-tag">Hi Thiago,</p>
<p class="cye-lm-tag">Don’t worry about not having time to answer to me. I think it is only natural that sometimes we have more important things to take care of.</p>
<p class="cye-lm-tag">About your problem:</p>
<p class="cye-lm-tag">Although it is quite common that Spring applications have business logic in the service layer, I think that the business logic should be added to the domain model. If I understood you correctly, you want to validate that the state of your domain object is correct before you persist it to the database. If this is the case, you probably want to do this check when a new domain object is added to the database or the information of an existing domain object is updated.</p>
<p class="cye-lm-tag">There is a quite clean way to implement this. You do that by following these steps:</p>
<ol><li>Add the validation method to your domain model object. This method should throw an exception if the state of your domain object is invalid.</li><li>Call the validation method before a new domain model object is persisted or existing one is updated. The optimal way to do this is to call the validation method inside your domain object when a new domain object is created or the information of an existing one is changed. This way the other classes which deal with these objects won’t have to do it (you can also change the visibility of the validation method to <code>private</code> so that it is impossible to call it outside your domain model class).</li></ol><p class="cye-lm-tag">I hope that this answered to your question.</p>
</div> </div></li></ul></li><li class="comment even thread-odd thread-alt depth-1" id="comment-262934"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Thiago Henrique</span>  <span class="comment_date cye-lm-tag">May 21, 2013, 20:07</span></div><div class="comment_text" id="comment-body-262934"><p class="cye-lm-tag">Hi Petry,</p>
<p class="cye-lm-tag">Thanks for answer my question, in true i don’t want validate my object, because i’m  using validation via hibernate annotation and BindingResult , then the i want say is validate business rules properly said, in nivel of rules really, for example:</p>
<p class="cye-lm-tag">If one user before be inserted, need to validate if it is active, have dependents and have age above 20 years, where would this validation? understood.</p>
<p class="cye-lm-tag">Most I’ve managed to solve here, I created an interface that defines my methods that must be performed before this insertion, and each service implements this interface, implementing their respective rules.</p>
<p class="cye-lm-tag">Thank again you for your help … it’s people like you that our community needs, willing to help …</p>
<p class="cye-lm-tag">Thank you again!</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-262975"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">May 22, 2013, 10:24</span></div><div class="comment_text" id="comment-body-262975"><p class="cye-lm-tag">Hi Thiago,</p>
<p class="cye-lm-tag">Maybe I did not choose my words wisely in my first answer (the word validation was maybe not a good choice). I will try to clarify what I meant.</p>
<p class="cye-lm-tag">When you are creating a new object or updating the information information of an existing object, you have to implement a two-step validation process. The steps of this process are described in the following:</p>
<p class="cye-lm-tag"><strong>First</strong>, you need to validate that the entered data is “correct”. This validation typically ensures that all the required fields are given and that the given data is “correct”. This is the validation which is done in the controller classes.</p>
<p class="cye-lm-tag"><strong>Second</strong>, you need enforce the business rules of your application. The best place for this logic is to add it to your domain model class. There are basically three reasons for this:</p>
<ul><li>If the business rule changes, you don’t have to change them in multiple locations.</li><li>It  makes your code cleaner (especially the service layer) because the services don’t have to worry about enforcing the business rules of your application.</li><li>When you need to check how the business rules are implemented, you know where to find the implementation.</li></ul><p class="cye-lm-tag">You mentioned that you are enforcing the business rules on the service layer. Although this typical for Spring applications, I think that it has one big problem:</p>
<p class="cye-lm-tag">The service layer should not know when the state of an object is not legal. Only the object in question should know this. I think that the best way to demonstrate this is to think about the following situation:</p>
<p class="cye-lm-tag">Let’s assume that I am a service class and you are an object. I order you to do something. Who should check that you are ready to do it? I think that it would a bit weird if it would be me.</p>
<p class="cye-lm-tag">Here is the source code of a simple domain model class which enforces the business rules when new objects are created or the information of an existing object is updated:</p>
<pre><code>
public class Person {

    private int age;

    //If you use a builder pattern for creating your objects, you can
    //call the enforceBusinessRules() method in the build() method.
    public Person(int age) throws Exception {
        this.age = age;
        enforceBusinessRules();
    }

    public void update(int age) throws Exception {
        this.age = age;
        enforceBusinessRules();
    }
	
    //Decide whether you want to throw a checked exception or not.
    private void enforceBusinessRules() throws Exception {
        if (this.age &lt; 18) {
            throw new Exception("Too young");
        }
    }
}
</code>
</pre><p class="cye-lm-tag">I hope that this answered to your question.</p>
</div> </div></li></ul></li><li class="comment even thread-even depth-1" id="comment-730074"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Jueser</span>  <span class="comment_date cye-lm-tag">July 17, 2014, 02:26</span></div><div class="comment_text" id="comment-body-730074"><p class="cye-lm-tag">You’re amazing my friend, Congratulations for your great tutorials.<br> Thank you a lot, has been very useful to me.</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-730566"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">July 17, 2014, 17:05</span></div><div class="comment_text" id="comment-body-730566"><p class="cye-lm-tag">Thank you for your kind words. I really appreciate them. It is is good to hear that these tutorials have been useful to you.</p>
</div> </div></li></ul></li><li class="comment even thread-odd thread-alt depth-1" id="comment-849038"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">YongHun</span>  <span class="comment_date cye-lm-tag">October 4, 2014, 12:23</span></div><div class="comment_text" id="comment-body-849038"><p class="cye-lm-tag">Great!</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-849494"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">October 4, 2014, 16:46</span></div><div class="comment_text" id="comment-body-849494"><p class="cye-lm-tag">Thanks!</p>
</div> </div></li></ul></li><li class="comment even thread-even depth-1" id="comment-991501"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Olli</span>  <span class="comment_date cye-lm-tag">November 20, 2014, 09:48</span></div><div class="comment_text" id="comment-body-991501"><p class="cye-lm-tag">Great examples, I especially like that you have also examples of unit tests :) Spring Data JPA documentation sucks, for example using Sort there’s zero lines of howto use it.</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-991510"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">November 20, 2014, 09:55</span></div><div class="comment_text" id="comment-body-991510"><p class="cye-lm-tag">Olli,</p>
<p class="cye-lm-tag">thank you for your kind words.</p>
<p class="cye-lm-tag">You might want to check out my blog post titled: <a href="https://www.petrikainulainen.net/programming/solr/spring-data-solr-tutorial-sorting/" rel="nofollow">Spring Data Solr Tutorial: Sorting</a>. It has a section titled: ‘Specifying the Sort Options of a Query’ that explains how you can create new <code>Sort</code> objects.</p>
<p class="cye-lm-tag">Also, I plan to update my Spring Data JPA tutorial since my current tutorial is a bit obsolete. Thanks for pointing out that I can search inspiration from the reference manual of Spring Data JPA.</p>
</div> </div></li></ul></li><li class="comment even thread-odd thread-alt depth-1" id="comment-1056686"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">mark</span>  <span class="comment_date cye-lm-tag">December 19, 2014, 04:41</span></div><div class="comment_text" id="comment-body-1056686"><p class="cye-lm-tag">Kiitos suuri blogi (I hope that means, thanks for your great blog)<br> It had the best explanation for the sorting in the repository methods. However, I could still find no way to sort beyond the basic field name, like this:</p>
<pre><code>
private Sort sortByTranslitDesc() {
	return new Sort(Sort.Direction.DESC, "translit");
}
</code>
</pre><p class="cye-lm-tag">I want to sort on an expression on a field name, like this:</p>
<pre><code>
private Sort sortByTranslitLengthDesc() {
	return new Sort(Sort.Direction.DESC, "translit.length");
}
</code>
</pre><p class="cye-lm-tag">Is that possible?</p>
<p class="cye-lm-tag">Thanks<br> Mark.</p>
</div> </div><ul class="children"><li class="comment odd alt depth-2" id="comment-1058074"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Anonymous</span>  <span class="comment_date cye-lm-tag">December 19, 2014, 20:32</span></div><div class="comment_text" id="comment-body-1058074"><p class="cye-lm-tag">I might have solved my own problem like this in a named Query (taken from another post on this page)</p>
<pre><code>
@Query(
"SELECT l FROM GreekLetter l WHERE l.translit Like :search% ORDER BY length(l.translit) Desc"
)
public List findByTranslitLengthDesc(@Param("search") String translit);
</code>
</pre><p class="cye-lm-tag">Still would have been nice if something like this would have worked:</p>
<pre><code>
private Sort sortByTranslitLengthDesc() {
	// instead of translit.length
	return new Sort(Sort.Direction.DESC, “length(translit)”); 
}
</code>
</pre></div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-3" id="comment-1058188"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">December 19, 2014, 21:45</span></div><div class="comment_text" id="comment-body-1058188"><p class="cye-lm-tag">Hi,</p>
<p class="cye-lm-tag">I am sorry that it took me some time to answer to your question. I have been trying to find a solution to the same problem for a while now, but I haven’t been able to find a way to do this by using the <code>Sort</code> class.</p>
<p class="cye-lm-tag"><a href="http://docs.spring.io/spring-data/data-commons/docs/current/api/org/springframework/data/domain/Sort.html?is-external=true" target="_blank" rel="nofollow">The Javadoc of the <code>Sort</code> class</a> states that:</p>
<blockquote><p class="cye-lm-tag">Sort option for queries. You have to provide at least a list of properties to sort for that must not include null or empty strings.</p>
</blockquote><p class="cye-lm-tag">I assume that you can use the <code>Sort</code> class only when you want to sort your query results by using the values of your entity’s properties. That is why you cannot use it if you want to sort your query results by using the size of the associated collection (it would require a some kind of expression support that seems to be missing).</p>
<p class="cye-lm-tag">In other words, as far as I know, you have to use JPQL to solve this problem. However, I would love to be wrong.</p>
</div> </div></li></ul></li></ul></li><li class="comment odd alt thread-even depth-1" id="comment-1255056"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Pietro Bonanno</span>  <span class="comment_date cye-lm-tag">August 12, 2015, 00:10</span></div><div class="comment_text" id="comment-body-1255056"><p class="cye-lm-tag">Thanks for this really in-depth analysis of sorting with our loved Spring!</p>
<p class="cye-lm-tag">In my limited experience, I found myself to use less and less these annotations/hierarchies. Most of the time I have to optimize my queries, joining with other entities or returning a subset of entity’s properties.</p>
<p class="cye-lm-tag">So I end with writing a whole querydsl query (starting from Entity Manager) and missing all these goodies.</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-1255252"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">August 12, 2015, 09:24</span></div><div class="comment_text" id="comment-body-1255252"><p class="cye-lm-tag">Thank you for your kind words! I really appreciate them.</p>
<blockquote><p class="cye-lm-tag">In my limited experience, I found myself to use less and less these annotations/hierarchies. Most of the time I have to optimize my queries, joining with other entities or returning a subset of entity’s properties.</p>
</blockquote><p class="cye-lm-tag">I have noticed the same thing. Although I prefer using the <code>@Query</code> annotation, the syntax that is required to query DTOs is pretty awful. That is why I often end up adding custom methods into my repository interfaces.</p>
<blockquote><p class="cye-lm-tag">So I end with writing a whole querydsl query (starting from Entity Manager) and missing all these goodies.</p>
</blockquote><p class="cye-lm-tag">I use <a href="http://docs.spring.io/spring/docs/4.1.x/javadoc-api/org/springframework/jdbc/core/namedparam/NamedParameterJdbcTemplate.html" target="_blank" rel="nofollow"><code>NamedParameterJdbcTemplate</code></a> and <a href="http://docs.spring.io/spring/docs/4.1.x/javadoc-api/org/springframework/jdbc/core/BeanPropertyRowMapper.html" target="_blank" rel="nofollow"><code>BeanPropertyRowMapper</code></a> for this purpose. Of course, if I need to create dynamic queries, I will use Querydsl (if it is possible).</p>
</div> </div></li></ul></li><li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1255339"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Anonymous</span>  <span class="comment_date cye-lm-tag">August 12, 2015, 14:30</span></div><div class="comment_text" id="comment-body-1255339"><p class="cye-lm-tag">@service</p>
<pre><code>
commitTwoRep() {
	emp.save(empEntity);
	dept.save(depEnitywithIncorrectLength);
}
</code>
</pre><p class="cye-lm-tag">I thought emp.save would not save since depEnity has wrong length (max is 4, i have passed 10).</p>
<p class="cye-lm-tag">what happens is, emp entity saved successfully and dept.save throws Exception for max length.</p>
<p class="cye-lm-tag">is there anything to be done?</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-1255433"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">August 12, 2015, 20:26</span></div><div class="comment_text" id="comment-body-1255433"><p class="cye-lm-tag">Is the <code>commitTwoRep()</code> method invoked inside a transaction? If the <code>emp</code> entity is saved even though the <code>dept.save()</code> method throws an exception, I assume that you are not using transactions. If you don’t know how to use the declarative transaction management, read the section <a href="http://docs.spring.io/spring/docs/4.1.x/spring-framework-reference/htmlsingle/#transaction-declarative" target="_blank" rel="nofollow">12.5 Declarative transaction management</a> of the Spring Framework reference documentation.</p>
</div> </div><ul class="children"><li class="comment odd alt depth-3" id="comment-1255675"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Anonymous</span>  <span class="comment_date cye-lm-tag">August 13, 2015, 07:26</span></div><div class="comment_text" id="comment-body-1255675"><p class="cye-lm-tag">Yes, you are right. commitTwoRep()  has declared as Transnational.</p>
<p class="cye-lm-tag">@Transactional  //this was missing in the previous comment<br> commitTwoRep() {</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-4" id="comment-1255858"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">August 13, 2015, 19:51</span></div><div class="comment_text" id="comment-body-1255858"><p class="cye-lm-tag">Is the <code>commitTwoRep()</code> method public? If it is not public, you should make it public because the <code>@Transactional</code> annotation works only when the annotated method is public.</p>
<p class="cye-lm-tag">If the method is public, it is impossible to say what is wrong because I am not able to debug your code (or see your app context configuration). Can you add the whole class and your application context configuration to <a href="http://pastebin.com/" target="_blank" rel="nofollow">Pastebin.com</a>?</p>
<p class="cye-lm-tag">If you cannot share your code, you should check out a blog post titled: <a href="http://blog.timmattison.com/archives/2012/04/19/tips-for-debugging-springs-transactional-annotation/" target="_blank" rel="nofollow">Tips for Debugging Spring’s <code>@Transactional</code> Annotation</a>.</p>
</div> </div></li></ul></li></ul></li></ul></li><li class="comment odd alt thread-even depth-1" id="comment-1257638"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">SANKAR</span>  <span class="comment_date cye-lm-tag">August 17, 2015, 13:39</span></div><div class="comment_text" id="comment-body-1257638"><p class="cye-lm-tag">Can we use In operator in native query to delete records? seems its not working.</p>
<pre><code>
interface subjectRepo extends JpaRepository {
	@Modifying
	@Query(
		value = "delete from subject where regno=:regno and subjectcode in (:subjectcode)", 
		nativeQuery = true
	)
	void deletesubjects(@Param("regno") String regno, 
						@Param("subjectcode") String subjectcode);
}
</code>
</pre></div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-1258680"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">August 19, 2015, 21:01</span></div><div class="comment_text" id="comment-body-1258680"><p class="cye-lm-tag">Yes. Because I had never used the <code>IN</code> operator in a native query, I did a small test and noticed that we can use it in native queries as well.</p>
<p class="cye-lm-tag"><strong>First</strong>, if you want to find something from the database, you can use this query method:</p>
<pre><code>
interface TodoRepository extends Repository&lt;Todo, Long&gt; {

    @Query(value = "SELECT * FROM todos t WHERE t.id IN :ids",
            nativeQuery = true
    )
    List<todo> findByIds(@Param("ids") List&lt;Long&gt; ids);
}
</todo></code>
</pre><p class="cye-lm-tag"><strong>Second</strong>, if you want to delete something from the database, you can use this query method:</p>
<pre><code>
interface TodoRepository extends Repository&lt;Todo, Long&gt; {

    @Modifying
    @Query(value = "DELETE FROM todos t WHERE t.id IN :ids",
            nativeQuery = true
    )
    void deleteByIds(@Param("ids") List&lt;Long&gt; ids);
}
</code>
</pre><p class="cye-lm-tag">If you have any additional questions, don’t hesitate to ask them.</p>
</div> </div></li></ul></li><li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1326423"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">sankar</span>  <span class="comment_date cye-lm-tag">December 8, 2015, 07:48</span></div><div class="comment_text" id="comment-body-1326423"><p class="cye-lm-tag">Hi, I have been using JpaRepository in my application, now i have to save around 2000 entities.</p>
<p class="cye-lm-tag">is it advisable to use save (Interable EntityList&gt;, what is the maximum entities can be saved in one transaction? or what is the best limit?</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-1326758"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">December 8, 2015, 21:24</span></div><div class="comment_text" id="comment-body-1326758"><p class="cye-lm-tag">Hi Sankar,</p>
<p class="cye-lm-tag">It’s hard to give specific advice because this really depends from your use case and the saved entity. The only way to know this is to profile your application and see how it behaves when you try to save 10, 50, 100, 500, 1000, and 2000 entities. Basically the idea is to save X entities inside one transaction and see which X fulfills your performance requirements.</p>
<p class="cye-lm-tag">Is there a reason why you want to save so many entities inside one transaction?</p>
</div> </div><ul class="children"><li class="comment odd alt depth-3" id="comment-1328173"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Anonymous</span>  <span class="comment_date cye-lm-tag">December 11, 2015, 09:08</span></div><div class="comment_text" id="comment-body-1328173"><p class="cye-lm-tag">Its like recreating groups for a company. Delete old groups emp and recreate new groups for all the emp.</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-4" id="comment-1330381"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">December 14, 2015, 21:03</span></div><div class="comment_text" id="comment-body-1330381"><p class="cye-lm-tag">Is this a batch job? If so, you should consider using <a href="http://projects.spring.io/spring-batch/" target="_blank" rel="nofollow">Spring Batch</a>.</p>
</div> </div></li></ul></li></ul></li></ul></li><li class="comment odd alt thread-even depth-1" id="comment-1346316"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Brent</span>  <span class="comment_date cye-lm-tag">January 12, 2016, 08:51</span></div><div class="comment_text" id="comment-body-1346316"><p class="cye-lm-tag">Hi Petri,</p>
<p class="cye-lm-tag">Your blog is amazing! It’s really helpful to me.</p>
<p class="cye-lm-tag">I’m a beginner to Spring-data-jpa, so it’s not surprised that I have met many questions, thanks for your detailed examples, I have solved most of them. But recently I was stuck by one question:</p>
<p class="cye-lm-tag">I want to add collation variable in query, so I can execute query like below dynamically:</p>
<pre><code>
Select b.* from Business b Order by b.name desc COLLATE "en_US" 
</code><code>
</code></pre><p class="cye-lm-tag">I mean the b.name, direction and "en_US" should be variables.</p>
<p class="cye-lm-tag">Do you have a proper solution? Thanks in advance.</p>
<p class="cye-lm-tag">Best Wishes!<br> Brent.</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-1346745"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">January 12, 2016, 22:18</span></div><div class="comment_text" id="comment-body-1346745"><p class="cye-lm-tag">Hi Brent,</p>
<p class="cye-lm-tag">If you want to specify the name of the sort property (e.g. <code>b.name</code>) and the sort direction (e.g. <code>desc</code>) dynamically, you need sort your query results by using the <code>Sort</code> class (this is explained in this blog post).</p>
<p class="cye-lm-tag">However, JPQL doesn’t support the <code>COLLATE</code> keyword. This means that you have to use SQL query for this purpose. The problem is that AFAIK you cannot set the sort field and the sort order dynamically if you use native queries with Spring Data JPA.</p>
<p class="cye-lm-tag">In other words, it seems that you cannot fulfill your requirements with Spring Data JPA.</p>
</div> </div><ul class="children"><li class="comment odd alt depth-3" id="comment-1346876"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Brent</span>  <span class="comment_date cye-lm-tag">January 13, 2016, 03:31</span></div><div class="comment_text" id="comment-body-1346876"><p class="cye-lm-tag">Hi Petri,</p>
<p class="cye-lm-tag">Thanks for your guidance. Do you mean that even I choose native SQL, it’s still impossible to add COLLATE keyword in the query? So I have to turn to Spring jdbcTemplate or something related to dialect?</p>
<p class="cye-lm-tag">Thanks.<br> Brent.</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-4" id="comment-1347014"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">January 13, 2016, 09:22</span></div><div class="comment_text" id="comment-body-1347014"><p class="cye-lm-tag">Hi Brent,</p>
<p class="cye-lm-tag">I meant that AFAIK you cannot support dynamic sorting (specify sort property and direction) and use the <code>COLLATE</code> keyword at the same time (if you use Spring Data JPA). It seems that your “best” choice is to use <code>JdbcTemplate</code>.</p>
</div> </div></li></ul></li></ul></li></ul></li><li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1379704"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Juanca</span>  <span class="comment_date cye-lm-tag">February 25, 2016, 14:36</span></div><div class="comment_text" id="comment-body-1379704"><p class="cye-lm-tag">Hi, thank you for this post!</p>
<p class="cye-lm-tag">This was useful to implement an example with spring data, but now I want to do the unit test but I don’t know to to mock the Pageable object. I have the following code:</p>
<pre><code>
@Service
@Transactional
public class WorkerServiceImpl implements WorkerService {
	
	@Autowired
	private WorkerRepository workerRepository;

	public Page findAll(int page, int size) {
		Pageable pageable = new PageRequest(page - 1,size, Direction.ASC,"id");
		return workerRepository.findAll(pageable);
	}
}
</code>
</pre><p class="cye-lm-tag">could you help me please?, I don’t know how to create a mockito object to test this method, I have been searching some example but I don’t found anything that can be useful.</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-1379861"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">February 25, 2016, 20:52</span></div><div class="comment_text" id="comment-body-1379861"><p class="cye-lm-tag">Hi Juanca,</p>
<p class="cye-lm-tag"><strong>First</strong>, if you want to verify that your service method returns the correct objects, you need to create a <code>WorkerRepository</code> mock in your setup method. After you have done this, you can configure it to return a list of <code>Worker</code> objects by using the following code:</p>
<pre><code>
List&lt;Worker&gt; workers = new ArrayList&lt;&gt;();

//If you want to use "normal" Mockito
when(workerRepository.findAll(isA(Pageable.class))).thenReturn(workers);

//If you want to use BDDMockito
given(workerRepository.findAll(isA(Pageable.class))).willReturn(workers);
</code>
</pre><p class="cye-lm-tag"><strong>Second</strong>, if you want to verify that your service method creates a <code>Pageable</code> object with correct page number and page size, you have to use <a href="http://site.mockito.org/mockito/docs/1.10.19/org/mockito/Mockito.html#15" target="_blank" rel="nofollow">argument captors</a>. You can do this by using the following code:</p>
<pre><code>
ArgumentCaptor&lt;Pageable&gt; pageableArgument = ArgumentCaptor.forClass(Pageable.class);
verify(workerRepository, times(1)).findAll(pageableArgument.capture());

Pageable actualPageable = pageableArgument.getValue()
//Write assertions here
</code>
</pre><p class="cye-lm-tag"><strong>P.S.</strong> If you use Java 8, you might want to read <a href="https://www.petrikainulainen.net/programming/testing/writing-clean-tests-java-8-to-the-rescue/" rel="nofollow">this blog post</a>.</p>
</div> </div><ul class="children"><li class="comment odd alt depth-3" id="comment-1380403"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Juanca</span>  <span class="comment_date cye-lm-tag">February 26, 2016, 15:30</span></div><div class="comment_text" id="comment-body-1380403"><p class="cye-lm-tag">Thank you so much Petri, it was very useful your help.</p>
<p class="cye-lm-tag">Kind regards,</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-4" id="comment-1380502"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">February 26, 2016, 18:59</span></div><div class="comment_text" id="comment-body-1380502"><p class="cye-lm-tag">You are welcome!</p>
</div> </div></li></ul></li></ul></li></ul></li><li class="comment odd alt thread-even depth-1" id="comment-1407019"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Anaice</span>  <span class="comment_date cye-lm-tag">April 1, 2016, 01:54</span></div><div class="comment_text" id="comment-body-1407019"><p class="cye-lm-tag">Hi Petri,</p>
<p class="cye-lm-tag">Your website is awesome!<br> Can you help me? How do I change the name of the query parameters used in Pageable ? By default they are size = and page= . If I needed to change pageSize = and currentPage= . What would be the best approach?<br> Thanks!</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-1407660"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">April 1, 2016, 18:37</span></div><div class="comment_text" id="comment-body-1407660"><p class="cye-lm-tag">Hi Anaice,</p>
<p class="cye-lm-tag">You need to customize the default configuration provided by Spring Data JPA. The Reference Documentation of Spring Data JPA <a href="http://docs.spring.io/spring-data/jpa/docs/current/reference/html/#core.web" target="_blank" rel="nofollow">describes how you can do this</a>:</p>
<blockquote><p class="cye-lm-tag">To customize this behavior extend either <code>SpringDataWebConfiguration</code> or the HATEOAS-enabled equivalent and override the <code>pageableResolver()</code> or <code>sortResolver()</code> methods and import your customized configuration file instead of using the <code>@Enable</code>-annotation.</p>
</blockquote><p class="cye-lm-tag">In your case, you have to override the <code>pageableResolver()</code> method and implement it by following these steps:</p>
<ol><li>Create a new <code>PageableHandlerMethodArgumentResolver</code> object.</li><li>Change the parameter names by using the <code>setPageParameterName()</code> and <code>setSizeParameterName()</code> methods.</li><li>Return the created object.</li></ol><p class="cye-lm-tag">If you have any additional questions, don’t hesitate to ask them.</p>
</div> </div><ul class="children"><li class="comment odd alt depth-3" id="comment-1407746"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Anaice</span>  <span class="comment_date cye-lm-tag">April 1, 2016, 20:34</span></div><div class="comment_text" id="comment-body-1407746"><p class="cye-lm-tag">Hi Petri,</p>
<p class="cye-lm-tag">Accurate as always.<br> Thank you very much!</p>
<pre><code>
public class MySpringDataWebConfiguration extends SpringDataWebConfiguration{
	
	@Override
	public PageableHandlerMethodArgumentResolver pageableResolver() {
		PageableHandlerMethodArgumentResolver resolver = 
			new PageableHandlerMethodArgumentResolver();
		resolver.setPageParameterName("currentPage"); //url mapping changed
		resolver.setSizeParameterName("itemsPerPage"); //url mapping changed
		return resolver;
	}
}

public class AppInitializer extends AbstractAnnotationConfigDispatcherServletInitializer {
	@Override
	protected Class[] getRootConfigClasses() {
		return new Class[]  { MyAppContext.class, MySpringDataWebConfiguration.class };
	}

	@Override
	protected Class[] getServletConfigClasses() {
		return null;
	}

	@Override
	protected String[] getServletMappings() {
		return new String[] {"/*"};
	}	
}
</code>
</pre></div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-4" id="comment-1409761"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">April 3, 2016, 15:18</span></div><div class="comment_text" id="comment-body-1409761"><p class="cye-lm-tag">Hi Anaice,</p>
<p class="cye-lm-tag">You are welcome. I am happy to hear that you were able to solve your problem. Also, thank you for sharing your solution. I bet that it is useful to other people who have the same problem.</p>
</div> </div></li></ul></li></ul></li></ul></li><li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1451334"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">enigma</span>  <span class="comment_date cye-lm-tag">June 2, 2016, 17:08</span></div><div class="comment_text" id="comment-body-1451334"><p class="cye-lm-tag">Is it possible to have a complex sort query to be written in specification?<br> eg, a simple table with 3 columns<br> (ID date_of_death date_of_birth)<br> Now i want to order based on 2 date columns, with a simple logic written in sql may look like</p>
<p class="cye-lm-tag">Select ID,date_of_birth,date_of_death  from SOMETABLE ORDER BY CASE<br> WHEN date_of_birth IS NULL THEN date_of_death<br> WHEN date_of_death  IS NULL THEN date_of_birth<br> WHEN date_of_birth &lt; date_of_death   THEN date_of_birth</p>
<p class="cye-lm-tag">END;</p>
<p class="cye-lm-tag">Could you please enlighten me if it's possible</p>
</div> </div></li><li class="comment even thread-even depth-1" id="comment-1514881"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Krish</span>  <span class="comment_date cye-lm-tag">December 30, 2016, 14:23</span></div><div class="comment_text" id="comment-body-1514881"><p class="cye-lm-tag">Hi,<br> Very nice tutorial. A lot example  queries you mentioned. I was wondering is there any possible query for finding only one random id? Thanks for your efforts. really appreciated.</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-1515111"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">December 31, 2016, 10:01</span></div><div class="comment_text" id="comment-body-1515111"><p class="cye-lm-tag">Hi,</p>
<p class="cye-lm-tag">It is possible, but you need to use SQL. This <a href="http://www.petefreitag.com/item/466.cfm" target="_blank" rel="nofollow">blog post</a> explains how you can select a random database row when you are using MySQL, PostgreSQL, Microsoft SQL Server, DB2, or Oracle. That being said, this query might be quite slow (<a href="http://www.titov.net/2005/09/21/do-not-use-order-by-rand-or-how-to-get-random-rows-from-table/" target="_blank" rel="nofollow">more details</a>).</p>
</div> </div></li></ul></li></ul></div> </section>
<br><hr>

<h2>12 Pagination</h2>
<div class="post_content cye-lm-tag" itemprop="articleBody"><p class="cye-lm-tag">My <a href="/spring-data-jpa-tutorial/">Spring Data JPA tutorial</a> has taught us how we can create database queries and sort our query results with Spring Data JPA.</p>
<p class="cye-lm-tag">We have also implemented a search function that ignores case and returns todo entries whose title or description contains the given search term. This search function sorts the returned todo entries in ascending order by using the title of the returned todo entry.</p>
<p class="cye-lm-tag">However, we are not done yet. Our example application has one serious flaw:</p>
<p class="cye-lm-tag"><strong>It returns all todo entries that are found from the database, and this is a performance problem.</strong></p>
<p class="cye-lm-tag">This blog post helps us to eliminate this flaw. Let’s get started.</p>
<div class="note"> <strong>Additional Reading:</strong><p class="cye-lm-tag"></p>
<p class="cye-lm-tag">If you are not familiar with Spring Data JPA, <strong>you should read</strong> the following blog posts before you continue reading this blog post:</p>
<ul><li><a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-introduction/">Spring Data JPA Tutorial: Introduction</a> provides a quick introduction to Spring Data JPA and gives an overview of the Spring Data repository interfaces.</li><li><a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-getting-the-required-dependencies/">Spring Data JPA Tutorial: Getting the Required Dependencies</a> describes how you can get the required dependencies.</li><li><a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-part-one-configuration/">Spring Data JPA Tutorial: Configuration</a> describes how you can configure the persistence layer of a Spring application that uses Spring Data JPA.</li><li><a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-introduction-to-query-methods/">Spring Data JPA Tutorial: Introduction to Query Methods</a> describes how you can pass method parameters to your query methods and identifies the “legal” return values of Spring Data JPA query methods.</li><li><a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-creating-database-queries-from-method-names/">Spring Data JPA Tutorial: Creating Database Queries From Method Names</a> describes how you can create database queries from the method names of your query methods.</li><li><a href="http://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-creating-database-queries-with-the-query-annotation/">Spring Data JPA Tutorial: Creating Database Queries With the <em>@Query</em> Annotation</a> describes how you can create database queries by annotating your query methods with the <em>@Query</em> annotation.</li><li><a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-creating-database-queries-with-named-queries/">Spring Data JPA Tutorial: Creating Database Queries With Named Queries</a> describes how you can create database queries by using named queries.</li><li><a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-part-four-jpa-criteria-queries/">Spring Data JPA Tutorial: Creating Database Queries With the JPA Criteria API</a> describes how you can create dynamic queries by using the JPA Criteria API.</li><li><a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-part-five-querydsl/">Spring Data JPA Tutorial: Creating Database Queries With Querydsl</a> describes how you can create dynamic database queries by using Querydsl.</li><li><a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-part-six-sorting/">Spring Data JPA Tutorial: Sorting</a> describes how you can sort your query results.</li></ul></div><h2>Paginating the Query Results of Our Database Queries</h2><p class="cye-lm-tag">We can paginate the query results of our database queries by following these steps:</p>
<ol><li>Obtain the <em>Pageable</em> object that specifies the information of the requested page.</li><li>Pass the <em>Pageable</em> object forward to the correct repository method as a method parameter.</li></ol><p class="cye-lm-tag">Let’s start by finding out how we can obtain the <em>Pageable</em> object.<br></p>
<p class="cye-lm-tag"></p>
<p class="cye-lm-tag"></p>
<h3>Obtaining the Pageable Object</h3><p class="cye-lm-tag">We can obtain the <em>Pageable</em> object by using these two methods:</p>
<ul><li>We can create it manually.</li><li>We can use <a href="http://docs.spring.io/spring-data/jpa/docs/1.8.x/reference/html/#core.web" target="_blank">Spring Data web support</a>.</li></ul><p class="cye-lm-tag">Let’s start by creating the <em>Pageable</em> object manually.</p>
<h4>Creating the Pageable Object Manually</h4><p class="cye-lm-tag">If we want create the <em>Pageable</em> object manually, the service class (or other component) that wants to paginate the query results, which are returned by a Spring Data JPA repository, must create the <em>Pageable</em> object and pass it forward to the invoked repository method.</p>
<p class="cye-lm-tag">The source code of the <em>RepositoryTodoSearchService</em> class, which uses this method, looks as follows:</p>
<div><div id="highlighter_195374" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2 highlighted">19</div><div class="line number20 index19 alt1 highlighted">20</div><div class="line number21 index20 alt2 highlighted">21</div><div class="line number22 index21 alt1 highlighted">22</div><div class="line number23 index22 alt2 highlighted">23</div><div class="line number24 index23 alt1 highlighted">24</div><div class="line number25 index24 alt2 highlighted">25</div><div class="line number26 index25 alt1 highlighted">26</div><div class="line number27 index26 alt2 highlighted">27</div><div class="line number28 index27 alt1 highlighted">28</div><div class="line number29 index28 alt2">29</div><div class="line number30 index29 alt1 highlighted">30</div><div class="line number31 index30 alt2 highlighted">31</div><div class="line number32 index31 alt1 highlighted">32</div><div class="line number33 index32 alt2">33</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.beans.factory.annotation.Autowired;</code></div><div class="line number2 index1 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.domain.Page;</code></div><div class="line number3 index2 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.domain.Pageable;</code></div><div class="line number4 index3 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.stereotype.Service;</code></div><div class="line number5 index4 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.transaction.annotation.Transactional;</code></div><div class="line number6 index5 alt1"><code class="java spaces">&nbsp;</code>&nbsp;</div><div class="line number7 index6 alt2"><code class="java keyword">import</code> <code class="java plain">java.util.List;</code></div><div class="line number8 index7 alt1"><code class="java spaces">&nbsp;</code>&nbsp;</div><div class="line number9 index8 alt2"><code class="java color1">@Service</code></div><div class="line number10 index9 alt1"><code class="java keyword">final</code> <code class="java keyword">class</code> <code class="java plain">RepositoryTodoSearchService </code><code class="java keyword">implements</code> <code class="java plain">TodoSearchService {</code></div><div class="line number11 index10 alt2"><code class="java spaces">&nbsp;</code>&nbsp;</div><div class="line number12 index11 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java keyword">final</code> <code class="java plain">TodoRepository repository;</code></div><div class="line number13 index12 alt2"><code class="java spaces">&nbsp;</code>&nbsp;</div><div class="line number14 index13 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Autowired</code></div><div class="line number15 index14 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java plain">RepositoryTodoSearchService(TodoRepository repository) {</code></div><div class="line number16 index15 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">this</code><code class="java plain">.repository = repository;</code></div><div class="line number17 index16 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number18 index17 alt1"><code class="java spaces">&nbsp;</code>&nbsp;</div><div class="line number19 index18 alt2 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Transactional</code><code class="java plain">(readOnly = </code><code class="java keyword">true</code><code class="java plain">)</code></div><div class="line number20 index19 alt1 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Override</code></div><div class="line number21 index20 alt2 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java plain">Page&lt;TodoDTO&gt; findBySearchTerm(String searchTerm) {</code></div><div class="line number22 index21 alt1 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">Pageable pageRequest = createPageRequest()</code></div><div class="line number23 index22 alt2 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number24 index23 alt1 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java comments">//Obtain search results by invoking the preferred repository method.</code></div><div class="line number25 index24 alt2 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">Page&lt;Todo&gt; searchResultPage = ...</code></div><div class="line number26 index25 alt1 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number27 index26 alt2 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">return</code> <code class="java plain">TodoMapper.mapEntityPageIntoDTOPage(pageRequest, searchResultPage);</code></div><div class="line number28 index27 alt1 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number29 index28 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number30 index29 alt1 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java plain">Pageable createPageRequest() {</code></div><div class="line number31 index30 alt2 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java comments">//Create a new Pageable object here.</code></div><div class="line number32 index31 alt1 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number33 index32 alt2"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><p class="cye-lm-tag">The following examples demonstrate how we can implement the private <em>createPageRequest()</em> method:</p>
<p class="cye-lm-tag"><strong>Example 1:</strong><br> If we want to get the first page by using page size 10, we have to create the <em>Pageable</em> object by using the following code:</p>
<div><div id="highlighter_296927" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">private</code> <code class="java plain">Pageable createPageRequest() {</code></div><div class="line number2 index1 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">return</code> <code class="java keyword">new</code> <code class="java plain">PageRequest(</code><code class="java value">0</code><code class="java plain">, </code><code class="java value">10</code><code class="java plain">);</code></div><div class="line number3 index2 alt2"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><p class="cye-lm-tag"><strong>Example 2:</strong><br> We have to sort the query results in ascending order by using the values of the <em>title</em> and <em>description</em> fields. If we want to get the second page by using page size 10, we have to create the <em>Pageable</em> object by using the following code:</p>
<div><div id="highlighter_539948" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">private</code> <code class="java plain">Pageable createPageRequest() {</code></div><div class="line number2 index1 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">return</code> <code class="java keyword">new</code> <code class="java plain">PageRequest(</code><code class="java value">1</code><code class="java plain">, </code><code class="java value">10</code><code class="java plain">, Sort.Direction.ASC, </code><code class="java string">"title"</code><code class="java plain">, </code><code class="java string">"description"</code><code class="java plain">);</code></div><div class="line number3 index2 alt2"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><p class="cye-lm-tag"><strong>Example 3:</strong><br> We have to sort the query results in descending order by using the value of the <em>description</em> field and in ascending order by using the value of the <em>title</em> field. If we want to get the second page by using page size 10, we have to create the <em>Pageable</em> object by using the following code:</p>
<div><div id="highlighter_809185" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">private</code> <code class="java plain">Pageable createPageRequest() {</code></div><div class="line number2 index1 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">return</code> <code class="java keyword">new</code> <code class="java plain">PageRequest(</code><code class="java value">1</code><code class="java plain">, </code></div><div class="line number3 index2 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java value">10</code><code class="java plain">, </code></div><div class="line number4 index3 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">new</code> <code class="java plain">Sort(Sort.Direction.DESC, </code><code class="java string">"description"</code><code class="java plain">)</code></div><div class="line number5 index4 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">.and(</code><code class="java keyword">new</code> <code class="java plain">Sort(Sort.Direction.ASC, </code><code class="java string">"title"</code><code class="java plain">));</code></div><div class="line number6 index5 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">);</code></div><div class="line number7 index6 alt2"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><div class="note"> <strong>Additional Reading:</strong><p class="cye-lm-tag"></p>
<ul><li><a href="http://docs.spring.io/spring-data/data-commons/docs/current/api/org/springframework/data/domain/Pageable.html" target="_blank">The Javadoc of the <em>Pageable</em> interface</a></li><li><a href="http://docs.spring.io/spring-data/data-commons/docs/current/api/org/springframework/data/domain/PageRequest.html" target="_blank">The Javadoc of the <em>PageRequest</em> class</a></li><li><a href="http://docs.spring.io/spring-data/data-commons/docs/current/api/org/springframework/data/domain/Page.html" target="_blank">The Javadoc of the <em>Page</em> interface</a></li><li><a href="http://docs.spring.io/spring-data/data-commons/docs/current/api/org/springframework/data/domain/Sort.html" target="_blank">The Javadoc of the <em>Sort</em> class.</a></li></ul></div><p class="cye-lm-tag">Let’s find out how we can obtain <em>Pageable</em> objects by using Spring Data web support.</p>
<h4>Using Spring Data Web Support</h4><p class="cye-lm-tag">We can enable Spring Data web support by annotating our application context configuration class with the <em>@EnableSpringDataWebSupport</em> annotation. The relevant part of the <em>PersistenceContext</em> class, which configures the persistence layer of our example application, looks as follows:</p>
<div><div id="highlighter_494364" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1 highlighted">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.context.annotation.Configuration;</code></div><div class="line number2 index1 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.jpa.repository.config.EnableJpaAuditing;</code></div><div class="line number3 index2 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.jpa.repository.config.EnableJpaRepositories;</code></div><div class="line number4 index3 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.web.config.EnableSpringDataWebSupport;</code></div><div class="line number5 index4 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.transaction.annotation.EnableTransactionManagement;</code></div><div class="line number6 index5 alt1">&nbsp;</div><div class="line number7 index6 alt2">&nbsp;</div><div class="line number8 index7 alt1"><code class="java color1">@Configuration</code></div><div class="line number9 index8 alt2"><code class="java color1">@EnableJpaAuditing</code><code class="java plain">(dateTimeProviderRef = </code><code class="java string">"dateTimeProvider"</code><code class="java plain">)</code></div><div class="line number10 index9 alt1"><code class="java color1">@EnableJpaRepositories</code><code class="java plain">(basePackages = {</code></div><div class="line number11 index10 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java string">"net.petrikainulainen.springdata.jpa.todo"</code></div><div class="line number12 index11 alt1"><code class="java plain">})</code></div><div class="line number13 index12 alt2"><code class="java color1">@EnableTransactionManagement</code></div><div class="line number14 index13 alt1 highlighted"><code class="java color1">@EnableSpringDataWebSupport</code></div><div class="line number15 index14 alt2"><code class="java keyword">class</code> <code class="java plain">PersistenceContext {</code></div><div class="line number16 index15 alt1"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><p class="cye-lm-tag">This registers two <em>HandlerMethodArgumentResolver</em> objects that are described in the following:</p>
<ul><li>The <em>SortHandlerMethodArgumentResolver</em> can extract sorting information from the request or from the <em>@SortDefault</em> annotation.</li><li>The <em>PageableHandlerMethodArgumentResolver</em> extracts the information of the requested page from the request.</li></ul><p class="cye-lm-tag">We can now specify the information of the requested page and configure the sorting options of the invoked database query by setting the values of the following request parameters:</p>
<ul><li>The <em>page</em> request parameter specifies the page number of the requested page. The number of the first page is 0 and the default value of this request parameter is 0 as well.</li><li>The <em>size</em> request parameter specifies the size of the requested page. The default value of this request parameter is 20.</li><li>The <em>sort</em> request parameter specifies the sorting options of the invoked query. <a href="http://docs.spring.io/spring-data/jpa/docs/1.8.x/reference/html/#core.web" target="_blank">The reference documentation of Spring Data JPA</a> describes the content of this request parameter as follows: <em>“Properties that should be sorted by in the format property,property(,ASC|DESC). Default sort direction is ascending. Use multiple sort parameters if you want to switch directions, e.g. ?sort=firstname&amp;sort=lastname,asc.”</em></li></ul><p class="cye-lm-tag">After we have enabled Spring Data web support, we can inject <em>Pageable</em> objects into controller handler methods. The source code of the <em>TodoSearchController</em> class, which utilizes Spring Data web support, looks as follows:</p>
<div><div id="highlighter_266141" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1 highlighted">22</div><div class="line number23 index22 alt2">23</div><div class="line number24 index23 alt1">24</div><div class="line number25 index24 alt2">25</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.beans.factory.annotation.Autowired;</code></div><div class="line number2 index1 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.domain.Pageable;</code></div><div class="line number3 index2 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.web.bind.annotation.RequestMapping;</code></div><div class="line number4 index3 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.web.bind.annotation.RequestMethod;</code></div><div class="line number5 index4 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.web.bind.annotation.RequestParam;</code></div><div class="line number6 index5 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.web.bind.annotation.RestController;</code></div><div class="line number7 index6 alt2"><code class="java spaces">&nbsp;</code>&nbsp;</div><div class="line number8 index7 alt1"><code class="java keyword">import</code> <code class="java plain">java.util.List;</code></div><div class="line number9 index8 alt2"><code class="java spaces">&nbsp;</code>&nbsp;</div><div class="line number10 index9 alt1"><code class="java color1">@RestController</code></div><div class="line number11 index10 alt2"><code class="java keyword">final</code> <code class="java keyword">class</code> <code class="java plain">TodoSearchController {</code></div><div class="line number12 index11 alt1"><code class="java spaces">&nbsp;</code>&nbsp;</div><div class="line number13 index12 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java keyword">final</code> <code class="java plain">TodoSearchService searchService;</code></div><div class="line number14 index13 alt1"><code class="java spaces">&nbsp;</code>&nbsp;</div><div class="line number15 index14 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Autowired</code></div><div class="line number16 index15 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java plain">TodoSearchController(TodoSearchService searchService) {</code></div><div class="line number17 index16 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">this</code><code class="java plain">.searchService = searchService;</code></div><div class="line number18 index17 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number19 index18 alt2"><code class="java spaces">&nbsp;</code>&nbsp;</div><div class="line number20 index19 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@RequestMapping</code><code class="java plain">(value = </code><code class="java string">"/api/todo/search"</code><code class="java plain">, method = RequestMethod.GET)</code></div><div class="line number21 index20 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java plain">Page&lt;TodoDTO&gt; findBySearchTerm(</code><code class="java color1">@RequestParam</code><code class="java plain">(</code><code class="java string">"searchTerm"</code><code class="java plain">) String searchTerm, </code></div><div class="line number22 index21 alt1 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">Pageable pageRequest) {</code></div><div class="line number23 index22 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">return</code> <code class="java plain">searchService.findBySearchTerm(searchTerm, pageRequest);</code></div><div class="line number24 index23 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number25 index24 alt2"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><div class="note"> <strong>Additional Reading:</strong><p class="cye-lm-tag"></p>
<ul><li><a href="http://docs.spring.io/spring-data/jpa/docs/1.8.x/reference/html/#core.web" target="_blank">Spring Data JPA Reference Documentation: 3.7.1 Web Support</a></li><li><a href="http://docs.spring.io/spring-data/data-commons/docs/current/api/org/springframework/data/web/config/EnableSpringDataWebSupport.html" target="_blank">The Javadoc of the <em>@EnableSpringDataWebSupport</em> annotation</a></li><li><a href="http://docs.spring.io/spring-data/data-commons/docs/current/api/org/springframework/data/web/SortHandlerMethodArgumentResolver.html" target="_blank">The Javadoc of the <em>SortHandlerMethodArgumentResolver</em> class</a></li><li><a href="http://docs.spring.io/spring-data/data-commons/docs/current/api/org/springframework/data/web/SortDefault.html" target="_blank">The Javadoc of the <em>@SortDefault</em> annotation</a></li><li><a href="http://docs.spring.io/spring-data/data-commons/docs/current/api/org/springframework/data/web/PageableHandlerMethodArgumentResolver.html" target="_blank">The Javadoc of the <em>PageableHandlerMethodArgumentResolver</em> class</a></li></ul></div><p class="cye-lm-tag">The <em>TodoSearchController</em> gets the information of the returned todo entries from the <em>TodoSearchService</em> object. The <em>RepositoryTodoSearchService</em> class implements the <em>TodoSearchService</em> interface, and its <em>findBySearchTerm()</em> method simply passes the search term and the <em>Pageable</em> object forward to the invoked repository method.</p>
<p class="cye-lm-tag">The source code of the <em>RepositoryTodoSearchService</em> class looks as follows:</p>
<div><div id="highlighter_1141" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2 highlighted">19</div><div class="line number20 index19 alt1 highlighted">20</div><div class="line number21 index20 alt2 highlighted">21</div><div class="line number22 index21 alt1 highlighted">22</div><div class="line number23 index22 alt2 highlighted">23</div><div class="line number24 index23 alt1 highlighted">24</div><div class="line number25 index24 alt2 highlighted">25</div><div class="line number26 index25 alt1 highlighted">26</div><div class="line number27 index26 alt2">27</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.beans.factory.annotation.Autowired;</code></div><div class="line number2 index1 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.domain.Page;</code></div><div class="line number3 index2 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.domain.Pageable;</code></div><div class="line number4 index3 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.stereotype.Service;</code></div><div class="line number5 index4 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.transaction.annotation.Transactional;</code></div><div class="line number6 index5 alt1"><code class="java spaces">&nbsp;&nbsp;</code>&nbsp;</div><div class="line number7 index6 alt2"><code class="java keyword">import</code> <code class="java plain">java.util.List;</code></div><div class="line number8 index7 alt1"><code class="java spaces">&nbsp;&nbsp;</code>&nbsp;</div><div class="line number9 index8 alt2"><code class="java color1">@Service</code></div><div class="line number10 index9 alt1"><code class="java keyword">final</code> <code class="java keyword">class</code> <code class="java plain">RepositoryTodoSearchService </code><code class="java keyword">implements</code> <code class="java plain">TodoSearchService {</code></div><div class="line number11 index10 alt2"><code class="java spaces">&nbsp;&nbsp;</code>&nbsp;</div><div class="line number12 index11 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java keyword">final</code> <code class="java plain">TodoRepository repository;</code></div><div class="line number13 index12 alt2"><code class="java spaces">&nbsp;&nbsp;</code>&nbsp;</div><div class="line number14 index13 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Autowired</code></div><div class="line number15 index14 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java plain">RepositoryTodoSearchService(TodoRepository repository) {</code></div><div class="line number16 index15 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">this</code><code class="java plain">.repository = repository;</code></div><div class="line number17 index16 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number18 index17 alt1"><code class="java spaces">&nbsp;&nbsp;</code>&nbsp;</div><div class="line number19 index18 alt2 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Transactional</code><code class="java plain">(readOnly = </code><code class="java keyword">true</code><code class="java plain">)</code></div><div class="line number20 index19 alt1 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Override</code></div><div class="line number21 index20 alt2 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java plain">Page&lt;TodoDTO&gt; findBySearchTerm(String searchTerm, Pageable pageRequest) {</code></div><div class="line number22 index21 alt1 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java comments">//Obtain search results by invoking the preferred repository method.</code></div><div class="line number23 index22 alt2 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">Page&lt;Todo&gt; searchResultPage = ...</code></div><div class="line number24 index23 alt1 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number25 index24 alt2 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">return</code> <code class="java plain">TodoMapper.mapEntityPageIntoDTOPage(pageRequest, searchResultPage);</code></div><div class="line number26 index25 alt1 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number27 index26 alt2"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><p class="cye-lm-tag">Let’s move on and find out how we can paginate our query results by using <em>Pageable</em> objects.</p>
<h3>Paginating Query Results With the Pageable Object</h3><p class="cye-lm-tag">After we have created the <em>Pageable</em> object manually or obtained it by using Spring Data web support, we have to create the database query that paginates its query results by using the <em>Pageable</em> object.</p>
<p class="cye-lm-tag">Let’s start by finding out how we can paginate all entities found from the database.</p>
<h4>Paginating All Entities</h4><p class="cye-lm-tag">If we want to paginate all entities found from the database, we can use one of the following methods:</p>
<p class="cye-lm-tag"><strong>First</strong>, if we created our repository interface by extending the <em>CrudRepository</em> interface, we have to modify it to extend only the <em>PagingAndSortingRepository</em> interface.</p>
<p class="cye-lm-tag">The relevant part of our repository interface looks as follows:</p>
<div><div id="highlighter_106183" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2 highlighted">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.repository.PagingAndSortingRepository;</code></div><div class="line number2 index1 alt1"><code class="java spaces">&nbsp;&nbsp;</code>&nbsp;</div><div class="line number3 index2 alt2 highlighted"><code class="java keyword">interface</code> <code class="java plain">TodoRepository </code><code class="java keyword">extends</code> <code class="java plain">PagingAndSortingRepository&lt;Todo, Long&gt; {</code></div><div class="line number4 index3 alt1"><code class="java spaces">&nbsp;&nbsp;</code>&nbsp;</div><div class="line number5 index4 alt2"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><div class="note"> <strong>Additional Reading:</strong><p class="cye-lm-tag"></p>
<ul><li><a href="http://docs.spring.io/spring-data/commons/docs/current/api/org/springframework/data/repository/PagingAndSortingRepository.html" target="_blank">The Javadoc of the <em>PagingAndSortingRepository</em> interface</a></li></ul></div><p class="cye-lm-tag">The <em>PagingAndSortingRepository</em> interface declares one method which we can use when we want to paginate the query results of a query that fetches all entities from the database:</p>
<ul><li>The <em>Page&lt;T&gt; findAll(Pageable pageRequest)</em> method returns a page of entities that fulfill the restrictions specified by the <em>Pageable</em> object.</li></ul><p class="cye-lm-tag">In other words, if we want to paginate the query results of a database query that fetches all entities from the database, we have to use the <em>Page&lt;T&gt; findAll(Pageable pageRequest)</em> method instead of the <em>Iterable&lt;T&gt; findAll()</em> method.</p>
<p class="cye-lm-tag"><strong>Second</strong>, if we created our repository interface by extending the <em>Repository</em> interface, we can declare the <em>Page&lt;T&gt; findAll(Pageable pageRequest)</em> method in our repository interface.</p>
<p class="cye-lm-tag">The relevant part of our repository interface looks as follows:</p>
<div><div id="highlighter_202069" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1 highlighted">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.domain.Page;</code></div><div class="line number2 index1 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.domain.Pageable;</code></div><div class="line number3 index2 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.repository.Repository;</code></div><div class="line number4 index3 alt1"><code class="java spaces">&nbsp;</code>&nbsp;</div><div class="line number5 index4 alt2"><code class="java keyword">import</code> <code class="java plain">java.util.List;</code></div><div class="line number6 index5 alt1"><code class="java keyword">import</code> <code class="java plain">java.util.Optional;</code></div><div class="line number7 index6 alt2"><code class="java spaces">&nbsp;</code>&nbsp;</div><div class="line number8 index7 alt1"><code class="java keyword">interface</code> <code class="java plain">TodoRepository </code><code class="java keyword">extends</code> <code class="java plain">Repository&lt;Todo, Long&gt; {</code></div><div class="line number9 index8 alt2"><code class="java spaces">&nbsp;</code>&nbsp;</div><div class="line number10 index9 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">void</code> <code class="java plain">delete(Todo deleted);</code></div><div class="line number11 index10 alt2"><code class="java spaces">&nbsp;</code>&nbsp;</div><div class="line number12 index11 alt1 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">Page&lt;Todo&gt; findAll(Pageable pageRequest);</code></div><div class="line number13 index12 alt2"><code class="java spaces">&nbsp;</code>&nbsp;</div><div class="line number14 index13 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">Optional&lt;Todo&gt; findOne(Long id);</code></div><div class="line number15 index14 alt2"><code class="java spaces">&nbsp;</code>&nbsp;</div><div class="line number16 index15 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">void</code> <code class="java plain">flush();</code></div><div class="line number17 index16 alt2"><code class="java spaces">&nbsp;</code>&nbsp;</div><div class="line number18 index17 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">Todo save(Todo persisted);</code></div><div class="line number19 index18 alt2"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><p class="cye-lm-tag">We can now get a specific page by invoking the <em>Page&lt;T&gt; findAll(Pageable pageRequest)</em> method and passing the <em>Pageable</em> object as a method parameter.</p>
<div class="note"> <strong>Additional Reading:</strong><p class="cye-lm-tag"></p>
<ul><li><a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-part-two-crud/">Spring Data JPA Tutorial: CRUD</a></li></ul></div><p class="cye-lm-tag">Let’s find out how we can paginate the query results of database queries that use the query generation from the method name strategy.</p>
<h4>Paginating the Query Results of Queries That Use the Query Generation From the Method Name Strategy</h4><p class="cye-lm-tag">If we create our database queries from <a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-creating-database-queries-from-method-names/">the method name of our query method</a>, we can paginate the query results by following these steps:</p>
<ol><li>Remove the sorting logic from the method name.</li><li>Add a new method parameter (<em>Pageable</em> object) to the query method.</li><li>Decide the returned type. We can return <em>List&lt;T&gt;</em>, <em>Slice&lt;T&gt;</em>, or <em>Page&lt;T&gt;</em> objects.</li></ol><p class="cye-lm-tag">Because the search function of our example application is case-insensitive and it returns todo entries whose title or description contains the given search term, the source code of our repository interface looks as follows:</p>
<div><div id="highlighter_559554" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1 highlighted">10</div><div class="line number11 index10 alt2 highlighted">11</div><div class="line number12 index11 alt1 highlighted">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1 highlighted">14</div><div class="line number15 index14 alt2 highlighted">15</div><div class="line number16 index15 alt1 highlighted">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1 highlighted">18</div><div class="line number19 index18 alt2 highlighted">19</div><div class="line number20 index19 alt1 highlighted">20</div><div class="line number21 index20 alt2">21</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.domain.Page;</code></div><div class="line number2 index1 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.domain.Pageable;</code></div><div class="line number3 index2 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.domain.Slice;</code></div><div class="line number4 index3 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.repository.Repository;</code></div><div class="line number5 index4 alt2"><code class="java spaces">&nbsp;</code>&nbsp;</div><div class="line number6 index5 alt1"><code class="java keyword">import</code> <code class="java plain">java.util.List;</code></div><div class="line number7 index6 alt2"><code class="java spaces">&nbsp;</code>&nbsp;</div><div class="line number8 index7 alt1"><code class="java keyword">interface</code> <code class="java plain">TodoRepository </code><code class="java keyword">extends</code> <code class="java plain">Repository&lt;Todo, Long&gt; {</code></div><div class="line number9 index8 alt2"><code class="java spaces">&nbsp;</code>&nbsp;</div><div class="line number10 index9 alt1 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">List&lt;Todo&gt; findByDescriptionContainsOrTitleContainsAllIgnoreCase(String descriptionPart,</code></div><div class="line number11 index10 alt2 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">String titlePart,</code></div><div class="line number12 index11 alt1 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">Pageable pageRequest);</code></div><div class="line number13 index12 alt2"><code class="java spaces">&nbsp;</code>&nbsp;</div><div class="line number14 index13 alt1 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">Page&lt;Todo&gt; findByDescriptionContainsOrTitleContainsAllIgnoreCase(String descriptionPart,</code></div><div class="line number15 index14 alt2 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">String titlePart,</code></div><div class="line number16 index15 alt1 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">Pageable pageReguest);</code></div><div class="line number17 index16 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number18 index17 alt1 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">Slice&lt;Todo&gt; findByDescriptionContainsOrTitleContainsAllIgnoreCase(String descriptionPart,</code></div><div class="line number19 index18 alt2 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">String titlePart,</code></div><div class="line number20 index19 alt1 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">Pageable pageRequest);</code></div><div class="line number21 index20 alt2"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><div class="note"> <strong>Additional Reading:</strong><p class="cye-lm-tag"></p>
<ul><li><a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-creating-database-queries-from-method-names/">Spring Data JPA Tutorial: Creating Database Queries From Method Names</a></li><li><a href="http://docs.spring.io/spring-data/data-commons/docs/current/api/org/springframework/data/domain/Pageable.html" target="_blank">The Javadoc of the <em>Pageable</em> interface</a></li><li><a href="http://docs.spring.io/spring-data/data-commons/docs/current/api/org/springframework/data/domain/Page.html" target="_blank">The Javadoc of the <em>Page</em> interface</a></li><li><a href="http://docs.spring.io/spring-data/data-commons/docs/current/api/org/springframework/data/domain/Slice.html" target="_blank">The Javadoc of the <em>Slice</em> interface</a></li></ul></div><p class="cye-lm-tag">Let’s move on and find out how we can paginate the query results of named queries that use JPQL.</p>
<h4>Paginating the Query Results of Named Queries That Use JPQL</h4><p class="cye-lm-tag">We can paginate the query results of <a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-creating-database-queries-with-named-queries/">named queries</a> that use JPQL by following these steps:</p>
<ol><li>Specify the sorting logic in the JPQL query.</li><li>Add a new method parameter (<em>Pageable</em> object) to the query method.</li><li>Decide the returned type. We can return <em>List&lt;T&gt;</em>, <em>Slice&lt;T&gt;</em>, or <em>Page&lt;T&gt;</em> objects.</li></ol><p class="cye-lm-tag">If we want to paginate the query results of the named query called: <em>Todo.findBySearchTermNamed</em>, the source code of our repository interface looks as follows:</p>
<div><div id="highlighter_759124" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1 highlighted">10</div><div class="line number11 index10 alt2 highlighted">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2 highlighted">13</div><div class="line number14 index13 alt1 highlighted">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1 highlighted">16</div><div class="line number17 index16 alt2 highlighted">17</div><div class="line number18 index17 alt1">18</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.domain.Page;</code></div><div class="line number2 index1 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.domain.Pageable;</code></div><div class="line number3 index2 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.domain.Slice;</code></div><div class="line number4 index3 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.repository.Repository;</code></div><div class="line number5 index4 alt2"><code class="java spaces">&nbsp;</code>&nbsp;</div><div class="line number6 index5 alt1"><code class="java keyword">import</code> <code class="java plain">java.util.List;</code></div><div class="line number7 index6 alt2"><code class="java spaces">&nbsp;</code>&nbsp;</div><div class="line number8 index7 alt1"><code class="java keyword">interface</code> <code class="java plain">TodoRepository </code><code class="java keyword">extends</code> <code class="java plain">Repository&lt;Todo, Long&gt; {</code></div><div class="line number9 index8 alt2">&nbsp;</div><div class="line number10 index9 alt1 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">List&lt;Todo&gt; findBySearchTermNamed(</code><code class="java color1">@Param</code><code class="java plain">(</code><code class="java string">"searchTerm"</code><code class="java plain">) String searchTerm, </code></div><div class="line number11 index10 alt2 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">Pageable pageRequest);</code></div><div class="line number12 index11 alt1">&nbsp;</div><div class="line number13 index12 alt2 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">Page&lt;Todo&gt; findBySearchTermNamed(</code><code class="java color1">@Param</code><code class="java plain">(</code><code class="java string">"searchTerm"</code><code class="java plain">) String searchTerm, </code></div><div class="line number14 index13 alt1 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">Pageable pageRequest);</code></div><div class="line number15 index14 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number16 index15 alt1 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">Slice&lt;Todo&gt; findBySearchTermNamed(</code><code class="java color1">@Param</code><code class="java plain">(</code><code class="java string">"searchTerm"</code><code class="java plain">) String searchTerm, </code></div><div class="line number17 index16 alt2 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">Pageable pageRequest);</code></div><div class="line number18 index17 alt1"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><div class="note"> We must remember two things when we are paginating the query results of named queries:<p class="cye-lm-tag"></p>
<ul><li>If we want to paginate and sort the query results of named queries that use JPQL, <strong>we must specify the sorting logic in the JPQL query</strong>.</li><li>We cannot paginate the query results of native named queries because there is no reliable way to manipulate SQL queries.</li></ul><p class="cye-lm-tag"><strong>Additional Reading:</strong></p>
<ul><li><a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-creating-database-queries-with-named-queries/">Spring Data JPA Tutorial: Creating Database Queries With Named Queries</a></li><li><a href="http://docs.spring.io/spring-data/data-commons/docs/current/api/org/springframework/data/domain/Pageable.html" target="_blank">The Javadoc of the <em>Pageable</em> interface</a></li><li><a href="http://docs.spring.io/spring-data/data-commons/docs/current/api/org/springframework/data/domain/Page.html" target="_blank">The Javadoc of the <em>Page</em> interface</a></li><li><a href="http://docs.spring.io/spring-data/data-commons/docs/current/api/org/springframework/data/domain/Slice.html" target="_blank">The Javadoc of the <em>Slice</em> interface</a></li></ul></div><p class="cye-lm-tag">Let’s move on and find out how we can paginate the query results of JPQL queries that are created by using the <em>@Query</em> annotation.</p>
<h4>Paginating the Query Results of JPQL Queries That Use the @Query Annotation</h4><p class="cye-lm-tag">If we create our JPQL queries by using the <a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-creating-database-queries-with-the-query-annotation/"><em>@Query</em> annotation</a>, we can paginate the query results by following these steps:</p>
<ol><li>Remove the sorting logic from the JPQL query.</li><li>Add a new method parameter (<em>Pageable</em> object) to the query method.</li><li>Decide the returned type. We can return <em>List&lt;T&gt;</em>, <em>Slice&lt;T&gt;</em>, or <em>Page&lt;T&gt;</em> objects.</li></ol><p class="cye-lm-tag">Because the search function of our example application is case-insensitive and it returns todo entries whose title or description contains the given search term, the source code of our repository interface looks as follows:</p>
<div><div id="highlighter_26014" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2 highlighted">11</div><div class="line number12 index11 alt1 highlighted">12</div><div class="line number13 index12 alt2 highlighted">13</div><div class="line number14 index13 alt1 highlighted">14</div><div class="line number15 index14 alt2 highlighted">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2 highlighted">17</div><div class="line number18 index17 alt1 highlighted">18</div><div class="line number19 index18 alt2 highlighted">19</div><div class="line number20 index19 alt1 highlighted">20</div><div class="line number21 index20 alt2 highlighted">21</div><div class="line number22 index21 alt1">22</div><div class="line number23 index22 alt2 highlighted">23</div><div class="line number24 index23 alt1 highlighted">24</div><div class="line number25 index24 alt2 highlighted">25</div><div class="line number26 index25 alt1 highlighted">26</div><div class="line number27 index26 alt2 highlighted">27</div><div class="line number28 index27 alt1">28</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.domain.Page;</code></div><div class="line number2 index1 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.domain.Pageable;</code></div><div class="line number3 index2 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.domain.Slice;</code></div><div class="line number4 index3 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.jpa.repository.Query;</code></div><div class="line number5 index4 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.repository.Repository;</code></div><div class="line number6 index5 alt1"><code class="java spaces">&nbsp;</code>&nbsp;</div><div class="line number7 index6 alt2"><code class="java keyword">import</code> <code class="java plain">java.util.List;</code></div><div class="line number8 index7 alt1"><code class="java spaces">&nbsp;</code>&nbsp;</div><div class="line number9 index8 alt2"><code class="java keyword">interface</code> <code class="java plain">TodoRepository </code><code class="java keyword">extends</code> <code class="java plain">Repository&lt;Todo, Long&gt; {</code></div><div class="line number10 index9 alt1">&nbsp;</div><div class="line number11 index10 alt2 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Query</code><code class="java plain">(</code><code class="java string">"SELECT t FROM Todo t WHERE "</code> <code class="java plain">+</code></div><div class="line number12 index11 alt1 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java string">"LOWER(t.title) LIKE LOWER(CONCAT('%',:searchTerm, '%')) OR "</code> <code class="java plain">+</code></div><div class="line number13 index12 alt2 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java string">"LOWER(t.description) LIKE LOWER(CONCAT('%',:searchTerm, '%'))"</code><code class="java plain">)</code></div><div class="line number14 index13 alt1 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">List&lt;Todo&gt; findBySearchTerm(</code><code class="java color1">@Param</code><code class="java plain">(</code><code class="java string">"searchTerm"</code><code class="java plain">) String searchTerm, </code></div><div class="line number15 index14 alt2 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">Pageable pageRequest);</code></div><div class="line number16 index15 alt1">&nbsp;</div><div class="line number17 index16 alt2 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Query</code><code class="java plain">(</code><code class="java string">"SELECT t FROM Todo t WHERE "</code> <code class="java plain">+</code></div><div class="line number18 index17 alt1 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java string">"LOWER(t.title) LIKE LOWER(CONCAT('%',:searchTerm, '%')) OR "</code> <code class="java plain">+</code></div><div class="line number19 index18 alt2 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java string">"LOWER(t.description) LIKE LOWER(CONCAT('%',:searchTerm, '%'))"</code><code class="java plain">)</code></div><div class="line number20 index19 alt1 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">Page&lt;Todo&gt; findBySearchTerm(</code><code class="java color1">@Param</code><code class="java plain">(</code><code class="java string">"searchTerm"</code><code class="java plain">) String searchTerm, </code></div><div class="line number21 index20 alt2 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">Pageable pageRequest);</code></div><div class="line number22 index21 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number23 index22 alt2 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Query</code><code class="java plain">(</code><code class="java string">"SELECT t FROM Todo t WHERE "</code> <code class="java plain">+</code></div><div class="line number24 index23 alt1 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java string">"LOWER(t.title) LIKE LOWER(CONCAT('%',:searchTerm, '%')) OR "</code> <code class="java plain">+</code></div><div class="line number25 index24 alt2 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java string">"LOWER(t.description) LIKE LOWER(CONCAT('%',:searchTerm, '%'))"</code><code class="java plain">)</code></div><div class="line number26 index25 alt1 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">Slice&lt;Todo&gt; findBySearchTerm(</code><code class="java color1">@Param</code><code class="java plain">(</code><code class="java string">"searchTerm"</code><code class="java plain">) String searchTerm, </code></div><div class="line number27 index26 alt2 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">Pageable pageRequest);</code></div><div class="line number28 index27 alt1"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><div class="note"> We cannot paginate the query results of native queries that use the <em>@Query</em> annotation because there is no reliable way to manipulate SQL queries.<p class="cye-lm-tag"></p>
<p class="cye-lm-tag"><strong>Additional Reading:</strong></p>
<ul><li><a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-creating-database-queries-with-the-query-annotation/">Spring Data JPA Tutorial: Creating Database Queries With the @Query Annotation</a></li><li><a href="http://docs.spring.io/spring-data/data-commons/docs/current/api/org/springframework/data/domain/Pageable.html" target="_blank">The Javadoc of the <em>Pageable</em> interface</a></li><li><a href="http://docs.spring.io/spring-data/data-commons/docs/current/api/org/springframework/data/domain/Page.html" target="_blank">The Javadoc of the <em>Page</em> interface</a></li><li><a href="http://docs.spring.io/spring-data/data-commons/docs/current/api/org/springframework/data/domain/Slice.html" target="_blank">The Javadoc of the <em>Slice</em> interface</a></li></ul></div><p class="cye-lm-tag">Let’s find out how we can paginate the query results of JPA criteria queries.</p>
<h4>Paginating the Query Results of JPA Criteria Queries</h4><p class="cye-lm-tag">If we create our database queries by using <a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-part-four-jpa-criteria-queries/">the JPA Criteria API</a>, our repository interface must extend the <em>JpaSpecificationExecutor&lt;T&gt;</em> interface. This interface declares one method that we can use when we want to paginate the query results of JPA criteria queries:</p>
<ul><li>The <em>Page&lt;T&gt; findAll(Specification&lt;T&gt; spec, Pageable pageRequest)</em> method returns a page of entities that match the <em>Specification</em> object and fulfill the restrictions specified by the <em>Pageable</em> object.</li></ul><p class="cye-lm-tag">In other words, we can paginate the query results of JPA criteria queries by using the <em>Page&lt;T&gt; findAll(Specification&lt;T&gt; spec, Pageable pageRequest)</em> method instead of the <em>List&lt;T&gt; findAll(Specification&lt;T&gt; spec)</em> method.</p>
<p class="cye-lm-tag"></p>
<p class="cye-lm-tag">The source code of the <em>RepositoryTodoSearchService</em> class, which paginates our query results by using the <em>Pageable</em> object, looks as follows:</p>
<div><div id="highlighter_673901" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2 highlighted">21</div><div class="line number22 index21 alt1 highlighted">22</div><div class="line number23 index22 alt2 highlighted">23</div><div class="line number24 index23 alt1 highlighted">24</div><div class="line number25 index24 alt2 highlighted">25</div><div class="line number26 index25 alt1 highlighted">26</div><div class="line number27 index26 alt2 highlighted">27</div><div class="line number28 index27 alt1">28</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.beans.factory.annotation.Autowired;</code></div><div class="line number2 index1 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.domain.Page;</code></div><div class="line number3 index2 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.domain.Pageable;</code></div><div class="line number4 index3 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.stereotype.Service;</code></div><div class="line number5 index4 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.transaction.annotation.Transactional;</code></div><div class="line number6 index5 alt1"><code class="java spaces">&nbsp;&nbsp;</code>&nbsp;</div><div class="line number7 index6 alt2"><code class="java keyword">import</code> <code class="java plain">java.util.List;</code></div><div class="line number8 index7 alt1"><code class="java spaces">&nbsp;&nbsp;</code>&nbsp;</div><div class="line number9 index8 alt2"><code class="java keyword">import</code> <code class="java keyword">static</code> <code class="java plain">net.petrikainulainen.springdata.jpa.todo.TodoSpecifications.titleOrDescriptionContainsIgnoreCase;</code></div><div class="line number10 index9 alt1"><code class="java spaces">&nbsp;&nbsp;</code>&nbsp;</div><div class="line number11 index10 alt2"><code class="java color1">@Service</code></div><div class="line number12 index11 alt1"><code class="java keyword">final</code> <code class="java keyword">class</code> <code class="java plain">RepositoryTodoSearchService </code><code class="java keyword">implements</code> <code class="java plain">TodoSearchService {</code></div><div class="line number13 index12 alt2"><code class="java spaces">&nbsp;&nbsp;</code>&nbsp;</div><div class="line number14 index13 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java keyword">final</code> <code class="java plain">TodoRepository repository;</code></div><div class="line number15 index14 alt2"><code class="java spaces">&nbsp;&nbsp;</code>&nbsp;</div><div class="line number16 index15 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Autowired</code></div><div class="line number17 index16 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java plain">RepositoryTodoSearchService(TodoRepository repository) {</code></div><div class="line number18 index17 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">this</code><code class="java plain">.repository = repository;</code></div><div class="line number19 index18 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number20 index19 alt1"><code class="java spaces">&nbsp;&nbsp;</code>&nbsp;</div><div class="line number21 index20 alt2 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Transactional</code><code class="java plain">(readOnly = </code><code class="java keyword">true</code><code class="java plain">)</code></div><div class="line number22 index21 alt1 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Override</code></div><div class="line number23 index22 alt2 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java plain">Page&lt;TodoDTO&gt; findBySearchTerm(String searchTerm, Pageable pageRequest) {</code></div><div class="line number24 index23 alt1 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">Specification&lt;Todo&gt; searchSpec = titleOrDescriptionContainsIgnoreCase(searchTerm);</code></div><div class="line number25 index24 alt2 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">Page&lt;Todo&gt; searchResultPage = repository.findAll(searchSpec, pageRequest);</code></div><div class="line number26 index25 alt1 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">return</code> <code class="java plain">TodoMapper.mapEntityPageIntoDTOPage(pageRequest, searchResultPage);</code></div><div class="line number27 index26 alt2 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number28 index27 alt1"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><div class="note"> <strong>Additional Reading:</strong><p class="cye-lm-tag"></p>
<ul><li><a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-part-four-jpa-criteria-queries/">Spring Data JPA Tutorial: Creating Database Queries With the JPA Criteria API</a></li><li><a href="http://docs.spring.io/spring-data/jpa/docs/current/api/org/springframework/data/jpa/repository/JpaSpecificationExecutor.html" target="_blank">The Javadoc of the <em>JpaSpecificationExecutor</em> interface</a></li><li><a href="http://docs.spring.io/spring-data/data-commons/docs/current/api/org/springframework/data/domain/Pageable.html" target="_blank">The Javadoc of the <em>Pageable</em> interface</a></li><li><a href="http://docs.spring.io/spring-data/data-commons/docs/current/api/org/springframework/data/domain/Page.html" target="_blank">The Javadoc of the <em>Page</em> interface</a></li></ul></div><p class="cye-lm-tag">Let’s find out how we can paginate the query results of database queries that are created by using Querydsl.</p>
<h4>Paginating the Query Results of Querydsl Queries</h4><p class="cye-lm-tag">If we create our database queries by using <a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-part-five-querydsl/">Querydsl</a>, our repository interface must extend the <em>QueryDslPredicateExecutor&lt;T&gt;</em> interface. This interface declares one method that we can use when we want to paginate the query results of database queries that use Querydsl:</p>
<ul><li>The <em>Page&lt;T&gt; findAll(Predicate predicate, Pageable pageRequest)</em> method returns a page of entities that match the <em>Predicate</em> object and fulfill the restrictions specified by the <em>Pageable</em> object.</li></ul><p class="cye-lm-tag">In other words, we can paginate the query results of Querydsl queries by using the <em>Page&lt;T&gt; findAll(Predicate predicate, Pageable pageRequest)</em> method instead of the <em>List&lt;T&gt; findAll(Predicate predicate)</em> method.</p>
<p class="cye-lm-tag">The source code of the <em>RepositoryTodoSearchService</em> class, which paginates our query results by using the <em>Pageable</em> object, looks as follows:</p>
<div><div id="highlighter_282349" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2 highlighted">19</div><div class="line number20 index19 alt1 highlighted">20</div><div class="line number21 index20 alt2 highlighted">21</div><div class="line number22 index21 alt1 highlighted">22</div><div class="line number23 index22 alt2 highlighted">23</div><div class="line number24 index23 alt1 highlighted">24</div><div class="line number25 index24 alt2 highlighted">25</div><div class="line number26 index25 alt1">26</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.beans.factory.annotation.Autowired;</code></div><div class="line number2 index1 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.domain.Page;</code></div><div class="line number3 index2 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.domain.Pageable;</code></div><div class="line number4 index3 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.stereotype.Service;</code></div><div class="line number5 index4 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.transaction.annotation.Transactional;</code></div><div class="line number6 index5 alt1">&nbsp;</div><div class="line number7 index6 alt2"><code class="java keyword">import</code> <code class="java keyword">static</code> <code class="java plain">net.petrikainulainen.springdata.jpa.todo.TodoPredicates.titleOrDescriptionContainsIgnoreCase;</code></div><div class="line number8 index7 alt1">&nbsp;</div><div class="line number9 index8 alt2"><code class="java color1">@Service</code></div><div class="line number10 index9 alt1"><code class="java keyword">final</code> <code class="java keyword">class</code> <code class="java plain">RepositoryTodoSearchService </code><code class="java keyword">implements</code> <code class="java plain">TodoSearchService {</code></div><div class="line number11 index10 alt2">&nbsp;</div><div class="line number12 index11 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java keyword">final</code> <code class="java plain">TodoRepository repository;</code></div><div class="line number13 index12 alt2">&nbsp;</div><div class="line number14 index13 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Autowired</code></div><div class="line number15 index14 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java plain">RepositoryTodoSearchService(TodoRepository repository) {</code></div><div class="line number16 index15 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">this</code><code class="java plain">.repository = repository;</code></div><div class="line number17 index16 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number18 index17 alt1">&nbsp;</div><div class="line number19 index18 alt2 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Transactional</code><code class="java plain">(readOnly = </code><code class="java keyword">true</code><code class="java plain">)</code></div><div class="line number20 index19 alt1 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Override</code></div><div class="line number21 index20 alt2 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java plain">Page&lt;TodoDTO&gt; findBySearchTerm(String searchTerm, Pageable pageRequest) {</code></div><div class="line number22 index21 alt1 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">Predicate searchPred = titleOrDescriptionContainsIgnoreCase(searchTerm);</code></div><div class="line number23 index22 alt2 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">Page&lt;Todo&gt; searchResultPage = repository.findAll(searchPred, pageRequest);</code></div><div class="line number24 index23 alt1 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">return</code> <code class="java plain">TodoMapper.mapEntityPageIntoDTOPage(pageRequest, searchResultPage);</code></div><div class="line number25 index24 alt2 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number26 index25 alt1"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><div class="note"> <strong>Additional Reading:</strong><p class="cye-lm-tag"></p>
<ul><li><a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-part-five-querydsl/">Spring Data JPA Tutorial: Creating Database Queries With Querydsl</a></li><li><a href="http://docs.spring.io/spring-data/commons/docs/current/api/org/springframework/data/querydsl/QueryDslPredicateExecutor.html" target="_blank">The Javadoc of the <em>QueryDslPredicateExecutor</em> interface</a></li><li><a href="http://docs.spring.io/spring-data/data-commons/docs/current/api/org/springframework/data/domain/Pageable.html" target="_blank">The Javadoc of the <em>Pageable</em> interface</a></li><li><a href="http://docs.spring.io/spring-data/data-commons/docs/current/api/org/springframework/data/domain/Page.html" target="_blank">The Javadoc of the <em>Page</em> interface</a></li></ul></div><p class="cye-lm-tag">Let’s move on and summarize what we learned from this blog post.</p>
<h2>Summary</h2><p class="cye-lm-tag">This blog post has taught us five things:</p>
<ul><li>We can create <em>Pageable</em> objects manually or obtain them by using Spring Data web support.</li><li>We can configure Spring Data web support by annotating our application context configuration class with <em>@EnableSpringDataWebSupport</em> annotation.</li><li>We can paginate the query results of query methods, JPA criteria queries, and Querydsl queries by using the <em>Pageable</em> object.</li><li>We cannot paginate the query results of SQL queries by using the <em>Pageable</em> object because there is no reliable way to manipulate existing SQL queries.</li><li>If we want to paginate the query results of a named query that uses JPQL, we have to add the sorting logic into the JPQL query.</li></ul><p class="cye-lm-tag">The next part of this tutorial describes how we can add the creation and modification time fields into our entities by <a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-auditing-part-one/">using the auditing infrastructure of Spring Data JPA</a>.</p>
<p class="cye-lm-tag"><strong>P.S.</strong> You can get the example applications of this blog post from Github: <a href="https://github.com/pkainulainen/spring-data-jpa-examples/tree/master/query-methods" target="_blank">query methods</a>, <a href="https://github.com/pkainulainen/spring-data-jpa-examples/tree/master/criteria-api" target="_blank">JPA Criteria API</a>, and <a href="https://github.com/pkainulainen/spring-data-jpa-examples/tree/master/querydsl" target="_blank">Querydsl</a>.</p>
<div class="note">If you want to learn how to use Spring Data JPA, you should read my <a href="/spring-data-jpa-tutorial/">Spring Data JPA tutorial</a>.</div> <span id="tve_leads_end_content" style="display: block; visibility: hidden; border: 1px solid transparent;" class="cye-lm-tag"></span>
</div>

</div>




</div>
</div>
</div>
</div>
</div>
</div><p style="line-height: 24px;" data-unit="px" class="tve_p_center cye-lm-tag"><span class="tve_custom_font_size cye-lm-tag" style="font-size: 16px;">I will never rent, sell, or share your email address.<br></span></p>

</div></div></div></div></div></div></div>
<section id="comments"><div class="comments_intro"><span class="num_comments cye-lm-tag">60</span> comments… <a href="#commentform" rel="nofollow">add one</a></div><ul class="comment_list"><li class="comment byuser comment-author-petrikainulainen bypostauthor even thread-even depth-1" id="comment-5001"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">April 25, 2012, 18:11</span></div><div class="comment_text" id="comment-body-5001"><p class="cye-lm-tag">I stumbled into this information about Spring MVC controllers and the <em>Pageable</em> interface:</p>
<p class="cye-lm-tag"><a href="http://static.springsource.org/spring-data/data-jpa/docs/1.0.3.RELEASE/reference/html/#web-pagination" rel="nofollow">http://static.springsource.org/spring-data/data-jpa/docs/1.0.3.RELEASE/reference/html/#web-pagination</a></p>
<p class="cye-lm-tag">It explains how you can automatically resolve the <em>Pageable</em> argument by passing specific request parameters to the request. This seems useful, if you don’t mind creating a dependency between your controllers and the Spring Data. At first I thought of updating my example application, but after giving it some thought, I decided to leave it as an exercise for the reader.</p>
</div> </div></li><li class="comment odd alt thread-odd thread-alt depth-1" id="comment-6615"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Rajesh</span>  <span class="comment_date cye-lm-tag">July 16, 2012, 08:16</span></div><div class="comment_text" id="comment-body-6615"><p class="cye-lm-tag">hi petri ,<br> i am running you apps in my system but i am using PostgreSQL is the db but you apps is not running .<br> please tell what are  changes i need to do</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-6620"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">July 16, 2012, 10:11</span></div><div class="comment_text" id="comment-body-6620"><p class="cye-lm-tag">Hi Rajesh,</p>
<p class="cye-lm-tag">Have you removed H2 database dependency from the pom.xml and added the PostgreSQL JDBC driver dependency to it? If you have done this and are still having problems, please let me know what the exact problem is.</p>
</div> </div></li></ul></li><li class="comment odd alt thread-even depth-1" id="comment-7458"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Tvan</span>  <span class="comment_date cye-lm-tag">August 14, 2012, 20:54</span></div><div class="comment_text" id="comment-body-7458"><p class="cye-lm-tag">Hi Petri,<br> I run your example with Maven. I do not see nowhere the pagination even I created manually 22 persons. Do I understand the term “pagination” ? For me it means I can see the current page the links for next page or/and previous page. If your tutorial application is coded to see 10 persons per page, I have to see a link to go to the second page because i have 22 persons.<br> I do not see the configuration of number of unit per page<br> Thanks for your explanantion.<br> Tvan</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-7459"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">August 14, 2012, 21:44</span></div><div class="comment_text" id="comment-body-7459"><p class="cye-lm-tag">Hi Tvan,</p>
<p class="cye-lm-tag">thanks for your comment. Your understanding of the term “pagination” is correct. However, I did cut some corners in the example application as I mentioned in beginning of my blog entry. The requirements of my example application are:</p>
<ul><li>Only search results are paginated. The list of persons shown in the front page is not.</li><li>The number of persons shown on the search results page is five. This value is hard coded to the <code>RepositoryPersonService</code> class (Look for a constant called <code>NUMBER_OF_PERSONS_PER_PAGE</code>).</li></ul><p class="cye-lm-tag">Naturally this kind of limitation is out of the question in a real world application but since it is not really relevant in the context of this tutorial, I think that is acceptable.</p>
<p class="cye-lm-tag">If you want to add the number of items selection to the search result page, you have to make following changes to the example application:</p>
<ol><li>Add the <code>pageSize</code> variable to <code>SearchDTO</code> class.</li><li>Modify the signature of the <code>PersonService</code> class’ <code>search()</code> method to take <code>pageSize</code> as a parameter.</li><li>Change the implementation of the <code>search()</code> method to use the parameter instead of the <code>NUMBER_OF_ITEMS_PER_PAGE</code> constant.</li><li>Modify the <code>search()</code> method of the <code>PersonController</code> class to pass the new parameter forward to the <code>search()</code> method of <code>PersonService</code>.</li><li>Implement the selection to the search result page and modify the person.search.js file to take the selection into account when it sends Ajax requests to the backend. You might want to check out the documentation of the <a href="https://github.com/gbirke/jquery_pagination/" rel="nofollow">jQuery pagination plugin by Gabriel Birke</a> since it is used on the search result page.</li></ol><p class="cye-lm-tag">I hope that this was helpful.</p>
</div> </div></li></ul></li><li class="comment odd alt thread-odd thread-alt depth-1" id="comment-7463"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Tvan</span>  <span class="comment_date cye-lm-tag">August 14, 2012, 22:53</span></div><div class="comment_text" id="comment-body-7463"><p class="cye-lm-tag">Hi Petri,<br> I see it. It’s useful this tutorial on pagination.<br> Thank you!<br> Tvan</p>
</div> </div></li><li class="comment even thread-even depth-1" id="comment-7464"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Tvan</span>  <span class="comment_date cye-lm-tag">August 14, 2012, 23:36</span></div><div class="comment_text" id="comment-body-7464"><p class="cye-lm-tag">Dear Petri,</p>
<p class="cye-lm-tag">It seems limited or against the principle of OOP if Spring-data pagination is bound only to JPA!<br> Is it possible to use spring-data pagination with Hibernate ?</p>
<p class="cye-lm-tag">Thanks!<br> Tvan</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-7477"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">August 15, 2012, 08:21</span></div><div class="comment_text" id="comment-body-7477"><p class="cye-lm-tag">Hi Tvan,</p>
<p class="cye-lm-tag">My example application uses Hibernate so the answer is yes. However, you have to use it as a JPA provider. This means that you cannot use the Hibernate query language or its criteria implementation (Unless you create a custom repository. This is a lot of hassle, which is not probably worth it). You can use Hibernate specific annotations in your entities if you are ready tie your application with Hibernate.</p>
<p class="cye-lm-tag">The idea behind this is that you can (in theory) switch the JPA provider without making any changes to your code. However, if you make a change like this, I would recommend testing your application because the different JPA providers will behave differently in certain situations.</p>
</div> </div></li></ul></li><li class="comment even thread-odd thread-alt depth-1" id="comment-147256"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Stephane</span>  <span class="comment_date cye-lm-tag">April 24, 2013, 11:15</span></div><div class="comment_text" id="comment-body-147256"><p class="cye-lm-tag">Hello Petri,<br> I’m now coding a Spring Data JPA2 pet project and just found out about your book from this article, and bought it right away from the Packt website. Nice to see a finnish coder ! (I’m french but live in Tallinn). Thanks for the article !<br> Kind Regards,</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-147624"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">April 24, 2013, 13:46</span></div><div class="comment_text" id="comment-body-147624"><p class="cye-lm-tag">Hi Stephane,</p>
<p class="cye-lm-tag">Thank you for your kind words. I am happy to hear that you liked this blog post.</p>
<p class="cye-lm-tag">Also, thank you for buying my book. I hope that you enjoy reading it!</p>
</div> </div></li></ul></li><li class="comment even thread-even depth-1" id="comment-265125"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Vili</span>  <span class="comment_date cye-lm-tag">June 24, 2013, 09:34</span></div><div class="comment_text" id="comment-body-265125"><p class="cye-lm-tag">I’m trying to use Spring data JPA pagination with custom JPAQL query. When I put the query in JPA entity mapping XML file (not persistence.xml file) pagination does not work (It adds rownum filter but it does not sort).</p>
<p class="cye-lm-tag">When I transfer the same query to Repository interface with an Annotation it works perfectly (both rownum and sort criteria is added to the query).</p>
<p class="cye-lm-tag">I tested with the latest version and with JUnit tests. Only thing I changed was the location of the query.</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-265152"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">June 24, 2013, 12:35</span></div><div class="comment_text" id="comment-body-265152"><p class="cye-lm-tag">I assume that you are talking about named queries?</p>
<p class="cye-lm-tag">I have to confess that I have not used complicated named queries with Spring Data JPA. I did write a simple named query for this <a href="http://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-three-custom-queries-with-query-methods/" rel="nofollow">blog post</a> and an another one for my Spring Data book.</p>
<p class="cye-lm-tag">However, if I remember correctly, both of the named queries were added to the entity by using the <code>@NamedQuery</code> annotation. I was able to paginate and sort my query results with this approach but the executed query was very simple. Theoretically though, it should not make any difference how the named query is declared.</p>
<p class="cye-lm-tag">Did you add the used sort options to the created <code>PageRequest</code> object or did you use the <code>ORDER BY</code> clause in your query?</p>
</div> </div><ul class="children"><li class="comment even depth-3" id="comment-265158"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Vili</span>  <span class="comment_date cye-lm-tag">June 24, 2013, 13:04</span></div><div class="comment_text" id="comment-body-265158"><p class="cye-lm-tag">Yes, I was talking about “named queries” declared in ORM xml file (instead of annotations).</p>
<p class="cye-lm-tag">I assume I have created PageRequest correctly, since the same instance of it works fine, when I declare the query with @Query annotation (instead of xml file).</p>
<p class="cye-lm-tag">I have not used order by clause in the query.</p>
<p class="cye-lm-tag">My guess is that NamedQueries defined with Annotation might work, but named queries defined in ORM xml file do not work with pagination (Sorting is not added to the query)</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-4" id="comment-265313"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">June 25, 2013, 10:02</span></div><div class="comment_text" id="comment-body-265313"><p class="cye-lm-tag">I am starting to think that this is a bug. You might want to <a href="https://jira.springsource.org/" target="_blank" rel="nofollow">create a bug report about it</a>.</p>
</div> </div></li></ul></li></ul></li></ul></li><li class="comment even thread-odd thread-alt depth-1" id="comment-265132"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Vili</span>  <span class="comment_date cye-lm-tag">June 24, 2013, 10:17</span></div><div class="comment_text" id="comment-body-265132"><p class="cye-lm-tag">Is pagination supposed to work with a query with “left join fetch”-statement? Automatically created and executed “count query” fails, when I’m trying to execute my pagination query.</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-265149"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">June 24, 2013, 12:21</span></div><div class="comment_text" id="comment-body-265149"><p class="cye-lm-tag">I assume that the automatically created count query fails because of the <code>left join fetch</code> statement. This happens quite often if the executed query is a bit more complex than a simple select.</p>
<p class="cye-lm-tag">If the automatically created count query fails, you can specify a custom count query by using one of the following options:</p>
<ul><li>If you want to specify your count query in the repository interface, you can use the <code>countQuery</code> attribute of the <code>@Query</code> annotation.</li><li>If you want to specify your count query as a named query, you can set the name of the query by using the <code>countName</code> attribute of the <code>@Query</code> annotation.</li></ul><p class="cye-lm-tag">Check the <a href="http://static.springsource.org/spring-data/data-jpa/docs/current/api/org/springframework/data/jpa/repository/Query.html" target="_blank" rel="nofollow">API document of the @Query annotation</a> for more details.</p>
</div> </div><ul class="children"><li class="comment even depth-3" id="comment-730513"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">wolandec</span>  <span class="comment_date cye-lm-tag">July 17, 2014, 15:18</span></div><div class="comment_text" id="comment-body-730513"><p class="cye-lm-tag">What can I do with such situation, when I generate query using JPA specifications?</p>
<pre><code>
Join&lt;A&gt;	a = r.join("a",JoinType.LEFT);
r.fetch("a",JoinType.LEFT);
PageRequest page = new PageRequest(0, 20);
repository.findAll(spec, page);
</code><code>
</code></pre></div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-4" id="comment-731117"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">July 18, 2014, 09:54</span></div><div class="comment_text" id="comment-body-731117"><p class="cye-lm-tag">Cannot you just create the join in your <code>Specification</code>? After this is done, you can call the <code>findAll(Specification spec, Pageable page)</code> repository method and provide the required method parameters.</p>
</div> </div><ul class="children"><li class="comment even depth-5" id="comment-733794"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">wolandec</span>  <span class="comment_date cye-lm-tag">July 21, 2014, 16:27</span></div><div class="comment_text" id="comment-body-733794"><p class="cye-lm-tag">In that case I just get ability to search by joined data, but do not fetch it.</p>
<p class="cye-lm-tag">Thus, when I run by collections In view(jsp for example), I have a lot of unwanted queries to my db.</p>
</div></div></li><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-5" id="comment-734810"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">July 22, 2014, 13:12</span></div><div class="comment_text" id="comment-body-734810"><p class="cye-lm-tag">You can specify that <a href="http://docs.jboss.org/hibernate/orm/4.0/hem/en-US/html/querycriteria.html#querycriteria-from-fetch" target="_blank" rel="nofollow">the associated data is fetched with owner of that data</a>.</p>
</div></div></li><li class="comment even depth-5" id="comment-735586"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">wolandec</span>  <span class="comment_date cye-lm-tag">July 23, 2014, 12:05</span></div><div class="comment_text" id="comment-body-735586"><p class="cye-lm-tag">When I fetch I get an exception:</p>
<p class="cye-lm-tag">Caused by: org.hibernate.QueryException: query specified join fetching, but the owner of the fetched association was not present in the select list …</p>
</div></div></li><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-5" id="comment-735603"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">July 23, 2014, 12:46</span></div><div class="comment_text" id="comment-body-735603"><p class="cye-lm-tag">It seems that are you trying to fetch an association without fetching the parent of that association. For example, if the path of the fetched association (from the root is) is <code>a.b</code>, you have to select the root, fetch <code>a</code>, and fetch <code>b</code>.</p>
<p class="cye-lm-tag">If this answer doesn’t help you to solve your problem, let me know. I can give you a better answer if I can see the code of the specification builder class and the created SQL query. Could you add them here?</p>
</div></div></li><li class="comment even depth-5" id="comment-736313"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">wolandec</span>  <span class="comment_date cye-lm-tag">July 24, 2014, 11:31</span></div><div class="comment_text" id="comment-body-736313"><p class="cye-lm-tag">Have I use static metamodel in that case?</p>
</div></div></li><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-5" id="comment-736382"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">July 24, 2014, 13:46</span></div><div class="comment_text" id="comment-body-736382"><p class="cye-lm-tag">The static meta model is just one way to describe your domain model. You can either use it or reference the associations by using their property names (I recommend that you use it though), but this decision will not help you to solve this problem. The only way to solve it is to fetch the parents of the fetched associations.</p>
</div></div></li></ul></li><li class="comment even depth-4" id="comment-736441"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">wolandec</span>  <span class="comment_date cye-lm-tag">July 24, 2014, 15:20</span></div><div class="comment_text" id="comment-body-736441"><p class="cye-lm-tag">This is an ANV entity:</p>
<pre><code>
@Entity
public class Anv {

	@Id
	@Column(name = "id")
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private Integer id;

	@Column(name = "id_place")
	private Integer idPlace;

	@Column(name = "id_place_version")
	private Integer idPlaceVersion;

	@OneToOne(fetch = FetchType.LAZY)
	@JoinColumns({
			@JoinColumn(name = "id_place", 
						referencedColumnName = "id", 
						insertable = false, 
						updatable = false),
			@JoinColumn(name = "id_place_version", 
						referencedColumnName = "id_version", 
						insertable = false, 
						updatable = false) })
	private Place place;

}
</code>
</pre><p class="cye-lm-tag">This is a part of specification definition.</p>
<pre><code>
Specification spec = new Specification() {
	public Predicate toPredicate(Root r, 
							CriteriaQuery q, 
							CriteriaBuilder cb) {
		r.fetch("place",JoinType.LEFT); // This string is a problem
}
</code>
</pre></div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-5" id="comment-736515"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">July 24, 2014, 17:36</span></div><div class="comment_text" id="comment-body-736515"><p class="cye-lm-tag">I just realized that the problem is that Spring Data repository invokes two queries (data query and count query) when you ask it to return a <code>Page</code> object. The problem is that count query doesn’t select the parent of the <em>place</em> association (it selects <code>count(*)</code>).</p>
<p class="cye-lm-tag">Unfortunately at the moment it is not possible use pagination in this situation (<a href="https://jira.spring.io/browse/DATAJPA-263" target="_blank" rel="nofollow">see this Jira issue</a>).</p>
<p class="cye-lm-tag">You can solve this problem by removing the <code>FetchType.LAZY</code> from the <code>@OneToOne</code> annotation.</p>
<p class="cye-lm-tag">If you cannot do this, you have to implement this query by using the <code>@Query</code> annotation. Remember to specify the count query by setting the value of <a href="http://docs.spring.io/spring-data/jpa/docs/1.6.x/api/org/springframework/data/jpa/repository/Query.html#countQuery%28%29" target="_blank" rel="nofollow">its <code>countQuery</code> attribute</a>.</p>
</div></div></li><li class="comment even depth-5" id="comment-737204"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">wolandec</span>  <span class="comment_date cye-lm-tag">July 25, 2014, 09:07</span></div><div class="comment_text" id="comment-body-737204"><p class="cye-lm-tag">Oh I’m sorry, i didn’t write a letter about pagination :). I see now, what can to do. But @Query annotation is not applicable for me, because the query is dynamically changed while user select one or another fields to search by.</p>
</div></div></li><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-5" id="comment-737775"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">July 25, 2014, 17:25</span></div><div class="comment_text" id="comment-body-737775"><p class="cye-lm-tag">No worries. It took me some time to realize this too since you didn’t mention anything about it, and I didn’t notice that you added this comment to a blog post which talks about pagination.</p>
<p class="cye-lm-tag">Anyway, like you mentioned, removing the <code>FetchType.LAZY</code> is the only way to do this in your case. I suggest that you do some performance testing and ensure that this doesn’t cause any negative surprises when this application is deployed to the production environment.</p>
</div></div></li><li class="comment even depth-5" id="comment-738145"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">wolandec</span>  <span class="comment_date cye-lm-tag">July 25, 2014, 22:51</span></div><div class="comment_text" id="comment-body-738145"><p class="cye-lm-tag">Thanks a lot! I’ll think about it.</p>
</div></div></li></ul></li></ul></li></ul></li></ul></li><li class="comment odd alt thread-even depth-1" id="comment-269912"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Stephane</span>  <span class="comment_date cye-lm-tag">August 13, 2013, 13:29</span></div><div class="comment_text" id="comment-body-269912"><p class="cye-lm-tag">Hi Petri,</p>
<p class="cye-lm-tag">I wonder if it’s possible to bake pagination into a manually built query. I’m trying with a TypedQuery built on a complex statement string.</p>
<p class="cye-lm-tag">I can create the query:<br> TypedQuery query = elearningSubscriptionRepository.getEntityManager().createQuery(sqlStatement, ElearningSubscription.class);<br> query.setParameter(“searchTerm”, searchTerm);</p>
<p class="cye-lm-tag">But it returns a list and not a page:<br> Page elearningSubscriptions = query.setFirstResult(page.getPageNumber()).setMaxResults(page.getPageSize()).getResultList();</p>
<p class="cye-lm-tag">I’m missing something :-)</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-269938"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">August 13, 2013, 19:56</span></div><div class="comment_text" id="comment-body-269938"><p class="cye-lm-tag">Hi Stephane,</p>
<p class="cye-lm-tag">The <a href="http://static.springsource.org/spring-data/commons/docs/current/api/org/springframework/data/domain/Page.html" target="_blank" rel="nofollow"><code>Page&lt;T&gt;</code></a> interface and the <a href="http://static.springsource.org/spring-data/commons/docs/current/api/org/springframework/data/domain/PageImpl.html" target="_blank" rel="nofollow"><code>PageImpl&lt;T&gt;</code></a> class are part of Spring Data.</p>
<p class="cye-lm-tag">Also, as you already noticed, the <a href="http://docs.oracle.com/javaee/6/api/javax/persistence/TypedQuery.html#getResultList%28%29" target="_blank" rel="nofollow"><code>getResultList()</code> method of the <code>TypedQuery</code> class</a> returns a <code>List</code> because that is what it is supposed to do (according to the JPA specification).</p>
<p class="cye-lm-tag">However, it is possible to return a <code>PageImpl</code> object from your repository. Check out <a href="https://github.com/SpringSource/spring-data-jpa/blob/master/src/main/java/org/springframework/data/jpa/repository/support/SimpleJpaRepository.java" target="_blank" rel="nofollow">the source code of the SimpleJPARepository class</a> for more details about this (look for the method <code>public Page&lt;T&gt; findAll(Specification&lt;T&gt; spec, Pageable pageable)</code>).</p>
<p class="cye-lm-tag">I hope that this answered to your question.</p>
</div> </div></li></ul></li><li class="comment odd alt thread-odd thread-alt depth-1" id="comment-270572"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Stephane</span>  <span class="comment_date cye-lm-tag">August 20, 2013, 19:50</span></div><div class="comment_text" id="comment-body-270572"><p class="cye-lm-tag">Hi Petri,</p>
<p class="cye-lm-tag">Thanks for the pointer. I had a look at the code base, and it led me to think I was going a wrong way. Having to rewrite so many private methods doesn’t sound like a good idea. I now wonder if there is another way to go, so as to have a page returned from a custom query. Hopefully, some others would have come up with a solution to that requirement. Thanks again !</p>
<p class="cye-lm-tag">Kind Regards,</p>
</div> </div></li><li class="comment even thread-even depth-1" id="comment-270574"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Stephane</span>  <span class="comment_date cye-lm-tag">August 20, 2013, 20:08</span></div><div class="comment_text" id="comment-body-270574"><p class="cye-lm-tag">Hi Petri,</p>
<p class="cye-lm-tag">Thanks to your help, I found a solution. I posted it at <a href="http://forum.springsource.org/showthread.php?140694-How-to-return-a-page-of-results-from-a-typed-query&amp;p=453915&amp;posted=1#post453915" rel="nofollow">http://forum.springsource.org/showthread.php?140694-How-to-return-a-page-of-results-from-a-typed-query&amp;p=453915&amp;posted=1#post453915</a></p>
<p class="cye-lm-tag">Kind Regards,</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-270577"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">August 20, 2013, 20:47</span></div><div class="comment_text" id="comment-body-270577"><p class="cye-lm-tag">Hi Stephane,</p>
<p class="cye-lm-tag">Because your query is not very complex (and it is “dynamic”), I think that it is better to implement that query by using either the JPA Criteria API or Querydsl. Also, if you do this, it is quite easy to paginate the results of your query.</p>
<p class="cye-lm-tag">Do you have some special reason for using JPQL?</p>
<p class="cye-lm-tag">Also, it is not a good idea to concatenate the search terms to the created query. You should use either <a href="http://www.objectdb.com/java/jpa/query/parameter" target="_blank" rel="nofollow">named parameters or ordinal parameters</a>.</p>
</div> </div></li></ul></li><li class="comment even thread-odd thread-alt depth-1" id="comment-282894"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Sanjeev</span>  <span class="comment_date cye-lm-tag">November 5, 2013, 03:17</span></div><div class="comment_text" id="comment-body-282894"><p class="cye-lm-tag">Hi Petri,<br> Thanks for sharing these great samples.  I have 1 question:</p>
<p class="cye-lm-tag">Is there a way to do “stateful pagination” with spring-data API ?  The way your sample application is writen, 2 subsequent requests for search results will use 2 different DB cursors on the underlying database. Since there is no “cursor/conversation id” coming back to the browser.</p>
<p class="cye-lm-tag">Thanks in advance for a response.</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-283166"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">November 5, 2013, 21:20</span></div><div class="comment_text" id="comment-body-283166"><p class="cye-lm-tag">Hi Sanjeev,</p>
<p class="cye-lm-tag">I have to confess that I have no idea if this is possible. I tried to search answers from Google but I didn’t find anything. If you happen find some information about this, I would appreciate if you would leave a comment to this blog post.</p>
</div> </div></li></ul></li><li class="comment even thread-even depth-1" id="comment-467912"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Sushma</span>  <span class="comment_date cye-lm-tag">April 17, 2014, 03:56</span></div><div class="comment_text" id="comment-body-467912"><p class="cye-lm-tag">Hi Petri,</p>
<p class="cye-lm-tag"> Its really a nice article, learned lot from this.<br> I am struggling to set up spring context in xml and also I dont want to use hibernate. Please tell me how the spring and dao configuration looks like.<br> Thanks in advance<br> Sushma</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-470252"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">April 17, 2014, 14:38</span></div><div class="comment_text" id="comment-body-470252"><p class="cye-lm-tag">You cannot use Spring Data JPA without a JPA provider. Do you plan to use another JPA provider? If so, what JPA provider are you going to use (they have different configurations)? Or do you just want to use JDBC?</p>
</div> </div><ul class="children"><li class="comment even depth-3" id="comment-492837"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Sushma</span>  <span class="comment_date cye-lm-tag">April 22, 2014, 03:56</span></div><div class="comment_text" id="comment-body-492837"><p class="cye-lm-tag">I  am currently using JDBC Template. Is it possible to use that with Spring Data JPA ? If yes, how should it look like and how to write queries in dao layer. If not, what are other JPA providers which support Spring data JPA. Please don’t mind, I am new to ORM concepts, can you pls suggest which is the easiest way.</p>
<p class="cye-lm-tag">Thanks,<br> SUshma</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-4" id="comment-497129"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">April 22, 2014, 22:02</span></div><div class="comment_text" id="comment-body-497129"><p class="cye-lm-tag">Check out <a href="http://stackoverflow.com/a/21002625/313554" target="_blank" rel="nofollow">this Stack Overflow answer by Oliver Gierke</a>. It provides a detailed explanation about the Spring Data project.</p>
<p class="cye-lm-tag">He also explains what Spring Data JPA is:</p>
<blockquote><p class="cye-lm-tag">Spring Data JPA is actually a thin layer implementing the repository abstraction plus a few other bells and whistles. So we’re not replacing persistence providers but actually leverage them through the API, even mitigating some of the quirks and differences between individual JPA providers.</p>
</blockquote><p class="cye-lm-tag">In other words, if you want to use Spring Data JPA, you need to use a JPA provider. I use Hibernate but there are other JPA providers as well. Here are links to the websites of the most commonly used JPA providers:</p>
<ul><li><a href="https://www.eclipse.org/eclipselink/#jpa" target="_blank" rel="nofollow">EclipseLink</a></li><li><a href="http://hibernate.org/orm/" target="_blank" rel="nofollow">Hibernate ORM</a></li><li><a href="https://openjpa.apache.org/" target="_blank" rel="nofollow">OpenJPA</a></li></ul><p class="cye-lm-tag">You can of course add custom query methods to your Spring Data JPA repository by using the <code>JdbcTemplate</code> class but you still need to use a JPA provider.</p>
</div> </div></li></ul></li></ul></li></ul></li><li class="comment even thread-odd thread-alt depth-1" id="comment-1190586"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">shyam</span>  <span class="comment_date cye-lm-tag">April 27, 2015, 12:09</span></div><div class="comment_text" id="comment-body-1190586"><p class="cye-lm-tag">Pagination with specification is not working.it is giving count instead of list of objects.</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-1190742"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">April 27, 2015, 23:34</span></div><div class="comment_text" id="comment-body-1190742"><p class="cye-lm-tag">Unfortunately it is virtually impossible to figure out what is wrong without seeing the source code of your <code>Specification</code> and the code that invokes your repository method. If you share this information with me, I might be able to figure out what is wrong.</p>
</div> </div></li></ul></li><li class="comment even thread-even depth-1" id="comment-1212858"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">serdar</span>  <span class="comment_date cye-lm-tag">May 26, 2015, 17:10</span></div><div class="comment_text" id="comment-body-1212858"><p class="cye-lm-tag">Hi Petri, I have a question about the totalPage count, I have an ackward situation here:</p>
<p class="cye-lm-tag">I have 10 records in the db, when I set the pageSize to 1 or 2 or 5 I get the totalPages as 10,5,2 correspondingly. But when I set the pageSize to 3 or 4, I always get totalPages = 3, it does not return the last page (I expect it to be 4) . Is this the implementation or am I missing something here?</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-1212895"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">May 26, 2015, 18:11</span></div><div class="comment_text" id="comment-body-1212895"><p class="cye-lm-tag">Hi Serdar,</p>
<p class="cye-lm-tag">If the <code>getTotalElements()</code> method of the <code>Page&lt;T&gt;</code> interface returns 10, and your page size is 3, the <code>getTotalPages()</code> method of the <code>Page&lt;T&gt;</code> interface should return 4.</p>
<p class="cye-lm-tag">The best way to solve this problem is to debug your application and put a breakpoint to the <code>getTotalPages()</code> method found from the <code>PageImpl</code> class. This should help you to figure out the root cause (either a bug in your code or in Spring Data).</p>
<p class="cye-lm-tag">Unfortunately I have never faced this problem myself, and that is why I cannot provide you a definitive answer. Anyway, I hope that this answer helps you to find the solution to your problem.</p>
</div> </div><ul class="children"><li class="comment even depth-3" id="comment-1213367"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Serdar</span>  <span class="comment_date cye-lm-tag">May 27, 2015, 11:04</span></div><div class="comment_text" id="comment-body-1213367"><p class="cye-lm-tag">found the problem :)</p>
<p class="cye-lm-tag">we are using pagedResources$PagedMetadata from spring hateoas, constructor with 3 parameters was calculating the totalPages internally by :</p>
<p class="cye-lm-tag">public PageMetadata(long size, long number, long totalElements) {<br> this(size, number, totalElements, size == 0 ? 0 : totalElements / size);<br> }</p>
<p class="cye-lm-tag">this was the root cause, I switched to constructor with 4 parameters giving the totalPages with my own.</p>
<p class="cye-lm-tag">Thank you Peter.</p>
</div> </div></li></ul></li></ul></li><li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1245765"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Anitha</span>  <span class="comment_date cye-lm-tag">July 23, 2015, 11:33</span></div><div class="comment_text" id="comment-body-1245765"><p class="cye-lm-tag">Hi Petri,</p>
<p class="cye-lm-tag">First of all thanks a lot for all your articles. I have a problem, hope you can help me out. In my Application, i have onetomany unidrirectional parent child. I am fetching the child list using parent.How do i apply pagination on the list of child records?<br> For Ex: Parent P has Child C1,C2,C3..C20<br> i do findByParentCode(Code) returns the Parent object with Child list in it. But i need to get the paginated list of the child. Please Help</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-1245769"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">July 23, 2015, 11:49</span></div><div class="comment_text" id="comment-body-1245769"><p class="cye-lm-tag">Hi Anitha,</p>
<p class="cye-lm-tag">AFAIK the only way to paginate the list of child records with Spring Data JPA is to fetch the child records instead of the parent record. If you need to get the parent record and its child records, you have to invoke two database queries.</p>
</div> </div><ul class="children"><li class="comment odd alt depth-3" id="comment-1245778"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Anonymous</span>  <span class="comment_date cye-lm-tag">July 23, 2015, 12:14</span></div><div class="comment_text" id="comment-body-1245778"><pre><code>
@Query("Select a.childList from Parent a where a.parentcode=?1")
public Page findByCode(String parentCode, Pageable pageSpecification);
</code>
</pre><p class="cye-lm-tag">will somethink like this work. Thanks for your reply.. i</p>
</div> </div></li><li class="comment even depth-3" id="comment-1245780"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Anitha</span>  <span class="comment_date cye-lm-tag">July 23, 2015, 12:26</span></div><div class="comment_text" id="comment-body-1245780"><p class="cye-lm-tag">HI Petri,</p>
<p class="cye-lm-tag">I just want the paginated child list by the parent code.  Can u pls explain a bit further as in my Child entity there is no property called parent code (this is one to many in Parent entity). Then how do i get the child list alone.<br> Anitha</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-4" id="comment-1245787"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">July 23, 2015, 12:58</span></div><div class="comment_text" id="comment-body-1245787"><p class="cye-lm-tag">Does your child entity has a reference to its parent entity?</p>
<p class="cye-lm-tag">If a child knows its parent, you have to add this query method to the repository that is used to manage child entities:</p>
<pre><code>
@Query("SELECT c FROM Child c WHERE c.parent.id=:parentId")
public Page&lt;Child&gt; findByParentId(@Param("parentId") Long parentId, Pageable page);
</code>
</pre><p class="cye-lm-tag">If the child entity doesn’t know its parent, you cannot create this query by using JPQL. You can use native queries, but you have to implement the pagination logic yourself.</p>
</div> </div></li></ul></li></ul></li></ul></li><li class="comment even thread-even depth-1" id="comment-1271458"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Neha</span>  <span class="comment_date cye-lm-tag">September 15, 2015, 00:21</span></div><div class="comment_text" id="comment-body-1271458"><p class="cye-lm-tag">I am really struggling to convert List users to Page in spring data mongo? Note Page is an API from org.springframework.data.domain.Page;</p>
<p class="cye-lm-tag">I am using Pagination of Spring Data Mongo, so I need to sent Page and not the List .Please help me.</p>
</div> </div><ul class="children"><li class="comment odd alt depth-2" id="comment-1271460"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Neha</span>  <span class="comment_date cye-lm-tag">September 15, 2015, 00:22</span></div><div class="comment_text" id="comment-body-1271460"><p class="cye-lm-tag">Could you please guide on <a href="http://stackoverflow.com/questions/32574066/convert-list-to-page-in-spring-data-mongo" rel="nofollow">http://stackoverflow.com/questions/32574066/convert-list-to-page-in-spring-data-mongo</a>?</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-3" id="comment-1271867"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">September 15, 2015, 18:24</span></div><div class="comment_text" id="comment-body-1271867"><p class="cye-lm-tag">I am not sure what you are trying to do. If you use Spring Data MongoDB, your repository method can return <code>Page&lt;T&gt;</code> objects (as long as you provide a <code>Pageable</code> object as a method parameter). Can you provide a more detailed description about your problem?</p>
</div> </div></li></ul></li></ul></li><li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1288003"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Neha</span>  <span class="comment_date cye-lm-tag">October 14, 2015, 00:15</span></div><div class="comment_text" id="comment-body-1288003"><p class="cye-lm-tag">Hi, I am in a worst situation where I wanted to create Pages based on the List (here is list is dynamic, sometimes list size is 5 and sometimes 20 etc)<br> and I wanted to return PageImpl(userDetails, ????, userDetails.size());</p>
<p class="cye-lm-tag">It’s constant Pageable pageable = new PageRequest(0,10);</p>
<p class="cye-lm-tag">List ud = new ArrayList();<br> ud.add(userDetails); // same 20 times<br> Now how Can I create 2 pages out of it as there is PageSize=10 and listSize=20.</p>
<p class="cye-lm-tag">Please help me out.,</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-1288606"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">October 14, 2015, 18:57</span></div><div class="comment_text" id="comment-body-1288606"><p class="cye-lm-tag">Do you fetch that list from a database? If so, you should paginate the query results in the database because that is the most efficient way to do this. Also, if you are using Spring Data JPA, you can do this by following the instructions given in this blog post.</p>
<p class="cye-lm-tag">If you keep the list in the memory, you just have to select the returned items based on the <code>Pageable</code> object that is given as a method parameter.</p>
<p class="cye-lm-tag">If you any additional questions, don’t hesitate to ask them.</p>
</div> </div></li></ul></li><li class="comment odd alt thread-even depth-1" id="comment-1469245"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Ignacio Larrañaga</span>  <span class="comment_date cye-lm-tag">July 20, 2016, 18:05</span></div><div class="comment_text" id="comment-body-1469245"><p class="cye-lm-tag">Hey Petri!, quick question, did you try the recent pagination of native queries ?</p>
<p class="cye-lm-tag">I tried the exact same example that is in the spring doc and seems not to be working:<br> <a href="http://docs.spring.io/spring-data/jpa/docs/1.10.2.RELEASE/reference/html/#jpa.query-methods.at-query" rel="nofollow">http://docs.spring.io/spring-data/jpa/docs/1.10.2.RELEASE/reference/html/#jpa.query-methods.at-query</a></p>
<p class="cye-lm-tag">Example 50:<br> public interface UserRepository extends JpaRepository {</p>
<p class="cye-lm-tag"> @Query(value = “SELECT * FROM USERS WHERE LASTNAME = ?1”,<br> countQuery = “SELECT count(*) FROM USERS WHERE LASTNAME = ?1”,<br> nativeQuery = true)<br> Page findByLastname(String lastname, Pageable pageable);<br> }</p>
<p class="cye-lm-tag">It still says the usual message: “Cannot use native queries with dynamic sorting and/or pagination in method public abstract…”</p>
</div> </div><ul class="children"><li class="comment even depth-2" id="comment-1469246"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Ignacio Larrañaga</span>  <span class="comment_date cye-lm-tag">July 20, 2016, 18:09</span></div><div class="comment_text" id="comment-body-1469246"><p class="cye-lm-tag">Sorry, missed the version I was trying:</p>
<p class="cye-lm-tag"> org.springframework.data<br> spring-data-jpa<br> 1.10.2.RELEASE</p>
<p class="cye-lm-tag">Actually through spring-boot (1.4.0.RC1)</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-3" id="comment-1469247"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">July 20, 2016, 18:20</span></div><div class="comment_text" id="comment-body-1469247"><p class="cye-lm-tag">Hi,</p>
<p class="cye-lm-tag">I haven’t tried the latest Spring Data JPA version (yet) so I cannot verify whether this works or not. Have you tried to register a result set mapping for your count query? The reason why I ask this is that I noticed this text right below the example:</p>
<blockquote><p class="cye-lm-tag">Be aware that you probably must register a result set mapping for your count query, though.</p>
</blockquote></div> </div></li></ul></li></ul></li></ul></div> </section>
<br><hr>

<h2>13 Auditing, Part One</h2>
<div class="post_content" itemprop="articleBody"><p class="cye-lm-tag">When we hear the word auditing, the first thing that comes to mind is an audit log that contains each version of the audited entity. Implementing an audit log is a complex task that takes a lot of time. Luckily, most of the time we don’t need to do it.</p>
<p class="cye-lm-tag">However, it is quite common that we must be able to answer to the following questions:</p>
<ul><li>When the entity X was created and/or modified?</li><li>Who created and/or modified the entity X?</li></ul><p class="cye-lm-tag"></p>
<p class="cye-lm-tag">The auditing infrastructure of Spring Data JPA helps us to answer to these questions. This blog post describes how we can add the creation and modification time fields into our entities and update them by using the auditing infrastructure of Spring Data JPA.</p>
<p class="cye-lm-tag">Let’s start by creating a service that returns the current date and time.</p>
<div class="note"> <strong>Additional Reading:</strong><p class="cye-lm-tag"></p>
<p class="cye-lm-tag">If you are not familiar with Spring Data JPA, <strong>you should read</strong> the following blog posts before you continue reading this blog post:</p>
<ul><li><a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-introduction/">Spring Data JPA Tutorial: Introduction</a> provides a quick introduction to Spring Data JPA and gives an overview of the Spring Data repository interfaces.</li><li><a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-getting-the-required-dependencies/">Spring Data JPA Tutorial: Getting the Required Dependencies</a> describes how you can get the required dependencies.</li><li><a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-part-one-configuration/">Spring Data JPA Tutorial: Configuration</a> describes how you can configure the persistence layer of a Spring application that uses Spring Data JPA.</li></ul></div><h2>Getting Current Date and Time</h2><p class="cye-lm-tag">There are two reasons why we should create an interface that can be used for obtaining the current date and time. These reasons are:</p>
<ol><li>We want to create two different implementations for this interface:<ul><li>The first implementation is used by our application and it returns the current date and time.</li><li>The second implementation is used by our integration tests and it returns always the same date and time.</li></ul></li><li>If we are implementing a real-life application, the odds are that our other components need to get the current date and time as well.</li></ol><div class="note"> The blog post titled: <a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-integration-testing/">Spring Data JPA Tutorial: Integration Testing</a> describes how you can write integration tests for your Spring Data JPA repositories.</div><p class="cye-lm-tag">The <em>DateTimeService</em> interface declares only one method:</p>
<ul><li>The <em>getCurrentDateAndTime()</em> method returns a <em>ZonedDateTime</em> object.</li></ul><p class="cye-lm-tag">The source code of the <em>DateTimeService</em> interface looks as follows:</p>
<div><div id="highlighter_959681" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">import</code> <code class="java plain">java.time.ZonedDateTime;</code></div><div class="line number2 index1 alt1">&nbsp;</div><div class="line number3 index2 alt2"><code class="java keyword">public</code> <code class="java keyword">interface</code> <code class="java plain">DateTimeService {</code></div><div class="line number4 index3 alt1">&nbsp;</div><div class="line number5 index4 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">ZonedDateTime getCurrentDateAndTime();</code></div><div class="line number6 index5 alt1"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><p class="cye-lm-tag">The <em>CurrentTimeDateTimeService</em> class implements the <em>DateTimeService</em> interface. Its <em>getCurrentDateAndTime()</em> method simply returns the current date and time.</p>
<p class="cye-lm-tag">The source code of the <em>CurrentTimeDateTimeService</em> looks as follows:</p>
<div><div id="highlighter_858140" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2 highlighted">5</div><div class="line number6 index5 alt1 highlighted">6</div><div class="line number7 index6 alt2 highlighted">7</div><div class="line number8 index7 alt1 highlighted">8</div><div class="line number9 index8 alt2">9</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">import</code> <code class="java plain">java.time.ZonedDateTime;</code></div><div class="line number2 index1 alt1">&nbsp;</div><div class="line number3 index2 alt2"><code class="java keyword">public</code> <code class="java keyword">class</code> <code class="java plain">CurrentTimeDateTimeService </code><code class="java keyword">implements</code> <code class="java plain">DateTimeService {</code></div><div class="line number4 index3 alt1">&nbsp;</div><div class="line number5 index4 alt2 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Override</code></div><div class="line number6 index5 alt1 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java plain">ZonedDateTime getCurrentDateAndTime() {</code></div><div class="line number7 index6 alt2 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">return</code> <code class="java plain">ZonedDateTime.now();</code></div><div class="line number8 index7 alt1 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number9 index8 alt2"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><div class="note"> <strong>Additional Reading:</strong><p class="cye-lm-tag"></p>
<ul><li><a href="https://docs.oracle.com/javase/8/docs/api/java/time/ZonedDateTime.html" target="_blank">The Javadoc of the <em>ZonedDateTime</em> class</a></li></ul></div><p class="cye-lm-tag">Let’s move on and find out how we can integrate our service with the auditing infrastructure of Spring Data JPA.</p>
<h2>Integrating Our Service With the Auditing Infrastructure of Spring Data JPA</h2><p class="cye-lm-tag">The auditing infrastructure of Spring Data JPA uses the <em>DateTimeProvider</em> interface when it needs to get the current date and time. This means that if we want to integrate our <em>DateTimeService</em> with Spring Data JPA, we need to implement that interface. We can do this by following these steps:</p>
<ol><li>Create an <em>AuditingDateTimeProvider</em> class and implement the <em>DateTimeProvider</em> interface.</li><li>Add a <em>final DateTimeService</em> field to the created class and inject it by using constructor injection.</li><li>Implement the <em>getNow()</em> method. We need to fetch the current date and time by using the <em>DateTimeService object</em> and return a new <em>GregorianCalendar</em> object.</li></ol><p class="cye-lm-tag">The source code of the <em>AuditingDateTimeProvider</em> class looks as follows:</p>
<div><div id="highlighter_406156" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.auditing.DateTimeProvider;</code></div><div class="line number2 index1 alt1">&nbsp;</div><div class="line number3 index2 alt2"><code class="java keyword">import</code> <code class="java plain">java.util.Calendar;</code></div><div class="line number4 index3 alt1"><code class="java keyword">import</code> <code class="java plain">java.util.GregorianCalendar;</code></div><div class="line number5 index4 alt2">&nbsp;</div><div class="line number6 index5 alt1"><code class="java keyword">public</code> <code class="java keyword">class</code> <code class="java plain">AuditingDateTimeProvider </code><code class="java keyword">implements</code> <code class="java plain">DateTimeProvider {</code></div><div class="line number7 index6 alt2">&nbsp;</div><div class="line number8 index7 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java keyword">final</code> <code class="java plain">DateTimeService dateTimeService;</code></div><div class="line number9 index8 alt2">&nbsp;</div><div class="line number10 index9 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java plain">AuditingDateTimeProvider(DateTimeService dateTimeService) {</code></div><div class="line number11 index10 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">this</code><code class="java plain">.dateTimeService = dateTimeService;</code></div><div class="line number12 index11 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number13 index12 alt2">&nbsp;</div><div class="line number14 index13 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Override</code></div><div class="line number15 index14 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java plain">Calendar getNow() {</code></div><div class="line number16 index15 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">return</code> <code class="java plain">GregorianCalendar.from(dateTimeService.getCurrentDateAndTime());</code></div><div class="line number17 index16 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number18 index17 alt1"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><div class="note"> <strong>Additional Reading:</strong><p class="cye-lm-tag"></p>
<ul><li><a href="http://docs.spring.io/spring-data/commons/docs/current/api/org/springframework/data/auditing/DateTimeProvider.html" target="_blank">The Javadoc of the <em>DateTimeProvider</em> interface</a></li><li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/GregorianCalendar.html" target="_blank">The Javadoc of the <em>GregorianCalendar</em> class</a></li></ul></div><p class="cye-lm-tag">Our next step is to configure the application context of our application. Let’s find out how we can do it.</p>
<h2>Configuring the Application Context</h2><p class="cye-lm-tag"><strong>First</strong>, we need to create a <em>DateTimeService</em> bean that is used when we run our application. We should declare this bean in the root application context configuration class (or XML configuration file) because it is probably used by more than one component, and I think that the root application context configuration class (or XML configuration file) is a natural place for this kind of beans.</p>
<p class="cye-lm-tag">We can create this bean by following these steps:</p>
<ol><li>Create the <em>currentTimeDateTimeService()</em> method and implement it by returning a new <em>CurrentTimeDateTimeService</em> object.</li><li>Annotate the method with the <em>@Bean</em> annotation.</li><li>Annotate the method with the <em>@Profile</em> annotation and set its value to <em>Profiles.APPLICATION</em>. This ensures that this bean is created only when our application is started.</li></ol><p class="cye-lm-tag">The relevant part of the <em>ExampleApplicationContext</em> class looks as follows:</p>
<div><div id="highlighter_692169" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1 highlighted">12</div><div class="line number13 index12 alt2 highlighted">13</div><div class="line number14 index13 alt1 highlighted">14</div><div class="line number15 index14 alt2 highlighted">15</div><div class="line number16 index15 alt1 highlighted">16</div><div class="line number17 index16 alt2">17</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.context.annotation.Bean;</code></div><div class="line number2 index1 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.context.annotation.ComponentScan;</code></div><div class="line number3 index2 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.context.annotation.Configuration;</code></div><div class="line number4 index3 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.context.annotation.Import;</code></div><div class="line number5 index4 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.context.annotation.Profile;</code></div><div class="line number6 index5 alt1">&nbsp;</div><div class="line number7 index6 alt2"><code class="java color1">@Configuration</code></div><div class="line number8 index7 alt1"><code class="java color1">@ComponentScan</code><code class="java plain">(</code><code class="java string">"net.petrikainulainen.springdata.jpa"</code><code class="java plain">)</code></div><div class="line number9 index8 alt2"><code class="java color1">@Import</code><code class="java plain">({WebMvcContext.</code><code class="java keyword">class</code><code class="java plain">, PersistenceContext.</code><code class="java keyword">class</code><code class="java plain">})</code></div><div class="line number10 index9 alt1"><code class="java keyword">public</code> <code class="java keyword">class</code> <code class="java plain">ExampleApplicationContext {</code></div><div class="line number11 index10 alt2">&nbsp;</div><div class="line number12 index11 alt1 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Profile</code><code class="java plain">(Profiles.APPLICATION)</code></div><div class="line number13 index12 alt2 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Bean</code></div><div class="line number14 index13 alt1 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">DateTimeService currentTimeDateTimeService() {</code></div><div class="line number15 index14 alt2 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">return</code> <code class="java keyword">new</code> <code class="java plain">CurrentTimeDateTimeService();</code></div><div class="line number16 index15 alt1 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number17 index16 alt2"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><div class="note"> The <a href="https://github.com/pkainulainen/spring-data-jpa-examples/blob/master/query-methods/src/main/java/net/petrikainulainen/springdata/jpa/config/Profiles.java" target="_blank"><em>Profiles</em></a> is a simple class that defines the “legal” Spring profiles of our example application.<p class="cye-lm-tag"></p>
<p class="cye-lm-tag"><strong>Additional Reading:</strong></p>
<ul><li><a href="http://www.baeldung.com/spring-profiles" target="_blank">Spring Profiles</a></li><li><a href="http://docs.spring.io/spring/docs/4.1.x/spring-framework-reference/htmlsingle/#beans-definition-profiles" target="_blank">Spring Framework Reference Manual: 5.13.1 Bean Definition Profiles</a></li><li><a href="http://docs.spring.io/spring/docs/4.1.x/javadoc-api/org/springframework/context/annotation/Bean.html" target="_blank">The Javadoc of the <em>@Bean</em> annotation</a></li><li><a href="http://docs.spring.io/spring/docs/4.1.x/javadoc-api/org/springframework/context/annotation/Profile.html" target="_blank">The Javadoc of the <em>@Profile</em> annotation</a></li></ul></div><p class="cye-lm-tag"><strong>Second</strong>, we need to create the <em>DateTimeProvider</em> bean and enable the auditing support of Spring Data. We can do this by making the following changes to the configuration class that configures the persistence layer of our example application:</p>
<ol><li>Create a <em>dateTimeProvider()</em> method that returns a <em>DateTimeProvider</em> object and takes a <em>DateTimeService</em> object as a method parameter.</li><li>Implement the method by creating a new <em>AuditingAwareDateTimeProvider</em> object.</li><li>Annotate the created method with the <em>@Bean</em> annotation.</li><li>Annotate the configuration class with the <em>@EnableJpaAuditing</em> annotation and set the name of the <em>DateTimeProvider</em> bean (<em>dateTimeProvider</em>) as the value of of its <em>dataTimeProviderRef</em> attribute.</li></ol><p class="cye-lm-tag">The relevant part of the <em>PersistenceContext</em> class looks as follows:</p>
<div><div id="highlighter_778707" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1 highlighted">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2 highlighted">17</div><div class="line number18 index17 alt1 highlighted">18</div><div class="line number19 index18 alt2 highlighted">19</div><div class="line number20 index19 alt1 highlighted">20</div><div class="line number21 index20 alt2">21</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.context.annotation.Bean;</code></div><div class="line number2 index1 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.context.annotation.Configuration;</code></div><div class="line number3 index2 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.auditing.DateTimeProvider;</code></div><div class="line number4 index3 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.jpa.repository.config.EnableJpaAuditing;</code></div><div class="line number5 index4 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.jpa.repository.config.EnableJpaRepositories;</code></div><div class="line number6 index5 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.transaction.annotation.EnableTransactionManagement;</code></div><div class="line number7 index6 alt2">&nbsp;</div><div class="line number8 index7 alt1">&nbsp;</div><div class="line number9 index8 alt2"><code class="java color1">@Configuration</code></div><div class="line number10 index9 alt1 highlighted"><code class="java color1">@EnableJpaAuditing</code><code class="java plain">(dateTimeProviderRef = </code><code class="java string">"dateTimeProvider"</code><code class="java plain">)</code></div><div class="line number11 index10 alt2"><code class="java color1">@EnableJpaRepositories</code><code class="java plain">(basePackages = {</code></div><div class="line number12 index11 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java string">"net.petrikainulainen.springdata.jpa.todo"</code></div><div class="line number13 index12 alt2"><code class="java plain">})</code></div><div class="line number14 index13 alt1"><code class="java color1">@EnableTransactionManagement</code></div><div class="line number15 index14 alt2"><code class="java keyword">class</code> <code class="java plain">PersistenceContext {</code></div><div class="line number16 index15 alt1">&nbsp;</div><div class="line number17 index16 alt2 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Bean</code></div><div class="line number18 index17 alt1 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">DateTimeProvider dateTimeProvider(DateTimeService dateTimeService) {</code></div><div class="line number19 index18 alt2 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">return</code> <code class="java keyword">new</code> <code class="java plain">AuditingDateTimeProvider(dateTimeService);</code></div><div class="line number20 index19 alt1 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number21 index20 alt2"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><div class="note"> <strong>Additional Reading:</strong><p class="cye-lm-tag"></p>
<ul><li><a href="http://docs.spring.io/spring-data/jpa/docs/current/api/org/springframework/data/jpa/repository/config/EnableJpaAuditing.html" target="_blank">The Javadoc of the <em>@EnableJpaAuditing</em> annotation</a></li></ul></div><p class="cye-lm-tag">Let’s move on and make the required changes to our entity class.</p>
<h2>Modifying Our Entity Class</h2><p class="cye-lm-tag">We need to make the following changes to our entity class (<em>Todo</em>):</p>
<ol><li>We need to ensure that the value of the <em>creationTime</em> field is set when our entity is persisted for the first time.</li><li>We need to ensure that the value of the <em>modificationTime</em> field is set when our entity is persisted for the first time and updated when the information of our entity is updated.</li></ol><p class="cye-lm-tag">We can make these changes by following these steps:</p>
<ol><li>Annotate the <em>creationTime</em> field with the <em>@CreatedDate</em> annotation. This identifies the field whose value is set when the entity is persisted to the database for the first time.</li><li>Annotate the <em>modificationTime</em> field with the <em>@LastModifiedDate</em> annotation. This identifies the field whose value is set when the entity is persisted for the first time and updated when the information of the entity is updated.</li><li>Annotate the entity class with the <em>@EntityListeners</em> annotation and set its value to <em>AuditingEntityListener.class</em>. The <em>AuditingEntityListener</em> class is a JPA entity listener that updates the audit information of an entity when it is persisted and updated.</li></ol><p class="cye-lm-tag">The relevant part of the <em>Todo</em> class looks as follows:</p>
<div><div id="highlighter_275308" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2 highlighted">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div class="line number23 index22 alt2">23</div><div class="line number24 index23 alt1">24</div><div class="line number25 index24 alt2">25</div><div class="line number26 index25 alt1">26</div><div class="line number27 index26 alt2 highlighted">27</div><div class="line number28 index27 alt1">28</div><div class="line number29 index28 alt2">29</div><div class="line number30 index29 alt1">30</div><div class="line number31 index30 alt2">31</div><div class="line number32 index31 alt1">32</div><div class="line number33 index32 alt2">33</div><div class="line number34 index33 alt1">34</div><div class="line number35 index34 alt2 highlighted">35</div><div class="line number36 index35 alt1">36</div><div class="line number37 index36 alt2">37</div><div class="line number38 index37 alt1">38</div><div class="line number39 index38 alt2">39</div><div class="line number40 index39 alt1">40</div><div class="line number41 index40 alt2">41</div><div class="line number42 index41 alt1">42</div><div class="line number43 index42 alt2">43</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">import</code> <code class="java plain">org.hibernate.annotations.Type;</code></div><div class="line number2 index1 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.annotation.CreatedDate;</code></div><div class="line number3 index2 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.annotation.LastModifiedDate;</code></div><div class="line number4 index3 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.jpa.domain.support.AuditingEntityListener;</code></div><div class="line number5 index4 alt2">&nbsp;</div><div class="line number6 index5 alt1"><code class="java keyword">import</code> <code class="java plain">javax.persistence.Column;</code></div><div class="line number7 index6 alt2"><code class="java keyword">import</code> <code class="java plain">javax.persistence.Entity;</code></div><div class="line number8 index7 alt1"><code class="java keyword">import</code> <code class="java plain">javax.persistence.EntityListeners;</code></div><div class="line number9 index8 alt2"><code class="java keyword">import</code> <code class="java plain">javax.persistence.GeneratedValue;</code></div><div class="line number10 index9 alt1"><code class="java keyword">import</code> <code class="java plain">javax.persistence.GenerationType;</code></div><div class="line number11 index10 alt2"><code class="java keyword">import</code> <code class="java plain">javax.persistence.Id;</code></div><div class="line number12 index11 alt1"><code class="java keyword">import</code> <code class="java plain">javax.persistence.Table;</code></div><div class="line number13 index12 alt2"><code class="java keyword">import</code> <code class="java plain">javax.persistence.Version;</code></div><div class="line number14 index13 alt1"><code class="java keyword">import</code> <code class="java plain">java.time.ZonedDateTime;</code></div><div class="line number15 index14 alt2">&nbsp;</div><div class="line number16 index15 alt1"><code class="java color1">@Entity</code></div><div class="line number17 index16 alt2 highlighted"><code class="java color1">@EntityListeners</code><code class="java plain">(AuditingEntityListener.</code><code class="java keyword">class</code><code class="java plain">)</code></div><div class="line number18 index17 alt1"><code class="java color1">@Table</code><code class="java plain">(name = </code><code class="java string">"todos"</code><code class="java plain">)</code></div><div class="line number19 index18 alt2"><code class="java keyword">final</code> <code class="java keyword">class</code> <code class="java plain">Todo {</code></div><div class="line number20 index19 alt1">&nbsp;</div><div class="line number21 index20 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Id</code></div><div class="line number22 index21 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@GeneratedValue</code><code class="java plain">(strategy = GenerationType.AUTO)</code></div><div class="line number23 index22 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java plain">Long id;</code></div><div class="line number24 index23 alt1">&nbsp;</div><div class="line number25 index24 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Column</code><code class="java plain">(name = </code><code class="java string">"creation_time"</code><code class="java plain">, nullable = </code><code class="java keyword">false</code><code class="java plain">)</code></div><div class="line number26 index25 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Type</code><code class="java plain">(type = </code><code class="java string">"org.jadira.usertype.dateandtime.threeten.PersistentZonedDateTime"</code><code class="java plain">)</code></div><div class="line number27 index26 alt2 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@CreatedDate</code></div><div class="line number28 index27 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java plain">ZonedDateTime creationTime;</code></div><div class="line number29 index28 alt2">&nbsp;</div><div class="line number30 index29 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Column</code><code class="java plain">(name = </code><code class="java string">"description"</code><code class="java plain">, length = </code><code class="java value">500</code><code class="java plain">)</code></div><div class="line number31 index30 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java plain">String description;</code></div><div class="line number32 index31 alt1">&nbsp;</div><div class="line number33 index32 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Column</code><code class="java plain">(name = </code><code class="java string">"modification_time"</code><code class="java plain">)</code></div><div class="line number34 index33 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Type</code><code class="java plain">(type = </code><code class="java string">"org.jadira.usertype.dateandtime.threeten.PersistentZonedDateTime"</code><code class="java plain">)</code></div><div class="line number35 index34 alt2 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@LastModifiedDate</code></div><div class="line number36 index35 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java plain">ZonedDateTime modificationTime;</code></div><div class="line number37 index36 alt2">&nbsp;</div><div class="line number38 index37 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Column</code><code class="java plain">(name = </code><code class="java string">"title"</code><code class="java plain">, nullable = </code><code class="java keyword">false</code><code class="java plain">, length = </code><code class="java value">100</code><code class="java plain">)</code></div><div class="line number39 index38 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java plain">String title;</code></div><div class="line number40 index39 alt1">&nbsp;</div><div class="line number41 index40 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Version</code></div><div class="line number42 index41 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java keyword">long</code> <code class="java plain">version;</code></div><div class="line number43 index42 alt2"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><p class="cye-lm-tag">Typically it is a good idea to add the audit fields into an abstract base class and annotate it with the <em>@EntityListener</em> annotation. The reason why I didn’t do it here is that our example application has only one entity, and I wanted to keep things as simple as possible.</p>
<p class="cye-lm-tag">If we would move this information to the abstract base class, its source code would look as follows:</p>
<div><div id="highlighter_970849" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1 highlighted">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1 highlighted">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div class="line number23 index22 alt2 highlighted">23</div><div class="line number24 index23 alt1">24</div><div class="line number25 index24 alt2">25</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">import</code> <code class="java plain">org.hibernate.annotations.Type;</code></div><div class="line number2 index1 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.annotation.CreatedDate;</code></div><div class="line number3 index2 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.annotation.LastModifiedDate;</code></div><div class="line number4 index3 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.jpa.domain.support.AuditingEntityListener;</code></div><div class="line number5 index4 alt2">&nbsp;</div><div class="line number6 index5 alt1"><code class="java keyword">import</code> <code class="java plain">javax.persistence.Column;</code></div><div class="line number7 index6 alt2"><code class="java keyword">import</code> <code class="java plain">javax.persistence.Entity;</code></div><div class="line number8 index7 alt1"><code class="java keyword">import</code> <code class="java plain">javax.persistence.EntityListeners;</code></div><div class="line number9 index8 alt2"><code class="java keyword">import</code> <code class="java plain">javax.persistence.MappedSuperClass</code></div><div class="line number10 index9 alt1"><code class="java keyword">import</code> <code class="java plain">java.time.ZonedDateTime;</code></div><div class="line number11 index10 alt2">&nbsp;</div><div class="line number12 index11 alt1 highlighted"><code class="java color1">@EntityListeners</code><code class="java plain">(AuditingEntityListener.</code><code class="java keyword">class</code><code class="java plain">)</code></div><div class="line number13 index12 alt2"><code class="java color1">@MappedSuperClass</code></div><div class="line number14 index13 alt1"><code class="java keyword">public</code> <code class="java keyword">abstract</code> <code class="java keyword">class</code> <code class="java plain">BaseEntity {</code></div><div class="line number15 index14 alt2">&nbsp;</div><div class="line number16 index15 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Column</code><code class="java plain">(name = </code><code class="java string">"creation_time"</code><code class="java plain">, nullable = </code><code class="java keyword">false</code><code class="java plain">)</code></div><div class="line number17 index16 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Type</code><code class="java plain">(type = </code><code class="java string">"org.jadira.usertype.dateandtime.threeten.PersistentZonedDateTime"</code><code class="java plain">)</code></div><div class="line number18 index17 alt1 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@CreatedDate</code></div><div class="line number19 index18 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java plain">ZonedDateTime creationTime;</code></div><div class="line number20 index19 alt1">&nbsp;</div><div class="line number21 index20 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Column</code><code class="java plain">(name = </code><code class="java string">"modification_time"</code><code class="java plain">)</code></div><div class="line number22 index21 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Type</code><code class="java plain">(type = </code><code class="java string">"org.jadira.usertype.dateandtime.threeten.PersistentZonedDateTime"</code><code class="java plain">)</code></div><div class="line number23 index22 alt2 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@LastModifiedDate</code></div><div class="line number24 index23 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java plain">ZonedDateTime modificationTime;</code></div><div class="line number25 index24 alt2"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><div class="note"> If you don’t want to use annotations, your entities must either implement the <em>Auditable</em> interface or extend the <em>AbstractAuditable</em> class. The <em>Auditable</em> interface declares getter and setter methods for all audit fields. The <em>AbstractAuditable</em> class provides implementations for these methods, but its drawback is that it creates a coupling between your entities and Spring Data.<p class="cye-lm-tag"></p>
<p class="cye-lm-tag"><strong>Additional Reading:</strong></p>
<ul><li><a href="http://docs.spring.io/spring-data/commons/docs/current/api/org/springframework/data/domain/Auditable.html" target="_blank">The Javadoc of the <em>Auditable</em> interface</a></li><li><a href="http://docs.spring.io/spring-data/jpa/docs/current/api/org/springframework/data/jpa/domain/AbstractAuditable.html" target="_blank">The Javadoc of the <em>AbstractAuditable</em> class</a></li><li><a href="http://docs.spring.io/spring-data/jpa/docs/current/api/org/springframework/data/jpa/domain/support/AuditingEntityListener.html" target="_blank">The Javadoc of the <em>AuditingEntityListener</em> class</a></li><li><a href="http://docs.spring.io/spring-data/commons/docs/current/api/org/springframework/data/annotation/CreatedDate.html" target="_blank">The Javadoc of the <em>@CreatedDate</em> annotation</a></li><li><a href="http://docs.oracle.com/javaee/7/api/javax/persistence/EntityListeners.html" target="_blank">The Javadoc of the <em>@EntityListeners</em> annotation</a></li><li><a href="http://docs.spring.io/spring-data/commons/docs/current/api/org/springframework/data/annotation/LastModifiedDate.html" target="_blank">The Javadoc of the <em>@LastModifiedDate</em> annotation</a></li><li><a href="https://docs.oracle.com/javaee/5/api/javax/persistence/MappedSuperclass.html" target="_blank">The Javadoc of the <em>@MapperSuperClass</em> annotation</a></li></ul></div><p class="cye-lm-tag">Let’s find out why we should use the auditing support of Spring Data JPA instead of the callback methods specified in the Java Persistence API.</p>
<h2>Why Should We Use the Auditing Support of Spring Data JPA?</h2><p class="cye-lm-tag">If we need to add the creation and modification time fields into our entities, we don’t have to use Spring Data JPA. We can set the field values of these fields by creating callback methods that are attached to the entity lifecycle events.</p>
<p class="cye-lm-tag">The source of an abstract base class, which uses this method, looks as follows:</p>
<div><div id="highlighter_957230" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2 highlighted">21</div><div class="line number22 index21 alt1 highlighted">22</div><div class="line number23 index22 alt2 highlighted">23</div><div class="line number24 index23 alt1 highlighted">24</div><div class="line number25 index24 alt2 highlighted">25</div><div class="line number26 index25 alt1 highlighted">26</div><div class="line number27 index26 alt2">27</div><div class="line number28 index27 alt1 highlighted">28</div><div class="line number29 index28 alt2 highlighted">29</div><div class="line number30 index29 alt1 highlighted">30</div><div class="line number31 index30 alt2 highlighted">31</div><div class="line number32 index31 alt1">32</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">import</code> <code class="java plain">org.hibernate.annotations.Type;</code></div><div class="line number2 index1 alt1">&nbsp;</div><div class="line number3 index2 alt2"><code class="java keyword">import</code> <code class="java plain">javax.persistence.Column;</code></div><div class="line number4 index3 alt1"><code class="java keyword">import</code> <code class="java plain">javax.persistence.Entity;</code></div><div class="line number5 index4 alt2"><code class="java keyword">import</code> <code class="java plain">javax.persistence.MappedSuperClass;</code></div><div class="line number6 index5 alt1"><code class="java keyword">import</code> <code class="java plain">javax.persistence.PrePersist;</code></div><div class="line number7 index6 alt2"><code class="java keyword">import</code> <code class="java plain">javax.persistence.PreUpdate;</code></div><div class="line number8 index7 alt1"><code class="java keyword">import</code> <code class="java plain">java.time.ZonedDateTime;</code></div><div class="line number9 index8 alt2">&nbsp;</div><div class="line number10 index9 alt1"><code class="java color1">@MappedSuperClass</code></div><div class="line number11 index10 alt2"><code class="java keyword">public</code> <code class="java keyword">abstract</code> <code class="java keyword">class</code> <code class="java plain">BaseEntity {</code></div><div class="line number12 index11 alt1">&nbsp;</div><div class="line number13 index12 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Column</code><code class="java plain">(name = </code><code class="java string">"creation_time"</code><code class="java plain">, nullable = </code><code class="java keyword">false</code><code class="java plain">)</code></div><div class="line number14 index13 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Type</code><code class="java plain">(type = </code><code class="java string">"org.jadira.usertype.dateandtime.threeten.PersistentZonedDateTime"</code><code class="java plain">)</code></div><div class="line number15 index14 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java plain">ZonedDateTime creationTime;</code></div><div class="line number16 index15 alt1">&nbsp;</div><div class="line number17 index16 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Column</code><code class="java plain">(name = </code><code class="java string">"modification_time"</code><code class="java plain">)</code></div><div class="line number18 index17 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Type</code><code class="java plain">(type = </code><code class="java string">"org.jadira.usertype.dateandtime.threeten.PersistentZonedDateTime"</code><code class="java plain">)</code></div><div class="line number19 index18 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java plain">ZonedDateTime modificationTime;</code></div><div class="line number20 index19 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number21 index20 alt2 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@PrePersist</code></div><div class="line number22 index21 alt1 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java keyword">void</code> <code class="java plain">prePersist() {</code></div><div class="line number23 index22 alt2 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">ZonedDateTime now = ZonedDateTime.now();</code></div><div class="line number24 index23 alt1 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">this</code><code class="java plain">.creationTime = now;</code></div><div class="line number25 index24 alt2 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">this</code><code class="java plain">.modificationTime = now;</code></div><div class="line number26 index25 alt1 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number27 index26 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number28 index27 alt1 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@PreUpdate</code></div><div class="line number29 index28 alt2 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java keyword">void</code> <code class="java plain">preUpdate() {</code></div><div class="line number30 index29 alt1 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">this</code><code class="java plain">.modificationTime = ZonedDateTime.now();</code></div><div class="line number31 index30 alt2 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number32 index31 alt1"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><div class="note"> <strong>Additional Reading:</strong><p class="cye-lm-tag"></p>
<ul><li><a href="http://www.objectdb.com/java/jpa/persistence/event" target="_blank">JPA Lifecycle Events</a></li><li><a href="http://docs.oracle.com/javaee/7/api/javax/persistence/PrePersist.html" target="_blank">The Javadoc of the <em>@PrePersist</em> annotation</a></li><li><a href="http://docs.oracle.com/javaee/7/api/javax/persistence/PreUpdate.html" target="_blank">The Javadoc of the <em>@PreUpdate</em> annotation</a></li></ul></div><p class="cye-lm-tag">This method is a lot simpler than the solution that uses the auditing infrastructure of Spring Data JPA. The obvious question is:</p>
<blockquote><p class="cye-lm-tag">Does it make any sense to use a more complex solution?</p>
</blockquote><p class="cye-lm-tag">It depends. There are two reasons why it makes sense:</p>
<ul><li>If we have to write tests which ensure that the creation and modification times are correct, we have to use the auditing infrastructure of Spring Data JPA because it gives us the possibility to use a <em>DateTimeProvider</em> that always returns the same date and time.</li><li>If we need to save the information of the user who created and/or modified an entity, we should use Spring Data for setting the creation and modification times as well. It just doesn’t make any sense to set the audit information of an entity by using two different mechanisms.</li></ul><p class="cye-lm-tag">Let’s move on and summarize what we learned from this blog post.<br></p>
<p class="cye-lm-tag"></p>
<p class="cye-lm-tag"></p>
<h2>Summary</h2><p class="cye-lm-tag">This blog post has taught us three things:</p>
<ul><li>We can create our own date and time provider by implementing the <em>DateTimeProvider</em> interface. This is useful because it gives us the possibility to use a different provider for testing purposes.</li><li>We can identify the creation and modification time fields by using annotations, set the values by implementing the <em>Auditable</em> interface, or extend the <em>AbstractAuditable</em> class.</li><li>It is simpler to set the values of the creation and modification time fields by using entity lifecycle events and callback methods, but there are situations where we should use the auditing infrastructure of Spring Data JPA (even though it is a more complex solution).</li></ul><p class="cye-lm-tag">The next part of this tutorial describes how we can get the answer to the question: <a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-auditing-part-two/">who created and/or modified the entity X</a>.</p>
<p class="cye-lm-tag"><strong>P.S.</strong> You can <a href="https://github.com/pkainulainen/spring-data-jpa-examples/tree/master/query-methods" target="_blank">get the example application of this blog post from Github</a>.</p>
<div class="note">If you want to learn how to use Spring Data JPA, you should read my <a href="/spring-data-jpa-tutorial/">Spring Data JPA tutorial</a>.</div> <span id="tve_leads_end_content" style="display: block; visibility: hidden; border: 1px solid transparent;" class="cye-lm-tag"></span>
</div>

</div>




</div>
</div>
</div>
</div>
</div>
</div><p style="line-height: 24px;" data-unit="px" class="tve_p_center cye-lm-tag"><span class="tve_custom_font_size cye-lm-tag" style="font-size: 16px;">I will never rent, sell, or share your email address.<br></span></p>

</div></div></div></div></div></div></div>
<section id="comments"><div class="comments_intro"><span class="num_comments cye-lm-tag">14</span> comments… <a href="#commentform" rel="nofollow">add one</a></div><ul class="comment_list"><li class="comment even thread-even depth-1" id="comment-1382171"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">SKS</span>  <span class="comment_date cye-lm-tag">February 29, 2016, 10:41</span></div><div class="comment_text" id="comment-body-1382171"><p class="cye-lm-tag">Nice, thanks.</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-1382199"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">February 29, 2016, 12:43</span></div><div class="comment_text" id="comment-body-1382199"><p class="cye-lm-tag">You are welcome.</p>
</div> </div></li></ul></li><li class="comment even thread-odd thread-alt depth-1" id="comment-1382173"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Ronnie Wang</span>  <span class="comment_date cye-lm-tag">February 29, 2016, 10:44</span></div><div class="comment_text" id="comment-body-1382173"><p class="cye-lm-tag">Hi Petri<br> I use JDK7. Don’t have the ZoneDateTime interface.Is  there any other method to use Spring Data Jpa auditing?</p>
<p class="cye-lm-tag">thanks</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-1382198"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">February 29, 2016, 12:41</span></div><div class="comment_text" id="comment-body-1382198"><p class="cye-lm-tag">Hi Ronnie,</p>
<p class="cye-lm-tag">You can use the “old” <code>Date</code> objects as well.  Just replace <code>ZonedDateTime</code> with <code>Date</code> and you are good to go.</p>
</div> </div><ul class="children"><li class="comment even depth-3" id="comment-1382607"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Ronnie Wang</span>  <span class="comment_date cye-lm-tag">March 1, 2016, 04:37</span></div><div class="comment_text" id="comment-body-1382607"><p class="cye-lm-tag">Hi Petri:</p>
<p class="cye-lm-tag">It’s work, thanks again!</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-4" id="comment-1383060"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">March 1, 2016, 20:10</span></div><div class="comment_text" id="comment-body-1383060"><p class="cye-lm-tag">Hi Ronnie,</p>
<p class="cye-lm-tag">You are welcome!</p>
</div> </div></li></ul></li></ul></li></ul></li><li class="comment even thread-even depth-1" id="comment-1414460"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Hannes Smit</span>  <span class="comment_date cye-lm-tag">April 9, 2016, 15:39</span></div><div class="comment_text" id="comment-body-1414460"><p class="cye-lm-tag">Hi Petri,<br> Thanks for you tutorial. Why did you name the first bean after the implementation and the second after the interface?</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-1414480"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">April 9, 2016, 16:06</span></div><div class="comment_text" id="comment-body-1414480"><p class="cye-lm-tag">Hi Hannes,</p>
<p class="cye-lm-tag">I assume that the first bean means the <code>CurrentTimeDateTimeService</code> class and the second bean means the <code>AuditingDataTimeProvider</code> class.</p>
<p class="cye-lm-tag">The actual application has two beans that implement the <code>DateTimeService</code> interface:</p>
<ul><li>The <code>CurrentTimeDateTimeService</code> class is used when the application context is loaded in an application mode (the Spring profile <code>application</code> is active).</li><li>The <code>ConstantTimeDateTimeService</code> class is used when the application context is loaded in an integration test mode (the Spring profile <code>integrationtest</code> is active).</li></ul><p class="cye-lm-tag">Because I wanted to separate these two classes, I gave them names that describe the implementation.</p>
<p class="cye-lm-tag">The name of the <code>AuditingDataTimeProvider</code> is not optimal (IMO). I gave it this name because I wanted to describe that it is used by the auditing infrastructure of Spring Data JPA (and I couldn’t figure out a better name for it).</p>
</div> </div></li></ul></li><li class="comment even thread-odd thread-alt depth-1" id="comment-1471423"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Connor</span>  <span class="comment_date cye-lm-tag">August 1, 2016, 02:53</span></div><div class="comment_text" id="comment-body-1471423"><p class="cye-lm-tag">Petri,</p>
<p class="cye-lm-tag">Per usual, great article!</p>
<p class="cye-lm-tag">I did notice however that when I attempt to implement your solution, I run into a bit of trouble with the AuditingDateTimeProvider.class.</p>
<p class="cye-lm-tag">The method is missing a return type but it’s implicitly ‘void’ so no biggie there.  But then it doesn’t allow me to set the field as final.  Attempting to auto wire the service also gives me some runtime issues.</p>
<p class="cye-lm-tag">Any thoughts?</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-1472055"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">August 2, 2016, 13:51</span></div><div class="comment_text" id="comment-body-1472055"><p class="cye-lm-tag">Hi Connor,</p>
<p class="cye-lm-tag">Which method are you talking about? The reason why I ask that the only “method” of the <code>AuditingDataTimeProvider</code> class that doesn’t have a return type is the constructor.  This also explains why cannot mark the field as <code>final</code>. Do you have a typo in the class name or in the constructor name?</p>
</div> </div></li></ul></li></ul></div> </section>
<br><hr>
<h2>14  Auditing, Part Two</h2>
<div class="post_content" itemprop="articleBody"><p class="cye-lm-tag">When we hear the word auditing, the first thing that comes to mind is an audit log that contains each version of the audited entity. Implementing an audit log is a complex task that takes a lot of time. Luckily, most of the time we don’t need to do it.</p>
<p class="cye-lm-tag">However, it is quite common that we must be able to answer to the following questions:</p>
<ul><li>When the entity X was created and/or modified?</li><li>Who created and/or modified the entity X?</li></ul><p class="cye-lm-tag"></p>
<p class="cye-lm-tag"></p>
<br> <a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-auditing-part-one/">The previous part of this tutorial</a> described how we can use the auditing infrastructure of Spring Data JPA for finding the answer to the first question.<p class="cye-lm-tag"></p>
<p class="cye-lm-tag">This blog posts describes how we can find the answer to the second question. We will modify our example application to store the username of the authenticated user who created a new todo entry and updated the information of an existing todo entry.</p>
<p class="cye-lm-tag">Let’s start by creating a component that returns the information of the authenticated user.</p>
<div class="note"> <strong>Additional Reading:</strong><p class="cye-lm-tag"></p>
<p class="cye-lm-tag">If you are not familiar with Spring Data JPA, <strong>you should read</strong> the following blog posts before you continue reading this blog post:</p>
<ul><li><a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-introduction/">Spring Data JPA Tutorial: Introduction</a> provides a quick introduction to Spring Data JPA and gives an overview of the Spring Data repository interfaces.</li><li><a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-getting-the-required-dependencies/">Spring Data JPA Tutorial: Getting the Required Dependencies</a> describes how you can get the required dependencies.</li><li><a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-part-one-configuration/">Spring Data JPA Tutorial: Configuration</a> describes how you can configure the persistence layer of a Spring application that uses Spring Data JPA.</li><li><a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-auditing-part-one/">Spring Data JPA Tutorial: Auditing, Part One</a> describes how you can add the creation and modification time fields into your entities by using the auditing infrastructure of Spring Data JPA.</li></ul></div><h2>Getting the Information of the Authenticated User</h2><p class="cye-lm-tag">The auditing infrastructure of Spring Data JPA uses the <em>AuditorAware&lt;T&gt;</em> interface when it needs to get the information of the authenticated user. The <em>AuditorAware</em> interface has one type parameter (<em>T</em>) which describes the type of the entity’s field that contains the auditing information.</p>
<p class="cye-lm-tag">Because we have to create a class that returns the username of the authenticated user, we have to follow these steps:</p>
<ol><li>Create <em>UsernameAuditorAware</em> class and implement the <em>AuditorAware</em> interface. Because we want to store the username of the authenticated user (<em>String</em>), we must set the value of the type parameter to <em>String</em>.</li><li>Implement the <em>getCurrentAuditor()</em> method by following these steps:<ol><li>Get an <em>Authentication</em> object from the <em>SecurityContext</em>.</li><li>Return <em>null</em> if the authentication is not found or the found authentication is not authenticated.</li><li>Return the username of the authenticated user.</li></ol></li></ol><p class="cye-lm-tag">The source code of the <em>UsernameAuditorAware</em> class looks as follows:</p>
<div><div id="highlighter_784736" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.domain.AuditorAware;</code></div><div class="line number2 index1 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.security.core.Authentication;</code></div><div class="line number3 index2 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.security.core.context.SecurityContextHolder;</code></div><div class="line number4 index3 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.security.core.userdetails.User;</code></div><div class="line number5 index4 alt2">&nbsp;</div><div class="line number6 index5 alt1"><code class="java keyword">public</code> <code class="java keyword">class</code> <code class="java plain">UsernameAuditorAware </code><code class="java keyword">implements</code> <code class="java plain">AuditorAware&lt;String&gt; {</code></div><div class="line number7 index6 alt2">&nbsp;</div><div class="line number8 index7 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Override</code></div><div class="line number9 index8 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java plain">String getCurrentAuditor() {</code></div><div class="line number10 index9 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">Authentication authentication = SecurityContextHolder.getContext().getAuthentication();</code></div><div class="line number11 index10 alt2">&nbsp;</div><div class="line number12 index11 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">if</code> <code class="java plain">(authentication == </code><code class="java keyword">null</code> <code class="java plain">|| !authentication.isAuthenticated()) {</code></div><div class="line number13 index12 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">return</code> <code class="java keyword">null</code><code class="java plain">;</code></div><div class="line number14 index13 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number15 index14 alt2">&nbsp;</div><div class="line number16 index15 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">return</code> <code class="java plain">((User) authentication.getPrincipal()).getUsername();</code></div><div class="line number17 index16 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number18 index17 alt1"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><div class="note"> <strong>Additional Reading:</strong><p class="cye-lm-tag"></p>
<ul><li><a href="http://docs.spring.io/spring-data/commons/docs/current/api/org/springframework/data/domain/AuditorAware.html" target="_blank">The Javadoc of the <em>AuditorAware&lt;T&gt;</em> interface</a></li><li><a href="http://docs.spring.io/spring-security/site/docs/4.0.x/apidocs/org/springframework/security/core/Authentication.html" target="_blank">The Javadoc of the <em>Authentication</em> interface</a></li><li><a href="http://docs.spring.io/spring-security/site/docs/4.0.x/apidocs/org/springframework/security/core/context/SecurityContext.html" target="_blank">The Javadoc of the <em>SecurityContext</em> interface</a></li><li><a href="http://docs.spring.io/spring-security/site/docs/4.0.x/apidocs/org/springframework/security/core/context/SecurityContextHolder.html" target="_blank">The Javadoc of the <em>SecurityContextHolder</em> class</a></li><li><a href="http://docs.spring.io/spring-security/site/docs/4.0.x/apidocs/org/springframework/security/core/userdetails/User.html" target="_blank">The Javadoc of the <em>User</em> class</a></li></ul></div><p class="cye-lm-tag">Let’s move on and find out how we can configure the application context of our example application.</p>
<h2>Configuring the Application Context</h2><p class="cye-lm-tag">We can configure the application context of our application by making the following changes to the configuration class that configures the persistence layer of our application:</p>
<ol><li>Create an <em>auditorProvider()</em> method that returns an <em>AuditorAware&lt;String&gt;</em> object.</li><li>Implement the method by creating a new <em>UsernameAuditorAware</em> object.</li><li>Annotate the method with the <em>@Bean</em> annotation.</li><li>Enable the auditing support of Spring Data JPA by annotating the configuration class with the <em>@EnableJpaAuditing</em> annotation.</li></ol><p class="cye-lm-tag">The relevant part of the <em>PersistenceContext</em> class looks as follows:</p>
<div><div id="highlighter_513194" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2 highlighted">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1 highlighted">18</div><div class="line number19 index18 alt2 highlighted">19</div><div class="line number20 index19 alt1 highlighted">20</div><div class="line number21 index20 alt2 highlighted">21</div><div class="line number22 index21 alt1">22</div><div class="line number23 index22 alt2">23</div><div class="line number24 index23 alt1">24</div><div class="line number25 index24 alt2">25</div><div class="line number26 index25 alt1">26</div><div class="line number27 index26 alt2">27</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.context.annotation.Bean;</code></div><div class="line number2 index1 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.context.annotation.Configuration;</code></div><div class="line number3 index2 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.auditing.DateTimeProvider;</code></div><div class="line number4 index3 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.domain.AuditorAware;</code></div><div class="line number5 index4 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.jpa.repository.config.EnableJpaAuditing;</code></div><div class="line number6 index5 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.jpa.repository.config.EnableJpaRepositories;</code></div><div class="line number7 index6 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.transaction.annotation.EnableTransactionManagement;</code></div><div class="line number8 index7 alt1"><code class="java spaces">&nbsp;</code>&nbsp;</div><div class="line number9 index8 alt2"><code class="java spaces">&nbsp;</code>&nbsp;</div><div class="line number10 index9 alt1"><code class="java color1">@Configuration</code></div><div class="line number11 index10 alt2 highlighted"><code class="java color1">@EnableJpaAuditing</code><code class="java plain">(dateTimeProviderRef = </code><code class="java string">"dateTimeProvider"</code><code class="java plain">)</code></div><div class="line number12 index11 alt1"><code class="java color1">@EnableJpaRepositories</code><code class="java plain">(basePackages = {</code></div><div class="line number13 index12 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java string">"net.petrikainulainen.springdata.jpa.todo"</code></div><div class="line number14 index13 alt1"><code class="java plain">})</code></div><div class="line number15 index14 alt2"><code class="java color1">@EnableTransactionManagement</code></div><div class="line number16 index15 alt1"><code class="java keyword">class</code> <code class="java plain">PersistenceContext {</code></div><div class="line number17 index16 alt2">&nbsp;</div><div class="line number18 index17 alt1 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Bean</code></div><div class="line number19 index18 alt2 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">AuditorAware&lt;String&gt; auditorProvider() {</code></div><div class="line number20 index19 alt1 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">return</code> <code class="java keyword">new</code> <code class="java plain">UsernameAuditorAware();</code></div><div class="line number21 index20 alt2 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number22 index21 alt1"><code class="java spaces">&nbsp;</code>&nbsp;</div><div class="line number23 index22 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Bean</code></div><div class="line number24 index23 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">DateTimeProvider dateTimeProvider(DateTimeService dateTimeService) {</code></div><div class="line number25 index24 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">return</code> <code class="java keyword">new</code> <code class="java plain">AuditingDateTimeProvider(dateTimeService);</code></div><div class="line number26 index25 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number27 index26 alt2"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><p class="cye-lm-tag">Because we declared only one <em>AuditorAware</em> bean, the auditing infrastructure finds it automatically and uses it when it has to set the information of the authenticated user to the field(s) of the saved or updated entity object. If we declare multiple <em>AuditorAware</em> beans, we can configure the used bean by setting the value of the <em>auditorAwareRef</em> attribute of the <em>@EnableJpaAuditing</em> annotation.</p>
<div class="note"> If you want use XML configuration, you can enable the auditing support by using the <em>auditing</em> element. Take look at the example application of this blog post that has a working <a href="https://github.com/pkainulainen/spring-data-jpa-examples/blob/master/query-methods/src/main/resources/applicationContext-persistence.xml" target="_blank">XML configuration file</a>.<p class="cye-lm-tag"></p>
<p class="cye-lm-tag"><strong>Additional Reading:</strong></p>
<ul><li><a href="http://docs.spring.io/spring-data/jpa/docs/1.8.x/reference/html/#auditing" target="_blank">Spring Data JPA Reference Manual: 4.8 Auditing</a></li><li><a href="http://docs.spring.io/spring/docs/4.1.x/javadoc-api/org/springframework/context/annotation/Bean.html" target="_blank">The Javadoc of the <em>@Bean</em> annotation</a></li><li><a href="http://docs.spring.io/spring-data/jpa/docs/current/api/org/springframework/data/jpa/repository/config/EnableJpaAuditing.html" target="_blank">The Javadoc of the <em>@EnableJpaAuditing</em> annotation</a></li></ul></div><p class="cye-lm-tag">Let’s move on and make the required changes to our entity class.</p>
<h2>Modifying Our Entity Class</h2><p class="cye-lm-tag">We need to make the following changes to our entity class (<em>Todo</em>):</p>
<ol><li>We need to ensure that the value of the <em>createdByUser</em> field is set when our entity is persisted for the first time.</li><li>We need to ensure that the value of the <em>modifiedByUser</em> field is set when our entity is persisted for the first time and updated when the information of our entity is updated.</li></ol><p class="cye-lm-tag">We can make these changes by following these steps:</p>
<ol><li>Add a <em>createdByUser</em> field into the entity class, set its type to <em>String</em>, and follow these steps:<ol><li>Annotate the field with the <em>@Column</em> annotation. Configure the name of the database column (<em>created_by_user</em>) and ensure that the value of this column cannot be <em>null</em>.</li><li>Annotate the field with the <em>@CreatedBy</em> annotation. This identifies the field that contains the information of the user who created the entity.</li></ol></li><li>Add a <em>modifiedByUser</em> field into the entity class, set its type to <em>String</em>, and follow these steps<ol><li>Annotate the field with the <em>@Column</em> annotation. Configure the name of the database column (<em>modified_by_user</em>) and ensure that the value of this column cannot be <em>null</em>.</li><li>Annotate the field with the <em>@LastModifiedBy</em> annotation. This identifies the field that contains the information of the user who made the last changes to the entity.</li></ol></li></ol><p class="cye-lm-tag">The relevant part of the <em>Todo</em> class looks as follows:</p>
<div><div id="highlighter_626200" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div class="line number23 index22 alt2">23</div><div class="line number24 index23 alt1">24</div><div class="line number25 index24 alt2">25</div><div class="line number26 index25 alt1">26</div><div class="line number27 index26 alt2 highlighted">27</div><div class="line number28 index27 alt1 highlighted">28</div><div class="line number29 index28 alt2 highlighted">29</div><div class="line number30 index29 alt1">30</div><div class="line number31 index30 alt2">31</div><div class="line number32 index31 alt1">32</div><div class="line number33 index32 alt2">33</div><div class="line number34 index33 alt1">34</div><div class="line number35 index34 alt2">35</div><div class="line number36 index35 alt1">36</div><div class="line number37 index36 alt2">37</div><div class="line number38 index37 alt1">38</div><div class="line number39 index38 alt2 highlighted">39</div><div class="line number40 index39 alt1 highlighted">40</div><div class="line number41 index40 alt2 highlighted">41</div><div class="line number42 index41 alt1">42</div><div class="line number43 index42 alt2">43</div><div class="line number44 index43 alt1">44</div><div class="line number45 index44 alt2">45</div><div class="line number46 index45 alt1">46</div><div class="line number47 index46 alt2">47</div><div class="line number48 index47 alt1">48</div><div class="line number49 index48 alt2">49</div><div class="line number50 index49 alt1">50</div><div class="line number51 index50 alt2">51</div><div class="line number52 index51 alt1">52</div><div class="line number53 index52 alt2">53</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">import</code> <code class="java plain">org.hibernate.annotations.Type;</code></div><div class="line number2 index1 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.annotation.CreatedBy;</code></div><div class="line number3 index2 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.annotation.CreatedDate;</code></div><div class="line number4 index3 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.annotation.LastModifiedBy;</code></div><div class="line number5 index4 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.annotation.LastModifiedDate;</code></div><div class="line number6 index5 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.jpa.domain.support.AuditingEntityListener;</code></div><div class="line number7 index6 alt2">&nbsp;</div><div class="line number8 index7 alt1"><code class="java keyword">import</code> <code class="java plain">javax.persistence.Column;</code></div><div class="line number9 index8 alt2"><code class="java keyword">import</code> <code class="java plain">javax.persistence.Entity;</code></div><div class="line number10 index9 alt1"><code class="java keyword">import</code> <code class="java plain">javax.persistence.EntityListeners;</code></div><div class="line number11 index10 alt2"><code class="java keyword">import</code> <code class="java plain">javax.persistence.GeneratedValue;</code></div><div class="line number12 index11 alt1"><code class="java keyword">import</code> <code class="java plain">javax.persistence.GenerationType;</code></div><div class="line number13 index12 alt2"><code class="java keyword">import</code> <code class="java plain">javax.persistence.Id;</code></div><div class="line number14 index13 alt1"><code class="java keyword">import</code> <code class="java plain">javax.persistence.Table;</code></div><div class="line number15 index14 alt2"><code class="java keyword">import</code> <code class="java plain">javax.persistence.Version;</code></div><div class="line number16 index15 alt1"><code class="java keyword">import</code> <code class="java plain">java.time.ZonedDateTime;</code></div><div class="line number17 index16 alt2">&nbsp;</div><div class="line number18 index17 alt1"><code class="java color1">@Entity</code></div><div class="line number19 index18 alt2"><code class="java color1">@EntityListeners</code><code class="java plain">(AuditingEntityListener.</code><code class="java keyword">class</code><code class="java plain">)</code></div><div class="line number20 index19 alt1"><code class="java color1">@Table</code><code class="java plain">(name = </code><code class="java string">"todos"</code><code class="java plain">)</code></div><div class="line number21 index20 alt2"><code class="java keyword">final</code> <code class="java keyword">class</code> <code class="java plain">Todo {</code></div><div class="line number22 index21 alt1">&nbsp;</div><div class="line number23 index22 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Id</code></div><div class="line number24 index23 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@GeneratedValue</code><code class="java plain">(strategy = GenerationType.AUTO)</code></div><div class="line number25 index24 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java plain">Long id;</code></div><div class="line number26 index25 alt1">&nbsp;</div><div class="line number27 index26 alt2 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Column</code><code class="java plain">(name = </code><code class="java string">"created_by_user"</code><code class="java plain">, nullable = </code><code class="java keyword">false</code><code class="java plain">)</code></div><div class="line number28 index27 alt1 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@CreatedBy</code></div><div class="line number29 index28 alt2 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java plain">String createdByUser;</code></div><div class="line number30 index29 alt1">&nbsp;</div><div class="line number31 index30 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Column</code><code class="java plain">(name = </code><code class="java string">"creation_time"</code><code class="java plain">, nullable = </code><code class="java keyword">false</code><code class="java plain">)</code></div><div class="line number32 index31 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Type</code><code class="java plain">(type = </code><code class="java string">"org.jadira.usertype.dateandtime.threeten.PersistentZonedDateTime"</code><code class="java plain">)</code></div><div class="line number33 index32 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@CreatedDate</code></div><div class="line number34 index33 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java plain">ZonedDateTime creationTime;</code></div><div class="line number35 index34 alt2">&nbsp;</div><div class="line number36 index35 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Column</code><code class="java plain">(name = </code><code class="java string">"description"</code><code class="java plain">, length = </code><code class="java value">500</code><code class="java plain">)</code></div><div class="line number37 index36 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java plain">String description;</code></div><div class="line number38 index37 alt1">&nbsp;</div><div class="line number39 index38 alt2 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Column</code><code class="java plain">(name = </code><code class="java string">"modified_by_user"</code><code class="java plain">, nullable = </code><code class="java keyword">false</code><code class="java plain">)</code></div><div class="line number40 index39 alt1 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@LastModifiedBy</code></div><div class="line number41 index40 alt2 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java plain">String modifiedByUser;</code></div><div class="line number42 index41 alt1">&nbsp;</div><div class="line number43 index42 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Column</code><code class="java plain">(name = </code><code class="java string">"modification_time"</code><code class="java plain">)</code></div><div class="line number44 index43 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Type</code><code class="java plain">(type = </code><code class="java string">"org.jadira.usertype.dateandtime.threeten.PersistentZonedDateTime"</code><code class="java plain">)</code></div><div class="line number45 index44 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@LastModifiedDate</code></div><div class="line number46 index45 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java plain">ZonedDateTime modificationTime;</code></div><div class="line number47 index46 alt2">&nbsp;</div><div class="line number48 index47 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Column</code><code class="java plain">(name = </code><code class="java string">"title"</code><code class="java plain">, nullable = </code><code class="java keyword">false</code><code class="java plain">, length = </code><code class="java value">100</code><code class="java plain">)</code></div><div class="line number49 index48 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java plain">String title;</code></div><div class="line number50 index49 alt1">&nbsp;</div><div class="line number51 index50 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Version</code></div><div class="line number52 index51 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java keyword">long</code> <code class="java plain">version;</code></div><div class="line number53 index52 alt2"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><p class="cye-lm-tag">Typically it is a good idea to add the audit fields into an abstract base class. The reason why I didn’t do it here is that our example application has only one entity, and I wanted to keep things as simple as possible.</p>
<p class="cye-lm-tag">If we would move this information to the abstract base class, its source code would look as follows:</p>
<div><div id="highlighter_320961" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2 highlighted">15</div><div class="line number16 index15 alt1 highlighted">16</div><div class="line number17 index16 alt2 highlighted">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div class="line number23 index22 alt2">23</div><div class="line number24 index23 alt1 highlighted">24</div><div class="line number25 index24 alt2 highlighted">25</div><div class="line number26 index25 alt1 highlighted">26</div><div class="line number27 index26 alt2">27</div><div class="line number28 index27 alt1">28</div><div class="line number29 index28 alt2">29</div><div class="line number30 index29 alt1">30</div><div class="line number31 index30 alt2">31</div><div class="line number32 index31 alt1">32</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">import</code> <code class="java plain">org.hibernate.annotations.Type;</code></div><div class="line number2 index1 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.annotation.CreatedBy;</code></div><div class="line number3 index2 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.annotation.CreatedDate;</code></div><div class="line number4 index3 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.annotation.LastModifiedBy;</code></div><div class="line number5 index4 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.annotation.LastModifiedDate;</code></div><div class="line number6 index5 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.jpa.domain.support.AuditingEntityListener;</code></div><div class="line number7 index6 alt2">&nbsp;</div><div class="line number8 index7 alt1"><code class="java keyword">import</code> <code class="java plain">javax.persistence.Column;</code></div><div class="line number9 index8 alt2"><code class="java keyword">import</code> <code class="java plain">javax.persistence.MappedSuperClass</code></div><div class="line number10 index9 alt1">&nbsp;</div><div class="line number11 index10 alt2"><code class="java color1">@EntityListeners</code><code class="java plain">(AuditingEntityListener.</code><code class="java keyword">class</code><code class="java plain">)</code></div><div class="line number12 index11 alt1"><code class="java color1">@MappedSuperClass</code></div><div class="line number13 index12 alt2"><code class="java keyword">public</code> <code class="java keyword">abstract</code> <code class="java keyword">class</code> <code class="java plain">BaseEntity {</code></div><div class="line number14 index13 alt1"><code class="java spaces">&nbsp;</code>&nbsp;</div><div class="line number15 index14 alt2 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Column</code><code class="java plain">(name = </code><code class="java string">"created_by_user"</code><code class="java plain">, nullable = </code><code class="java keyword">false</code><code class="java plain">)</code></div><div class="line number16 index15 alt1 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@CreatedBy</code></div><div class="line number17 index16 alt2 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java plain">String createdByUser;</code></div><div class="line number18 index17 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number19 index18 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Column</code><code class="java plain">(name = </code><code class="java string">"creation_time"</code><code class="java plain">, nullable = </code><code class="java keyword">false</code><code class="java plain">)</code></div><div class="line number20 index19 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Type</code><code class="java plain">(type = </code><code class="java string">"org.jadira.usertype.dateandtime.threeten.PersistentZonedDateTime"</code><code class="java plain">)</code></div><div class="line number21 index20 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@CreatedDate</code></div><div class="line number22 index21 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java plain">ZonedDateTime creationTime; </code></div><div class="line number23 index22 alt2"><code class="java spaces">&nbsp;</code>&nbsp;</div><div class="line number24 index23 alt1 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Column</code><code class="java plain">(name = </code><code class="java string">"modified_by_user"</code><code class="java plain">, nullable = </code><code class="java keyword">false</code><code class="java plain">)</code></div><div class="line number25 index24 alt2 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@LastModifiedBy</code></div><div class="line number26 index25 alt1 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java plain">String modifiedByUser;</code></div><div class="line number27 index26 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number28 index27 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Column</code><code class="java plain">(name = </code><code class="java string">"modification_time"</code><code class="java plain">)</code></div><div class="line number29 index28 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Type</code><code class="java plain">(type = </code><code class="java string">"org.jadira.usertype.dateandtime.threeten.PersistentZonedDateTime"</code><code class="java plain">)</code></div><div class="line number30 index29 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@LastModifiedDate</code></div><div class="line number31 index30 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java plain">ZonedDateTime modificationTime;</code></div><div class="line number32 index31 alt1"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><div class="note"> If you don’t want to use annotations, your entities must either implement the <em>Auditable</em> interface or extend the <em>AbstractAuditable</em> class. The <em>Auditable</em> interface declares getter and setter methods for all audit fields. The <em>AbstractAuditable</em> class provides implementations for these methods, but its drawback is that it creates a coupling between your entities and Spring Data.<p class="cye-lm-tag"></p>
<p class="cye-lm-tag"><strong>Additional Reading:</strong></p>
<ul><li><a href="http://docs.spring.io/spring-data/commons/docs/current/api/org/springframework/data/domain/Auditable.html" target="_blank">The Javadoc of the <em>Auditable</em> interface</a></li><li><a href="http://docs.spring.io/spring-data/jpa/docs/current/api/org/springframework/data/jpa/domain/AbstractAuditable.html" target="_blank">The Javadoc of the <em>AbstractAuditable</em> class</a></li><li><a href="http://docs.spring.io/spring-data/commons/docs/current/api/org/springframework/data/annotation/CreatedBy.html" target="_blank">The Javadoc of the <em>@CreatedBy</em> annotation</a></li><li><a href="http://docs.spring.io/spring-data/commons/docs/current/api/org/springframework/data/annotation/LastModifiedBy.html" target="_blank">The Javadoc of the <em>@LastModifiedBy</em> annotation</a></li><li><a href="https://docs.oracle.com/javaee/7/api/javax/persistence/MappedSuperclass.html" target="_blank">The Javadoc of the <em>@MappedSuperClass</em> annotation</a></li></ul></div><p class="cye-lm-tag">Let’s find out why we should use the auditing support of Spring Data JPA instead of the callback methods specified in the Java Persistence API.</p>
<h2>Why Should We Use the Auditing Infrastructure of Spring Data JPA?</h2><p class="cye-lm-tag">If we want to save the information of the user who created and updated our entity, we don’t have to use Spring Data JPA. We can set the values of these fields (<em>createdByUser</em> and <em>modifiedByUser</em>) by creating callback methods that are attached to the entity lifecycle events.</p>
<p class="cye-lm-tag">The source code of an abstract base class, which uses this method, looks as follows:</p>
<div><div id="highlighter_10426" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div class="line number23 index22 alt2">23</div><div class="line number24 index23 alt1">24</div><div class="line number25 index24 alt2">25</div><div class="line number26 index25 alt1">26</div><div class="line number27 index26 alt2">27</div><div class="line number28 index27 alt1">28</div><div class="line number29 index28 alt2">29</div><div class="line number30 index29 alt1">30</div><div class="line number31 index30 alt2">31</div><div class="line number32 index31 alt1">32</div><div class="line number33 index32 alt2">33</div><div class="line number34 index33 alt1">34</div><div class="line number35 index34 alt2">35</div><div class="line number36 index35 alt1">36</div><div class="line number37 index36 alt2">37</div><div class="line number38 index37 alt1">38</div><div class="line number39 index38 alt2">39</div><div class="line number40 index39 alt1">40</div><div class="line number41 index40 alt2">41</div><div class="line number42 index41 alt1">42</div><div class="line number43 index42 alt2">43</div><div class="line number44 index43 alt1">44</div><div class="line number45 index44 alt2">45</div><div class="line number46 index45 alt1">46</div><div class="line number47 index46 alt2">47</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.annotation.CreatedBy;</code></div><div class="line number2 index1 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.annotation.LastModifiedBy;</code></div><div class="line number3 index2 alt2">&nbsp;</div><div class="line number4 index3 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.security.core.Authentication;</code></div><div class="line number5 index4 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.security.core.context.SecurityContextHolder;</code></div><div class="line number6 index5 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.security.core.userdetails.User;</code></div><div class="line number7 index6 alt2"><code class="java spaces">&nbsp;</code>&nbsp;</div><div class="line number8 index7 alt1"><code class="java keyword">import</code> <code class="java plain">javax.persistence.Column;</code></div><div class="line number9 index8 alt2"><code class="java keyword">import</code> <code class="java plain">javax.persistence.MappedSuperClass</code></div><div class="line number10 index9 alt1"><code class="java keyword">import</code> <code class="java plain">javax.persistence.PrePersist;</code></div><div class="line number11 index10 alt2"><code class="java keyword">import</code> <code class="java plain">javax.persistence.PreUpdate;</code></div><div class="line number12 index11 alt1"><code class="java spaces">&nbsp;</code>&nbsp;</div><div class="line number13 index12 alt2"><code class="java color1">@MappedSuperClass</code></div><div class="line number14 index13 alt1"><code class="java keyword">public</code> <code class="java keyword">abstract</code> <code class="java keyword">class</code> <code class="java plain">BaseEntity {</code></div><div class="line number15 index14 alt2"><code class="java spaces">&nbsp;</code>&nbsp;</div><div class="line number16 index15 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Column</code><code class="java plain">(name = </code><code class="java string">"created_by_user"</code><code class="java plain">, nullable = </code><code class="java keyword">false</code><code class="java plain">)</code></div><div class="line number17 index16 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@CreatedBy</code></div><div class="line number18 index17 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java plain">String createdByUser; </code></div><div class="line number19 index18 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number20 index19 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Column</code><code class="java plain">(name = </code><code class="java string">"modified_by_user"</code><code class="java plain">, nullable = </code><code class="java keyword">false</code><code class="java plain">)</code></div><div class="line number21 index20 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@LastModifiedBy</code></div><div class="line number22 index21 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java plain">String modifiedByUser;</code></div><div class="line number23 index22 alt2">&nbsp;</div><div class="line number24 index23 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number25 index24 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@PrePersist</code></div><div class="line number26 index25 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java keyword">void</code> <code class="java plain">prePersist() {</code></div><div class="line number27 index26 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">String createdByUser = getUsernameOfAuthenticatedUser();</code></div><div class="line number28 index27 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">this</code><code class="java plain">.createdByUser = createdByUser;</code></div><div class="line number29 index28 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">this</code><code class="java plain">.modifiedByUser = createdByUser;</code></div><div class="line number30 index29 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number31 index30 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number32 index31 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@PreUpdate</code></div><div class="line number33 index32 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java keyword">void</code> <code class="java plain">preUpdate() {</code></div><div class="line number34 index33 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">String modifiedByUser = getUsernameOfAuthenticatedUser();</code></div><div class="line number35 index34 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">this</code><code class="java plain">.modifiedByUser = modifiedByUser;</code></div><div class="line number36 index35 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number37 index36 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number38 index37 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java plain">String getUsernameOfAuthenticatedUser() {</code></div><div class="line number39 index38 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">Authentication authentication = SecurityContextHolder.getContext().getAuthentication();</code></div><div class="line number40 index39 alt1">&nbsp;</div><div class="line number41 index40 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">if</code> <code class="java plain">(authentication == </code><code class="java keyword">null</code> <code class="java plain">|| !authentication.isAuthenticated()) {</code></div><div class="line number42 index41 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">return</code> <code class="java keyword">null</code><code class="java plain">;</code></div><div class="line number43 index42 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number44 index43 alt1">&nbsp;</div><div class="line number45 index44 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">return</code> <code class="java plain">((User) authentication.getPrincipal()).getUsername();</code></div><div class="line number46 index45 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number47 index46 alt2"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><div class="note"> <strong>Additional Reading:</strong><p class="cye-lm-tag"></p>
<ul><li><a href="http://www.objectdb.com/java/jpa/persistence/event" target="_blank">JPA Lifecycle Events</a></li><li><a href="http://docs.oracle.com/javaee/7/api/javax/persistence/PrePersist.html" target="_blank">The Javadoc of the <em>@PrePersist</em> annotation</a></li><li><a href="http://docs.oracle.com/javaee/7/api/javax/persistence/PreUpdate.html" target="_blank">The Javadoc of the @PreUpdate annotation</a></li></ul></div><p class="cye-lm-tag">Even though this method is a bit simpler and more straightforward than using the auditing infrastructure of Spring Data JPA, there are two reasons why we should consider using a more complex solution:</p>
<p class="cye-lm-tag"><strong>First</strong>, using callback methods creates a coupling between our base class (or entity classes) and Spring Security, and I want to avoid it.</p>
<p class="cye-lm-tag"><strong>Second</strong>, if we need to <a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-auditing-part-one/">set the values of the creation and modification time fields</a> AND we decided to use the auditing infrastructure of Spring Data JPA for that purpose, we should use it for setting the field values of the <em>createdByUser</em> and <em>modifiedByUser</em> fields because it makes no sense to set the audit information by using two different mechanisms.</p>
<p class="cye-lm-tag">Let’s summarize what we learned from this blog post.<br></p>
<p class="cye-lm-tag"></p>
<p class="cye-lm-tag"></p>
<h2>Summary</h2><p class="cye-lm-tag">This blog post has taught us three things:</p>
<ul><li>The <em>AuditorAware&lt;T&gt;</em> interface declares the method that provides the information of the authenticated user to the auditing infrastructure of Spring Data JPA.</li><li>We can identify the audit fields by using annotations, set the values by implementing the <em>Auditable</em> interface, or extend the <em>AbstractAuditable</em> class.</li><li>It is simpler to set the values of the audit fields by using callback methods that are attached to the entity lifecycle events. The downside of this method is that it creates a coupling between our abstract base class (or entity classes) and Spring Security.</li></ul><p class="cye-lm-tag">The next part of this tutorial describes how we can <a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-part-eight-adding-functionality-to-a-repository/">add custom methods into a single repository</a>.</p>
<p class="cye-lm-tag"><strong>P.S.</strong> You can <a href="https://github.com/pkainulainen/spring-data-jpa-examples/tree/master/query-methods" target="_blank">get the example application of this blog post from Github</a>.</p>
<div class="note">If you want to learn how to use Spring Data JPA, you should read my <a href="/spring-data-jpa-tutorial/" target="_blank">Spring Data JPA tutorial</a>.</div> <span id="tve_leads_end_content" style="display: block; visibility: hidden; border: 1px solid transparent;" class="cye-lm-tag"></span>
</div>

</div>




</div>
</div>
</div>
</div>
</div>
</div><p style="line-height: 24px;" data-unit="px" class="tve_p_center cye-lm-tag"><span class="tve_custom_font_size cye-lm-tag" style="font-size: 16px;">I will never rent, sell, or share your email address.<br></span></p>

</div></div></div></div></div></div></div>
<section id="comments"><div class="comments_intro"><span class="num_comments cye-lm-tag">17</span> comments… <a href="#commentform" rel="nofollow">add one</a></div><ul class="comment_list"><li class="comment even thread-even depth-1" id="comment-1252013"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Pradip</span>  <span class="comment_date cye-lm-tag">August 5, 2015, 15:23</span></div><div class="comment_text" id="comment-body-1252013"><p class="cye-lm-tag">Hello i am new to spring data jpa, i want make a generic repository using spring data jpa, can you help me</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-1252015"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">August 5, 2015, 15:35</span></div><div class="comment_text" id="comment-body-1252015"><p class="cye-lm-tag">If you want to create repository interfaces by using Spring Data JPA, you should read my <a href="/spring-data-jpa-tutorial/" rel="nofollow">Spring Data JPA Tutorial</a> (start from the part one). On the other hand, if you want to create a generic Spring repository class that uses JPA, you should read <a href="http://www.baeldung.com/2011/12/08/simplifying-the-data-access-layer-with-spring-and-java-generics/" target="_blank" rel="nofollow">this blog post</a>.</p>
</div> </div></li></ul></li><li class="comment even thread-odd thread-alt depth-1" id="comment-1297034"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Taha</span>  <span class="comment_date cye-lm-tag">October 25, 2015, 00:39</span></div><div class="comment_text" id="comment-body-1297034"><p class="cye-lm-tag">Hey its very intersting this blog thank you for this best work :<br> i have a question you configure the Application Context with java if i use xml configuration i must to do like this :<br> and JpaAuditing bean but what we make inside this bean in xml file??</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-1297527"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">October 25, 2015, 12:16</span></div><div class="comment_text" id="comment-body-1297527"><p class="cye-lm-tag">Hi,</p>
<p class="cye-lm-tag">Thank you for your kind words. I really appreciate them!</p>
<blockquote><p class="cye-lm-tag">i have a question you configure the Application Context with java if i use xml configuration i must to do like this</p>
</blockquote><p class="cye-lm-tag">The example application of this blog post has a working <a href="https://github.com/pkainulainen/spring-data-jpa-examples/blob/master/query-methods/src/main/resources/applicationContext-persistence.xml" target="_blank" rel="nofollow">XML configuration file</a>. Does it answer to your question?</p>
</div> </div><ul class="children"><li class="comment even depth-3" id="comment-1297621"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Taha</span>  <span class="comment_date cye-lm-tag">October 25, 2015, 14:05</span></div><div class="comment_text" id="comment-body-1297621"><p class="cye-lm-tag">yeah that what i want, thank you very much</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-4" id="comment-1298361"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">October 26, 2015, 10:06</span></div><div class="comment_text" id="comment-body-1298361"><p class="cye-lm-tag">You are welcome.</p>
</div> </div></li></ul></li></ul></li></ul></li><li class="comment even thread-even depth-1" id="comment-1363376"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Bananio</span>  <span class="comment_date cye-lm-tag">February 2, 2016, 17:50</span></div><div class="comment_text" id="comment-body-1363376"><p class="cye-lm-tag">Hello,</p>
<p class="cye-lm-tag">first of all, great tutorial, it helped me very much!</p>
<p class="cye-lm-tag">one question regarding @preUpdate<br> i have an update method in my repository annotated with @query(..) and @modifiying but it does not trigger @preUpdate. (also has @transactional if it matters) any idea why is it not triggered? (method works and updated entry in DB)</p>
<p class="cye-lm-tag">thanks!</p>
</div> </div></li><li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1404362"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">KL</span>  <span class="comment_date cye-lm-tag">March 29, 2016, 03:31</span></div><div class="comment_text" id="comment-body-1404362"><p class="cye-lm-tag">Hi;<br> Great tutorial!  Thanks.<br> One question, with the @EnableJpaAuditing(), shall it include the auditorAwareRef as well?</p>
<p class="cye-lm-tag">Cheers,<br> KL</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-1404932"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">March 29, 2016, 17:51</span></div><div class="comment_text" id="comment-body-1404932"><p class="cye-lm-tag">You are welcome!</p>
<p class="cye-lm-tag">The answer to your question is yes. I mentioned this on the post as well:</p>
<blockquote><p class="cye-lm-tag">Because we declared only one <code>AuditorAware bean</code>, the auditing infrastructure finds it automatically and uses it when it has to set the information of the authenticated user to the field(s) of the saved or updated entity object. If we declare multiple <code>AuditorAware</code> beans, we can configure the used bean by setting the value of the <code>auditorAwareRef</code> attribute of the <code>@EnableJpaAuditing</code> annotation.</p>
</blockquote></div> </div></li></ul></li><li class="comment odd alt thread-even depth-1" id="comment-1469329"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Paul</span>  <span class="comment_date cye-lm-tag">July 21, 2016, 01:54</span></div><div class="comment_text" id="comment-body-1469329"><p class="cye-lm-tag">Really liked your tutorial!</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-1469452"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">July 21, 2016, 12:41</span></div><div class="comment_text" id="comment-body-1469452"><p class="cye-lm-tag">Thank you for your kind words. I really appreciate them.</p>
</div> </div></li></ul></li><li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1479836"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Sathishkumar</span>  <span class="comment_date cye-lm-tag">August 26, 2016, 22:24</span></div><div class="comment_text" id="comment-body-1479836"><p class="cye-lm-tag">Hi,</p>
<p class="cye-lm-tag">Thanks for the tutorial. It is very good and helpful.<br> I have implemented this in my application and i face an issue. I jus replicated what you have given in this part two tutorila. While creating a new record am updating the  CreateBy, CreateDate, UpdatedBy, UpdateDate through @PrePersist – This works fine and updates the values as required.</p>
<p class="cye-lm-tag">While @PostUpdate, am updating UpdatedBy, UpdateDate  only, but it default updates the createBy and CreateDate column as well.</p>
<p class="cye-lm-tag">Please let me know, is there any other setting i need to do here?<br> PFB entity which i have modified for auditing.</p>
<p class="cye-lm-tag">@MappedSuperclass<br> @EntityListeners(AuditingEntityListener.class)<br> public abstract class AuditEntity {</p>
<p class="cye-lm-tag"> @Column(name = C_CREATED_BY, nullable = false)<br> @CreatedBy<br> private String createdBy;</p>
<p class="cye-lm-tag"> @Column(name = C_UPDATED_BY, nullable = false)<br> @LastModifiedBy<br> private String updatedBy;</p>
<p class="cye-lm-tag"> @Column(name = C_CREATED_DATE, nullable = false)<br> @CreatedDate<br> private Date createdDate;</p>
<p class="cye-lm-tag"> @Column(name = C_UPDATED_DATE, nullable = false)<br> @LastModifiedDate<br> private Date updatedDate;</p>
<p class="cye-lm-tag"> @PrePersist<br> public void prePersist() {<br> this.createdBy = “Test”;<br> this.updatedBy = “Test”;<br> this.createdDate = new Date();<br> this.updatedDate = new Date();<br> }</p>
<p class="cye-lm-tag"> @PostUpdate<br> public void preUpdate() {<br> this.updatedBy = “SCOR”;<br> this.updatedDate = new Date();<br> }<br> }</p>
<p class="cye-lm-tag">Thanks<br> Sathishkumar</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-1483486"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">September 5, 2016, 21:12</span></div><div class="comment_text" id="comment-body-1483486"><p class="cye-lm-tag">Hi,</p>
<p class="cye-lm-tag">I have to admit that I don’t know what your problem is. That being said, I noticed that your entity uses the Spring Data JPA auditing AND it has the standard JPA callback methods. You shouldn’t use both of them in the same class because they can conflict each other. Try to remove the code you don’t want to use and see if you can still see the same behavior.</p>
</div> </div><ul class="children"><li class="comment odd alt depth-3" id="comment-1490393"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Hi Petri, Yes I had the same scenario</span>  <span class="comment_date cye-lm-tag">September 23, 2016, 22:01</span></div><div class="comment_text" id="comment-body-1490393"><p class="cye-lm-tag">Hi Petri,<br> Yes I had the same scenario wherein I have not used both configurations. I have not used Spring Data JPA annotations. I have used custom annotations with @PrePersist and @PostUpdate. When the insert / update are happening, the @PrePersist and @PostUpdate methods are not getting triggered.</p>
<p class="cye-lm-tag">Sample :<br> @PrePersist<br> public void prePersist() {<br> if (getCreateProgramName() == null) {<br> setCreateProgramName(“sfbt”);<br> }<br> if (getLastUpdateProgramName() == null) {<br> setLastUpdateProgramName(“sfbt”);<br> }<br> if (getCreateUserId() == null) {<br> setCreateUserId(“sftbrf”);<br> }<br> if (getLastUpdateUserId() == null) {<br> setLastUpdateUserId(“sftbrf”);<br> }<br> setCreateTimestamp(new Date());<br> setLastUpdateTimestamp(new Date());<br> }</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-4" id="comment-1491422"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">September 27, 2016, 18:09</span></div><div class="comment_text" id="comment-body-1491422"><p class="cye-lm-tag">Unfortunately it’s a bit hard to say what is really going on without debugging the code. Do you have a sample project that reproduces this problem?</p>
</div> </div></li></ul></li></ul></li></ul></li></ul></div> </section>
<br><hr>
<h2>15 Adding Custom Methods Into a Single Repository</h2>
<div class="post_content cye-lm-tag" itemprop="articleBody"><p class="cye-lm-tag">Although Spring Data JPA provides an excellent support for implementing CRUD operations and creating database queries, sometimes we need to do things that are not supported by it. For example, Spring Data JPA doesn’t provide a built-in support for querying DTOs by using SQL.</p>
<p class="cye-lm-tag">Luckily for us, we can “extend” our Spring Data JPA repositories by adding custom methods into them.</p>
<p class="cye-lm-tag">This blog post describes how we can add custom methods into a single Spring Data JPA repository. During this blog post we will implement a search function that fulfills the following requirements:</p>
<ul><li>It must ignore case and return the id and title of todo entries whose title or description contains the given search term.</li><li>It must sort the query results in ascending order by using the value of the <em>title</em> column.</li><li>The search function must use an SQL query that is invoked by using JDBC.</li><li>The repository method must return a list of DTO objects.</li></ul><p class="cye-lm-tag">Let’s get started.</p>
<div class="note"> <strong>Additional Reading:</strong><p class="cye-lm-tag"></p>
<p class="cye-lm-tag">If you are not familiar with Spring Data JPA, <strong>you should read</strong> the following blog posts before you continue reading this blog post:</p>
<ul><li><a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-introduction/">Spring Data JPA Tutorial: Introduction</a> provides a quick introduction to Spring Data JPA and gives an overview of the Spring Data repository interfaces.</li><li><a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-getting-the-required-dependencies/">Spring Data JPA Tutorial: Getting the Required Dependencies</a> describes how you can get the required dependencies.</li><li><a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-part-one-configuration/">Spring Data JPA Tutorial: Configuration</a> describes how you can configure the persistence layer of a Spring application that uses Spring Data JPA.</li><li><a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-part-two-crud/">Spring Data JPA Tutorial: CRUD</a> describes how you can create a Spring Data JPA repository that provides CRUD operations for an entity.</li><li><a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-auditing-part-one/">Spring Data JPA Tutorial: Auditing, Part One</a> describes how you can add the creation and modification time fields into your entities by using the auditing infrastructure of Spring Data JPA.</li><li><a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-auditing-part-two/">Spring Data JPA Tutorial: Auditing, Part Two</a> describes how you can add the information of the authenticated user, who created and/or updated an entity, into your entities by using the auditing infrastructure of Spring Data JPA.</li></ul></div><h2>Creating a Custom Repository Interface</h2><p class="cye-lm-tag">When we want to add custom methods into a Spring Data JPA repository, the first thing that we have to do is to create an interface which declares the custom methods.</p>
<p class="cye-lm-tag">However, because we want to create a method that returns a list of custom DTO objects, we have to create the returned DTO class before we can create the custom repository interface. Because the search result page of our example application uses only the values of the <em>id</em> and <em>title</em> fields, we have to create a DTO class that has two fields: <em>id</em> and <em>title</em>.</p>
<p class="cye-lm-tag">The source code of the <em>TodoSearchResultDTO</em> class looks as follows:</p>
<div><div id="highlighter_645510" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div class="line number23 index22 alt2">23</div><div class="line number24 index23 alt1">24</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">public</code> <code class="java keyword">final</code> <code class="java keyword">class</code> <code class="java plain">TodoSearchResultDTO {</code></div><div class="line number2 index1 alt1">&nbsp;</div><div class="line number3 index2 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java plain">Long id;</code></div><div class="line number4 index3 alt1">&nbsp;</div><div class="line number5 index4 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java plain">String title;</code></div><div class="line number6 index5 alt1">&nbsp;</div><div class="line number7 index6 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java plain">TodoSearchResultDTO() {}</code></div><div class="line number8 index7 alt1">&nbsp;</div><div class="line number9 index8 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java plain">Long getId() {</code></div><div class="line number10 index9 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">return</code> <code class="java plain">id;</code></div><div class="line number11 index10 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number12 index11 alt1">&nbsp;</div><div class="line number13 index12 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java plain">String getTitle() {</code></div><div class="line number14 index13 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">return</code> <code class="java plain">title;</code></div><div class="line number15 index14 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number16 index15 alt1">&nbsp;</div><div class="line number17 index16 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java keyword">void</code> <code class="java plain">setId(Long id) {</code></div><div class="line number18 index17 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">this</code><code class="java plain">.id = id;</code></div><div class="line number19 index18 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number20 index19 alt1">&nbsp;</div><div class="line number21 index20 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java keyword">void</code> <code class="java plain">setTitle(String title) {</code></div><div class="line number22 index21 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">this</code><code class="java plain">.title = title;</code></div><div class="line number23 index22 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number24 index23 alt1"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><p class="cye-lm-tag">We can now create the custom repository interface by following these steps:</p>
<ol><li>Create a <em>CustomTodoRepository</em> interface.</li><li>add <em>findbySearchTerm()</em> method to the created interface. This method takes the search term as a method parameter and returns a list of <em>TodoSearchResultDTO</em> objects.</li></ol><p class="cye-lm-tag">The source code of the <em>CustomTodoRepository</em> interface looks as follows:</p>
<div><div id="highlighter_526146" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">import</code> <code class="java plain">java.util.List;</code></div><div class="line number2 index1 alt1">&nbsp;</div><div class="line number3 index2 alt2"><code class="java keyword">interface</code> <code class="java plain">CustomTodoRepository {</code></div><div class="line number4 index3 alt1">&nbsp;</div><div class="line number5 index4 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">List&lt;TodoSearchResultDTO&gt; findBySearchTerm(String searchTerm);</code></div><div class="line number6 index5 alt1"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><p class="cye-lm-tag">After we have created our custom repository interface, we have to naturally implement it. Let’s find out how we can create a repository class that fetches the search results by using JDBC.<br></p>
<p class="cye-lm-tag"></p>
<p class="cye-lm-tag"></p>
<h2>Implementing the Custom Repository Interface</h2><p class="cye-lm-tag">Because we want to create an SQL query that uses named parameters and we want to invoke that query by using JDBC, we have to configure the <em>NamedParameterJdbcTemplate</em> bean before we can implement our custom repository interface. We can configure this bean by making the following changes to the application context configuration class which configures the persistence layer of our example application:</p>
<ol><li>Add a <em>jdbcTemplate()</em> method to the configuration class and annotate it with the <em>@Bean</em> annotation. This method takes a <em>DataSource</em> object as a method parameter and returns a <em>NamedParameterJdbcTemplate</em> object.</li><li>Implement the method by creating a new <em>NamedParameterJdbcTemplate</em> object and returning the created object.</li></ol><p class="cye-lm-tag">The relevant part of the <em>PersistenceContext</em> class looks as follows:</p>
<div><div id="highlighter_522692" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1 highlighted">16</div><div class="line number17 index16 alt2 highlighted">17</div><div class="line number18 index17 alt1 highlighted">18</div><div class="line number19 index18 alt2 highlighted">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1">22</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.context.annotation.Bean;</code></div><div class="line number2 index1 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.context.annotation.Configuration;</code></div><div class="line number3 index2 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.jpa.repository.config.EnableJpaAuditing;</code></div><div class="line number4 index3 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.jpa.repository.config.EnableJpaRepositories;</code></div><div class="line number5 index4 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;</code></div><div class="line number6 index5 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.transaction.annotation.EnableTransactionManagement;</code></div><div class="line number7 index6 alt2">&nbsp;</div><div class="line number8 index7 alt1"><code class="java color1">@Configuration</code></div><div class="line number9 index8 alt2"><code class="java color1">@EnableJpaAuditing</code><code class="java plain">(dateTimeProviderRef = </code><code class="java string">"dateTimeProvider"</code><code class="java plain">)</code></div><div class="line number10 index9 alt1"><code class="java color1">@EnableJpaRepositories</code><code class="java plain">(basePackages = {</code></div><div class="line number11 index10 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java string">"net.petrikainulainen.springdata.jpa.todo"</code></div><div class="line number12 index11 alt1"><code class="java plain">})</code></div><div class="line number13 index12 alt2"><code class="java color1">@EnableTransactionManagement</code></div><div class="line number14 index13 alt1"><code class="java keyword">class</code> <code class="java plain">PersistenceContext {</code></div><div class="line number15 index14 alt2">&nbsp;</div><div class="line number16 index15 alt1 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Bean</code></div><div class="line number17 index16 alt2 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">NamedParameterJdbcTemplate jdbcTemplate(DataSource dataSource) {</code></div><div class="line number18 index17 alt1 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">return</code> <code class="java keyword">new</code> <code class="java plain">NamedParameterJdbcTemplate(dataSource);</code></div><div class="line number19 index18 alt2 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number20 index19 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number21 index20 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java comments">//Other beans are omitted for the sake of clarity</code></div><div class="line number22 index21 alt1"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><div class="note"> <strong>Additional Reading:</strong><p class="cye-lm-tag"></p>
<ul><li><a href="http://docs.spring.io/spring/docs/4.1.x/spring-framework-reference/htmlsingle/#jdbc" target="_blank">Spring Framework Reference Manual: 14. Data access with JDBC</a></li><li><a href="http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/annotation/Bean.html" target="_blank">The Javadoc of the <em>@Bean</em> annotation</a></li><li><a href="http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/core/namedparam/NamedParameterJdbcTemplate.html" target="_blank">The Javadoc of the <em>NamedParameterJdbcTemplate</em> class</a></li></ul></div><p class="cye-lm-tag">We can now implement our custom repository interface by following these steps:</p>
<ol><li>Create a custom repository class that implements the <em>CustomTodoRepository</em> interface. By default, the name of a custom repository class must follow this syntax: <em>[The name of the repository interface]Impl</em>. Because the name of our repository interface is <em>TodoRepository</em>, the name of our custom repository class must be <em>TodoRepositoryImpl</em>.</li><li>Annotate the created class with the <em>@Repository</em> annotation.</li><li>Create an SQL query that returns the <em>id</em> and <em>title</em> of todo entries, whose title or description contains the given search term, and sorts the query results in ascending order by using the value of the <em>title</em> column. Set this SQL query as the value of a <em>static final</em> field.</li><li>Add a <em>final</em> <em>NamedParameterJdbcTemplate</em> field to repository class and inject the value of this field by using constructor injection.</li><li>Implement the <em>findBySearchTerm()</em> method by following these steps:<ol><li>Annotate the method with the <em>@Transactional</em> annotation and mark the transaction as read-only. This ensures that our SQL query is always invoked inside a read-only transaction.</li><li>Create a <em>Map</em> object, which contains the query parameters of our SQL query, and put the search term given as a method parameter into the created map.</li><li>Invoke the SQL query and transform the query results into a list of <em>TodoSearchResultDTO</em> objects by using the <em>BeanPropertyRowMapper</em> class. We can use this method as long as the aliases of the selected columns matches with the property names of the “target class”.</li><li>Return the query results.</li></ol></li></ol><p class="cye-lm-tag">The source code of the <em>TodoRepositoryImpl</em> class looks follows:</p>
<div><div id="highlighter_279485" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div class="line number23 index22 alt2">23</div><div class="line number24 index23 alt1">24</div><div class="line number25 index24 alt2">25</div><div class="line number26 index25 alt1">26</div><div class="line number27 index26 alt2">27</div><div class="line number28 index27 alt1">28</div><div class="line number29 index28 alt2">29</div><div class="line number30 index29 alt1">30</div><div class="line number31 index30 alt2">31</div><div class="line number32 index31 alt1">32</div><div class="line number33 index32 alt2">33</div><div class="line number34 index33 alt1">34</div><div class="line number35 index34 alt2">35</div><div class="line number36 index35 alt1">36</div><div class="line number37 index36 alt2">37</div><div class="line number38 index37 alt1">38</div><div class="line number39 index38 alt2">39</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.beans.factory.annotation.Autowired;</code></div><div class="line number2 index1 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.jdbc.core.BeanPropertyRowMapper;</code></div><div class="line number3 index2 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;</code></div><div class="line number4 index3 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.stereotype.Repository;</code></div><div class="line number5 index4 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.transaction.annotation.Transactional;</code></div><div class="line number6 index5 alt1">&nbsp;</div><div class="line number7 index6 alt2"><code class="java keyword">import</code> <code class="java plain">java.util.HashMap;</code></div><div class="line number8 index7 alt1"><code class="java keyword">import</code> <code class="java plain">java.util.List;</code></div><div class="line number9 index8 alt2"><code class="java keyword">import</code> <code class="java plain">java.util.Map;</code></div><div class="line number10 index9 alt1">&nbsp;</div><div class="line number11 index10 alt2"><code class="java color1">@Repository</code></div><div class="line number12 index11 alt1"><code class="java keyword">final</code> <code class="java keyword">class</code> <code class="java plain">TodoRepositoryImpl </code><code class="java keyword">implements</code> <code class="java plain">CustomTodoRepository {</code></div><div class="line number13 index12 alt2">&nbsp;</div><div class="line number14 index13 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java keyword">static</code> <code class="java keyword">final</code> <code class="java plain">String SEARCH_TODO_ENTRIES = </code><code class="java string">"SELECT id, title FROM todos t WHERE "</code> <code class="java plain">+</code></div><div class="line number15 index14 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java string">"LOWER(t.title) LIKE LOWER(CONCAT('%',:searchTerm, '%')) OR "</code> <code class="java plain">+</code></div><div class="line number16 index15 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java string">"LOWER(t.description) LIKE LOWER(CONCAT('%',:searchTerm, '%')) "</code> <code class="java plain">+</code></div><div class="line number17 index16 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java string">"ORDER BY t.title ASC"</code><code class="java plain">;</code></div><div class="line number18 index17 alt1">&nbsp;</div><div class="line number19 index18 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java keyword">final</code> <code class="java plain">NamedParameterJdbcTemplate jdbcTemplate;</code></div><div class="line number20 index19 alt1">&nbsp;</div><div class="line number21 index20 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Autowired</code></div><div class="line number22 index21 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">TodoRepositoryImpl(NamedParameterJdbcTemplate jdbcTemplate) {</code></div><div class="line number23 index22 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">this</code><code class="java plain">.jdbcTemplate = jdbcTemplate;</code></div><div class="line number24 index23 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number25 index24 alt2">&nbsp;</div><div class="line number26 index25 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Transactional</code><code class="java plain">(readOnly = </code><code class="java keyword">true</code><code class="java plain">)</code></div><div class="line number27 index26 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Override</code></div><div class="line number28 index27 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java plain">List&lt;TodoSearchResultDTO&gt; findBySearchTerm(String searchTerm) {</code></div><div class="line number29 index28 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">Map&lt;String, String&gt; queryParams = </code><code class="java keyword">new</code> <code class="java plain">HashMap&lt;&gt;();</code></div><div class="line number30 index29 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">queryParams.put(</code><code class="java string">"searchTerm"</code><code class="java plain">, searchTerm);</code></div><div class="line number31 index30 alt2">&nbsp;</div><div class="line number32 index31 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">List&lt;TodoSearchResultDTO&gt; searchResults = jdbcTemplate.query(SEARCH_TODO_ENTRIES,</code></div><div class="line number33 index32 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">queryParams,</code></div><div class="line number34 index33 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">new</code> <code class="java plain">BeanPropertyRowMapper&lt;&gt;(TodoSearchResultDTO.</code><code class="java keyword">class</code><code class="java plain">)</code></div><div class="line number35 index34 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">);</code></div><div class="line number36 index35 alt1">&nbsp;</div><div class="line number37 index36 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">return</code> <code class="java plain">searchResults;</code></div><div class="line number38 index37 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number39 index38 alt2"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><div class="note"> If you want to change the postfix that is used when Spring Data JPA looks for custom repository implementations, you have to use one of these two methods:<p class="cye-lm-tag"></p>
<ul><li>If you are using Java configuration, you can configure the postfix by setting the value of the <a href="http://docs.spring.io/spring-data/jpa/docs/current/api/org/springframework/data/jpa/repository/config/EnableJpaRepositories.html#repositoryImplementationPostfix--" target="_blank"><em>@EnableJpaRepository</em> annotation’s <em>repositoryImplementationPostfix</em> attribute</a>.</li><li>If you are using XML configuration, you can configure the postfix by setting value of the <em>repository</em> element’s <em>repository-impl-postfix</em> attribute.</li></ul><p class="cye-lm-tag"><strong>Additional Reading:</strong></p>
<ul><li><a href="http://docs.spring.io/spring/docs/4.1.x/spring-framework-reference/htmlsingle/#transaction-declarative-annotations" target="_blank">Spring Framework Reference Manual: 12.5.6 Using <em>@Transactional</em></a></li><li><a href="http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/core/BeanPropertyRowMapper.html" target="_blank">The Javadoc of the <em>BeanPropertyRowMapper</em> class</a></li><li><a href="http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/transaction/annotation/Transactional.html" target="_blank">The Javadoc of the <em>@Transactional</em> annotation</a></li></ul></div><p class="cye-lm-tag">Let’s move on and add our custom method into our repository interface (<em>TodoRepository</em>).</p>
<h2>Adding Custom Methods Into a Repository Interface</h2><p class="cye-lm-tag">We can add custom methods into a repository interface by extending the custom repository interface that declares the custom methods. In other words, we have to modify the <em>TodoRepository</em> interface to extend the <em>CustomTodoRepository</em> interface.</p>
<p class="cye-lm-tag">After we have modified the <em>TodoRepository</em> interface, its source code looks as follows:</p>
<div><div id="highlighter_287597" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1 highlighted">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.repository.Repository;</code></div><div class="line number2 index1 alt1">&nbsp;</div><div class="line number3 index2 alt2"><code class="java keyword">import</code> <code class="java plain">java.util.List;</code></div><div class="line number4 index3 alt1"><code class="java keyword">import</code> <code class="java plain">java.util.Optional;</code></div><div class="line number5 index4 alt2">&nbsp;</div><div class="line number6 index5 alt1 highlighted"><code class="java keyword">interface</code> <code class="java plain">TodoRepository </code><code class="java keyword">extends</code> <code class="java plain">Repository&lt;Todo, Long&gt;, CustomTodoRepository {</code></div><div class="line number7 index6 alt2">&nbsp;</div><div class="line number8 index7 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">void</code> <code class="java plain">delete(Todo deleted);</code></div><div class="line number9 index8 alt2">&nbsp;</div><div class="line number10 index9 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">List&lt;Todo&gt; findAll();</code></div><div class="line number11 index10 alt2">&nbsp;</div><div class="line number12 index11 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">Optional&lt;Todo&gt; findOne(Long id);</code></div><div class="line number13 index12 alt2">&nbsp;</div><div class="line number14 index13 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">void</code> <code class="java plain">flush();</code></div><div class="line number15 index14 alt2">&nbsp;</div><div class="line number16 index15 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">Todo save(Todo persisted);</code></div><div class="line number17 index16 alt2"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><p class="cye-lm-tag">Let’s move on and summarize what we learned from this blog post.<br></p>
<p class="cye-lm-tag"></p>
<p class="cye-lm-tag"></p>
<h2>Summary</h2><p class="cye-lm-tag">This blog post has taught us three things:</p>
<ul><li>If we want to query DTOs by using SQL, we have to add custom method into our Spring Data JPA repository interface.</li><li>We can map our query results into objects by using the <em>BeanPropertyRowMapper</em> class.</li><li>We can change the postfix that is used to identify our custom repository implementations.</li></ul><p class="cye-lm-tag">The next part of my Spring Data JPA tutorial describes how we can <a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-adding-custom-methods-into-all-repositories/">add custom methods into all Spring Data JPA repositories</a>.</p>
<p class="cye-lm-tag"><strong>P.S.</strong> You can <a href="https://github.com/pkainulainen/spring-data-jpa-examples/tree/master/custom-method-single-repo" target="_blank">get the example application of this blog post from Github</a>.</p>
<div class="note">If you want to learn how to use Spring Data JPA, you should read my <a href="/spring-data-jpa-tutorial/">Spring Data JPA tutorial</a>.</div> <span id="tve_leads_end_content" style="display: block; visibility: hidden; border: 1px solid transparent;" class="cye-lm-tag"></span>
</div>

</div>




</div>
</div>
</div>
</div>
</div>
</div><p style="line-height: 24px;" data-unit="px" class="tve_p_center cye-lm-tag"><span class="tve_custom_font_size cye-lm-tag" style="font-size: 16px;">I will never rent, sell, or share your email address.<br></span></p>

</div></div></div></div></div></div></div>
<section id="comments"><div class="comments_intro"><span class="num_comments cye-lm-tag">27</span> comments… <a href="#commentform" rel="nofollow">add one</a></div><ul class="comment_list"><li class="comment even thread-even depth-1" id="comment-6917"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Seth G Brown</span>  <span class="comment_date cye-lm-tag">July 25, 2012, 18:35</span></div><div class="comment_text" id="comment-body-6917"><p class="cye-lm-tag">Hi,</p>
<p class="cye-lm-tag">Excellent tutorials – You have a gift for explaining things. Thank you for taking the time!<br> I am new to Spring 3.x and JPA and have been struggling to understand it as tutorials for the right versions seem hard to come by. This series of 5 tutorials are easily the best ones I have read so far.</p>
<p class="cye-lm-tag">That said, while the first 3 tutorials made perfect sense to me, I had difficulty with the last three as I did not quite understand how I would use them despite you examples. Perhaps a re-read will help :)</p>
<p class="cye-lm-tag">I could not see any JOIN queries (INNERJOIN, OUTERJOIN) in your tutorials. I would appreciate another tutorial with examples with JOIN, perhaps an address table and/or  an employment table for the Person will be helpful to explain how to join two or more tables.</p>
<p class="cye-lm-tag">Also would appreciate a tutorial in which the java code calls a stored proc to do the query and get the results.</p>
<p class="cye-lm-tag">Once again, thank you for your excellent tutorials. Finally things are beginning to make sense :)</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-6924"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">July 25, 2012, 20:07</span></div><div class="comment_text" id="comment-body-6924"><p class="cye-lm-tag">Hi Seth,</p>
<p class="cye-lm-tag">Thank you for the feedback and it is great to hear that I could help you out in some way. You mentioned that you wanted to learn more about using join queries. I talked a bit to my friend Google and here are some tutorials that might be relevant to you:</p>
<ul><li><a href="http://www.altuure.com/2010/09/23/jpa-criteria-api-by-samples-%E2%80%93-part-ii/">JPA Criteria API by Samples, Part II</a></li><li><a href="http://stackoverflow.com/questions/3424696/jpa-criteria-api-how-to-add-join-clause-as-general-sentence-as-possible">JPA Criteria API – How to add JOIN clause (as general sentence as possible)</a></li><li><a href="http://blog.mysema.com/2010/07/querying-hibernate-with-querydsl.html">Querying Hibernate with Querydsl</a></li><li><a href="http://www.objectdb.com/java/jpa/query/jpql/from">FROM clause and JOIN in JPA 2 queries (JPQL / Criteria API)</a></li><li><a href="http://stackoverflow.com/questions/3572626/calling-stored-procedure-from-java-jpa">Calling stored procedure from Java / JPA</a></li><li><a href="http://en.wikibooks.org/wiki/Java_Persistence/Advanced_Topics#Stored_Procedures">Java Persistence/Advanced Topics – Stored Procedures</a></li></ul><p class="cye-lm-tag">I hope that you find these links helpful. Remember that the underlying technology is still the same. Spring Data JPA simply offers a cleaner way to use it so that you don’t have to do everything by yourself.</p>
</div> </div></li></ul></li><li class="comment byuser comment-author-petrikainulainen bypostauthor even thread-odd thread-alt depth-1" id="comment-7482"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">August 15, 2012, 10:30</span></div><div class="comment_text" id="comment-body-7482"><p class="cye-lm-tag">A fast comment concerning the naming strategy that should be used to select a name for the custom repository implementation:</p>
<p class="cye-lm-tag">This behavior has changed in the newer versions of Spring Data JPA (newer than 1.0.2.RELEASE that is used in the example application), and you must create the name of the custom repository implementation by adding the configured post fix to the simple name of the actual repository interface. In this case, the name of the custom implementation should be changed from <code>PaginatingPersonRepositoryImpl</code> to <code>PersonRepositoryImpl</code>.</p>
</div> </div></li><li class="comment odd alt thread-even depth-1" id="comment-11387"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">kisst</span>  <span class="comment_date cye-lm-tag">November 23, 2012, 21:29</span></div><div class="comment_text" id="comment-body-11387"><p class="cye-lm-tag">Hi,<br> Nice article, actually nice series of articles about spring-data-jpa, however I didn’t have the time so far to run throught all of them.<br> But your last comment about new naming strategy saved my day.Thank you!</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-11416"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">November 24, 2012, 11:53</span></div><div class="comment_text" id="comment-body-11416"><p class="cye-lm-tag">Thanks for your comment. It is good to hear that I could help you out!</p>
</div> </div></li></ul></li><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt thread-odd thread-alt depth-1" id="comment-11539"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">November 25, 2012, 21:55</span></div><div class="comment_text" id="comment-body-11539"><p class="cye-lm-tag">One of my readers (Thanks Eric!) told me about an another way to fulfill the requirements described in this blog entry. Check it out: <a href="http://blog.42.nl/articles/spring-data-with-querydsl-repositories-made-easy" rel="nofollow">Spring Data JPA with QueryDSL: Repositories made easy</a>.</p>
</div> </div></li><li class="comment even thread-even depth-1" id="comment-12109"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Mohit</span>  <span class="comment_date cye-lm-tag">December 12, 2012, 22:54</span></div><div class="comment_text" id="comment-body-12109"><p class="cye-lm-tag">Very Nice article<br> We have dynamic search requirement on specific entity from UI.<br> How can we add Specification dynamically?</p>
<p class="cye-lm-tag">Presently we are directly using Criteria API like</p>
<pre><code>
@SuppressWarnings({ "rawtypes", "unchecked" })
public static TypedQuery createCriteriaQueryForEntity(EntityManager em, 
Class entityClazz, List criteriaFilters)
{
	CriteriaBuilder cb = em.getCriteriaBuilder();
	CriteriaQuery createQuery = cb.createQuery(entityClazz);
	Root root = createQuery.from(entityClazz);
	CriteriaQuery select = createQuery.select(root);
	Predicate[] predicates = buildPredicates(criteriaFilters, root, cb);
	TypedQuery typedQuery = em.createQuery(select.where(cb.and(predicates)));
	return typedQuery;
}
</code>
</pre><p class="cye-lm-tag">Is there any way to get it done with Specification?</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-12111"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">December 12, 2012, 23:10</span></div><div class="comment_text" id="comment-body-12111"><p class="cye-lm-tag">Hi Mohit,</p>
<p class="cye-lm-tag">I have written another blog entry that <a href="http://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-part-four-jpa-criteria-queries/" rel="nofollow">describes the usage of specifications with Spring Data JPA</a>. However, here is skeleton of a specification builder class which you can use to build your query by using specifications:</p>
<pre><code>
public class Specifications {

	public static Specification<entityclass> search(final List filters) {
		return new Specification</entityclass><entityclass>() {
			@Override
			public Predicate toPredicate(Root</entityclass><entityclass> root, 
						CriteriaQuery&lt; ?&gt; query, 
						CriteriaBuilder cb) {
				Predicate[] p = buildPredicates(filters, root, cb);
				return cb.and(p);
			}
           
			private Predicate[] buildPredicates(List filters, 
							Root</entityclass><entityclass> root, 
							CriteriaBuilder cb) {
				//Build your predicates here.
			}
		};
	}
}
</entityclass></code>
</pre><p class="cye-lm-tag">I assume that the type of your entity class is <em>EntityClass</em>. I hope that this answered to your question.</p>
</div> </div></li></ul></li><li class="comment even thread-odd thread-alt depth-1" id="comment-275599"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Pablo</span>  <span class="comment_date cye-lm-tag">October 3, 2013, 04:44</span></div><div class="comment_text" id="comment-body-275599"><p class="cye-lm-tag">Hi Petri, I have a problem to connect my application to multiple datasources, I saw It’s possible to use @@PersistenceContext(unitName=, but I don’t know how to implement it. Currently I have configuration using .java and not .xml files, other thing is that I use DTO’s and jparepository.</p>
<p class="cye-lm-tag">Thanks a lot for helping me.<br> Pablo</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-275658"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">October 3, 2013, 18:55</span></div><div class="comment_text" id="comment-body-275658"><p class="cye-lm-tag">Have you tried following the advice given <a href="http://stackoverflow.com/questions/16550086/spring-data-jpa-repositories-for-multiple-database-entitymanger-configuration" target="_blank" rel="nofollow">in this StackOverflow question</a>?</p>
</div> </div></li></ul></li><li class="comment even thread-even depth-1" id="comment-351710"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Vij</span>  <span class="comment_date cye-lm-tag">January 29, 2014, 06:16</span></div><div class="comment_text" id="comment-body-351710"><p class="cye-lm-tag">Hello Petri ,<br> As usual, reading your blog is always a pleasure and informative.<br> I am trying to solve a problem and hoping your get your insights.<br> I am trying to write a generic repository that loads entities that are subclasses of a base type.<br> Now, I have a base repository implementation working and am able to manipulate specific entities For E-g Car. I am attempting to write a generic repo that is able to load all reference data like “CarType”<br> So I am adding custom methods to that repo and extending from the base repo.<br> <a href="http://stackoverflow.com/questions/19765684/spring-jpa-adding-custom-functionality-to-all-repositories-and-at-the-same-time?rq=1" rel="nofollow">http://stackoverflow.com/questions/19765684/spring-jpa-adding-custom-functionality-to-all-repositories-and-at-the-same-time?rq=1</a><br> I am running into an error :<br> Caused by: java.lang.IllegalArgumentException: Not an managed type: class xxx.BaseEntity<br> at org.hibernate.ejb.metamodel.MetamodelImpl.managedType(MetamodelImpl.java:200) ~[hibernate-entitymanager-4.2.7.Final.jar:4.2.7.Final]<br> at org.springframework.data.jpa.repository.support.JpaMetamodelEntityInformation.(JpaMetamodelEntityInformation.java:68) ~[spring-data-jpa-1.4.3.RELEASE.jar:na]<br> at org.springframework.data.jpa.repository.support.JpaEntityInformationSupport.getMetadata(JpaEntityInformationSupport.java:65) ~[spring-data-jpa-1.4.3.RELEASE.jar:na]<br> at org.springframework.data.jpa.repository.support.JpaRepositoryFactory.getEntityInformation(JpaRepositoryFactory.java:146) ~[spring-data-jpa-1.4.3.RELEASE.jar:na]</p>
<p class="cye-lm-tag">I saw the below post but could not figure it out :</p>
<p class="cye-lm-tag"><a href="http://stackoverflow.com/questions/14286841/can-i-use-a-generic-repository-for-all-children-of-a-mappedsuperclass-with-sprin" rel="nofollow">http://stackoverflow.com/questions/14286841/can-i-use-a-generic-repository-for-all-children-of-a-mappedsuperclass-with-sprin</a></p>
<p class="cye-lm-tag">I have created a SO question with complete implementation details(which might be a bit long to post here).</p>
<p class="cye-lm-tag"><a href="http://stackoverflow.com/questions/21415551/generic-spring-data-jpa-repository-implementation-to-load-data-by-class-type" rel="nofollow">http://stackoverflow.com/questions/21415551/generic-spring-data-jpa-repository-implementation-to-load-data-by-class-type</a></p>
<p class="cye-lm-tag">If possible, kindly have a look and advice. It will be much appreciated.</p>
<p class="cye-lm-tag">Thanks</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-354068"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">February 1, 2014, 21:45</span></div><div class="comment_text" id="comment-body-354068"><p class="cye-lm-tag">Hi,</p>
<p class="cye-lm-tag">I am sorry that it took me a few days to answer to this question.</p>
<p class="cye-lm-tag">The root cause of this problem is that the <code>BaseEntity</code> class isn’t mapped as an entity like suggested in the <a href="http://stackoverflow.com/a/21416271/313554" target="_blank" rel="nofollow">answer</a> of <a href="http://stackoverflow.com/questions/21415551/generic-spring-data-jpa-repository-implementation-to-load-data-by-class-type" target="_blank" rel="nofollow">your StackOverflow question</a>.</p>
</div> </div></li></ul></li><li class="comment even thread-odd thread-alt depth-1" id="comment-393707"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Lukas</span>  <span class="comment_date cye-lm-tag">March 17, 2014, 01:51</span></div><div class="comment_text" id="comment-body-393707"><p class="cye-lm-tag">Thank you so much! Great tutorial!</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-394685"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">March 17, 2014, 15:38</span></div><div class="comment_text" id="comment-body-394685"><p class="cye-lm-tag">You are welcome! I am happy to hear that this blog post was useful to you.</p>
</div> </div></li></ul></li><li class="comment even thread-even depth-1" id="comment-642124"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Satish Dhiman</span>  <span class="comment_date cye-lm-tag">May 25, 2014, 12:33</span></div><div class="comment_text" id="comment-body-642124"><p class="cye-lm-tag">Hi Petri,</p>
<p class="cye-lm-tag">These are all examples with every explanation is excellence.<br> And every examples are very helpful for us.<br> Thanks</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-642969"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">May 25, 2014, 19:56</span></div><div class="comment_text" id="comment-body-642969"><p class="cye-lm-tag">Hi,</p>
<p class="cye-lm-tag">you are welcome. I am happy to hear that this blog post was useful to you.</p>
</div> </div></li></ul></li><li class="comment even thread-odd thread-alt depth-1" id="comment-680746"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Shyamala</span>  <span class="comment_date cye-lm-tag">June 5, 2014, 17:59</span></div><div class="comment_text" id="comment-body-680746"><p class="cye-lm-tag">Hi Petri,</p>
<p class="cye-lm-tag">All ur examples are very easy to understand. Can you pl explain how to call stored procedures in spring data jpa?</p>
<p class="cye-lm-tag">Thanks in advance</p>
<p class="cye-lm-tag">Shyamala</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-683729"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">June 6, 2014, 20:28</span></div><div class="comment_text" id="comment-body-683729"><p class="cye-lm-tag">I think that you have two options: you can either create a native SQL query by using the <code>@Query</code> annotation, or add a custom method to your repository which calls the stored procedure by using JDBC. You can get more information about the second option by reading this <a href="http://stackoverflow.com/questions/14976722/spring-data-jpa-nativequery-with-two-output-params" target="_blank" rel="nofollow">StackOverflow question</a>.</p>
</div> </div></li></ul></li><li class="comment even thread-even depth-1" id="comment-1447234"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag"><a href="http://www.weenajimenez.com" rel="external nofollow" class="url">Weena</a></span>  <span class="comment_date cye-lm-tag">May 25, 2016, 11:12</span></div><div class="comment_text" id="comment-body-1447234"><p class="cye-lm-tag">Hi Petri,</p>
<p class="cye-lm-tag">Thank you so much, your are a very good teacher.  Your posts are excelent!!</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-1447858"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">May 26, 2016, 17:24</span></div><div class="comment_text" id="comment-body-1447858"><p class="cye-lm-tag">Thank you for your kind words. I really appreciate them.</p>
</div> </div></li></ul></li><li class="comment even thread-odd thread-alt depth-1" id="comment-1451654"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">teja</span>  <span class="comment_date cye-lm-tag">June 3, 2016, 18:15</span></div><div class="comment_text" id="comment-body-1451654"><p class="cye-lm-tag">Hi Petri,</p>
<p class="cye-lm-tag">Thank you so much Your posts are excelent!! Can you pl explain how can write join query using spring data jpa</p>
<p class="cye-lm-tag">Thanks</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-1452012"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">June 4, 2016, 11:48</span></div><div class="comment_text" id="comment-body-1452012"><p class="cye-lm-tag">Hi,</p>
<p class="cye-lm-tag">This article describes how you can <a href="http://www.objectdb.com/java/jpa/query/jpql/from" target="_blank" rel="nofollow">create joins with JPQL</a>.</p>
</div> </div><ul class="children"><li class="comment even depth-3" id="comment-1453006"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Teja</span>  <span class="comment_date cye-lm-tag">June 6, 2016, 17:22</span></div><div class="comment_text" id="comment-body-1453006"><p class="cye-lm-tag">Thank you so much petri</p>
<p class="cye-lm-tag">That site was very helpful. I tried it.but I am getting the below error<br> Caused by: org.hibernate.MappingException: broken column mapping for</p>
<p class="cye-lm-tag">do you have any idea when this error will occur</p>
</div> </div><ul class="children"><li class="comment odd alt depth-4" id="comment-1453012"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Teja</span>  <span class="comment_date cye-lm-tag">June 6, 2016, 17:42</span></div><div class="comment_text" id="comment-body-1453012"><p class="cye-lm-tag">Please ignore that question. that was resolved</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-5" id="comment-1453549"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">June 7, 2016, 19:49</span></div><div class="comment_text" id="comment-body-1453549"><p class="cye-lm-tag">Hi,</p>
<p class="cye-lm-tag">It is good to hear that you were able to solve your problem.</p>
</div></div></li></ul></li></ul></li></ul></li></ul></li><li class="comment odd alt thread-even depth-1" id="comment-1487505"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">john</span>  <span class="comment_date cye-lm-tag">September 16, 2016, 13:25</span></div><div class="comment_text" id="comment-body-1487505"><p class="cye-lm-tag">Hi Petri,<br> I am creating a project using spring boot. I am creating an aspect class. I want to run a query on @before aspect . would you please help me how to do that?<br> I want to run query like “select * from Student   where name = abc”. How can i do that ?</p>
</div> </div></li></ul></div> </section>
<br><hr>
<h2>16 Adding Custom Methods Into All Repositories</h2>
<div class="post_content cye-lm-tag" itemprop="articleBody"><p class="cye-lm-tag">The previous part of this tutorial taught us how we can <a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-part-eight-adding-functionality-to-a-repository/">add custom methods into a single repository</a>.</p>
<p class="cye-lm-tag">Although that is a very useful skill, it doesn’t help us when we have to add the same method into all repositories of our application.</p>
<p class="cye-lm-tag">Luckily for us, Spring Data provides a way to add custom methods into all repositories.<br></p>
<p class="cye-lm-tag"></p>
<br> This blog post describes how we can add custom methods into all Spring Data JPA repositories. During this blog post we will implement a method that fulfills the following requirements:<p class="cye-lm-tag"></p>
<ul><li>It deletes the entity whose id is given as a method parameter.</li><li>It returns an <em>Optional</em> which contains the deleted entity. If no entity is found with the given id, it returns an empty <em>Optional</em>.</li></ul><p class="cye-lm-tag">Let’s get started.</p>
<div class="note"> <strong>Additional Reading:</strong><p class="cye-lm-tag"></p>
<p class="cye-lm-tag">If you are not familiar with Spring Data JPA, <strong>you should read</strong> the following blog posts before you continue reading this blog post:</p>
<ul><li><a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-introduction/">Spring Data JPA Tutorial: Introduction</a> provides a quick introduction to Spring Data JPA and gives an overview of the Spring Data repository interfaces.</li><li><a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-getting-the-required-dependencies/">Spring Data JPA Tutorial: Getting the Required Dependencies</a> describes how you can get the required dependencies.</li><li><a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-part-one-configuration/">Spring Data JPA Tutorial: Configuration</a> describes how you can configure the persistence layer of a Spring application that uses Spring Data JPA.</li><li><a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-part-two-crud/">Spring Data JPA Tutorial: CRUD</a> describes how you can create a Spring Data JPA repository that provides CRUD operations for an entity.</li><li><a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-auditing-part-one/">Spring Data JPA Tutorial: Auditing, Part One</a> describes how you can add the creation and modification time fields into your entities by using the auditing infrastructure of Spring Data JPA.</li><li><a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-auditing-part-two/">Spring Data JPA Tutorial: Auditing, Part Two</a> describes how you can add the information of the authenticated user, who created and/or updated an entity, into your entities by using the auditing infrastructure of Spring Data JPA.</li></ul></div><h2>Creating a Base Repository Interface</h2><p class="cye-lm-tag">When we want to add custom methods into all Spring Data JPA repositories, the first thing that we have to is to create a base interface which declares the custom methods.</p>
<p class="cye-lm-tag">We can create the base repository interface by following these steps:</p>
<ol><li>Create an interface called <em>BaseRepository</em> that has the following type parameters:<ul><li>The <em>T</em> type parameter is the type of the managed entity.</li><li>The <em>ID</em> type parameter is the type of the managed entity’s primary key. Note that this type parameter must extend the <em>Serializable</em> interface.</li></ul></li><li>Extend the <em>Repository</em> interface and provide the required type parameters.</li><li>Annotate the created interface with the <em>@NoRepositoryBean</em> annotation. This ensures that Spring Data JPA won’t try to create an implementation for the <em>BaseRepository</em> interface.</li><li>Add the <em>deleteById()</em> method to the created interface. This methods takes the id of the deleted entity as a method parameter and returns an <em>Optional&lt;T&gt;</em> object.</li></ol><p class="cye-lm-tag">The source code of the <em>BaseRepository</em> interface looks as follows:</p>
<div><div id="highlighter_346324" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.repository.NoRepositoryBean;</code></div><div class="line number2 index1 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.repository.Repository;</code></div><div class="line number3 index2 alt2">&nbsp;</div><div class="line number4 index3 alt1"><code class="java keyword">import</code> <code class="java plain">java.io.Serializable;</code></div><div class="line number5 index4 alt2"><code class="java keyword">import</code> <code class="java plain">java.util.Optional;</code></div><div class="line number6 index5 alt1">&nbsp;</div><div class="line number7 index6 alt2"><code class="java color1">@NoRepositoryBean</code></div><div class="line number8 index7 alt1"><code class="java keyword">public</code> <code class="java keyword">interface</code> <code class="java plain">BaseRepository&lt;T, ID </code><code class="java keyword">extends</code> <code class="java plain">Serializable&gt; </code><code class="java keyword">extends</code> <code class="java plain">Repository&lt;T, ID&gt; {</code></div><div class="line number9 index8 alt2">&nbsp;</div><div class="line number10 index9 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">Optional&lt;T&gt; deleteById(ID id);</code></div><div class="line number11 index10 alt2"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><div class="note"> Remember that the base repository interface must extend the same interface that is extended by your repository interfaces. In other words, if your repository interfaces extend the <em>CrudRepository</em> interface, the <em>BaseRepository</em> interface must extend it as well.<p class="cye-lm-tag"></p>
<p class="cye-lm-tag"><strong>Additional Reading:</strong></p>
<ul><li><a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-part-two-crud/">Spring Data JPA Tutorial: CRUD</a></li><li><a href="http://docs.spring.io/spring-data/commons/docs/current/api/org/springframework/data/repository/NoRepositoryBean.html" target="_blank">The Javadoc of the <em>@NoRepositoryBean</em> annotation</a></li></ul></div><p class="cye-lm-tag">After we have created our base repository interface, we have to naturally implement it. Let’s find out how we can create a base repository class that deletes the requested entity by using <em>EntityManager</em>.</p>
<h2>Implementing the Base Repository Interface</h2><p class="cye-lm-tag">The <em>SimpleJpaRepository</em> is the default implementation of Spring Data JPA repository interfaces. Because we want to add the methods declared by our base repository interface into all repositories, we have to create a custom base repository class that extends the <em>SimpleJpaRepository</em> class and implements the <em>BaseRepository</em> interface.</p>
<p class="cye-lm-tag">We can create a custom base repository class by following these steps:</p>
<ol><li>Create a <em>BaseRepositoryImpl</em> class that has two type parameters:<ul><li>The <em>T</em> type parameter is the type of the managed entity.</li><li>The <em>ID</em> type parameter is the type of the managed entity’s primary key. Note that this type parameter must extend the <em>Serializable</em> interface.</li></ul></li><li>Ensure that the <em>BaseRepositoryImpl</em> class extends the <em>SimpleJpaRepository</em> class and implements the <em>BaseRepository</em> interface. Remember to provide the required type parameters.</li><li>Add a private <em>EntityManager</em> field to created class and mark the field as <em>final</em>.</li><li>Add a constructor that takes two constructor arguments:<ol><li>A <em>Class</em> object that represents the managed entity class.</li><li>An <em>EntityManager</em> object.</li></ol></li><li>Implement the constructor by invoking <a href="http://docs.spring.io/spring-data/jpa/docs/current/api/org/springframework/data/jpa/repository/support/SimpleJpaRepository.html#SimpleJpaRepository-java.lang.Class-javax.persistence.EntityManager-" target="_blank">the constructor of the super class (<em>SimpleJpaRepository</em>)</a> and storing a reference to the <em>EntityManager</em> object into the private <em>EntityManager</em> field.</li><li>Add the <em>deleteById()</em> method to created class and implement it by following thse steps:<ol><li>Annotate the method with the <em>@Transactional</em> annotation. This ensures that the method is always invoked inside a read-write transaction.</li><li>Find the deleted entity object by using the provided id as a search criteria.</li><li>If an entity object is found, delete the found entity object and return an <em>Optional</em> object that contains the deleted entity object.</li><li>If no entity object is found, return an empty <em>Optional</em> object.</li></ol></li></ol><p class="cye-lm-tag">The source code of the <em>BaseRepositoryImpl</em> class looks as follows:</p>
<div><div id="highlighter_380613" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div class="line number23 index22 alt2">23</div><div class="line number24 index23 alt1">24</div><div class="line number25 index24 alt2">25</div><div class="line number26 index25 alt1">26</div><div class="line number27 index26 alt2">27</div><div class="line number28 index27 alt1">28</div><div class="line number29 index28 alt2">29</div><div class="line number30 index29 alt1">30</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.jpa.repository.support.SimpleJpaRepository;</code></div><div class="line number2 index1 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.transaction.annotation.Transactional;</code></div><div class="line number3 index2 alt2">&nbsp;</div><div class="line number4 index3 alt1"><code class="java keyword">import</code> <code class="java plain">javax.persistence.EntityManager;</code></div><div class="line number5 index4 alt2"><code class="java keyword">import</code> <code class="java plain">java.io.Serializable;</code></div><div class="line number6 index5 alt1"><code class="java keyword">import</code> <code class="java plain">java.util.Optional;</code></div><div class="line number7 index6 alt2">&nbsp;</div><div class="line number8 index7 alt1"><code class="java keyword">public</code> <code class="java keyword">class</code> <code class="java plain">BaseRepositoryImpl &lt;T, ID </code><code class="java keyword">extends</code> <code class="java plain">Serializable&gt;</code></div><div class="line number9 index8 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">extends</code> <code class="java plain">SimpleJpaRepository&lt;T, ID&gt;&nbsp; </code><code class="java keyword">implements</code> <code class="java plain">BaseRepository&lt;T, ID&gt; {</code></div><div class="line number10 index9 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number11 index10 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java keyword">final</code> <code class="java plain">EntityManager entityManager;</code></div><div class="line number12 index11 alt1">&nbsp;</div><div class="line number13 index12 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java plain">BaseRepositoryImpl(Class&lt;T&gt; domainClass, EntityManager entityManager) {</code></div><div class="line number14 index13 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">super</code><code class="java plain">(domainClass, entityManager);</code></div><div class="line number15 index14 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">this</code><code class="java plain">.entityManager = entityManager;</code></div><div class="line number16 index15 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number17 index16 alt2">&nbsp;</div><div class="line number18 index17 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Transactional</code></div><div class="line number19 index18 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Override</code></div><div class="line number20 index19 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java plain">Optional&lt;T&gt; deleteById(ID id) {</code></div><div class="line number21 index20 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">T deleted = entityManager.find(</code><code class="java keyword">this</code><code class="java plain">.getDomainClass(), id);</code></div><div class="line number22 index21 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">Optional&lt;T&gt; returned = Optional.empty();</code></div><div class="line number23 index22 alt2">&nbsp;</div><div class="line number24 index23 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">if</code> <code class="java plain">(deleted != </code><code class="java keyword">null</code><code class="java plain">) {</code></div><div class="line number25 index24 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">entityManager.remove(deleted);</code></div><div class="line number26 index25 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">returned = Optional.of(deleted);</code></div><div class="line number27 index26 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number28 index27 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">return</code> <code class="java plain">returned;</code></div><div class="line number29 index28 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number30 index29 alt1"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><div class="note"> <strong>Additional Reading:</strong><p class="cye-lm-tag"></p>
<ul><li><a href="http://docs.spring.io/spring/docs/4.1.x/spring-framework-reference/htmlsingle/#transaction-declarative-annotations" target="_blank">Spring Framework Reference Manual: 12.5.6 Using @Transactional</a></li><li><a href="http://docs.spring.io/spring-data/jpa/docs/current/api/org/springframework/data/jpa/repository/support/SimpleJpaRepository.html" target="_blank">The Javadoc of the <em>SimpleJpaRepository</em> class</a></li><li><a href="http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/transaction/annotation/Transactional.html" target="_blank">The Javadoc of the <em>@Transactional</em> annotation</a></li><li><a href="https://docs.oracle.com/javaee/6/api/javax/persistence/EntityManager.html" target="_blank">The Javadoc of the <em>EntityManager</em> interface</a></li></ul></div><p class="cye-lm-tag">After we have created our base repository class, we have to create a custom <em>RepositoryFactoryBean</em>. Let’s find out how we can do it.</p>
<div class="note">If you are using Spring Data JPA 1.9.X or newer, you can skip this step because creating the <em>RepositoryFactoryBean</em> is not mandatory anymore (you can still do it if you want to).</div><h2>Creating a Custom RepositoryFactoryBean</h2><p class="cye-lm-tag">The <em>RepositoryFactoryBean</em> is a component that is responsible of providing implementations for Spring Data JPA repository interfaces. Because we want to replace the default implementation (<em>SimpleJpaRepository</em>) with our custom implementation (<em>BaseRepositoryImpl</em>), we have to create a custom <em>RepositoryFactoryBean</em>.</p>
<p class="cye-lm-tag">We can do this by following these steps:</p>
<ol><li>Create a <em>BaseRepositoryFactoryBean</em> class that has three type parameters:<ul><li>The <em>R</em> type parameter is the type of the repository. This type parameter must extend the <em>JpaRepository</em> interface.</li><li>The <em>T</em> type parameter is the type of the managed entity.</li><li>The <em>I</em> type parameter is the type of the entity’s private key. Note that this type parameter must extend the <em>Serializable</em> interface.</li></ul></li><li>Extend the <em>JpaRepositoryFactoryBean</em> class and provide the required type parameters.</li><li>Add a private static <em>BaseRepositoryFactory</em> class to the created class and extend the <em>JpaRepositoryFactory</em> class. Implement this class by following these steps:<ol><li>Add two type parameters to the <em>BaseRepositoryFactory</em> class:<ul><li>The <em>T</em> type parameter is the type of the managed entity.</li><li>The <em>I</em> type parameter is the type of the entity’s private key. Note that this type parameter must extend the <em>Serializable</em> interface.</li></ul></li><li>Add a private final <em>EntityManager</em> field to the <em>BaseRepositoryFactory</em> class and mark the field as <em>final</em></li><li>Add constructor that takes an <em>EntityManager</em> object as a constructor argument and implement it by following these steps:<ol><li>Invoke <a href="http://docs.spring.io/spring-data/jpa/docs/current/api/org/springframework/data/jpa/repository/support/JpaRepositoryFactory.html#JpaRepositoryFactory-javax.persistence.EntityManager-" target="_blank">the constructor of the super class</a> and pass the <em>EntityManager</em> object as constructor argument.</li><li>Store a reference to the <em>EntityManager</em> object into the private <em>EntityManager</em> field.</li></ol></li><li>Override the <em>getTargetRepository(RepositoryMetadata metadata)</em> method and implement it by returning a new <em>BaseRepositoryImpl</em> object.</li><li>Override the <em>getRepositoryBaseClass(RepositoryMetadata metadata)</em> method and implement it by returning <em>BaseRepositoryImpl.class</em>.</li></ol></li><li>Override the <em>createRepositoryFactory(EntityManager em)</em> method of the <em>JpaRepositoryFactoryBean</em> class and implement it by returning a new <em>BaseRepositoryFactory</em> object.</li></ol><p class="cye-lm-tag">The source code of the <em>BaseRepositoryFactoryBean</em> class looks as follows:</p>
<div><div id="highlighter_7137" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div class="line number23 index22 alt2">23</div><div class="line number24 index23 alt1">24</div><div class="line number25 index24 alt2">25</div><div class="line number26 index25 alt1">26</div><div class="line number27 index26 alt2">27</div><div class="line number28 index27 alt1">28</div><div class="line number29 index28 alt2">29</div><div class="line number30 index29 alt1">30</div><div class="line number31 index30 alt2">31</div><div class="line number32 index31 alt1">32</div><div class="line number33 index32 alt2">33</div><div class="line number34 index33 alt1">34</div><div class="line number35 index34 alt2">35</div><div class="line number36 index35 alt1">36</div><div class="line number37 index36 alt2">37</div><div class="line number38 index37 alt1">38</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.jpa.repository.JpaRepository;</code></div><div class="line number2 index1 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.jpa.repository.support.JpaRepositoryFactory;</code></div><div class="line number3 index2 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.jpa.repository.support.JpaRepositoryFactoryBean;</code></div><div class="line number4 index3 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.repository.core.RepositoryMetadata;</code></div><div class="line number5 index4 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.repository.core.support.RepositoryFactorySupport;</code></div><div class="line number6 index5 alt1">&nbsp;</div><div class="line number7 index6 alt2"><code class="java keyword">import</code> <code class="java plain">javax.persistence.EntityManager;</code></div><div class="line number8 index7 alt1"><code class="java keyword">import</code> <code class="java plain">java.io.Serializable;</code></div><div class="line number9 index8 alt2">&nbsp;</div><div class="line number10 index9 alt1"><code class="java keyword">public</code> <code class="java keyword">class</code> <code class="java plain">BaseRepositoryFactoryBean&lt;R </code><code class="java keyword">extends</code> <code class="java plain">JpaRepository&lt;T, I&gt;, T,</code></div><div class="line number11 index10 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">I </code><code class="java keyword">extends</code> <code class="java plain">Serializable&gt; </code><code class="java keyword">extends</code> <code class="java plain">JpaRepositoryFactoryBean&lt;R, T, I&gt; {</code></div><div class="line number12 index11 alt1">&nbsp;</div><div class="line number13 index12 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Override</code></div><div class="line number14 index13 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">protected</code> <code class="java plain">RepositoryFactorySupport createRepositoryFactory(EntityManager em) {</code></div><div class="line number15 index14 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">return</code> <code class="java keyword">new</code> <code class="java plain">BaseRepositoryFactory(em);</code></div><div class="line number16 index15 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number17 index16 alt2">&nbsp;</div><div class="line number18 index17 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java keyword">static</code> <code class="java keyword">class</code> <code class="java plain">BaseRepositoryFactory&lt;T, I </code><code class="java keyword">extends</code> <code class="java plain">Serializable&gt;</code></div><div class="line number19 index18 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">extends</code> <code class="java plain">JpaRepositoryFactory {</code></div><div class="line number20 index19 alt1">&nbsp;</div><div class="line number21 index20 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java keyword">final</code> <code class="java plain">EntityManager em;</code></div><div class="line number22 index21 alt1">&nbsp;</div><div class="line number23 index22 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java plain">BaseRepositoryFactory(EntityManager em) {</code></div><div class="line number24 index23 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">super</code><code class="java plain">(em);</code></div><div class="line number25 index24 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">this</code><code class="java plain">.em = em;</code></div><div class="line number26 index25 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number27 index26 alt2">&nbsp;</div><div class="line number28 index27 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Override</code></div><div class="line number29 index28 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">protected</code> <code class="java plain">Object getTargetRepository(RepositoryMetadata metadata) {</code></div><div class="line number30 index29 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">return</code> <code class="java keyword">new</code> <code class="java plain">BaseRepositoryImpl&lt;T, I&gt;((Class&lt;T&gt;) metadata.getDomainType(), em);</code></div><div class="line number31 index30 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number32 index31 alt1">&nbsp;</div><div class="line number33 index32 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Override</code></div><div class="line number34 index33 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">protected</code> <code class="java plain">Class&lt;?&gt; getRepositoryBaseClass(RepositoryMetadata metadata) {</code></div><div class="line number35 index34 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">return</code> <code class="java plain">BaseRepositoryImpl.</code><code class="java keyword">class</code><code class="java plain">;</code></div><div class="line number36 index35 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number37 index36 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number38 index37 alt1"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><div class="note"> <strong>Additional Reading:</strong><p class="cye-lm-tag"></p>
<ul><li><a href="http://docs.spring.io/spring-data/jpa/docs/current/api/org/springframework/data/jpa/repository/support/JpaRepositoryFactoryBean.html" target="_blank">The Javadoc of the <em>JpaRepositoryFactoryBean</em> class</a></li><li><a href="http://docs.spring.io/spring-data/jpa/docs/current/api/org/springframework/data/jpa/repository/support/JpaRepositoryFactory.html" target="_blank">The Javadoc of the <em>JpaRepositoryFactory</em> class</a></li></ul></div><p class="cye-lm-tag">Let’s find out how we have to configure Spring Data JPA to use our custom <em>RepositoryFactoryBean</em>.</p>
<h2>Configuring Spring Data JPA</h2><p class="cye-lm-tag">We can configure Spring Data JPA by using one of the following methods:</p>
<h3>Configuring Spring Data JPA When We Use Spring Data JPA &lt; 1.9.X</h3><p class="cye-lm-tag">If we are using Spring Data JPA &lt; 1.9.X, we can configure the repository factory bean by setting the value of the <em>repositoryFactoryBeanClass</em> attribute of the <em>@EnableJpaRepositories</em> annotation.</p>
<p class="cye-lm-tag">The relevant part of the <em>PersistenceContext</em> class looks as follows:</p>
<div><div id="highlighter_755491" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2 highlighted">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.context.annotation.Configuration;</code></div><div class="line number2 index1 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.jpa.repository.config.EnableJpaAuditing;</code></div><div class="line number3 index2 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.jpa.repository.config.EnableJpaRepositories;</code></div><div class="line number4 index3 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.transaction.annotation.EnableTransactionManagement;</code></div><div class="line number5 index4 alt2">&nbsp;</div><div class="line number6 index5 alt1"><code class="java color1">@Configuration</code></div><div class="line number7 index6 alt2"><code class="java color1">@EnableJpaAuditing</code><code class="java plain">(dateTimeProviderRef = </code><code class="java string">"dateTimeProvider"</code><code class="java plain">)</code></div><div class="line number8 index7 alt1"><code class="java color1">@EnableJpaRepositories</code><code class="java plain">(basePackages = {</code><code class="java string">"net.petrikainulainen.springdata.jpa.todo"</code><code class="java plain">},</code></div><div class="line number9 index8 alt2 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">repositoryFactoryBeanClass = BaseRepositoryFactoryBean.</code><code class="java keyword">class</code></div><div class="line number10 index9 alt1"><code class="java plain">)</code></div><div class="line number11 index10 alt2"><code class="java color1">@EnableTransactionManagement</code></div><div class="line number12 index11 alt1"><code class="java keyword">class</code> <code class="java plain">PersistenceContext {</code></div><div class="line number13 index12 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number14 index13 alt1"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><div class="note">If you are using XML configuration, you can configure the used <em>RepositoryFactoryBean</em> by setting the value of the <em>repository</em> element’s <em>factory-class</em> attribute.</div><h3>Configuring Spring Data JPA When We Use Spring Data JPA 1.9.X or newer</h3><p class="cye-lm-tag">If we are using Spring Data JPA 1.9.X or newer, we don’t have to create the <em>RepositoryFactoryBean</em> class. We can simply configure the base repository class by setting the value of the <em>repositoryBaseClass</em> attribute of the <em>@EnableJpaRepositories</em> annotation.</p>
<p class="cye-lm-tag">The relevant part of the <em>PersistenceContext</em> class looks as follows:</p>
<div><div id="highlighter_471487" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2 highlighted">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.context.annotation.Configuration;</code></div><div class="line number2 index1 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.jpa.repository.config.EnableJpaAuditing;</code></div><div class="line number3 index2 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.jpa.repository.config.EnableJpaRepositories;</code></div><div class="line number4 index3 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.transaction.annotation.EnableTransactionManagement;</code></div><div class="line number5 index4 alt2">&nbsp;</div><div class="line number6 index5 alt1"><code class="java color1">@Configuration</code></div><div class="line number7 index6 alt2"><code class="java color1">@EnableJpaAuditing</code><code class="java plain">(dateTimeProviderRef = </code><code class="java string">"dateTimeProvider"</code><code class="java plain">)</code></div><div class="line number8 index7 alt1"><code class="java color1">@EnableJpaRepositories</code><code class="java plain">(basePackages = {</code><code class="java string">"net.petrikainulainen.springdata.jpa.todo"</code><code class="java plain">},</code></div><div class="line number9 index8 alt2 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">repositoryBaseClass = BaseRepositoryImpl.</code><code class="java keyword">class</code></div><div class="line number10 index9 alt1"><code class="java plain">)</code></div><div class="line number11 index10 alt2"><code class="java color1">@EnableTransactionManagement</code></div><div class="line number12 index11 alt1"><code class="java keyword">class</code> <code class="java plain">PersistenceContext {</code></div><div class="line number13 index12 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number14 index13 alt1"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><div class="note"> If you are using XML configuration, you can configure the repository base class by setting the value of the <em>repository</em> element’s <em>repository-base-class</em> attribute.</div><p class="cye-lm-tag">We are now ready to add the add the new <em>deleteById()</em> method into our repository interfaces. Let’s find out how we can do it.</p>
<h2>Modifying the Actual Repository Interfaces</h2><p class="cye-lm-tag">Before we can use our new <em>deleteById()</em> method, we have to make some changes to our repository interfaces. We can make these changes to the <em>TodoRepository</em> interface by following these steps:</p>
<ol><li>Extend the <em>BaseRepository</em> interface and provide the following type parameters:<ul><li>The type of the managed entity is <em>Todo</em>.</li><li>The type of the entity’s private key is <em>Long</em>.</li></ul></li><li>Remove the “old” <em>delete()</em> method.</li></ol><p class="cye-lm-tag">The source code of the <em>TodoRepository</em> interface looks as follows:</p>
<div><div id="highlighter_650668" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2 highlighted">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div class="line number23 index22 alt2">23</div><div class="line number24 index23 alt1">24</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">import</code> <code class="java plain">net.petrikainulainen.springdata.jpa.common.BaseRepository;</code></div><div class="line number2 index1 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.jpa.repository.Query;</code></div><div class="line number3 index2 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.data.repository.query.Param;</code></div><div class="line number4 index3 alt1">&nbsp;</div><div class="line number5 index4 alt2"><code class="java keyword">import</code> <code class="java plain">java.util.List;</code></div><div class="line number6 index5 alt1"><code class="java keyword">import</code> <code class="java plain">java.util.Optional;</code></div><div class="line number7 index6 alt2">&nbsp;</div><div class="line number8 index7 alt1">&nbsp;</div><div class="line number9 index8 alt2 highlighted"><code class="java keyword">interface</code> <code class="java plain">TodoRepository </code><code class="java keyword">extends</code> <code class="java plain">BaseRepository&lt;Todo, Long&gt; {</code></div><div class="line number10 index9 alt1">&nbsp;</div><div class="line number11 index10 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">List&lt;Todo&gt; findAll();</code></div><div class="line number12 index11 alt1">&nbsp;</div><div class="line number13 index12 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Query</code><code class="java plain">(</code><code class="java string">"SELECT t FROM Todo t WHERE "</code> <code class="java plain">+</code></div><div class="line number14 index13 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java string">"LOWER(t.title) LIKE LOWER(CONCAT('%',:searchTerm, '%')) OR "</code> <code class="java plain">+</code></div><div class="line number15 index14 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java string">"LOWER(t.description) LIKE LOWER(CONCAT('%',:searchTerm, '%')) "</code> <code class="java plain">+</code></div><div class="line number16 index15 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java string">"ORDER BY t.title ASC"</code><code class="java plain">)</code></div><div class="line number17 index16 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">List&lt;Todo&gt; findBySearchTerm(</code><code class="java color1">@Param</code><code class="java plain">(</code><code class="java string">"searchTerm"</code><code class="java plain">) String searchTerm);</code></div><div class="line number18 index17 alt1">&nbsp;</div><div class="line number19 index18 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">Optional&lt;Todo&gt; findOne(Long id);</code></div><div class="line number20 index19 alt1">&nbsp;</div><div class="line number21 index20 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">void</code> <code class="java plain">flush();</code></div><div class="line number22 index21 alt1">&nbsp;</div><div class="line number23 index22 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">Todo save(Todo persisted);</code></div><div class="line number24 index23 alt1"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><p class="cye-lm-tag">That’s it. We can now use our new <em>deleteById()</em> method. Let’s summarize what we learned from this blog post.<br></p>
<p class="cye-lm-tag"></p>
<p class="cye-lm-tag"></p>
<h2>Summary</h2><p class="cye-lm-tag">This blog post has taught us three things:</p>
<ul><li>If we want to add custom methods into all repositories, we have to replace the default repository implementation (<em>SimpleJpaRepository</em>) with our own repository implementation.</li><li>If we are using Spring Data JPA 1.9.X or newer, we don’t have to create a custom <em>RepositoryFactoryBean</em>.</li><li>Our repository interfaces must extend the base repository interface that declares the methods which are added into all repositories.</li></ul><p class="cye-lm-tag">The next part of my Spring Data JPA tutorial describes how we can <a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-integration-testing/">write integration tests for Spring Data JPA repositories</a>.</p>
<p class="cye-lm-tag"><strong>P.S.</strong> You can <a href="https://github.com/pkainulainen/spring-data-jpa-examples/tree/master/custom-method-all-repos" target="_blank">get the example application of this blog post from Github</a>.</p>
<div class="note">If you want to learn how to use Spring Data JPA, you should read my <a href="/spring-data-jpa-tutorial/">Spring Data JPA tutorial</a>.</div> <span id="tve_leads_end_content" style="display: block; visibility: hidden; border: 1px solid transparent;" class="cye-lm-tag"></span>
</div>

</div>




</div>
</div>
</div>
</div>
</div>
</div><p style="line-height: 24px;" data-unit="px" class="tve_p_center cye-lm-tag"><span class="tve_custom_font_size cye-lm-tag" style="font-size: 16px;">I will never rent, sell, or share your email address.<br></span></p>

</div></div></div></div></div></div></div>
<section id="comments"><div class="comments_intro"><span class="num_comments cye-lm-tag">4</span> comments… <a href="#commentform" rel="nofollow">add one</a></div><ul class="comment_list"><li class="comment even thread-even depth-1" id="comment-1429815"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Kisna</span>  <span class="comment_date cye-lm-tag">April 26, 2016, 10:52</span></div><div class="comment_text" id="comment-body-1429815"><p class="cye-lm-tag">And what is the best practice to mark this class that extends SimpleJpaRepository to be annotated with @Repository and be able to inject the dependencies using constructor annotations?</p>
</div> </div></li><li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1503050"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag"><a href="http://blog.allahbaksh.in" rel="external nofollow" class="url">ALLAHBAKSH MOHAMMEDALI ASADULLAH</a></span>  <span class="comment_date cye-lm-tag">November 12, 2016, 07:27</span></div><div class="comment_text" id="comment-body-1503050"><p class="cye-lm-tag">Example for Spring-Data-Cassandra? I am not able to get it wokring.</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-1504220"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">November 16, 2016, 22:16</span></div><div class="comment_text" id="comment-body-1504220"><p class="cye-lm-tag">Hi,</p>
<p class="cye-lm-tag">I have never used Spring Data Cassandra, but <a href="http://www.baeldung.com/spring-data-cassandra-tutorial" target="_blank" rel="nofollow">Baeldung has published a nice tutorial about it</a>. I hope that it helps.</p>
</div> </div></li></ul></li></ul></div> </section>
<br><hr>
<h2>17 Integration Testing</h2>
<div class="post_content cye-lm-tag" itemprop="articleBody"><p class="cye-lm-tag">My <a href="/spring-data-jpa-tutorial/">Spring Data JPA tutorial</a> has taught us that we can create database queries and persist entities in the database by using special repository interfaces.</p>
<p class="cye-lm-tag">This raises an interesting question:</p>
<p class="cye-lm-tag"><em>How can we write integration tests for our Spring Data JPA repositories because they are just interfaces?</em></p>
<p class="cye-lm-tag">This blog post answers to that question. During this blog post we will write integration tests for a Spring Data JPA repository that manages the information of todo entries (<em>Todo</em> objects). To be more specific, we will write integration tests for the <em>findBySearchTerm()</em> method of <em>TodoRepository</em> interface. That method ignores case and returns todo entries whose title or description contains the given search term.</p>
<p class="cye-lm-tag">Let’s start by getting the required dependencies with Maven.</p>
<div class="note"> There are two things that you should know before you read this blog post:<p class="cye-lm-tag"></p>
<ul><li>If you are not familiar with Spring Data JPA, you should take a look at my <a href="/spring-data-jpa-tutorial/">Spring Data JPA Tutorial</a> before you continue reading this blog post.</li><li>If you want to write integration tests for Spring powered repositories that do not use Spring Data JPA, you can still use the approach described in this blog post.</li></ul></div><h2>Getting the Required Dependencies With Maven</h2><p class="cye-lm-tag">We can get the required dependencies with Maven by declaring the following dependencies in our <em>pom.xml</em> file:</p>
<ul><li><a href="http://junit.org/" target="_blank">JUnit</a> (version 4.11).</li><li><a href="http://joel-costigliola.github.io/assertj/assertj-core.html" target="_blank">AssertJ Core</a> (version 3.2.0). We use AssertJ for ensuring that the tested method returns the correct information.</li><li><a href="http://docs.spring.io/spring/docs/4.1.x/spring-framework-reference/html/testing.html" target="_blank">Spring Test</a> (version 4.1.6.RELEASE).</li><li><a href="http://dbunit.sourceforge.net/" target="_blank">DbUnit</a> (version 2.5.1). Remember to exclude the JUnit dependency. We use DbUnit for initializing our database into a known state before each test case is invoked.</li><li><a href="http://springtestdbunit.github.io/spring-test-dbunit/" target="_blank">Spring Test DbUnit</a> (version 1.2.1) integrates DbUnit with the Spring Test framework.</li></ul><p class="cye-lm-tag">The relevant part of our <em>pom.xml</em> file looks as follows:</p>
<div><div id="highlighter_813281" class="syntaxhighlighter  xml"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div class="line number23 index22 alt2">23</div><div class="line number24 index23 alt1">24</div><div class="line number25 index24 alt2">25</div><div class="line number26 index25 alt1">26</div><div class="line number27 index26 alt2">27</div><div class="line number28 index27 alt1">28</div><div class="line number29 index28 alt2">29</div><div class="line number30 index29 alt1">30</div><div class="line number31 index30 alt2">31</div><div class="line number32 index31 alt1">32</div><div class="line number33 index32 alt2">33</div><div class="line number34 index33 alt1">34</div><div class="line number35 index34 alt2">35</div><div class="line number36 index35 alt1">36</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="xml plain">&lt;</code><code class="xml keyword">dependency</code><code class="xml plain">&gt;</code></div><div class="line number2 index1 alt1"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">groupId</code><code class="xml plain">&gt;junit&lt;/</code><code class="xml keyword">groupId</code><code class="xml plain">&gt;</code></div><div class="line number3 index2 alt2"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">artifactId</code><code class="xml plain">&gt;junit&lt;/</code><code class="xml keyword">artifactId</code><code class="xml plain">&gt;</code></div><div class="line number4 index3 alt1"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">version</code><code class="xml plain">&gt;4.11&lt;/</code><code class="xml keyword">version</code><code class="xml plain">&gt;</code></div><div class="line number5 index4 alt2"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">scope</code><code class="xml plain">&gt;test&lt;/</code><code class="xml keyword">scope</code><code class="xml plain">&gt;</code></div><div class="line number6 index5 alt1"><code class="xml plain">&lt;/</code><code class="xml keyword">dependency</code><code class="xml plain">&gt;</code></div><div class="line number7 index6 alt2"><code class="xml plain">&lt;</code><code class="xml keyword">dependency</code><code class="xml plain">&gt;</code></div><div class="line number8 index7 alt1"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">groupId</code><code class="xml plain">&gt;org.assertj&lt;/</code><code class="xml keyword">groupId</code><code class="xml plain">&gt;</code></div><div class="line number9 index8 alt2"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">artifactId</code><code class="xml plain">&gt;assertj-core&lt;/</code><code class="xml keyword">artifactId</code><code class="xml plain">&gt;</code></div><div class="line number10 index9 alt1"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">version</code><code class="xml plain">&gt;3.2.0&lt;/</code><code class="xml keyword">version</code><code class="xml plain">&gt;</code></div><div class="line number11 index10 alt2"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">scope</code><code class="xml plain">&gt;test&lt;/</code><code class="xml keyword">scope</code><code class="xml plain">&gt;</code></div><div class="line number12 index11 alt1"><code class="xml plain">&lt;/</code><code class="xml keyword">dependency</code><code class="xml plain">&gt;</code></div><div class="line number13 index12 alt2"><code class="xml plain">&lt;</code><code class="xml keyword">dependency</code><code class="xml plain">&gt;</code></div><div class="line number14 index13 alt1"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">groupId</code><code class="xml plain">&gt;org.springframework&lt;/</code><code class="xml keyword">groupId</code><code class="xml plain">&gt;</code></div><div class="line number15 index14 alt2"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">artifactId</code><code class="xml plain">&gt;spring-test&lt;/</code><code class="xml keyword">artifactId</code><code class="xml plain">&gt;</code></div><div class="line number16 index15 alt1"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">version</code><code class="xml plain">&gt;4.1.6.RELEASE&lt;/</code><code class="xml keyword">version</code><code class="xml plain">&gt;</code></div><div class="line number17 index16 alt2"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">scope</code><code class="xml plain">&gt;test&lt;/</code><code class="xml keyword">scope</code><code class="xml plain">&gt;</code></div><div class="line number18 index17 alt1"><code class="xml plain">&lt;/</code><code class="xml keyword">dependency</code><code class="xml plain">&gt;</code></div><div class="line number19 index18 alt2"><code class="xml plain">&lt;</code><code class="xml keyword">dependency</code><code class="xml plain">&gt;</code></div><div class="line number20 index19 alt1"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">groupId</code><code class="xml plain">&gt;org.dbunit&lt;/</code><code class="xml keyword">groupId</code><code class="xml plain">&gt;</code></div><div class="line number21 index20 alt2"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">artifactId</code><code class="xml plain">&gt;dbunit&lt;/</code><code class="xml keyword">artifactId</code><code class="xml plain">&gt;</code></div><div class="line number22 index21 alt1"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">version</code><code class="xml plain">&gt;2.5.1&lt;/</code><code class="xml keyword">version</code><code class="xml plain">&gt;</code></div><div class="line number23 index22 alt2"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">scope</code><code class="xml plain">&gt;test&lt;/</code><code class="xml keyword">scope</code><code class="xml plain">&gt;</code></div><div class="line number24 index23 alt1"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">exclusions</code><code class="xml plain">&gt;</code></div><div class="line number25 index24 alt2"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">exclusion</code><code class="xml plain">&gt;</code></div><div class="line number26 index25 alt1"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">artifactId</code><code class="xml plain">&gt;junit&lt;/</code><code class="xml keyword">artifactId</code><code class="xml plain">&gt;</code></div><div class="line number27 index26 alt2"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">groupId</code><code class="xml plain">&gt;junit&lt;/</code><code class="xml keyword">groupId</code><code class="xml plain">&gt;</code></div><div class="line number28 index27 alt1"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;/</code><code class="xml keyword">exclusion</code><code class="xml plain">&gt;</code></div><div class="line number29 index28 alt2"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;/</code><code class="xml keyword">exclusions</code><code class="xml plain">&gt;</code></div><div class="line number30 index29 alt1"><code class="xml plain">&lt;/</code><code class="xml keyword">dependency</code><code class="xml plain">&gt;</code></div><div class="line number31 index30 alt2"><code class="xml plain">&lt;</code><code class="xml keyword">dependency</code><code class="xml plain">&gt;</code></div><div class="line number32 index31 alt1"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">groupId</code><code class="xml plain">&gt;com.github.springtestdbunit&lt;/</code><code class="xml keyword">groupId</code><code class="xml plain">&gt;</code></div><div class="line number33 index32 alt2"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">artifactId</code><code class="xml plain">&gt;spring-test-dbunit&lt;/</code><code class="xml keyword">artifactId</code><code class="xml plain">&gt;</code></div><div class="line number34 index33 alt1"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">version</code><code class="xml plain">&gt;1.2.1&lt;/</code><code class="xml keyword">version</code><code class="xml plain">&gt;</code></div><div class="line number35 index34 alt2"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">scope</code><code class="xml plain">&gt;test&lt;/</code><code class="xml keyword">scope</code><code class="xml plain">&gt;</code></div><div class="line number36 index35 alt1"><code class="xml plain">&lt;/</code><code class="xml keyword">dependency</code><code class="xml plain">&gt;</code></div></div></td></tr></tbody></table></div></div><p class="cye-lm-tag">After we have configured the required dependencies in our <em>pom.xml</em> file, we can configure our integration tests.</p>
<p class="cye-lm-tag"></p>
<h2>Configuring Our Integration Tests</h2><p class="cye-lm-tag">We can configure our integration tests by following these steps:</p>
<ol><li>Run integration tests by using the <em>SpringJUnit4ClassRunner</em> class. It is a custom JUnit runner that integrates the Spring Test framework with JUnit. We can configure the used JUnit runner by annotating our test class with the <em>@RunWith</em> annotation.</li><li>Configure the application context configuration class (or XML configuration file) that configures the application context used by our integration tests. We can configure the used application context configuration class (or XML configuration file) by annotating our test class with the <em>@ContextConfiguration</em> annotation.</li><li>Configure the test execution listeners which react to the test execution events that are published by the Spring Test framework. We have to configure the following test execution listeners:<ul><li>The <em>DependencyInjectionTestExecutionListener</em> provides dependency injection for the test object.</li><li>The <em>TransactionalTestExecutionListener</em> adds transaction support (with default rollback semantics) into our integration tests.</li><li>The <em>DbUnitTestExecutionListener</em> adds support for the features provided by the Spring Test DbUnit library.</li></ul></li></ol><p class="cye-lm-tag">After we have added this configuration into our integration test class, its source code looks as follows:</p>
<div><div id="highlighter_976048" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">import</code> <code class="java plain">com.github.springtestdbunit.DbUnitTestExecutionListener;</code></div><div class="line number2 index1 alt1"><code class="java keyword">import</code> <code class="java plain">org.junit.runner.RunWith;</code></div><div class="line number3 index2 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.test.context.ContextConfiguration;</code></div><div class="line number4 index3 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.test.context.TestExecutionListeners;</code></div><div class="line number5 index4 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</code></div><div class="line number6 index5 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.test.context.support.DependencyInjectionTestExecutionListener;</code></div><div class="line number7 index6 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.test.context.transaction.TransactionalTestExecutionListener;</code></div><div class="line number8 index7 alt1">&nbsp;</div><div class="line number9 index8 alt2"><code class="java color1">@RunWith</code><code class="java plain">(SpringJUnit4ClassRunner.</code><code class="java keyword">class</code><code class="java plain">)</code></div><div class="line number10 index9 alt1"><code class="java color1">@ContextConfiguration</code><code class="java plain">(classes = {PersistenceContext.</code><code class="java keyword">class</code><code class="java plain">})</code></div><div class="line number11 index10 alt2"><code class="java color1">@TestExecutionListeners</code><code class="java plain">({DependencyInjectionTestExecutionListener.</code><code class="java keyword">class</code><code class="java plain">,</code></div><div class="line number12 index11 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">TransactionalTestExecutionListener.</code><code class="java keyword">class</code><code class="java plain">,</code></div><div class="line number13 index12 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">DbUnitTestExecutionListener.</code><code class="java keyword">class</code><code class="java plain">})</code></div><div class="line number14 index13 alt1"><code class="java keyword">public</code> <code class="java keyword">class</code> <code class="java plain">ITFindBySearchTermTest {</code></div><div class="line number15 index14 alt2"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><div class="note"> <strong>Additional Reading:</strong><p class="cye-lm-tag"></p>
<ul><li><a href="http://docs.spring.io/spring/docs/4.1.x/spring-framework-reference/htmlsingle/#integration-testing" target="_blank">Spring Framework Reference Documentation: 11.3 Integration Testing</a></li><li><a href="http://docs.spring.io/spring/docs/4.1.x/spring-framework-reference/htmlsingle/#testcontext-tel-config" target="_blank">Spring Framework Reference Documentation: 14.5.2 TestExecutionListener configuration</a></li><li><a href="http://junit.org/junit4/javadoc/latest/org/junit/runner/RunWith.html" target="_blank">The Javadoc of the <em>@RunWith</em> annotation</a></li><li><a href="https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/context/junit4/SpringJUnit4ClassRunner.html" target="_blank">The Javadoc of the <em>SpringJUnit4ClassRunner</em> class</a></li><li><a href="https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/context/ContextConfiguration.html" target="_blank">The Javadoc of the <em>@ContextConfiguration</em> annotation</a></li><li><a href="https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/context/TestExecutionListeners.html" target="_blank">The Javadoc of the <em>@TestExecutionListeners</em> annotation</a></li><li><a href="http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/context/TestExecutionListener.html" target="_blank">The Javadoc of the <em>TestExecutionListener</em> interface</a></li><li><a href="http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/context/support/DependencyInjectionTestExecutionListener.html" target="_blank">The Javadoc of the <em>DependencyInjectionTestExecutionListener</em> class</a></li><li><a href="http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/context/transaction/TransactionalTestExecutionListener.html" target="_blank">The Javadoc of the <em>TransactionalTestExecutionListener</em> class</a></li></ul></div><p class="cye-lm-tag">After we have configured our integration test class, we can start writing integration tests for our Spring Data JPA repository.</p>
<h2>Writing Integration Tests for Our Repository</h2><p class="cye-lm-tag">We can write integration tests for our repository by following these steps:</p>
<p class="cye-lm-tag"><strong>First</strong>, we have to inject the tested repository into our test class. Because we are writing integration tests for the <em>TodoRepository</em> interface, we have to inject it into our test class. The source code of our test class looks as follows:</p>
<div><div id="highlighter_505119" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2 highlighted">17</div><div class="line number18 index17 alt1 highlighted">18</div><div class="line number19 index18 alt2">19</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">import</code> <code class="java plain">com.github.springtestdbunit.DbUnitTestExecutionListener;</code></div><div class="line number2 index1 alt1"><code class="java keyword">import</code> <code class="java plain">org.junit.runner.RunWith;</code></div><div class="line number3 index2 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.beans.factory.annotation.Autowired;</code></div><div class="line number4 index3 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.test.context.ContextConfiguration;</code></div><div class="line number5 index4 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.test.context.TestExecutionListeners;</code></div><div class="line number6 index5 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</code></div><div class="line number7 index6 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.test.context.support.DependencyInjectionTestExecutionListener;</code></div><div class="line number8 index7 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.test.context.transaction.TransactionalTestExecutionListener;</code></div><div class="line number9 index8 alt2">&nbsp;</div><div class="line number10 index9 alt1"><code class="java color1">@RunWith</code><code class="java plain">(SpringJUnit4ClassRunner.</code><code class="java keyword">class</code><code class="java plain">)</code></div><div class="line number11 index10 alt2"><code class="java color1">@ContextConfiguration</code><code class="java plain">(classes = {PersistenceContext.</code><code class="java keyword">class</code><code class="java plain">})</code></div><div class="line number12 index11 alt1"><code class="java color1">@TestExecutionListeners</code><code class="java plain">({DependencyInjectionTestExecutionListener.</code><code class="java keyword">class</code><code class="java plain">,</code></div><div class="line number13 index12 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">TransactionalTestExecutionListener.</code><code class="java keyword">class</code><code class="java plain">,</code></div><div class="line number14 index13 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">DbUnitTestExecutionListener.</code><code class="java keyword">class</code><code class="java plain">})</code></div><div class="line number15 index14 alt2"><code class="java keyword">public</code> <code class="java keyword">class</code> <code class="java plain">ITFindBySearchTermTest {</code></div><div class="line number16 index15 alt1">&nbsp;</div><div class="line number17 index16 alt2 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Autowired</code></div><div class="line number18 index17 alt1 highlighted"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java plain">TodoRepository repository;</code></div><div class="line number19 index18 alt2"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><p class="cye-lm-tag"><strong>Second</strong>, we have to create the DbUnit dataset that initializes our database into a known state before our test cases are invoked. We will use the flat XML dataset format because it is less verbose than the original DbUnit dataset format. This means that we can create our dataset by following these rules:</p>
<ul><li>Each XML element contains the information of a single table row.</li><li>The name of the XML element identifies the name of the database table in which its information is inserted.</li><li>The attributes of the XML element specify the values that are inserted into the columns of the database table.</li></ul><p class="cye-lm-tag"></p>
<p class="cye-lm-tag">The tested repository (<em>TodoRepository</em>) queries information from the <em>todos</em> table that has the following columns: <em>id</em>, <em>created_by_user</em>, <em>creation_time</em>, <em>description</em>, <em>modified_by_user</em>, <em>modification_time</em>, <em>title</em>, and <em>version</em>.</p>
<p class="cye-lm-tag">Because we are writing integration tests for a method that returns a list of <em>Todo</em> objects, we want to insert two rows to the <em>todos</em> table. We can do this by creating a DbUnit dataset file (<em>todo-entries.xml</em>) that looks as follows:</p>
<div><div id="highlighter_390530" class="syntaxhighlighter  xml"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="xml plain">&lt;</code><code class="xml keyword">dataset</code><code class="xml plain">&gt;</code></div><div class="line number2 index1 alt1"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">todos</code> <code class="xml color1">id</code><code class="xml plain">=</code><code class="xml string">"1"</code></div><div class="line number3 index2 alt2"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml color1">created_by_user</code><code class="xml plain">=</code><code class="xml string">"createdByUser"</code></div><div class="line number4 index3 alt1"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml color1">creation_time</code><code class="xml plain">=</code><code class="xml string">"2014-12-24 11:13:28"</code></div><div class="line number5 index4 alt2"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml color1">description</code><code class="xml plain">=</code><code class="xml string">"description"</code></div><div class="line number6 index5 alt1"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml color1">modified_by_user</code><code class="xml plain">=</code><code class="xml string">"modifiedByUser"</code></div><div class="line number7 index6 alt2"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml color1">modification_time</code><code class="xml plain">=</code><code class="xml string">"2014-12-25 11:13:28"</code></div><div class="line number8 index7 alt1"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml color1">title</code><code class="xml plain">=</code><code class="xml string">"title"</code></div><div class="line number9 index8 alt2"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml color1">version</code><code class="xml plain">=</code><code class="xml string">"0"</code><code class="xml plain">/&gt;</code></div><div class="line number10 index9 alt1"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">todos</code> <code class="xml color1">id</code><code class="xml plain">=</code><code class="xml string">"2"</code></div><div class="line number11 index10 alt2"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml color1">created_by_user</code><code class="xml plain">=</code><code class="xml string">"createdByUser"</code></div><div class="line number12 index11 alt1"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml color1">creation_time</code><code class="xml plain">=</code><code class="xml string">"2014-12-24 11:13:28"</code></div><div class="line number13 index12 alt2"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml color1">description</code><code class="xml plain">=</code><code class="xml string">"tiscription"</code></div><div class="line number14 index13 alt1"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml color1">modified_by_user</code><code class="xml plain">=</code><code class="xml string">"modifiedByUser"</code></div><div class="line number15 index14 alt2"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml color1">modification_time</code><code class="xml plain">=</code><code class="xml string">"2014-12-25 11:13:28"</code></div><div class="line number16 index15 alt1"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml color1">title</code><code class="xml plain">=</code><code class="xml string">"Foo bar"</code></div><div class="line number17 index16 alt2"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml color1">version</code><code class="xml plain">=</code><code class="xml string">"0"</code><code class="xml plain">/&gt;</code></div><div class="line number18 index17 alt1"><code class="xml plain">&lt;/</code><code class="xml keyword">dataset</code><code class="xml plain">&gt;</code></div></div></td></tr></tbody></table></div></div><div class="note"> <strong>Additional reading:</strong><p class="cye-lm-tag"></p>
<p class="cye-lm-tag">DbUnit documentation provides more information about the <a href="http://dbunit.sourceforge.net/components.html#dataset" target="_blank">different DbUnit dataset formats</a>.</p>
</div><p class="cye-lm-tag"><strong>Third</strong>, we can write integration tests for the <em>findBySearchTerm()</em> method of the <em>TodoRepository</em> interface. Let’s write integration tests which ensure that the <em>findBySearchTerm()</em> method is working correctly when the title of one todo entry contains the given search term. We can write these integration tests by following these steps:</p>
<ol><li>Configure the used dataset file by annotating the integration test class with the <em>@DatabaseSetup</em> annotation.</li><li>Write an integration test which ensures that the <em>findBySearchTerm()</em> method returns one todo entry when the search term “iTl” is passed as a method parameter.</li><li>Write an integration test which ensures that the <em>findBySearchTerm()</em> method returns the “first” todo entry when the search term “iTl” is passed as a method parameter.</li></ol><p class="cye-lm-tag">The source code of the <em>ITFindBySearchTerm</em> class looks as follows:</p>
<div><div id="highlighter_276211" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div class="line number23 index22 alt2">23</div><div class="line number24 index23 alt1">24</div><div class="line number25 index24 alt2">25</div><div class="line number26 index25 alt1">26</div><div class="line number27 index26 alt2">27</div><div class="line number28 index27 alt1">28</div><div class="line number29 index28 alt2">29</div><div class="line number30 index29 alt1">30</div><div class="line number31 index30 alt2">31</div><div class="line number32 index31 alt1">32</div><div class="line number33 index32 alt2">33</div><div class="line number34 index33 alt1">34</div><div class="line number35 index34 alt2">35</div><div class="line number36 index35 alt1">36</div><div class="line number37 index36 alt2">37</div><div class="line number38 index37 alt1">38</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">import</code> <code class="java plain">com.github.springtestdbunit.DbUnitTestExecutionListener;</code></div><div class="line number2 index1 alt1"><code class="java keyword">import</code> <code class="java plain">com.github.springtestdbunit.annotation.DatabaseSetup;</code></div><div class="line number3 index2 alt2"><code class="java keyword">import</code> <code class="java plain">org.junit.Test;</code></div><div class="line number4 index3 alt1"><code class="java keyword">import</code> <code class="java plain">org.junit.runner.RunWith;</code></div><div class="line number5 index4 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.beans.factory.annotation.Autowired;</code></div><div class="line number6 index5 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.test.context.ContextConfiguration;</code></div><div class="line number7 index6 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.test.context.TestExecutionListeners;</code></div><div class="line number8 index7 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</code></div><div class="line number9 index8 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.test.context.support.DependencyInjectionTestExecutionListener;</code></div><div class="line number10 index9 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.test.context.transaction.TransactionalTestExecutionListener;</code></div><div class="line number11 index10 alt2">&nbsp;</div><div class="line number12 index11 alt1"><code class="java keyword">import</code> <code class="java keyword">static</code> <code class="java plain">org.assertj.core.api.Assertions.assertThat;</code></div><div class="line number13 index12 alt2">&nbsp;</div><div class="line number14 index13 alt1"><code class="java color1">@RunWith</code><code class="java plain">(SpringJUnit4ClassRunner.</code><code class="java keyword">class</code><code class="java plain">)</code></div><div class="line number15 index14 alt2"><code class="java color1">@ContextConfiguration</code><code class="java plain">(classes = {PersistenceContext.</code><code class="java keyword">class</code><code class="java plain">})</code></div><div class="line number16 index15 alt1"><code class="java color1">@TestExecutionListeners</code><code class="java plain">({DependencyInjectionTestExecutionListener.</code><code class="java keyword">class</code><code class="java plain">,</code></div><div class="line number17 index16 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">TransactionalTestExecutionListener.</code><code class="java keyword">class</code><code class="java plain">,</code></div><div class="line number18 index17 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">DbUnitTestExecutionListener.</code><code class="java keyword">class</code><code class="java plain">})</code></div><div class="line number19 index18 alt2"><code class="java color1">@DatabaseSetup</code><code class="java plain">(</code><code class="java string">"todo-entries.xml"</code><code class="java plain">)</code></div><div class="line number20 index19 alt1"><code class="java keyword">public</code> <code class="java keyword">class</code> <code class="java plain">ITFindBySearchTermTest {</code></div><div class="line number21 index20 alt2">&nbsp;</div><div class="line number22 index21 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Autowired</code></div><div class="line number23 index22 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java plain">TodoRepository repository;</code></div><div class="line number24 index23 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number25 index24 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Test</code></div><div class="line number26 index25 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java keyword">void</code> <code class="java plain">findBySearchTerm_TitleOfFirstTodoEntryContainsGivenSearchTerm_ShouldReturnOneTodoEntry() {</code></div><div class="line number27 index26 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">List&lt;Todo&gt; searchResults = repository.findBySearchTerm(</code><code class="java string">"iTl"</code><code class="java plain">);</code></div><div class="line number28 index27 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">assertThat(searchResults).hasSize(</code><code class="java value">1</code><code class="java plain">);</code></div><div class="line number29 index28 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number30 index29 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number31 index30 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Test</code></div><div class="line number32 index31 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java keyword">void</code> <code class="java plain">findBySearchTerm_TitleOfFirstTodoEntryContainsGivenSearchTerm_ShouldReturnFirstTodoEntry() {</code></div><div class="line number33 index32 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">List&lt;Todo&gt; searchResults = repository.findBySearchTerm(</code><code class="java string">"iTl"</code><code class="java plain">);</code></div><div class="line number34 index33 alt1">&nbsp;</div><div class="line number35 index34 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">Todo found = searchResults.get(</code><code class="java value">0</code><code class="java plain">);</code></div><div class="line number36 index35 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">assertThat(found.getId()).isEqualTo(1L);</code></div><div class="line number37 index36 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}&nbsp;&nbsp; </code></div><div class="line number38 index37 alt1"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><div class="note"> When you use the <em>@DatabaseSetup</em> annotation, you have to follow these rules:<p class="cye-lm-tag"></p>
<ul><li>If all test methods of your test class use the same dataset, you can configure it by annotating your test class with <em>@DatabaseSetup</em> annotation. However, if all test methods of your test class do not use the same dataset, you have to annotate your test methods with the <em>@DatabaseSetup</em> annotation.</li><li>If the dataset file is in the same package than the integration test class, you can configure it by using the name of the dataset file. On the other hand, if the dataset file is not in same the package than the test class, you have to configure the full path of the dataset file. For example, if your dataset file (<em>todo-entries.xml</em>) is in the package <em>foo.bar</em>, you can configure its full path by using the string: “/foo/bar/todo-entries.xml”.</li></ul><p class="cye-lm-tag"><strong>Additional Reading:</strong></p>
<ul><li><a href="/writing-tests-for-data-access-code/">Writing Tests for Data Access Code</a> is a five-part tutorial that describes how you can write tests for your data access code, and ensure that your tests are clean and easy to maintain.</li><li><a href="https://www.petrikainulainen.net/programming/spring-framework/spring-from-the-trenches-using-null-values-in-dbunit-datasets/">Spring From the Trenches: Using Null Values in DbUnit Datasets</a> describes why you should use null values in your DbUnit datasets and explains how you can use them.</li><li><a href="https://www.petrikainulainen.net/programming/spring-framework/spring-from-the-trenches-resetting-auto-increment-columns-before-each-test-method/">Spring From the Trenches: Resetting Auto Increment Columns Before Each Test Method</a> describes why you should reset the auto increment columns before each test method and explains how you can do it.</li></ul></div><p class="cye-lm-tag">Let’s move on and summarize what we learned from this blog post.</p>
<h2>Summary</h2><p class="cye-lm-tag">This blog post has taught us four things:</p>
<ul><li>We can integrate DbUnit with the Spring Test framework by using Spring Test DbUnit.</li><li>We can integrate Spring Test DbUnit with the Spring Test framework by using the <em>DbUnitTestExecutionListener</em> class.</li><li>We should use the flat XML databaset format because it is less verbose than the original DbUnit dataset format.</li><li>We can use the <em>@DatabaseSetup</em> annotation on the class level or on the method level.</li></ul><p class="cye-lm-tag"><strong>P.S.</strong> You can get the example applications of this blog post from Github (<a href="https://github.com/pkainulainen/spring-data-jpa-examples/tree/master/query-methods" target="_blank">query methods</a>, <a href="https://github.com/pkainulainen/spring-data-jpa-examples/tree/master/criteria-api" target="_blank">JPA Criteria API</a>, <a href="https://github.com/pkainulainen/spring-data-jpa-examples/tree/master/querydsl" target="_blank">Querydsl</a>).</p>
<div class="note">If you want to learn how to use Spring Data JPA, you should read my <a href="/spring-data-jpa-tutorial/">Spring Data JPA tutorial</a>.</div> <span id="tve_leads_end_content" style="display: block; visibility: hidden; border: 1px solid transparent;" class="cye-lm-tag"></span>
</div>

</div>




</div>
</div>
</div>
</div>
</div>
</div><p style="line-height: 24px;" data-unit="px" class="tve_p_center cye-lm-tag"><span class="tve_custom_font_size cye-lm-tag" style="font-size: 16px;">I will never rent, sell, or share your email address.<br></span></p>

</div></div></div></div></div></div></div>
<section id="comments"><div class="comments_intro"><span class="num_comments cye-lm-tag">80</span> comments… <a href="#commentform" rel="nofollow">add one</a></div><ul class="comment_list"><li class="comment even thread-even depth-1" id="comment-267707"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Boris</span>  <span class="comment_date cye-lm-tag">July 23, 2013, 15:31</span></div><div class="comment_text" id="comment-body-267707"><p class="cye-lm-tag">I got java.lang.NullPointerException when I attemt to run repository method ,<br> object who insance of interface is null .<br> How solve it ?</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-267718"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">July 23, 2013, 17:55</span></div><div class="comment_text" id="comment-body-267718"><p class="cye-lm-tag">Hi Boris,</p>
<p class="cye-lm-tag">You asked the same question in another blog post. I added my <a href="http://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-part-one-configuration/#comment-267717" rel="nofollow">answer as a comment to that blog post</a>.</p>
</div> </div></li></ul></li><li class="comment even thread-odd thread-alt depth-1" id="comment-271587"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Julio Aguilar</span>  <span class="comment_date cye-lm-tag">August 30, 2013, 19:18</span></div><div class="comment_text" id="comment-body-271587"><p class="cye-lm-tag">This tutorial helped me and my team implement unit tests successfully. There are minor things missing in the post (like bonecp inclusion in the pom.xml and the full contents of the Spring context) but the github project helped to fill those.</p>
<p class="cye-lm-tag">Great work and thanks for sharing!</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-271712"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">August 31, 2013, 23:08</span></div><div class="comment_text" id="comment-body-271712"><p class="cye-lm-tag">I am happy to hear that your team found this blog post useful. Also, I left the other dependencies out because I felt that they were out of the scope of this post. However, now that you mentioned this issue, I will update this blog post and add a link to the full <em>pom.xml</em> file. Maybe this will clarify things a bit.</p>
</div> </div></li></ul></li><li class="comment even thread-even depth-1" id="comment-341101"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Nikolay</span>  <span class="comment_date cye-lm-tag">January 20, 2014, 15:39</span></div><div class="comment_text" id="comment-body-341101"><p class="cye-lm-tag">the useful article, thanks!!</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-341231"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">January 20, 2014, 18:01</span></div><div class="comment_text" id="comment-body-341231"><p class="cye-lm-tag">You are welcome. I am happy to hear that this blog post was useful to you.</p>
</div> </div></li></ul></li><li class="comment even thread-odd thread-alt depth-1" id="comment-357513"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Chris</span>  <span class="comment_date cye-lm-tag">February 6, 2014, 02:52</span></div><div class="comment_text" id="comment-body-357513"><p class="cye-lm-tag">Hi Petri</p>
<p class="cye-lm-tag">Im trying to use spring db unit. The versions I have are the ones recommended above in your blog. However Im encountering (could not find dataset.xml) file<br> testController(my.tests.web.TermControllerIntegrationTest)  Time elapsed: 4.245 sec  &lt;&lt;&lt; ERROR!<br> java.lang.IllegalArgumentException: Unable to load dataset from "classpath:/termData.xml" using class com.github.springtestdbunit.dataset.FlatXmlDataSetLoader<br> at org.springframework.util.Assert.notNull(Assert.java:112)</p>
<p class="cye-lm-tag">I have tried many things.<br> Putting the dataset in the same package as the class.<br> in the classpath under resources<br> and trying to reference it with'/' like  classpath:/termData.xml etc with no luck.<br> My unit test works well without db unit.</p>
<p class="cye-lm-tag">@TestExecutionListeners({ DependencyInjectionTestExecutionListener.class,<br> DirtiesContextTestExecutionListener.class,<br> TransactionalTestExecutionListener.class,<br> //TransactionDbUnitTestExecutionListener.class})<br> DbUnitTestExecutionListener.class })</p>
<p class="cye-lm-tag">any help would be very useful.</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-357662"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">February 6, 2014, 10:00</span></div><div class="comment_text" id="comment-body-357662"><p class="cye-lm-tag">Hi Chris,</p>
<p class="cye-lm-tag">If the dataset file is in the same package than your test class, you can reference it by simply using its name (In your case, <em>termsData.xml</em> should work). Also, remember that you have to compile your project every time when you add a new dataset file or modify an existing file (this sucks btw).</p>
</div> </div></li></ul></li><li class="comment even thread-even depth-1" id="comment-364718"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">CJ</span>  <span class="comment_date cye-lm-tag">February 14, 2014, 04:17</span></div><div class="comment_text" id="comment-body-364718"><p class="cye-lm-tag">Can you give me an example to write @Query for Join operation ? Iam struggling with the error called  “unexpected token:” error – @Query(select count(*) from employee emp join employeedetaildata edd on emp.id=edd.employeedataid where emp.rankId = :rankId)</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-367447"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">February 17, 2014, 19:08</span></div><div class="comment_text" id="comment-body-367447"><p class="cye-lm-tag">This page describes <a href="http://www.objectdb.com/java/jpa/query/jpql/from" target="_blank" rel="nofollow">how you can create joins with JPQL</a>. I hope that it answers to your question.</p>
</div> </div></li></ul></li><li class="comment even thread-odd thread-alt depth-1" id="comment-391116"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag"><a href="http://www.patrick-gotthard.de" rel="external nofollow" class="url">Patrick</a></span>  <span class="comment_date cye-lm-tag">March 15, 2014, 00:27</span></div><div class="comment_text" id="comment-body-391116"><p class="cye-lm-tag">Hi Petri,</p>
<p class="cye-lm-tag">thanks for your great Spring Data JPA tutorials. I just started to use DbUnit in one of my private applications but I get this warning every time DbUnit sets up the database via @DatabaseSetup:</p>
<p class="cye-lm-tag">WARN  org.dbunit.dataset.AbstractTableMetaData – Potential problem found: The configured data type factory ‘class org.dbunit.dataset.datatype.DefaultDataTypeFactory’ might cause problems with the current database ‘H2’ (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.</p>
<p class="cye-lm-tag">Relevant test dependencies:<br> org.springframework:spring-test:4.0.2<br> com.github.springtestdbunit:spring-test-dbunit:1.1.0<br> org.dbunit:dbunit:2.4.9<br> com.h2database:h2:1.3.175</p>
<p class="cye-lm-tag">The only difference to your setup is, that I override the DataSource of my default application config in the test config via:</p>
<p class="cye-lm-tag">@Bean<br> public DataSource dataSource() {<br> return new EmbeddedDatabaseBuilder().setType(EmbeddedDatabaseType.H2).build();<br> }</p>
<p class="cye-lm-tag">But that should not be the problem. I am able to suppress the warning via logging configuration but maybe you know another way to solve this “problem” (all test run fine)?</p>
<p class="cye-lm-tag">Best regards,<br> Patrick</p>
<p class="cye-lm-tag">P.S.: Have you already recognized the new Hikari Connection Pool (HikariCP) as alternate to BoneCP? Though I haven’t benchmarked the connection pool myself yet, it definitely feels faster than BoneCP to me and the benchmarks on the HikariCP web page promise an outstanding performance.</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-391144"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">March 15, 2014, 00:58</span></div><div class="comment_text" id="comment-body-391144"><p class="cye-lm-tag">Hi Patrick,</p>
<p class="cye-lm-tag">Thank you for your kind words! It is nice to hear that my tutorials have been useful to you.</p>
<p class="cye-lm-tag">I assume that this line is written to the log because the default DbUnit data type factory doesn’t support vendor specific data types. I am not 100% sure about this but it seems like a reasonable assumption (my assumption is based on <a href="http://dbunit.sourceforge.net/faq.html#typefactory" target="_blank" rel="nofollow">this DbUnit FAQ entry</a>).</p>
<p class="cye-lm-tag">If my assumption is correct, you have to configure DbUnit to use the <a href="http://dbunit.sourceforge.net/apidocs/org/dbunit/ext/h2/H2DataTypeFactory.html" target="_blank" rel="nofollow"><code>H2DataTypeFactory</code></a> instead of the <a href="http://dbunit.sourceforge.net/apidocs/org/dbunit/dataset/datatype/DefaultDataTypeFactory.html" target="_blank" rel="nofollow"><code>DefaultDataTypeFactory</code></a>. When you use Spring Test DBUnit, you can do this adding the <a href="http://springtestdbunit.github.io/spring-test-dbunit/apidocs/com/github/springtestdbunit/bean/DatabaseConfigBean.html" target="_blank" rel="nofollow"><code>DatabaseConfigBean</code></a> (configure the data type factory by calling the <a href="http://springtestdbunit.github.io/spring-test-dbunit/apidocs/com/github/springtestdbunit/bean/DatabaseConfigBean.html#setDatatypeFactory%28org.dbunit.dataset.datatype.IDataTypeFactory%29" target="_blank" rel="nofollow"><code>setDatatypeFactory()</code></a> method) and <a href="http://springtestdbunit.github.io/spring-test-dbunit/apidocs/com/github/springtestdbunit/bean/DatabaseDataSourceConnectionFactoryBean.html" target="_blank" rel="nofollow"><code>DatabaseDataSourceConnectionFactoryBean</code></a> beans to the application context (<a href="http://springtestdbunit.github.io/spring-test-dbunit/" target="_blank" rel="nofollow">more about this here</a>. Search for Custom IDatabaseConnections text).</p>
<p class="cye-lm-tag">I haven’t done this myself because I haven’t been using vendor specific data types but based on the documentation, it should do the trick. By the way, I figured this out after I read <a href="http://stackoverflow.com/a/5913852/313554" target="_blank" rel="nofollow">this answer</a> to a similar Stack Overflow question.</p>
<p class="cye-lm-tag">I haven’t used HikariCP myself but I ran its data source benchmark this week, and HikariCP seems to be a lot faster than BoneCP. I am going to try it in the example applications of my new blog entries. It will be interesting to see if I notice any difference.</p>
</div> </div><ul class="children"><li class="comment even depth-3" id="comment-391153"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag"><a href="http://www.patrick-gotthard.de" rel="external nofollow" class="url">Patrick</a></span>  <span class="comment_date cye-lm-tag">March 15, 2014, 01:08</span></div><div class="comment_text" id="comment-body-391153"><p class="cye-lm-tag">Hi Petri,</p>
<p class="cye-lm-tag">thanks for your quick reply. I solved the warning by using this configuration: <a href="https://gist.github.com/PatrickGotthard/9558923" rel="nofollow">https://gist.github.com/PatrickGotthard/9558923</a></p>
<p class="cye-lm-tag">Regards,<br> Patrick</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-4" id="comment-391155"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">March 15, 2014, 01:14</span></div><div class="comment_text" id="comment-body-391155"><p class="cye-lm-tag">Hi Patrick,</p>
<p class="cye-lm-tag">you are welcome. Your configuration looks simple and I am going to use the same approach in my new blog posts. Thanks for sharing it.</p>
</div> </div><ul class="children"><li class="comment even depth-5" id="comment-391166"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag"><a href="http://www.patrick-gotthard.de" rel="external nofollow" class="url">Patrick</a></span>  <span class="comment_date cye-lm-tag">March 15, 2014, 01:29</span></div><div class="comment_text" id="comment-body-391166"><p class="cye-lm-tag">Hi again,</p>
<p class="cye-lm-tag">are you interested to be notified when I push the project to GitHub? Maybe we could exchange some knowledge based on the projects sources.</p>
</div></div></li><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-5" id="comment-391170"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">March 15, 2014, 01:31</span></div><div class="comment_text" id="comment-body-391170"><p class="cye-lm-tag">Hi,</p>
<p class="cye-lm-tag">sure. Let me know when you do that (push the project to Github). I think it would be a good opportunity to learn something new (for both of us).</p>
</div></div></li><li class="comment even depth-5" id="comment-424526"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag"><a href="http://www.patrick-gotthard.de" rel="external nofollow" class="url">Patrick</a></span>  <span class="comment_date cye-lm-tag">April 2, 2014, 23:35</span></div><div class="comment_text" id="comment-body-424526"><p class="cye-lm-tag">Hi Petri,</p>
<p class="cye-lm-tag">I have pushed my project to GitHub now: <a href="https://github.com/PatrickGotthard/newsreadr-server" rel="nofollow">https://github.com/PatrickGotthard/newsreadr-server</a></p>
<p class="cye-lm-tag">Feel free to look at the sources (especially the integration tests). I would be really happy to get some input from you.</p>
<p class="cye-lm-tag">You would have to check out <a href="https://github.com/PatrickGotthard/newsreadr-bom" rel="nofollow">https://github.com/PatrickGotthard/newsreadr-bom</a> and <a href="https://github.com/PatrickGotthard/newsreadr-shared" rel="nofollow">https://github.com/PatrickGotthard/newsreadr-shared</a> as well to import the project into your IDE (currently there are no public Maven snapshots available but I would configure my Jenkins and Nexus soon).</p>
<p class="cye-lm-tag">Regards,<br> Patrick</p>
</div></div></li><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-5" id="comment-424529"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">April 2, 2014, 23:36</span></div><div class="comment_text" id="comment-body-424529"><p class="cye-lm-tag">Hi Patrick,</p>
<p class="cye-lm-tag">Cool! I will take a look at that project later this week (and give feedback of course).</p>
</div></div></li><li class="comment even depth-5" id="comment-426438"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag"><a href="http://www.patrick-gotthard.de" rel="external nofollow" class="url">Patrick Gotthard</a></span>  <span class="comment_date cye-lm-tag">April 3, 2014, 23:08</span></div><div class="comment_text" id="comment-body-426438"><p class="cye-lm-tag">Update: the transitive dependencies are now public available so that you don’t have to check out the related projects. I’ve also added installation and build instructions to get started.</p>
</div></div></li><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-5" id="comment-429835"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">April 5, 2014, 11:15</span></div><div class="comment_text" id="comment-body-429835"><p class="cye-lm-tag">I just cloned the Github repository and started playing with the code. I will email my thoughts to you when I am finished.</p>
</div></div></li></ul></li></ul></li></ul></li></ul></li><li class="comment even thread-even depth-1" id="comment-394502"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Ameen</span>  <span class="comment_date cye-lm-tag">March 17, 2014, 13:07</span></div><div class="comment_text" id="comment-body-394502"><p class="cye-lm-tag">nice post, would i ask for an example on how to test model data ?<br> I want to test a controller request method that initiate the model data,<br> also is it possible to test thymeleaf templates ?</p>
<p class="cye-lm-tag">Thanks in advance</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-394707"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">March 17, 2014, 15:49</span></div><div class="comment_text" id="comment-body-394707"><p class="cye-lm-tag">You should check out my <a href="/spring-mvc-test-tutorial/" rel="nofollow">Spring MVC Test Tutorial</a>. It explains how you can write both unit and integration tests for your Spring MVC controllers.</p>
<p class="cye-lm-tag">Also, It is possible to test Thymeleaf templates by using the Spring MVC Test framework. I haven’t written anything about this because I haven’t had the chance to use Thymeleaf. However, <a href="http://blog.zenika.com/index.php?post/2013/01/21/using-thymeleaf-with-spring-mvc" target="_blank" rel="nofollow">this blog post</a> has a small description about this, and it seems that writing tests for Thymeleaf templates is pretty simple. All you have to do is to write assertions for the response body.</p>
</div> </div></li></ul></li><li class="comment even thread-odd thread-alt depth-1" id="comment-411637"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Bodo</span>  <span class="comment_date cye-lm-tag">March 27, 2014, 12:32</span></div><div class="comment_text" id="comment-body-411637"><p class="cye-lm-tag">Very great blog. Good explanation.<br> Thank you!</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-411711"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">March 27, 2014, 13:37</span></div><div class="comment_text" id="comment-body-411711"><p class="cye-lm-tag">You are welcome. I am happy to hear that this blog post was useful to you.</p>
</div> </div></li></ul></li><li class="comment even thread-even depth-1" id="comment-442318"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Happy</span>  <span class="comment_date cye-lm-tag">April 11, 2014, 05:04</span></div><div class="comment_text" id="comment-body-442318"><p class="cye-lm-tag">Nice post. Can I ask : How can I write integration test cases (testing from request to response) on my spring mvc app which uses spring data jpa – without changing the state of the oracle database ? Can I somehow fetch the required tables and their data into an in memory database for testing purposes ?<br> I have never used it but DBUnit seems less configurable for complex data sets and I don’t want to write xml files for data sets.  AND it doesn’t create in memory HSQLDB tables either. What other options do I have ?</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-442870"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">April 11, 2014, 09:48</span></div><div class="comment_text" id="comment-body-442870"><p class="cye-lm-tag">The example application of this blog has two profiles: <em>dev</em> and <em>integration-test</em>. Both of these profiles use H2 in-memory database but in a real life scenario, only the <em>integration-test</em> profile would be using it (the other profiles would use a “real” database).</p>
<p class="cye-lm-tag">I have configured Hibernate to create the database tables by setting the value of the <code>hibernate.hbm2ddl.auto</code> property to <code>create-drop</code>.</p>
<p class="cye-lm-tag">If you take a look at the <a href="https://github.com/pkainulainen/spring-data-jpa-examples/blob/master/integration-testing/profiles/integration-test/config.properties" target="_blank" rel="nofollow"><em>config.properties</em></a> file used when the <em>integration-test</em> Maven profile is activated, you will find the following line from it:</p>
<pre><code>
hibernate.hbm2ddl.auto=create-drop
</code>
</pre><p class="cye-lm-tag">This line ensures that the Hibernate creates the database for my integration tests. After the database has been created, I insert the test data by using DbUnit. All example applications of my <a href="/spring-mvc-test-tutorial/" rel="nofollow">Spring MVC Test tutorial</a> use the same approach.</p>
<p class="cye-lm-tag">I agree that the DbUnit can be a tricky beast to configure and large data sets are pain in the ass (<a href="http://dbunit.sourceforge.net/bestpractices.html#smalldatasets" target="_blank" rel="nofollow">that is why they should be avoided</a>). However, I haven’t been able to find any alternatives to it. If you happen to find one, let me know!</p>
</div> </div></li></ul></li><li class="comment even thread-odd thread-alt depth-1" id="comment-480892"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag"><a href="http://rashidi.zin.my" rel="external nofollow" class="url">Rashidi Zin</a></span>  <span class="comment_date cye-lm-tag">April 19, 2014, 13:52</span></div><div class="comment_text" id="comment-body-480892"><p class="cye-lm-tag">Hello,</p>
<p class="cye-lm-tag">I tried following the tutorial. Unfortunately I hit into an error “Caused by: org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type”.</p>
<p class="cye-lm-tag">My implementation can be found at <a href="https://gist.github.com/rashidi/34f7f0dc70da92de1a1b" rel="nofollow">https://gist.github.com/rashidi/34f7f0dc70da92de1a1b</a>. I am using gradle instead of maven.</p>
<p class="cye-lm-tag">Also, I placed the test class inside src/test instead of src/main. I tried moving it to src/main but it still failed with the same error.</p>
<p class="cye-lm-tag">Thanks in advanced for your help! :D</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-484924"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">April 20, 2014, 10:41</span></div><div class="comment_text" id="comment-body-484924"><p class="cye-lm-tag">Hi,</p>
<p class="cye-lm-tag">it seems that you forgot to configure Spring Data JPA, and that is why the Spring container cannot find the repository bean (and throws an exception). You can fix this by annotating your configuration class with the <code>@EnableJpaRepositories</code> annotation (remember to set the value of its <code>basePackages</code> attribute).</p>
<p class="cye-lm-tag">By the way, if you want to use annotation driven transaction management, you have to annotate your configuration class with the <code>@EnableTransactionManagement</code> as well.</p>
<p class="cye-lm-tag">I hope that this answered to your question.</p>
</div> </div></li></ul></li><li class="comment even thread-even depth-1" id="comment-708145"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Basu</span>  <span class="comment_date cye-lm-tag">June 24, 2014, 08:16</span></div><div class="comment_text" id="comment-body-708145"><p class="cye-lm-tag">Thanks for the excellent posts on spring jpa. Helped me learn a lot about them.</p>
<p class="cye-lm-tag">After going through your other Spring JPA Tutorials, I successfully implemented it in a Sprin MVC application. Everything works fine.</p>
<p class="cye-lm-tag">However, now I’m trying to learn to write integration test cases based on the above tutorial. When I run the test, I get the exception ” Injection of autowired dependencies failed;” for the Autowired Repository.</p>
<p class="cye-lm-tag">What could possibly be wrong here when the application is successfully running when tested from the front-end.</p>
<p class="cye-lm-tag">Thanks a lot in advance.</p>
<p class="cye-lm-tag">PS: I use XML based configuration. and I’ve included the below for the jpa repositories in the XML Configuration.</p>
<p class="cye-lm-tag">Regards,<br> Basu</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-708238"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">June 24, 2014, 10:09</span></div><div class="comment_text" id="comment-body-708238"><p class="cye-lm-tag">Hi,</p>
<p class="cye-lm-tag">It seems that Wordpress ate your XML configuration. Anyway, typically the root cause of your problem is that the Spring container couldn’t either create the repository OR it just didn’t find it (check the stacktrace for more details).</p>
<p class="cye-lm-tag">The first case often happens when there is a problem in the configuration, and the second case happens the repository base package is incorrect.</p>
<p class="cye-lm-tag">It would be helpful to see your integration test, repository interface, and the application context configuration file. Maybe you could add these files to <a href="http://pastebin.com/" target="_blank" rel="nofollow">pastebin</a>? Also, the full stacktrace would be really helpful because you can find the root cause of the problem by reading it.</p>
</div> </div></li></ul></li><li class="comment even thread-odd thread-alt depth-1" id="comment-708754"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">sanjeev</span>  <span class="comment_date cye-lm-tag">June 24, 2014, 20:41</span></div><div class="comment_text" id="comment-body-708754"><p class="cye-lm-tag">Hello Perti,</p>
<p class="cye-lm-tag">I am following your series and using JavaConfig approach.<br> I am getting below error. Could you please give some hint why this is happening.</p>
<p class="cye-lm-tag">Many thanks<br> Sanjeev.</p>
<p class="cye-lm-tag">Caused by: java.lang.NoClassDefFoundError: Could not initialize class org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor<br> at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)<br> at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:57)<br> at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)<br> at java.lang.reflect.Constructor.newInstance(Constructor.java:526)<br> at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:148)<br> at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:89)<br> at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateBean(AbstractAutowireCapableBeanFactory.java:1069)<br> … 45 more</p>
</div> </div><ul class="children"><li class="comment odd alt depth-2" id="comment-708763"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">sanjeev</span>  <span class="comment_date cye-lm-tag">June 24, 2014, 20:59</span></div><div class="comment_text" id="comment-body-708763"><p class="cye-lm-tag">Thanks,<br> The error is gone, After I removed the following annotations from the PersistenceContext class.</p>
<pre><code>
@Configuration
//@ComponentScan
//@EnableJpaRepositories 
//@EnableTransactionManagement
//@EnableWebMvc 
//@EnableEnableAutoConfiguration
//@ImportResource("classpath:applicationContext.xml")
@PropertySource(value = { "classpath:application.properties" })
class PersistenceContext { ...}
</code>
</pre></div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-3" id="comment-708821"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">June 24, 2014, 22:38</span></div><div class="comment_text" id="comment-body-708821"><p class="cye-lm-tag">This might be a class loading issue. I noticed that your <code>PersistenceContext</code> class was annotated with the <code>@EnableAutoConfiguration</code> annotation. I assume that you are using Spring Boot. Right?</p>
<p class="cye-lm-tag">If this is the case, you should ensure that you don’t have older Spring versions in your classpath. Check out <a href="http://docs.spring.io/spring-boot/docs/1.1.x/reference/htmlsingle/#getting-started-maven-installation" target="_blank" rel="nofollow">section 9.1.1 Maven Installation of the Spring Boot reference manual</a> for more details about this.</p>
</div> </div></li></ul></li></ul></li><li class="comment odd alt thread-even depth-1" id="comment-747542"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Sumit</span>  <span class="comment_date cye-lm-tag">August 1, 2014, 15:04</span></div><div class="comment_text" id="comment-body-747542"><p class="cye-lm-tag">Hi Petri,<br> When Spring data JPA  check for correct database url.<br> I need to catch the same in exception if database connectivity fails.</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-751265"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri Kainulainen</span>  <span class="comment_date cye-lm-tag">August 4, 2014, 21:10</span></div><div class="comment_text" id="comment-body-751265"><p class="cye-lm-tag">Hi Sumit,</p>
<ul><li>If your database url doesn’t follow the correct syntax, <code>SQLException</code> is thrown when your application is started. For example, you might see an error message like this your log file: <code>Caused by: java.sql.SQLException: No suitable driver found for jbc:mysql://localhost:3306/socialtwitter</code></li><li>If your database url follows the correct syntax, but your application cannot open a database connection, it throws an exception when it tries to open a database connection.</li></ul><p class="cye-lm-tag">What kind of an error handler you want to implement?</p>
<p class="cye-lm-tag">If you want to just redirect the user to an error page when your application cannot open a database connection, you should take a look at <a href="http://docs.spring.io/spring/docs/4.0.x/javadoc-api/org/springframework/web/servlet/handler/SimpleMappingExceptionResolver.html" target="_blank" rel="nofollow">the Javadoc of the <code>SimpleMappingExceptionResolver</code> class</a>.</p>
<p class="cye-lm-tag">If you want to learn how you can handle exceptions with Spring MVC, you should read a blog post titled: <a href="http://spring.io/blog/2013/11/01/exception-handling-in-spring-mvc" target="_blank" rel="nofollow">Exception Handling in Spring MVC</a>.</p>
</div> </div></li></ul></li><li class="comment odd alt thread-odd thread-alt depth-1" id="comment-769783"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">william</span>  <span class="comment_date cye-lm-tag">August 18, 2014, 05:00</span></div><div class="comment_text" id="comment-body-769783"><p class="cye-lm-tag">¿why I can not use  ?<br> Please respond to my email</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-773731"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">August 20, 2014, 20:21</span></div><div class="comment_text" id="comment-body-773731"><p class="cye-lm-tag">I send an email to you.</p>
</div> </div></li></ul></li><li class="comment odd alt thread-even depth-1" id="comment-781363"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Paul Statham</span>  <span class="comment_date cye-lm-tag">August 26, 2014, 13:33</span></div><div class="comment_text" id="comment-body-781363"><p class="cye-lm-tag">Hi Petri,</p>
<p class="cye-lm-tag">I have a question for you regarding development process. I have been reading through a number of your very useful posts. My process so far (using TDD) is for example to develop Controller test A (using a mock service as you have done), have it fail, flesh out the controller method A have that pass.</p>
<p class="cye-lm-tag">Then move on to writing service test A (using a mock repository), have it fail, then flesh out the service method A and have that pass.</p>
<p class="cye-lm-tag">Then go back through the same process with test B, test C etc.</p>
<p class="cye-lm-tag">Once the unit tests have a good coverage for the Controller and Service layers, I can then move on to writing integration tests for the Repository layer as you have done here. Is this similar to the process you follow?</p>
<p class="cye-lm-tag">Thanks,<br> Paul</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-781597"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">August 26, 2014, 18:21</span></div><div class="comment_text" id="comment-body-781597"><p class="cye-lm-tag">Hi Paul,</p>
<p class="cye-lm-tag">I have actually written <a href="https://www.petrikainulainen.net/programming/unit-testing/from-top-to-bottom-tdd-for-web-applications/" rel="nofollow">a blog post</a> that describes the process which I am using the moment. But I will save you from reading it by telling that I use the same process than you do. Also, after I have finished writing integration tests for my repositories, I write integration tests for my controllers (I guess you can call these end-to-end tests as well).</p>
</div> </div></li></ul></li><li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1101310"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Paul Statham</span>  <span class="comment_date cye-lm-tag">January 20, 2015, 13:10</span></div><div class="comment_text" id="comment-body-1101310"><p class="cye-lm-tag">Hi Petri,</p>
<p class="cye-lm-tag">I finally got round to trying this out and I am having some problems with the database setup not working. Instead of typing this all out again I have made a stack overflow post here</p>
<p class="cye-lm-tag"><a href="http://stackoverflow.com/questions/28043618/integration-testing-spring-repository-layer-with-dbunit" rel="nofollow">http://stackoverflow.com/questions/28043618/integration-testing-spring-repository-layer-with-dbunit</a></p>
<p class="cye-lm-tag">If you have some time would you be able to take a look and see if you can spot where I’m going wrong?</p>
<p class="cye-lm-tag">Thanks,<br> Paul</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-1101470"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">January 20, 2015, 17:06</span></div><div class="comment_text" id="comment-body-1101470"><p class="cye-lm-tag">Hi Paul,</p>
<p class="cye-lm-tag">I left a <a href="http://stackoverflow.com/questions/28043618/integration-testing-spring-repository-layer-with-dbunit#comment44479270_28043618" target="_blank" rel="nofollow">comment to your StackOverflow question</a> and asked a few additional questions that will help me to write a better answer for you.</p>
</div> </div><ul class="children"><li class="comment odd alt depth-3" id="comment-1101510"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Paul Statham</span>  <span class="comment_date cye-lm-tag">January 20, 2015, 18:00</span></div><div class="comment_text" id="comment-body-1101510"><p class="cye-lm-tag">Thanks, I’ve also replied with some progress. I now have tables, but no data, so the second test still fails as it doesn’t return the expected result</p>
</div> </div></li><li class="comment even depth-3" id="comment-1102729"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Paul Statham</span>  <span class="comment_date cye-lm-tag">January 21, 2015, 17:01</span></div><div class="comment_text" id="comment-body-1102729"><p class="cye-lm-tag">It’s perhaps something to do with the TestExecutionListener, I have this message in my log. Any ideas?</p>
<p class="cye-lm-tag">14:47:05,670  INFO TestContextManager:242 – Could not instantiate TestExecutionListener [com.github.springtestdbunit.DbUnitTestExecutionListener]. Specify custom listener classes or make the default listener classes (and their required dependencies) available. Offending class: [org/dbunit/dataset/IDataSet]</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-4" id="comment-1102760"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">January 21, 2015, 17:40</span></div><div class="comment_text" id="comment-body-1102760"><p class="cye-lm-tag">I will take a look at this later today (I have to work for few hours), but I think that you have found the smoking gun. Which Spring version are you using?</p>
</div> </div><ul class="children"><li class="comment even depth-5" id="comment-1102762"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Paul Statham</span>  <span class="comment_date cye-lm-tag">January 21, 2015, 17:44</span></div><div class="comment_text" id="comment-body-1102762"><p class="cye-lm-tag">Thanks, I’m using 4.0.6</p>
</div></div></li><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-5" id="comment-1102974"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">January 21, 2015, 22:47</span></div><div class="comment_text" id="comment-body-1102974"><p class="cye-lm-tag">Unfortunately I could not reproduce your problem :( Are you using the latest versions of Spring Test DbUnit (1.1.0) and DbUnit (2.5.0)?</p>
<p class="cye-lm-tag">I assume that you are using the latest versions because Spring Framework 4.0 is not compatible with Spring Test DbUnit 1.0.0, and if you try to use it, your tests fail because an exception is thrown.</p>
<p class="cye-lm-tag">You could try to take a look at this <a href="https://github.com/pkainulainen/spring-from-the-trenches/tree/master/spring-test-dbunit-tips" target="_blank" rel="nofollow">example application</a> and compare its configuration with your configuration. Note that the XML configuration is not working at the moment. I will try to fix it tomorrow.</p>
</div></div></li><li class="comment even depth-5" id="comment-1103455"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Paul Statham</span>  <span class="comment_date cye-lm-tag">January 22, 2015, 11:13</span></div><div class="comment_text" id="comment-body-1103455"><p class="cye-lm-tag">Gah! That was it, I was missing the DBUnit dependency! Silly mistake! Thanks for your time Petri!</p>
</div></div></li><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-5" id="comment-1103932"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">January 22, 2015, 20:27</span></div><div class="comment_text" id="comment-body-1103932"><p class="cye-lm-tag">Great! It is good to hear that you were able to solve your problem. If you want to find out what kind of tests I write for my data access code, you should read my <a href="/writing-tests-for-data-access-code/" rel="nofollow">Writing Tests for Data Access Code</a> tutorial.</p>
</div></div></li></ul></li></ul></li></ul></li></ul></li><li class="comment even thread-even depth-1" id="comment-1163126"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">arahansa</span>  <span class="comment_date cye-lm-tag">March 24, 2015, 04:37</span></div><div class="comment_text" id="comment-body-1163126"><p class="cye-lm-tag">Thanks, Petri.<br> These days I’m in JPA&amp;TDD develop study. Your post is always helpful.<br> ^0^</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-1163799"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">March 24, 2015, 17:14</span></div><div class="comment_text" id="comment-body-1163799"><p class="cye-lm-tag">You are welcome. I am happy hear that this blog post was helpful to you. You might also want to read my blog post titled: <a href="https://www.petrikainulainen.net/programming/unit-testing/from-top-to-bottom-tdd-for-web-applications/" rel="nofollow">From Top to Bottom – TDD for Web Applications</a>.</p>
</div> </div></li></ul></li><li class="comment even thread-odd thread-alt depth-1" id="comment-1178277"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Ivan</span>  <span class="comment_date cye-lm-tag">April 10, 2015, 05:41</span></div><div class="comment_text" id="comment-body-1178277"><p class="cye-lm-tag">Hi Petri, is this tutorial also work for Spring Boot?</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-1178392"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">April 10, 2015, 09:33</span></div><div class="comment_text" id="comment-body-1178392"><p class="cye-lm-tag">Yes, but you have to make minor changes to the configuration (use the <code>@SpringApplicationConfiguration</code> annotation instead of the <code>@ContextConfiguration</code> annotation). The section <a href="http://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#boot-features-testing-spring-boot-applications" target="_blank" rel="nofollow">35.3 Testing Spring Boot Applications</a> of the Spring Boot Reference Manual provides more information about this.</p>
<p class="cye-lm-tag"><strong>P.S.</strong> I haven’t tried writing tests for Spring Boot applications, but I cannot figure out any reasons why this wouldn’t work.</p>
</div> </div><ul class="children"><li class="comment even depth-3" id="comment-1223747"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Ivan</span>  <span class="comment_date cye-lm-tag">June 11, 2015, 06:41</span></div><div class="comment_text" id="comment-body-1223747"><p class="cye-lm-tag">Also, is it possible to see the SQL statement used by dbunit when the database is populated from the XML dataset?</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-4" id="comment-1223774"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">June 11, 2015, 07:28</span></div><div class="comment_text" id="comment-body-1223774"><p class="cye-lm-tag">DbUnit writes the invoked prepared statements to the log file by using the <code>DEBUG</code> log level. If you need to see the actual SQL statements, you can use <a href="https://github.com/arthurblake/log4jdbc" target="_blank" rel="nofollow">log4jdbc</a>.</p>
</div> </div></li></ul></li></ul></li></ul></li><li class="comment even thread-even depth-1" id="comment-1279774"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">sathish</span>  <span class="comment_date cye-lm-tag">October 2, 2015, 13:31</span></div><div class="comment_text" id="comment-body-1279774"><p class="cye-lm-tag">hi petri,<br> how to mock test the  below interface.<br> ========================</p>
<pre><code>
public abstract java.lang.Iterable save(java.lang.Iterable arg0);
</code>
</pre><p class="cye-lm-tag">========================<br> i want to batch update an repo  , which has 200 records .<br> i wan to batch update it with a loop of 20 records in one save.which is the best approach to flush the repository.</p>
<p class="cye-lm-tag">i am using this below startegy is this ok .<br> ist of repository object -modelListPersist</p>
<pre><code>
int count=0;
  
while ( count&lt; modelListPersist.size() ) {
	model model = (model) modelListPersist.get(count);
	modelRepository.save(model);
	if ( ++count % 20 == 0 ) {
		//flush a batch of updates and release memory:
		modelRepository.flush();            	
	}
}
</code>
</pre></div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-1279894"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">October 2, 2015, 20:42</span></div><div class="comment_text" id="comment-body-1279894"><p class="cye-lm-tag">Hi Sathish,</p>
<p class="cye-lm-tag">Before I can help you to mock the model repository, I have to understand what kind of an test do you want to write. For example:</p>
<ul><li>Do you want to ensure that correct <code>Model</code> objects are saved to the database?</li><li>Do you want to ensure that the changes are flushed after 20 objects have been processed?</li></ul></div> </div></li></ul></li><li class="comment even thread-odd thread-alt depth-1" id="comment-1298471"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">johaness vix</span>  <span class="comment_date cye-lm-tag">October 26, 2015, 12:58</span></div><div class="comment_text" id="comment-body-1298471"><p class="cye-lm-tag">I cannot use it inside my real world project, you are pointing to stuff at Github! please post pure solutions! we cannot use it if it points to GitHub third party stuff!</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-1298703"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">October 26, 2015, 19:27</span></div><div class="comment_text" id="comment-body-1298703"><p class="cye-lm-tag">Do you have a company policy that prevents you from using 3rd party frameworks or libraries hosted on Github? If so, I feel sorry for you.</p>
<p class="cye-lm-tag">However, I will continue using these frameworks and libraries in my examples for two reasons:</p>
<ol><li>I don’t want to write a worse version of an existing library or framework.</li><li>These libraries and frameworks help me to save time. This is extremely valuable because my time is a limited resource.</li></ol><p class="cye-lm-tag"><strong>P.S.</strong> You should read this blog post: <a href="https://blog.frankel.ch/using-a-framework-or-not" target="_blank" rel="nofollow">Using a framework or not?</a></p>
</div> </div></li></ul></li><li class="comment even thread-even depth-1" id="comment-1365277"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Prashant rai</span>  <span class="comment_date cye-lm-tag">February 5, 2016, 10:05</span></div><div class="comment_text" id="comment-body-1365277"><p class="cye-lm-tag">Do you have any video tutorial?</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-1365315"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">February 5, 2016, 11:12</span></div><div class="comment_text" id="comment-body-1365315"><p class="cye-lm-tag">Hi,</p>
<p class="cye-lm-tag">I do have an old video tutorial that explains how you can <a href="https://www.youtube.com/watch?v=TItcLbGTRK0" target="_blank" rel="nofollow">write integration tests for Spring Data JPA repositories</a>. However, it is rather old and some information might be out of date.</p>
</div> </div></li></ul></li><li class="comment even thread-odd thread-alt depth-1" id="comment-1376758"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Steve</span>  <span class="comment_date cye-lm-tag">February 21, 2016, 22:19</span></div><div class="comment_text" id="comment-body-1376758"><p class="cye-lm-tag">Hi Petri,</p>
<p class="cye-lm-tag">Great article, I am trying to use this information to test a sample project I have got from the internet. <a href="https://github.com/netgloo/spring-boot-samples/tree/master/spring-boot-mysql-springdatajpa-hibernate" rel="nofollow">https://github.com/netgloo/spring-boot-samples/tree/master/spring-boot-mysql-springdatajpa-hibernate</a></p>
<p class="cye-lm-tag">I have added a PersistanceContext but alot of the information in there references db.url when the properties file uses “spring.datasource.url” shall I change this in the PersistanceContext?</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-1376765"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">February 21, 2016, 22:37</span></div><div class="comment_text" id="comment-body-1376765"><p class="cye-lm-tag">Hi Steve,</p>
<p class="cye-lm-tag">If you are trying to write integration tests for a repository that is configured by Spring Boot, you need to configure your integration tests by following the advice given in the <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-testing.html#boot-features-testing-spring-boot-applications" target="_blank" rel="nofollow">Spring Boot Reference Documentation</a>.</p>
<p class="cye-lm-tag">Also, you don’t need to add the <code>PersistenceContext</code> class because Spring Boot should configure the persistence layer of your application.</p>
<p class="cye-lm-tag">If you have any additional questions, don’t hesitate to ask them!</p>
</div> </div><ul class="children"><li class="comment even depth-3" id="comment-1376793"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Steve</span>  <span class="comment_date cye-lm-tag">February 21, 2016, 23:30</span></div><div class="comment_text" id="comment-body-1376793"><p class="cye-lm-tag">Thanks for the quick reply.</p>
<p class="cye-lm-tag">I have a user-entries.xml that contains:</p>
<p class="cye-lm-tag">Is this still needed to represent the dummy data?<br> `I have added @ContextConfiguration({“classpath:/user-entries.xml”})`<br> to load it if I do.</p>
<p class="cye-lm-tag">and then tried to run the test, I am getting an exception:<br> java.lang.IllegalStateException: Failed to load ApplicationContext<br> at org.springframework.test.context.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:94)<br> at org.springframework.test.context.DefaultTestContext.getApplicationContext(DefaultTestContext.java:72)<br> at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.injectDependencies(DependencyInjectionTestExecutionListener.java:117)<br> at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.prepareTestInstance(DependencyInjectionTestExecutionListener.java:83)<br> at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:212)<br> …</p>
<p class="cye-lm-tag">Thanks</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-4" id="comment-1377534"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">February 22, 2016, 21:59</span></div><div class="comment_text" id="comment-body-1377534"><p class="cye-lm-tag">Hi Steve,</p>
<p class="cye-lm-tag">If you want to initialize your database into a known state before your test methods are invoked, you need to configure the used dataset by using the <code>@DatabaseSetup</code> annotation. You can use this annotation on class level or method level. Also, remember to follow the rules described in this blog post.</p>
</div> </div></li></ul></li></ul></li></ul></li><li class="comment even thread-even depth-1" id="comment-1527480"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Olgerts</span>  <span class="comment_date cye-lm-tag">March 8, 2017, 01:09</span></div><div class="comment_text" id="comment-body-1527480"><p class="cye-lm-tag">Excellent post, Petri!<br> I’m very happy to read your posts!<br> Quick question, what would be the strategy to test for example 15 Repositories fast? Currently it takes about 8 minutes. Because I have some setup @Before, cleanup @After, and all tests are running one by one. Is it possible to launch them parallel somehow?</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-1527599"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">March 8, 2017, 09:11</span></div><div class="comment_text" id="comment-body-1527599"><p class="cye-lm-tag">Hi,</p>
<p class="cye-lm-tag">The Maven Failsafe plugin <a href="http://maven.apache.org/surefire/maven-failsafe-plugin/examples/fork-options-and-parallel-execution.html" target="_blank" rel="nofollow">has good support for parallel test execution</a>. That being said, eight minutes is a long time. I assume that your test cases require a somewhat complex setup / teardown code?</p>
</div> </div><ul class="children"><li class="comment even depth-3" id="comment-1527779"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Olgerts</span>  <span class="comment_date cye-lm-tag">March 8, 2017, 21:42</span></div><div class="comment_text" id="comment-body-1527779"><p class="cye-lm-tag">Exactly! Some tests are complicated. You need to create client, company, etc., before a test, and clean up everything after each test. Some things in common are in the Test setup. That’s why it’s takes so much time.<br> Any ideas? Any strategy?<br> Thanks in advance!</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-4" id="comment-1528078"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">March 9, 2017, 18:39</span></div><div class="comment_text" id="comment-body-1528078"><p class="cye-lm-tag">How do you initialize your database into a known state? The reason why I ask this is that your setup doesn’t sound that complex, and yet, it seems to take a lot of time.</p>
</div> </div></li></ul></li></ul></li></ul></li><li class="comment even thread-odd thread-alt depth-1" id="comment-1530478"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Rostowich</span>  <span class="comment_date cye-lm-tag">March 16, 2017, 21:07</span></div><div class="comment_text" id="comment-body-1530478"><p class="cye-lm-tag">Thank you for this post. But when i run the example using spring boot, i get this error about the PersistenceContext.<br> java.lang.IllegalStateException: Failed to load ApplicationContext.<br> Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [javax.persistence.PersistenceContext]: Specified class is an interface.<br> How to write a class to implement this interface?</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-1530482"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">March 16, 2017, 21:30</span></div><div class="comment_text" id="comment-body-1530482"><p class="cye-lm-tag">Hi,</p>
<p class="cye-lm-tag">You have imported the wrong class. You can find <a href="https://github.com/pkainulainen/spring-data-jpa-examples/blob/master/query-methods/src/main/java/net/petrikainulainen/springdata/jpa/config/PersistenceContext.java" target="_blank" rel="nofollow">the correct class</a> from the <code>net.petrikainulainen.springdata.jpa.config</code> package.</p>
<p class="cye-lm-tag">That being said, if you are using Spring Boot you probably shouldn’t use the technique described in this blog post because Spring Boot has a lot of testing related improvements that make the configuration a bit different. If you want to take a look at some newer integration testing examples, you should take look at <a href="https://github.com/pkainulainen/test-with-spring/tree/master/intermediate-package" target="_blank" rel="nofollow">the example applications of my Test With Spring course</a> (intermediate package).</p>
</div> </div></li></ul></li><li class="comment even thread-even depth-1" id="comment-1530680"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Alex</span>  <span class="comment_date cye-lm-tag">March 17, 2017, 11:51</span></div><div class="comment_text" id="comment-body-1530680"><p class="cye-lm-tag">Hi Petri,</p>
<p class="cye-lm-tag">I’m dealing with the same problem. When I try to run the test I get:<br> java.lang.IllegalStateException: Failed to load ApplicationContext<br> Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name ‘persistenceContext’: Instantiation of bean failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [javax.persistence.PersistenceContext]: Specified class is an interface<br> Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [javax.persistence.PersistenceContext]: Specified class is an interface</p>
<p class="cye-lm-tag">I’m not using Spring Boot, but I’m not sure I done the configuration properly. I have my persistence.xml file inside src/main/resources/META-INF directory. My data source bean looks like this:</p>
<p class="cye-lm-tag">And the entity manager factory:</p>
<p class="cye-lm-tag">Application properties file is:</p>
<p class="cye-lm-tag">#Database Configuration<br> db.driver=oracle.jdbc.driver.OracleDriver<br> db.url=jdbc:oracle:thin:@:oracle<br> db.username=<br> db.password=</p>
<p class="cye-lm-tag">#Hibernate Configuration<br> hibernate.dialect=org.hibernate.dialect.Oracle12cDialect<br> hibernate.format_sql=true<br> hibernate.hbm2ddl.auto=update<br> hibernate.show_sql=true<br> hibernate.generate_statistics=true</p>
<p class="cye-lm-tag">Can you please help me solve this problem?</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-1530783"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">March 17, 2017, 18:40</span></div><div class="comment_text" id="comment-body-1530783"><p class="cye-lm-tag">Hi,</p>
<p class="cye-lm-tag">Like I mentioned <a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-integration-testing/#comment-1530482" rel="nofollow">in my previous answer</a>, you have imported the wrong class. You should either use your application context configuration class (replace <code>PersistenceContext</code> class with your configuration class) or configure your integration tests by using your XML configuration file. Do you configure your application context by using Java configuration or XML configuration files?</p>
</div> </div><ul class="children"><li class="comment even depth-3" id="comment-1531441"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Alex</span>  <span class="comment_date cye-lm-tag">March 19, 2017, 10:53</span></div><div class="comment_text" id="comment-body-1531441"><p class="cye-lm-tag">I’m using XML configuration file. Is there a example I can follow? I’m a newbie at this, so anything would be helpful.</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-4" id="comment-1531603"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">March 19, 2017, 22:10</span></div><div class="comment_text" id="comment-body-1531603"><p class="cye-lm-tag">Hi,</p>
<p class="cye-lm-tag">You can follow the instructions given in this blog post as long as you make one change to the configuration of your integration tests:</p>
<p class="cye-lm-tag">You have to configure your application context by using your XML configuration file. You can specify the location of your application context configuration file by using the <code>locations</code> attribute of the <code>@ContextConfiguration</code> annotation.</p>
<p class="cye-lm-tag">For example, if your application context configuration file is called <em>example-context.xml</em> and it is found from the root directory of your classpath, you can use the following annotation:</p>
<pre><code>
@ContextConfiguration(locations = {"classpath:example-context.xml"})
</code>
</pre><p class="cye-lm-tag">If you have any additional questions, don’t hesitate to ask them.</p>
</div> </div><ul class="children"><li class="comment even depth-5" id="comment-1531743"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Alex</span>  <span class="comment_date cye-lm-tag">March 20, 2017, 09:38</span></div><div class="comment_text" id="comment-body-1531743"><p class="cye-lm-tag">Thanks, Petry,</p>
<p class="cye-lm-tag">Test passed when I used the .xml file. When running a test, why are even controllers being injected and instantiated, even if I’m not using them for my test? I mean, is taking a pretty long time until the test is finished… And what is that data set file being used for?</p>
</div></div></li></ul></li></ul></li></ul></li></ul></li></ul></div> </section>
<br><hr>
</body>
</html>