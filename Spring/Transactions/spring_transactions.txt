http://docs.spring.io/spring/docs/current/spring-framework-reference/html/transaction.html
*******************************
ACID =
Atomicity --- атомарность
Consistency - согласованность
Isolation --- изолированность
Durability -- стойкость
***********************************
__Атомарность гарантирует, что все изменения в базе данных являются единым целым и либо все выполняются, либо все отменяются.
__Изоляция транзакций означает, что процедуры работы с данными изолируются друг от друга. В отсутствие должной изоляции одним процедурам могут стать видимы изменения, сделанные другими, параллельно выполняющимися процедурами, даже если последние еще не завершились.

integrity - целостность
***************************
Isolation is typically defined at database level as a property that defines how/when the changes made by one operation become visible to other.
Изоляция показывает как/когда изменения сделанные одной транзакцией будут видны для другой транзакции.


***************************
Java EE developers have had two choices for transaction management: 
global or local transactions.
1) GLOBAL TRANSACTIONS enable you to work with multiple transactional resources, typically relational databases and message queues. 
The application server manages global transactions through the JTA, which is a cumbersome API to use.
2) LOCAL TRANSACTIONS are resource-specific, such as a transaction associated with a JDBC connection. Local transactions may be easier to use, but have significant disadvantages: they cannot work across multiple transactional resources. 
-----------------------------

Типы транзакций:
1) Физические - единая транзакция, к-я может действовать сразу для нескольких методов.
2) Логические/локальные - транзакция каждого метода.
Несколько логических транзакций могут быть внутри 1 физической транзакции.

И как они тогда отменяются/откатываюся?
*****************************************
PROPAGATION - 
1) очень важное св-во, от него полностью зависит как будет работать приложение с БД.
2) НЕ оставлять зн-е по умолчанию.
3) Нужно следить, повлияет ли ошибка во внутренней транзакции на внешнюю транзакцию.
-------------------------
1) Isolation - это степень, в которой данная транзакция изолирована от действий/результатов работы/влияния/ других транзакций.
2) Propagation - обычно, если код выполняется внутри области транзакции (within a transaction scope) - то он (код) будет запущен в транзакции. Но есть опция/возможность указать такое поведение, чтобы транзакционный метод выполнялся тогда когда транзакционный контекст уже существовал (transaction context already exists).
3) Timeout - как долго может выполняться даннная транзакция, до того как истечёт timeout и она будет автоматически rolled back.
4) Read-only status - может быть использована транзакция только для чтения, если она только считывает данные и не изменяет их.

*****************************
http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/transaction/annotation/Propagation.html

Enum Propagation --> 
----->(1) MANDATORY ------>
1_использовать текущую транзакцию, 
2_если её нет - выбрасывать исключение.
Support a current transaction, throw an exception if none exists.
Использовать тогда, когда вы уверены, что транзакция уже началась, и этот метод надо использовать в этой транзакции.

----->(2) NESTED ------>
1_если текущая транзакция существует - то nested выполняется в ней.
2_Если текущей НЕТ - то nested ведёт себя как REQUIRED.
Execute within a nested transaction if a current transaction exists, behave like PROPAGATION_REQUIRED else.
Вложенная транзакция (подтранзакция), подтверждается вместе с внешней транзакцией (т.е. когда завершается внешняя транзакция - то завершится и nested транзакция.). 
Если нет существующей транзакции - то nested работает как REQUIRED.

--PROPAGATION_NESTED uses a single physical transaction with multiple savepoints that it can roll back to. 
Such partial rollbacks allow an inner transaction scope to trigger a rollback for its [inner] scope, with the outer transaction being able to continue the physical transaction despite some operations having been rolled back. 
This setting is typically mapped onto JDBC savepoints, so will only work with JDBC resource transactions.
See Spring’s DataSourceTransactionManager.
Использовать когда, нужны подтранзакции. Т.е. 1-й метод начал транзакцию, 2-й - создал создал свою собственную подтранзакцию, и эта 2-я может никак не влиять на внешнюю. Т.е. если будет откат 2-й транзакции, то 1-я продолжит работу. Внешняя транзакция не пострадает, а вложенная может выполнится или откатиться.

----->(3) NEVER ------>
1_Вообще НЕ выполнять в транзакции, если транзакция запущена - выбросить исключение.
Антипод к mandatory. Использовать когда надо выполнять без транзакции.
Execute non-transactionally, throw an exception if a transaction exists.

----->(4) NOT_SUPPORTED ------>
1_Вообще НЕ выполнять в транзакции, если транзакция запущена - она будет приостановлена.
Execute non-transactionally, suspend the current transaction if one exists.
НЕ выполнять в текущей транзакции, если транзакция уже была запущена - то она будет приостановлена на время выполнения этого метода. 
И сам метод будет выполняться вне транзакции, и после завершения метода транзакция будет возобновлена.

-----(5) REQUIRED ------
1_если какая-то транзакция уже запущена - то выполнять метод внутри неё,
2_иначе (если транзакции до этого не было) метод создаёт новую транзакцию.
Support a current transaction, create a new one if none exists.

--SPRING PROPAGATION_REQUIRED - для каждого метода с такой аннотацией создаётся новая логическая транзакция (logical transaction scope). Для каждой такой logical transaction scope можно индивидуально задать rollback-only статус, т.е. внешняя транзакция (outer transaction scope) будет логически независима от inner transaction scope. 

Но для обычного стандартного случая ис-ия PROPAGATION_REQUIRED -- все эти scopes будут запамлены на одну и ту же физическую транзакцию. И т.о. в этом случае если у внутренней транзакции будет установлен rollback-only маркер - то он влияет и на шанс того, что внешняя транзакция может не закомититься.
--However, in the case where an inner transaction scope sets the rollback-only marker, the outer transaction has not decided on the rollback itself, and so the rollback (silently triggered by the inner transaction scope) is unexpected. A corresponding UnexpectedRollbackException is thrown at that point. This is EXPECTED BEHAVIOR so that the caller of a transaction can never be misled to assume that a commit was performed when it really was not. So if an inner transaction (of which the outer caller is not aware) silently marks a transaction as rollback-only, the outer caller still calls commit. The outer caller needs to receive an UnexpectedRollbackException to indicate clearly that a rollback was performed instead.

----->(6) REQUIRES_NEW ------>
1_ВСЕГДА создаёт новую транзакцию (В любом случае создаст новую). 
2_Если до этого уже была запущена какая-то другая транзакция, то она приостанавливается на время выполнения метода.
Create a new transaction, and suspend the current transaction if one exists.
Выполнение существующей транзакции (если таковая есть) прерывается, и начинается новая транзакция. После завершения метода новая транзакция подтверждается, а старая – возобновляется. 
Вследствие такого поведения атрибут REQUIRES_NEW должен использоваться на методе только в случае, если результат выполнения этого метода должен быть сохранён  (т.е. закомичен) в БД вне зависимости от результатов выполнения внешней транзакции (которая в этом случае приостанавливается).
   Таким образом, следует всегда использовать атрибуты MANDATORY или REQUIRED вместо REQUIRES_NEW, кроме особых случаев, схожих с примером сохранения аудиторской информации. 
(Например, допустим, что каждый торговый приказ (stock trade) должен быть отражен в базе данных аудита. Эта информация должна быть сохранена вне зависимости от того, был ли приказ успешен или завершился неудачей ввиду ошибок валидации, отсутствия необходимых средств или по любой другой причине. Если в этой ситуации не использовать атрибут REQUIRES_NEW для метода аудита, то сохранение аудиторской информации будет отменено вместе с сохранением самого приказа.)

--PROPAGATION_REQUIRES_NEW, in contrast to PROPAGATION_REQUIRED, uses a completely independent transaction for each affected transaction scope. In that case, the underlying physical transactions are different and hence can commit or roll back independently, with an outer transaction not affected by an inner transaction’s rollback status.

----->(7) SUPPORTS ------>
1_Метод МОЖЕТ выполняться внутри транзакции, если она запущена, 
2_иначе - выполнится без транзакции.
Support a current transaction, execute non-transactionally if none exists.
Для transaction managers с синхронизацией транзакций это значение PROPAGATION_SUPPORTS конкретно отличается от "no transaction at all", т.к. SUPPORTS всё-таки задаёт transaction scope, к которой будет применяться синхронизация. Т.е. одни и те же объекты  (JDBC Connection, Hibernate Session, etc) будут расшарены в заданном scope ( will be shared for the entire specified scope).

**************************************************
----------> ОТКАТ ТРАНЗАКЦИЙ ---------->
Рекомендованный спобоб дать понять ему (Spring Framework’s transaction infrastructure) о том, что надо откатить транзакцию -- это выбросить исключение из кода, который в настоящий момент выполняет содержимое транзакции.
Спринг словит любое unhandled Exception и вычислит, надо ли откатывать транзакцию.
По умолчанию спринг откатит транзакцию в случае:
1) получения runtime, unchecked exceptions. Т.е. это такие исключения, к-е явл-ся подклассом RuntimeException.
2) получения Ошибки (Errors will also - by default - result in a rollback)
----По умолчанию в случае Checked exceptions (that are thrown from a transactional method) -- отката не будет.

*************************************************
Значения по умолчанию для <tx:advice/> tag (и для @Transactional)
•Propagation setting is REQUIRED. 
•Isolation level is DEFAULT. 
•Transaction is read/write. 
•Transaction timeout defaults to the default timeout of the underlying transaction system, or none if timeouts are not supported. 
•Any RuntimeException triggers rollback, and any checked Exception does not. 

---при использовании аннотации @Transactional без параметров 
1 режимом распространения является REQUIRED, 
2 значением атрибута "только чтение" (read-only flag) – false, 
3 уровень изоляции соответствует уровню изоляции по умолчанию для базы данных (как правило, это READ_COMMITTED), 
4 и транзакция не будет откатываться в случае контролируемых исключений (checked exception).

*********************************************
SPRING <TX:ADVICE> <tx:attributes> <tx:method> ATTRIBUTES
Внутри  <tx:method/> можно задать след. атрибуты:
1) name -- Method name(s) with which the transaction attributes are to be associated. The wildcard (*) character can be used to associate the same transaction attribute settings with a number of methods; for example, get*, handle*, on*Event, and so forth.
2) propagation 	-- Transaction propagation behavior.
3) isolation 	-- Transaction isolation level.
4) timeout 		-- Transaction timeout value (in seconds).
5) read-only 	-- Is this transaction read-only?
6) rollback-for -- Exception(s) that trigger rollback; comma-delimited.
7) no-rollback-for -- Exception(s) that do not trigger rollback; comma-delimited. 
--------------
You can omit the transaction-manager attribute in the <tx:annotation-driven/> tag if the bean name of the PlatformTransactionManager that you want to wire in has the name transactionManager. If the PlatformTransactionManager bean that you want to dependency-inject has any other name, then you have to use the transaction-manager attribute explicitly, as in the preceding example.

The @EnableTransactionManagement annotation provides equivalent support if you are using Java based configuration. Simply add the annotation to a @Configuration class. See the javadocs for full details.

The standard javax.transaction.Transactional annotation is also supported as a drop-in replacement to Spring’s own annotation. Please refer to JTA 1.2 documentation for more details.

Method visibility and @Transactional
When using proxies, you should apply the @Transactional annotation only to methods with public visibility. If you do annotate protected, private or package-visible methods with the @Transactional annotation, no error is raised, but the annotated method does not exhibit the configured transactional settings. Consider the use of AspectJ (see below) if you need to annotate non-public methods.

You can place the @Transactional annotation before an interface definition, a method on an interface, a class definition, or a public method on a class. However, the mere presence of the @Transactional annotation is not enough to activate the transactional behavior. The @Transactional annotation is simply metadata that can be consumed by some runtime infrastructure that is @Transactional-aware and that can use the metadata to configure the appropriate beans with transactional behavior. In the preceding example, the <tx:annotation-driven/> element switches on the transactional behavior.

Spring recommends that you only annotate concrete classes (and methods of concrete classes) with the @Transactional annotation, as opposed to annotating interfaces. You certainly can place the @Transactional annotation on an interface (or an interface method), but this works only as you would expect it to if you are using interface-based proxies. The fact that Java annotations are not inherited from interfaces means that if you are using class-based proxies ( proxy-target-class="true") or the weaving-based aspect ( mode="aspectj"), then the transaction settings are not recognized by the proxying and weaving infrastructure, and the object will not be wrapped in a transactional proxy, which would be decidedly bad.

In proxy mode (which is the default), only external method calls coming in through the proxy are intercepted. This means that self-invocation, in effect, a method within the target object calling another method of the target object, will not lead to an actual transaction at runtime even if the invoked method is marked with @Transactional. Also, the proxy must be fully initialized to provide the expected behaviour so you should not rely on this feature in your initialization code, i.e. @PostConstruct.
Consider the use of AspectJ mode (see mode attribute in table below) if you expect self-invocations to be wrapped with transactions as well. In this case, there will not be a proxy in the first place; instead, the target class will be weaved (that is, its byte code will be modified) in order to turn @Transactional into runtime behavior on any kind of method.

The proxy-target-class attribute controls what type of transactional proxies are created for classes annotated with the @Transactional annotation. If proxy-target-class is set to true, class-based proxies are created. If proxy-target-class is false or if the attribute is omitted, standard JDK interface-based proxies are created.

@EnableTransactionManagement and <tx:annotation-driven/> only looks for @Transactional on beans in the same application context they are defined in. This means that, if you put annotation driven configuration in a WebApplicationContext for a DispatcherServlet, it only checks for @Transactional beans in your controllers, and not your services.

The most derived location takes precedence when evaluating the transactional settings for a method. Т.е. если задана @Transactional на классе, а потом также и на методе, то @Transactional на методе будет приоритетнее, и возьмёт верх.
---------------
@Transactional settings

The @Transactional annotation is metadata that specifies that an interface, class, or method must have transactional semantics; for example, "start a brand new read-only transaction when this method is invoked, suspending any existing transaction". The default @Transactional settings are as follows:
1) Propagation setting is PROPAGATION_REQUIRED.
2) Isolation level is ISOLATION_DEFAULT.
3) Transaction is read/write.
4) Transaction timeout defaults to the default timeout of the underlying transaction system, or to none if timeouts are not supported.
5) Any RuntimeException triggers rollback, and any checked Exception does not. 

For declarative transactions, the transaction name is always the fully-qualified class name + "." + method name of the transactionally-advised class. For example, if the handlePayment(..) method of the BusinessService class started a transaction, the name of the transaction would be: com.foo.BusinessService.handlePayment

Multiple Transaction Managers with @Transactional
Most Spring applications only need a single transaction manager, but there may be situations where you want multiple independent transaction managers in a single application. The value attribute of the @Transactional annotation can be used to optionally specify the identity of the PlatformTransactionManager to be used. This can either be the bean name or the qualifier value of the transaction manager bean.
The default <tx:annotation-driven> target bean name transactionManager will still be used if no specifically qualified PlatformTransactionManager bean is found.

Custom shortcut annotations
If you find you are repeatedly using the same attributes with @Transactional on many different methods, then Spring’s meta-annotation support allows you to define custom shortcut annotations for your specific use cases.
--------------
 instances of the TransactionTemplate class are threadsafe, in that instances do not maintain any conversational state. TransactionTemplate instances do however maintain configuration state, so while a number of classes may share a single instance of a TransactionTemplate, if a class needs to use a TransactionTemplate with different settings (for example, a different isolation level), then you need to create two distinct TransactionTemplate instances.
