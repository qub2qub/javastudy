<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<title>Method Parameter Validation</title>
    <link rel="stylesheet" href="../../Git Guide/grey.css">
    <link href="http://alexgorbatchev.com/pub/sh/current/styles/shCore.css" rel="stylesheet" type="text/css">
<link href="http://alexgorbatchev.com/pub/sh/current/styles/shThemeDefault.css" rel="stylesheet" type="text/css">
</head>
<body>
<a href="http://techblogs4u.blogspot.com.by/2012/09/method-parameter-validation-in-spring-3.html">src</a>
<h2>Method Parameter Validation in Spring 3 MVC Controllers</h2>
<div class="post-body entry-content cye-lm-tag" id="post-body-3062755877823891953" itemprop="description articleBody">
<div dir="ltr" style="text-align: left;" trbidi="on" class="cye-lm-tag">

<br>
JSR-303 specification allows validation of beans only however in this post I am going to tell you how you can use JSR-303 provider such as hibernate validator to validate request parameters, path variables in Spring 3 controller classes. To run this examaple Hibernate Validator 4.2 must be in classpath.<br>
<br>
Below is the sample controller class in Spring 3 for fetching the product<br>
<br>
<div><div id="highlighter_852461" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java color1">@Controller</code></div><div class="line number2 index1 alt1"><code class="java keyword">public</code> <code class="java keyword">class</code> <code class="java plain">ProductController {</code></div><div class="line number3 index2 alt2">&nbsp;</div><div class="line number4 index3 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Autowired</code></div><div class="line number5 index4 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java keyword">transient</code> <code class="java plain">ProductService productService;</code></div><div class="line number6 index5 alt1">&nbsp;</div><div class="line number7 index6 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@RequestMapping</code><code class="java plain">(value = </code><code class="java string">"/product/{prodId}/"</code><code class="java plain">, method = RequestMethod.GET)</code></div><div class="line number8 index7 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java plain">ModelAndView getProduct(</code><code class="java color1">@PathVariable</code><code class="java plain">(</code><code class="java string">"prodId"</code><code class="java plain">) </code><code class="java keyword">final</code> <code class="java plain">String productId) {</code></div><div class="line number9 index8 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">ProductDetail product = productService.getProduct(productId);</code></div><div class="line number10 index9 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">mv.addObject(</code><code class="java string">"product"</code><code class="java plain">, product);</code></div><div class="line number11 index10 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">mv.setViewName(</code><code class="java string">"product"</code><code class="java plain">);</code></div><div class="line number12 index11 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">return</code> <code class="java plain">mv;</code></div><div class="line number13 index12 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number14 index13 alt1"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div>
<br>
You can see that anyone can enter garbage value for {prodId} and that value will be passed to the getProduct() method of product service. We will validate the {prodId} before method execution begins.<br>
<br>
Lets create our own JSR-303 annotation @ProductId which will validate the format of prodId<br>
<br>
<div><div id="highlighter_457963" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java color1">@NotBlank</code></div><div class="line number2 index1 alt1"><code class="java color1">@Size</code><code class="java plain">(min = </code><code class="java value">5</code><code class="java plain">, max = </code><code class="java value">5</code><code class="java plain">)</code></div><div class="line number3 index2 alt2"><code class="java color1">@Digits</code><code class="java plain">(integer = </code><code class="java value">5</code><code class="java plain">, fraction = </code><code class="java value">0</code><code class="java plain">)</code></div><div class="line number4 index3 alt1"><code class="java color1">@Target</code><code class="java plain">({ FIELD, METHOD, PARAMETER, ANNOTATION_TYPE, LOCAL_VARIABLE })</code></div><div class="line number5 index4 alt2"><code class="java comments">// specifies where this validation can be used (Field, Method, Parameter etc)</code></div><div class="line number6 index5 alt1"><code class="java color1">@Retention</code><code class="java plain">(RetentionPolicy.RUNTIME)</code></div><div class="line number7 index6 alt2"><code class="java color1">@Documented</code></div><div class="line number8 index7 alt1"><code class="java color1">@Constraint</code><code class="java plain">(validatedBy = {})</code></div><div class="line number9 index8 alt2"><code class="java color1">@ReportAsSingleViolation</code></div><div class="line number10 index9 alt1"><code class="java comments">// specifies if any of the validation fails, it will be reported as single validation</code></div><div class="line number11 index10 alt2"><code class="java keyword">public</code> <code class="java color2">@interface</code> <code class="java plain">ProductId {</code></div><div class="line number12 index11 alt1">&nbsp;</div><div class="line number13 index12 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java preprocessor">/**</code></div><div class="line number14 index13 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java preprocessor">* This is the key to message will that will be looked in validation.properties for validation</code></div><div class="line number15 index14 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java preprocessor">* errors</code></div><div class="line number16 index15 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java preprocessor">* </code></div><div class="line number17 index16 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java preprocessor">* @return the string</code></div><div class="line number18 index17 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java preprocessor">*/</code></div><div class="line number19 index18 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">String message() </code><code class="java keyword">default</code> <code class="java string">"{invalid.product.id}"</code><code class="java plain">;</code></div><div class="line number20 index19 alt1">&nbsp;</div><div class="line number21 index20 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">Class[] groups() </code><code class="java keyword">default</code> <code class="java plain">{};</code></div><div class="line number22 index21 alt1">&nbsp;</div><div class="line number23 index22 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">Class[] payload() </code><code class="java keyword">default</code> <code class="java plain">{};</code></div><div class="line number24 index23 alt1"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div>
<br>
@ProductId annotation validates a given string for<br>
<ul style="text-align: left;">
<li>Not empty string</li>
<li>Size should be exactly 5 characters&nbsp;</li>
<li>All characters should be digits.</li>
</ul>
<br>
Now we will use this annotation to validate our prodId path variable.<br>
To use this validation we would need to do following:<br>
<ol style="text-align: left;">
<li>Prefix the @PathVariable with @ProductId&nbsp;</li>
<li>Add @Validated annotation to controller class. It tells spring to validate class at method level.</li>
<li>We need a bean of type MethodValidationPostProcessor in the spring context which will look for @Validated annotated classes and will apply method level validations.</li>
</ol>
See below how the ProductController now looks like:<br>
<br>
<div><div id="highlighter_630835" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java color1">@Controller</code></div><div class="line number2 index1 alt1"><code class="java color1">@Validated</code></div><div class="line number3 index2 alt2"><code class="java comments">// enables methods parameters JSR validation.</code></div><div class="line number4 index3 alt1"><code class="java keyword">public</code> <code class="java keyword">class</code> <code class="java plain">ProductController {</code></div><div class="line number5 index4 alt2">&nbsp;</div><div class="line number6 index5 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Autowired</code></div><div class="line number7 index6 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java keyword">transient</code> <code class="java plain">ProductService productService;</code></div><div class="line number8 index7 alt1">&nbsp;</div><div class="line number9 index8 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@RequestMapping</code><code class="java plain">(value = </code><code class="java string">"/product/{prodId}/"</code><code class="java plain">, method = RequestMethod.GET)</code></div><div class="line number10 index9 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java plain">ModelAndView getProduct(</code><code class="java color1">@ProductId</code> <code class="java color1">@PathVariable</code><code class="java plain">(</code><code class="java string">"prodId"</code><code class="java plain">) </code><code class="java keyword">final</code> <code class="java plain">String productId) {</code></div><div class="line number11 index10 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">ProductDetail product = productService.getProduct(productId);</code></div><div class="line number12 index11 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">mv.addObject(</code><code class="java string">"product"</code><code class="java plain">, product);</code></div><div class="line number13 index12 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">mv.setViewName(</code><code class="java string">"product"</code><code class="java plain">);</code></div><div class="line number14 index13 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">return</code> <code class="java plain">mv;</code></div><div class="line number15 index14 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number16 index15 alt1"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div>
<br>
Below code tells how to instantiate MethodValidationPostProcessor in spring configuration<br>
<br>
<div><div id="highlighter_399307" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java color1">@Configuration</code></div><div class="line number2 index1 alt1"><code class="java color1">@ComponentScan</code><code class="java plain">(basePackages = { </code><code class="java string">"web.controller"</code> <code class="java plain">})</code></div><div class="line number3 index2 alt2"><code class="java comments">// packages to scans for components</code></div><div class="line number4 index3 alt1"><code class="java color1">@EnableWebMvc</code></div><div class="line number5 index4 alt2"><code class="java comments">// enable the MVC support</code></div><div class="line number6 index5 alt1"><code class="java keyword">public</code> <code class="java keyword">class</code> <code class="java plain">SpringWebConfig </code><code class="java keyword">extends</code> <code class="java plain">WebMvcConfigurerAdapter {</code></div><div class="line number7 index6 alt2">&nbsp;</div><div class="line number8 index7 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java preprocessor">/**</code></div><div class="line number9 index8 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java preprocessor">* Method validation post processor. This bean is created to apply the JSR validation in method</code></div><div class="line number10 index9 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java preprocessor">* parameters. Any class which want to perform method param validation must use @Validated</code></div><div class="line number11 index10 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java preprocessor">* annotation at class level.</code></div><div class="line number12 index11 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java preprocessor">* </code></div><div class="line number13 index12 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java preprocessor">* @return the method validation post processor</code></div><div class="line number14 index13 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java preprocessor">*/</code></div><div class="line number15 index14 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Bean</code></div><div class="line number16 index15 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java plain">MethodValidationPostProcessor methodValidationPostProcessor() {</code></div><div class="line number17 index16 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">return</code> <code class="java keyword">new</code> <code class="java plain">MethodValidationPostProcessor();</code></div><div class="line number18 index17 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number19 index18 alt2"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div>
<br>
<br>
Now when you will call this controller method using url "/product/{some garbage value}", it will throw MethodConstraintViolationException exception. You can handle this error using @ExceptionHandler annotation and redirect user to error page with a message.<br>
<br>
<div><div id="highlighter_79973" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@ExceptionHandler</code><code class="java plain">({Exception.</code><code class="java keyword">class</code><code class="java plain">})</code></div><div class="line number2 index1 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@ResponseStatus</code><code class="java plain">(value = HttpStatus.NOT_FOUND)</code></div><div class="line number3 index2 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">protected</code> <code class="java plain">ModelAndView handleException(</code><code class="java keyword">final</code> <code class="java plain">Exception ex) {</code></div><div class="line number4 index3 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">final</code> <code class="java plain">ModelAndView mv = </code><code class="java keyword">new</code> <code class="java plain">ModelAndView();</code></div><div class="line number5 index4 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">final</code> <code class="java plain">List&lt;string&gt; messages = </code><code class="java keyword">new</code> <code class="java plain">ArrayList&lt;string&gt;();</code></div><div class="line number6 index5 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">if</code> <code class="java plain">(ex </code><code class="java keyword">instanceof</code> <code class="java plain">MethodConstraintViolationException) {</code></div><div class="line number7 index6 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">for</code> <code class="java plain">(ConstraintViolation failure : ((MethodConstraintViolationException) ex).getConstraintViolations()) {</code></div><div class="line number8 index7 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">messages.add(failure.getMessage());</code></div><div class="line number9 index8 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number10 index9 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">} </code><code class="java keyword">else</code> <code class="java plain">{</code></div><div class="line number11 index10 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">messages.add(ex.getMessage());</code></div><div class="line number12 index11 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number13 index12 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">mv.addObject(</code><code class="java string">"exceptionModel"</code><code class="java plain">, messages);</code></div><div class="line number14 index13 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">mv.setViewName(</code><code class="java string">"exception"</code><code class="java plain">);</code></div><div class="line number15 index14 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">return</code> <code class="java plain">mv;</code></div><div class="line number16 index15 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number17 index16 alt2"><code class="java plain">&lt;/string&gt;&lt;/string&gt;</code></div></div></td></tr></tbody></table></div></div>
<br>
You can use the similar way to validate request parameters by prefixing your validation annotation in front of @RequestParameter annotation.<br>
<br>
If you want to disable the validation for some particular class remove the @Validated annotation from that class. If you are interested in completely disabling the method validation then remove the MethodValidationPostProcessor bean from spring context. You might want to disable validations for unit tests.</div>
<div style="clear: both;"></div>
</div>
</body>
</html>