__Q1__
Если у метода будут 2 аннотации @Transactional и @PostConstruct, например для разогрева кэша -- то этот метод сработает без транзакции.
Почему?
Из-за конвенций спринга по созданию объекта:
1) сначала создаётся объект
2) потом он прогоняется по всем BPP - beforeInitialization
3) потом инит методы
4) потом он прогоняется по всем BPP - afterInitialization
5) и только после всего этого(или в п.4) на него наворачиваются все прокси.
Т.е. инит метод работает до того как есть прокси для транзакций.

Как решить?
1) Например, заинжектить transaction manager в этот бин и через него вызвать транзакции.
Но это идёт в разрез с декларативным способом работы с транзакцией.
2) Или юзать Application Refresh Listener, через доп. аннотацию и её обрабтку в листенере, чтобы метод вызывался когда Spring Application Context полностью построился и обновился (refresh), т.е. бин уже до конца проинициализирован и обёрнут во все прокси.

__Q2__
Если бин описать в джава конфиге, то чего не будет в BeanDefinition?
Не будет класса бина (BeanClass).
Почему нет инфы о классе?
Т.к. в джаве пока не запущен метод, никак нельзя узнать, что этот метод вернёт.
Т.е. в методе могут быть условия, в зависимости от которых может, например, вернуться базовый класс, а можен его наследник.
Но не во всех случаях эту проблему можно решить, например для BFPP на этапе когда бины ещё не созданы -- никак не узнаешь.

__Q3__
Разница между CGLIB и Dynamic Proxy?
минусы CGLIB:
1) cglib не сможет сделать прокси если класс явл-ся final
2) с точки зрение производительности не очень хорошо
3) объекты из классов cglib-а не очень хорошо ведут себя в памяти (занимают много места)

Поэтому спринг как решает:
если класс которому спринг должен сделать прокси имплементит хотя бы 1 интерфейс, в ктором есть хотя бы 1 метод -- то тогда спринг будет делать Dynamic Proxy через интерфейсы.
А Если вообще нету интерфейсов или они все пустые без методов -- то тогда выбора нет -- и он делает класс наследник(если класс не финал) через cglib.


__Q4__
Что будет если прописать один и тот же бин в разных конфигах?

1) В XML -- 
если прописать 2 бина с 1 и тем же id то всё грохнется

2) Аннотации --
2 бина с 1 и тем же id при сканировании - всё грохнется

Но можно переопределять бины, если 1 прописан через xml, второй через аннотации.
Победит XML -- чтобы люди могли в нём переопределить beanDefinition, ничего не перекомпилируя.


__Q5__
Методы аннотированные @PostConstruct не имеют права ничего принимать.
Поэтому если у этого метода будет аргумент -- то будет IllegalStateException -- "Lifecycle method annotation requires a no-arg method"


__Q6__
1) Аннотации в интерфейсах не работают.
Т.к. спринг-core их там не ищет, а ищет в классах.
spring-data -- ищет аннотации в интерфесах.

2) А метод помеченный @Autowired воспринимается спрингом как сеттер
т.е. вызовет и отработает весь метод.
И не важно как называется метод.

__Q7__
BPP -- имеет 2 метода, 1й - до инит-метода --- в нём что-то инжектится в бин, т.е. что-то делает с самим бином.
во 2м - после инит-метода --- в нём пишется логика, которая добавляет поведение, например, транзакции или аспекты, т.е. бин проксируется.

__Q8__
Почему инит-метод вызывается между 2мя методами БПП ---
потому что мы хотим сначала полностью настроить объект, а потом заворачивать его в прокси.
Потому что в прокси-классе уже не найдём никаких наших аннотаций.


__Q9__
За @PostConstruct и @PreDestroy отвечает CommonAnnotationBeanPostProcessor
Чтобы получить вообзе ВСЕ интерфейсы (в т.ч. и пап, дедушек и прадедушек) можно либо
1__ рекурсивно у каждого класса делать beanClass.getInterfaces()
2__ вызвать спринговый ClassUtils.getAllInterfacesForClass(beanClass);


__Q10__
При @Autowired для листа с generic-ом  (в филде, параметре метода, параметре конструктора) спринг найдёт все бины, подходящие по типу к generic-у, и всех их добавит в array лист, и потом его засетит в это поле.

По умолчанию @Autowired является обязательным (required=true), поэтому если ничего не подошло -- то будет Exception.
Если бы было (required=false), то был бы пустой лист.

Можно задавать 

__Q11__
Как спринг расценивает @Qualifier-ы, если их задано несколько над полем?
(Например, через OR или And )
Ответ:  
@Qualifier-ы сравниваются по AND.
Т.е. Все они должны присутствовать в @Autowired сущности, что спринг мог её авто-подставить.


__Q12__
Будет ли вызван @PreDestroy метод у prototype бина?
Нет!
Т.к. спринг их нигде не хранит. И не держит их в памяти.
А синглтоны держит, т.к. ему над отдавать 1 и тот же бин.

А если прописать destroy метод в xml?
особо ничего!


__Q13__
Зачем нужна и как работает след. конструкция:
@Scope(value = "prototype", proxyMode = ScopedProxyMode.TARGET_CLASS)
?
Например, есть REST контроллер, singleton,
а в нём есть какой-то сервис, который должен обновляться на каждый request.
В этом случае, "какбы" сам скоуп моего бина будет заботится, чтобы мой бин создавал свою новую сущность.
А эта конструкция говорит, чтобы спринг завернул мой бин в прокси, и возвращал уже прокси объект. И этот прокси будет обновлять этот бин внутри себя в зависимости от скоупа. 
TARGET_CLASS -- значит для генерации прокси использовать CGLIB через наследование, или можно задать через интерфейсы.

Но это технику нельзя применить, когда надо обновлять бин по какому-то условию. Т.е. когда контроль должен быть у того объекта, который будет пользоваться моим бином.


__Q14__
Какие есть 2 способа испоьзовать factoryBean из XML?
1) Нпример, надо создавать Integer, в котором будут рандомные числа до 10.
Пишем в xml, а в фабрике прописываем логику и тип и синглетон.

Если в фабрике isSingleton()=тру, а в XML=scope="prototype" --- что будет?

2) или в xml указать и factory-bean и factory-method