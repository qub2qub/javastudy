<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<title>mockito basics</title>
    <link rel="stylesheet" href="../../Guides/grey.css">
    <style type="text/css">

    </style>
</head>
<body>
<a href="http://www.vogella.com/tutorials/Mockito/article.html">src</a>
<h2>mockito basics</h2>
<div id="content" class="cye-lm-tag">
<div id="preamble">
<div class="sectionbody">
<div class="quoteblock abstract">
<blockquote>
This tutorial explains testing with the Mockito framework for writing software tests.
</blockquote>
</div>
<script async="async" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- Responsive - After Table of Content -->
<ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-3851443674951530" data-ad-slot="4470606330" data-ad-format="auto" bgi3loo="" hidden=""></ins>
<script>(adsbygoogle=window.adsbygoogle||[]).push({});</script>
</div>
</div>
<div class="sect1">
<h2 id="prerequisites"><a class="link" href="#prerequisites">1. Prerequisites</a></h2>
<div class="sectionbody">
<div class="paragraph">
<p class="cye-lm-tag">The following tutorial is based on an understanding of unit testing with the JUnit framework.</p>
</div>
<div class="paragraph">
<p class="cye-lm-tag">In case your are not familiar with JUnit please check the following <a href="http://www.vogella.com/tutorials/JUnit/article.html">JUnit Tutorial</a>.</p>
</div>
</div>
</div>
<div class="sect1 cye-lm-tag">
<h2 id="testing-with-mock-objects"><a class="link" href="#testing-with-mock-objects">2. Testing with mock objects</a></h2>
<div class="sectionbody cye-lm-tag">
<div class="sect2">
<h3 id="target-and-challenge-of-unit-testing"><a class="link" href="#target-and-challenge-of-unit-testing">2.1. Target and challenge of unit testing</a></h3>
<div class="paragraph">
<p class="cye-lm-tag">




A unit test should test functionality in isolation.
Side effects from other classes or the system should be eliminated for a unit test, if possible.</p>
</div>
<div class="paragraph">
<p class="cye-lm-tag">This can be done via using test replacements (<em>test doubles</em>) for the real dependencies.
Test doubles can be classified like the following:</p>
</div>
<div class="ulist">
<ul>
<li>
<p class="cye-lm-tag">A <em>dummy object</em> is passed around but never used, i.e., its methods are never called.
Such an object can for example be used to fill the parameter list of a method.</p>
</li>
<li>
<p class="cye-lm-tag"><em>Fake</em> objects have working implementations, but are usually simplified.
For example, they use an in memory database and not a real database.</p>
</li>
<li>
<p class="cye-lm-tag">A <em>stub</em> class is an partial implementation for an interface or class with the purpose of using an instance of this stub class during testing.
Stubs usually don’t respond to anything outside what’s programmed in for the test.
Stubs may also record information about calls.</p>
</li>
<li>
<p class="cye-lm-tag">A <em>mock object</em> is a dummy implementation for an interface or a class in which you define the output of certain method calls.
Mock objects are configured to perform a certain behavior during a test.
They typical record the interaction with the system and test can validate that.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p class="cye-lm-tag">Test doubles can be passed to other objects which are tested.
Your tests can validate that the class reacts correctly during tests.
For example, you can validate if certain methods on the mock object were called.
This helps to ensure that you only test the class while running tests and that your tests are not affected by any side effects.</p>
</div>
<div class="admonitionblock note">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="paragraph">
<p class="cye-lm-tag">Mock objects typically require less code to configure and should therefore be preferred.</p>
</div>
</td>
</tr>
</tbody></table>
</div>
</div>
<div class="sect2">
<h3 id="mock-object-generation"><a class="link" href="#mock-object-generation">2.2. Mock object generation</a></h3>
<div class="paragraph">
<p class="cye-lm-tag">You can create mock objects manually (via code) or use a mock framework to simulate these classes.
Mock frameworks allow you to create mock objects at runtime and define their behavior.</p>
</div>
<div class="paragraph">
<p class="cye-lm-tag">The classical example for a mock object is a data provider.
In production an implementation to connect to the real data source is used.
But for testing a mock object simulates the data source and ensures that the test conditions are always the same.</p>
</div>
<div class="paragraph">
<p class="cye-lm-tag">These mock objects can be provided to the class which is tested.
Therefore, the class to be tested should avoid any hard dependency on external data.</p>
</div>
<div class="paragraph">
<p class="cye-lm-tag">Mocking or mock frameworks allows testing the expected interaction with the mock object.
You can, for example, validate that only certain methods have been called on the  mock object.</p>
</div>
</div>
<div class="sect2 cye-lm-tag">
<h3 id="using-mockito-for-mocking-objects"><a class="link" href="#using-mockito-for-mocking-objects">2.3. Using Mockito for mocking objects</a></h3>
<div class="paragraph">
<p class="cye-lm-tag"><em>Mockito</em> is a popular mock framework which can be used in conjunction with JUnit.
Mockito allows you to create and configure mock objects.
Using Mockito simplifies the development of tests for classes with external dependencies significantly.</p>
</div>
<div class="paragraph cye-lm-tag">
<p class="cye-lm-tag">If you use Mockito in tests you typically:</p>
</div>
<div class="ulist">
<ul>
<li>
<p class="cye-lm-tag">Mock away external dependencies and insert the mocks into the code under test</p>
</li>
<li>
<p class="cye-lm-tag">Execute the code under test</p>
</li>
<li>
<p class="cye-lm-tag">Validate that the code executed correctly</p>
</li>
</ul>
</div>
<div class="imageblock">
<div class="content">
<img src="img/xmockitousagevisualization.png.pagespeed.ic.Pv8QGyRaWp.webp" alt="mockitousagevisualization" data-pagespeed-url-hash="3886944454" onload="pagespeed.CriticalImages.checkImageForCriticality(this);">
</div>
</div>
<!-- Non responsive Lake Quincy Ads
<div data-type="ad" data-publisher="lqm.javaeclipseandroid.site" data-zone="inBetween01" data-format="728x90">
</div> -->

<!-- Responsive Lake Quincy Ads -->
<div id="ad-inBetween01">
	<script type="text/javascript">googletag.cmd.push(function(){googletag.display('ad-inBetween01');});</script>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="mockito_installation"><a class="link" href="#mockito_installation">3. Adding Mockito as dependencies to a project</a></h2>
<div class="sectionbody">
<div class="sect2">
<h3 id="mockito_installation_gradle"><a class="link" href="#mockito_installation_gradle">3.1. Using Gradle for a Java project</a></h3>
<div class="paragraph">
<p class="cye-lm-tag">If you use Gradle in a Java project, add the following dependency to the Gradle build file.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="groovy">repositories { jcenter() }
dependencies { testCompile <span class="string cye-lm-tag"><span class="delimiter cye-lm-tag">'</span><span class="content cye-lm-tag">org.mockito:mockito-core:2.7.22</span><span class="delimiter cye-lm-tag">'</span></span> }</code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="using-gradle-for-an-android-project"><a class="link" href="#using-gradle-for-an-android-project">3.2. Using Gradle for an Android project</a></h3>
<div class="paragraph">
<p class="cye-lm-tag">Add the following dependency to the Gradle build file:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="groovy">dependencies {
    <span class="comment cye-lm-tag">// ... more entries</span>
    testCompile <span class="string cye-lm-tag"><span class="delimiter cye-lm-tag">'</span><span class="content cye-lm-tag">junit:junit:4.12</span><span class="delimiter cye-lm-tag">'</span></span>

    <span class="comment cye-lm-tag">// required if you want to use Mockito for unit tests</span>
    testCompile <span class="string cye-lm-tag"><span class="delimiter cye-lm-tag">'</span><span class="content cye-lm-tag">org.mockito:mockito-core:2.7.22</span><span class="delimiter cye-lm-tag">'</span></span>
    <span class="comment cye-lm-tag">// required if you want to use Mockito for Android tests</span>
    androidTestCompile <span class="string cye-lm-tag"><span class="delimiter cye-lm-tag">'</span><span class="content cye-lm-tag">org.mockito:mockito-android:2.7.22</span><span class="delimiter cye-lm-tag">'</span></span>
}</code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="mockito_installation_maven"><a class="link" href="#mockito_installation_maven">3.3. Using Maven</a></h3>
<div class="paragraph">
<p class="cye-lm-tag">Maven users can declare a dependency.
Search for g:"org.mockito", a:"mockito-core" via the <a href="http://search.maven.org" class="bare">http://search.maven.org</a> website to	find the correct pom entry.</p>
</div>
</div>
<div class="sect2">
<h3 id="mockito_installation_eclipse"><a class="link" href="#mockito_installation_eclipse">3.4. Using the Eclipse IDE</a></h3>
<div class="paragraph">
<p class="cye-lm-tag">The Eclipse IDE supports the Gradle as well as the Maven build system.
These build system allow to manage your software dependencies.
Therefore, you are advised to use either the Gradle or Maven tooling in Eclipse.</p>
</div>
</div>
<div class="sect2">
<h3 id="mockito_installation_eclipse"><a class="link" href="#mockito_installation_eclipse">3.5. Using IntelliJ</a></h3>
<div class="paragraph">
<p class="cye-lm-tag">If you are using IntelliJ, you should use either Gradle or Maven to manage your dependencies to Mockito.</p>
</div>
</div>
<div class="sect2">
<h3 id="mockito_installation_p2"><a class="link" href="#mockito_installation_p2">3.6. OSGi or Eclipse plug-in development</a></h3>
<div class="paragraph">
<p class="cye-lm-tag">In Eclipse RCP applications dependencies are usually obtained from p2 update sites.
The Orbit repositories are a good source for third party libraries, which can be used in Eclipse based applications or plug-ins.</p>
</div>
<div class="paragraph">
<p class="cye-lm-tag">The Orbit repositories can be found here <a href="http://download.eclipse.org/tools/orbit/downloads" class="bare">http://download.eclipse.org/tools/orbit/downloads</a></p>
</div>
<div class="imageblock">
<div class="content">
<img src="img/xorbit-p2-mockito.png.pagespeed.ic.Ed-gsryFvh.webp" alt="orbit p2 mockito" data-pagespeed-url-hash="2220436223" onload="pagespeed.CriticalImages.checkImageForCriticality(this);">
</div>
</div>
</div>
</div>
</div>
<div class="sect1 cye-lm-tag">
<h2 id="mockitousage"><a class="link" href="#mockitousage">4. Using the Mockito API</a></h2>
<div class="sectionbody cye-lm-tag">
<div class="sect2 cye-lm-tag">
<h3 id="creating-mock-objects-with-mockito"><a class="link" href="#creating-mock-objects-with-mockito">4.1. Creating mock objects with Mockito</a></h3>
<div class="paragraph">
<p class="cye-lm-tag">Mockito provides several methods to create mock objects:</p>
</div>
<div class="ulist">
<ul>
<li>
<p class="cye-lm-tag">Using the static <code>mock()</code> method.</p>
</li>
<li>
<p class="cye-lm-tag">Using the <code>@Mock</code> annotation.</p>
</li>
</ul>
</div>
<div class="paragraph cye-lm-tag">
<p class="cye-lm-tag">If you use the <code>@Mock</code> annotation, you must trigger the creation of annotated objects.
The <code>MockitoRule</code> allows this.
It invokes the static method <code>MockitoAnnotations.initMocks(this)</code> to populate the annotated fields.
Alternatively you can use <code>@RunWith(MockitoJUnitRunner.class)</code>.</p>
</div>
<div class="paragraph">
<p class="cye-lm-tag">The usage of the <code>@Mock</code> annotation and the <code>MockitoRule</code> rule is demonstrated by the following example.</p>
</div>
<div class="listingblock cye-lm-tag">
<div class="content cye-lm-tag">
<pre class="CodeRay highlight cye-lm-tag"><code data-lang="java" class="cye-lm-tag"><span class="keyword cye-lm-tag">import</span> <span class="include cye-lm-tag">static</span> <span class="include cye-lm-tag">org.mockito.Mockito</span>.*;

<span class="directive cye-lm-tag">public</span> <span class="type cye-lm-tag">class</span> <span class="class cye-lm-tag">MockitoTest</span>  {

    <span class="annotation cye-lm-tag">@Mock</span>
    MyDatabase databaseMock; <i class="conum" data-value="1"></i><b>(1)</b>

    <span class="annotation cye-lm-tag">@Rule</span> <span class="directive cye-lm-tag">public</span> MockitoRule mockitoRule = MockitoJUnit.rule(); <i class="conum" data-value="2"></i><b>(2)</b>

    <span class="annotation cye-lm-tag">@Test</span>
    <span class="directive cye-lm-tag">public</span> <span class="type cye-lm-tag">void</span> testQuery()  {
        ClassToTest t  = <span class="keyword cye-lm-tag">new</span> ClassToTest(databaseMock); <i class="conum" data-value="3"></i><b>(3)</b>
        <span class="type cye-lm-tag">boolean</span> check = t.query(<span class="string cye-lm-tag"><span class="delimiter cye-lm-tag">"</span><span class="content cye-lm-tag">* from t</span><span class="delimiter cye-lm-tag">"</span></span>); <i class="conum" data-value="4"></i><b>(4)</b>
        assertTrue(check); <i class="conum" data-value="5"></i><b>(5)</b>
        verify(databaseMock).query(<span class="string cye-lm-tag"><span class="delimiter cye-lm-tag">"</span><span class="content cye-lm-tag">* from t</span><span class="delimiter cye-lm-tag">"</span></span>); <i class="conum" data-value="6"></i><b>(6)</b>
    }
}</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Tells Mockito to mock the databaseMock instance</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Tells Mockito to create the mocks based on the @Mock annotation</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Instantiates the class under test using the created mock</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>Executes some code of the class under test</td>
</tr>
<tr>
<td><i class="conum" data-value="5"></i><b>5</b></td>
<td>Asserts that the method call returned true</td>
</tr>
<tr>
<td><i class="conum" data-value="6"></i><b>6</b></td>
<td>Verify that the query method was called on the <code>MyDatabase</code> mock</td>
</tr>
</tbody></table>
</div>
<div class="admonitionblock note">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="title">Static imports</div>
<div class="paragraph">
<p class="cye-lm-tag">By adding the <code>org.mockito.Mockito.*;</code> static import, you can use methods like <code>mock()</code> directly in your tests.
Static imports allow you to call static members, i.e., methods and fields of a class directly without specifying the class.</p>
</div>
<div class="paragraph">
<p class="cye-lm-tag">Using static imports greatly improves the readability of your test code, you should use it.</p>
</div>
</td>
</tr>
</tbody></table>
</div>
</div>
<div class="sect2 cye-lm-tag">
<h3 id="configuring-mocks"><a class="link" href="#configuring-mocks">4.2. Configuring mocks</a></h3>
<div class="paragraph">
<p class="cye-lm-tag">Mockito allows to configure the return values of its mocks via a fluent API.
Unspecified method calls return "empty" values:</p>
</div>
<div class="ulist">
<ul>
<li>
<p class="cye-lm-tag">null for objects</p>
</li>
<li>
<p class="cye-lm-tag">0 for numbers</p>
</li>
<li>
<p class="cye-lm-tag">false for boolean</p>
</li>
<li>
<p class="cye-lm-tag">empty collections for collections</p>
</li>
<li>
<p class="cye-lm-tag">…​</p>
</li>
</ul>
</div>
<div class="admonitionblock note">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="paragraph">
<p class="cye-lm-tag">The following assert statements are only for demonstration purposes, a real test would use the mocks to unit test another functionality.</p>
</div>
</td>
</tr>
</tbody></table>
</div>
<div class="sect3 cye-lm-tag">
<h4 id="when-thenreturn-and-when-thenthrow"><a class="link" href="#when-thenreturn-and-when-thenthrow">4.2.1. "when thenReturn" and "when thenThrow</a></h4>
<div class="paragraph">
<p class="cye-lm-tag">Mocks can return different values depending on arguments passed into a method.
The <code>when(…​.).thenReturn(…​.)</code> method chain is used to specify a a return value for a method call with pre-defined parameters.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="img/xwhenThenReturn10.png.pagespeed.ic.y8QFF6kLT7.webp" alt="whenThenReturn10" data-pagespeed-url-hash="939676603" onload="pagespeed.CriticalImages.checkImageForCriticality(this);">
</div>
</div>
<div class="paragraph cye-lm-tag">
<p class="cye-lm-tag">You also can use methods like <code>anyString</code> or <code>anyInt</code> to define that dependent on the input type a certain value should be returned.</p>
</div>
<div class="paragraph cye-lm-tag">
<p class="cye-lm-tag">If you specify more than one value,	they are returned in the order of specification, until the last one is used.
Afterwards the last	specified value	is returned.</p>
</div>
<div class="paragraph">
<p class="cye-lm-tag">The following demonstrates the usage of <code>when(…​.).thenReturn(…​.)</code>.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="java"><span class="keyword cye-lm-tag">import</span> <span class="include cye-lm-tag">static</span> <span class="include cye-lm-tag">org.mockito.Mockito</span>.*;
<span class="keyword cye-lm-tag">import</span> <span class="include cye-lm-tag">static</span> <span class="include cye-lm-tag">org.junit.Assert</span>.*;

<span class="annotation cye-lm-tag">@Test</span>
<span class="directive cye-lm-tag">public</span> <span class="type cye-lm-tag">void</span> test1()  {
        <span class="comment cye-lm-tag">//  create mock</span>
        MyClass test = mock(MyClass.class);

        <span class="comment cye-lm-tag">// define return value for method getUniqueId()</span>
        when(test.getUniqueId()).thenReturn(<span class="integer cye-lm-tag">43</span>);

        <span class="comment cye-lm-tag">// use mock in test....</span>
        assertEquals(test.getUniqueId(), <span class="integer cye-lm-tag">43</span>);
}


<span class="comment cye-lm-tag">// demonstrates the return of multiple values</span>
<span class="annotation cye-lm-tag">@Test</span>
<span class="directive cye-lm-tag">public</span> <span class="type cye-lm-tag">void</span> testMoreThanOneReturnValue()  {
        <span class="predefined-type cye-lm-tag">Iterator</span>&lt;<span class="predefined-type cye-lm-tag">String</span>&gt; i= mock(<span class="predefined-type cye-lm-tag">Iterator</span>.class);
        when(i.next()).thenReturn(<span class="string cye-lm-tag"><span class="delimiter cye-lm-tag">"</span><span class="content cye-lm-tag">Mockito</span><span class="delimiter cye-lm-tag">"</span></span>).thenReturn(<span class="string cye-lm-tag"><span class="delimiter cye-lm-tag">"</span><span class="content cye-lm-tag">rocks</span><span class="delimiter cye-lm-tag">"</span></span>);
        <span class="predefined-type cye-lm-tag">String</span> result= i.next()+<span class="string cye-lm-tag"><span class="delimiter cye-lm-tag">"</span><span class="content cye-lm-tag"> </span><span class="delimiter cye-lm-tag">"</span></span>+i.next();
        <span class="comment cye-lm-tag">//assert</span>
        assertEquals(<span class="string cye-lm-tag"><span class="delimiter cye-lm-tag">"</span><span class="content cye-lm-tag">Mockito rocks</span><span class="delimiter cye-lm-tag">"</span></span>, result);
}

<span class="comment cye-lm-tag">// this test demonstrates how to return values based on the input</span>
<span class="annotation cye-lm-tag">@Test</span>
<span class="directive cye-lm-tag">public</span> <span class="type cye-lm-tag">void</span> testReturnValueDependentOnMethodParameter()  {
        <span class="predefined-type cye-lm-tag">Comparable</span>&lt;<span class="predefined-type cye-lm-tag">String</span>&gt; c= mock(<span class="predefined-type cye-lm-tag">Comparable</span>.class);
        when(c.compareTo(<span class="string cye-lm-tag"><span class="delimiter cye-lm-tag">"</span><span class="content cye-lm-tag">Mockito</span><span class="delimiter cye-lm-tag">"</span></span>)).thenReturn(<span class="integer cye-lm-tag">1</span>);
        when(c.compareTo(<span class="string cye-lm-tag"><span class="delimiter cye-lm-tag">"</span><span class="content cye-lm-tag">Eclipse</span><span class="delimiter cye-lm-tag">"</span></span>)).thenReturn(<span class="integer cye-lm-tag">2</span>);
        <span class="comment cye-lm-tag">//assert</span>
        assertEquals(<span class="integer cye-lm-tag">1</span>, c.compareTo(<span class="string cye-lm-tag"><span class="delimiter cye-lm-tag">"</span><span class="content cye-lm-tag">Mockito</span><span class="delimiter cye-lm-tag">"</span></span>));
}

<span class="comment cye-lm-tag">// this test demonstrates how to return values independent of the input value</span>

<span class="annotation cye-lm-tag">@Test</span>
<span class="directive cye-lm-tag">public</span> <span class="type cye-lm-tag">void</span> testReturnValueInDependentOnMethodParameter()  {
        <span class="predefined-type cye-lm-tag">Comparable</span>&lt;<span class="predefined-type cye-lm-tag">Integer</span>&gt; c= mock(<span class="predefined-type cye-lm-tag">Comparable</span>.class);
        when(c.compareTo(anyInt())).thenReturn(-<span class="integer cye-lm-tag">1</span>);
        <span class="comment cye-lm-tag">//assert</span>
        assertEquals(-<span class="integer cye-lm-tag">1</span>, c.compareTo(<span class="integer cye-lm-tag">9</span>));
}

<span class="comment cye-lm-tag">// return a value based on the type of the provide parameter</span>

<span class="annotation cye-lm-tag">@Test</span>
<span class="directive cye-lm-tag">public</span> <span class="type cye-lm-tag">void</span> testReturnValueInDependentOnMethodParameter2()  {
        <span class="predefined-type cye-lm-tag">Comparable</span>&lt;Todo&gt; c= mock(<span class="predefined-type cye-lm-tag">Comparable</span>.class);
        when(c.compareTo(isA(Todo.class))).thenReturn(<span class="integer cye-lm-tag">0</span>);
        <span class="comment cye-lm-tag">//assert</span>
        assertEquals(<span class="integer cye-lm-tag">0</span>, c.compareTo(<span class="keyword cye-lm-tag">new</span> Todo(<span class="integer cye-lm-tag">1</span>)));
}</code></pre>
</div>
</div>
<div class="paragraph">
<p class="cye-lm-tag">The <code>when(…​.).thenReturn(…​.)</code> method chain can be used to throw an exception.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="java"><span class="predefined-type cye-lm-tag">Properties</span> properties = mock(<span class="predefined-type cye-lm-tag">Properties</span>.class);

when(properties.get(<span class="error cye-lm-tag">”</span>Anddroid<span class="error cye-lm-tag">”</span>)).thenThrow(<span class="keyword cye-lm-tag">new</span> <span class="exception cye-lm-tag">IllegalArgumentException</span>(...));

<span class="keyword cye-lm-tag">try</span> {
    properties.get(<span class="error cye-lm-tag">”</span>Anddroid<span class="error cye-lm-tag">”</span>);
    fail(<span class="error cye-lm-tag">”</span>Anddroid is misspelled<span class="error cye-lm-tag">”</span>);
} <span class="keyword cye-lm-tag">catch</span> (<span class="exception cye-lm-tag">IllegalArgumentException</span> ex) {
    <span class="comment cye-lm-tag">// good!</span>
}</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="doreturn-when-and-dothrow-when"><a class="link" href="#doreturn-when-and-dothrow-when">4.2.2. "doReturn when" and "doThrow when"</a></h4>
<div class="paragraph">
<p class="cye-lm-tag">The <code>doReturn(…​).when(…​).methodCall</code> call chain works similar to <code>when(…​.).thenReturn(…​.)</code>.
It is useful for mocking methods which give an exception during a call, e.g., if you use use functionality like <a href="#mockito_spy">Wrapping Java objects with Spy</a>.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="java">doReturnWhen.java</code></pre>
</div>
</div>
<div class="paragraph">
<p class="cye-lm-tag">The <code>doThrow</code> variant can be used for methods which return <code>void</code> to throw an exception.
This usage is demonstrated by the following code snippet.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="java"><span class="predefined-type cye-lm-tag">Properties</span> properties = <span class="keyword cye-lm-tag">new</span> <span class="predefined-type cye-lm-tag">Properties</span>();

<span class="predefined-type cye-lm-tag">Properties</span> spyProperties = spy(properties);

doReturn(<span class="error cye-lm-tag">“</span><span class="integer cye-lm-tag">42</span><span class="error cye-lm-tag">”</span>).when(spyProperties).get(<span class="error cye-lm-tag">”</span>shoeSize<span class="error cye-lm-tag">”</span>);

<span class="predefined-type cye-lm-tag">String</span> value = spyProperties.get(<span class="error cye-lm-tag">”</span>shoeSize<span class="error cye-lm-tag">”</span>);

assertEquals(<span class="error cye-lm-tag">”</span><span class="integer cye-lm-tag">42</span><span class="error cye-lm-tag">”</span>, value);</code></pre>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="mockito_spy"><a class="link" href="#mockito_spy">4.3. Wrapping Java objects with Spy</a></h3>
<div class="paragraph">
<p class="cye-lm-tag">@Spy or the <code>spy()</code> 	method can be used to wrap a real object.
Every call, unless specified otherwise, is delegated to the object.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="java"><span class="keyword cye-lm-tag">import</span> <span class="include cye-lm-tag">static</span> <span class="include cye-lm-tag">org.mockito.Mockito</span>.*;

<span class="annotation cye-lm-tag">@Test</span>
<span class="directive cye-lm-tag">public</span> <span class="type cye-lm-tag">void</span> testLinkedListSpyWrong() {
    <span class="comment cye-lm-tag">// Lets mock a LinkedList</span>
    <span class="predefined-type cye-lm-tag">List</span>&lt;<span class="predefined-type cye-lm-tag">String</span>&gt; list = <span class="keyword cye-lm-tag">new</span> <span class="predefined-type cye-lm-tag">LinkedList</span>&lt;&gt;();
    <span class="predefined-type cye-lm-tag">List</span>&lt;<span class="predefined-type cye-lm-tag">String</span>&gt; spy = spy(list);

    <span class="comment cye-lm-tag">// this does not work</span>
    <span class="comment cye-lm-tag">// real method is called so spy.get(0)</span>
    <span class="comment cye-lm-tag">// throws IndexOutOfBoundsException (list is still empty)</span>
    when(spy.get(<span class="integer cye-lm-tag">0</span>)).thenReturn(<span class="string cye-lm-tag"><span class="delimiter cye-lm-tag">"</span><span class="content cye-lm-tag">foo</span><span class="delimiter cye-lm-tag">"</span></span>);

    assertEquals(<span class="string cye-lm-tag"><span class="delimiter cye-lm-tag">"</span><span class="content cye-lm-tag">foo</span><span class="delimiter cye-lm-tag">"</span></span>, spy.get(<span class="integer cye-lm-tag">0</span>));
}

<span class="annotation cye-lm-tag">@Test</span>
<span class="directive cye-lm-tag">public</span> <span class="type cye-lm-tag">void</span> testLinkedListSpyCorrect() {
    <span class="comment cye-lm-tag">// Lets mock a LinkedList</span>
    <span class="predefined-type cye-lm-tag">List</span>&lt;<span class="predefined-type cye-lm-tag">String</span>&gt; list = <span class="keyword cye-lm-tag">new</span> <span class="predefined-type cye-lm-tag">LinkedList</span>&lt;&gt;();
    <span class="predefined-type cye-lm-tag">List</span>&lt;<span class="predefined-type cye-lm-tag">String</span>&gt; spy = spy(list);

    <span class="comment cye-lm-tag">// You have to use doReturn() for stubbing</span>
    doReturn(<span class="string cye-lm-tag"><span class="delimiter cye-lm-tag">"</span><span class="content cye-lm-tag">foo</span><span class="delimiter cye-lm-tag">"</span></span>).when(spy).get(<span class="integer cye-lm-tag">0</span>);

    assertEquals(<span class="string cye-lm-tag"><span class="delimiter cye-lm-tag">"</span><span class="content cye-lm-tag">foo</span><span class="delimiter cye-lm-tag">"</span></span>, spy.get(<span class="integer cye-lm-tag">0</span>));
}</code></pre>
</div>
</div>
</div>
<div class="sect2 cye-lm-tag">
<h3 id="mockito_verify"><a class="link" href="#mockito_verify">4.4. Verify the calls on the mock objects</a></h3>
<div class="paragraph cye-lm-tag">
<p class="cye-lm-tag">Mockito keeps track of all the method calls and their parameters to the mock object.
You can use the <code>verify()</code> method on the mock object to verify that the specified conditions are met.
For example, you can verify that a method has been called with certain parameters.
This kind of testing is sometimes called <em>behavior testing</em>.
Behavior testing does not check the result of a method call, but it checks that a method is called with the right parameters.</p>
</div>
<div class="listingblock cye-lm-tag">
<div class="content cye-lm-tag">
<pre class="CodeRay highlight cye-lm-tag"><code data-lang="java" class="cye-lm-tag"><span class="keyword cye-lm-tag">import</span> <span class="include cye-lm-tag">static</span> <span class="include cye-lm-tag">org.mockito.Mockito</span>.*;

<span class="annotation cye-lm-tag">@Test</span>
<span class="directive cye-lm-tag">public</span> <span class="type cye-lm-tag">void</span> testVerify()  {
    <span class="comment cye-lm-tag">// create and configure mock</span>
    MyClass test = Mockito.mock(MyClass.class);
    when(test.getUniqueId()).thenReturn(<span class="integer cye-lm-tag">43</span>);


    <span class="comment cye-lm-tag">// call method testing on the mock with parameter 12</span>
    test.testing(<span class="integer cye-lm-tag">12</span>);
    test.getUniqueId();
    test.getUniqueId();


    <span class="comment cye-lm-tag">// now check if method testing was called with the parameter 12</span>
    verify(test).testing(ArgumentMatchers.eq(<span class="integer cye-lm-tag">12</span>));

    <span class="comment cye-lm-tag">// was the method called twice?</span>
    verify(test, times(<span class="integer cye-lm-tag">2</span>)).getUniqueId();

    <span class="comment cye-lm-tag">// other alternatives for verifiying the number of method calls for a method</span>
    verify(test, never()).someMethod(<span class="string cye-lm-tag"><span class="delimiter cye-lm-tag">"</span><span class="content cye-lm-tag">never called</span><span class="delimiter cye-lm-tag">"</span></span>);
    verify(test, atLeastOnce()).someMethod(<span class="string cye-lm-tag"><span class="delimiter cye-lm-tag">"</span><span class="content cye-lm-tag">called at least once</span><span class="delimiter cye-lm-tag">"</span></span>);
    verify(test, atLeast(<span class="integer cye-lm-tag">2</span>)).someMethod(<span class="string cye-lm-tag"><span class="delimiter cye-lm-tag">"</span><span class="content cye-lm-tag">called at least twice</span><span class="delimiter cye-lm-tag">"</span></span>);
    verify(test, times(<span class="integer cye-lm-tag">5</span>)).someMethod(<span class="string cye-lm-tag"><span class="delimiter cye-lm-tag">"</span><span class="content cye-lm-tag">called five times</span><span class="delimiter cye-lm-tag">"</span></span>);
    verify(test, atMost(<span class="integer cye-lm-tag">3</span>)).someMethod(<span class="string cye-lm-tag"><span class="delimiter cye-lm-tag">"</span><span class="content cye-lm-tag">called at most 3 times</span><span class="delimiter cye-lm-tag">"</span></span>);
    <span class="comment cye-lm-tag">// This let's you check that no other methods where called on this object.</span>
    <span class="comment cye-lm-tag">// You call it after you have verified the expected method calls.</span>
    verifyNoMoreInteractions(test);
}</code></pre>
</div>
</div>
<div class="paragraph">
<p class="cye-lm-tag">In case you do not care about the value, use the <code>anyX</code>, e.g., <code>anyInt</code>, <code>anyString()</code>, or <code>any(YourClass.class)</code> methods.</p>
</div>
</div>
<div class="sect2">
<h3 id="mockito_dependencyinjection"><a class="link" href="#mockito_dependencyinjection">4.5. Using @InjectMocks for dependency injection via Mockito</a></h3>
<div class="paragraph">
<p class="cye-lm-tag">You also have the <code>@InjectMocks</code> annotation which tries to do constructor, method or field dependency injection based on the type.
For example, assume that you have the following class.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="java"><span class="directive cye-lm-tag">public</span> <span class="type cye-lm-tag">class</span> <span class="class cye-lm-tag">ArticleManager</span> {
    <span class="directive cye-lm-tag">private</span> User user;
    <span class="directive cye-lm-tag">private</span> ArticleDatabase database;

    <span class="directive cye-lm-tag">public</span> ArticleManager(User user, ArticleDatabase database) {
        <span class="local-variable cye-lm-tag">super</span>();
        <span class="local-variable cye-lm-tag">this</span>.user = user;
        <span class="local-variable cye-lm-tag">this</span>.database = database;
    }

    <span class="directive cye-lm-tag">public</span> <span class="type cye-lm-tag">void</span> initialize() {
        database.addListener(<span class="keyword cye-lm-tag">new</span> ArticleListener());
    }
}</code></pre>
</div>
</div>
<div class="paragraph">
<p class="cye-lm-tag">This class can be constructed via Mockito and its dependencies can be fulfilled with mock objects as demonstrated by the following code snippet.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="java"><span class="annotation cye-lm-tag">@RunWith</span>(MockitoJUnitRunner.class)
<span class="directive cye-lm-tag">public</span> <span class="type cye-lm-tag">class</span> <span class="class cye-lm-tag">ArticleManagerTest</span>  {

       <span class="annotation cye-lm-tag">@Mock</span> ArticleCalculator calculator;
       <span class="annotation cye-lm-tag">@Mock</span> ArticleDatabase database;
       <span class="annotation cye-lm-tag">@Mock</span> User user;

       <span class="annotation cye-lm-tag">@Spy</span> <span class="directive cye-lm-tag">private</span> UserProvider userProvider = <span class="keyword cye-lm-tag">new</span> ConsumerUserProvider();

       <span class="annotation cye-lm-tag">@InjectMocks</span> <span class="directive cye-lm-tag">private</span> ArticleManager manager; <i class="conum" data-value="1"></i><b>(1)</b>

       <span class="annotation cye-lm-tag">@Test</span> <span class="directive cye-lm-tag">public</span> <span class="type cye-lm-tag">void</span> shouldDoSomething() {
           <span class="comment cye-lm-tag">// calls addListener with an instance of ArticleListener</span>
           manager.initialize();

           <span class="comment cye-lm-tag">// validate that addListener was called</span>
           verify(database).addListener(any(ArticleListener.class));
       }
}</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>creates an instance of <code>ArticleManager</code> and injects the mocks into it</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p class="cye-lm-tag">Mockito can inject mocks either via constructor injection, setter injection, or property injection and in this order.
So if <code>ArticleManager</code> would have a constructor that would only take <code>User</code> and setters for both fields, only the mock for <code>User</code> would be injected.</p>
</div>
</div>
<div class="sect2">
<h3 id="capturing-the-arguments"><a class="link" href="#capturing-the-arguments">4.6. Capturing the arguments</a></h3>
<div class="paragraph">
<p class="cye-lm-tag">The <code>ArgumentCaptor</code> class allows to access the arguments of method calls during the verification.
This allows to capture these arguments of method calls and to use them for tests.</p>
</div>
<div class="paragraph">
<p class="cye-lm-tag">To run this example you need to add <a href="https://mvnrepository.com/artifact/org.hamcrest/hamcrest-library">hamcrest-library</a> to your project.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="java"><span class="keyword cye-lm-tag">import</span> <span class="include cye-lm-tag">static</span> <span class="include cye-lm-tag">org.hamcrest.Matchers.hasItem</span>;
<span class="keyword cye-lm-tag">import</span> <span class="include cye-lm-tag">static</span> <span class="include cye-lm-tag">org.junit.Assert.assertThat</span>;
<span class="keyword cye-lm-tag">import</span> <span class="include cye-lm-tag">static</span> <span class="include cye-lm-tag">org.mockito.Mockito.mock</span>;
<span class="keyword cye-lm-tag">import</span> <span class="include cye-lm-tag">static</span> <span class="include cye-lm-tag">org.mockito.Mockito.verify</span>;

<span class="keyword cye-lm-tag">import</span> <span class="include cye-lm-tag">java.util.Arrays</span>;
<span class="keyword cye-lm-tag">import</span> <span class="include cye-lm-tag">java.util.List</span>;

<span class="keyword cye-lm-tag">import</span> <span class="include cye-lm-tag">org.junit.Rule</span>;
<span class="keyword cye-lm-tag">import</span> <span class="include cye-lm-tag">org.junit.Test</span>;
<span class="keyword cye-lm-tag">import</span> <span class="include cye-lm-tag">org.mockito.ArgumentCaptor</span>;
<span class="keyword cye-lm-tag">import</span> <span class="include cye-lm-tag">org.mockito.Captor</span>;
<span class="keyword cye-lm-tag">import</span> <span class="include cye-lm-tag">org.mockito.junit.MockitoJUnit</span>;
<span class="keyword cye-lm-tag">import</span> <span class="include cye-lm-tag">org.mockito.junit.MockitoRule</span>;


<span class="directive cye-lm-tag">public</span> <span class="type cye-lm-tag">class</span> <span class="class cye-lm-tag">MockitoTests</span> {

    <span class="annotation cye-lm-tag">@Rule</span>
    <span class="directive cye-lm-tag">public</span> MockitoRule rule = MockitoJUnit.rule();

    <span class="annotation cye-lm-tag">@Captor</span>
    <span class="directive cye-lm-tag">private</span> ArgumentCaptor&lt;<span class="predefined-type cye-lm-tag">List</span>&lt;<span class="predefined-type cye-lm-tag">String</span>&gt;&gt; captor;


    <span class="annotation cye-lm-tag">@Test</span>
    <span class="directive cye-lm-tag">public</span> <span class="directive cye-lm-tag">final</span> <span class="type cye-lm-tag">void</span> shouldContainCertainListItem() {
        <span class="predefined-type cye-lm-tag">List</span>&lt;<span class="predefined-type cye-lm-tag">String</span>&gt; asList = <span class="predefined-type cye-lm-tag">Arrays</span>.asList(<span class="string cye-lm-tag"><span class="delimiter cye-lm-tag">"</span><span class="content cye-lm-tag">someElement_test</span><span class="delimiter cye-lm-tag">"</span></span>, <span class="string cye-lm-tag"><span class="delimiter cye-lm-tag">"</span><span class="content cye-lm-tag">someElement</span><span class="delimiter cye-lm-tag">"</span></span>);
        <span class="directive cye-lm-tag">final</span> <span class="predefined-type cye-lm-tag">List</span>&lt;<span class="predefined-type cye-lm-tag">String</span>&gt; mockedList = mock(<span class="predefined-type cye-lm-tag">List</span>.class);
        mockedList.addAll(asList);

        verify(mockedList).addAll(captor.capture());
        <span class="directive cye-lm-tag">final</span> <span class="predefined-type cye-lm-tag">List</span>&lt;<span class="predefined-type cye-lm-tag">String</span>&gt; capturedArgument = captor.getValue();
        assertThat(capturedArgument, hasItem(<span class="string cye-lm-tag"><span class="delimiter cye-lm-tag">"</span><span class="content cye-lm-tag">someElement</span><span class="delimiter cye-lm-tag">"</span></span>));
    }
}</code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="mockito_answers"><a class="link" href="#mockito_answers">4.7. Using Answers for complex mocks</a></h3>
<div class="paragraph">
<p class="cye-lm-tag">It is possible to define a <code>Answer</code> object for complex results.
While <code>thenReturn</code> returns a predefined value every time,
with answers you can calculate a response based on the arguments given to your stubbed method.
This can be useful if your stubbed method is supposed to call a function on one of the arguments
or if your method is supposed to return the first argument to allow method chaining.
There exists a static method for the latter.
Also note that there a different ways to configure an answer:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="java"><span class="keyword cye-lm-tag">import</span> <span class="include cye-lm-tag">static</span> <span class="include cye-lm-tag">org.mockito.AdditionalAnswers.returnsFirstArg</span>;

<span class="annotation cye-lm-tag">@Test</span>
<span class="directive cye-lm-tag">public</span> <span class="directive cye-lm-tag">final</span> <span class="type cye-lm-tag">void</span> answerTest() {
    <span class="comment cye-lm-tag">// with doAnswer():</span>
    doAnswer(returnsFirstArg()).when(list).add(anyString());
    <span class="comment cye-lm-tag">// with thenAnswer():</span>
    when(list.add(anyString())).thenAnswer(returnsFirstArg());
    <span class="comment cye-lm-tag">// with then() alias:</span>
    when(list.add(anyString())).then(returnsFirstArg());
}</code></pre>
</div>
</div>
<div class="paragraph">
<p class="cye-lm-tag">Or if you need to do a callback on your argument:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="java"><span class="annotation cye-lm-tag">@Test</span>
<span class="directive cye-lm-tag">public</span> <span class="directive cye-lm-tag">final</span> <span class="type cye-lm-tag">void</span> callbackTest() {
    ApiService service = mock(ApiService.class);
    when(service.login(any(<span class="predefined-type cye-lm-tag">Callback</span>.class))).thenAnswer(i -&gt; {
        <span class="predefined-type cye-lm-tag">Callback</span> callback = i.getArgument(<span class="integer cye-lm-tag">0</span>);
        callback.notify(<span class="string cye-lm-tag"><span class="delimiter cye-lm-tag">"</span><span class="content cye-lm-tag">Success</span><span class="delimiter cye-lm-tag">"</span></span>);
        <span class="keyword cye-lm-tag">return</span> <span class="predefined-constant cye-lm-tag">null</span>;
    });
}</code></pre>
</div>
</div>
<div class="paragraph">
<p class="cye-lm-tag">It is even possible to mock a persistence service like an DAO,
but you should consider creating a fake class instead of a mock if your Answers become too complex.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="java"><span class="predefined-type cye-lm-tag">List</span>&lt;User&gt; userMap = <span class="keyword cye-lm-tag">new</span> <span class="predefined-type cye-lm-tag">ArrayList</span>&lt;&gt;();
UserDao dao = mock(UserDao.class);
when(dao.save(any(User.class))).thenAnswer(i -&gt; {
    User user = i.getArgument(<span class="integer cye-lm-tag">0</span>);
    userMap.add(user.getId(), user);
    <span class="keyword cye-lm-tag">return</span> <span class="predefined-constant cye-lm-tag">null</span>;
});
when(dao.find(any(<span class="predefined-type cye-lm-tag">Integer</span>.class))).thenAnswer(i -&gt; {
    <span class="type cye-lm-tag">int</span> id = i.getArgument(<span class="integer cye-lm-tag">0</span>);
    <span class="keyword cye-lm-tag">return</span> userMap.get(id);
});</code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="mocking-final-classes"><a class="link" href="#mocking-final-classes">4.8. Mocking final classes</a></h3>
<div class="paragraph">
<p class="cye-lm-tag">Since Mockito v2 it is possible to mock final classes.
This feature is incubating and is deactivated by default.
To activate the mocking of final classes create the file <code>org.mockito.plugins.MockMaker</code> in either <code>src/test/resources/mockito-extensions/</code> or <code>src/mockito-extensions/</code>.
Add this line to the file: <em>mock-maker-inline</em>.
With this modification we now can mock a final class.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="java"><span class="directive cye-lm-tag">final</span> <span class="type cye-lm-tag">class</span> <span class="class cye-lm-tag">FinalClass</span> {
    <span class="directive cye-lm-tag">public</span> <span class="directive cye-lm-tag">final</span> <span class="predefined-type cye-lm-tag">String</span> finalMethod() { <span class="keyword cye-lm-tag">return</span> <span class="string cye-lm-tag"><span class="delimiter cye-lm-tag">"</span><span class="content cye-lm-tag">something</span><span class="delimiter cye-lm-tag">"</span></span>; }
}

<span class="annotation cye-lm-tag">@Test</span>
<span class="directive cye-lm-tag">public</span> <span class="directive cye-lm-tag">final</span> <span class="type cye-lm-tag">void</span> mockFinalClassTest() {
     FinalClass instance = <span class="keyword cye-lm-tag">new</span> FinalClass();

     FinalClass mock = mock(FinalClass.class);
     when(mock.finalMethod()).thenReturn(<span class="string cye-lm-tag"><span class="delimiter cye-lm-tag">"</span><span class="content cye-lm-tag">that other thing</span><span class="delimiter cye-lm-tag">"</span></span>);

     assertNotEquals(mock.finalMethod(), instance.finalMethod());
}</code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="clean-test-code-with-the-help-of-the-strict-stubs-rule"><a class="link" href="#clean-test-code-with-the-help-of-the-strict-stubs-rule">4.9. Clean test code with the help of the strict stubs rule</a></h3>
<div class="paragraph">
<p class="cye-lm-tag">The strict stubs rule helps you to keep your test code clean and checks for common oversights.
It adds the following:</p>
</div>
<div class="ulist">
<ul>
<li>
<p class="cye-lm-tag">test fails early when a stubbed method gets called with different arguments than what it was configured for (with <code>PotentialStubbingProblem</code> exception).</p>
</li>
<li>
<p class="cye-lm-tag">test fails when a stubbed method isn’t called (with <code>UnnecessaryStubbingException</code> exception).</p>
</li>
<li>
<p class="cye-lm-tag">org.mockito.Mockito.verifyNoMoreInteractions(Object) also verifies that all stubbed methods have been called during the test</p>
</li>
</ul>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="java"><span class="annotation cye-lm-tag">@Test</span>
<span class="directive cye-lm-tag">public</span> <span class="type cye-lm-tag">void</span> withoutStrictStubsTest() <span class="directive cye-lm-tag">throws</span> <span class="exception cye-lm-tag">Exception</span> {
    DeepThought deepThought = mock(DeepThought.class);

    when(deepThought.getAnswerFor(<span class="string cye-lm-tag"><span class="delimiter cye-lm-tag">"</span><span class="content cye-lm-tag">Ultimate Question of Life, The Universe, and Everything</span><span class="delimiter cye-lm-tag">"</span></span>)).thenReturn(<span class="integer cye-lm-tag">42</span>);
    when(deepThought.otherMethod(<span class="string cye-lm-tag"><span class="delimiter cye-lm-tag">"</span><span class="content cye-lm-tag">some mundane thing</span><span class="delimiter cye-lm-tag">"</span></span>)).thenReturn(<span class="predefined-constant cye-lm-tag">null</span>);

    <span class="predefined-type cye-lm-tag">System</span>.out.println(deepThought.getAnswerFor(<span class="string cye-lm-tag"><span class="delimiter cye-lm-tag">"</span><span class="content cye-lm-tag">Six by nine</span><span class="delimiter cye-lm-tag">"</span></span>));

    assertEquals(<span class="integer cye-lm-tag">42</span>, deepThought.getAnswerFor(<span class="string cye-lm-tag"><span class="delimiter cye-lm-tag">"</span><span class="content cye-lm-tag">Ultimate Question of Life, The Universe, and Everything</span><span class="delimiter cye-lm-tag">"</span></span>));
    verify(deepThought, times(<span class="integer cye-lm-tag">1</span>)).getAnswerFor(<span class="string cye-lm-tag"><span class="delimiter cye-lm-tag">"</span><span class="content cye-lm-tag">Ultimate Question of Life, The Universe, and Everything</span><span class="delimiter cye-lm-tag">"</span></span>);
}</code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="java"><span class="comment cye-lm-tag">// activate the strict subs rule</span>
<span class="annotation cye-lm-tag">@Rule</span> <span class="directive cye-lm-tag">public</span> MockitoRule rule = MockitoJUnit.rule().strictness(Strictness.STRICT_STUBS);

<span class="annotation cye-lm-tag">@Test</span>
<span class="directive cye-lm-tag">public</span> <span class="type cye-lm-tag">void</span> withStrictStubsTest() <span class="directive cye-lm-tag">throws</span> <span class="exception cye-lm-tag">Exception</span> {
    DeepThought deepThought = mock(DeepThought.class);

    when(deepThought.getAnswerFor(<span class="string cye-lm-tag"><span class="delimiter cye-lm-tag">"</span><span class="content cye-lm-tag">Ultimate Question of Life, The Universe, and Everything</span><span class="delimiter cye-lm-tag">"</span></span>)).thenReturn(<span class="integer cye-lm-tag">42</span>);
    <span class="comment cye-lm-tag">// this fails now with an UnnecessaryStubbingException since it is never called in the test</span>
    when(deepThought.otherMethod(<span class="string cye-lm-tag"><span class="delimiter cye-lm-tag">"</span><span class="content cye-lm-tag">some mundane thing</span><span class="delimiter cye-lm-tag">"</span></span>)).thenReturn(<span class="predefined-constant cye-lm-tag">null</span>);

    <span class="comment cye-lm-tag">// this will now throw a PotentialStubbingProblem Exception since we usually don't want to call methods on mocks without configured behavior</span>
    deepThought.someMethod();

    assertEquals(<span class="integer cye-lm-tag">42</span>, deepThought.getAnswerFor(<span class="string cye-lm-tag"><span class="delimiter cye-lm-tag">"</span><span class="content cye-lm-tag">Ultimate Question of Life, The Universe, and Everything</span><span class="delimiter cye-lm-tag">"</span></span>));
    <span class="comment cye-lm-tag">// verifyNoMoreInteractions now automatically verifies that all stubbed methods have been called as well</span>
    verifyNoMoreInteractions(deepThought);
}</code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="mockito_limitations"><a class="link" href="#mockito_limitations">4.10. Limitations</a></h3>
<div class="paragraph">
<p class="cye-lm-tag">Mockito has certain limitations.
For example, you cannot mock static methods and <a href="https://github.com/mockito/mockito/wiki/Mockito-And-Private-Methods">private methods</a>.</p>
</div>
<div class="paragraph">
<p class="cye-lm-tag">See <a href="https://github.com/mockito/mockito/wiki/FAQ#what-are-the-limitations-of-mockito">FAQ for Mockito limitations for the details</a></p>
</div>
</div>
<div class="sect2">
<h3 id="behavior-testing-vrs-state-testing"><a class="link" href="#behavior-testing-vrs-state-testing">4.11. Behavior testing vrs. state testing</a></h3>
<div class="paragraph">
<p class="cye-lm-tag">Mockito puts a focus on behavior testing, vrs. result testing.
This is not always correct, for example, if you are testing a sort algorithm, you should test the result not the internal behavior.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="java"><span class="comment cye-lm-tag">// state testing</span>
testSort() {
    testList = [<span class="integer cye-lm-tag">1</span>, <span class="integer cye-lm-tag">7</span>, <span class="integer cye-lm-tag">3</span>, <span class="integer cye-lm-tag">8</span>, <span class="integer cye-lm-tag">2</span>]
    MySorter.sort(testList)

    <span class="keyword cye-lm-tag">assert</span> testList equals [<span class="integer cye-lm-tag">1</span>, <span class="integer cye-lm-tag">2</span>, <span class="integer cye-lm-tag">3</span>, <span class="integer cye-lm-tag">7</span>, <span class="integer cye-lm-tag">8</span>]
}


<span class="comment cye-lm-tag">// incorrect would be behavior testing</span>
<span class="comment cye-lm-tag">// the following tests internal of the implementation</span>
testSort() {
    testList = [<span class="integer cye-lm-tag">1</span>, <span class="integer cye-lm-tag">7</span>, <span class="integer cye-lm-tag">3</span>, <span class="integer cye-lm-tag">8</span>, <span class="integer cye-lm-tag">2</span>]
    MySorter.sort(testList)

    <span class="keyword cye-lm-tag">assert</span> that compare(<span class="integer cye-lm-tag">1</span>, <span class="integer cye-lm-tag">2</span>) was called once
    <span class="keyword cye-lm-tag">assert</span> that compare(<span class="integer cye-lm-tag">1</span>, <span class="integer cye-lm-tag">3</span>) was not called
    <span class="keyword cye-lm-tag">assert</span> that compare(<span class="integer cye-lm-tag">2</span>, <span class="integer cye-lm-tag">3</span>) was called once
    ....
}</code></pre>
</div>
</div>
<!-- Responsive Lake Quincy Ads -->
<div id="ad-inBetween02">
	<script type="text/javascript">googletag.cmd.push(function(){googletag.display('ad-inBetween02');});</script>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="exercise_mockito_android"><a class="link" href="#exercise_mockito_android">5. Exercise: Write an instrumented unit test using Mockito</a></h2>
<div class="sectionbody">
<div class="sect2">
<h3 id="mockito_android1"><a class="link" href="#mockito_android1">5.1. Create Application under tests on Android</a></h3>
<div class="paragraph">
<p class="cye-lm-tag">Create an Android application with the package name <code>com.vogella.android.testing.mockito.contextmock</code>.
Add a <code>Util</code> class with a static method which allows to create an intent with certain parameters as in the following example.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="java"><span class="keyword cye-lm-tag">package</span> <span class="namespace cye-lm-tag">com.vogella.android.testing.mockito.contextmock</span>;

<span class="keyword cye-lm-tag">import</span> <span class="include cye-lm-tag">android.content.Context</span>;
<span class="keyword cye-lm-tag">import</span> <span class="include cye-lm-tag">android.content.Intent</span>;

<span class="directive cye-lm-tag">public</span> <span class="type cye-lm-tag">class</span> <span class="class cye-lm-tag">Util</span> {

    <span class="directive cye-lm-tag">public</span> <span class="directive cye-lm-tag">static</span> Intent createQuery(<span class="predefined-type cye-lm-tag">Context</span> context, <span class="predefined-type cye-lm-tag">String</span> query, <span class="predefined-type cye-lm-tag">String</span> value) {
        <span class="comment cye-lm-tag">// Reuse MainActivity for simplification</span>
        Intent i = <span class="keyword cye-lm-tag">new</span> Intent(context, MainActivity.class);
        i.putExtra(<span class="string cye-lm-tag"><span class="delimiter cye-lm-tag">"</span><span class="content cye-lm-tag">QUERY</span><span class="delimiter cye-lm-tag">"</span></span>, query);
        i.putExtra(<span class="string cye-lm-tag"><span class="delimiter cye-lm-tag">"</span><span class="content cye-lm-tag">VALUE</span><span class="delimiter cye-lm-tag">"</span></span>, value);
        <span class="keyword cye-lm-tag">return</span> i;
    }
}</code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="mockito_android2"><a class="link" href="#mockito_android2">5.2. Add the Mockito dependency to the app/build.gradle file</a></h3>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="groovy">dependencies {
    <span class="comment cye-lm-tag">// ... more entries</span>
    testCompile <span class="string cye-lm-tag"><span class="delimiter cye-lm-tag">'</span><span class="content cye-lm-tag">junit:junit:4.12</span><span class="delimiter cye-lm-tag">'</span></span>

    <span class="comment cye-lm-tag">// required if you want to use Mockito for unit tests</span>
    testCompile <span class="string cye-lm-tag"><span class="delimiter cye-lm-tag">'</span><span class="content cye-lm-tag">org.mockito:mockito-core:2.7.22</span><span class="delimiter cye-lm-tag">'</span></span>
    <span class="comment cye-lm-tag">// required if you want to use Mockito for Android tests</span>
    androidTestCompile <span class="string cye-lm-tag"><span class="delimiter cye-lm-tag">'</span><span class="content cye-lm-tag">org.mockito:mockito-android:2.7.22</span><span class="delimiter cye-lm-tag">'</span></span>
}</code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="mockito_android_createtest"><a class="link" href="#mockito_android_createtest">5.3. Create test</a></h3>
<div class="paragraph">
<p class="cye-lm-tag">Create a new unit test running on Android using Mockito in the <code>androidTest</code> folder.
This test should check if the intent contains the correct extras.
For this you mock the <code>Context</code> object with Mockito.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="java"><span class="keyword cye-lm-tag">package</span> <span class="namespace cye-lm-tag">com.vogella.android.testing.mockito.contextmock</span>;

<span class="keyword cye-lm-tag">import</span> <span class="include cye-lm-tag">android.content.Context</span>;
<span class="keyword cye-lm-tag">import</span> <span class="include cye-lm-tag">android.content.Intent</span>;
<span class="keyword cye-lm-tag">import</span> <span class="include cye-lm-tag">android.os.Bundle</span>;
<span class="keyword cye-lm-tag">import</span> <span class="include cye-lm-tag">android.support.test.runner.AndroidJUnit4</span>;

<span class="keyword cye-lm-tag">import</span> <span class="include cye-lm-tag">org.junit.Test</span>;
<span class="keyword cye-lm-tag">import</span> <span class="include cye-lm-tag">org.junit.runner.RunWith</span>;

<span class="keyword cye-lm-tag">import</span> <span class="include cye-lm-tag">static</span> <span class="include cye-lm-tag">org.junit.Assert.assertEquals</span>;
<span class="keyword cye-lm-tag">import</span> <span class="include cye-lm-tag">static</span> <span class="include cye-lm-tag">org.junit.Assert.assertNotNull</span>;
<span class="keyword cye-lm-tag">import</span> <span class="include cye-lm-tag">static</span> <span class="include cye-lm-tag">org.mockito.Mockito.mock</span>;

<span class="annotation cye-lm-tag">@RunWith</span>(AndroidJUnit4.class)
<span class="directive cye-lm-tag">public</span> <span class="type cye-lm-tag">class</span> <span class="class cye-lm-tag">UtilTest2</span> {

    <span class="annotation cye-lm-tag">@Test</span>
    <span class="directive cye-lm-tag">public</span> <span class="type cye-lm-tag">void</span> shouldContainTheCorrectExtras()  <span class="directive cye-lm-tag">throws</span> <span class="exception cye-lm-tag">Exception</span> {
        <span class="predefined-type cye-lm-tag">Context</span> context = mock(<span class="predefined-type cye-lm-tag">Context</span>.class);
        Intent intent = <span class="predefined-type cye-lm-tag">Util</span>.createQuery(context, <span class="string cye-lm-tag"><span class="delimiter cye-lm-tag">"</span><span class="content cye-lm-tag">query</span><span class="delimiter cye-lm-tag">"</span></span>, <span class="string cye-lm-tag"><span class="delimiter cye-lm-tag">"</span><span class="content cye-lm-tag">value</span><span class="delimiter cye-lm-tag">"</span></span>);
        assertNotNull(intent);
        Bundle extras = intent.getExtras();
        assertNotNull(extras);
        assertEquals(<span class="string cye-lm-tag"><span class="delimiter cye-lm-tag">"</span><span class="content cye-lm-tag">query</span><span class="delimiter cye-lm-tag">"</span></span>, extras.getString(<span class="string cye-lm-tag"><span class="delimiter cye-lm-tag">"</span><span class="content cye-lm-tag">QUERY</span><span class="delimiter cye-lm-tag">"</span></span>));
        assertEquals(<span class="string cye-lm-tag"><span class="delimiter cye-lm-tag">"</span><span class="content cye-lm-tag">value</span><span class="delimiter cye-lm-tag">"</span></span>, extras.getString(<span class="string cye-lm-tag"><span class="delimiter cye-lm-tag">"</span><span class="content cye-lm-tag">VALUE</span><span class="delimiter cye-lm-tag">"</span></span>));
    }
}</code></pre>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="exercise-creating-mock-objects-using-mockito"><a class="link" href="#exercise-creating-mock-objects-using-mockito">6. Exercise: Creating mock objects using Mockito</a></h2>
<div class="sectionbody">
<div class="sect2">
<h3 id="target"><a class="link" href="#target">6.1. Target</a></h3>
<div class="paragraph">
<p class="cye-lm-tag">Create an API, which can be mocked and use Mockito to do the job.</p>
</div>
</div>
<div class="sect2">
<h3 id="create-a-sample-twitter-api"><a class="link" href="#create-a-sample-twitter-api">6.2. Create a sample Twitter API</a></h3>
<div class="paragraph">
<p class="cye-lm-tag">Implement a <code>TwitterClient</code>, which works with <code>ITweet</code> instances.
But imagine these <code>ITweet</code> instances are pretty cumbersome to get, e.g., by using a complex service, which would have to be started.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="java"><span class="directive cye-lm-tag">public</span> <span class="type cye-lm-tag">interface</span> <span class="class cye-lm-tag">ITweet</span> {

    <span class="predefined-type cye-lm-tag">String</span> getMessage();
}</code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="java"><span class="directive cye-lm-tag">public</span> <span class="type cye-lm-tag">class</span> <span class="class cye-lm-tag">TwitterClient</span> {

    <span class="directive cye-lm-tag">public</span> <span class="type cye-lm-tag">void</span> sendTweet(ITweet tweet) {
        <span class="predefined-type cye-lm-tag">String</span> message = tweet.getMessage();

        <span class="comment cye-lm-tag">// send the message to Twitter</span>
    }
}</code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="mocking-itweet-instances"><a class="link" href="#mocking-itweet-instances">6.3. Mocking ITweet instances</a></h3>
<div class="paragraph">
<p class="cye-lm-tag">In order to avoid starting up a complex service to get <code>ITweet</code> instances, they can also be mocked by Mockito.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="java"><span class="annotation cye-lm-tag">@Test</span>
<span class="directive cye-lm-tag">public</span> <span class="type cye-lm-tag">void</span> testSendingTweet() {
    TwitterClient twitterClient = <span class="keyword cye-lm-tag">new</span> TwitterClient();

    ITweet iTweet = mock(ITweet.class);

    when(iTweet.getMessage()).thenReturn(<span class="string cye-lm-tag"><span class="delimiter cye-lm-tag">"</span><span class="content cye-lm-tag">Using mockito is great</span><span class="delimiter cye-lm-tag">"</span></span>);

    twitterClient.sendTweet(iTweet);
}</code></pre>
</div>
</div>
<div class="paragraph">
<p class="cye-lm-tag">Now the <code>TwitterClient</code> can make use of a mocked <code>ITweet</code> instance and will get "Using Mockito is great" as message when calling <code>getMessage()</code> on the mocked <code>ITweet</code>.</p>
</div>
</div>
<div class="sect2">
<h3 id="verify-method-invocation"><a class="link" href="#verify-method-invocation">6.4. Verify method invocation</a></h3>
<div class="paragraph">
<p class="cye-lm-tag">Ensure that getMessage() is at least called once.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="java"><span class="annotation cye-lm-tag">@Test</span>
<span class="directive cye-lm-tag">public</span> <span class="type cye-lm-tag">void</span> testSendingTweet() {
    TwitterClient twitterClient = <span class="keyword cye-lm-tag">new</span> TwitterClient();

    ITweet iTweet = mock(ITweet.class);

    when(iTweet.getMessage()).thenReturn(<span class="string cye-lm-tag"><span class="delimiter cye-lm-tag">"</span><span class="content cye-lm-tag">Using mockito is great</span><span class="delimiter cye-lm-tag">"</span></span>);

    twitterClient.sendTweet(iTweet);

    verify(iTweet, atLeastOnce()).getMessage();
}</code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="validate"><a class="link" href="#validate">6.5. Validate</a></h3>
<div class="paragraph">
<p class="cye-lm-tag">Run the test and validate that it is successful.</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="using-powermock-with-mockito"><a class="link" href="#using-powermock-with-mockito">7. Using PowerMock with Mockito</a></h2>
<div class="sectionbody">
<div class="sect2">
<h3 id="powermock-for-mocking-static-methods"><a class="link" href="#powermock-for-mocking-static-methods">7.1. Powermock for mocking static methods</a></h3>
<div class="paragraph">
<p class="cye-lm-tag">Mockito cannot mock static methods. For this you can use <code>Powermock</code>.
PowerMock provides a class called "PowerMockito" for creating mock/object/class and initiating verification, and expectations, everything else you can still use Mockito to setup and verify expectation (e.g. times(), anyInt()).</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="java"><span class="keyword cye-lm-tag">import</span> <span class="include cye-lm-tag">java.net.InetAddress</span>;
<span class="keyword cye-lm-tag">import</span> <span class="include cye-lm-tag">java.net.UnknownHostException</span>;

<span class="directive cye-lm-tag">public</span> <span class="directive cye-lm-tag">final</span> <span class="type cye-lm-tag">class</span> <span class="class cye-lm-tag">NetworkReader</span> {
    <span class="directive cye-lm-tag">public</span> <span class="directive cye-lm-tag">static</span> <span class="predefined-type cye-lm-tag">String</span> getLocalHostname() {
        <span class="predefined-type cye-lm-tag">String</span> hostname = <span class="string cye-lm-tag"><span class="delimiter cye-lm-tag">"</span><span class="delimiter cye-lm-tag">"</span></span>;
        <span class="keyword cye-lm-tag">try</span> {
            <span class="predefined-type cye-lm-tag">InetAddress</span> addr = <span class="predefined-type cye-lm-tag">InetAddress</span>.getLocalHost();
            <span class="comment cye-lm-tag">// Get hostname</span>
            hostname = addr.getHostName();
        } <span class="keyword cye-lm-tag">catch</span> ( <span class="exception cye-lm-tag">UnknownHostException</span> e ) {
        }
        <span class="keyword cye-lm-tag">return</span> hostname;
    }
}</code></pre>
</div>
</div>
<div class="paragraph">
<p class="cye-lm-tag">To write a test which mocks away the NetworkReader as dependency you can use the following snippet.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="java"><span class="keyword cye-lm-tag">import</span> <span class="include cye-lm-tag">org.junit.runner.RunWith</span>;
<span class="keyword cye-lm-tag">import</span> <span class="include cye-lm-tag">org.powermock.core.classloader.annotations.PrepareForTest</span>;

<span class="annotation cye-lm-tag">@RunWith</span>( PowerMockRunner.class )
<span class="annotation cye-lm-tag">@PrepareForTest</span>( NetworkReader.class )
<span class="directive cye-lm-tag">public</span> <span class="type cye-lm-tag">class</span> <span class="class cye-lm-tag">MyTest</span> {

<span class="comment cye-lm-tag">// Find the tests here</span>

 <span class="annotation cye-lm-tag">@Test</span>
<span class="directive cye-lm-tag">public</span> <span class="type cye-lm-tag">void</span> testSomething() {
    mockStatic( NetworkUtil.class );
    when( NetworkReader.getLocalHostname() ).andReturn( <span class="string cye-lm-tag"><span class="delimiter cye-lm-tag">"</span><span class="content cye-lm-tag">localhost</span><span class="delimiter cye-lm-tag">"</span></span> );

    <span class="comment cye-lm-tag">// now test the class which uses NetworkReader</span>
}</code></pre>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="using-a-wrapper-instead-of-powermock"><a class="link" href="#using-a-wrapper-instead-of-powermock">8. Using a wrapper instead of Powermock</a></h2>
<div class="sectionbody">
<div class="paragraph">
<p class="cye-lm-tag">Sometimes you can also use a wrapper around a static method, which can be mocked with Mockito.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="java"><span class="type cye-lm-tag">class</span> <span class="class cye-lm-tag">FooWraper</span> {
   <span class="type cye-lm-tag">void</span> someMethod() {
     Foo.someStaticMethod()
   }
}</code></pre>
</div>
</div>

</div>
</div>



</div>
<br><hr>
</body>
</html>