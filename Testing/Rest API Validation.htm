<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<title>Rest API Validation</title>
    <link rel="stylesheet" href="../Git Guide/grey.css">
    <style type="text/css">
    	div.comment-container {
    		border: 1px solid #920000;
    	}
    </style>
</head>
<body>
<a href="https://www.petrikainulainen.net/programming/spring-framework/spring-from-the-trenches-adding-validation-to-a-rest-api/">src</a>
<a href="https://github.com/pkainulainen/spring-from-the-trenches">github</a>
<a href="https://www.petrikainulainen.net/spring-from-the-trenches/">все статьи курса</a>

<h2>Spring From the Trenches: Adding Validation to a REST API</h2>

<div class="post_content cye-lm-tag" itemprop="articleBody"><p class="cye-lm-tag">I am a bit ashamed to admit this but until yesterday, I had no idea that I can add validation to a REST API by using the <em>@Valid</em> and the <em>@RequestBody</em> annotations.</p>

<p class="cye-lm-tag">This was not working in Spring MVC 3.0 and for some reason I had not noticed that the <a href="http://blog.goyello.com/2011/12/16/enhancements-spring-mvc31/" target="_blank">support for this was added in Spring MVC 3.1</a>.</p>

<p class="cye-lm-tag">I never liked the old approach because I had to</p>

<ol><li>Inject the <em>Validator</em> and <em>MessageSource</em> beans to my controller so that I can validate the request and fetch the localized error messages if the validation fails.</li><li>Call the validation method in every controller method which input must be validated.</li><li>Move the validation logic into a common base class which is extended by the controller classes.</li></ol><p class="cye-lm-tag">When I noticed that I don’t have to do these things anymore, I decided to write this blog post and share my findings with all of you.</p>

<p class="cye-lm-tag"><strong>Note</strong>: If we want to use the JSR-303 backed validation with Spring Framework, we have to add a JSR-303 provider to our classpath. The example applications of this blog post use Hibernate Validator 4.2.0 which is the reference implementation of the Bean Validation API (JSR-303).</p>

<p class="cye-lm-tag">Let’s start by taking a look at the DTO class used in this blog post. The source code of the <em>CommentDTO</em> class looks as follows:</p>

<div><div id="highlighter_625664" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">import</code> <code class="java plain">org.hibernate.validator.constraints.Length;</code></div><div class="line number2 index1 alt1"><code class="java keyword">import</code> <code class="java plain">org.hibernate.validator.constraints.NotEmpty;</code></div><div class="line number3 index2 alt2">&nbsp;</div><div class="line number4 index3 alt1"><code class="java keyword">public</code> <code class="java keyword">class</code> <code class="java plain">CommentDTO {</code></div><div class="line number5 index4 alt2">&nbsp;</div><div class="line number6 index5 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@NotEmpty</code></div><div class="line number7 index6 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Length</code><code class="java plain">(max = </code><code class="java value">140</code><code class="java plain">)</code></div><div class="line number8 index7 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java plain">String text;</code></div><div class="line number9 index8 alt2">&nbsp;</div><div class="line number10 index9 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java comments">//Methods are omitted.</code></div><div class="line number11 index10 alt2"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><p class="cye-lm-tag">Let’s move on and find out how we can add validation to a REST API with Spring MVC 3.1.</p>

<p class="cye-lm-tag"></p>

<h2>Spring MVC 3.1 Is a Good Start</h2><p class="cye-lm-tag">We can add validation to our REST API by following these steps:</p>

<ol><li>Implement a controller method and ensure that its input is validated.</li><li>Implement the logic which handles validation errors.</li></ol><p class="cye-lm-tag">Both of the steps are described in the following subsections.</p>

<h3>Implementing the Controller</h3><p class="cye-lm-tag">We can implement our controller by following these steps:</p>

<ol><li>Create a class called <em>CommentController</em> and annotate this class with the <em>@Controller</em> annotation.</li><li>Add an <em>add()</em> method to the <em>CommentController</em> class which takes the added comment as a method parameter.</li><li>Annotate the method with <em>@RequestMapping</em> and @ResponseBody annotations.</li><li>Apply the <em>@Valid</em> and <em>@RequestBody</em> annotations to the method parameter.</li><li>Return the added comment.</li></ol><p class="cye-lm-tag">The source code of the <em>CommentController</em> class looks as follows:</p>

<div><div id="highlighter_553896" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.beans.factory.annotation.Autowired;</code></div><div class="line number2 index1 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.http.HttpStatus;</code></div><div class="line number3 index2 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.stereotype.Controller;</code></div><div class="line number4 index3 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.web.bind.annotation.*;</code></div><div class="line number5 index4 alt2">&nbsp;</div><div class="line number6 index5 alt1"><code class="java keyword">import</code> <code class="java plain">javax.validation.Valid;</code></div><div class="line number7 index6 alt2">&nbsp;</div><div class="line number8 index7 alt1"><code class="java color1">@Controller</code></div><div class="line number9 index8 alt2"><code class="java keyword">public</code> <code class="java keyword">class</code> <code class="java plain">CommentController {</code></div><div class="line number10 index9 alt1">&nbsp;</div><div class="line number11 index10 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@RequestMapping</code><code class="java plain">(value = </code><code class="java string">"/api/comment"</code><code class="java plain">, method = RequestMethod.POST)</code></div><div class="line number12 index11 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@ResponseBody</code></div><div class="line number13 index12 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java plain">CommentDTO add(</code><code class="java color1">@Valid</code> <code class="java color1">@RequestBody</code> <code class="java plain">CommentDTO comment) {</code></div><div class="line number14 index13 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">return</code> <code class="java plain">comment;</code></div><div class="line number15 index14 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number16 index15 alt1"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><p class="cye-lm-tag">We have now added a new method to our controller and added validation to it. When the validation fails, the <em>MethodArgumentNotValidException</em> is thrown. Let’s find out how we can return a meaningful response to the user of our API when the validation fails.</p>

<h3>Handling Validation Errors</h3><p class="cye-lm-tag">We can implement the logic which handles the validation errors by following these steps:</p>

<ol><li>Implement the data transfer objects which contains the information returned to the user of our REST API.</li><li>Implement the exception handler method.</li></ol><p class="cye-lm-tag">These steps are described with more details in the following.</p>

<h4>Creating the Data Transfer Objects</h4><p class="cye-lm-tag">First, we have to create the data transfer objects which contains the information returned to the user of our REST API. We can do this by following these steps:</p>

<ol><li>Create a DTO which contains the information of a single validation error.</li><li>Create a DTO which wraps those validation errors together.</li></ol><p class="cye-lm-tag">Let’s get started.</p>

<p class="cye-lm-tag">The source code of the first DTO looks as follows:</p>

<div><div id="highlighter_78726" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">public</code> <code class="java keyword">class</code> <code class="java plain">FieldErrorDTO {</code></div><div class="line number2 index1 alt1">&nbsp;</div><div class="line number3 index2 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java plain">String field;</code></div><div class="line number4 index3 alt1">&nbsp;</div><div class="line number5 index4 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java plain">String message;</code></div><div class="line number6 index5 alt1">&nbsp;</div><div class="line number7 index6 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java plain">FieldErrorDTO(String field, String message) {</code></div><div class="line number8 index7 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">this</code><code class="java plain">.field = field;</code></div><div class="line number9 index8 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">this</code><code class="java plain">.message = message;</code></div><div class="line number10 index9 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number11 index10 alt2">&nbsp;</div><div class="line number12 index11 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java comments">//Getters are omitted.</code></div><div class="line number13 index12 alt2"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><p class="cye-lm-tag">The implementation of the second DTO is rather simple. It contains a list of <em>FieldErrorDTO</em> objects and a method which is used to add new field errors to the list. The source code of the <em>ValidationErrorDTO</em> looks as follows:</p>

<div><div id="highlighter_916636" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">import</code> <code class="java plain">java.util.ArrayList;</code></div><div class="line number2 index1 alt1"><code class="java keyword">import</code> <code class="java plain">java.util.List;</code></div><div class="line number3 index2 alt2">&nbsp;</div><div class="line number4 index3 alt1"><code class="java keyword">public</code> <code class="java keyword">class</code> <code class="java plain">ValidationErrorDTO {</code></div><div class="line number5 index4 alt2">&nbsp;</div><div class="line number6 index5 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java plain">List&lt;FieldErrorDTO&gt; fieldErrors = </code><code class="java keyword">new</code> <code class="java plain">ArrayList&lt;&gt;();</code></div><div class="line number7 index6 alt2">&nbsp;</div><div class="line number8 index7 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java plain">ValidationErrorDTO() {</code></div><div class="line number9 index8 alt2">&nbsp;</div><div class="line number10 index9 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number11 index10 alt2">&nbsp;</div><div class="line number12 index11 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java keyword">void</code> <code class="java plain">addFieldError(String path, String message) {</code></div><div class="line number13 index12 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">FieldErrorDTO error = </code><code class="java keyword">new</code> <code class="java plain">FieldErrorDTO(path, message);</code></div><div class="line number14 index13 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">fieldErrors.add(error);</code></div><div class="line number15 index14 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number16 index15 alt1">&nbsp;</div><div class="line number17 index16 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java comments">//Getter is omitted.</code></div><div class="line number18 index17 alt1"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><p class="cye-lm-tag">The following listing provides an example Json document which is send back to the user of our API when the validation fails:</p>

<div><div id="highlighter_807456" class="syntaxhighlighter nogutter  plain"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="plain plain">{</code></div><div class="line number2 index1 alt1"><code class="plain spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain plain">"fieldErrors":[</code></div><div class="line number3 index2 alt2"><code class="plain spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain plain">{</code></div><div class="line number4 index3 alt1"><code class="plain spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain plain">"field":"text",</code></div><div class="line number5 index4 alt2"><code class="plain spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain plain">"message":"error message"</code></div><div class="line number6 index5 alt1"><code class="plain spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain plain">}</code></div><div class="line number7 index6 alt2"><code class="plain spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain plain">]</code></div><div class="line number8 index7 alt1"><code class="plain plain">}</code></div></div></td></tr></tbody></table></div></div><p class="cye-lm-tag">Let’s see how we can implement the exception handler method which creates a new <em>ValidationErrorDTO</em> object and returns created object.</p>

<h4>Implementing the Exception Handler Method</h4><p class="cye-lm-tag">We can add the exception handler method to our controller by following these steps:</p>

<ol><li>Add a <em>MessageSource</em> field to the <em>CommentController</em> class. The message source is used to fetch localized error message for validation errors.</li><li>Inject the <em>MessageSource</em> bean by using constructor injection.</li><li>Add a <em>processValidationError()</em> method to the <em>CommentController</em> class. This method returns <em>ValidationErrorDTO</em> object and takes a <em>MethodArgumentNotValidException</em> object as a method parameter.</li><li>Annotate the method with the <em>@ExceptionHandler</em> annotation and ensure that the method is called when the <em>MethodArgumentNotValidException</em> is thrown.</li><li>Annotate the method with the <em>@ResponseStatus</em> annotation and ensure that the HTTP status code 400 (bad request) is returned.</li><li>Annotate the method with the <em>@ResponseBody</em> annotation.</li><li>Implement the method.</li></ol><p class="cye-lm-tag">Let’s take a closer look at the implementation of the <em>processValidationError()</em> method. We can implement this method by following these steps:</p>

<ol><li>Get a list of <em>FieldError</em> objects and process them.</li><li>Process the field errors one field error at the time.</li><li>Try to resolve a localized error message by calling the <em>getMessage()</em> method of the <em>MessageSource</em> interface, and pass the processed field error and the current locale as method parameters.</li><li>Return the resolved error message. If the error message is not found from the properties file, return the most accurate field error code.</li><li>Add a new field error by calling the <em>addFieldError()</em> method of the <em>ValidationErrorDTO</em> class. Pass the name of the field and the resolved error message as method parameters.</li><li>Return the created <em>ValidationErrorDTO</em> object after each field error has been processed.</li></ol><p class="cye-lm-tag">The source code of the CommentController class looks as follows:</p>

<div><div id="highlighter_876070" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div class="line number23 index22 alt2">23</div><div class="line number24 index23 alt1">24</div><div class="line number25 index24 alt2">25</div><div class="line number26 index25 alt1">26</div><div class="line number27 index26 alt2">27</div><div class="line number28 index27 alt1">28</div><div class="line number29 index28 alt2">29</div><div class="line number30 index29 alt1">30</div><div class="line number31 index30 alt2">31</div><div class="line number32 index31 alt1">32</div><div class="line number33 index32 alt2">33</div><div class="line number34 index33 alt1">34</div><div class="line number35 index34 alt2">35</div><div class="line number36 index35 alt1">36</div><div class="line number37 index36 alt2">37</div><div class="line number38 index37 alt1">38</div><div class="line number39 index38 alt2">39</div><div class="line number40 index39 alt1">40</div><div class="line number41 index40 alt2">41</div><div class="line number42 index41 alt1">42</div><div class="line number43 index42 alt2">43</div><div class="line number44 index43 alt1">44</div><div class="line number45 index44 alt2">45</div><div class="line number46 index45 alt1">46</div><div class="line number47 index46 alt2">47</div><div class="line number48 index47 alt1">48</div><div class="line number49 index48 alt2">49</div><div class="line number50 index49 alt1">50</div><div class="line number51 index50 alt2">51</div><div class="line number52 index51 alt1">52</div><div class="line number53 index52 alt2">53</div><div class="line number54 index53 alt1">54</div><div class="line number55 index54 alt2">55</div><div class="line number56 index55 alt1">56</div><div class="line number57 index56 alt2">57</div><div class="line number58 index57 alt1">58</div><div class="line number59 index58 alt2">59</div><div class="line number60 index59 alt1">60</div><div class="line number61 index60 alt2">61</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.beans.factory.annotation.Autowired;</code></div><div class="line number2 index1 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.context.MessageSource;</code></div><div class="line number3 index2 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.context.i18n.LocaleContextHolder;</code></div><div class="line number4 index3 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.http.HttpStatus;</code></div><div class="line number5 index4 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.stereotype.Controller;</code></div><div class="line number6 index5 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.validation.BindingResult;</code></div><div class="line number7 index6 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.validation.FieldError;</code></div><div class="line number8 index7 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.web.bind.MethodArgumentNotValidException;</code></div><div class="line number9 index8 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.web.bind.annotation.*;</code></div><div class="line number10 index9 alt1">&nbsp;</div><div class="line number11 index10 alt2"><code class="java keyword">import</code> <code class="java plain">javax.validation.Valid;</code></div><div class="line number12 index11 alt1"><code class="java keyword">import</code> <code class="java plain">java.util.List;</code></div><div class="line number13 index12 alt2"><code class="java keyword">import</code> <code class="java plain">java.util.Locale;</code></div><div class="line number14 index13 alt1">&nbsp;</div><div class="line number15 index14 alt2"><code class="java color1">@Controller</code></div><div class="line number16 index15 alt1"><code class="java keyword">public</code> <code class="java keyword">class</code> <code class="java plain">CommentController {</code></div><div class="line number17 index16 alt2">&nbsp;</div><div class="line number18 index17 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java plain">MessageSource messageSource;</code></div><div class="line number19 index18 alt2">&nbsp;</div><div class="line number20 index19 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Autowired</code></div><div class="line number21 index20 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java plain">CommentController(MessageSource messageSource) {</code></div><div class="line number22 index21 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">this</code><code class="java plain">.messageSource = messageSource;</code></div><div class="line number23 index22 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number24 index23 alt1">&nbsp;</div><div class="line number25 index24 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java comments">//The add() method is omitted.</code></div><div class="line number26 index25 alt1">&nbsp;</div><div class="line number27 index26 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@ExceptionHandler</code><code class="java plain">(MethodArgumentNotValidException.</code><code class="java keyword">class</code><code class="java plain">)</code></div><div class="line number28 index27 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@ResponseStatus</code><code class="java plain">(HttpStatus.BAD_REQUEST)</code></div><div class="line number29 index28 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@ResponseBody</code></div><div class="line number30 index29 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java plain">ValidationErrorDTO processValidationError(MethodArgumentNotValidException ex) {</code></div><div class="line number31 index30 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">BindingResult result = ex.getBindingResult();</code></div><div class="line number32 index31 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">List&lt;FieldError&gt; fieldErrors = result.getFieldErrors();</code></div><div class="line number33 index32 alt2">&nbsp;</div><div class="line number34 index33 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">return</code> <code class="java plain">processFieldErrors(fieldErrors);</code></div><div class="line number35 index34 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number36 index35 alt1">&nbsp;</div><div class="line number37 index36 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java plain">ValidationErrorDTO processFieldErrors(List&lt;FieldError&gt; fieldErrors) {</code></div><div class="line number38 index37 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">ValidationErrorDTO dto = </code><code class="java keyword">new</code> <code class="java plain">ValidationErrorDTO();</code></div><div class="line number39 index38 alt2">&nbsp;</div><div class="line number40 index39 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">for</code> <code class="java plain">(FieldError fieldError: fieldErrors) {</code></div><div class="line number41 index40 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">String localizedErrorMessage = resolveLocalizedErrorMessage(fieldError);</code></div><div class="line number42 index41 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">dto.addFieldError(fieldError.getField(), localizedErrorMessage);</code></div><div class="line number43 index42 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number44 index43 alt1">&nbsp;</div><div class="line number45 index44 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">return</code> <code class="java plain">dto;</code></div><div class="line number46 index45 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number47 index46 alt2">&nbsp;</div><div class="line number48 index47 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java plain">String resolveLocalizedErrorMessage(FieldError fieldError) {</code></div><div class="line number49 index48 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">Locale currentLocale =&nbsp; LocaleContextHolder.getLocale();</code></div><div class="line number50 index49 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">String localizedErrorMessage = messageSource.getMessage(fieldError, currentLocale);</code></div><div class="line number51 index50 alt2">&nbsp;</div><div class="line number52 index51 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java comments">//If the message was not found, return the most accurate field error code instead.</code></div><div class="line number53 index52 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java comments">//You can remove this check if you prefer to get the default error message.</code></div><div class="line number54 index53 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">if</code> <code class="java plain">(localizedErrorMessage.equals(fieldError.getDefaultMessage())) {</code></div><div class="line number55 index54 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">String[] fieldErrorCodes = fieldError.getCodes();</code></div><div class="line number56 index55 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">localizedErrorMessage = fieldErrorCodes[</code><code class="java value">0</code><code class="java plain">];</code></div><div class="line number57 index56 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number58 index57 alt1">&nbsp;</div><div class="line number59 index58 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">return</code> <code class="java plain">localizedErrorMessage;</code></div><div class="line number60 index59 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number61 index60 alt2"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><p class="cye-lm-tag">That is it. Let’s spend a moment to evaluate what we have just done.</p>

<h3>We Are Almost There</h3><p class="cye-lm-tag">We have now added validation to our REST API with Spring MVC 3.1. This implementation has one major benefit over the old approach:</p>

<p class="cye-lm-tag">We can trigger the validation process by using the <em>@Valid</em> annotation.</p>

<p class="cye-lm-tag">However, the methods annotated with the <em>@ExceptionHandler</em> annotation will be triggered only when the configured exception is thrown from the controller class which contains the exception handler method. This means that if our application has more than one controller, we have to create a common base class for our controllers and move the logic which handles the validation errors to that class. This might not sound like a big deal but we should <a href="http://lostechies.com/chadmyers/2010/02/13/composition-versus-inheritance/" target="_blank">prefer composition over inheritance</a>.</p>

<p class="cye-lm-tag">Spring MVC 3.2 provides the tools which we can use to remove the need of inheritance from our controllers. Let’s move on and find out how this is done.</p>

<h2>Spring MVC 3.2 to the Rescue</h2><p class="cye-lm-tag"><a href="http://static.springsource.org/spring-framework/docs/3.2.x/spring-framework-reference/htmlsingle/#new-in-3.2-webmvc-controller-advice" target="_blank">Spring MVC 3.2 introduced a new <em>@ControllerAdvice</em> annotation</a> which we can use to implement an exception handler component that processes the exceptions thrown by our controllers. We can implement this component by following these steps:</p>

<ol><li>Remove the logic which handles validation errors from the <em>CommentController</em> class.</li><li>Create a new exception handler class and move the logic which processes validation errors to the created class.</li></ol><p class="cye-lm-tag">These steps are explained with more details in the following subsections.</p>

<h3>Removing Exception Handling Logic from Our Controller</h3><p class="cye-lm-tag">We can remove the exception handling logic from our controller by following these steps:</p>

<ol><li>Remove the <em>MessageSource</em> field from the <em>CommentController</em> class.</li><li>Remove the constructor from our controller class.</li><li>Remove the <em>processValidationError()</em> method and the private methods from our controller class.</li></ol><p class="cye-lm-tag">The source code of the <em>CommentController</em> class looks as follows:</p>

<div><div id="highlighter_439912" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.stereotype.Controller;</code></div><div class="line number2 index1 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.web.bind.annotation.*;</code></div><div class="line number3 index2 alt2">&nbsp;</div><div class="line number4 index3 alt1"><code class="java keyword">import</code> <code class="java plain">javax.validation.Valid;</code></div><div class="line number5 index4 alt2">&nbsp;</div><div class="line number6 index5 alt1"><code class="java color1">@Controller</code></div><div class="line number7 index6 alt2"><code class="java keyword">public</code> <code class="java keyword">class</code> <code class="java plain">CommentController {</code></div><div class="line number8 index7 alt1">&nbsp;</div><div class="line number9 index8 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@RequestMapping</code><code class="java plain">(value = </code><code class="java string">"/api/comment"</code><code class="java plain">, method = RequestMethod.POST)</code></div><div class="line number10 index9 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@ResponseBody</code></div><div class="line number11 index10 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java plain">CommentDTO add(</code><code class="java color1">@Valid</code> <code class="java color1">@RequestBody</code> <code class="java plain">CommentDTO comment) {</code></div><div class="line number12 index11 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">return</code> <code class="java plain">comment;</code></div><div class="line number13 index12 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number14 index13 alt1"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><p class="cye-lm-tag">Our is next step is to create the exception handler component. Let’s see how this is done.</p>

<h3>Creating the Exception Handler Component</h3><p class="cye-lm-tag">We can create the exception handler component by following these steps:</p>

<ol><li>Create a class called <em>RestErrorHandler</em> and annotate it with the <em>@ControllerAdvice</em> annotation.</li><li>Add a <em>MessageSource</em> field to the <em>RestErrorHandler</em> class.</li><li>Inject the <em>MessageSource</em> bean by using constructor injection.</li><li>Add the <em>processValidationError()</em> method and the required private methods to the <em>RestErrorHandler</em> class.</li></ol><p class="cye-lm-tag">The source code of the RestErrorHandler class looks as follows:</p>

<div><div id="highlighter_866130" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div class="line number23 index22 alt2">23</div><div class="line number24 index23 alt1">24</div><div class="line number25 index24 alt2">25</div><div class="line number26 index25 alt1">26</div><div class="line number27 index26 alt2">27</div><div class="line number28 index27 alt1">28</div><div class="line number29 index28 alt2">29</div><div class="line number30 index29 alt1">30</div><div class="line number31 index30 alt2">31</div><div class="line number32 index31 alt1">32</div><div class="line number33 index32 alt2">33</div><div class="line number34 index33 alt1">34</div><div class="line number35 index34 alt2">35</div><div class="line number36 index35 alt1">36</div><div class="line number37 index36 alt2">37</div><div class="line number38 index37 alt1">38</div><div class="line number39 index38 alt2">39</div><div class="line number40 index39 alt1">40</div><div class="line number41 index40 alt2">41</div><div class="line number42 index41 alt1">42</div><div class="line number43 index42 alt2">43</div><div class="line number44 index43 alt1">44</div><div class="line number45 index44 alt2">45</div><div class="line number46 index45 alt1">46</div><div class="line number47 index46 alt2">47</div><div class="line number48 index47 alt1">48</div><div class="line number49 index48 alt2">49</div><div class="line number50 index49 alt1">50</div><div class="line number51 index50 alt2">51</div><div class="line number52 index51 alt1">52</div><div class="line number53 index52 alt2">53</div><div class="line number54 index53 alt1">54</div><div class="line number55 index54 alt2">55</div><div class="line number56 index55 alt1">56</div><div class="line number57 index56 alt2">57</div><div class="line number58 index57 alt1">58</div><div class="line number59 index58 alt2">59</div><div class="line number60 index59 alt1">60</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.beans.factory.annotation.Autowired;</code></div><div class="line number2 index1 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.context.MessageSource;</code></div><div class="line number3 index2 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.context.i18n.LocaleContextHolder;</code></div><div class="line number4 index3 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.http.HttpStatus;</code></div><div class="line number5 index4 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.validation.BindingResult;</code></div><div class="line number6 index5 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.validation.FieldError;</code></div><div class="line number7 index6 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.web.bind.MethodArgumentNotValidException;</code></div><div class="line number8 index7 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.web.bind.annotation.ControllerAdvice;</code></div><div class="line number9 index8 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.web.bind.annotation.ExceptionHandler;</code></div><div class="line number10 index9 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.web.bind.annotation.ResponseBody;</code></div><div class="line number11 index10 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.web.bind.annotation.ResponseStatus;</code></div><div class="line number12 index11 alt1">&nbsp;</div><div class="line number13 index12 alt2"><code class="java keyword">import</code> <code class="java plain">java.util.List;</code></div><div class="line number14 index13 alt1"><code class="java keyword">import</code> <code class="java plain">java.util.Locale;</code></div><div class="line number15 index14 alt2">&nbsp;</div><div class="line number16 index15 alt1"><code class="java color1">@ControllerAdvice</code></div><div class="line number17 index16 alt2"><code class="java keyword">public</code> <code class="java keyword">class</code> <code class="java plain">RestErrorHandler {</code></div><div class="line number18 index17 alt1">&nbsp;</div><div class="line number19 index18 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java plain">MessageSource messageSource;</code></div><div class="line number20 index19 alt1">&nbsp;</div><div class="line number21 index20 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Autowired</code></div><div class="line number22 index21 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java plain">RestErrorHandler(MessageSource messageSource) {</code></div><div class="line number23 index22 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">this</code><code class="java plain">.messageSource = messageSource;</code></div><div class="line number24 index23 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number25 index24 alt2">&nbsp;</div><div class="line number26 index25 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@ExceptionHandler</code><code class="java plain">(MethodArgumentNotValidException.</code><code class="java keyword">class</code><code class="java plain">)</code></div><div class="line number27 index26 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@ResponseStatus</code><code class="java plain">(HttpStatus.BAD_REQUEST)</code></div><div class="line number28 index27 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@ResponseBody</code></div><div class="line number29 index28 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java plain">ValidationErrorDTO processValidationError(MethodArgumentNotValidException ex) {</code></div><div class="line number30 index29 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">BindingResult result = ex.getBindingResult();</code></div><div class="line number31 index30 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">List&lt;FieldError&gt; fieldErrors = result.getFieldErrors();</code></div><div class="line number32 index31 alt1">&nbsp;</div><div class="line number33 index32 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">return</code> <code class="java plain">processFieldErrors(fieldErrors);</code></div><div class="line number34 index33 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number35 index34 alt2">&nbsp;</div><div class="line number36 index35 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java plain">ValidationErrorDTO processFieldErrors(List&lt;FieldError&gt; fieldErrors) {</code></div><div class="line number37 index36 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">ValidationErrorDTO dto = </code><code class="java keyword">new</code> <code class="java plain">ValidationErrorDTO();</code></div><div class="line number38 index37 alt1">&nbsp;</div><div class="line number39 index38 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">for</code> <code class="java plain">(FieldError fieldError: fieldErrors) {</code></div><div class="line number40 index39 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">String localizedErrorMessage = resolveLocalizedErrorMessage(fieldError);</code></div><div class="line number41 index40 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">dto.addFieldError(fieldError.getField(), localizedErrorMessage);</code></div><div class="line number42 index41 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number43 index42 alt2">&nbsp;</div><div class="line number44 index43 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">return</code> <code class="java plain">dto;</code></div><div class="line number45 index44 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number46 index45 alt1">&nbsp;</div><div class="line number47 index46 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java plain">String resolveLocalizedErrorMessage(FieldError fieldError) {</code></div><div class="line number48 index47 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">Locale currentLocale =&nbsp; LocaleContextHolder.getLocale();</code></div><div class="line number49 index48 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">String localizedErrorMessage = messageSource.getMessage(fieldError, currentLocale);</code></div><div class="line number50 index49 alt1">&nbsp;</div><div class="line number51 index50 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java comments">//If the message was not found, return the most accurate field error code instead.</code></div><div class="line number52 index51 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java comments">//You can remove this check if you prefer to get the default error message.</code></div><div class="line number53 index52 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">if</code> <code class="java plain">(localizedErrorMessage.equals(fieldError.getDefaultMessage())) {</code></div><div class="line number54 index53 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">String[] fieldErrorCodes = fieldError.getCodes();</code></div><div class="line number55 index54 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">localizedErrorMessage = fieldErrorCodes[</code><code class="java value">0</code><code class="java plain">];</code></div><div class="line number56 index55 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number57 index56 alt2">&nbsp;</div><div class="line number58 index57 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">return</code> <code class="java plain">localizedErrorMessage;</code></div><div class="line number59 index58 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number60 index59 alt1"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><h3>We Are Finally There</h3><p class="cye-lm-tag">Thanks to Spring MVC 3.2, we have now implemented an elegant solution where the validation is triggered by the <em>@Valid</em> annotation, and the exception handling logic is moved to a separate class. I think that we can call it a day and enjoy the results of our work.</p>

<p class="cye-lm-tag"></p>

<h2>Summary</h2><p class="cye-lm-tag">This blog post has taught us that</p>

<ul><li>If we want to add validation to a REST API when we are using Spring 3.0, we have to implement the validation logic ourself.</li><li>Spring 3.1 made it possible to add validation to a REST API by using the <em>@Valid</em> annotation. However, we have to create a common base class which contains the exception handling logic. Each controller which requires validation must extend this base class.</li><li>When we are using Spring 3.2, we can trigger the validation process by using the <em>@Valid</em> annotation and extract the exception handling logic into a separate class.</li></ul><p class="cye-lm-tag">The example application of this blog are available at Github (<a href="https://github.com/pkainulainen/spring-from-the-trenches/tree/master/rest-validation-3.1" target="_blank">Spring 3.1</a> and <a href="https://github.com/pkainulainen/spring-from-the-trenches/tree/master/rest-validation-3.2" target="_blank">Spring 3.2</a>)</p>
</div>

<br><hr>
<section id="comments"><div class="comments_intro"><span class="num_comments cye-lm-tag">86</span> comments… <a href="#commentform" rel="nofollow">add one</a></div><ul class="comment_list"><li class="comment even thread-even depth-1" id="comment-263202"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Marten Deinum</span>  <span class="comment_date cye-lm-tag">May 26, 2013, 20:24</span></div><div class="comment_text" id="comment-body-263202"><p class="cye-lm-tag">Great post, but I believe you can make it even more simple. The FieldError is an instance of MessageCodeResolvable which you can directly pass to the MessageSource. That should save you the codes lookup and iterating over them. That only leaves you with a check if the message and code are the same.</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-263203"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">May 26, 2013, 20:31</span></div><div class="comment_text" id="comment-body-263203"><p class="cye-lm-tag">Marten,</p>
<p class="cye-lm-tag">Thank you for your comment. Your suggestion is great and makes the code much cleaner. I will update the blog post and the example projects by using the approach you suggested.</p>
<p class="cye-lm-tag"><strong>Update</strong>: I updated the example projects and the blog post. It seems that if the error message is resolved by using the <code>String getMessage(MessageSourceResolvable resolvable, Locale locale)</code> method of the <code>MessageSource</code> interface, the <code>AbstractMessageSource</code> class ignores the value of the <code>useCodeAsDefaultMessage</code> property and always returns the default message if the message is not found. I wonder if there is a way to get rid of the if clause found from the <code>resolveLocalizedErrorMessage(FieldError fieldError, Locale locale)</code> method. If you know a way, let me know. :)</p>
</div> </div></li></ul></li><li class="comment even thread-odd thread-alt depth-1" id="comment-263442"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">JamesBond</span>  <span class="comment_date cye-lm-tag">May 31, 2013, 21:30</span></div><div class="comment_text" id="comment-body-263442"><p class="cye-lm-tag">Any idea why I’m getting this exception?</p>
<p class="cye-lm-tag">java.lang.IllegalStateException: Ambiguous @ExceptionHandler method mapped for [class org.springframework.web.bind.MethodArgumentNotValidException]</p>
<p class="cye-lm-tag">My method is similar to your processValidationError.</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-263443"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">May 31, 2013, 21:48</span></div><div class="comment_text" id="comment-body-263443"><p class="cye-lm-tag">Actually I had no idea.</p>
<p class="cye-lm-tag">Then I found <a href="http://stackoverflow.com/questions/14097772/ambiguous-exceptionhandler-method-mapped" target="_blank" rel="nofollow">this document</a> from the secret archives of MI6.</p>
<p class="cye-lm-tag">It seems that the <code>IllegalStateException</code> exception is thrown if you have more than one method which is annotated to handle the <code>MethodArgumentNotValidException</code>.</p>
</div> </div><ul class="children"><li class="comment even depth-3" id="comment-263444"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">JamesBond</span>  <span class="comment_date cye-lm-tag">May 31, 2013, 22:04</span></div><div class="comment_text" id="comment-body-263444"><p class="cye-lm-tag">Thanks to your reply I have found the solution. My RestErrorHandler class extended ResponseEntityExceptionHandler class which has handleMethodArgumentNotValid method, and that was causing the exception. I no longer extend ResponseEntityExceptionHandler and it’s working now.</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-4" id="comment-263445"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">May 31, 2013, 22:22</span></div><div class="comment_text" id="comment-body-263445"><p class="cye-lm-tag">You are welcome! Also, it is great to hear that you solved your problem.</p>
</div> </div></li><li class="comment even depth-4" id="comment-266696"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag"><a href="http://www.rafaelaleman.es" rel="external nofollow" class="url">Rafa</a></span>  <span class="comment_date cye-lm-tag">July 10, 2013, 18:20</span></div><div class="comment_text" id="comment-body-266696"><p class="cye-lm-tag">When you extend from <code>ResponseEntityExceptionHandler</code>, you have already an method annotated with <code>@ExceptionHandler</code> and the value <code>MethodArgumentNotValidException</code>.</p>
<p class="cye-lm-tag">So if you wan to have an specific behaviour for this exception and extend from <code>ResponseEntityExceptionHandler</code> you should override the method:</p>
<pre><code>
@Override
protected ResponseEntity handleMethodArgumentNotValid(
	MethodArgumentNotValidException ex, 
	HttpHeaders headers, 
	HttpStatus status, 
	WebRequest request)
</code>
</pre></div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-5" id="comment-266722"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">July 11, 2013, 00:04</span></div><div class="comment_text" id="comment-body-266722"><p class="cye-lm-tag">Rafa,</p>
<p class="cye-lm-tag">Thanks for pointing that option out!</p>
</div></div></li></ul></li></ul></li></ul></li></ul></li><li class="comment even thread-even depth-1" id="comment-268313"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">dharmendra</span>  <span class="comment_date cye-lm-tag">July 29, 2013, 16:07</span></div><div class="comment_text" id="comment-body-268313"><p class="cye-lm-tag">Thank you for the article. It really helped me.</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-268348"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">July 29, 2013, 22:48</span></div><div class="comment_text" id="comment-body-268348"><p class="cye-lm-tag">You are welcome. I am happy to hear that this blog post was useful to you!</p>
</div> </div></li></ul></li><li class="comment even thread-odd thread-alt depth-1" id="comment-273834"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">José</span>  <span class="comment_date cye-lm-tag">September 18, 2013, 11:33</span></div><div class="comment_text" id="comment-body-273834"><p class="cye-lm-tag">This article was really helpful. What is especially great about it is that you show solutions for different Spring versions, not just the latest one.</p>
<p class="cye-lm-tag">The comment about omitting getters confused me a bit though. I didn’t include any getters and this resulted in a HttpMediaTypeNotAcceptableException exception. Maybe that’s just me though.</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-273848"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">September 18, 2013, 13:44</span></div><div class="comment_text" id="comment-body-273848"><p class="cye-lm-tag">Hi José,</p>
<p class="cye-lm-tag">I am happy to hear that this tutorial was useful to you.</p>
<p class="cye-lm-tag">The comment which I made about omitting getter methods means that the actual code has getter methods but I left them out from the code listing as irrelevant. Do you think that I should mention this in the sample code?</p>
<p class="cye-lm-tag">The getter methods are required because the default configuration of Jackson requires that the DTO either has public fields or public getter methods. Since I didn’t want to make the fields of my DTO class public, I had to use public getter methods.</p>
<p class="cye-lm-tag">Were you able to solve your problem (<code>HttpMediaTypeNotAcceptableException</code> is thrown) or do you need some help with that?</p>
</div> </div><ul class="children"><li class="comment even depth-3" id="comment-986164"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Alind Billore</span>  <span class="comment_date cye-lm-tag">November 18, 2014, 09:48</span></div><div class="comment_text" id="comment-body-986164"><p class="cye-lm-tag">Oh !<br> This might be the error with me, let me try adding getters.</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-4" id="comment-987345"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">November 18, 2014, 20:51</span></div><div class="comment_text" id="comment-body-987345"><p class="cye-lm-tag">Did it solve your problem?</p>
</div> </div></li></ul></li></ul></li></ul></li><li class="comment even thread-even depth-1" id="comment-273861"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">José</span>  <span class="comment_date cye-lm-tag">September 18, 2013, 16:25</span></div><div class="comment_text" id="comment-body-273861"><p class="cye-lm-tag">I guess it doesn’t harm to be more specific about the getter to avoid confusions.</p>
<p class="cye-lm-tag">Yes, the problem was solved by adding the getters. Thank you for your answer!</p>
</div> </div></li><li class="comment odd alt thread-odd thread-alt depth-1" id="comment-274964"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Uzair</span>  <span class="comment_date cye-lm-tag">September 27, 2013, 19:03</span></div><div class="comment_text" id="comment-body-274964"><p class="cye-lm-tag">Hi Petri,</p>
<p class="cye-lm-tag">I am trying same thing with XML configuration but its not working for me. It catches all my custom exception but its not catching @valid errors. It throws bad request which I can see in my browser console.</p>
<p class="cye-lm-tag">@ControllerAdvice<br> public class BaseExceptionResolver {</p>
<p class="cye-lm-tag"> public static final Logger LOGGER = LoggerFactory.getLogger(BaseExceptionResolver.class);</p>
<p class="cye-lm-tag"> private MessageSource messageSource;</p>
<p class="cye-lm-tag"> @Autowired<br> public BaseExceptionResolver(final MessageSource messageSource) {<br> LOGGER.info(“entering BaseExceptionResolver constructor”);<br> this.messageSource = messageSource;<br> }</p>
<p class="cye-lm-tag"> @ExceptionHandler(MethodArgumentNotValidException.class)<br> @ResponseStatus(HttpStatus.BAD_REQUEST)<br> @ResponseBody<br> public ResponseEntity handleValidationException(MethodArgumentNotValidException pe) {<br> LOGGER.info(“Catched MethodArgumentNotValidException “);<br> return new ResponseEntity(pe.getMessage(), HttpStatus.BAD_REQUEST);<br> }<br> }</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-274981"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">September 27, 2013, 23:20</span></div><div class="comment_text" id="comment-body-274981"><p class="cye-lm-tag">Hi Usair,</p>
<p class="cye-lm-tag">The both example applications (Spring 3.1 and Spring 3.2) have a working XML configuration but it is not active by default. You can switch to XML configuration by modifying the <code>ExampleApplicationConfig</code> class (the required modifications should be pretty obvious).</p>
<p class="cye-lm-tag">One thing which you could do is to compare your application configuration file to the XML configuration files of the example applications. Here are direct links to the configuration files of those applications:</p>
<ul><li><a href="https://github.com/pkainulainen/spring-from-the-trenches/blob/master/rest-validation-3.1/src/main/resources/exampleApplicationContext.xml" target="_blank" rel="nofollow">Spring MVC 3.1</a></li><li><a href="https://github.com/pkainulainen/spring-from-the-trenches/blob/master/rest-validation-3.2/src/main/resources/exampleApplicationContext.xml" target="_blank" rel="nofollow">Spring MVC 3.2</a></li></ul><p class="cye-lm-tag">By the way, what did you mean by “it throws a bad request”?</p>
<p class="cye-lm-tag">Your exception handler method is configured to return the HTTP status code bad request when the <code>MethodArgumentNotValidException</code> is thrown. That explains why you see that in your browser console.</p>
</div> </div></li></ul></li><li class="comment odd alt thread-even depth-1" id="comment-275273"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Uzair</span>  <span class="comment_date cye-lm-tag">September 30, 2013, 11:38</span></div><div class="comment_text" id="comment-body-275273"><p class="cye-lm-tag">Hi Petri,</p>
<p class="cye-lm-tag">Thanks for your quick reply. “It throws a bad request” means control is not going inside “handleValidationException” method. I saw you XML configuration files also my files are quite similar and my ControllerAdvice is working for my custom made exception but its not calling “handleValidationException” which is there to handle @Valid validations. Here is my simple controller’s method</p>
<p class="cye-lm-tag">@RequestMapping(value = “register”, method = RequestMethod.POST)<br> public String registerUser(@Valid UserDTO user) {<br> LOGGER.info(“User : “+ user.toString());<br> return “user/confirm”;<br> }</p>
<p class="cye-lm-tag">my DTO</p>
<p class="cye-lm-tag">public class UserDTO implements Serializable{</p>
<p class="cye-lm-tag"> @NotNull<br> @NotEmpty<br> @Length(max=2)<br> private String name;</p>
<p class="cye-lm-tag"> @NotNull<br> private Integer age;</p>
<p class="cye-lm-tag"> public UserDTO () {</p>
<p class="cye-lm-tag"> }</p>
<p class="cye-lm-tag"> public String getName() {<br> return name;<br> }</p>
<p class="cye-lm-tag"> public void setName(String name) {<br> this.name = name;<br> }</p>
<p class="cye-lm-tag"> public Integer getAge() {<br> return age;<br> }</p>
<p class="cye-lm-tag"> public void setAge(Integer age) {<br> this.age = age;<br> }</p>
<p class="cye-lm-tag"> @Override<br> public String toString() {<br> return “UserDTO [name=” + name + “, age=” + age + “]”;<br> }<br> }</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-275331"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">September 30, 2013, 20:55</span></div><div class="comment_text" id="comment-body-275331"><p class="cye-lm-tag">Are you trying to implement a REST API method or a “regular” Spring MVC controller method?</p>
<p class="cye-lm-tag">If you are trying to implement a regular Spring MVC controller method, you have to add a <code>@ModelAttribute</code> annotation before the <code>@Valid</code> annotation and specify the name of your form object.</p>
</div> </div></li></ul></li><li class="comment odd alt thread-odd thread-alt depth-1" id="comment-280288"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Joe</span>  <span class="comment_date cye-lm-tag">October 27, 2013, 18:57</span></div><div class="comment_text" id="comment-body-280288"><p class="cye-lm-tag">I am fairly new to Spring and have been using you site a guide.  I started off with a Spring Roo project, but removed it after getting to a point it was no longer of little value.  I used the Roo project as a basic template on how to set up a Spring project.  I have Rest and Spring web controllers in the same project.  In addition, the REST controllers were configured by Roo.  So, they use domain objects to pass between the server and the client.  However, I notice you use DTOs, which I assume is not your domain objects.  If this is the case, I think the DTO method might be a bit more secure.  Do you have any advice on DTOs and domain objects for REST controllers?  Also, can the above controller advice work with REST and web controllers in the same project or should I move my controllers to separate projects?</p>
</div> </div><ul class="children"><li class="comment even depth-2" id="comment-280290"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Joe</span>  <span class="comment_date cye-lm-tag">October 27, 2013, 19:09</span></div><div class="comment_text" id="comment-body-280290"><p class="cye-lm-tag">I think have a way to use your controller advice solution without impacting my web controllers.  My web controllers use @validated and the method gets the BindingResult, which I think would prevent it from throwing the exception and not make it to the controller advice.  Would you agree?</p>
</div> </div></li><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-280293"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">October 27, 2013, 19:42</span></div><div class="comment_text" id="comment-body-280293"><p class="cye-lm-tag">Hi Joe,</p>
<p class="cye-lm-tag">About your first question:</p>
<p class="cye-lm-tag">I use DTOs in REST controllers for two reasons:</p>
<ol><li>It gives me an easy way to control which information is returned to the client. If you return domain objects, all information is returned to the client by default. This can have have dramatic effects to the performance of the application and/or it can lead into a situation where you are “leaking” sensitive information to the client. You can of course override this by using Jackson annotations but this means that your code becomes a mess.</li><li>I think that the clients of my API “should not be aware” of my domain model for two reasons:<ul><li>This provides a nice separation between the API and the inner workings of my application.</li><li>The domain model can be a quite complex beast. When I use DTOs, I can simplify the API in a such way that it is easier to use.</li></ul></li></ol><p class="cye-lm-tag">About your second question:</p>
<p class="cye-lm-tag">The Javadoc of the of the <a href="http://docs.spring.io/spring/docs/3.2.x/javadoc-api/org/springframework/web/bind/MethodArgumentNotValidException.html" target="_blank" rel="nofollow"><code>MethodArgumentNotValidException</code></a> states that that it is thrown when validation on an argument annotated with <code>@Valid</code> fails.</p>
<p class="cye-lm-tag">I assume that this means that you have to change the implementation of the method annotated with the <a href="http://docs.spring.io/spring/docs/3.2.x/javadoc-api/org/springframework/web/bind/annotation/ExceptionHandler.html" target="_blank" rel="nofollow"> <code>@ExceptionHandler</code></a> annotation to provide different handling logic for REST and web controllers.</p>
<p class="cye-lm-tag">I have to admit that I haven’t tested this. I guess your best option is to test this yourself (by the way, this is a good idea for a blog post).</p>
</div> </div><ul class="children"><li class="comment even depth-3" id="comment-280310"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Joe</span>  <span class="comment_date cye-lm-tag">October 27, 2013, 23:53</span></div><div class="comment_text" id="comment-body-280310"><p class="cye-lm-tag">Petri,</p>
<p class="cye-lm-tag">I appreciate the quick response.  I agree with your statement using the DTO.  I had the same concern about using the domain model.  I was afraid of someone figuring out how to navigate the object graph and do some damage.  Putting in the DTOs provides a clean break.  Prior to that I was using Flex JSON annotations to exclude data I wanted to share with the client, but it was getting messy.</p>
<p class="cye-lm-tag">As for your example, I had to add jackson-core-asl and jackson-mapper-asl to my POM to get it to work.  Before adding the POM changes I would get a HTTP 415.  I used the the answer on StackOverflow to work out the problem.</p>
<p class="cye-lm-tag"><a href="http://stackoverflow.com/questions/13772146/ajax-json-post-to-spring-controller-returns-http-415" rel="nofollow">http://stackoverflow.com/questions/13772146/ajax-json-post-to-spring-controller-returns-http-415</a></p>
<p class="cye-lm-tag">Now the code creating the the object in the REST method, but I need to test the code further for the controller advice.</p>
<p class="cye-lm-tag">Thanks,<br> Joe</p>
</div> </div></li></ul></li></ul></li><li class="comment odd alt thread-even depth-1" id="comment-280327"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Joe</span>  <span class="comment_date cye-lm-tag">October 28, 2013, 04:31</span></div><div class="comment_text" id="comment-body-280327"><p class="cye-lm-tag">Petri,</p>
<p class="cye-lm-tag">Good news!  I was able to use your example with my REST controllers without impacting my web controllers.  So, my existing controller advice for my web controllers works as normal.  The web controller method gets the binding results and makes decisions based off if it has errors or not.  Therefore, the two can coexist without any issues.</p>
<p class="cye-lm-tag">As for a blog post, I would like to get your thoughts on DTO and domain objects.   How do you handle merging DTO changes back into the domain objects?  Do you create them by hand per client/server interaction?  I am thinking of creating some annotations to help create DTOs automatically from the domain objects, so the validation remains in-sync, among other things.  I am working a one man project after hours, so anything I can do to reduce my workload will help.</p>
<p class="cye-lm-tag">Thanks again,<br> Joe</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-280405"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">October 28, 2013, 20:11</span></div><div class="comment_text" id="comment-body-280405"><p class="cye-lm-tag">Joe,</p>
<p class="cye-lm-tag">It is good to know that using this technique for REST controllers doesn’t cause problems with “normal” controllers. Thank you for the information!</p>
<p class="cye-lm-tag">There are a few libraries which can be used to transform model objects into DTOs and vice versa. These libraries are:</p>
<ul><li><a href="https://github.com/DozerMapper/dozer" target="_blank" rel="nofollow">Dozer</a></li><li><a href="http://jtransfo.org/" target="_blank" rel="nofollow">jTransfo</a></li><li><a href="http://modelmapper.org/" target="_blank" rel="nofollow">ModelMapper</a></li></ul><p class="cye-lm-tag">I have personally used a forked version version of jTransfo (I should create a pull request and see if my changes are useful to others) to transform model objects into DTOs and I have been very happy with it. However, you might want to check them all out and see which one is the best fit for you.</p>
<p class="cye-lm-tag">I transform DTOs into model objects manually because my model objects often have domain logic in them, and copying field values from DTOs bypasses this logic. Also, I try to not have any setters in domain classes (I fail in this though). However, if your domain objects do not have any logic in them, using one of the mentioned libraries is probably a good idea.</p>
</div> </div><ul class="children"><li class="comment odd alt depth-3" id="comment-280411"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Joe</span>  <span class="comment_date cye-lm-tag">October 28, 2013, 21:34</span></div><div class="comment_text" id="comment-body-280411"><p class="cye-lm-tag">Petri,</p>
<p class="cye-lm-tag">I am glad you sent me those links!  Those are going to save me a lot of time.  When I get off work, I was going to create code to do what these libraries do.  Now, I am going to do some research.</p>
<p class="cye-lm-tag">Thanks for the time saver!<br> Joe</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-4" id="comment-280543"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">October 29, 2013, 17:30</span></div><div class="comment_text" id="comment-body-280543"><p class="cye-lm-tag">Hi Joe,</p>
<p class="cye-lm-tag">you are welcome!</p>
</div> </div></li></ul></li></ul></li></ul></li><li class="comment odd alt thread-odd thread-alt depth-1" id="comment-285400"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Javier</span>  <span class="comment_date cye-lm-tag">November 9, 2013, 12:46</span></div><div class="comment_text" id="comment-body-285400"><p class="cye-lm-tag">Hi Petri,</p>
<p class="cye-lm-tag">I use your example to build a rest service. But I don´t understand why running the tests I have the JSON response when the validation is not correct, but when I do the calls from the SoapUI I have a 400 error and without the JSON response. If the request has a JSON object @Valid then returns a normal response but when is not valid not. As I understand is doing the validation but running with Debug is not going to the Handler code.</p>
<p class="cye-lm-tag">Do you know why? And how I could test it outside the unit tests as for example with SoapUI?</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-285421"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">November 9, 2013, 13:22</span></div><div class="comment_text" id="comment-body-285421"><p class="cye-lm-tag">Hi Javier,</p>
<p class="cye-lm-tag">The HTTP status code 400 (Bad request) means that the request was malformed and it could not be processed. This can be a bit confusing because the handler method returns the same status code. However, since you were able to verify that the handler method was not called, I would ensure that:</p>
<ul><li>The value of the <code>Content-Type</code> request header is ‘application/json’</li><li>The field names of the JSON send in the request body matches with the field names of the DTO object.</li></ul><p class="cye-lm-tag">These are the mistakes which I have made when I have encountered this problem. Do you see any error messages on the log?</p>
<p class="cye-lm-tag">Also, it would be helpful if you could add the invalid JSON document here so that I could debug the example application.</p>
<p class="cye-lm-tag">About your last question:</p>
<p class="cye-lm-tag">It should be possible to test REST APIs by using external tools as long as the request is constructed properly (although I have no experience from SoapUI).</p>
</div> </div><ul class="children"><li class="comment odd alt depth-3" id="comment-285426"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Javier</span>  <span class="comment_date cye-lm-tag">November 9, 2013, 13:34</span></div><div class="comment_text" id="comment-body-285426"><p class="cye-lm-tag">Hi Petri,</p>
<p class="cye-lm-tag">Thanks for answer so quick. Well my RestErrorHandler is exactly as yours. The problem is that with the test the checks are right about the message and the json response. But when I call it from SoapUI but also with rest console from chrome or whatever tool I am having a 400 error.</p>
<p class="cye-lm-tag">So as I understand if would be some error when return the object to be mapped to JSON should go to the handle error code and after throw the error but it is not happening.</p>
<p class="cye-lm-tag">I am not sure why is happening it. Maybe I am missing some configuration but is really strange that the test check correctly but after the rest service doesn’t work in the same way.</p>
<p class="cye-lm-tag">I would check what happens with your code and if works then I should check configuration.</p>
<p class="cye-lm-tag">Yesterday I spent around 2h trying to fix it but I failed.<br> If you have any idea let me know, tonight or tomorrow if I could fix it I will let you know as well.</p>
<p class="cye-lm-tag">Thanks,</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-4" id="comment-286115"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">November 10, 2013, 17:14</span></div><div class="comment_text" id="comment-body-286115"><p class="cye-lm-tag">Is your controller method called when you try to call it by using REST console or SoapUI? The HTTP status code 400 can also mean that Spring didn’t find a controller method which can process your request.</p>
<p class="cye-lm-tag">If your controller method isn’t called, it would be helpful to see the request mapping of your controller method.</p>
</div> </div><ul class="children"><li class="comment odd alt depth-5" id="comment-286203"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Javier</span>  <span class="comment_date cye-lm-tag">November 10, 2013, 21:25</span></div><div class="comment_text" id="comment-body-286203"><p class="cye-lm-tag">Hi Petri,</p>
<p class="cye-lm-tag">When the Object is valid the method is working, the problem is when the object is not valid then is not handle by the HandlerController.</p>
<p class="cye-lm-tag">I continue looking on it, is like the @EnableMVC is not working?</p>
</div></div></li></ul></li></ul></li></ul></li></ul></li><li class="comment even thread-even depth-1" id="comment-286231"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Javier</span>  <span class="comment_date cye-lm-tag">November 10, 2013, 22:28</span></div><div class="comment_text" id="comment-body-286231"><p class="cye-lm-tag">Well I didn’t find the error but should be something in configuration. So I fork your project and it works fine.</p>
<p class="cye-lm-tag">Finally I used your project and add my files there ;)</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-286245"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">November 10, 2013, 22:52</span></div><div class="comment_text" id="comment-body-286245"><p class="cye-lm-tag">Just realized one possible cause of this problem:</p>
<p class="cye-lm-tag">Was the error handler class in a package which is scanned by Spring (check the <code>@ComponentScan</code> annotation)?</p>
<p class="cye-lm-tag">Anyway, it is good to hear that you found at least some solution for your problem!</p>
</div> </div></li></ul></li><li class="comment even thread-odd thread-alt depth-1" id="comment-287787"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">GAP</span>  <span class="comment_date cye-lm-tag">November 14, 2013, 16:21</span></div><div class="comment_text" id="comment-body-287787"><p class="cye-lm-tag">sorry I have a Exception:</p>
<p class="cye-lm-tag">//JSON<br> {<br> “username” : “”<br> }</p>
<p class="cye-lm-tag">org.springframework.web.HttpMediaTypeNotAcceptableException: Could not find acceptable representation</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-287825"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">November 14, 2013, 18:20</span></div><div class="comment_text" id="comment-body-287825"><p class="cye-lm-tag">You could start by verifying that</p>
<ol><li>Your request has an a request header called ‘Accept’, and its value is ‘application/json’.</li><li>The Jackson jar files are found from the classpath.</li></ol><p class="cye-lm-tag">I hope that this answered to your question. If this doesn’t solve your problem, please let me know.</p>
</div> </div></li></ul></li><li class="comment even thread-even depth-1" id="comment-296086"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Thomas Beer</span>  <span class="comment_date cye-lm-tag">December 5, 2013, 14:13</span></div><div class="comment_text" id="comment-body-296086"><p class="cye-lm-tag">Hi, great tutorial.<br> Eventually you may add a comment that it is required to configure your validator, e.g. as described in <a href="http://docs.spring.io/spring/docs/3.0.0.RC3/reference/html/ch05s07.html" rel="nofollow">http://docs.spring.io/spring/docs/3.0.0.RC3/reference/html/ch05s07.html</a> (section 5.7.4.2). I did not have configured one … ;-)</p>
<p class="cye-lm-tag">Best,<br> Thomas</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-296115"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri Kainulainen</span>  <span class="comment_date cye-lm-tag">December 5, 2013, 15:09</span></div><div class="comment_text" id="comment-body-296115"><p class="cye-lm-tag">Hi Thomas,</p>
<p class="cye-lm-tag">I am happy to hear that you liked this tutorial!</p>
<p class="cye-lm-tag">If you use Spring 3.1 or newer, you don’t have to configure the validator bean (unless you don’t want to use the default one). As long as you annotate your configuration class (class which is annotated with the <code>@Configuration</code> annotation) with the <code>@EnableWebMvc</code> annotation, or add the <code>&lt;mvc:annotation-driven/&gt;</code> element to your XML configuration file, the validator bean is configured automatically. You have to add a JSR-303 provider to your classpath though.</p>
<p class="cye-lm-tag">If you want to get more information about this, check out the reference manual of Spring Framework 3.1. It has a really nice section which <a href="http://docs.spring.io/spring/docs/3.1.x/spring-framework-reference/htmlsingle/#mvc-config-enable" target="_blank" rel="nofollow">describes what happens when you enable Spring MVC</a>.</p>
</div> </div></li></ul></li><li class="comment even thread-odd thread-alt depth-1" id="comment-297110"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Thomas Beer</span>  <span class="comment_date cye-lm-tag">December 6, 2013, 22:44</span></div><div class="comment_text" id="comment-body-297110"><p class="cye-lm-tag">Hi Petry,<br> your are absolutely right, that’s exactly what I did:<br> However, the reference was wrong, actually it is described in the link above in section 5.7.4.3.<br> But maybe it is of interest for any other non Spring expert as me ;-)</p>
<p class="cye-lm-tag">Best,<br> Thomas</p>
</div> </div></li><li class="comment odd alt thread-even depth-1" id="comment-340980"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Ranjana Prasad</span>  <span class="comment_date cye-lm-tag">January 20, 2014, 13:44</span></div><div class="comment_text" id="comment-body-340980"><p class="cye-lm-tag">Thanks alot man. This was really helpful.</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-341233"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">January 20, 2014, 18:02</span></div><div class="comment_text" id="comment-body-341233"><p class="cye-lm-tag">You are welcome. I am happy to hear that this tutorial was useful to you.</p>
</div> </div></li></ul></li><li class="comment odd alt thread-odd thread-alt depth-1" id="comment-584167"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Stephane</span>  <span class="comment_date cye-lm-tag">May 11, 2014, 20:49</span></div><div class="comment_text" id="comment-body-584167"><p class="cye-lm-tag">Hi Petri,<br> I’m also using a ControllerAdvice annotation and my custom exceptions are triggered fine on my REST controller. Except for the MethodArgumentNotValidException one even though I use a Valid annotation in my controller. I must be missing something. I posted on Stack <a href="http://stackoverflow.com/questions/23590763/valid-hibernate-validation-in-a-spring-rest-controller" rel="nofollow">http://stackoverflow.com/questions/23590763/valid-hibernate-validation-in-a-spring-rest-controller</a> in case you find the issue interesting.<br> Kind Regards,<br> Stephane Eybert</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-588453"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">May 12, 2014, 21:47</span></div><div class="comment_text" id="comment-body-588453"><p class="cye-lm-tag">Have you tried using Hibernate Validator 4.2.0.Final? Hibernate Validator 5 is the reference implementation of the bean validation API 1.1 (JSR 349) which isn’t the same specification than JSR 303.</p>
<p class="cye-lm-tag">I assume that Spring Framework 3.2 supports only JSR 303 because I couldn’t find any information about the bean validation API 1.1 from its reference manual.</p>
</div> </div></li></ul></li><li class="comment odd alt thread-even depth-1" id="comment-602703"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Billy</span>  <span class="comment_date cye-lm-tag">May 15, 2014, 19:01</span></div><div class="comment_text" id="comment-body-602703"><p class="cye-lm-tag">Hi Petri,</p>
<p class="cye-lm-tag">Do you know if it is possible to override @ControllerAdvice @ModelAttribute in a controller?</p>
<p class="cye-lm-tag">Let’s say I have a list of states.  For 99% of my customers they will see all the states in their select box on a form.  So for this scenario I created a class and annotated it with @ControllerAdvice.  I then created a method that return @ResponseBody list of states and annotated it with @ModelAttribute(value=”states”).</p>
<p class="cye-lm-tag">In one of my controllers I check for a path variable and if present the states field should only display a subset of the states.  I tried overriding the method in the controller with the same annotation but I get the full list each time.</p>
<p class="cye-lm-tag">I saw this article about @ControllerAdvice in Spring 4.<br> <a href="http://www.javacodegeeks.com/2013/11/controlleradvice-improvements-in-spring-4.html" rel="nofollow">http://www.javacodegeeks.com/2013/11/controlleradvice-improvements-in-spring-4.html</a><br> Seems like you can now specify which controllers should use the @ControlelrAdvice.</p>
<p class="cye-lm-tag">Just wondering if you had any suggestions.</p>
<p class="cye-lm-tag">Thanks<br> Billy</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-611211"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">May 17, 2014, 14:20</span></div><div class="comment_text" id="comment-body-611211"><p class="cye-lm-tag">Hi Billy,</p>
<p class="cye-lm-tag">The Javadoc of the <a href="http://docs.spring.io/spring/docs/4.0.3.RELEASE/javadoc-api/org/springframework/web/bind/annotation/ControllerAdvice.html" target="_blank" rel="nofollow"><code>@ControllerAdvice</code></a> annotation states that it is possible to configure the controller classes which are assisted by the class annotated with the <code>@ControllerAdvice</code> annotation.</p>
<p class="cye-lm-tag">If I understood correctly, you can implement your requirement by following these steps:</p>
<ol><li>Move the controller which displays subset of states in a package which doesn’t contain other controller classes.</li><li>Configure the <code>@ControllerAdvice</code> class to assist all other controllers except the one you moved in the first step. One way to do this is to configure the packages which contains the other controller classes by setting the value of the <a href="http://docs.spring.io/spring/docs/4.0.3.RELEASE/javadoc-api/org/springframework/web/bind/annotation/ControllerAdvice.html#basePackages--" target="_blank" rel="nofollow"><code>basePackages</code></a> attribute of the <code>@ControllerAdvice</code> annotation.</li></ol><p class="cye-lm-tag">That is it. Remember that the class which is moved to a separate package is “on its own”, and it cannot rely on the functionality provided by the <code>@ControllerAdvice</code> class.</p>
</div> </div></li></ul></li><li class="comment odd alt thread-odd thread-alt depth-1" id="comment-711311"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">sumit sharma</span>  <span class="comment_date cye-lm-tag">June 27, 2014, 13:09</span></div><div class="comment_text" id="comment-body-711311"><p class="cye-lm-tag">I have a very bad confusion In spring MVC I use println method in every statement of command class setter and getter method I have a home page where I have use a link to go to login page when I click on link then control forward to login page and there is only two fileld I have declared so why getter method of user name and password called 4-4 times ..pls help me out.</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-712124"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">June 28, 2014, 12:07</span></div><div class="comment_text" id="comment-body-712124"><p class="cye-lm-tag">If you used the Spring form taglib, the getters of your form object (aka command object) are called by Spring because it retrieves the values bound to each input field.</p>
<p class="cye-lm-tag">You can get more information about forms and Spring MVC by reading a blog post titled <a href="http://codetutr.com/2013/04/06/spring-mvc-form-submission/" target="_blank" rel="nofollow">Spring MVC Form Tutorial</a>.</p>
<p class="cye-lm-tag">It is hard to say why the getters of your form object are called more than once without seeing the source code of your controller and the login page. If you want, you can add these files to <a href="http://pastebin.com/" target="_blank" rel="nofollow">pastebin</a> so that I can take a look at them.</p>
</div> </div></li></ul></li><li class="comment odd alt thread-even depth-1" id="comment-725610"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Darshan</span>  <span class="comment_date cye-lm-tag">July 11, 2014, 11:46</span></div><div class="comment_text" id="comment-body-725610"><p class="cye-lm-tag">Hi ,<br> I am using Rest web service same as you and trying to add field validation same as you have mentioned here.<br> I am getting successful response but when filed error comes i am getting following exception &amp; 400 Bad request.  Below only change i did because i was getting compile error. change:  new ArrayList(); instead of  new ArrayList();<br> public class ValidationErrorDTO {<br> private List fieldErrors = new ArrayList();</p>
<p class="cye-lm-tag">14:10:37,045 ERROR [org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver] (http-/0.0.0.0:8080-1) Failed to invoke @ExceptionHandler method: public com.csam.pps.merchant.services.ValidationErrorDTO com.csam.pps.merchant.services.RestErrorHandler.processValidationError(org.springframework.web.bind.MethodArgumentNotValidException): org.springframework.web.HttpMediaTypeNotAcceptableException: Could not find acceptable representation<br> at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:157) [spring-webmvc-3.2.8.RELEASE.jar:3.2.8.RELEASE]</p>
<p class="cye-lm-tag"><strong>Update: I removed the non relevant part of the stacktrace – Petri</strong></p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-725617"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">July 11, 2014, 12:07</span></div><div class="comment_text" id="comment-body-725617"><p class="cye-lm-tag">It’s kind of hard to say what is wrong without seeing the source code but you should probably check the following things:</p>
<ul><li>Ensure that the required Jackson jars are in the classpath. See the <a href="https://github.com/pkainulainen/spring-from-the-trenches/blob/master/rest-validation-3.2/pom.xml" target="_blank" rel="nofollow"><em>pom.xml</em> file of the example application</a> for more details.</li><li>Ensure that the <code>processValidationError()</code> method is annotated with the <code>@ResponseBody</code> annotation.</li><li>Ensure that the value of the <code>Accept</code> header send by the client is ‘application/json’.</li></ul><p class="cye-lm-tag">Also, you might want to check out the following resources:</p>
<ul><li><a href="http://stackoverflow.com/questions/3340050/springs-json-not-being-resolved-with-appropriate-response" target="_blank" rel="nofollow">Spring’s Json not being resolved with appropriate response</a></li><li><a href="http://stackoverflow.com/questions/17359194/httpmediatypenotacceptableexception-with-spring-3-1-2-and-jackson-1-9-11" target="_blank" rel="nofollow">HttpMediaTypeNotAcceptableException with Spring 3.1.2 and Jackson 1.9.11</a></li><li><a href="http://stackoverflow.com/questions/22384722/spring-mvc-throwing-org-springframework-web-httpmediatypenotacceptableexception" target="_blank" rel="nofollow">http://stackoverflow.com/questions/22384722/spring-mvc-throwing-org-springframework-web-httpmediatypenotacceptableexception</a></li><li><a href="http://forum.spring.io/forum/spring-projects/web/77447-httpmediatypenotacceptableexception-always" target="_blank" rel="nofollow">HttpMediaTypeNotAcceptableException (always)</a></li></ul></div> </div><ul class="children"><li class="comment odd alt depth-3" id="comment-725766"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Darshann</span>  <span class="comment_date cye-lm-tag">July 11, 2014, 15:53</span></div><div class="comment_text" id="comment-body-725766"><p class="cye-lm-tag">Thanks Petri,</p>
<p class="cye-lm-tag">I have rechecked everything and found that i have not included getter,setter of FieldErrorDTO.</p>
<p class="cye-lm-tag">Now its solved problem and working as expected.</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-4" id="comment-725770"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">July 11, 2014, 16:04</span></div><div class="comment_text" id="comment-body-725770"><p class="cye-lm-tag">It is good to hear that you were able to solve your problem!</p>
</div> </div><ul class="children"><li class="comment odd alt depth-5" id="comment-725784"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Darshan</span>  <span class="comment_date cye-lm-tag">July 11, 2014, 16:24</span></div><div class="comment_text" id="comment-body-725784"><p class="cye-lm-tag">Yes Petri,<br> Thanks for the article.</p>
<p class="cye-lm-tag">i want to ask do you know how i can log request/response payload in json format?</p>
</div></div></li><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-5" id="comment-726468"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">July 12, 2014, 10:34</span></div><div class="comment_text" id="comment-body-726468"><p class="cye-lm-tag">Hi Darshan,</p>
<p class="cye-lm-tag">I found this <a href="http://stackoverflow.com/questions/12371168/how-can-i-log-restful-post-data" target="_blank" rel="nofollow">StackOverflow question</a> which has a few solutions to this problem. However, I would start be decreasing the log level of the <code>org.springframework</code> loggers and see if Spring already does this (I cannot remember if Spring logs request / response payloads).</p>
</div></div></li></ul></li></ul></li></ul></li></ul></li><li class="comment odd alt thread-odd thread-alt depth-1" id="comment-731105"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">psr</span>  <span class="comment_date cye-lm-tag">July 18, 2014, 09:29</span></div><div class="comment_text" id="comment-body-731105"><p class="cye-lm-tag">Hi Petri,</p>
<p class="cye-lm-tag">I found this to be a great tutorial. Thanks a lot!</p>
<p class="cye-lm-tag">I was able to implement the validation for POST methods when the parameter is a @RequestBody. However, I am trying to do the validations for GET methods as well for the query parameters. The validation just doesn’t happen. No errors are thrown. Any idea what I might be missing in here?</p>
<p class="cye-lm-tag">I annotated my controller class with @Validated, and my method’s query param with @Range(min=1) @RequestParam xyz. Could you please help me out here?</p>
<p class="cye-lm-tag">Thanks a lot in advance!</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-731142"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">July 18, 2014, 10:46</span></div><div class="comment_text" id="comment-body-731142"><p class="cye-lm-tag">As far as I know, it is not possible to validate individual request parameters by using the technique described in this blog post.</p>
<p class="cye-lm-tag">Are you trying to implement a search function which validates the search conditions? If so, I would probably validate the search conditions manually in the controller method and handle “validation errors” in the error handler class (a class that is annotated with the <code>@ControllerAdvice</code> annotation).</p>
<p class="cye-lm-tag">I know that this is a bit clumsy approach. If you figure out a better way to do this, I would want to hear about it!</p>
</div> </div><ul class="children"><li class="comment odd alt depth-3" id="comment-731528"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">psr</span>  <span class="comment_date cye-lm-tag">July 19, 2014, 00:00</span></div><div class="comment_text" id="comment-body-731528"><p class="cye-lm-tag">Hi Petri,</p>
<p class="cye-lm-tag">Thanks a lot for your quick response.</p>
<p class="cye-lm-tag">What I wanted was this:<br> <a href="http://techblogs4u.blogspot.com/2012/09/method-parameter-validation-in-spring-3.html" rel="nofollow">http://techblogs4u.blogspot.com/2012/09/method-parameter-validation-in-spring-3.html</a><br> That link helped me.</p>
<p class="cye-lm-tag">Also, I like most of your blogs. They are really helpful.<br> Are you planning to write anything on how to setup access control and authorization in spring?<br> Looking forward to that.</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-4" id="comment-732257"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">July 20, 2014, 00:32</span></div><div class="comment_text" id="comment-body-732257"><p class="cye-lm-tag">It is nice to hear that you were able to solve your problem!</p>
<blockquote><p class="cye-lm-tag">Are you planning to write anything on how to setup access control and authorization in spring?</p>
</blockquote><p class="cye-lm-tag">I haven’t made any plans to write about Spring Security anytime soon. Eugen Paraschiv has written <a href="http://www.baeldung.com/security-spring" target="_blank" rel="nofollow">a very comprehensive Spring Security tutorial</a>. If you want to learn more about Spring Security, you should take a look at that tutorial.</p>
</div> </div><ul class="children"><li class="comment odd alt depth-5" id="comment-733204"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">psr</span>  <span class="comment_date cye-lm-tag">July 21, 2014, 04:00</span></div><div class="comment_text" id="comment-body-733204"><p class="cye-lm-tag">Thanks a lot for the link!</p>
</div></div></li><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-5" id="comment-733521"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">July 21, 2014, 10:39</span></div><div class="comment_text" id="comment-body-733521"><p class="cye-lm-tag">You are welcome. I hope that the tutorial is useful to you.</p>
</div></div></li></ul></li></ul></li></ul></li></ul></li><li class="comment odd alt thread-even depth-1" id="comment-782638"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Stephane</span>  <span class="comment_date cye-lm-tag">August 27, 2014, 11:35</span></div><div class="comment_text" id="comment-body-782638"><p class="cye-lm-tag">Hi Petri,</p>
<p class="cye-lm-tag">I wonder if there is a way to handle a request aiming at an unknown mapping.</p>
<p class="cye-lm-tag">Spring doesn’t seem to send an exception in that case.</p>
<p class="cye-lm-tag">Being able to handle the “No mapping found for HTTP request with URI” would allow us to respond with a JSON payload instead of a 404 page.</p>
<p class="cye-lm-tag">Kind Regards,</p>
<p class="cye-lm-tag">Stephane Eybert</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-784536"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">August 28, 2014, 18:12</span></div><div class="comment_text" id="comment-body-784536"><p class="cye-lm-tag">Hi Stephane,</p>
<p class="cye-lm-tag">You should check out <a href="http://stackoverflow.com/a/22231355/313554" target="_blank" rel="nofollow">this StackOverflow answer</a>. It should answer to your question.</p>
</div> </div><ul class="children"><li class="comment odd alt depth-3" id="comment-815312"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Stephane</span>  <span class="comment_date cye-lm-tag">September 16, 2014, 10:39</span></div><div class="comment_text" id="comment-body-815312"><p class="cye-lm-tag">That’s the one :-) Awesome Petri !</p>
</div> </div></li></ul></li></ul></li><li class="comment even thread-odd thread-alt depth-1" id="comment-789511"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Stephane</span>  <span class="comment_date cye-lm-tag">September 1, 2014, 08:48</span></div><div class="comment_text" id="comment-body-789511"><p class="cye-lm-tag">Hi Petri,</p>
<p class="cye-lm-tag">I’m looking for guidelines into validating a parent admin resource (AdminResource extending the Spring ResourceSupport class) as not being empty (@NotEmpty) in a child admin module resource (AdminModuleResource extending the Spring ResourceSupport class). I understand the<br> AdminResource class should also implement the Serializable interface ? Is that the way to go with Spring ResourceSupport-ed resources ? Thanks for any directions tips !</p>
<p class="cye-lm-tag">Kind Regards,</p>
<p class="cye-lm-tag">Stephane Eybert</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-790412"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">September 1, 2014, 20:52</span></div><div class="comment_text" id="comment-body-790412"><p class="cye-lm-tag">I assume that you are talking about <a href="http://projects.spring.io/spring-hateoas/" target="_blank" rel="nofollow">Spring HATEOAS</a>?</p>
<p class="cye-lm-tag">I have experience from it but you should be able to validate your DTOs by using either <a href="/programming/spring-framework/spring-from-the-trenches-adding-validation-to-a-rest-api/#comment-588453" rel="nofollow">JSR 303 or JSR 349</a>.</p>
<p class="cye-lm-tag">Also, <a href="https://github.com/spring-projects/spring-hateoas/blob/master/readme.md" target="_blank" rel="nofollow">the README of Spring HATEOAS</a> doesn’t state that a class that extends the <code>ResourceSupport</code> class must implement the <code>Serializable</code> interface.</p>
<p class="cye-lm-tag">Hmmh. Maybe I didn’t understand your question. If you feel this way too, let me know.</p>
</div> </div></li></ul></li><li class="comment even thread-even depth-1" id="comment-986134"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Alind Billore</span>  <span class="comment_date cye-lm-tag">November 18, 2014, 09:32</span></div><div class="comment_text" id="comment-body-986134"><p class="cye-lm-tag">Hi Petri,<br> I followed your blog post but stuck at a point, the controller method annotated with @ExceptionaHandler is not registered with Jackson. Can you please please help me to sort it out ?</p>
<p class="cye-lm-tag">I have posted my detailed question here on stackoverflow.<br> <a href="http://stackoverflow.com/questions/26982053/spring-3-2-exceptionhandler-responsebody-json-response-via-jackson" rel="nofollow">http://stackoverflow.com/questions/26982053/spring-3-2-exceptionhandler-responsebody-json-response-via-jackson</a></p>
<p class="cye-lm-tag">Many Thanks To You !!<br> Regards,<br> Alind Billore</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-987356"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">November 18, 2014, 20:59</span></div><div class="comment_text" id="comment-body-987356"><p class="cye-lm-tag">Hi,</p>
<p class="cye-lm-tag">Did <a href="/programming/spring-framework/spring-from-the-trenches-adding-validation-to-a-rest-api/#comment-273848" rel="nofollow">this answer</a> solve your problem?</p>
</div> </div></li></ul></li><li class="comment even thread-odd thread-alt depth-1" id="comment-1009082"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Shamseer</span>  <span class="comment_date cye-lm-tag">November 27, 2014, 12:44</span></div><div class="comment_text" id="comment-body-1009082"><p class="cye-lm-tag">Hi Petri,</p>
<p class="cye-lm-tag">I found this to be a great tutorial. Thanks a lot!.</p>
<p class="cye-lm-tag">using @Valid MyObject obj i am able to validate MyObject. is it possible to handle javax.validation.ConstraintViolation like MethodArgumentNotValidException ? here is my code</p>
<pre><code>
public MyResponse editFields(@RequestBody final Map jsonDataMap){
	for (Map.Entry entry : jsonDataMap.entrySet()) {
		MyObject obj = service.getObject(jsonDataMap.get("id"));
		PropertyAccessor myAccessor = PropertyAccessorFactory.forBeanPropertyAccess(obj);
	}	
	// is it possible to validate obj here ? (i am able to valiate @Valid Object obj).
	//
}
</code>
</pre><p class="cye-lm-tag">Thanks in advance.</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-1009632"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">November 27, 2014, 18:36</span></div><div class="comment_text" id="comment-body-1009632"><p class="cye-lm-tag">Hi Shamseer,</p>
<blockquote><p class="cye-lm-tag">I found this to be a great tutorial. Thanks a lot!.</p>
</blockquote><p class="cye-lm-tag">You are welcome!</p>
<p class="cye-lm-tag">The <a href="http://docs.spring.io/spring/docs/current/spring-framework-reference/htmlsingle/#validation" target="_blank" rel="nofollow">section 7. Validation, Data Binding, and Type Conversion of the Spring Reference Manual</a> describes how you use the validation support provided by Spring Framework. You have two options:</p>
<ul><li>You can use the Bean Validation API 1.0 or the Bean Validation API 1.1.</li><li>You can create a custom <a href="http://docs.spring.io/spring-framework/docs/4.1.x/javadoc-api/org/springframework/validation/Validator.html" target="_blank" rel="nofollow"><code>Validator</code></a> object.</li></ul><p class="cye-lm-tag">If your <code>MyObject</code> class contains the constraint annotations, you can trigger the validation manually. See the <a href="http://docs.spring.io/spring/docs/current/spring-framework-reference/htmlsingle/#validation-beanvalidation" target="_blank" rel="nofollow">section 7.8 Spring Validation of the Spring Reference Manual</a> for more details about this.</p>
<p class="cye-lm-tag">If the <code>MyObject</code> class doesn’t contain the constraint annotations, you can validate it by creating a custom <code>Validator</code>. If you have to do this, you can follow these steps:</p>
<ol><li><a href="http://stackoverflow.com/a/12149331/313554" target="_blank" rel="nofollow">Create a custom <code>Validator</code> and validate the method parameter</a>.</li><li>If the <a href="http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/validation/BindingResult.html" target="_blank" rel="nofollow"><code>BindingResult</code></a> contains errors, throw a new <a href="http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/bind/MethodArgumentNotValidException.html" target="_blank" rel="nofollow"><code>MethodArgumentNotValidException</code></a>.</li></ol><p class="cye-lm-tag">I hope that this answered to your question. If you have any further questions, don’t hesitate to ask them.</p>
</div> </div></li></ul></li><li class="comment even thread-even depth-1" id="comment-1133813"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Lukasz</span>  <span class="comment_date cye-lm-tag">February 26, 2015, 14:27</span></div><div class="comment_text" id="comment-body-1133813"><p class="cye-lm-tag">I just thinking its possible to change message code to hibernate validation code , for example now in your example you have got :<br> NotEmpty.commentDTO.text=Text cannot be empty.<br> Length.commentDTO.text=The maximum length of text is {1} characters.</p>
<p class="cye-lm-tag">And it’s ok but i want to implement strategy that when code like abowe is not visible then i am using hibernate validation :<br> javax.validation.constraints.NotNull.message     = may not be null<br> org.hibernate.validator.constraints.Email.message                   = not a well-formed email address</p>
<p class="cye-lm-tag">But now i can see any code (javax.validation.constraints.NotNull.message) ?</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-1136816"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">March 1, 2015, 10:26</span></div><div class="comment_text" id="comment-body-1136816"><p class="cye-lm-tag">Do you want to use the Hibernate validator’s default messages or just return the error code?</p>
<p class="cye-lm-tag">If you want to use the default messages, you can simply delete the relevant messages from the <em>src/main/resources/i18n/messages.properties</em> file.</p>
<p class="cye-lm-tag">If you want to return the error code, you have modify the <code>RestErrorHandler</code> class. To be more specific, you have to make the following changes to its <code>processFieldErrors()</code> method:</p>
<ol><li>Instead of resolving the localized error message for each field error, you have to resolve the returned error code.</li><li>Call the the <code>addFieldError()</code> method of the <code>ValidationErrorDTO</code> class and pass the field name and error code as method parameters.</li></ol><p class="cye-lm-tag">I hope that this answered to your question.</p>
</div> </div></li></ul></li><li class="comment even thread-odd thread-alt depth-1" id="comment-1235555"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Ben Li</span>  <span class="comment_date cye-lm-tag">June 30, 2015, 23:04</span></div><div class="comment_text" id="comment-body-1235555"><p class="cye-lm-tag">First, Thanks for the great article. The example you provide work extremely well.<br> I have a question regarding the rest validation.</p>
<p class="cye-lm-tag">I have a model contains the following field.</p>
<pre><code>
@Table
@Entity(name = "CLIENT_ACCOUNTS")
@JsonIdentityInfo(generator = ObjectIdGenerators.IntSequenceGenerator.class, property = "@id")
public class ClientAccount implements Serializable {
    private static final long serialVersionUID = -7844111354345609675L;

    @Id
    @Column(name = "CLIENT_ACCOUNT_ID")
    private Integer clientAccountId;
    @Column(name = "LOGON_NAME")
    @NotEmpty
    private String logonName;
    @Column(name = "PASSWORD")
    @NotEmpty
    private String password;
    @Transient
    @NotEmpty
    private String confirmPassword;
    @NotEmpty
    @Column(name = "DISPLAY_NAME")
    private String displayName;
    @Column(name = "ACCOUNT_STATUS")
    private Integer accountStatusCode;
    @Column(name = "LAST_UPDATE_DATE")
    private Date lastUpdate;
    @JoinColumn(name = "LAST_UPDATE_BY")
    @OneToOne
    private ClientAccount lastUpdatedBy;
    @Column(name = "PASSWORD_EXPIRY_DATE")
    private Date passwordExpiry;
    @Type(type = "com.test.core.hibernate.type.ValueLabelType",
		parameters = {
			@Parameter(name = "enumClassName", 
			value = "com.test.common.Constants$AccountType")
		}
    )
    @Column(name = "ACCOUNT_TYPE")
    private AccountType accountType;
    @OneToMany(mappedBy = "clientAccount")
    @JsonBackReference
    private Set clientAccesses;
}
</code>
</pre><p class="cye-lm-tag">and my JSON model is the subset of the Model as the following.</p>
<pre><code>
{
    "clientAccountId": null,
    "displayName": null,
    "accountStatus": 0,
    "logonName": null,
    "password": null,
    "confirmPassword": null
}
</code>
</pre><p class="cye-lm-tag">my endpoint as the following</p>
<pre><code>
@RestController
...
//TODO : add security
@RequestMapping(value="/save", method=RequestMethod.POST)
public ClientAccountDto save(@RequestParam("wuid") WebUser webUser, 
							 @Valid ClientAccountDto clientAccount) {
}
</code>
</pre><p class="cye-lm-tag">if the fields in the JSON contains the values, it works.</p>
<p class="cye-lm-tag">if the validation failed, it returns http 400, but the responseJSON field in the response object is not set anything. the RestErrorHandler class is not called.</p>
<p class="cye-lm-tag">if I modify the JAVA model that maps to JSON model and if the validation failed. the RestErrorHandler is call and the response.responseJSON contains the validation error message.</p>
<p class="cye-lm-tag">My question is, is there a way to validate subset of the fields in a model?</p>
<p class="cye-lm-tag">Thanks,</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-1235580"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">June 30, 2015, 23:36</span></div><div class="comment_text" id="comment-body-1235580"><p class="cye-lm-tag">Hi,</p>
<p class="cye-lm-tag">thank you for your kind words. I really appreciate them.</p>
<blockquote><p class="cye-lm-tag">My question is, is there a way to validate subset of the fields in a model?</p>
</blockquote><p class="cye-lm-tag">Yes. You can use validation groups. You have to make the following changes to your code:</p>
<ol><li>Replace the <code>@Valid</code> annotation with the <a href="http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/validation/annotation/Validated.html" target="_blank" rel="nofollow"><code>@Validated</code></a> annotation and specify the used validation group(s).</li><li>Add the validation group(s) to the constraint annotations. The StackOverflow question titled: <a href="http://stackoverflow.com/questions/17475756/bean-validation-groups-understanding-it-correctly" target="_blank" rel="nofollow">Bean Validation Groups – Understanding it correctly </a> explains how these groups works.</li></ol><p class="cye-lm-tag">However, I am not sure if this will help you to solve your problem because you mentioned that the <code>RestErrorHandler</code> is not called if the validation fails (if you don’t modify the <code>ClientAccount</code> class).</p>
<p class="cye-lm-tag">What did you mean by this, and what kind of changes do you have to do to the <code>ClientAccount</code> class?</p>
</div> </div></li></ul></li><li class="comment even thread-even depth-1" id="comment-1326669"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Sandy</span>  <span class="comment_date cye-lm-tag">December 8, 2015, 17:49</span></div><div class="comment_text" id="comment-body-1326669"><p class="cye-lm-tag">Hi ,<br> Can you please help me with the date validator i need to check from date is not greater then to date.<br> how can i create it with the help of spring rest validator .</p>
</div> </div><ul class="children"><li class="comment odd alt depth-2" id="comment-1326673"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Anonymous</span>  <span class="comment_date cye-lm-tag">December 8, 2015, 17:53</span></div><div class="comment_text" id="comment-body-1326673"><p class="cye-lm-tag">this is my method which m calling from my controller<br> DateValidator.validate(PageFilters pageFilters); it has 2 parameters which m passing from my controller to DateValidator class<br> String fromDate = pageFilters.getFilterByAsString(“fromDate”);<br> String toDate = pageFilters.getFilterByAsString(“toDate”);</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-3" id="comment-1327400"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">December 9, 2015, 22:34</span></div><div class="comment_text" id="comment-body-1327400"><p class="cye-lm-tag">Hi,</p>
<p class="cye-lm-tag">Are you trying to validate the field value of a “form” object or a single request parameter?</p>
<p class="cye-lm-tag">If you are validating the field value of a “form” object, you have to create a custom validation constraint and annotate the relevant field with the constraint annotation. <a href="http://docs.jboss.org/hibernate/validator/4.2/reference/en-US/html_single/#validator-customconstraints" target="_blank" rel="nofollow">The reference manual of Hibernate Validator</a> describes how you can do this.</p>
<p class="cye-lm-tag">If you are validating a single request parameter, you need to add the validation logic into your controller method.</p>
</div> </div></li></ul></li></ul></li><li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1393491"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Gopal</span>  <span class="comment_date cye-lm-tag">March 16, 2016, 16:08</span></div><div class="comment_text" id="comment-body-1393491"><p class="cye-lm-tag">Hi I am not able to get the JSON response of ValidationErrorDTO for BAD REQUEST at my Jersey Client when I call ClientResponse.getEntity(String.class)</p>
<p class="cye-lm-tag">But it works fine if I send header for XML response and I am getting the error response in XML properly. Can you throw some light on what might be the problem ?</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-1396148"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">March 19, 2016, 18:28</span></div><div class="comment_text" id="comment-body-1396148"><p class="cye-lm-tag">Hi,</p>
<p class="cye-lm-tag">I haven’t personally run into this problem, and that is why it’s a bit hard to say what could be wrong. That being said, can you debug the backend and see if the error handler component is invoked when the problem occurs? Also, do you set the accept header when you face this problem?</p>
</div> </div></li></ul></li><li class="comment odd alt thread-even depth-1" id="comment-1407955"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Anaice</span>  <span class="comment_date cye-lm-tag">April 2, 2016, 01:11</span></div><div class="comment_text" id="comment-body-1407955"><p class="cye-lm-tag">Hi Petri.</p>
<p class="cye-lm-tag">Your website is fantastic, it’s becoming a reference to me in Spring/FunOfProgrammingWithJavaAgain World. =)<br> I have some doubts about good practices and it would be very enriching to know your opinion about it.</p>
<p class="cye-lm-tag">I’m structuring an application that has several sub-modules:</p>
<p class="cye-lm-tag">1) myapp-commons ( utilities , logging , etc. ) JAR<br> 2) myapp-entity ( jpa entities, uses lombok ) JAR<br> 4) myapp-persistence ( repositories ) JAR<br> 5) myapp-service (service layer with business logic. May trigger my custom exceptions :  TechnicalException, BusinessException, ValidationException and EntityNotFoundException) JAR<br> 6) myapp-wsrest (rest controllers, custom rest exceptions, mapstruct library to map entity  resource. Catch my service layer and triggers exceptions NotFound , BadRequest and InternalServerError wrappers responses) WAR<br> 7) myapp-resource (DTO ‘s returned by rest layer, uses lombok) JAR</p>
<p class="cye-lm-tag">first one)<br> Now I’m adding Bean Validation API features. I saw that you are using the api in the REST layer. It seems to me that the best place to validate fields would not be in the service layer, after all I think the REST layer should be only a translator for the Rest API to the service layer, not worrying about details of service layer responsibility. I wonder what you think about it, what is your opinion?</p>
<p class="cye-lm-tag">second)<br> If I wanted to include these validations in the service layer @Valid the notes could be used ? Because in practical terms Spring MVC throws MethodArgumentNotValidException that can be handled to customize the validation messages in each bean field. But how to use @Valid in a common java class ( @Service ) ? There is an exception thrown by Spring?</p>
<p class="cye-lm-tag">third one)<br> Do you think Spring Data REST is a good development practice , ie use repositories with @RepositoryRestResource and expose the entities directly (without DTO, or just using @Projections)? Business rules would be in classes with @RepositoryEventHandler ( beforeSave , beforeCreate , etc. ) ? Do you have any experience to share using this approach ? ( OFF: Spring Data REST would be an interesting topic for a second edition of your book =D , by the way I will buy it soon )</p>
<p class="cye-lm-tag">Sorry so many questions, but your opinion is very welcome!</p>
<p class="cye-lm-tag">Thanks.</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-1410743"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">April 4, 2016, 20:47</span></div><div class="comment_text" id="comment-body-1410743"><p class="cye-lm-tag">Hi Anaice,</p>
<blockquote><p class="cye-lm-tag">I’m structuring an application that has several sub-modules</p>
</blockquote><p class="cye-lm-tag">I know that you didn’t ask feedback about your architecture, but I think that you should read an excellent blog post titled: <a href="http://olivergierke.de/2013/01/whoops-where-did-my-architecture-go/" target="_blank" rel="nofollow">Whoops! Where did my architecture go</a>.</p>
<blockquote><p class="cye-lm-tag">Now I’m adding Bean Validation API features. I saw that you are using the api in the REST layer. It seems to me that the best place to validate fields would not be in the service layer, after all I think the REST layer should be only a translator for the Rest API to the service layer, not worrying about details of service layer responsibility. I wonder what you think about it, what is your opinion?</p>
</blockquote><p class="cye-lm-tag">I think that the web layer must ensure that sane input data is provided to the service layer. However, it shouldn’t enforce any business rules. This logic belongs either to the service layer or to the domain model.</p>
<blockquote><p class="cye-lm-tag">If I wanted to include these validations in the service layer @Valid the notes could be used ? Because in practical terms Spring MVC throws MethodArgumentNotValidException that can be handled to customize the validation messages in each bean field. But how to use @Valid in a common java class ( @Service ) ? There is an exception thrown by Spring?</p>
</blockquote><p class="cye-lm-tag">Check out this <a href="http://stackoverflow.com/questions/19425221/spring-validated-in-service-layer" target="_blank" rel="nofollow">StackOverflow question</a>. It describes how you can use the <code>@Validated</code> annotation in the service layer (I know that this doesn’t use the <code>@Valid</code> annotation). However, I wouldn’t use it in the service layer because I want to throw specific exceptions instead of the <code>MethodArgumentNotValidException</code>. This way I can register custom error handler methods that deal with exceptions thrown by my business logic.</p>
<blockquote><p class="cye-lm-tag">Do you think Spring Data REST is a good development practice , ie use repositories with @RepositoryRestResource and expose the entities directly (without DTO, or just using @Projections)? Business rules would be in classes with @RepositoryEventHandler ( beforeSave , beforeCreate , etc. ) ? Do you have any experience to share using this approach ?</p>
</blockquote><p class="cye-lm-tag">I have never personally used Spring Data REST so I cannot give you any feedback that is based on experience. However, if you are implementing a simple CRUD application that doesn’t have complicated business logic, using it might be a viable option (it can save you a lot of time). Also, remember that can use it for certain parts of your application and implement the rest by using the “normal” approach.</p>
</div> </div></li></ul></li><li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1495310"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">caytekin</span>  <span class="comment_date cye-lm-tag">October 11, 2016, 16:20</span></div><div class="comment_text" id="comment-body-1495310"><p class="cye-lm-tag">Great! Thanks very much; the solution you proposed worked like a breeze for my validation. It is very clearly written and the code works as is. My compliments.</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-1495343"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">October 11, 2016, 19:55</span></div><div class="comment_text" id="comment-body-1495343"><p class="cye-lm-tag">Thank you for your kinds words. I really appreciate them. Also, it was nice to hear that this post was useful to you.</p>
</div> </div></li></ul></li></ul>
 </section>
</body>
</html>