<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<title>Test Data Builders</title>
    <link rel="stylesheet" href="../Git Guide/grey.css">
</head>
<body>
<a href="http://www.natpryce.com/articles/000714.html">src</a>
<h2>Test Data Builders: an alternative to the Object Mother
    pattern</h2>
<div id="article" class="cye-lm-tag">
        
        <p class="cye-lm-tag">If you are
  strict about your use of constructors and immutable value objects,
  constructing objects in a valid state can be a bit of a chore.</p>
        <p class="cye-lm-tag">Usually
  in application code, such objects are constructed in few places and all the
  information required by the constructor is at hand, having been provided by
  user input, obtained from a database query or received in a message for
  example. In tests, on the other hand, you have to provide all those
  constructor arguments every time you want to create an object, whether to
  test its behaviour or to create a value to use as input to the code being
  tested.</p>
        <pre class="Java Source hljs" xml:space="preserve">Invoice invoice = <span class="hljs-keyword cye-lm-tag">new</span> Invoice(
    <span class="hljs-keyword cye-lm-tag">new</span> Recipient(<span class="hljs-string cye-lm-tag">"Sherlock Holmes"</span>,
        <span class="hljs-keyword cye-lm-tag">new</span> Address(<span class="hljs-string cye-lm-tag">"221b Baker Street"</span>, 
                    <span class="hljs-string cye-lm-tag">"London"</span>, 
                    <span class="hljs-keyword cye-lm-tag">new</span> PostCode(<span class="hljs-string cye-lm-tag">"NW1"</span>, <span class="hljs-string cye-lm-tag">"3RX"</span>))),
    <span class="hljs-keyword cye-lm-tag">new</span> InvoiceLines(
        <span class="hljs-keyword cye-lm-tag">new</span> InvoiceLine(<span class="hljs-string cye-lm-tag">"Deerstalker Hat"</span>, 
            <span class="hljs-keyword cye-lm-tag">new</span> PoundsShillingsPence(<span class="hljs-number cye-lm-tag">0</span>, <span class="hljs-number cye-lm-tag">3</span>, <span class="hljs-number cye-lm-tag">10</span>)),
        <span class="hljs-keyword cye-lm-tag">new</span> InvoiceLine(<span class="hljs-string cye-lm-tag">"Tweed Cape"</span>, 
            <span class="hljs-keyword cye-lm-tag">new</span> PoundsShillingsPence(<span class="hljs-number cye-lm-tag">0</span>, <span class="hljs-number cye-lm-tag">4</span>, <span class="hljs-number cye-lm-tag">12</span>))));
</pre>
        <p class="cye-lm-tag">The code to create all those objects makes tests messy and hard to
  read and fills the tests with lots of unnecessary information that has
  nothing to do with the behaviour being tested. It also makes tests brittle:
  changes to the constructor arguments or the structure of the objects will
  break many tests.</p>
        <p class="cye-lm-tag">The <a href="http://www.c2.com/cgi/wiki?ObjectMother" shape="rect">Object
  Mother</a> pattern is one attempt to avoid this problem. An Object Mother is
  a class that contains a number of (usually static) <a href="http://www.c2.com/cgi/wiki?FactoryMethod" shape="rect">Factory
  Methods</a> that create objects for use in tests. For example, we could
  create an Object Mother for invoices we want to use in tests:</p>
        <pre class="Java Source hljs" xml:space="preserve">Invoice invoice = TestInvoices.newDeerstalkerAndCapeInvoice();
</pre>
        <p class="cye-lm-tag">An Object Mother helps keep tests readable by moving the code that
  creates new objects out of the tests themselves and giving clear names to
  the objects being constructed. It also helps maintain the test data by
  gathering the code that creates new objects together into the Object Mother
  class and allowing it to be reused between tests.</p>
        <p class="cye-lm-tag">However, the Object
  Mother pattern does not cope at all well with variation in the test data.
  Every time programmers need some slightly different test data they add
  another factory method to the Object Mother.</p>
        <pre class="Java Source hljs" xml:space="preserve">Invoice invoice1 = TestInvoices.newDeerstalkerAndCapeAndSwordstickInvoice();
Invoice invoice2 = TestInvoices.newDeerstalkerAndBootsInvoice();
...</pre>
        <p class="cye-lm-tag">Over time, the Object Mother becomes bloated, messy and hard to
  maintain. Either programmers add new factory methods without refactoring, in
  which case the Object Mother becomes full of duplicated code, or programmers
  refactor diligently, in which case the Object Mother becomes full of many,
  many fine-grained methods that each contain little more than a single new
  statement.</p>
        <p class="cye-lm-tag">A solution is to use the <a href="http://www.c2.com/cgi/wiki?BuilderPattern" shape="rect">Builder
  Pattern</a>. For each class you want to use in a test, create a Builder for
  that class that:</p>
        <ol>
      <li>Has an instance variable for each constructor parameter</li>

      <li>Initialises its instance variables to commonly used or safe
      values</li>

      <li>Has a `build` method that creates a new object using the values in
      its instance variables</li>

      <li>Has "chainable" public methods for overriding the values in its
      instance variables.</li>
    </ol>
        <p class="cye-lm-tag">For example, a builder of Invoice objects might look like:</p>
        <pre class="Java Source hljs" xml:space="preserve"><span class="hljs-keyword cye-lm-tag">public</span> <span class="hljs-class cye-lm-tag"><span class="hljs-keyword cye-lm-tag">class</span> <span class="hljs-title cye-lm-tag">InvoiceBuilder</span> </span>{
    Recipient recipient = <span class="hljs-keyword cye-lm-tag">new</span> RecipientBuilder().build();
    InvoiceLines lines = <span class="hljs-keyword cye-lm-tag">new</span> InvoiceLines(<span class="hljs-keyword cye-lm-tag">new</span> InvoiceLineBuilder().build());
    PoundsShillingsPence discount = PoundsShillingsPence.ZERO;

    <span class="hljs-function cye-lm-tag"><span class="hljs-keyword cye-lm-tag">public</span> InvoiceBuilder <span class="hljs-title cye-lm-tag">withRecipient</span><span class="hljs-params cye-lm-tag">(Recipient recipient)</span> </span>{
        <span class="hljs-keyword cye-lm-tag">this</span>.recipient = recipient;
        <span class="hljs-keyword cye-lm-tag">return</span> <span class="hljs-keyword cye-lm-tag">this</span>;
    }

    <span class="hljs-function cye-lm-tag"><span class="hljs-keyword cye-lm-tag">public</span> InvoiceBuilder <span class="hljs-title cye-lm-tag">withInvoiceLines</span><span class="hljs-params cye-lm-tag">(InvoiceLines lines)</span> </span>{
        <span class="hljs-keyword cye-lm-tag">this</span>.lines = lines;
        <span class="hljs-keyword cye-lm-tag">return</span> <span class="hljs-keyword cye-lm-tag">this</span>;
    }

    <span class="hljs-function cye-lm-tag"><span class="hljs-keyword cye-lm-tag">public</span> InvoiceBuilder <span class="hljs-title cye-lm-tag">withDiscount</span><span class="hljs-params cye-lm-tag">(PoundsShillingsPence discount)</span> </span>{
        <span class="hljs-keyword cye-lm-tag">this</span>.discount = discount;
        <span class="hljs-keyword cye-lm-tag">return</span> <span class="hljs-keyword cye-lm-tag">this</span>;
    }

    <span class="hljs-function cye-lm-tag"><span class="hljs-keyword cye-lm-tag">public</span> Invoice <span class="hljs-title cye-lm-tag">build</span><span class="hljs-params cye-lm-tag">()</span> </span>{
        <span class="hljs-keyword cye-lm-tag">return</span> <span class="hljs-keyword cye-lm-tag">new</span> Invoice(recipient, lines, discount);
    }
}</pre>
        <p class="cye-lm-tag">Tests that don't care about the precise values in an Invoice can
  create one in a single line:</p>
        <pre class="Java Source hljs" xml:space="preserve">Invoice anInvoice = <span class="hljs-keyword cye-lm-tag">new</span> InvoiceBuilder().build();</pre>
        <p class="cye-lm-tag">Tests
  that want to use specific values can define them inline without filling the
  test with unimportant details:</p>
        <pre class="Java Source hljs" xml:space="preserve">Invoice invoiceWithNoPostcode = <span class="hljs-keyword cye-lm-tag">new</span> InvoiceBuilder()
    .withRecipient(<span class="hljs-keyword cye-lm-tag">new</span> RecipientBuilder()
        .withAddress(<span class="hljs-keyword cye-lm-tag">new</span> AddressBuilder()
            .withNoPostcode()
            .build())
        .build())
    .build();</pre>
        <p class="cye-lm-tag">I've used Builders for creating test data on a couple of
  projects now and I've found that, compared to Object Mothers, they make it
  much easier to create test data in-line in the test code without making
  tests brittle or creating lots of duplication. Tests are isolated from those
  aspects of the objects' structure that have no bearing on the test. For
  example, code that creates the invoice with no postcode needs to know that
  an invoice has a recipient, that has an address, that has a postcode, but
  has no further dependencies on the structure of invoices, recipients and
  addresses. You can add constructor arguments without breaking tests at all.
  Removing constructor arguments is easy as well with modern refactoring
  IDEs.</p>
        <p class="cye-lm-tag">Another benefit is that the test code is easier to write and
  read because the parameters are clearly identified. Compare:</p>
        <pre class="Java Source hljs" xml:space="preserve">TestAddresses.newAddress(
    <span class="hljs-string cye-lm-tag">"Sherlock Holmes"</span>, 
    <span class="hljs-string cye-lm-tag">"221b Baker Street"</span>, 
    <span class="hljs-string cye-lm-tag">"London"</span>, 
    <span class="hljs-string cye-lm-tag">"NW1"</span>);</pre>
        <p class="cye-lm-tag">to:</p>
        <pre class="Java Source hljs" xml:space="preserve"><span class="hljs-keyword cye-lm-tag">new</span> AddressBuilder()
    .withName(<span class="hljs-string cye-lm-tag">"Sherlock Holmes"</span>)
    .withStreet(<span class="hljs-string cye-lm-tag">"221b Baker Street"</span>)
    .withCity(<span class="hljs-string cye-lm-tag">"London"</span>)
    .withPostCode(<span class="hljs-string cye-lm-tag">"NW1"</span>, <span class="hljs-string cye-lm-tag">"3RX"</span>)
    .build();
</pre>
        <p class="cye-lm-tag">Nothing in the first example will tell you that "London" has been
  accidentally passed as the second street line instead of the city
  name.</p>
        <p class="cye-lm-tag">In some cases, Builders have so improved the code that they
  ended up being used in the production code as well.</p>
        <p class="cye-lm-tag">Further techniques
  for using Test Data Builders:</p>
        <ul>
      <li><a href="http://www.natpryce.com/articles/000724.html" shape="rect">Define common state and avoid
      aliasing problems</a></li>

      <li><a href="http://www.natpryce.com/articles/000726.html" shape="rect">Combining builders</a></li>

      <li><a href="http://www.natpryce.com/articles/000727.html" shape="rect">Emphase the domain model with
      factory methods</a></li>

      <li><a href="http://www.natpryce.com/articles/000728.html" shape="rect">Factoring out duplicated logic
      creates a domain-specific embedded language for testing</a></li>
    </ul>
        <div class="Credits">Credits: builder picture from the <a href="http://www.keepscotlandbeautiful.org/index.asp?pg=127" shape="rect">Keep Scotland Beautiful</a>
  campaign.</div>
        <p class="cye-lm-tag"><strong>Update:</strong> thanks to <a href="http://rwhansen.blogspot.com/" shape="rect">Richard Hansen</a> for
  pointing out a typo in the builder code, which is now fixed.</p>
      </div>

      <br><hr>
      <div id="article">
        <h1>Tricks with Test Data Builders:
Combining Builders</h1>
        <div class="ImgPanel">
    </div>
        <p>If an object built with a <a href="000714.html" shape="rect">Test Data
Builder</a> contains other objects built with other Test Data
Builders, you can pass one builder to another to save keystrokes
and reduce noise, making tests easier to read. For example, instead
of:</p>
        <pre class="Java Source hljs" xml:space="preserve">Invoice invoice = <span class="hljs-keyword">new</span> InvoiceBuilder()
    .withRecipient(<span class="hljs-keyword">new</span> RecipientBuilder()
        .withAddress(<span class="hljs-keyword">new</span> AddressBuilder()
            .withNoPostcode()
            .build())
        .build())
    .build();

</pre>
        <p>You can write:</p>
        <pre class="Java Source hljs" xml:space="preserve">Invoice invoice = <span class="hljs-keyword">new</span> InvoiceBuilder()
    .withRecipient(<span class="hljs-keyword">new</span> RecipientBuilder()
        .withAddress(<span class="hljs-keyword">new</span> AddressBuilder()
            .withNoPostcode())))
    .build();
</pre>
        <p>The result is significantly easier to read.</p>
      </div>
      <br><hr>
<div id="article">
        <h1>Tricks with Test Data Builders:
Defining Common State</h1>
        <div class="ImgPanel">
    </div>
        <p>Using separate <a href="000714.html" shape="rect">Test Data
Builders</a> to construct objects with common state leads to
duplication and can make the test code harder to read and maintain.
For example:</p>
        <pre class="Java Source hljs" xml:space="preserve">Invoice invoiceWith10PercentDiscount = <span class="hljs-keyword">new</span> InvoiceBuilder()
    .withLine(<span class="hljs-string">"Deerstalker Hat"</span>, <span class="hljs-keyword">new</span> PoundsShillingsPence(<span class="hljs-number">0</span>, <span class="hljs-number">3</span>, <span class="hljs-number">10</span>))
    .withLine(<span class="hljs-string">"Tweed Cape"</span>, <span class="hljs-keyword">new</span> PoundsShillingsPence(<span class="hljs-number">0</span>, <span class="hljs-number">4</span>, <span class="hljs-number">12</span>))
    .withDiscount(<span class="hljs-number">0.10</span>)
    .build();

Invoice invoiceWith25PercentDiscount = <span class="hljs-keyword">new</span> InvoiceBuilder()
    .withLine(<span class="hljs-string">"Deerstalker Hat"</span>, <span class="hljs-keyword">new</span> PoundsShillingsPence(<span class="hljs-number">0</span>, <span class="hljs-number">3</span>, <span class="hljs-number">10</span>))
    .withLine(<span class="hljs-string">"Tweed Cape"</span>, <span class="hljs-keyword">new</span> PoundsShillingsPence(<span class="hljs-number">0</span>, <span class="hljs-number">4</span>, <span class="hljs-number">12</span>))
    .withDiscount(<span class="hljs-number">0.25</span>)
    .build();
</pre>
        <p>Instead, you can initialise a <em>single</em> builder with the
common state and then repeatedly call its build method after
defining values that apply only to the built objects:</p>
        <pre class="Java Source hljs" xml:space="preserve">InvoiceBuilder products = <span class="hljs-keyword">new</span> InvoiceBuilder()
    .withLine(<span class="hljs-string">"Deerstalker Hat"</span>, <span class="hljs-keyword">new</span> PoundsShillingsPence(<span class="hljs-number">0</span>, <span class="hljs-number">3</span>, <span class="hljs-number">10</span>))
    .withLine(<span class="hljs-string">"Tweed Cape"</span>, <span class="hljs-keyword">new</span> PoundsShillingsPence(<span class="hljs-number">0</span>, <span class="hljs-number">4</span>, <span class="hljs-number">12</span>));

Invoice invoiceWith10PercentDiscount = products
    .withDiscount(<span class="hljs-number">0.10</span>)
    .build();

Invoice invoiceWith25PercentDiscount = products
    .withDiscount(<span class="hljs-number">0.25</span>)
    .build();
</pre>
        <p>This can make tests much easier to read because there is less
code and you can give the builder a descriptive name.</p>
        <p>However, you have to be careful if the built objects need
<em>different</em> fields to be initialised. Because the
<code>withXXX</code> methods change the state of the shared
builder, objects built later will be created with the same state as
those created earlier unless it is explicitly overridden. For
example, in the following code, the second invoice has both a
discount <em>and</em> a gift voucher, which is not what the code
appears to communicate at first glance.</p>
        <pre class="Java Source hljs" xml:space="preserve">InvoiceBuilder products = <span class="hljs-keyword">new</span> InvoiceBuilder()
    .withLine(<span class="hljs-string">"Deerstalker Hat"</span>, <span class="hljs-keyword">new</span> PoundsShillingsPence(<span class="hljs-number">0</span>, <span class="hljs-number">3</span>, <span class="hljs-number">10</span>))
    .withLine(<span class="hljs-string">"Tweed Cape"</span>, <span class="hljs-keyword">new</span> PoundsShillingsPence(<span class="hljs-number">0</span>, <span class="hljs-number">4</span>, <span class="hljs-number">12</span>));

Invoice invoiceWithDiscount = products
    .withDiscount(<span class="hljs-number">0.10</span>)
    .build();

Invoice invoiceWithGiftVoucher = products
    .withGiftVoucher(<span class="hljs-string">"12345"</span>)
    .build();
</pre>
        <p>A solution is to add a method or copy constructor to the builder
that copies state from another builder:</p>
        <pre class="Java Source hljs" xml:space="preserve">InvoiceBuilder products = <span class="hljs-keyword">new</span> InvoiceBuilder()
    .withLine(<span class="hljs-string">"Deerstalker Hat"</span>, <span class="hljs-keyword">new</span> PoundsShillingsPence(<span class="hljs-number">0</span>, <span class="hljs-number">3</span>, <span class="hljs-number">10</span>))
    .withLine(<span class="hljs-string">"Tweed Cape"</span>, <span class="hljs-keyword">new</span> PoundsShillingsPence(<span class="hljs-number">0</span>, <span class="hljs-number">4</span>, <span class="hljs-number">12</span>));

Invoice invoiceWithDiscount = <span class="hljs-keyword">new</span> InvoiceBuilder(products)
    .withDiscount(<span class="hljs-number">0.10</span>)
    .build();

Invoice invoiceWithGiftVoucher = <span class="hljs-keyword">new</span> InvoiceBuilder(products)
    .withGiftVoucher(<span class="hljs-string">"12345"</span>)
    .build();
</pre>
        <p>Alternatively, you could add a factory method to the builder
that returns a new builder with a copy of the builder's
state:</p>
        <pre class="Java Source hljs" xml:space="preserve">InvoiceBuilder products = <span class="hljs-keyword">new</span> InvoiceBuilder()
    .withLine(<span class="hljs-string">"Deerstalker Hat"</span>, <span class="hljs-keyword">new</span> PoundsShillingsPence(<span class="hljs-number">0</span>, <span class="hljs-number">3</span>, <span class="hljs-number">10</span>))
    .withLine(<span class="hljs-string">"Tweed Cape"</span>, <span class="hljs-keyword">new</span> PoundsShillingsPence(<span class="hljs-number">0</span>, <span class="hljs-number">4</span>, <span class="hljs-number">12</span>));

Invoice invoiceWithDiscount = products.but().withDiscount(<span class="hljs-number">0.10</span>)
    .build();

Invoice invoiceWithGiftVoucher = products.but().withGiftVoucher(<span class="hljs-string">"12345"</span>)
    .build();
</pre>
        <p>The safest option is to make <em>every</em> with method create
an entirely new copy of the builder instead of returning
<code>this</code>.</p>
      </div>
      <br><hr>
      <div id="article">
        <h1>Tricks with Test Data Builders:
Emphase the Domain Model with Factory Methods</h1>
        <div class="ImgPanel">
    </div>
        <p>Tests that use <a href="000714.html" shape="rect">Test Data
Builders</a> can be made less noisy by <a href="000726.html" shape="rect">combining
builders</a>. This still leaves some noise in the test: the test
code overly emphasises how the tests are building objects at the
expense of what they are building. A future reader of the test will
be far more interested in what objects are being used than in the
way that those objects are constructed.</p>
        <p>We can de-emphasise the builders further by instantiating them
in clearly named factory methods:</p>
        <pre class="Java Source hljs" xml:space="preserve">Order order = 
    anOrder().fromCustomer(
          aCustomer().withAddress(
              anAddress().withNoPostcode())).build();
</pre>
        <p>When we do this, the naming convention we've used for
builder methods up to now gets in the way instead of making things
clearer. The builder code looks better if we rename the methods to
reflect the relationship between objects only, and not include the
type of object at the far end of the relationship:</p>
        <pre class="Java Source hljs" xml:space="preserve">Order order = 
    anOrder().from(aCustomer().with(anAddress().withNoPostcode())).build();
</pre>
        <p>This relies on Java's method overloading and so only works
for properties that have unique, user-defined types. Longer method
names are necessary for primitive types, or if the built object has
different relationships with the same type of object. For example,
most of the fields of an Address are Strings, and so the builder
methods must be explicitly named after the field. However, the post
code is strongly typed and so can be passed to an overloaded
method:</p>
        <pre class="Java Source hljs" xml:space="preserve">Address aLongerAddress = anAddress()
    .withStreet(<span class="hljs-string">"222b Baker Street"</span>)
    .withCity(<span class="hljs-string">"London"</span>)
    .with(postCode(<span class="hljs-string">"NW1"</span>, <span class="hljs-string">"3RX"</span>))
    .build();
</pre>
      </div>
      <br><hr>
      <div id="article">
        <h1>Tricks with Test Data Builders:
Refactoring Away Duplicated Logic Creates a Domain Specific
Embedded Language for Testing</h1>
        <div class="ImgPanel">
    </div>
        <p><a href="000714.html" shape="rect">Test Data
Builders</a> remove a lot of duplication from test code, but there
can often still be duplicated logic at the point at which the built
objects are used. Many different tests will have very similar code
that creates an object using a builder and then passes it to the
code under test. We can address this duplication by factoring out
test scaffolding that works with builders, not system objects.
Doing so produces a higher level testing API that more clearly
communicates the intent of the test and hides away unimportant
details of how the system is being tested.</p>
        <p>For example, consider a system to process orders. Orders are
sent into our system and processed asynchronously. To perform an
end-to-end system test, the test must must create an order, send
the order to our system and track the processing of the order by
waiting for correlated events to appear on the system's
monitoring topic and driving the client through its user interface.
That would look something like the following (where the
<code>requestSender</code> and <code>progressMonitor</code> do lots
of behind the scenes magic with JMS connections, sessions, message
producers and consumers, message properties and correlation
IDs).</p>
        <pre class="Java Source hljs" xml:space="preserve"><span class="hljs-meta">@Test</span> <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">reportsTotalSalesOfOrderedProducts</span><span class="hljs-params">()</span> </span>{
    Order order1 = anOrder()
        .withLine(<span class="hljs-string">"Deerstalker Hat"</span>, <span class="hljs-number">1</span>)
        .withLine(<span class="hljs-string">"Tweed Cape"</span>, <span class="hljs-number">1</span>)
        .withCustomersReference(<span class="hljs-number">1234</span>)
        .build();

    requestSender.send(order1);
    progressMonitor.waitForConfirmation(order1);
    progressMonitor.waitForCompletion(order1);

    Order order2 = anOrder()
        .withLine(<span class="hljs-string">"Deerstalker Hat"</span>, <span class="hljs-number">1</span>)
        .withCustomersReference(<span class="hljs-number">5678</span>)
        .build();

    requestSender.send(order2);
    progressMonitor.waitForConfirmation(order2);
    progressMonitor.waitForCompletion(order2);

    TotalSalesReport report = gui.openSalesReport();
    report.displaysTotalSalesFor(<span class="hljs-string">"Deerstalker Hat"</span>, equalTo(<span class="hljs-number">2</span>));
    report.displaysTotalSalesFor(<span class="hljs-string">"Tweed Cape"</span>, equalTo(<span class="hljs-number">1</span>));
}
</pre>
        <p>It is tempting pull this duplication into a "helper"
method that builds and uses an object. For example:</p>
        <pre class="Java Source hljs" xml:space="preserve"><span class="hljs-meta">@Test</span> <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">reportsTotalSalesOfOrderedProducts</span><span class="hljs-params">()</span> </span>{
    submitOrderFor(<span class="hljs-string">"Deerstalker Hat"</span>, <span class="hljs-string">"Tweed Cape"</span>);
    submitOrderFor(<span class="hljs-string">"Deerstalker Hat"</span>);

    TotalSalesReport report = gui.openSalesReport();
    report.displaysTotalSalesFor(<span class="hljs-string">"Deerstalker Hat"</span>, equalTo(<span class="hljs-number">2</span>));
    report.displaysTotalSalesFor(<span class="hljs-string">"Tweed Cape"</span>, equalTo(<span class="hljs-number">1</span>));
}

<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">submitOrderFor</span><span class="hljs-params">(String ... products)</span> </span>{
    OrderBuilder orderBuilder = anOrder()
        .withCustomersReference(customersReference++);

    <span class="hljs-keyword">for</span> (String product : products) {
        orderBuilder = orderBuilder.withLine(product, <span class="hljs-number">1</span>);
    }

    Order order = orderBuilder.build();
    
    requestSender.send(order);
    progressMonitor.waitForConfirmation(order);
    progressMonitor.waitForCompletion(order);
}

<span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> customersReference = <span class="hljs-number">1</span>;
</pre>
        <p>However, this refactoring leaves us with the same difficulties
that we encountered with the Object Mother when we have to vary
data in different tests. We will need to submit orders with
different properties and submit different kinds of events - orders,
order amendments, order cancellations, etc. The helper method has
the very same problems we found with the Object Mother, and that we
avoided by using builders to create our test data.</p>
        <pre class="Java Source hljs" xml:space="preserve"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">submitOrderFor</span><span class="hljs-params">(String ... products)</span> </span>{ ... }
<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">submitOrderFor</span><span class="hljs-params">(String product, <span class="hljs-keyword">int</span> count)</span> </span>{ ... }
<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">submitOrderFor</span><span class="hljs-params">(String product, <span class="hljs-keyword">int</span> count, String otherProduct, <span class="hljs-keyword">int</span> otherCount)</span> </span>{ ... }
<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">submitOrderFor</span><span class="hljs-params">(String product, <span class="hljs-keyword">double</span> discount)</span> </span>{ ... }
<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">submitOrderFor</span><span class="hljs-params">(String product, String giftVoucherCode)</span> </span>{ ... }
... etc ...
</pre>
        <p>Instead, we can pass an order builder to the method that sends
an order into the system, just as we do when combining builders.
That method can add properties through the builder before building
the order sending it into the system.</p>
        <pre class="Java Source hljs" xml:space="preserve"><span class="hljs-meta">@Test</span> <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">reportsTotalSalesOfOrderedProducts</span><span class="hljs-params">()</span> </span>{
    sendAndProcess(anOrder()
        .withLine(<span class="hljs-string">"Deerstalker Hat"</span>, <span class="hljs-number">1</span>)
        .withLine(<span class="hljs-string">"Tweed Cape"</span>, <span class="hljs-number">1</span>));
    sendAndProcess(anOrder()
        .withLine(<span class="hljs-string">"Deerstalker Hat"</span>, <span class="hljs-number">1</span>));
    
    TotalSalesReport report = gui.openSalesReport();
    report.displaysTotalSalesFor(<span class="hljs-string">"Deerstalker Hat"</span>, equalTo(<span class="hljs-number">2</span>));
    report.displaysTotalSalesFor(<span class="hljs-string">"Tweed Cape"</span>, equalTo(<span class="hljs-number">1</span>));
}

<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">sendAndProcess</span><span class="hljs-params">(OrderBuilder orderDetails)</span> </span>{
    Order order = orderDetails
        .withDefaultCustomersReference(customersReference++)
        .build();
    
    requestSender.send(order);
    progressMonitor.waitForConfirmation(order);
    progressMonitor.waitForCompletion(order);
}

<span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> customersReference = <span class="hljs-number">1</span>;
</pre>
        <p>Finally, a bit of judicious renaming can change the language of
the test so that it communicates more about what behaviour is being
tested than how the system implements that behaviour.</p>
        <pre class="Java Source hljs" xml:space="preserve"><span class="hljs-meta">@Test</span> <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">reportsTotalSalesOfOrderedProducts</span><span class="hljs-params">()</span> </span>{
    havingReceived(anOrder()
        .withLine(<span class="hljs-string">"Deerstalker Hat"</span>, <span class="hljs-number">1</span>)
        .withLine(<span class="hljs-string">"Tweed Cape"</span>, <span class="hljs-number">1</span>));
    havingReceived(anOrder()
        .withLine(<span class="hljs-string">"Deerstalker Hat"</span>, <span class="hljs-number">1</span>));
    
    TotalSalesReport report = gui.openSalesReport();
    report.displaysTotalSalesFor(<span class="hljs-string">"Deerstalker Hat"</span>, equalTo(<span class="hljs-number">2</span>));
    report.displaysTotalSalesFor(<span class="hljs-string">"Tweed Cape"</span>, equalTo(<span class="hljs-number">1</span>));
}

<span class="hljs-meta">@Test</span> <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">takesAmendmentsIntoAccountWhenCalculatingTotalSales</span><span class="hljs-params">()</span> </span>{
    Customer theCustomer = aCustomer().build();

    havingReceived(anOrder().from(theCustomer)
        .withCustomerReference(<span class="hljs-number">10</span>)
        .withLine(<span class="hljs-string">"Deerstalker Hat"</span>, <span class="hljs-number">1</span>)
        .withLine(<span class="hljs-string">"Tweed Cape"</span>, <span class="hljs-number">1</span>));
        
    havingReceived(anOrderAmendment().from(theCustomer)
        .withCustomerReference(<span class="hljs-number">10</span>)
        .withLine(<span class="hljs-string">"Deerstalker Hat"</span>, <span class="hljs-number">2</span>));

    TotalSalesReport report = gui.openSalesReport();
    report.displaysTotalSalesFor(<span class="hljs-string">"Deerstalker Hat"</span>, equalTo(<span class="hljs-number">2</span>));
    report.displaysTotalSalesFor(<span class="hljs-string">"Tweed Cape"</span>, equalTo(<span class="hljs-number">1</span>));
}
</pre>
        <p>Test Data Builders are a foundation upon which we can define
higher-level testing APIs that better communicates the intent of
our tests in a language that is closer to that used by
non-technical project stakeholders and so greatly help
communication within the project.</p>
        <p><strong>Update</strong>: Thanks to <a href="http://www.davidpeterson.co.uk/" shape="rect">David Peterson</a> and Michael
Hunger for helpful feedback. I've fixed typos in the test code
and improved the test names. Hopefully the code is easier to follow
now.</p>
      </div>
</body>
</html>