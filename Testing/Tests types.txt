https://martinfowler.com/bliki/TestPyramid.html

UNIT TEST makes the developer focus on the requirements before writing the code

IT IS NOT ENOUGH TO HAVE ONLY UNIT TESTS

Unit Testing refers to tests that verify the functionality of a specific section of code. These tests cannot verify errors in integration or in deployments as these are out of their scope. That's why we different types of tests.

Component tests. Component testing is also known as a module or program testing. It finds the defects in the module and verifies the functioning of software.

Integration tests. Integration testing is the phase in software testing in which individual software modules are combined and they are tested as a group. So it as tight integration of those systems and now it only those systems.

The next step is system tests or end-to-end testing. End-to-end testing tests a completely integrated system to verify that it meets its requirements.

The last step is acceptance testing. Acceptance testing is used to conduct operation readiness of a product, service or system as a part of a quality management system.

************

UNIT TESTING – WHAT IS IT?
1) low-level, focusing on a small part of the software system.
2) Typically written and run by software developers
3) Goal is to validate that each unit of the software performs as designed 
4) expected to be significantly faster than other kinds of tests.

UNIT TESTS ARE FAST - SECONDS 
1) Don’t need external infrastructure -- no DB, no integrations with other system
2) Small scope -- No need to run a complete suite
3) Run during development -- can be run very frequently when programming

UNIT TESTING – WHY? 
1) Immediate feedback about code changes
2) Safer to refactor legacy code 
3) Test complex scenarios quickly 
4) Insure code readability 
5) know exactly what is broken
6) Writing clearer code

LOWER MAINTENANCE COST
1) Points out bugs much earlier than they could cause bigger issues
2) Decrease bugs amount 
3) Decrease cost of fix
4) Saves effort when one needs to identify the root cause of broken code
5) Documents use cases at low level

FAST PRINCIPLE
1) Fast -- run quickly
2) Independent -- should not depend on each other. Каждый тест должен быть самодостаточным. Иначе failed первый тест  causes a cascade of downstream failures, making diagnosis difficult and hiding downstream defects.
3) Repeatable --  Tests should be repeatable in any environment.
4) Self-validating -- tests should have a Boolean output: pass or fail.
5) Thorough and Timely (Тщательно и своевременно) -- Users should cover each use case scenario

 TEST IS NOT A UNIT TEST IF
1. It talks to the database
2. It communicates across the network
3. It touches the file system
4. It can’t run correctly at the same time as any of your other unit tests
5. You have to do special things to your environment (such as editing config files) to run your unit tests

TEST CONSISTS OF 3 PARTS:
1. Setup
2. Exercise - we run our method and we pass parameters to the metod
3. Verify - compare expected result to an actual result.
if those steps were not done correctly, unit test can have test bugs as well.

CODE COVERAGE:
Описывает the degree to which the source code of a program is tested by a particular test suite. 
COVERAGE GOAL:
1) Code coverage is not a primary goal for unit testing. It doesn’t guarantee quality
2) Continuous integration can help to avoid declines in code coverage

CODE COVERAGE – PROS & CONS
CODE COVERAGE CAN PROVIDE MORE THAN YOU EXPECT
• Can identify dead/unused functionality
• Is a great help when you need to decide what to be covered in a legacy project
BUT IT CAN BE EASILY MISLEADING
• It is very easy to write test that covers 100% of code but won’t bring much value

TESTING TYPES OF FUNCTIONAL TESTING: 
• Installation testing 
• Compatibility testing 
• Smoke Critical Extended 
• Regression testing 
• Acceptance testing

NON-FUNCTIONAL TESTING -- means that we are not testing if our function is working properly or not. We are looking on can it be working for a long time, for example, or under stress conditions. The most known non-functional testing methodologies and types usually are security testing and performance testing.

--- Ignorance of NFRs results in: МОГУТ БЫТЬ СЛЕД. ПРОБЛЕМЫ:
- product unavailability
- loss and compromise of important and sensitive data
- unauthorized access and control
- poor responsiveness of application to end users
...severe consequences as user dissatisfaction, abandonment, profit loss, company reputational problems and in some cases legal prosecution.

Testing types of non-functional testing: 
1) Baseline testing, Compliance testing 
2) Documentation testing 
3) Endurance testing 
4) Load testing 
5) Localization testing and Internationalization testing 
6) Performance testing 
7) Recovery testing 
8) Resilience testing 
9) Security testing 
10) Scalability testing 
11) Stress testing 
12) Usability testing 
13) Volume testing

AUTOMATION
Pros: 
1) Cost effective in long term 
2) Repeatable 
3) Quick execution -quick feedback 
4) Leaves time for more creative testing activities 
5) Parallel execution
Cons: 
1) Relies heavily on tools 
2) Tools have a cost even if they are open source 
3) Tools have limitations 
4) Automation is not suited for every testing type 
5) Effective implementation requires expertise
Excellent for: 
Regression testing 
Load testing 
Repeated execution


MANUAL
Pros: 
Lower short term cost 
Each execution is slightly different - has certain randomness 
Easily adaptable to environment changes 
Is flexible - allows for human observation 
Can be supported by tools 
Can detect slight changes that tools cannot

Cons: 
Certain tasks are hard to perform manually 
Can be repetitive and boring 
Less accurate then automated tests 
Time consuming
Excellent for: 
Regression testing 
Load testing 
Repeated execution


Frontend 
Is visible, more tangible 
Requires human perception to detect subtle errors 
Auto tests can be more fragile 
Compatibility testing with different Browsers, OS, Devices and Connection Speeds
Tests: Functional, GUI, Usability, Accessibility, etc.


Backend 
Communication and data is less visible 
Auto test are more stable 
May require customized tools 
Component interdependency
Test: Functional, Integration, Performance Testing, API, etc.

Mobile testing is basically divided into 3 parts. 
--1--Testing of native applications. 
Application build, for exact one exact application platform. 
--2--Hybrid testing, when we have both web elements and native elements. And therefore we can use the most out of both software and hardware platform. 
--3--And HTML5 or usual web application that are built completely separately from the market. So, they are not using any kind of internal application architecture, they are not using internal resources in straightforward way. They use general resources. Therefore, they can be run on any types of devices. 

So, testing mobile application usually means not only testing application. It also means testing hardware, software, network, platforms, protocols, even batteries in your telephone can impact how your application is working. 


Components of the Test Strategy document
1) Scope and Objectives
2) Business issues
3) Roles and responsibilities
4) Communication and status reporting
5) Test deliverables
6) Industry standards to follow
7) Test automation and tools
8) Testing measurements and metrices
9) Risks and mitigation
10) Defect reporting and tracking
11) Change and configuration management
12) Training plan

**************

Practical Definition Performance = 
Response Time + 
Capacity & Scalability + 
Stability

NFRs not to Forget
• Responsiveness & Velocity • Reliability & Uptime • Throughput • Resources Consumption • Scalability
!! All are important, don’t stick to 