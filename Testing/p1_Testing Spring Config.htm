<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<title>p1_Testing Spring Controllers</title>
    <link rel="stylesheet" href="../Git Guide/grey.css">
    <style type="text/css">
    	div.comment-container {
    		border: 1px solid #920000;
    	}
    </style>
</head>
<body>
<a href="https://www.petrikainulainen.net/programming/spring-framework/unit-testing-of-spring-mvc-controllers-configuration/">P1 _ Unit Testing of Spring MVC Controllers: Configuration</a>

<div class="post_content" itemprop="articleBody"><p class="cye-lm-tag">Writing unit tests for Spring MVC controllers has traditionally been both simple and problematic.</p><p class="cye-lm-tag">Although it is pretty simple to write unit tests which invoke controller methods, the problem is that those unit tests are not comprehensive enough.</p><p class="cye-lm-tag">For example, we cannot test controller mappings, validation and exception handling just by invoking the tested controller method.</p><p class="cye-lm-tag"><a href="http://static.springsource.org/spring/docs/3.2.x/spring-framework-reference/htmlsingle/#new-in-3.2-spring-mvc-test" target="_blank">Spring MVC Test</a> solved this problem by giving us the possibility to invoke controller methods through the <em>DispatcherServlet</em>.</p><p class="cye-lm-tag">This is the first part of my tutorial which describes the unit testing of Spring MVC controllers and it describes how we can configure our unit tests.</p><p class="cye-lm-tag">Let’s get started.</p><p class="cye-lm-tag"></p><div class="note course-banner"><strong>I released the starter package of my "Test With Spring" course:</strong><p class="cye-lm-tag"></p><p class="cye-lm-tag"><strong><a href="https://www.testwithspring.com/?utm_source=petri-kainulainen&amp;utm_medium=web&amp;utm_content=spring-mvc-unit-start&amp;utm_campaign=test-with-spring-course-presales" target="_blank">CHECK IT OUT &gt;&gt;</a></strong></p></div><h2>Getting the Required Dependencies with Maven</h2><p class="cye-lm-tag">We can get the required dependencies by declaring the following testing dependencies in our <em>pom.xml</em> file:</p><ul><li>JUnit 4.11</li><li>Mockito Core 1.9.5</li><li>Spring Test 3.2.3.RELEASE</li></ul><p class="cye-lm-tag">The relevant part of our <em>pom.xml</em> file looks as follows:</p><div><div id="highlighter_752245" class="syntaxhighlighter  xml"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="xml plain">&lt;</code><code class="xml keyword">dependency</code><code class="xml plain">&gt;</code></div><div class="line number2 index1 alt1"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">groupId</code><code class="xml plain">&gt;junit&lt;/</code><code class="xml keyword">groupId</code><code class="xml plain">&gt;</code></div><div class="line number3 index2 alt2"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">artifactId</code><code class="xml plain">&gt;junit&lt;/</code><code class="xml keyword">artifactId</code><code class="xml plain">&gt;</code></div><div class="line number4 index3 alt1"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">version</code><code class="xml plain">&gt;4.11&lt;/</code><code class="xml keyword">version</code><code class="xml plain">&gt;</code></div><div class="line number5 index4 alt2"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">scope</code><code class="xml plain">&gt;test&lt;/</code><code class="xml keyword">scope</code><code class="xml plain">&gt;</code></div><div class="line number6 index5 alt1"><code class="xml plain">&lt;/</code><code class="xml keyword">dependency</code><code class="xml plain">&gt;</code></div><div class="line number7 index6 alt2"><code class="xml plain">&lt;</code><code class="xml keyword">dependency</code><code class="xml plain">&gt;</code></div><div class="line number8 index7 alt1"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">groupId</code><code class="xml plain">&gt;org.mockito&lt;/</code><code class="xml keyword">groupId</code><code class="xml plain">&gt;</code></div><div class="line number9 index8 alt2"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">artifactId</code><code class="xml plain">&gt;mockito-core&lt;/</code><code class="xml keyword">artifactId</code><code class="xml plain">&gt;</code></div><div class="line number10 index9 alt1"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">version</code><code class="xml plain">&gt;1.9.5&lt;/</code><code class="xml keyword">version</code><code class="xml plain">&gt;</code></div><div class="line number11 index10 alt2"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">scope</code><code class="xml plain">&gt;test&lt;/</code><code class="xml keyword">scope</code><code class="xml plain">&gt;</code></div><div class="line number12 index11 alt1"><code class="xml plain">&lt;/</code><code class="xml keyword">dependency</code><code class="xml plain">&gt;</code></div><div class="line number13 index12 alt2"><code class="xml plain">&lt;</code><code class="xml keyword">dependency</code><code class="xml plain">&gt;</code></div><div class="line number14 index13 alt1"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">groupId</code><code class="xml plain">&gt;org.springframework&lt;/</code><code class="xml keyword">groupId</code><code class="xml plain">&gt;</code></div><div class="line number15 index14 alt2"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">artifactId</code><code class="xml plain">&gt;spring-test&lt;/</code><code class="xml keyword">artifactId</code><code class="xml plain">&gt;</code></div><div class="line number16 index15 alt1"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">version</code><code class="xml plain">&gt;3.2.3.RELEASE&lt;/</code><code class="xml keyword">version</code><code class="xml plain">&gt;</code></div><div class="line number17 index16 alt2"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">scope</code><code class="xml plain">&gt;test&lt;/</code><code class="xml keyword">scope</code><code class="xml plain">&gt;</code></div><div class="line number18 index17 alt1"><code class="xml plain">&lt;/</code><code class="xml keyword">dependency</code><code class="xml plain">&gt;</code></div></div></td></tr></tbody></table></div></div><p class="cye-lm-tag"><strong>Note:</strong> If you have to use Spring Framework 3.1, you can write unit tests for your controllers by using <a href="https://github.com/spring-projects/spring-test-mvc" target="_blank" class="broken_link">spring-test-mvc</a>. This project was included in the spring-test module when Spring Framework 3.2 was released.</p><p class="cye-lm-tag">Let’s move on and take a quick look at our example application.</p><h2>The Anatomy of Our Example Application</h2><p class="cye-lm-tag">The example application of this tutorial provides CRUD operations for todo entries. In order to understand the configuration of our test class, we must have some knowledge about the tested controller class.</p><p class="cye-lm-tag">At this point, we need to know the answers to these questions:</p><ul><li>What dependencies does it have?</li><li>How is it instantiated?</li></ul><p class="cye-lm-tag">We can get the answers to those questions by taking a look at the source code of the <em>TodoController</em> class. The relevant part of the <em>TodoController</em> class looks as follows:</p><div><div id="highlighter_850357" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.beans.factory.annotation.Autowired;</code></div><div class="line number2 index1 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.context.MessageSource;</code></div><div class="line number3 index2 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.stereotype.Controller;</code></div><div class="line number4 index3 alt1">&nbsp;</div><div class="line number5 index4 alt2"><code class="java color1">@Controller</code></div><div class="line number6 index5 alt1"><code class="java keyword">public</code> <code class="java keyword">class</code> <code class="java plain">TodoController {</code></div><div class="line number7 index6 alt2">&nbsp;</div><div class="line number8 index7 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java keyword">final</code> <code class="java plain">TodoService service;</code></div><div class="line number9 index8 alt2">&nbsp;</div><div class="line number10 index9 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java keyword">final</code> <code class="java plain">MessageSource messageSource;</code></div><div class="line number11 index10 alt2">&nbsp;</div><div class="line number12 index11 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Autowired</code></div><div class="line number13 index12 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java plain">TodoController(MessageSource messageSource, TodoService service) {</code></div><div class="line number14 index13 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">this</code><code class="java plain">.messageSource = messageSource;</code></div><div class="line number15 index14 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">this</code><code class="java plain">.service = service;</code></div><div class="line number16 index15 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number17 index16 alt2">&nbsp;</div><div class="line number18 index17 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java comments">//Other methods are omitted.</code></div><div class="line number19 index18 alt2"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><p class="cye-lm-tag">As we can see, our controller class has two dependencies: <em>TodoService</em> and <em>MessageSource</em>. Also, we can see that our controller class uses constructor injection.</p><p class="cye-lm-tag">At this point this is all there information we need. Next we will talk about our application context configuration.</p><h2 id="appcontext-config">Configuring the Application Context</h2><p class="cye-lm-tag">Maintaining a separate application context configurations for our application and our tests is cumbersome. Also, It can lead into problems if we change something in the application context configuration of our application but forget to do the same change for our test context.</p><p class="cye-lm-tag">That is why the application context configuration of the example application has been divided in a such way that we can reuse parts of it in our tests.</p><p class="cye-lm-tag">Our application context configuration has been divided as follows:</p><ul><li>The first application configuration class is called <em>ExampleApplicationContext</em> and it is the “main” configuration class of our application.</li><li>The second configuration class is responsible of configuring the web layer of our application. The name of this class is <em>WebAppContext</em> and it is the configuration class which we will use in our tests.</li><li>The third configuration class is called <em>PersistenceContext</em> and it contains the persistence configuration of our application.</li></ul><p class="cye-lm-tag"><strong>Note:</strong> The example application has also a working application context configuration which uses XML configuration files. The XML configuration files which correspond with the Java configuration classes are: <em>exampleApplicationContext.xml</em>, exampleApplicationContext-web.xml and <em>exampleApplicationContext-persistence.xml</em>.</p><p class="cye-lm-tag">Let’s take a look at the application context configuration of our web layer and find out how we can configure our test context.</p><h3>Configuring the Web Layer</h3><p class="cye-lm-tag">The application context configuration of the web layer has the following responsibilities:</p><ol><li>It enables the annotation driven Spring MVC.</li><li>It configures the location of static resources such as CSS files and Javascript files.</li><li>It ensures that the static resources are served by the container’s default servlet.</li><li>It ensures that the controller classes are found during component scan.</li><li>It configures the <em>ExceptionResolver</em> bean.</li><li>It configures the <em>ViewResolver</em> bean.</li></ol><p class="cye-lm-tag">Let’s move on and take a look at the Java configuration class and the XML configuration file.</p><h4>Java Configuration</h4><p class="cye-lm-tag">If we use Java configuration, the source code of the <em>WebAppContext</em> class looks as follows:</p><div><div id="highlighter_939802" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div class="line number23 index22 alt2">23</div><div class="line number24 index23 alt1">24</div><div class="line number25 index24 alt2">25</div><div class="line number26 index25 alt1">26</div><div class="line number27 index26 alt2">27</div><div class="line number28 index27 alt1">28</div><div class="line number29 index28 alt2">29</div><div class="line number30 index29 alt1">30</div><div class="line number31 index30 alt2">31</div><div class="line number32 index31 alt1">32</div><div class="line number33 index32 alt2">33</div><div class="line number34 index33 alt1">34</div><div class="line number35 index34 alt2">35</div><div class="line number36 index35 alt1">36</div><div class="line number37 index36 alt2">37</div><div class="line number38 index37 alt1">38</div><div class="line number39 index38 alt2">39</div><div class="line number40 index39 alt1">40</div><div class="line number41 index40 alt2">41</div><div class="line number42 index41 alt1">42</div><div class="line number43 index42 alt2">43</div><div class="line number44 index43 alt1">44</div><div class="line number45 index44 alt2">45</div><div class="line number46 index45 alt1">46</div><div class="line number47 index46 alt2">47</div><div class="line number48 index47 alt1">48</div><div class="line number49 index48 alt2">49</div><div class="line number50 index49 alt1">50</div><div class="line number51 index50 alt2">51</div><div class="line number52 index51 alt1">52</div><div class="line number53 index52 alt2">53</div><div class="line number54 index53 alt1">54</div><div class="line number55 index54 alt2">55</div><div class="line number56 index55 alt1">56</div><div class="line number57 index56 alt2">57</div><div class="line number58 index57 alt1">58</div><div class="line number59 index58 alt2">59</div><div class="line number60 index59 alt1">60</div><div class="line number61 index60 alt2">61</div><div class="line number62 index61 alt1">62</div><div class="line number63 index62 alt2">63</div><div class="line number64 index63 alt1">64</div><div class="line number65 index64 alt2">65</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.context.annotation.Bean;</code></div><div class="line number2 index1 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.context.annotation.ComponentScan;</code></div><div class="line number3 index2 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.context.annotation.Configuration;</code></div><div class="line number4 index3 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.web.servlet.ViewResolver;</code></div><div class="line number5 index4 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.web.servlet.config.annotation.DefaultServletHandlerConfigurer;</code></div><div class="line number6 index5 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.web.servlet.config.annotation.EnableWebMvc;</code></div><div class="line number7 index6 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;</code></div><div class="line number8 index7 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;</code></div><div class="line number9 index8 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.web.servlet.handler.SimpleMappingExceptionResolver;</code></div><div class="line number10 index9 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.web.servlet.view.InternalResourceViewResolver;</code></div><div class="line number11 index10 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.web.servlet.view.JstlView;</code></div><div class="line number12 index11 alt1">&nbsp;</div><div class="line number13 index12 alt2"><code class="java keyword">import</code> <code class="java plain">java.util.Properties;</code></div><div class="line number14 index13 alt1">&nbsp;</div><div class="line number15 index14 alt2"><code class="java color1">@Configuration</code></div><div class="line number16 index15 alt1"><code class="java color1">@EnableWebMvc</code></div><div class="line number17 index16 alt2"><code class="java color1">@ComponentScan</code><code class="java plain">(basePackages = {</code></div><div class="line number18 index17 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java string">"net.petrikainulainen.spring.testmvc.common.controller"</code><code class="java plain">,</code></div><div class="line number19 index18 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java string">"net.petrikainulainen.spring.testmvc.todo.controller"</code></div><div class="line number20 index19 alt1"><code class="java plain">})</code></div><div class="line number21 index20 alt2"><code class="java keyword">public</code> <code class="java keyword">class</code> <code class="java plain">WebAppContext </code><code class="java keyword">extends</code> <code class="java plain">WebMvcConfigurerAdapter {</code></div><div class="line number22 index21 alt1">&nbsp;</div><div class="line number23 index22 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Override</code></div><div class="line number24 index23 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java keyword">void</code> <code class="java plain">addResourceHandlers(ResourceHandlerRegistry registry) {</code></div><div class="line number25 index24 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">registry.addResourceHandler(</code><code class="java string">"/static/**"</code><code class="java plain">).addResourceLocations(</code><code class="java string">"/static/"</code><code class="java plain">);</code></div><div class="line number26 index25 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number27 index26 alt2">&nbsp;</div><div class="line number28 index27 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Override</code></div><div class="line number29 index28 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java keyword">void</code> <code class="java plain">configureDefaultServletHandling(DefaultServletHandlerConfigurer configurer) {</code></div><div class="line number30 index29 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">configurer.enable();</code></div><div class="line number31 index30 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number32 index31 alt1">&nbsp;</div><div class="line number33 index32 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Bean</code></div><div class="line number34 index33 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java plain">SimpleMappingExceptionResolver exceptionResolver() {</code></div><div class="line number35 index34 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">SimpleMappingExceptionResolver exceptionResolver = </code><code class="java keyword">new</code> <code class="java plain">SimpleMappingExceptionResolver();</code></div><div class="line number36 index35 alt1">&nbsp;</div><div class="line number37 index36 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">Properties exceptionMappings = </code><code class="java keyword">new</code> <code class="java plain">Properties();</code></div><div class="line number38 index37 alt1">&nbsp;</div><div class="line number39 index38 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">exceptionMappings.put(</code><code class="java string">"net.petrikainulainen.spring.testmvc.todo.exception.TodoNotFoundException"</code><code class="java plain">, </code><code class="java string">"error/404"</code><code class="java plain">);</code></div><div class="line number40 index39 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">exceptionMappings.put(</code><code class="java string">"java.lang.Exception"</code><code class="java plain">, </code><code class="java string">"error/error"</code><code class="java plain">);</code></div><div class="line number41 index40 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">exceptionMappings.put(</code><code class="java string">"java.lang.RuntimeException"</code><code class="java plain">, </code><code class="java string">"error/error"</code><code class="java plain">);</code></div><div class="line number42 index41 alt1">&nbsp;</div><div class="line number43 index42 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">exceptionResolver.setExceptionMappings(exceptionMappings);</code></div><div class="line number44 index43 alt1">&nbsp;</div><div class="line number45 index44 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">Properties statusCodes = </code><code class="java keyword">new</code> <code class="java plain">Properties();</code></div><div class="line number46 index45 alt1">&nbsp;</div><div class="line number47 index46 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">statusCodes.put(</code><code class="java string">"error/404"</code><code class="java plain">, </code><code class="java string">"404"</code><code class="java plain">);</code></div><div class="line number48 index47 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">statusCodes.put(</code><code class="java string">"error/error"</code><code class="java plain">, </code><code class="java string">"500"</code><code class="java plain">);</code></div><div class="line number49 index48 alt2">&nbsp;</div><div class="line number50 index49 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">exceptionResolver.setStatusCodes(statusCodes);</code></div><div class="line number51 index50 alt2">&nbsp;</div><div class="line number52 index51 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">return</code> <code class="java plain">exceptionResolver;</code></div><div class="line number53 index52 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number54 index53 alt1">&nbsp;</div><div class="line number55 index54 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Bean</code></div><div class="line number56 index55 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java plain">ViewResolver viewResolver() {</code></div><div class="line number57 index56 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">InternalResourceViewResolver viewResolver = </code><code class="java keyword">new</code> <code class="java plain">InternalResourceViewResolver();</code></div><div class="line number58 index57 alt1">&nbsp;</div><div class="line number59 index58 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">viewResolver.setViewClass(JstlView.</code><code class="java keyword">class</code><code class="java plain">);</code></div><div class="line number60 index59 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">viewResolver.setPrefix(</code><code class="java string">"/WEB-INF/jsp/"</code><code class="java plain">);</code></div><div class="line number61 index60 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">viewResolver.setSuffix(</code><code class="java string">".jsp"</code><code class="java plain">);</code></div><div class="line number62 index61 alt1">&nbsp;</div><div class="line number63 index62 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">return</code> <code class="java plain">viewResolver;</code></div><div class="line number64 index63 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number65 index64 alt2"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><h4>XML Configuration</h4><p class="cye-lm-tag">If we use XML configuration, the content of the <em>exampleApplicationContext-web.xml</em> file looks as follows:</p><div><div id="highlighter_95128" class="syntaxhighlighter  xml"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div class="line number23 index22 alt2">23</div><div class="line number24 index23 alt1">24</div><div class="line number25 index24 alt2">25</div><div class="line number26 index25 alt1">26</div><div class="line number27 index26 alt2">27</div><div class="line number28 index27 alt1">28</div><div class="line number29 index28 alt2">29</div><div class="line number30 index29 alt1">30</div><div class="line number31 index30 alt2">31</div><div class="line number32 index31 alt1">32</div><div class="line number33 index32 alt2">33</div><div class="line number34 index33 alt1">34</div><div class="line number35 index34 alt2">35</div><div class="line number36 index35 alt1">36</div><div class="line number37 index36 alt2">37</div><div class="line number38 index37 alt1">38</div><div class="line number39 index38 alt2">39</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="xml plain">&lt;?</code><code class="xml keyword">xml</code> <code class="xml color1">version</code><code class="xml plain">=</code><code class="xml string">"1.0"</code> <code class="xml color1">encoding</code><code class="xml plain">=</code><code class="xml string">"UTF-8"</code><code class="xml plain">?&gt;</code></div><div class="line number2 index1 alt1"><code class="xml plain">&lt;</code><code class="xml keyword">beans</code> <code class="xml color1">xmlns</code><code class="xml plain">=</code><code class="xml string">"http://www.springframework.org/schema/beans"</code></div><div class="line number3 index2 alt2"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml color1">xmlns:xsi</code><code class="xml plain">=</code><code class="xml string">"http://www.w3.org/2001/XMLSchema-instance"</code></div><div class="line number4 index3 alt1"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml color1">xmlns:mvc</code><code class="xml plain">=</code><code class="xml string">"http://www.springframework.org/schema/mvc"</code></div><div class="line number5 index4 alt2"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml color1">xmlns:context</code><code class="xml plain">=</code><code class="xml string">"http://www.springframework.org/schema/context"</code></div><div class="line number6 index5 alt1"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</code></div><div class="line number7 index6 alt2"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd</code></div><div class="line number8 index7 alt1"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd"&gt;</code></div><div class="line number9 index8 alt2">&nbsp;</div><div class="line number10 index9 alt1"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">mvc:annotation-driven</code><code class="xml plain">/&gt;</code></div><div class="line number11 index10 alt2">&nbsp;</div><div class="line number12 index11 alt1"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">mvc:resources</code> <code class="xml color1">mapping</code><code class="xml plain">=</code><code class="xml string">"/static/**"</code> <code class="xml color1">location</code><code class="xml plain">=</code><code class="xml string">"/static/"</code><code class="xml plain">/&gt;</code></div><div class="line number13 index12 alt2"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">mvc:default-servlet-handler</code><code class="xml plain">/&gt;</code></div><div class="line number14 index13 alt1">&nbsp;</div><div class="line number15 index14 alt2"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">context:component-scan</code> <code class="xml color1">base-package</code><code class="xml plain">=</code><code class="xml string">"net.petrikainulainen.spring.testmvc.common.controller"</code><code class="xml plain">/&gt;</code></div><div class="line number16 index15 alt1"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">context:component-scan</code> <code class="xml color1">base-package</code><code class="xml plain">=</code><code class="xml string">"net.petrikainulainen.spring.testmvc.todo.controller"</code><code class="xml plain">/&gt;</code></div><div class="line number17 index16 alt2">&nbsp;</div><div class="line number18 index17 alt1"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">bean</code> <code class="xml color1">id</code><code class="xml plain">=</code><code class="xml string">"exceptionResolver"</code> <code class="xml color1">class</code><code class="xml plain">=</code><code class="xml string">"org.springframework.web.servlet.handler.SimpleMappingExceptionResolver"</code><code class="xml plain">&gt;</code></div><div class="line number19 index18 alt2"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">property</code> <code class="xml color1">name</code><code class="xml plain">=</code><code class="xml string">"exceptionMappings"</code><code class="xml plain">&gt;</code></div><div class="line number20 index19 alt1"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">props</code><code class="xml plain">&gt;</code></div><div class="line number21 index20 alt2"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">prop</code> <code class="xml color1">key</code><code class="xml plain">=</code><code class="xml string">"net.petrikainulainen.spring.testmvc.todo.exception.TodoNotFoundException"</code><code class="xml plain">&gt;error/404&lt;/</code><code class="xml keyword">prop</code><code class="xml plain">&gt;</code></div><div class="line number22 index21 alt1"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">prop</code> <code class="xml color1">key</code><code class="xml plain">=</code><code class="xml string">"java.lang.Exception"</code><code class="xml plain">&gt;error/error&lt;/</code><code class="xml keyword">prop</code><code class="xml plain">&gt;</code></div><div class="line number23 index22 alt2"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">prop</code> <code class="xml color1">key</code><code class="xml plain">=</code><code class="xml string">"java.lang.RuntimeException"</code><code class="xml plain">&gt;error/error&lt;/</code><code class="xml keyword">prop</code><code class="xml plain">&gt;</code></div><div class="line number24 index23 alt1"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;/</code><code class="xml keyword">props</code><code class="xml plain">&gt;</code></div><div class="line number25 index24 alt2"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;/</code><code class="xml keyword">property</code><code class="xml plain">&gt;</code></div><div class="line number26 index25 alt1"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">property</code> <code class="xml color1">name</code><code class="xml plain">=</code><code class="xml string">"statusCodes"</code><code class="xml plain">&gt;</code></div><div class="line number27 index26 alt2"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">props</code><code class="xml plain">&gt;</code></div><div class="line number28 index27 alt1"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">prop</code> <code class="xml color1">key</code><code class="xml plain">=</code><code class="xml string">"error/404"</code><code class="xml plain">&gt;404&lt;/</code><code class="xml keyword">prop</code><code class="xml plain">&gt;</code></div><div class="line number29 index28 alt2"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">prop</code> <code class="xml color1">key</code><code class="xml plain">=</code><code class="xml string">"error/error"</code><code class="xml plain">&gt;500&lt;/</code><code class="xml keyword">prop</code><code class="xml plain">&gt;</code></div><div class="line number30 index29 alt1"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;/</code><code class="xml keyword">props</code><code class="xml plain">&gt;</code></div><div class="line number31 index30 alt2"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;/</code><code class="xml keyword">property</code><code class="xml plain">&gt;</code></div><div class="line number32 index31 alt1"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;/</code><code class="xml keyword">bean</code><code class="xml plain">&gt;</code></div><div class="line number33 index32 alt2">&nbsp;</div><div class="line number34 index33 alt1"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">bean</code> <code class="xml color1">id</code><code class="xml plain">=</code><code class="xml string">"viewResolver"</code> <code class="xml color1">class</code><code class="xml plain">=</code><code class="xml string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</code><code class="xml plain">&gt;</code></div><div class="line number35 index34 alt2"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">property</code> <code class="xml color1">name</code><code class="xml plain">=</code><code class="xml string">"prefix"</code> <code class="xml color1">value</code><code class="xml plain">=</code><code class="xml string">"/WEB-INF/jsp/"</code><code class="xml plain">/&gt;</code></div><div class="line number36 index35 alt1"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">property</code> <code class="xml color1">name</code><code class="xml plain">=</code><code class="xml string">"suffix"</code> <code class="xml color1">value</code><code class="xml plain">=</code><code class="xml string">".jsp"</code><code class="xml plain">/&gt;</code></div><div class="line number37 index36 alt2"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">property</code> <code class="xml color1">name</code><code class="xml plain">=</code><code class="xml string">"viewClass"</code> <code class="xml color1">value</code><code class="xml plain">=</code><code class="xml string">"org.springframework.web.servlet.view.JstlView"</code><code class="xml plain">/&gt;</code></div><div class="line number38 index37 alt1"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;/</code><code class="xml keyword">bean</code><code class="xml plain">&gt;</code></div><div class="line number39 index38 alt2"><code class="xml plain">&lt;/</code><code class="xml keyword">beans</code><code class="xml plain">&gt;</code></div></div></td></tr></tbody></table></div></div><h3>Configuring the Test Context</h3><p class="cye-lm-tag">The configuration of our test context has two responsibilities:</p><ol><li>It configures a <em>MessageSource</em> bean which is used by our controller class (feedback messages) and Spring MVC (validation error messages). The reason why we need to do this is that the <em>MessageSource</em> bean is configured in the “main” configuration class (or file) of our application context configuration.</li><li>It creates a <em>TodoService</em> mock which is injected to our controller class.</li></ol><p class="cye-lm-tag">Let’s find out how we configure our test context by using Java configuration class and XML configuration file.</p><h4>Java Configuration</h4><p class="cye-lm-tag">If we configure our test context by using Java configuration, the source code of the <em>TestContext</em> class looks as follows:</p><div><div id="highlighter_189576" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div class="line number23 index22 alt2">23</div><div class="line number24 index23 alt1">24</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">import</code> <code class="java plain">org.mockito.Mockito;</code></div><div class="line number2 index1 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.context.MessageSource;</code></div><div class="line number3 index2 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.context.annotation.Bean;</code></div><div class="line number4 index3 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.context.annotation.Configuration;</code></div><div class="line number5 index4 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.context.support.ResourceBundleMessageSource;</code></div><div class="line number6 index5 alt1">&nbsp;</div><div class="line number7 index6 alt2"><code class="java color1">@Configuration</code></div><div class="line number8 index7 alt1"><code class="java keyword">public</code> <code class="java keyword">class</code> <code class="java plain">TestContext {</code></div><div class="line number9 index8 alt2">&nbsp;</div><div class="line number10 index9 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Bean</code></div><div class="line number11 index10 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java plain">MessageSource messageSource() {</code></div><div class="line number12 index11 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">ResourceBundleMessageSource messageSource = </code><code class="java keyword">new</code> <code class="java plain">ResourceBundleMessageSource();</code></div><div class="line number13 index12 alt2">&nbsp;</div><div class="line number14 index13 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">messageSource.setBasename(</code><code class="java string">"i18n/messages"</code><code class="java plain">);</code></div><div class="line number15 index14 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">messageSource.setUseCodeAsDefaultMessage(</code><code class="java keyword">true</code><code class="java plain">);</code></div><div class="line number16 index15 alt1">&nbsp;</div><div class="line number17 index16 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">return</code> <code class="java plain">messageSource;</code></div><div class="line number18 index17 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number19 index18 alt2">&nbsp;</div><div class="line number20 index19 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Bean</code></div><div class="line number21 index20 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java plain">TodoService todoService() {</code></div><div class="line number22 index21 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">return</code> <code class="java plain">Mockito.mock(TodoService.</code><code class="java keyword">class</code><code class="java plain">);</code></div><div class="line number23 index22 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number24 index23 alt1"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><h4>XML Configuration</h4><p class="cye-lm-tag">If we configure our test context by using an XML configuration, the content of the <em>testContext.xml</em> file looks as follow:</p><div><div id="highlighter_22587" class="syntaxhighlighter  xml"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="xml plain">&lt;?</code><code class="xml keyword">xml</code> <code class="xml color1">version</code><code class="xml plain">=</code><code class="xml string">"1.0"</code> <code class="xml color1">encoding</code><code class="xml plain">=</code><code class="xml string">"UTF-8"</code><code class="xml plain">?&gt;</code></div><div class="line number2 index1 alt1"><code class="xml plain">&lt;</code><code class="xml keyword">beans</code> <code class="xml color1">xmlns</code><code class="xml plain">=</code><code class="xml string">"http://www.springframework.org/schema/beans"</code></div><div class="line number3 index2 alt2"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml color1">xmlns:xsi</code><code class="xml plain">=</code><code class="xml string">"http://www.w3.org/2001/XMLSchema-instance"</code></div><div class="line number4 index3 alt1"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml color1">xsi:schemaLocation</code><code class="xml plain">=</code><code class="xml string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</code><code class="xml plain">&gt;</code></div><div class="line number5 index4 alt2">&nbsp;</div><div class="line number6 index5 alt1"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">bean</code> <code class="xml color1">id</code><code class="xml plain">=</code><code class="xml string">"messageSource"</code> <code class="xml color1">class</code><code class="xml plain">=</code><code class="xml string">"org.springframework.context.support.ResourceBundleMessageSource"</code><code class="xml plain">&gt;</code></div><div class="line number7 index6 alt2"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">property</code> <code class="xml color1">name</code><code class="xml plain">=</code><code class="xml string">"basename"</code> <code class="xml color1">value</code><code class="xml plain">=</code><code class="xml string">"i18n/messages"</code><code class="xml plain">/&gt;</code></div><div class="line number8 index7 alt1"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">property</code> <code class="xml color1">name</code><code class="xml plain">=</code><code class="xml string">"useCodeAsDefaultMessage"</code> <code class="xml color1">value</code><code class="xml plain">=</code><code class="xml string">"true"</code><code class="xml plain">/&gt;</code></div><div class="line number9 index8 alt2"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;/</code><code class="xml keyword">bean</code><code class="xml plain">&gt;</code></div><div class="line number10 index9 alt1">&nbsp;</div><div class="line number11 index10 alt2"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">bean</code> <code class="xml color1">id</code><code class="xml plain">=</code><code class="xml string">"todoService"</code> <code class="xml color1">name</code><code class="xml plain">=</code><code class="xml string">"todoService"</code> <code class="xml color1">class</code><code class="xml plain">=</code><code class="xml string">"org.mockito.Mockito"</code> <code class="xml color1">factory-method</code><code class="xml plain">=</code><code class="xml string">"mock"</code><code class="xml plain">&gt;</code></div><div class="line number12 index11 alt1"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">constructor-arg</code> <code class="xml color1">value</code><code class="xml plain">=</code><code class="xml string">"net.petrikainulainen.spring.testmvc.todo.service.TodoService"</code><code class="xml plain">/&gt;</code></div><div class="line number13 index12 alt2"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;/</code><code class="xml keyword">bean</code><code class="xml plain">&gt;</code></div><div class="line number14 index13 alt1"><code class="xml plain">&lt;/</code><code class="xml keyword">beans</code><code class="xml plain">&gt;</code></div></div></td></tr></tbody></table></div></div><h2>Configuring The Test Class</h2><p class="cye-lm-tag">We can configure our test class by using one of the following options:</p><ol><li>The Standalone configuration allows us to register one or more controllers (classes annotated with the <em>@Controller</em> annotation) and configure the Spring MVC infrastructure programatically. This approach is a viable option if our Spring MVC configuration is simple and straight-forward.</li><li>The <em>WebApplicationContext</em> based configuration allows us the configure Spring MVC infrastructure by using a fully initialized <em>WebApplicationContext.</em> This approach is better if our Spring MVC configuration is so complicated that using standalone configuration does not make any sense.</li></ol><p class="cye-lm-tag">Let’s move on and find out how we can configure our test class by using both configuration options.</p><h3>Using Standalone Configuration</h3><p class="cye-lm-tag">We can configure our test class by following these steps:</p><ol><li>Annotate the class with the <em>@RunWith</em> annotation and ensure that test is executed by using the <a href="http://site.mockito.org/mockito/docs/1.10.19/org/mockito/runners/MockitoJUnitRunner.html" target="_blank" class="broken_link"><em>MockitoJUnitRunner</em></a>.</li><li>Add a <a href="http://static.springsource.org/spring/docs/3.2.x/javadoc-api/org/springframework/test/web/servlet/MockMvc.html" target="_blank"><em>MockMvc</em></a> field to the test class.</li><li>Add a <em>TodoService</em> field to the test class and annotate the field with the <a href="http://site.mockito.org/mockito/docs/1.10.19/org/mockito/Mock.html" target="_blank" class="broken_link"><em>@Mock</em></a> annotation. This annotation marks the field as a mock. The field is initialized by the <em>MockitoJUnitRunner</em>.</li><li>Add a private <em>exceptionResolver()</em> method to the class. This method creates a new <em>SimpleMappingExceptionResolver</em> object, configures it, and returns the created object.</li><li>Add a private <em>messageSource()</em> method to the class. This method creates a new <em>ResourceBundleMessageSource</em> object, configures it, and returns the created object.</li><li>Add a private <em>validator()</em> method to the class. This method creates a new <em>LocalValidatorFactoryBean</em> object and returns the created object.</li><li>Add a private <em>viewResolver()</em> method to the the class. This method creates a new <em>InternalResourceViewResolver</em> object, configures it, and returns the created object.</li><li>Add a <em>setUp()</em> method to the test class and annotate the method with the <em>@Before</em> annotation. This ensures that the method is invoked before each test. This method creates a new <em>MockMvc</em> object by calling the <em>standaloneSetup()</em> method of the <a href="http://static.springsource.org/spring/docs/3.2.x/javadoc-api/org/springframework/test/web/servlet/setup/MockMvcBuilders.html" target="_blank"><em>MockMvcBuilders</em></a> class and configures the Spring MVC infrastructure programmatically.</li></ol><p class="cye-lm-tag">The source code of our test class looks as follows:</p><div><div id="highlighter_494845" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div class="line number23 index22 alt2">23</div><div class="line number24 index23 alt1">24</div><div class="line number25 index24 alt2">25</div><div class="line number26 index25 alt1">26</div><div class="line number27 index26 alt2">27</div><div class="line number28 index27 alt1">28</div><div class="line number29 index28 alt2">29</div><div class="line number30 index29 alt1">30</div><div class="line number31 index30 alt2">31</div><div class="line number32 index31 alt1">32</div><div class="line number33 index32 alt2">33</div><div class="line number34 index33 alt1">34</div><div class="line number35 index34 alt2">35</div><div class="line number36 index35 alt1">36</div><div class="line number37 index36 alt2">37</div><div class="line number38 index37 alt1">38</div><div class="line number39 index38 alt2">39</div><div class="line number40 index39 alt1">40</div><div class="line number41 index40 alt2">41</div><div class="line number42 index41 alt1">42</div><div class="line number43 index42 alt2">43</div><div class="line number44 index43 alt1">44</div><div class="line number45 index44 alt2">45</div><div class="line number46 index45 alt1">46</div><div class="line number47 index46 alt2">47</div><div class="line number48 index47 alt1">48</div><div class="line number49 index48 alt2">49</div><div class="line number50 index49 alt1">50</div><div class="line number51 index50 alt2">51</div><div class="line number52 index51 alt1">52</div><div class="line number53 index52 alt2">53</div><div class="line number54 index53 alt1">54</div><div class="line number55 index54 alt2">55</div><div class="line number56 index55 alt1">56</div><div class="line number57 index56 alt2">57</div><div class="line number58 index57 alt1">58</div><div class="line number59 index58 alt2">59</div><div class="line number60 index59 alt1">60</div><div class="line number61 index60 alt2">61</div><div class="line number62 index61 alt1">62</div><div class="line number63 index62 alt2">63</div><div class="line number64 index63 alt1">64</div><div class="line number65 index64 alt2">65</div><div class="line number66 index65 alt1">66</div><div class="line number67 index66 alt2">67</div><div class="line number68 index67 alt1">68</div><div class="line number69 index68 alt2">69</div><div class="line number70 index69 alt1">70</div><div class="line number71 index70 alt2">71</div><div class="line number72 index71 alt1">72</div><div class="line number73 index72 alt2">73</div><div class="line number74 index73 alt1">74</div><div class="line number75 index74 alt2">75</div><div class="line number76 index75 alt1">76</div><div class="line number77 index76 alt2">77</div><div class="line number78 index77 alt1">78</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">import</code> <code class="java plain">org.junit.Before;</code></div><div class="line number2 index1 alt1"><code class="java keyword">import</code> <code class="java plain">org.junit.runner.RunWith;</code></div><div class="line number3 index2 alt2"><code class="java keyword">import</code> <code class="java plain">org.mockito.Mock;</code></div><div class="line number4 index3 alt1"><code class="java keyword">import</code> <code class="java plain">org.mockito.runners.MockitoJUnitRunner;</code></div><div class="line number5 index4 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.context.MessageSource;</code></div><div class="line number6 index5 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.context.support.ResourceBundleMessageSource;</code></div><div class="line number7 index6 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.test.web.servlet.MockMvc;</code></div><div class="line number8 index7 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.test.web.servlet.setup.MockMvcBuilders;</code></div><div class="line number9 index8 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.validation.beanvalidation.LocalValidatorFactoryBean;</code></div><div class="line number10 index9 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.web.servlet.HandlerExceptionResolver;</code></div><div class="line number11 index10 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.web.servlet.ViewResolver;</code></div><div class="line number12 index11 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.web.servlet.handler.SimpleMappingExceptionResolver;</code></div><div class="line number13 index12 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.web.servlet.view.InternalResourceViewResolver;</code></div><div class="line number14 index13 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.web.servlet.view.JstlView;</code></div><div class="line number15 index14 alt2">&nbsp;</div><div class="line number16 index15 alt1"><code class="java keyword">import</code> <code class="java plain">java.util.Properties;</code></div><div class="line number17 index16 alt2">&nbsp;</div><div class="line number18 index17 alt1"><code class="java color1">@RunWith</code><code class="java plain">(MockitoJUnitRunner.</code><code class="java keyword">class</code><code class="java plain">)</code></div><div class="line number19 index18 alt2"><code class="java keyword">public</code> <code class="java keyword">class</code> <code class="java plain">StandaloneTodoControllerTest {</code></div><div class="line number20 index19 alt1">&nbsp;</div><div class="line number21 index20 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java plain">MockMvc mockMvc;</code></div><div class="line number22 index21 alt1">&nbsp;</div><div class="line number23 index22 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Mock</code></div><div class="line number24 index23 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java plain">TodoService todoServiceMock;</code></div><div class="line number25 index24 alt2">&nbsp;</div><div class="line number26 index25 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Before</code></div><div class="line number27 index26 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java keyword">void</code> <code class="java plain">setUp() {</code></div><div class="line number28 index27 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">mockMvc = MockMvcBuilders.standaloneSetup(</code><code class="java keyword">new</code> <code class="java plain">TodoController(messageSource(), todoServiceMock))</code></div><div class="line number29 index28 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">.setHandlerExceptionResolvers(exceptionResolver())</code></div><div class="line number30 index29 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">.setValidator(validator())</code></div><div class="line number31 index30 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">.setViewResolvers(viewResolver())</code></div><div class="line number32 index31 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">.build();</code></div><div class="line number33 index32 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number34 index33 alt1">&nbsp;</div><div class="line number35 index34 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java plain">HandlerExceptionResolver exceptionResolver() {</code></div><div class="line number36 index35 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">SimpleMappingExceptionResolver exceptionResolver = </code><code class="java keyword">new</code> <code class="java plain">SimpleMappingExceptionResolver();</code></div><div class="line number37 index36 alt2">&nbsp;</div><div class="line number38 index37 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">Properties exceptionMappings = </code><code class="java keyword">new</code> <code class="java plain">Properties();</code></div><div class="line number39 index38 alt2">&nbsp;</div><div class="line number40 index39 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">exceptionMappings.put(</code><code class="java string">"net.petrikainulainen.spring.testmvc.todo.exception.TodoNotFoundException"</code><code class="java plain">, </code><code class="java string">"error/404"</code><code class="java plain">);</code></div><div class="line number41 index40 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">exceptionMappings.put(</code><code class="java string">"java.lang.Exception"</code><code class="java plain">, </code><code class="java string">"error/error"</code><code class="java plain">);</code></div><div class="line number42 index41 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">exceptionMappings.put(</code><code class="java string">"java.lang.RuntimeException"</code><code class="java plain">, </code><code class="java string">"error/error"</code><code class="java plain">);</code></div><div class="line number43 index42 alt2">&nbsp;</div><div class="line number44 index43 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">exceptionResolver.setExceptionMappings(exceptionMappings);</code></div><div class="line number45 index44 alt2">&nbsp;</div><div class="line number46 index45 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">Properties statusCodes = </code><code class="java keyword">new</code> <code class="java plain">Properties();</code></div><div class="line number47 index46 alt2">&nbsp;</div><div class="line number48 index47 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">statusCodes.put(</code><code class="java string">"error/404"</code><code class="java plain">, </code><code class="java string">"404"</code><code class="java plain">);</code></div><div class="line number49 index48 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">statusCodes.put(</code><code class="java string">"error/error"</code><code class="java plain">, </code><code class="java string">"500"</code><code class="java plain">);</code></div><div class="line number50 index49 alt1">&nbsp;</div><div class="line number51 index50 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">exceptionResolver.setStatusCodes(statusCodes);</code></div><div class="line number52 index51 alt1">&nbsp;</div><div class="line number53 index52 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">return</code> <code class="java plain">exceptionResolver;</code></div><div class="line number54 index53 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number55 index54 alt2">&nbsp;</div><div class="line number56 index55 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java plain">MessageSource messageSource() {</code></div><div class="line number57 index56 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">ResourceBundleMessageSource messageSource = </code><code class="java keyword">new</code> <code class="java plain">ResourceBundleMessageSource();</code></div><div class="line number58 index57 alt1">&nbsp;</div><div class="line number59 index58 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">messageSource.setBasename(</code><code class="java string">"i18n/messages"</code><code class="java plain">);</code></div><div class="line number60 index59 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">messageSource.setUseCodeAsDefaultMessage(</code><code class="java keyword">true</code><code class="java plain">);</code></div><div class="line number61 index60 alt2">&nbsp;</div><div class="line number62 index61 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">return</code> <code class="java plain">messageSource;</code></div><div class="line number63 index62 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number64 index63 alt1">&nbsp;</div><div class="line number65 index64 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java plain">LocalValidatorFactoryBean validator() {</code></div><div class="line number66 index65 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">return</code> <code class="java keyword">new</code> <code class="java plain">LocalValidatorFactoryBean();</code></div><div class="line number67 index66 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number68 index67 alt1">&nbsp;</div><div class="line number69 index68 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java plain">ViewResolver viewResolver() {</code></div><div class="line number70 index69 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">InternalResourceViewResolver viewResolver = </code><code class="java keyword">new</code> <code class="java plain">InternalResourceViewResolver();</code></div><div class="line number71 index70 alt2">&nbsp;</div><div class="line number72 index71 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">viewResolver.setViewClass(JstlView.</code><code class="java keyword">class</code><code class="java plain">);</code></div><div class="line number73 index72 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">viewResolver.setPrefix(</code><code class="java string">"/WEB-INF/jsp/"</code><code class="java plain">);</code></div><div class="line number74 index73 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">viewResolver.setSuffix(</code><code class="java string">".jsp"</code><code class="java plain">);</code></div><div class="line number75 index74 alt2">&nbsp;</div><div class="line number76 index75 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">return</code> <code class="java plain">viewResolver;</code></div><div class="line number77 index76 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number78 index77 alt1"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><p class="cye-lm-tag">Using the standalone configuration has two problems:</p><ol><li>Our test class looks like a mess even though our Spring MVC configuration is rather simple. Naturally, we could clean it up by moving the creation of Spring MVC infrastructure components into a separate class. This is left as an exercise for the reader.</li><li>We have to duplicate the configuration of Spring MVC infrastructure components. This means that if we change something in the application context configuration of our application, we must remember to do the same change to our tests as well.</li></ol><h3>Using WebApplicationContext Based Configuration</h3><p class="cye-lm-tag">We can configure our test class by following these steps:</p><ol><li>Annotate the test class with the <em>@RunWith</em> annotation and ensure that the test is executed by using the <em>SpringJUnit4ClassRunner</em>.</li><li>Annotate the class with the <em>@ContextConfiguration</em> annotation and ensure that the correct configuration classes (or XML configuration files) are used. If we want to use Java configuration, we have to set the configuration classes as the value of the <em>classes</em> attribute. On the other hand, if we prefer XML configuration, we have to set the configuration files as the value of the <em>locations</em> attribute.</li><li>Annotate the class with the <em>@WebAppConfiguration</em> annotation. This annotation ensures that the application context which is loaded for our test is a <em>WebApplicationContext</em>.</li><li>Add a <a href="http://static.springsource.org/spring/docs/3.2.x/javadoc-api/org/springframework/test/web/servlet/MockMvc.html" target="_blank"><em>MockMvc</em></a> field to the test class.</li><li>Add a <em>TodoService</em> field to the test class and annotate the field with the <em>@Autowired</em> annotation.</li><li>Add a <em>WebApplicationContext</em> field to the test class and annotate the field with the <em>@Autowired</em> annotation.</li><li>Add a <em>setUp()</em> method to the test class and annotate the method with the @Before annotation. This ensures that the method is called before each test. This method has responsibilities: it resets the service mock before each test and create a new <em>MockMvc</em> object by calling the <em>webAppContextSetup()</em> method of the <a href="http://static.springsource.org/spring/docs/3.2.x/javadoc-api/org/springframework/test/web/servlet/setup/MockMvcBuilders.html" target="_blank"><em>MockMvcBuilders</em></a> class.</li></ol><p class="cye-lm-tag">The source code of our test class looks as follows:</p><div><div id="highlighter_122595" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div class="line number23 index22 alt2">23</div><div class="line number24 index23 alt1">24</div><div class="line number25 index24 alt2">25</div><div class="line number26 index25 alt1">26</div><div class="line number27 index26 alt2">27</div><div class="line number28 index27 alt1">28</div><div class="line number29 index28 alt2">29</div><div class="line number30 index29 alt1">30</div><div class="line number31 index30 alt2">31</div><div class="line number32 index31 alt1">32</div><div class="line number33 index32 alt2">33</div><div class="line number34 index33 alt1">34</div><div class="line number35 index34 alt2">35</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">import</code> <code class="java plain">org.junit.Before;</code></div><div class="line number2 index1 alt1"><code class="java keyword">import</code> <code class="java plain">org.junit.runner.RunWith;</code></div><div class="line number3 index2 alt2"><code class="java keyword">import</code> <code class="java plain">org.mockito.Mockito;</code></div><div class="line number4 index3 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.beans.factory.annotation.Autowired;</code></div><div class="line number5 index4 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.test.context.ContextConfiguration;</code></div><div class="line number6 index5 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</code></div><div class="line number7 index6 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.test.context.web.WebAppConfiguration;</code></div><div class="line number8 index7 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.test.web.servlet.MockMvc;</code></div><div class="line number9 index8 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.test.web.servlet.setup.MockMvcBuilders;</code></div><div class="line number10 index9 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.web.context.WebApplicationContext;</code></div><div class="line number11 index10 alt2">&nbsp;</div><div class="line number12 index11 alt1"><code class="java color1">@RunWith</code><code class="java plain">(SpringJUnit4ClassRunner.</code><code class="java keyword">class</code><code class="java plain">)</code></div><div class="line number13 index12 alt2"><code class="java color1">@ContextConfiguration</code><code class="java plain">(classes = {TestContext.</code><code class="java keyword">class</code><code class="java plain">, WebAppContext.</code><code class="java keyword">class</code><code class="java plain">})</code></div><div class="line number14 index13 alt1"><code class="java comments">//@ContextConfiguration(locations = {"classpath:testContext.xml", "classpath:exampleApplicationContext-web.xml"})</code></div><div class="line number15 index14 alt2"><code class="java color1">@WebAppConfiguration</code></div><div class="line number16 index15 alt1"><code class="java keyword">public</code> <code class="java keyword">class</code> <code class="java plain">WebApplicationContextTodoControllerTest {</code></div><div class="line number17 index16 alt2">&nbsp;</div><div class="line number18 index17 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java plain">MockMvc mockMvc;</code></div><div class="line number19 index18 alt2">&nbsp;</div><div class="line number20 index19 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Autowired</code></div><div class="line number21 index20 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java plain">TodoService todoServiceMock;</code></div><div class="line number22 index21 alt1">&nbsp;</div><div class="line number23 index22 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Autowired</code></div><div class="line number24 index23 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java plain">WebApplicationContext webApplicationContext;</code></div><div class="line number25 index24 alt2">&nbsp;</div><div class="line number26 index25 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Before</code></div><div class="line number27 index26 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java keyword">void</code> <code class="java plain">setUp() {</code></div><div class="line number28 index27 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java comments">//We have to reset our mock between tests because the mock objects</code></div><div class="line number29 index28 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java comments">//are managed by the Spring container. If we would not reset them,</code></div><div class="line number30 index29 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java comments">//stubbing and verified behavior would "leak" from one test to another.</code></div><div class="line number31 index30 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">Mockito.reset(todoServiceMock);</code></div><div class="line number32 index31 alt1">&nbsp;</div><div class="line number33 index32 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">mockMvc = MockMvcBuilders.webAppContextSetup(webApplicationContext).build();</code></div><div class="line number34 index33 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number35 index34 alt2"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><p class="cye-lm-tag">The configuration of our test class looks a lot cleaner than the configuration which uses standalone configuration. However, the “downside” is that our test uses the full Spring MVC infrastructure. This might be an overkill if our test class really uses only a few components.</p><p class="cye-lm-tag"></p><div class="note course-banner"><strong>I released the starter package of my "Test With Spring" course:</strong><p class="cye-lm-tag"></p><p class="cye-lm-tag"><strong><a href="https://www.testwithspring.com/?utm_source=petri-kainulainen&amp;utm_medium=web&amp;utm_content=spring-mvc-unit-end&amp;utm_campaign=test-with-spring-course-presales" target="_blank">CHECK IT OUT &gt;&gt;</a></strong></p></div><h2>Summary</h2><p class="cye-lm-tag">We have now configured our unit test class by using both the standalone setup and the <em>WebApplicationContext</em> based setup. This blog post has taught us two things:</p><ul><li>We learned that it is important to divide the application context configuration in a such way that we can reuse parts of it in our tests.</li><li>We learned the difference between the standalone configuration and the <em>WebApplicationContext</em> based configuration.</li></ul><p class="cye-lm-tag">The next part of this tutorial describes how we can <a href="http://www.petrikainulainen.net/programming/spring-framework/unit-testing-of-spring-mvc-controllers-normal-controllers/">write unit tests for “normal” Spring MVC controllers</a>.</p><p class="cye-lm-tag"><strong>P.S.</strong> You can <a href="https://github.com/pkainulainen/spring-mvc-test-examples/tree/master/controllers-unittest" target="_blank">get the example application of this blog post from Github</a>.</p> <span id="tve_leads_end_content" style="display: block; visibility: hidden; border: 1px solid transparent;" class="cye-lm-tag"></span><div class="tve-leads-post-footer tve-tl-anim tve-leads-track-post_footer-11 tl-anim-instant tve-leads-triggered"><div class="tl-style" id="tve_20_set" data-state="11"><div class="tve-leads-conversion-object" data-tl-type="post_footer"><div class="tve_flt"><div id="tve_editor" class="tve_shortcode_editor"><div class="thrv-leads-form-box tve_no_drag tve_no_icons tve_element_hover thrv_wrapper tve_editor_main_content tve_20_set tve_teal tve_brdr_solid">
<div class="thrv_wrapper thrv_columns tve_clearfix" style="margin-top: 0;">
<div class="tve_colm tve_foc tve_df tve_ofo ">
<div style="width: 113px;" class="thrv_wrapper tve_image_caption aligncenter">
<span class="tve_image_frame cye-lm-tag">
<img class="tve_image" src="/wp-content/plugins/thrive-leads/editor-templates/_form_css/images/set_20_icon.png" style="width: 113px;" height="113" width="113">
</span>
</div>
</div>
<div class="tve_colm tve_tfo tve_df tve_lst">
<h2 style="color: #101010; font-size: 34px; margin-top: 25px;margin-bottom: 0;" class="rft">
GET FREE EBOOK<br></h2>
<p data-unit="px" style="color: rgb(0, 0, 0); font-size: 16px; margin-top: 0px; line-height: 24px;" class="cye-lm-tag">
Subscribe my email newsletter <span class="bold_text cye-lm-tag">AND</span> you will get my eBook: Writing Integration Tests for Spring Powered Repositories <span class="bold_text cye-lm-tag">FOR FREE</span>.</p>
</div>
</div>
<div class="thrv_wrapper thrv_contentbox_shortcode" data-tve-style="5">
<div class="tve_cb tve_cb5 tve_teal">
<div class="tve_cb_cnt">
<div data-tve-style="1" class="thrv_wrapper thrv_lead_generation tve_clearfix tve_red thrv_lead_generation_horizontal tve_2" data-inputs-count="2" style="margin-top: 0;margin-bottom: 0;">
<div style="display: none;" class="thrv_lead_generation_code"></div>
<input class="tve-lg-err-msg" value="{&quot;email&quot;:&quot;Please enter a valid email address&quot;,&quot;phone&quot;:&quot;Please enter a valid phone number&quot;,&quot;required&quot;:&quot;Name and Email fields are required&quot;}" type="hidden">
<div class="thrv_lead_generation_container tve_clearfix">
<div class="tve_lead_generated_inputs_container tve_clearfix">
<div class="tve_lead_fields_overlay"></div>
<form action="https://www.getdrip.com/forms/9536594/submissions" method="POST" data-drip-embedded-form="9536594">
<div class="tve_lg_input_container  tve_lg_2 tve_lg_input">
<input name="fields[email]" value="" data-placeholder="email" placeholder="Email Address..." type="text">
</div>
<div class="tve_lg_input_container tve_submit_container tve_lg_2 tve_lg_submit">
<button type="Submit" data-drip-attribute="sign-up-button">SUBSCRIBE</button>
</div>
</form>
</div>
</div>
</div>
</div>
</div>
</div><p style="line-height: 24px;" data-unit="px" class="tve_p_center cye-lm-tag"><span class="tve_custom_font_size cye-lm-tag" style="font-size: 16px;">I will never rent, sell, or share your email address.<br></span></p>
</div></div></div></div></div></div></div>

<section id="comments"><div class="comments_intro"><span class="num_comments cye-lm-tag">79</span> comments… <a href="#commentform" rel="nofollow">add one</a></div><ul class="comment_list"><li class="comment even thread-even depth-1" id="comment-267492"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag"><a href="http://grails.asia/grails-tutorial-for-beginners-setup-your-windows-development-environment/" rel="external nofollow" class="url">grails dev</a></span> <a class="comment_permalink" href="#comment-267492" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">July 21, 2013, 12:52</span></div><div class="comment_text" id="comment-body-267492"><p class="cye-lm-tag">I love SpringMVC. Since controllers are also POJO’s, testing is easy just like testing any other class.  And have options like pointed above</p></div> </div></li><li class="comment odd alt thread-odd thread-alt depth-1" id="comment-269326"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">ola</span> <a class="comment_permalink" href="#comment-269326" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">August 8, 2013, 13:07</span></div><div class="comment_text" id="comment-body-269326"><p class="cye-lm-tag">Thank’s! Very structured and easy to understand!</p></div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-269386"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span> <a class="comment_permalink" href="#comment-269386" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">August 8, 2013, 22:28</span></div><div class="comment_text" id="comment-body-269386"><p class="cye-lm-tag">You are welcome! I am happy to hear that this blog post was useful to you.</p></div> </div></li></ul></li><li class="comment odd alt thread-even depth-1" id="comment-276455"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Jon</span> <a class="comment_permalink" href="#comment-276455" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">October 8, 2013, 18:31</span></div><div class="comment_text" id="comment-body-276455"><p class="cye-lm-tag">Nice, thanks for showing how to set MockMvc’s view resolver programatically.</p></div> </div></li><li class="comment even thread-odd thread-alt depth-1" id="comment-284810"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag"><a href="http://www.effectivetrainings.de" rel="external nofollow" class="url">Martin Dilger</a></span> <a class="comment_permalink" href="#comment-284810" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">November 8, 2013, 15:41</span></div><div class="comment_text" id="comment-body-284810"><p class="cye-lm-tag">Maybe you should also mention (or did you and I overlooked it?) that this project is usable even if you are stuck with a spring version lower than 3.2.x.<br> Just use this project (its basically the same as this code base has been imported into the core).</p><p class="cye-lm-tag"><a href="https://github.com/spring-projects/spring-test-mvc" rel="nofollow">https://github.com/spring-projects/spring-test-mvc</a></p></div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-284842"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span> <a class="comment_permalink" href="#comment-284842" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">November 8, 2013, 16:54</span></div><div class="comment_text" id="comment-body-284842"><p class="cye-lm-tag">Actually I didn’t realize that it would be useful to mention it here. I will update this blog post later today. Thanks for pointing this out!</p></div> </div></li></ul></li><li class="comment even thread-even depth-1" id="comment-455533"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Blebail</span> <a class="comment_permalink" href="#comment-455533" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">April 14, 2014, 18:48</span></div><div class="comment_text" id="comment-body-455533"><p class="cye-lm-tag">Thanks for this post,</p><p class="cye-lm-tag">I have a little question though :<br> In the setUp() method which is executed before each test (@before), a MockMvc is built.<br> I totally understant why the todoServiceMock has to be reset before each test, but what about the MockMvc ?<br> Would it not be better to build the MockMvc once for all the tests (@beforeClass) ?<br> What’s the point/utility of rebuilding a MockMvc before each test of the test class ?</p><p class="cye-lm-tag">Maybe i missed something here, i’m relatively new to spring mocking strategy :)</p></div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-456227"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span> <a class="comment_permalink" href="#comment-456227" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">April 14, 2014, 21:35</span></div><div class="comment_text" id="comment-body-456227"><p class="cye-lm-tag">That is a GREAT question. To be honest, I create a new <code>MockMvc</code> object for each test case just because <a href="http://docs.spring.io/spring/docs/4.0.x/spring-framework-reference/htmlsingle/#spring-mvc-test-framework" target="_blank" rel="nofollow">this is the way it is done in the reference manual of Spring Framework</a>.</p><p class="cye-lm-tag">However, now that you mentioned it, I started to wonder if this is really necessary. Unfortunately I cannot answer to your question right now, but I promise that I will try to find an answer to your question. I will let you know if I find it.</p></div> </div><ul class="children"><li class="comment even depth-3" id="comment-459025"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Blebail</span> <a class="comment_permalink" href="#comment-459025" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">April 15, 2014, 10:36</span></div><div class="comment_text" id="comment-body-459025"><p class="cye-lm-tag">Actually I’ve seen both ways. After a little research in spring sources, I saw it two times in the @beforeClass. So I guess it’s ok.</p><p class="cye-lm-tag">Example :<br> <a href="https://github.com/spring-projects/spring-test-mvc/blob/master/src/test/java/org/springframework/test/web/server/samples/context/WarRootDirectoryTests.java" rel="nofollow">https://github.com/spring-projects/spring-test-mvc/blob/master/src/test/java/org/springframework/test/web/server/samples/context/WarRootDirectoryTests.java</a></p><p class="cye-lm-tag">Anyway, thank you, these tutorials have been and will be really helpful.</p></div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-4" id="comment-461402"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span> <a class="comment_permalink" href="#comment-461402" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">April 15, 2014, 20:52</span></div><div class="comment_text" id="comment-body-461402"><p class="cye-lm-tag">After I gave this some thought and did some testing, I noticed that using the <code>@BeforeClass</code> annotation isn’t very handy for two reasons:</p><ol><li>You have to remember to reset your mock objects in your test methods. If you don’t do this, your tests will fail when you try to verify the interactions between the tested code and the mock objects.</li><li>You cannot inject anything to your test classes because all injected fields are null when the <code>setUp()</code> method is invoked. This means that you cannot use the <code>WebApplicationContext</code> based setup (unless you build the web application context yourself). Of course you can always use the standalone setup as long as you remember to reset your mock objects in your test methods.</li></ol><p class="cye-lm-tag">In other words, it seems that</p><ul><li>It is possible to write unit tests by using this approach but it takes some extra work.</li><li>It doesn’t make sense to write integration tests by using this approach because it takes too much work to configure everything manually.</li></ul></div> </div><ul class="children"><li class="comment even depth-5" id="comment-465921"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Blebail</span> <a class="comment_permalink" href="#comment-465921" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">April 16, 2014, 18:58</span></div><div class="comment_text" id="comment-body-465921"><p class="cye-lm-tag">I did some testing too. And yeah, with the @beforeClass approach I noticed the same issues as you. I’m back to the MockMvc in the @before method.</p><p class="cye-lm-tag">Thank you for taking some time to take a look a this and give the proper answer to my question.</p></div></div></li><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-5" id="comment-466136"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span> <a class="comment_permalink" href="#comment-466136" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">April 16, 2014, 19:55</span></div><div class="comment_text" id="comment-body-466136"><p class="cye-lm-tag">You are welcome! It is always nice to help someone out (and often I end up learning new things as well).</p></div></div></li></ul></li></ul></li></ul></li></ul></li><li class="comment even thread-odd thread-alt depth-1" id="comment-568880"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">sri</span> <a class="comment_permalink" href="#comment-568880" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">May 8, 2014, 14:11</span></div><div class="comment_text" id="comment-body-568880"><p class="cye-lm-tag">hai petri, thanks for structured explanation of the spring web Mvc<br> could plz explain why spring come into picture ? what problems java faced before spring frame work ?  And how spring solved those problems ?</p></div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-570306"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span> <a class="comment_permalink" href="#comment-570306" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">May 8, 2014, 21:10</span></div><div class="comment_text" id="comment-body-570306"><p class="cye-lm-tag">IMO the main reason why the Spring Framework became popular was that EJB 2 sucked big time. Writing EJB 2 applications was a complex task and the only way to configure them was to use monstrous XML files. In other words, the only other option, which provided “everything”, was so horrible that developers started to use Spring Framework for writing enterprise applications.</p><p class="cye-lm-tag">You might want to read an article titled: <a href="http://www.wrox.com/WileyCDA/Section/Why-Use-the-Spring-Framework-.id-130098.html" target="_blank" rel="nofollow">Why Use the Spring Framework</a>. However, you should remember that things have changed a lot, and the newer Java EE versions are totally different beasts.</p></div> </div></li></ul></li><li class="comment even thread-even depth-1" id="comment-570690"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Tyler</span> <a class="comment_permalink" href="#comment-570690" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">May 8, 2014, 23:11</span></div><div class="comment_text" id="comment-body-570690"><p class="cye-lm-tag">Hi Petri,</p><p class="cye-lm-tag">I was following along pretty well until the Test Context configuration. Firstly, at the start of this tutorial I saw that our TodoController declared a TodoService variable. I assumed that the TodoService class would be covered at some time in the tutorial, but it was not. So I lost you on this part: .</p><p class="cye-lm-tag">Am I missing something? Where is the TodoService class code? or did I miss a code download somewhere?</p><p class="cye-lm-tag">Thanks</p></div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-570814"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span> <a class="comment_permalink" href="#comment-570814" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">May 8, 2014, 23:42</span></div><div class="comment_text" id="comment-body-570814"><p class="cye-lm-tag">Hi Tyler,</p><p class="cye-lm-tag">The reason why I didn’t describe the <code>TodoService</code> interface in this blog post was that you don’t have to know what it is (yet).</p><p class="cye-lm-tag">The next parts of this tutorial shed some light to this matter by describing the implementations of the tested controller methods. This tells you what service methods you have to mock in your unit tests.</p><p class="cye-lm-tag">By the way, you can <a href="https://github.com/pkainulainen/spring-mvc-test-examples/tree/master/controllers-unittest" target="_blank" rel="nofollow">get the example application of this blog post from Github</a>.</p></div> </div></li></ul></li><li class="comment even thread-odd thread-alt depth-1" id="comment-681131"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Pravin</span> <a class="comment_permalink" href="#comment-681131" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">June 5, 2014, 21:36</span></div><div class="comment_text" id="comment-body-681131"><p class="cye-lm-tag">Hey Petri!</p><p class="cye-lm-tag">Excellent Tutorial!</p><p class="cye-lm-tag">I have an issue for which I request your help.</p><p class="cye-lm-tag">By default, the @WebApplicationContext looks for the main spring XML file in src/main/webapp in a maven project. How do we configure it for non-maven projects.</p><p class="cye-lm-tag">I tried this:</p><p class="cye-lm-tag">@ContextConfiguration({ “classpath*:mvc-dispatcher-servlet.xml” })<br> @RunWith(SpringJUnit4ClassRunner.class)<br> @WebAppConfiguration({ “classpath*:mvc-dispatcher-servlet.xml” } )<br> public class LoginControllerTest {<br> // some code<br> }</p></div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-683762"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span> <a class="comment_permalink" href="#comment-683762" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">June 6, 2014, 20:47</span></div><div class="comment_text" id="comment-body-683762"><p class="cye-lm-tag">If the <code>mvc-dispatcher-servlet.xml</code> file is found from the “root” of your classpath, you can configure your test by using this code:</p><pre><code>
@ContextConfiguration({"classpath:mvc-dispatcher-servlet.xml"})
@RunWith(SpringJUnit4ClassRunner.class)
@WebAppConfiguration
public class LoginControllerTest {
// some code
}
</code>
</pre><p class="cye-lm-tag">Check out the following Javadocs for more details about this:</p><ul><li>The <a href="http://docs.spring.io/spring/docs/4.0.x/javadoc-api/org/springframework/test/context/ContextConfiguration.html#locations--" target="_blank" rel="nofollow"><code>@ContextConfiguration.locations</code></a> describes what kind of values you can set as the value of the <code>locations</code> attribute of the <code>@ContextConfiguration</code> annotation.</li><li>The <a href="http://docs.spring.io/spring/docs/4.0.x/javadoc-api/org/springframework/test/context/support/AbstractContextLoader.html#modifyLocations-java.lang.Class-java.lang.String...-" target="_blank" rel="nofollow"><code> AbstractContextLoader.modifyLocations()</code></a> describes how a location string is interpreted at runtime.</li><li>The <a href="http://docs.spring.io/spring/docs/4.0.x/javadoc-api/org/springframework/test/context/web/WebAppConfiguration.html" target="_blank" rel="nofollow">@WebAppConfiguration</a> explains how you can use the <code>@WebAppConfiguration</code> annotation.</li></ul><p class="cye-lm-tag">I hope that this answered to your question.</p></div> </div></li></ul></li><li class="comment even thread-even depth-1" id="comment-707382"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Prashant</span> <a class="comment_permalink" href="#comment-707382" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">June 23, 2014, 16:21</span></div><div class="comment_text" id="comment-body-707382"><p class="cye-lm-tag">Hi Petri,<br> Above code with spring 4.0.5 , gives “java.lang.NoClassDefFoundError: javax/servlet/SessionCookieConfig” exception with below servlet api maven dependency</p><p class="cye-lm-tag"> javax.servlet<br> servlet-api<br> 3.0-alpha-1<br> provided</p><p class="cye-lm-tag">Issue was fixed by including maven dependency for “geronimo-servlet_3.0_spec” (ref. <a href="https://jira.spring.io/browse/SPR-11049" rel="nofollow">https://jira.spring.io/browse/SPR-11049</a>)</p></div> </div><ul class="children"><li class="comment odd alt depth-2" id="comment-762384"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Sai</span> <a class="comment_permalink" href="#comment-762384" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">August 13, 2014, 21:33</span></div><div class="comment_text" id="comment-body-762384"><p class="cye-lm-tag">This was very helpful! Thank you</p></div> </div></li></ul></li><li class="comment even thread-odd thread-alt depth-1" id="comment-720263"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Justen Britain</span> <a class="comment_permalink" href="#comment-720263" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">July 6, 2014, 09:40</span></div><div class="comment_text" id="comment-body-720263"><p class="cye-lm-tag">Hi Petri,</p><p class="cye-lm-tag">I used your tutorial for setting up Spring Social and am now trying to unit test following this tutorial. The problem I am running into is that Spring-Social’s SocialConfiguration class that we extend to setup the social side of the house has a method “usersConnectionRepository” which calls the SocialConfigurer.getUsersConnectionRepository(connectionFactoryLocator. Obviously I don’t want a JDBCConnectionFactory being setup and called for unit tests but when I add a bean class to override it in my TestContext class Spring throws an exception say it found 2 matching beans and expected only one. Any help you can provide is appreciated.</p></div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-720292"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span> <a class="comment_permalink" href="#comment-720292" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">July 6, 2014, 10:20</span></div><div class="comment_text" id="comment-body-720292"><p class="cye-lm-tag">Hi Justen,</p><p class="cye-lm-tag">You can probably solve your problem by using <a href="http://docs.spring.io/spring/docs/4.0.x/spring-framework-reference/htmlsingle/#beans-definition-profiles" target="_blank" rel="nofollow">bean definition profiles</a>.</p><p class="cye-lm-tag">You might want to take a look at the example application because it has comprehensive unit and integration tests. However, writing them was a bit tricky. That is why I wrote two blog posts which explain this process:</p><ul><li><a href="/programming/spring-framework/adding-social-sign-in-to-a-spring-mvc-web-application-unit-testing/" rel="nofollow">Adding Social Sign In to a Spring MVC Web Application: Unit Testing</a> describes how you can write unit tests for the registration function.</li><li><a href="/programming/spring-framework/adding-social-sign-in-to-a-spring-mvc-web-application-integration-testing/" rel="nofollow">Adding Social Sign In to a Spring MVC Web Application: Integration Testing</a> describes how you can write integration tests for the registration and login functions.</li></ul><p class="cye-lm-tag">If these blog posts don’t help you to solve your problem, you could create a <a href="https://gist.github.com/" target="_blank" rel="nofollow">Gist</a> which explains your test configuration (it feels a bit different than mine because I didn’t use the <code>SocialContext</code> class in my unit tests).</p></div> </div></li></ul></li><li class="comment even thread-even depth-1" id="comment-723225"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Binh Thanh Nguyen</span> <a class="comment_permalink" href="#comment-723225" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">July 9, 2014, 06:01</span></div><div class="comment_text" id="comment-body-723225"><p class="cye-lm-tag">Thanks, nice post</p></div> </div></li><li class="comment odd alt thread-odd thread-alt depth-1" id="comment-728782"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">sanjeev</span> <a class="comment_permalink" href="#comment-728782" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">July 15, 2014, 14:13</span></div><div class="comment_text" id="comment-body-728782"><p class="cye-lm-tag">Hello Petri,<br> Thanks for the post. I have been following the same.<br> I am writing unit test based on java config approach.<br> I am able to deploy and test the application via rest client such as postman.<br> But with Junit I am not sure why I am getting the below error. Is this a configuration problem. Please let me know your input.<br> Kind Regards<br> Sanjeev.</p><pre><code>
@RunWith(SpringJUnit4ClassRunner.class)
@WebAppConfiguration
@ContextConfiguration(classes = {PersistenceConfigODB.class, RootConfig.class, WebConfig.class})
public class TeamRepositoryTest {
	private MockMvc mockMvc;
	
	@Autowired
	WebApplicationContext webApplicationContext;

	@BeforeClass
	public static void setUpBeforeClass() throws Exception {}

	@Before
	public void setUp() throws Exception {
		mockMvc = MockMvcBuilders
						.webAppContextSetup(webApplicationContext)
						.build();
	}
}
</code>
</pre><p class="cye-lm-tag">java.lang.ClassFormatError: Absent Code attribute in method that is not native or abstract in class file javax/servlet/SessionTrackingMode</p><p class="cye-lm-tag"><strong>Update: I removed the unrelated part of the stack trace – Petri</strong></p></div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-729030"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span> <a class="comment_permalink" href="#comment-729030" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">July 15, 2014, 20:39</span></div><div class="comment_text" id="comment-body-729030"><p class="cye-lm-tag">I found <a href="http://dominikdorn.com/2010/05/maven-junit-classformaterror-absent-code-attribute/" target="_blank" rel="nofollow">this blog post</a> which describes a very similar problem and provides a solution to it.</p><p class="cye-lm-tag">Is the servlet-api jar file in the classpath when you run your unit tests?</p></div> </div></li></ul></li><li class="comment odd alt thread-even depth-1" id="comment-747766"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">OldDevelopper</span> <a class="comment_permalink" href="#comment-747766" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">August 1, 2014, 18:10</span></div><div class="comment_text" id="comment-body-747766"><p class="cye-lm-tag">Why test code is far longer than code to be tested ?<br> Isn’t it a little problem ?<br> Who says more code, says more bugs, isn’t it ?<br> Anyway good job</p></div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-747956"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span> <a class="comment_permalink" href="#comment-747956" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">August 1, 2014, 20:33</span></div><div class="comment_text" id="comment-body-747956"><blockquote><p class="cye-lm-tag">Why test code is far longer than code to be tested ?</p></blockquote><p class="cye-lm-tag">If you are referring to the test methods described in the <a href="/programming/spring-framework/unit-testing-of-spring-mvc-controllers-normal-controllers/" rel="nofollow">second</a> and <a href="/programming/spring-framework/unit-testing-of-spring-mvc-controllers-rest-api/" rel="nofollow">third</a> part of this tutorial, the reason is that those methods test too much. Nowadays I <a href="/programming/testing/writing-clean-tests-divide-and-conquer/" rel="nofollow">split the test methods into smaller test methods which test only one thing</a>.</p><p class="cye-lm-tag">But I think that it is quite common that the LOC of your test code is a lot bigger than the LOC of your production code. This happens if you write comprehensive tests for your code.</p><blockquote><p class="cye-lm-tag">Isn’t it a little problem ?</p></blockquote><p class="cye-lm-tag">Yes. The test methods described in later parts of this tutorial should be splitted into smaller methods.</p><blockquote><p class="cye-lm-tag">Who says more code, says more bugs, isn’t it ?</p></blockquote><p class="cye-lm-tag">Yes. That is why I split my test methods into smaller methods. These methods are typically much simpler which makes it easier to verify that there are no bugs.</p><blockquote><p class="cye-lm-tag">Anyway good job</p></blockquote><p class="cye-lm-tag">Thanks. Also, thank you for asking this important question.</p></div> </div></li></ul></li><li class="comment odd alt thread-odd thread-alt depth-1" id="comment-988908"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">martin samm</span> <a class="comment_permalink" href="#comment-988908" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">November 19, 2014, 09:02</span></div><div class="comment_text" id="comment-body-988908"><p class="cye-lm-tag">Petri – love the articles; excellent resource. a question – presumably when in normal (non-test) running, something is component scanning to find the ‘real’ TodoService (web context class?). How do you stop that scanning occurring in testing mode and to use the mock TodoService instead – i cant seem to separate the configs enough to get that to happen – i get the real and mock beans being created and getting startup errors.<br> Thanks again.</p></div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-988971"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span> <a class="comment_permalink" href="#comment-988971" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">November 19, 2014, 09:45</span></div><div class="comment_text" id="comment-body-988971"><p class="cye-lm-tag">Hi Martin,</p><p class="cye-lm-tag">Thank you for your kind words. I really appreciate them.</p><blockquote><p class="cye-lm-tag">How do you stop that scanning occurring in testing mode and to use the mock TodoService instead – i cant seem to separate the configs enough to get that to happen – i get the real and mock beans being created and getting startup errors.</p></blockquote><p class="cye-lm-tag">I separate the application context configuration classes of my application in a such way that the web layer is configured in a single class that also configures the component scan for controllers and other components that belong to the web layer. If I do this, I can then create a separate application context configuration class for my tests that creates the “mock beans”.</p><p class="cye-lm-tag">If you take a look at the <a href="https://github.com/pkainulainen/spring-mvc-test-examples/tree/master/controllers-unittest/src/main/java/net/petrikainulainen/spring/testmvc/config" target="_blank" rel="nofollow">application configuration of my example application</a>, you notice that</p><ul><li>The <code>ExampleApplicationContext</code> class configures the component scan for components that belong to the service layer.</li><li>The <code>WebAppContext</code> class configures the component scan for components that belong to the web layer.</li></ul><p class="cye-lm-tag">If I write unit tests that use the only the <code>WebAppContext</code> class and the configuration class that creates the mock beans, I can scan only the tested classes.</p><p class="cye-lm-tag">A word of warning though:</p><p class="cye-lm-tag">When I wrote this tutorial, I used the web application context based setup because it seemed easier than standalone setup. Although this is true for simple applications, maintaining the application context configuration class that creates the “mock beans” can be a bit painful if you are writing tests for a real life application that has a lot beans that should be mocked.</p><p class="cye-lm-tag">In other words, sometimes it might be wiser to use the standalone configuration (especially in unit tests).</p></div> </div></li></ul></li><li class="comment odd alt thread-even depth-1" id="comment-1008523"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Marcusgao</span> <a class="comment_permalink" href="#comment-1008523" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">November 27, 2014, 07:25</span></div><div class="comment_text" id="comment-body-1008523"><p class="cye-lm-tag">Hi Petri, thanks a lot for your tutorial, it really helps me.<br> But unfortunately, i encounter a problem. I noticed that in your project on Github, you have several ApplicationContext files, but you don’t mention them in this blog. i do not write any ApplicationContext.java files, and i get this error when testing.</p><p class="cye-lm-tag">java.lang.IllegalStateException: Failed to load ApplicationContext<br> Caused by: java.lang.IllegalStateException: Cannot load configuration class:</p><p class="cye-lm-tag">Does this mean i need to write some ApplicationContext.java files like you do in the project?<br> thanks</p></div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-1009564"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span> <a class="comment_permalink" href="#comment-1009564" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">November 27, 2014, 18:04</span></div><div class="comment_text" id="comment-body-1009564"><p class="cye-lm-tag">Hi,</p><p class="cye-lm-tag">Thank you for your kind words. I really appreciate them.</p><blockquote><p class="cye-lm-tag">Does this mean i need to write some ApplicationContext.java files like you do in the project?</p></blockquote><p class="cye-lm-tag">You are right. You have to configure the application context of your application by using either Java configuration classes or XML configuration files.</p><p class="cye-lm-tag">Although you can write unit tests for your controllers by using the <a href="http://docs.spring.io/spring-framework/docs/current/spring-framework-reference/htmlsingle/#spring-mvc-test-framework" target="_blank" rel="nofollow">standalone configuration</a> (scroll down and look for a string ‘Setup Options’), you cannot run your application if you haven’t configured its application context.</p><p class="cye-lm-tag">The example application of this blog post <a href="https://github.com/pkainulainen/spring-mvc-test-examples/tree/master/controllers-unittest/src/test/java/net/petrikainulainen/spring/testmvc/todo/controller" target="_blank" rel="nofollow">has unit tests</a> that use the standalone configuration and the web application context based configuration.</p><p class="cye-lm-tag">If you have further questions, don’t hesitate to ask them!</p></div> </div></li></ul></li><li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1025992"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">srini</span> <a class="comment_permalink" href="#comment-1025992" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">December 4, 2014, 14:40</span></div><div class="comment_text" id="comment-body-1025992"><p class="cye-lm-tag">Hi Petri,</p><p class="cye-lm-tag">exceptation is not invoked it returns null<br> using mockmvc with standalone,@Runwith(MockitJunitRunner.class)</p><pre><code>
@Scope("singleton")
mycontroller{
	@autowire
	myUtil myutil
	
	somemethod(req,res){
	}
}
</code>
</pre><pre><code>
mycontrollerTest{
	@InjectMocks
	mycontroller mycont ;

	@Mock
	myUtil myutil

	@before() { 
		Mocktoannotation.init(this)
		this.mockMvc = MockMvcBuilders.standaloneSetup(mycont).build()
	}

	testsomemethod(){ 
		when(myutil.getxxx()).thenReturn(yyy);
		mycont.somemethod(mockreq,mockres);
	}
}
</code>
</pre><p class="cye-lm-tag">i debugged the code,the exception which we set is not called ?<br> what is i am missing</p><p class="cye-lm-tag">Thanks</p></div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-1026419"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span> <a class="comment_permalink" href="#comment-1026419" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">December 4, 2014, 18:45</span></div><div class="comment_text" id="comment-body-1026419"><p class="cye-lm-tag">Hi,</p><p class="cye-lm-tag">Do you mean that</p><ol><li>The <code>getxxx()</code> method of the <code>myUtil</code> class is not invoked at all.</li><li>The <code>getxxx()</code> method of the <code>myUtil</code> class is invoked, but it returns null.</li></ol><p class="cye-lm-tag">It is kind of hard to say what is wrong because you omitted the source code of your controller method. Could you add the source code of your controller method here?</p><p class="cye-lm-tag">By the way, you might want to read a blog post titled: <a href="http://tedvinke.wordpress.com/2014/02/13/mockito-why-you-should-not-use-injectmocks-annotation-to-autowire-fields/" target="_blank" rel="nofollow">Mockito: Why You Should Not Use InjectMocks Annotation to Autowire Fields</a>. It explains why you should use constructor injection instead of field injection (<a href="/software-development/design/why-i-changed-my-mind-about-field-injection/" rel="nofollow">I have written about this too</a>).</p></div> </div><ul class="children"><li class="comment odd alt depth-3" id="comment-1026536"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Anonymous</span> <a class="comment_permalink" href="#comment-1026536" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">December 4, 2014, 19:40</span></div><div class="comment_text" id="comment-body-1026536"><p class="cye-lm-tag">its mockitocglibproxy called which in term invokes mokito api handler which retruns false due to internal stubbed array is null</p></div> </div></li><li class="comment even depth-3" id="comment-1301980"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Rogerio</span> <a class="comment_permalink" href="#comment-1301980" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">October 30, 2015, 19:40</span></div><div class="comment_text" id="comment-body-1301980"><p class="cye-lm-tag">The argument used in [that article](<a href="http://tedvinke.wordpress.com/2014/02/13/mockito-why-you-should-not-use-injectmocks-annotation-to-autowire-fields" rel="nofollow">http://tedvinke.wordpress.com/2014/02/13/mockito-why-you-should-not-use-injectmocks-annotation-to-autowire-fields</a>) is very weak: it simply says that, since Mockito will fail *silently* when a new dependency (the `AuditService`) is added, calling the constructor directly in the test would be better as you have to do it explicitly.</p><p class="cye-lm-tag">But that is just a specific Mockito limitation, which happens to lack support for annotations like @Autowired. If it had (like another testing library – JMockit – does), then the test would fail with a nice exception message about the missing dependency.</p><p class="cye-lm-tag">Constructor injection, in fact, is a bad choice, compared to injection into annotated fields, for the following reasons:<br> 1. Constructor injection requires more code: you need to have instance fields for the injected dependencies, and also an assignment to each field in the injection constructor.<br> 2. Most dependencies are private, not meant to be exposed in a public API (the annotated constructor). For example, a DAO, or a JPA EntityManager. Having only the field for each such dependency (rather than the field + the constructor parameter) is simpler, takes less code, and preserves encapsulation which would otherwise be broken by exposing the dependency through a public constructor.<br> 3. Java EE has made the choice of prefering field injection, with constructor/setter injection being supported only as an afterthought. From my experience, most new projects nowadays and in the future will be using Java EE instead of Spring.</p></div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-4" id="comment-1302002"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span> <a class="comment_permalink" href="#comment-1302002" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">October 30, 2015, 20:00</span></div><div class="comment_text" id="comment-body-1302002"><p class="cye-lm-tag">Interesting comment. Here are my thoughts about this:</p><blockquote><p class="cye-lm-tag">Constructor injection requires more code: you need to have instance fields for the injected dependencies, and also an assignment to each field in the injection constructor.</p></blockquote><p class="cye-lm-tag">True, but <a href="/software-development/design/why-i-changed-my-mind-about-field-injection/" rel="nofollow">this is a good thing</a>.</p><blockquote><p class="cye-lm-tag">Most dependencies are private, not meant to be exposed in a public API (the annotated constructor). For example, a DAO, or a JPA EntityManager.</p></blockquote><p class="cye-lm-tag">You can define a public API by using interfaces and hiding the actual implementations.</p><blockquote><p class="cye-lm-tag">Having only the field for each such dependency (rather than the field + the constructor parameter) is simpler, takes less code, and preserves encapsulation which would otherwise be broken by exposing the dependency through a public constructor.</p></blockquote><p class="cye-lm-tag">So, what happens if you remove the bean that is required by another bean? The field injection doesn’t really encapsulate anything. The only thing that happens is that the dependencies of the created bean are hidden (but still required). If you really want to encapsulate the implementation details of a bean, you should use interfaces (but only if you have more than one implementation OR you want to publish the API of a module).</p><blockquote><p class="cye-lm-tag">Java EE has made the choice of prefering field injection, with constructor/setter injection being supported only as an afterthought. From my experience, most new projects nowadays and in the future will be using Java EE instead of Spring.</p></blockquote><p class="cye-lm-tag">This constructor injection vs. field injection discussion has got nothing to do with Java EE or Spring. I think it is great that Java EE works for you. Keep using it.</p></div> </div></li></ul></li></ul></li><li class="comment even depth-2" id="comment-1026527"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">srini</span> <a class="comment_permalink" href="#comment-1026527" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">December 4, 2014, 19:37</span></div><div class="comment_text" id="comment-body-1026527"><p class="cye-lm-tag">thanks for your suggestions,<br> my controller method and agruments are same which i am trying to set in mockito.when -exceptation.<br> i will try your suggestion instead of inject mock i will try to set using ReflectionTestUtil.setField() method and come back<br> one more question i debugged mockito api it is not stubbing utils class, -is this due to util class has also some autowire components</p></div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-3" id="comment-1026646"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span> <a class="comment_permalink" href="#comment-1026646" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">December 4, 2014, 20:28</span></div><div class="comment_text" id="comment-body-1026646"><p class="cye-lm-tag">Do you create a new <code>MyController</code> object in your test class? The reason why I am asking this is that your sample code does not create it.</p><p class="cye-lm-tag">If you use the <code>@InjectMocks</code> annotation, you have to use it as follows:</p><pre><code>
@InjectMocks
private final MyController mycont = new MyController();
</code>
</pre><blockquote><p class="cye-lm-tag">one more question i debugged mockito api it is not stubbing utils class, -is this due to util class has also some autowire components</p></blockquote><p class="cye-lm-tag">Unfortunately it is impossible to say what is wrong without seeing the source code of the tested controller and the <code>MyUtil</code> class. However, I think that the dependencies of the <code>MyUtil</code> class have got nothing to do with this problem because I have been able to mock classes that use other components.</p></div> </div></li></ul></li><li class="comment even depth-2" id="comment-1038587"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">srini</span> <a class="comment_permalink" href="#comment-1038587" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">December 9, 2014, 13:39</span></div><div class="comment_text" id="comment-body-1038587"><p class="cye-lm-tag">how to mock service method having request as argument in the controller.</p><p class="cye-lm-tag">i used the mockmvc with test class is annoted with @mokitojunitrunner as advised in tutorial<br> mokito always returns false because in mockmvc framework ,it creates MockHttpServletRequest but actual service method has HttpServletRequest due to this mismatch in object type -i debugged the findout the above reason .<br> could you please suggest how to deal with this..</p></div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-3" id="comment-1038817"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span> <a class="comment_permalink" href="#comment-1038817" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">December 9, 2014, 18:01</span></div><div class="comment_text" id="comment-body-1038817"><p class="cye-lm-tag">Hi,</p><p class="cye-lm-tag">Here is a little example that demonstrates how you can solve your problem.</p><p class="cye-lm-tag"><strong>First</strong>, my controller looks as follows:</p><pre><code>
@RestController
@RequestMapping("/api/hello")
final class HelloController {

    private final HelloService service;

    @Autowired
    public HelloController(HelloService service) {
        this.service = service;
    }

    @RequestMapping(method = RequestMethod.GET)
    String hello(HttpServletRequest request) {
        return service.hello(request);
    }
}
</code>
</pre><p class="cye-lm-tag"><strong>Second</strong>, my service class looks as follows:</p><pre><code>
@Service
public class HelloService {

    public String hello(HttpServletRequest request) {
        return "hello";
    }
}
</code>
</pre><p class="cye-lm-tag">And my passing test looks as follows:</p><pre><code>
@RunWith(MockitoJUnitRunner.class)
public class HelloControllerTest {

    @Mock
    private HelloService service;

    private MockMvc mockMvc;

    @Before
    public void setUp() {
        mockMvc = MockMvcBuilders.standaloneSetup(new HelloController(service))
                .build();
    }

    @Test
    public void hello_ShouldReturnHello() throws Exception {
		//Mock the service method
        when(service.hello(isA(HttpServletRequest.class))).thenReturn("FOOBAR");

        mockMvc.perform(get("/api/hello"))
                .andExpect(content().string("FOOBAR"));
    }
}
</code>
</pre><p class="cye-lm-tag">I hope that this answered to your question. If not, feel free to ask additional questions.</p></div> </div></li></ul></li></ul></li><li class="comment even thread-even depth-1" id="comment-1103628"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">yaowei</span> <a class="comment_permalink" href="#comment-1103628" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">January 22, 2015, 14:09</span></div><div class="comment_text" id="comment-body-1103628"><p class="cye-lm-tag">thank you and really appreciate</p></div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-1103937"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span> <a class="comment_permalink" href="#comment-1103937" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">January 22, 2015, 20:33</span></div><div class="comment_text" id="comment-body-1103937"><p class="cye-lm-tag">You are welcome! I am happy to hear that this tutorial was useful to you.</p></div> </div></li></ul></li><li class="comment even thread-odd thread-alt depth-1" id="comment-1135767"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Anonymous</span> <a class="comment_permalink" href="#comment-1135767" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">February 28, 2015, 10:00</span></div><div class="comment_text" id="comment-body-1135767"><p class="cye-lm-tag">Hi Petri,</p><p class="cye-lm-tag">Your blog is awesome and providing good amount of unit and integration testing.</p></div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-1136803"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span> <a class="comment_permalink" href="#comment-1136803" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">March 1, 2015, 10:08</span></div><div class="comment_text" id="comment-body-1136803"><p class="cye-lm-tag">Thank you for your kind words! I really appreciate them.</p></div> </div></li></ul></li><li class="comment even thread-even depth-1" id="comment-1137805"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">matt</span> <a class="comment_permalink" href="#comment-1137805" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">March 2, 2015, 10:57</span></div><div class="comment_text" id="comment-body-1137805"><p class="cye-lm-tag">Hello, Petri.<br> Nice tutorial, but what should I do if I have an @ImportResource annotation in my Controller (for example @ImportResource(“classpath:controllerContext.xml”) where controllerContext.xml contains the same context as I use in testing) ? Everything is ok if I’ve got it, tests work nice, but when I delete it, tests do not pass due to<br> java.lang.AssertionError: Content type not set<br> at org.springframework.test.util.AssertionErrors.fail(AssertionErrors.java:39)<br> My controller needs @ImportResource to get configuration, without it I’ve got<br> org.springframework.beans.factory.BeanCreationException<br> Thanks.</p></div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-1140160"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span> <a class="comment_permalink" href="#comment-1140160" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">March 4, 2015, 20:40</span></div><div class="comment_text" id="comment-body-1140160"><p class="cye-lm-tag">Why you added the <code>@ImportResource</code> annotation to your controller class instead of your application context configuration class? The reason why I ask this is that typically that annotation is used to import XML configuration files from application context configuration classes (<code>@Configuration</code> classes).</p><p class="cye-lm-tag">Unfortunately it is kind of hard to give you a better answer without seeing your code, but it seems that the problem is somehow related to the way you configure your application / tests. If you can share your application context configuration classes, XML configuration files, and your test class, I can probably give you a better answer.</p></div> </div></li></ul></li><li class="comment even thread-odd thread-alt depth-1" id="comment-1177309"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Johan</span> <a class="comment_permalink" href="#comment-1177309" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">April 8, 2015, 23:53</span></div><div class="comment_text" id="comment-body-1177309"><p class="cye-lm-tag">Hi Petri,</p><p class="cye-lm-tag">Thank you for this truly outstanding article. And the followup looks even better! Will have continue studying that one soon.</p><p class="cye-lm-tag">I am relatively new with Spring and Spring MVC (somewhat less with Java, but still..), so please don’t shoot me if this is a stupid question.</p><p class="cye-lm-tag">You explained how to setup the test context config using the standalone configuration and reusing (part of) the “production” WebApplicationContext.</p><p class="cye-lm-tag">Now, in a test project I had configured a service bean, used by 2 controllers. This bean is defined in my WebConfig (WebMvcConfigurerAdapter) class (maybe that’s not a good idea?).</p><p class="cye-lm-tag">As I wanted to use a mock version of those services, I was thinking of a way to solve this and I came up with a variation on your idea to point to both the existing WebConfig and an additional test config.</p><p class="cye-lm-tag">It looks like this:</p><ul><li>in the test classes I don’t refer to the existing WebConfig, but to a TestContext class <code>@ContextConfiguration(classes=TestContext.class)</code></li><li>this TestContext class extends the existing WebConfig and overrides the service bean with a mock version.</li></ul><pre><code>
@Configuration
public class TestContext extends WebConfig
{
     @Bean
    @Override
    public ProductManager productManager() {
        return Mockito.mock(ProductManager.class);
    }
}
</code>
</pre><p class="cye-lm-tag">My tests seems to be working fine.</p><p class="cye-lm-tag">Do you think this an acceptable approach?</p><p class="cye-lm-tag">Thank you for your reply.</p><p class="cye-lm-tag">Best regards,<br> Johan</p><p class="cye-lm-tag"><strong>I changed the formatting a bit so that your question looks “better” – Petri</strong></p></div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-1177330"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span> <a class="comment_permalink" href="#comment-1177330" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">April 9, 2015, 00:30</span></div><div class="comment_text" id="comment-body-1177330"><p class="cye-lm-tag">Hi Johan,</p><p class="cye-lm-tag">Thank you for your kind words. I really appreciate them!</p><p class="cye-lm-tag">If you want to use the <code>WebApplicationContext</code> based setup, I recommend that you divide your application configuration context configuration in a such way that the <code>@Configuration</code> class which configures the web layer configures only the beans that belong to the web layer.</p><p class="cye-lm-tag">If you don’t do this, replacing the service beans with mocks becomes a bit “messy”. In your case this is not a huge problem because you can extend the <code>WebConfig</code> class and override its <code>@Bean</code> methods. However, if you would have used the <code>@ComponentScan</code> annotation to scan the service beans, you would be in trouble.</p><p class="cye-lm-tag">In other words, you might want to use the following setup:</p><ul><li>The <code>WebConfig</code> class configures only the web layer.</li><li>The <code>ServiceConfig</code> class (awful name, don’t use this) class configures the service beans.</li><li>The <code>TestServiceConfig</code> class configures the required mock service beans.</li></ul><p class="cye-lm-tag">Now you can create a simple application context configuration class that looks as follows:</p><pre><code>
@Configuration
@Import({TestServiceConfig.class, WebConfig.class})
public class TestContext {
}
</code>
</pre><p class="cye-lm-tag">As you can see, this class simply imports the required application context configuration classes and you are good to go. What do you think about this approach?</p><p class="cye-lm-tag">Also, I don’t use the <code>WebApplicationContext</code> based setup in my unit tests anymore. I realized that creating mock beans becomes pain in the ass if you have to mock “many” service beans. If you use the <code>WebApplicationContext</code> based setup, you have to remember to add your mock beans to the <code>TestServiceConfig</code> class or your tests will fail.</p><p class="cye-lm-tag">That is why I use standalone configuration for unit tests and <code>WebApplicationContext</code> based configuration for integration tests.</p></div> </div><ul class="children"><li class="comment even depth-3" id="comment-1177989"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Johan</span> <a class="comment_permalink" href="#comment-1177989" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">April 9, 2015, 21:17</span></div><div class="comment_text" id="comment-body-1177989"><p class="cye-lm-tag">Hi Petri,</p><p class="cye-lm-tag">Thank you very much for your answer, which makes more than a lot of sense.<br> I will certainly take your advice at heart in order to avoid any unnecessary pain in the ass. ;-)</p><p class="cye-lm-tag">I wish I had more time to investigate your blog, you seem to procure mind blowing articles!<br> …well, maybe one article a day… ;-)</p><p class="cye-lm-tag">Thanks again and best regards,</p></div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-4" id="comment-1178051"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span> <a class="comment_permalink" href="#comment-1178051" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">April 9, 2015, 22:56</span></div><div class="comment_text" id="comment-body-1178051"><p class="cye-lm-tag">Hi Johan,</p><p class="cye-lm-tag">You are welcome. I am happy to hear that my answer was useful to you. Also, if you have any other questions, don’t hesitate to ask them.</p><p class="cye-lm-tag">All the best.</p></div> </div></li></ul></li></ul></li></ul></li><li class="comment even thread-even depth-1" id="comment-1209816"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Luis</span> <a class="comment_permalink" href="#comment-1209816" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">May 22, 2015, 22:33</span></div><div class="comment_text" id="comment-body-1209816"><p class="cye-lm-tag">Hi, have a good day.</p><p class="cye-lm-tag">I have a project that uses xhtml files i meke a war file, but i don’t use spring, i use jsf. I would like to know if i can use your example to test my project.</p><p class="cye-lm-tag">Thanks!!</p></div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-1209848"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span> <a class="comment_permalink" href="#comment-1209848" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">May 22, 2015, 23:24</span></div><div class="comment_text" id="comment-body-1209848"><p class="cye-lm-tag">Unfortunately you cannot use Spring MVC Test if you are writing tests for a JSF application. Check out <a href="http://jsfunit.jboss.org/" target="_blank" rel="nofollow">JSFUnit</a> and <a href="http://arquillian.org/" target="_blank" rel="nofollow">Arquillian</a>. Also, you might want to read a blog post titled: <a href="http://lukas.fryc.eu/blog/2013/01/richfaces-testing.html" target="_blank" rel="nofollow">Testing JSF and RichFaces with Arquillian – Part I – Used Technologies</a> (check out the other parts as well).</p></div> </div></li></ul></li><li class="comment even thread-odd thread-alt depth-1" id="comment-1224492"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">jadhav prashant</span> <a class="comment_permalink" href="#comment-1224492" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">June 12, 2015, 08:47</span></div><div class="comment_text" id="comment-body-1224492"><p class="cye-lm-tag">hey i got error on TodoService in TodoController class  please resolve it sir</p></div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-1224503"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span> <a class="comment_permalink" href="#comment-1224503" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">June 12, 2015, 09:18</span></div><div class="comment_text" id="comment-body-1224503"><p class="cye-lm-tag">What kind of an error do you get?</p></div> </div><ul class="children"><li class="comment even depth-3" id="comment-1224612"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">prashant</span> <a class="comment_permalink" href="#comment-1224612" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">June 12, 2015, 14:45</span></div><div class="comment_text" id="comment-body-1224612"><p class="cye-lm-tag">can not resolved the type of TodoService sir</p></div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-4" id="comment-1224634"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span> <a class="comment_permalink" href="#comment-1224634" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">June 12, 2015, 15:17</span></div><div class="comment_text" id="comment-body-1224634"><p class="cye-lm-tag">Ah. The <a href="https://github.com/pkainulainen/spring-mvc-test-examples/blob/master/controllers-unittest/src/main/java/net/petrikainulainen/spring/testmvc/todo/service/TodoService.java" target="_blank" rel="nofollow"><code>TodoService</code></a> interface declares service methods that provide CRUD operations for todo entries. Also, you can <a href="https://github.com/pkainulainen/spring-mvc-test-examples/tree/master/controllers-unittest" target="_blank" rel="nofollow">get the example application of this blog post from Github</a>.</p></div> </div></li></ul></li></ul></li></ul></li><li class="comment even thread-even depth-1" id="comment-1224655"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">peter</span> <a class="comment_permalink" href="#comment-1224655" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">June 12, 2015, 16:17</span></div><div class="comment_text" id="comment-body-1224655"><p class="cye-lm-tag">getting null pointer exception at</p><pre><code>
mockMvc.perform(MockMvcRequestBuilders.get("/Login"))
	.andExpect(status().isOk())
	.andExpect(view().name("Login"))
	.andExpect(forwardedUrl("/WEB-INF/pages/Login.jsp"));
</code>
</pre></div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-1224752"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span> <a class="comment_permalink" href="#comment-1224752" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">June 12, 2015, 19:56</span></div><div class="comment_text" id="comment-body-1224752"><p class="cye-lm-tag">Did you create the <code>mockMvc</code> object by using application context based configuration or standalone configuration? Also, are you sure that it is not null?</p><p class="cye-lm-tag">If the <code>mockMvc</code> object is not null, you can the print the response (and the other relevant information) by using this code:</p><pre><code>
mockMvc.perform(MockMvcRequestBuilders.get(“/Login”))
	.andDo(print());
</code>
</pre><p class="cye-lm-tag">This should help you to solve your problem.</p></div> </div><ul class="children"><li class="comment even depth-3" id="comment-1226379"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">peter</span> <a class="comment_permalink" href="#comment-1226379" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">June 15, 2015, 07:24</span></div><div class="comment_text" id="comment-body-1226379"><p class="cye-lm-tag">hello petri,<br> Thank you for your replay but still I get the same eexception, yes I have created my mockMvc object ,Im very new to this concept I defenately know that I have missed something important, but not able to trace it out, and also please tell me that how can I know that mock object is null or not null<br> waiting for your response<br> Thanks</p><p class="cye-lm-tag">private MockMvc mockMvc;<br> public void setup() {<br> this.mockMvc = MockMvcBuilders.webAppContextSetup(wac).build();<br> }</p></div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-4" id="comment-1227498"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span> <a class="comment_permalink" href="#comment-1227498" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">June 16, 2015, 20:40</span></div><div class="comment_text" id="comment-body-1227498"><p class="cye-lm-tag">Can I see the stacktrace? I don’t know why your test throws NPE, and I suspect that the stacktrace could help me to figure out what is going on.</p></div> </div><ul class="children"><li class="comment even depth-5" id="comment-1235219"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Govardhan reddy</span> <a class="comment_permalink" href="#comment-1235219" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">June 30, 2015, 10:33</span></div><div class="comment_text" id="comment-body-1235219"><p class="cye-lm-tag">Hi Petri,<br> Your way of explanation is good , but<br> The first application configuration class is called ExampleApplicationContext and it is the “main” configuration class of our application.</p><p class="cye-lm-tag">The third configuration class is called PersistenceContext and it contains the persistence configuration of our application.<br> I have doubt about above two sentences<br> Where is the source code about ExampleApplicationContext  and PersistenceContext</p></div></div></li><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-5" id="comment-1235224"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span> <a class="comment_permalink" href="#comment-1235224" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">June 30, 2015, 10:47</span></div><div class="comment_text" id="comment-body-1235224"><p class="cye-lm-tag">Hi,</p><p class="cye-lm-tag">You can <a href="https://github.com/pkainulainen/spring-mvc-test-examples/tree/master/controllers-unittest" target="_blank" rel="nofollow">get the source code from Github</a>.</p></div></div></li></ul></li></ul></li></ul></li></ul></li><li class="comment even thread-odd thread-alt depth-1" id="comment-1248458"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">ArunM</span> <a class="comment_permalink" href="#comment-1248458" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">July 29, 2015, 09:25</span></div><div class="comment_text" id="comment-body-1248458"><p class="cye-lm-tag">Hi Petri,</p><p class="cye-lm-tag"> Thanks for the brilliant tutorial. In addition to learning more about Spring MVC testing, this blog has helped to learn more about the user of Mockito and Hamcrest as well.</p><p class="cye-lm-tag">Regards,<br> ArunM</p></div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-1248521"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span> <a class="comment_permalink" href="#comment-1248521" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">July 29, 2015, 14:09</span></div><div class="comment_text" id="comment-body-1248521"><p class="cye-lm-tag">You are welcome! I am happy to hear that my Spring MVC Test tutorial was useful to you.</p></div> </div></li></ul></li><li class="comment even thread-even depth-1" id="comment-1264623"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Ankit</span> <a class="comment_permalink" href="#comment-1264623" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">September 1, 2015, 09:51</span></div><div class="comment_text" id="comment-body-1264623"><p class="cye-lm-tag">getting problem while testing and the error is autowiring dependency injection problem for the test class I wrote…….</p><p class="cye-lm-tag">provide some solution…..<br> thankyou</p></div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-1264648"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span> <a class="comment_permalink" href="#comment-1264648" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">September 1, 2015, 11:22</span></div><div class="comment_text" id="comment-body-1264648"><p class="cye-lm-tag">I need to see the stack trace before I can figure out what is wrong. Can you add it into a new comment?</p></div> </div></li></ul></li><li class="comment even thread-odd thread-alt depth-1" id="comment-1283324"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Gaetano</span> <a class="comment_permalink" href="#comment-1283324" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">October 8, 2015, 16:12</span></div><div class="comment_text" id="comment-body-1283324"><p class="cye-lm-tag">Hi Petri,</p><p class="cye-lm-tag">I’m trying to test my controller using the Standalone approach but I’m struggling injecting MessageSource.</p><p class="cye-lm-tag">In my case the controller does not use “constructor injection”. MessageSource is injected via  setter injection.</p><p class="cye-lm-tag">my controller looks like:</p><pre><code>
@Controller
public class MyController {
	@Autowired
	private WebUserService webUserService;
	
	@Autowired
	private MessageSource messageSource;

}
</code>
</pre></div> </div><ul class="children"><li class="comment odd alt depth-2" id="comment-1283325"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Anonymous</span> <a class="comment_permalink" href="#comment-1283325" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">October 8, 2015, 16:14</span></div><div class="comment_text" id="comment-body-1283325"><p class="cye-lm-tag">…sorry I hit submit by mistake<br> anyway how my standalone test configuration should be in order to inject the MessageSource ?</p><p class="cye-lm-tag">Thanks<br> Gaetano</p></div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-3" id="comment-1283336"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span> <a class="comment_permalink" href="#comment-1283336" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">October 8, 2015, 16:38</span></div><div class="comment_text" id="comment-body-1283336"><p class="cye-lm-tag">Hi,</p><p class="cye-lm-tag">If you use setter injection, you can simple create the controller object and invoke the correct setter. The <code>setUp()</code> method, which uses this approach, looks as follows:</p><pre><code>
@Before
public void setUp() {
	MessageSource messageSource = ... //create MessageSource
	TestedController controller = new TestedController();
	controller.setMessageSource(messageSource)
		
	mockMvc = MockMvcBuilders.standaloneSetup(controller).build();
}
</code>
</pre><p class="cye-lm-tag">However, the code you pasted uses field injection. In this case you need to “inject” the <code>MessageSource</code> object by using a utility class called <code>ReflectionTestUtils</code>. The <code>setUp()</code> method, which injects the <code>MessageSource</code> object by using that utility class, looks as follows:</p><pre><code>
@Before
public void setUp() {
	MessageSource messageSource = ... //create MessageSource
	TestedController controller = new TestedController();
	ReflectionTestUtils.setField(controller, "messageSource", messageSource);
		
	mockMvc = MockMvcBuilders.standaloneSetup(controller).build();
}
</code>
</pre><p class="cye-lm-tag">If you have any additional questions, don’t hesitate to ask them.</p></div> </div><ul class="children"><li class="comment odd alt depth-4" id="comment-1283352"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Gaetano</span> <a class="comment_permalink" href="#comment-1283352" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">October 8, 2015, 17:19</span></div><div class="comment_text" id="comment-body-1283352"><p class="cye-lm-tag">Hi Petri,<br> Thanks a lot for your help – it worked<br> You might hear from me in a couple of days, when I’ll try to tackle the approach based on WebApplicationContext  :)<br> Regards<br> Gaetano</p></div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-5" id="comment-1283440"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span> <a class="comment_permalink" href="#comment-1283440" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">October 8, 2015, 19:47</span></div><div class="comment_text" id="comment-body-1283440"><p class="cye-lm-tag">You are welcome! Also, it will be fun to see what I forgot to mention in this rather old blog post ;)</p></div></div></li></ul></li></ul></li></ul></li></ul></li><li class="comment odd alt thread-even depth-1" id="comment-1407360"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Nitesh Kumar N</span> <a class="comment_permalink" href="#comment-1407360" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">April 1, 2016, 11:04</span></div><div class="comment_text" id="comment-body-1407360"><p class="cye-lm-tag">how to overcome the  circular view path exception, because I have my uri and the return type string are the same.<br> @RequestMapping(value = “newemployee”, method = RequestMethod.GET)<br> public ModelAndView newEmployeeGet(HttpServletRequest request) {<br> String ss = “[\”1-1-2016\”,\”2-1-2016\”,\”3-1-2016\”,\”4-1-2016\”,\”5-1-2016\”,\”6-1-2016\”,\”7-1-2016\”,\”8-1-2016\”]”;<br> map.put(“holidays”, ss.toString());<br> return new ModelAndView(prefixResult + “newemployee”, map);<br> }</p><p class="cye-lm-tag">cannot be changing the methods now. But I have to do something to get rid of this circular view path exception. How do I do it.</p></div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-1407689"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span> <a class="comment_permalink" href="#comment-1407689" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">April 1, 2016, 19:11</span></div><div class="comment_text" id="comment-body-1407689"><p class="cye-lm-tag">Check out this <a href="http://stackoverflow.com/a/18815059/313554" target="_blank" rel="nofollow">StackOverflow answer</a>. It provides a good description of this problem.</p><p class="cye-lm-tag">Unfortunately I am not sure how you can fix this because I am not sure what you want to do. Do you want to redirect the request to another controller method or do you simple want to render a view? If you want to render a view, what view technology are you using?</p></div> </div></li></ul></li><li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1454445"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Prakash Boda</span> <a class="comment_permalink" href="#comment-1454445" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">June 9, 2016, 18:41</span></div><div class="comment_text" id="comment-body-1454445"><p class="cye-lm-tag">Hi Petri,</p><p class="cye-lm-tag">I found your post very useful. I am trying to test my REST APIs using Spring test + Mockito as you suggested. I am trying using standAloneSetup method. But some of my DTO classes have date field and for same I am using JSON serializer for converting it into my desired format. Usually this format comes from our properties file and I have fetched format from properties file as below.<br> public class CustomDateSerializer<br> extends JsonSerializer {<br> @Value(“${dateFormat}”)<br> private String dateFormat;<br> @Value(“${timeFormat}”)<br> private String timeFormat;</p><p class="cye-lm-tag">so in run time it gets properties file in class path fetches format properly but while running test it is not able fetch OR may be expression is not even getting evaluated so its getting format fields null and it fails request to status 500.</p><p class="cye-lm-tag">How can I resolve this issue?</p></div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-1456096"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span> <a class="comment_permalink" href="#comment-1456096" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">June 13, 2016, 13:49</span></div><div class="comment_text" id="comment-body-1456096"><p class="cye-lm-tag">Hi,</p><p class="cye-lm-tag">Have you configured the <code>MappingJackson2HttpMessageConverter</code> object and provided it to the created <code>MockMvc</code> object? If you haven’t done this, you should give it a shot. If you don’t know how you configure the <code>MappingJackson2HttpMessageConverter</code> object, <a href="/programming/testing/writing-clean-tests-it-starts-from-the-configuration/" rel="nofollow">take a look at this blog post</a>.</p></div> </div></li></ul></li><li class="comment odd alt thread-even depth-1" id="comment-1486550"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag"><a href="http://javabycode.com/java-frameworks/servlet-jsp/java-servlet-tutorial-java-servlet-example.html" rel="external nofollow" class="url">Java Servlet Tutorial</a></span> <a class="comment_permalink" href="#comment-1486550" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">September 13, 2016, 19:51</span></div><div class="comment_text" id="comment-body-1486550"><p class="cye-lm-tag">Great tutorial, keep going on!</p></div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-1488625"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span> <a class="comment_permalink" href="#comment-1488625" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">September 19, 2016, 18:26</span></div><div class="comment_text" id="comment-body-1488625"><p class="cye-lm-tag">Thanks!</p></div> </div></li></ul></li></ul><div id="respond"><div id="commentform"><form method="post" action="https://www.petrikainulainen.net/wp-comments-post.php"><p class="comment_form_title cye-lm-tag">Leave a Comment</p><p id="comment_form_name" class="cye-lm-tag"> <input type="text" id="author" class="input_text" name="author" value="" placeholder="Name (required)" tabindex="1"></p><p id="comment_form_email" class="cye-lm-tag"> <input type="text" id="email" class="input_text" name="email" value="" placeholder="Email (not required)" tabindex="2"></p><p id="comment_form_url" class="cye-lm-tag"> <input type="text" id="url" class="input_text" name="url" value="" placeholder="Website (not required)" tabindex="3"></p><p id="comment_form_comment" class="cye-lm-tag"><textarea name="comment" id="comment" class="input_text" tabindex="4" rows="6"></textarea></p><p id="comment_form_submit" class="cye-lm-tag"> <input type="submit" id="submit" class="input_submit" name="submit" tabindex="5" value="Submit"></p> <a rel="nofollow" id="cancel-comment-reply-link" href="/programming/spring-framework/unit-testing-of-spring-mvc-controllers-configuration/#respond" style="display:none;">Cancel</a><p style="display: none;" class="cye-lm-tag"><input type="hidden" id="akismet_comment_nonce" name="akismet_comment_nonce" value="6b1cbf0433"></p><p style="display: none;" class="cye-lm-tag"></p><input type="hidden" name="comment_post_ID" value="5693" id="comment_post_ID"> <input type="hidden" name="comment_parent" id="comment_parent" value="0"></form><input type="hidden" id="ak_js" name="ak_js" value="1489765063028"></div></div> </section>

</body>
</html>