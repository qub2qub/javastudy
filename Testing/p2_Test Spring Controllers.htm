<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<title>p2_Testing Spring Controllers</title>
    <link rel="stylesheet" href="../Guides/grey.css">
    <style type="text/css">
    	div.comment-container {
    		border: 1px solid #920000;
    	}
    </style>
</head>
<body>
<a href="https://www.petrikainulainen.net/programming/spring-framework/unit-testing-of-spring-mvc-controllers-normal-controllers">Unit Testing of Spring MVC Controllers: “Normal” Controllers</a>
<div class="post_content" itemprop="articleBody"><p class="cye-lm-tag">The first part of this tutorial described how we can <a href="http://www.petrikainulainen.net/programming/spring-framework/unit-testing-of-spring-mvc-controllers-configuration/">configure our unit tests</a> which use the Spring MVC Test framework.</p>


<p class="cye-lm-tag">Now it is time to get our hands dirty and learn how we can write unit tests for “normal” controllers.</p>

<p class="cye-lm-tag">The obvious next question is</p>
<blockquote><p class="cye-lm-tag">What is a normal controller?</p>
</blockquote><p class="cye-lm-tag">Well, a normal controller (in the context of this blog post) is a controller which either renders a view or handles form submissions.</p>
<p class="cye-lm-tag">Let’s get started.</p>
<div class="note"> I recommend that you read the <a href="http://www.petrikainulainen.net/programming/spring-framework/unit-testing-of-spring-mvc-controllers-configuration/">first part of this tutorial</a> before reading this blog post (If you have already read it, you are allowed to continue reading)</div><h2>Getting The Required Dependencies with Maven</h2><p class="cye-lm-tag">We can get the required testing dependencies by adding the following dependency declarations to the POM file of our example application:</p>
<ul><li>Jackson 2.2.1 (core and databind modules). We use Jackson to transform objects into url encoded <em>String</em> objects.</li><li>Hamcrest 1.3. We use Hamcrest matchers when we are writing assertions for the responses.</li><li>JUnit 4.11 (exclude the hamcrest-core dependency).</li><li>Mockito 1.9.5</li><li>Spring Test 3.2.3.RELEASE</li></ul><p class="cye-lm-tag">The relevant part of our <em>pom.xml</em> file looks as follows:</p>
<div><div id="highlighter_793357" class="syntaxhighlighter  xml"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div>
<div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div class="line number23 index22 alt2">23</div><div class="line number24 index23 alt1">24</div><div class="line number25 index24 alt2">25</div><div class="line number26 index25 alt1">26</div><div class="line number27 index26 alt2">27</div><div class="line number28 index27 alt1">28</div><div class="line number29 index28 alt2">29</div><div class="line number30 index29 alt1">30</div>
<div class="line number31 index30 alt2">31</div><div class="line number32 index31 alt1">32</div><div class="line number33 index32 alt2">33</div><div class="line number34 index33 alt1">34</div><div class="line number35 index34 alt2">35</div><div class="line number36 index35 alt1">36</div><div class="line number37 index36 alt2">37</div><div class="line number38 index37 alt1">38</div><div class="line number39 index38 alt2">39</div><div class="line number40 index39 alt1">40</div><div class="line number41 index40 alt2">41</div><div class="line number42 index41 alt1">42</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="xml plain">&lt;</code><code class="xml keyword">dependency</code><code class="xml plain">&gt;</code></div><div class="line number2 index1 alt1"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">groupId</code><code class="xml plain">&gt;com.fasterxml.jackson.core&lt;/</code><code class="xml keyword">groupId</code>
<code class="xml plain">&gt;</code></div><div class="line number3 index2 alt2"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">artifactId</code><code class="xml plain">&gt;jackson-core&lt;/</code><code class="xml keyword">artifactId</code><code class="xml plain">&gt;</code></div><div class="line number4 index3 alt1"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">version</code><code class="xml plain">&gt;2.2.1&lt;/</code><code class="xml keyword">version</code><code class="xml plain">&gt;</code></div><div class="line number5 index4 alt2"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">scope</code><code class="xml plain">&gt;test&lt;/</code><code class="xml keyword">scope</code><code class="xml plain">&gt;</code></div><div class="line number6 index5 alt1"><code class="xml plain">&lt;/</code><code class="xml keyword">dependency</code><code class="xml plain">&gt;</code></div><div class="line number7 index6 alt2"><code class="xml plain">&lt;</code><code class="xml keyword">dependency</code><code class="xml plain">&gt;</code></div><div class="line number8 index7 alt1"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">groupId</code><code class="xml plain">&gt;com.fasterxml.jackson.core&lt;/</code><code class="xml keyword">groupId</code><code class="xml plain">&gt;</code></div><div class="line number9 index8 alt2"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">artifactId</code><code class="xml plain">&gt;jackson-databind&lt;/</code><code class="xml keyword">artifactId</code><code class="xml plain">&gt;</code></div><div class="line number10 index9 alt1"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">version</code><code class="xml plain">&gt;2.2.1&lt;/</code><code class="xml keyword">version</code><code class="xml plain">&gt;</code></div><div class="line number11 index10 alt2"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">scope</code><code class="xml plain">&gt;test&lt;/</code><code class="xml keyword">scope</code><code class="xml plain">&gt;</code></div><div class="line number12 index11 alt1"><code class="xml plain">&lt;/</code><code class="xml keyword">dependency</code><code class="xml plain">&gt;</code></div><div class="line number13 index12 alt2"><code class="xml plain">&lt;</code><code class="xml keyword">dependency</code><code class="xml plain">&gt;</code></div><div class="line number14 index13 alt1"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">groupId</code><code class="xml plain">&gt;org.hamcrest&lt;/</code><code class="xml keyword">groupId</code><code class="xml plain">&gt;</code></div><div class="line number15 index14 alt2"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">artifactId</code><code class="xml plain">&gt;hamcrest-all&lt;/</code><code class="xml keyword">artifactId</code><code class="xml plain">&gt;</code></div><div class="line number16 index15 alt1"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">version</code><code class="xml plain">&gt;1.3&lt;/</code><code class="xml keyword">version</code><code class="xml plain">&gt;</code></div><div class="line number17 index16 alt2"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">scope</code><code class="xml plain">&gt;test&lt;/</code><code class="xml keyword">scope</code><code class="xml plain">&gt;</code></div><div class="line number18 index17 alt1"><code class="xml plain">&lt;/</code><code class="xml keyword">dependency</code><code class="xml plain">&gt;</code></div><div class="line number19 index18 alt2"><code class="xml plain">&lt;</code><code class="xml keyword">dependency</code><code class="xml plain">&gt;</code></div><div class="line number20 index19 alt1"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">groupId</code><code class="xml plain">&gt;junit&lt;/</code><code class="xml keyword">groupId</code><code class="xml plain">&gt;</code></div><div class="line number21 index20 alt2"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">artifactId</code><code class="xml plain">&gt;junit&lt;/</code><code class="xml keyword">artifactId</code><code class="xml plain">&gt;</code></div><div class="line number22 index21 alt1"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">version</code>
<code class="xml plain">&gt;4.11&lt;/</code><code class="xml keyword">version</code><code class="xml plain">&gt;</code></div><div class="line number23 index22 alt2"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">scope</code><code class="xml plain">&gt;test&lt;/</code><code class="xml keyword">scope</code><code class="xml plain">&gt;</code></div><div class="line number24 index23 alt1"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">exclusions</code><code class="xml plain">&gt;</code></div><div class="line number25 index24 alt2"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">exclusion</code><code class="xml plain">&gt;</code></div><div class="line number26 index25 alt1"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">artifactId</code><code class="xml plain">&gt;hamcrest-core&lt;/</code><code class="xml keyword">artifactId</code><code class="xml plain">&gt;</code></div><div class="line number27 index26 alt2"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">groupId</code><code class="xml plain">&gt;org.hamcrest&lt;/</code><code class="xml keyword">groupId</code><code class="xml plain">&gt;</code></div><div class="line number28 index27 alt1"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;/</code><code class="xml keyword">exclusion</code><code class="xml plain">&gt;</code></div><div class="line number29 index28 alt2"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;/</code><code class="xml keyword">exclusions</code><code class="xml plain">&gt;</code></div><div class="line number30 index29 alt1"><code class="xml plain">&lt;/</code><code class="xml keyword">dependency</code><code class="xml plain">&gt;</code></div><div class="line number31 index30 alt2"><code class="xml plain">&lt;</code><code class="xml keyword">dependency</code><code class="xml plain">&gt;</code></div><div class="line number32 index31 alt1"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">groupId</code><code class="xml plain">&gt;org.mockito&lt;/</code><code class="xml keyword">groupId</code><code class="xml plain">&gt;</code></div><div class="line number33 index32 alt2"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">artifactId</code><code class="xml plain">&gt;mockito-core&lt;/</code>
<code class="xml keyword">artifactId</code><code class="xml plain">&gt;</code></div><div class="line number34 index33 alt1"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">version</code><code class="xml plain">&gt;1.9.5&lt;/</code><code class="xml keyword">version</code><code class="xml plain">&gt;</code></div><div class="line number35 index34 alt2"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">scope</code><code class="xml plain">&gt;test&lt;/</code><code class="xml keyword">scope</code><code class="xml plain">&gt;</code></div><div class="line number36 index35 alt1"><code class="xml plain">&lt;/</code><code class="xml keyword">dependency</code><code class="xml plain">&gt;</code></div><div class="line number37 index36 alt2"><code class="xml plain">&lt;</code><code class="xml keyword">dependency</code><code class="xml plain">&gt;</code></div><div class="line number38 index37 alt1"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">groupId</code><code class="xml plain">&gt;org.springframework&lt;/</code><code class="xml keyword">groupId</code><code class="xml plain">&gt;</code></div><div class="line number39 index38 alt2"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">artifactId</code><code class="xml plain">&gt;spring-test&lt;/</code><code class="xml keyword">artifactId</code><code class="xml plain">&gt;</code></div><div class="line number40 index39 alt1"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">version</code><code class="xml plain">&gt;3.2.3.RELEASE&lt;/</code><code class="xml keyword">version</code><code class="xml plain">&gt;</code></div><div class="line number41 index40 alt2"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">scope</code><code class="xml plain">&gt;test&lt;/</code><code class="xml keyword">scope</code><code class="xml plain">&gt;</code></div><div class="line number42 index41 alt1"><code class="xml plain">&lt;/</code><code class="xml keyword">dependency</code><code class="xml plain">&gt;</code></div></div></td></tr></tbody></table></div></div><p class="cye-lm-tag">Let’s move on and find out how we can write unit tests for Spring MVC controllers by using the Spring MVC Test framework.</p>
<p class="cye-lm-tag"></p>
<h2 id="writing-unit-tests">Writing Unit Tests for Controller Methods</h2><p class="cye-lm-tag">Every unit test which we write to test the behavior of a controller method consists of these steps:</p>
<ol><li>We send a request to the tested controller method.</li><li>We verify that we received the expected response.</li></ol><p class="cye-lm-tag">The Spring MVC Test framework has a few “core” classes which we can use for implementing these steps in our tests. These classes are described in the following:</p>
<ul><li>We can build our requests by using the static methods of the <a href="http://static.springsource.org/spring/docs/3.2.x/javadoc-api/org/springframework/test/web/servlet/request/MockMvcRequestBuilders.html" target="_blank"><em>MockMvcRequestBuilders</em></a> class. Or to be more specific, we can create <a href="http://static.springsource.org/spring/docs/3.2.x/javadoc-api/org/springframework/test/web/servlet/RequestBuilder.html" target="_blank">request builders</a> which are then passed as a method parameter to the method which executes the actual request.</li><li>The <a href="http://static.springsource.org/spring/docs/3.2.x/javadoc-api/org/springframework/test/web/servlet/MockMvc.html" target="_blank"><em>MockMvc</em></a> class is the main entry point of our tests. We can execute requests by calling its <em>perform(RequestBuilder requestBuilder)</em> method.</li><li>We can write assertions for the received response by using the static methods of the <a href="http://static.springsource.org/spring/docs/3.2.x/javadoc-api/org/springframework/test/web/servlet/result/MockMvcResultMatchers.html" target="_blank"><em>MockMvcResultMatchers</em></a> class.</li></ul>
<p class="cye-lm-tag">Next we will take a look at some examples which demonstrates how we can use these classes in our unit tests. We will write unit tests for the following controller methods:</p>
<ul><li>The first controller method renders a page which shows a list of todo entries.</li><li>The second controller method renders a page which shows the information of a single todo entry.</li><li>The third controller method handles form submissions of the form which is used to add new todo entries to the database.</li></ul><h3>Rendering The Todo Entry List Page</h3><p class="cye-lm-tag">Let’s start by taking a look at the implementation of the controller method which is used to render the todo entry list page.</p>
<h4>Excpected Behavior</h4><p class="cye-lm-tag">The implementation of the controller method which is used to show the information of all todo entries has the following steps:</p>
<ol><li>It processes <em>GET</em> requests send to url ‘/’.</li><li>It gets the todo entries by calling the <em>findAll()</em> method of the <em>TodoService</em> interface. This method returns a list of <em>Todo</em> objects.</li><li>It adds the received list to the model.</li><li>It returns the name of the rendered view.</li></ol><p class="cye-lm-tag">The relevant part of the <em>TodoController</em> class looks as follows:</p>
<div><div id="highlighter_980489" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.stereotype.Controller;</code></div><div class="line number2 index1 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.ui.Model;</code></div><div class="line number3 index2 alt2"><code class="java keyword">import</code> <code class="java plain">
org.springframework.web.bind.annotation.*;</code></div><div class="line number4 index3 alt1"><code class="java keyword">import</code> <code class="java plain">java.util.List;</code></div><div class="line number5 index4 alt2">&nbsp;</div><div class="line number6 index5 alt1"><code class="java color1">@Controller</code></div><div class="line number7 index6 alt2"><code class="java keyword">public</code> <code class="java keyword">class</code> <code class="java plain">TodoController {</code></div><div class="line number8 index7 alt1">&nbsp;</div><div class="line number9 index8 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java keyword">final</code> <code class="java plain">TodoService service;</code></div><div class="line number10 index9 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number11 index10 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@RequestMapping</code><code class="java plain">(value = </code><code class="java string">"/"</code><code class="java plain">, method = RequestMethod.GET)</code></div><div class="line number12 index11 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java plain">String findAll(Model model) {</code></div><div class="line number13 index12 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">List&lt;Todo&gt; models = service.findAll();</code></div><div class="line number14 index13 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">model.addAttribute(</code><code class="java string">"todos"</code><code class="java plain">, models);</code></div><div class="line number15 index14 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">return</code> <code class="java string">"todo/list"</code><code class="java plain">;</code></div><div class="line number16 index15 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number17 index16 alt2"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><p class="cye-lm-tag">We are now ready to write an unit test for this method. Let’s see how we can do it.</p>
<h4>Test: Todo Entries Are Found</h4><p class="cye-lm-tag">We can write an unit test for this controller method by following steps:</p>
<ol><li>Create the test data which is returned when our service method is called. We use a concept called <a href="http://www.natpryce.com/articles/000714.html" target="_blank">test data builder</a> when we are creating the test data for our test.</li><li>Configure the used mock object to return the created test data when its <em>findAll()</em> method is called.</li><li>Execute a <em>GET</em> request to url ‘/’.</li><li>Ensure that the HTTP status code 200 is returned.</li><li>Ensure that the name of the returned view is ‘todo/list’.</li><li>Ensure that the request is forwarded to url ‘/WEB-INF/jsp/todo/list.jsp’.</li><li>Ensure that model attribute called <em>todos</em> has two items in it.</li><li>Ensure that the model attribute called <em>todos</em> contains the correct items.</li><li>Verify that the <em>findAll()</em> method of our mock object was called only once.</li><li>Ensure that other methods of the mock object were not called during the test.</li></ol><p class="cye-lm-tag">The source code of our unit test looks as follows:</p>
<div><div id="highlighter_729375" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div class="line number23 index22 alt2">23</div><div class="line number24 index23 alt1">24</div><div class="line number25 index24 alt2">25</div><div class="line number26 index25 alt1">26</div><div class="line number27 index26 alt2">27</div><div class="line number28 index27 alt1">28</div><div class="line number29 index28 alt2">29</div><div class="line number30 index29 alt1">30</div><div class="line number31 index30 alt2">31</div><div class="line number32 index31 alt1">32</div><div class="line number33 index32 alt2">33</div><div class="line number34 index33 alt1">34</div><div class="line number35 index34 alt2">35</div><div class="line number36 index35 alt1">36</div><div class="line number37 index36 alt2">37</div><div class="line number38 index37 alt1">38</div><div class="line number39 index38 alt2">39</div><div class="line number40 index39 alt1">40</div><div class="line number41 index40 alt2">41</div><div class="line number42 index41 alt1">42</div><div class="line number43 index42 alt2">43</div><div class="line number44 index43 alt1">44</div><div class="line number45 index44 alt2">45</div><div class="line number46 index45 alt1">46</div><div class="line number47 index46 alt2">47</div><div class="line number48 index47 alt1">48</div><div class="line number49 index48 alt2">49</div><div class="line number50 index49 alt1">50</div><div class="line number51 index50 alt2">51</div><div class="line number52 index51 alt1">52</div><div class="line number53 index52 alt2">53</div><div class="line number54 index53 alt1">54</div><div class="line number55 index54 alt2">55</div><div class="line number56 index55 alt1">56</div><div class="line number57 index56 alt2">57</div><div class="line number58 index57 alt1">58</div><div class="line number59 index58 alt2">59</div><div class="line number60 index59 alt1">60</div><div class="line number61 index60 alt2">61</div><div class="line number62 index61 alt1">62</div><div class="line number63 index62 alt2">63</div><div class="line number64 index63 alt1">64</div><div class="line number65 index64 alt2">65</div><div class="line number66 index65 alt1">66</div><div class="line number67 index66 alt2">67</div><div class="line number68 index67 alt1">68</div><div class="line number69 index68 alt2">69</div><div class="line number70 index69 alt1">70</div><div class="line number71 index70 alt2">71</div><div class="line number72 index71 alt1">72</div><div class="line number73 index72 alt2">73</div><div class="line number74 index73 alt1">74</div><div class="line number75 index74 alt2">75</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">import</code> <code class="java plain">org.junit.Before;</code></div><div class="line number2 index1 alt1"><code class="java keyword">import</code> <code class="java plain">org.junit.Test;</code></div><div class="line number3 index2 alt2"><code class="java keyword">import</code> <code class="java plain">org.junit.runner.RunWith;</code></div><div class="line number4 index3 alt1"><code class="java keyword">import</code> <code class="java plain">org.mockito.Mockito;</code></div><div class="line number5 index4 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.beans.factory.annotation.Autowired;</code></div><div class="line number6 index5 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.test.context.ContextConfiguration;</code></div><div class="line number7 index6 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</code></div><div class="line number8 index7 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.test.context.web.WebAppConfiguration;</code></div><div class="line number9 index8 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.test.web.servlet.MockMvc;</code></div><div class="line number10 index9 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.test.web.servlet.setup.MockMvcBuilders;</code></div><div class="line number11 index10 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.web.context.WebApplicationContext;</code></div><div class="line number12 index11 alt1">&nbsp;</div><div class="line number13 index12 alt2"><code class="java keyword">import</code> <code class="java plain">java.util.Arrays;</code></div><div class="line number14 index13 alt1">&nbsp;</div><div class="line number15 index14 alt2"><code class="java keyword">import</code> <code class="java keyword">static</code> <code class="java plain">org.hamcrest.Matchers.*;</code></div><div class="line number16 index15 alt1"><code class="java keyword">import</code> <code class="java keyword">static</code> <code class="java plain">org.hamcrest.Matchers.is;</code></div><div class="line number17 index16 alt2"><code class="java keyword">import</code> <code class="java keyword">static</code> <code class="java plain">org.mockito.Mockito.*;</code></div><div class="line number18 index17 alt1"><code class="java keyword">import</code> <code class="java keyword">static</code> <code class="java plain">org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;</code></div><div class="line number19 index18 alt2"><code class="java keyword">import</code> <code class="java keyword">static</code> <code class="java plain">org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;</code></div><div class="line number20 index19 alt1"><code class="java keyword">import</code> <code class="java keyword">static</code> <code class="java plain">org.springframework.test.web.servlet.result.MockMvcResultMatchers.model;</code></div><div class="line number21 index20 alt2">&nbsp;</div><div class="line number22 index21 alt1"><code class="java color1">@RunWith</code><code class="java plain">(SpringJUnit4ClassRunner.</code><code class="java keyword">class</code><code class="java plain">)</code></div><div class="line number23 index22 alt2"><code class="java color1">@ContextConfiguration</code><code class="java plain">(classes = {TestContext.</code><code class="java keyword">class</code><code class="java plain">, WebAppContext.</code><code class="java keyword">class</code><code class="java plain">})</code></div><div class="line number24 index23 alt1"><code class="java color1">@WebAppConfiguration</code></div><div class="line number25 index24 alt2"><code class="java keyword">public</code> <code class="java keyword">class</code> <code class="java plain">TodoControllerTest {</code></div><div class="line number26 index25 alt1">&nbsp;</div><div class="line number27 index26 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java plain">MockMvc mockMvc;</code></div><div class="line number28 index27 alt1">&nbsp;</div><div class="line number29 index28 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Autowired</code></div><div class="line number30 index29 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java plain">TodoService todoServiceMock;</code></div><div class="line number31 index30 alt2">&nbsp;</div><div class="line number32 index31 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java comments">//Add WebApplicationContext field here</code></div><div class="line number33 index32 alt2">&nbsp;</div><div class="line number34 index33 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java comments">//The setUp() method is omitted.</code></div><div class="line number35 index34 alt2">&nbsp;</div><div class="line number36 index35 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Test</code></div><div class="line number37 index36 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java keyword">void</code> <code class="java plain">findAll_ShouldAddTodoEntriesToModelAndRenderTodoListView() </code><code class="java keyword">throws</code> <code class="java plain">Exception {</code></div><div class="line number38 index37 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">Todo first = </code><code class="java keyword">new</code> <code class="java plain">TodoBuilder()</code></div><div class="line number39 index38 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">.id(1L)</code></div><div class="line number40 index39 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">.description(</code><code class="java string">"Lorem ipsum"</code><code class="java plain">)</code></div><div class="line number41 index40 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">.title(</code><code class="java string">"Foo"</code><code class="java plain">)</code></div><div class="line number42 index41 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">.build();</code></div><div class="line number43 index42 alt2">&nbsp;</div><div class="line number44 index43 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">Todo second = </code><code class="java keyword">new</code> <code class="java plain">TodoBuilder()</code></div><div class="line number45 index44 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">.id(2L)</code></div><div class="line number46 index45 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">.description(</code><code class="java string">"Lorem ipsum"</code><code class="java plain">)</code></div><div class="line number47 index46 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">.title(</code><code class="java string">"Bar"</code><code class="java plain">)</code></div><div class="line number48 index47 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">.build();</code></div><div class="line number49 index48 alt2">&nbsp;</div><div class="line number50 index49 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">when(todoServiceMock.findAll()).thenReturn(Arrays.asList(first, second));</code></div><div class="line number51 index50 alt2">&nbsp;</div><div class="line number52 index51 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">mockMvc.perform(get(</code><code class="java string">"/"</code><code class="java plain">))</code></div><div class="line number53 index52 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">.andExpect(status().isOk())</code></div><div class="line number54 index53 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">.andExpect(view().name(</code><code class="java string">"todo/list"</code><code class="java plain">))</code></div><div class="line number55 index54 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">.andExpect(forwardedUrl(</code><code class="java string">"/WEB-INF/jsp/todo/list.jsp"</code><code class="java plain">))</code></div><div class="line number56 index55 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">.andExpect(model().attribute(</code><code class="java string">"todos"</code><code class="java plain">, hasSize(</code><code class="java value">2</code><code class="java plain">)))</code></div><div class="line number57 index56 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">.andExpect(model().attribute(</code><code class="java string">"todos"</code><code class="java plain">, hasItem(</code></div><div class="line number58 index57 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">allOf(</code></div><div class="line number59 index58 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">hasProperty(</code><code class="java string">"id"</code><code class="java plain">, is(1L)),</code></div><div class="line number60 index59 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">hasProperty(</code><code class="java string">"description"</code><code class="java plain">, is(</code><code class="java string">"Lorem ipsum"</code><code class="java plain">)),</code></div><div class="line number61 index60 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">hasProperty(</code><code class="java string">"title"</code><code class="java plain">, is(</code><code class="java string">"Foo"</code><code class="java plain">))</code></div><div class="line number62 index61 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">)</code></div><div class="line number63 index62 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">)))</code></div><div class="line number64 index63 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">.andExpect(model().attribute(</code><code class="java string">"todos"</code><code class="java plain">, hasItem(</code></div><div class="line number65 index64 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">allOf(</code></div><div class="line number66 index65 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">hasProperty(</code><code class="java string">"id"</code><code class="java plain">, is(2L)),</code></div><div class="line number67 index66 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">hasProperty(</code><code class="java string">"description"</code><code class="java plain">, is(</code><code class="java string">"Lorem ipsum"</code><code class="java plain">)),</code></div><div class="line number68 index67 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">hasProperty(</code><code class="java string">"title"</code><code class="java plain">, is(</code><code class="java string">"Bar"</code><code class="java plain">))</code></div><div class="line number69 index68 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">)</code></div><div class="line number70 index69 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">)));</code></div><div class="line number71 index70 alt2">&nbsp;</div><div class="line number72 index71 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">verify(todoServiceMock, times(</code><code class="java value">1</code><code class="java plain">)).findAll();</code></div><div class="line number73 index72 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">verifyNoMoreInteractions(todoServiceMock);</code></div><div class="line number74 index73 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number75 index74 alt2"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><h3>Rendering The View Todo Entry Page</h3><p class="cye-lm-tag">Before we can write the actual unit tests for our controller method, we have to take a closer look at the implementation of that method.</p>
<p class="cye-lm-tag">Let’s move on and find out how our controller is implemented.</p>
<h4>Expected Behavior</h4><p class="cye-lm-tag">The controller method which is used to show the information of a single todo entry is implemented by following these steps:</p>
<ol><li>It processes <em>GET</em> requests send to url ‘/todo/{id}’. The <em>{id}</em> is a path variable which contains the id of the requested todo entry.</li><li>It obtains the requested todo entry by calling the <em>findById()</em> method of the <em>TodoService</em> interface and passes the id of the requested todo entry as a method parameter. This method returns the found todo entry. If no todo entry is found, this method throws a <em>TodoNotFoundException</em>.</li><li>It adds the found todo entry to the model.</li><li>It returns the name of the rendered view.</li></ol><p class="cye-lm-tag">The source code of our controller method looks as follows:</p>
<div><div id="highlighter_63688" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.stereotype.Controller;</code></div><div class="line number2 index1 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.ui.Model;</code></div><div class="line number3 index2 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.web.bind.annotation.*;</code></div><div class="line number4 index3 alt1">&nbsp;</div><div class="line number5 index4 alt2"><code class="java color1">@Controller</code></div><div class="line number6 index5 alt1"><code class="java keyword">public</code> <code class="java keyword">class</code> <code class="java plain">TodoController {</code></div><div class="line number7 index6 alt2">&nbsp;</div><div class="line number8 index7 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java keyword">final</code> <code class="java plain">TodoService service;</code></div><div class="line number9 index8 alt2">&nbsp;</div><div class="line number10 index9 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@RequestMapping</code><code class="java plain">(value = </code><code class="java string">"/todo/{id}"</code><code class="java plain">, method = RequestMethod.GET)</code></div><div class="line number11 index10 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java plain">String findById(</code><code class="java color1">@PathVariable</code><code class="java plain">(</code><code class="java string">"id"</code><code class="java plain">) Long id, Model model) </code><code class="java keyword">throws</code> <code class="java plain">TodoNotFoundException {</code></div><div class="line number12 index11 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">Todo found = service.findById(id);</code></div><div class="line number13 index12 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">model.addAttribute(</code><code class="java string">"todo"</code><code class="java plain">, found);</code></div><div class="line number14 index13 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">return</code> <code class="java string">"todo/view"</code><code class="java plain">;</code></div><div class="line number15 index14 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number16 index15 alt1"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><p class="cye-lm-tag">Our next question is:</p>
<blockquote><p class="cye-lm-tag">What happens when a TodoNotFoundException is thrown?</p>
</blockquote><p class="cye-lm-tag">In the previous part of this tutorial, we created an exception resolver bean which is used to handle exceptions thrown by our controller classes. The configuration of this bean looks as follows:</p>
<div><div id="highlighter_842156" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java color1">@Bean</code></div><div class="line number2 index1 alt1"><code class="java keyword">public</code> <code class="java plain">SimpleMappingExceptionResolver exceptionResolver() {</code></div><div class="line number3 index2 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">SimpleMappingExceptionResolver exceptionResolver = </code><code class="java keyword">new</code> <code class="java plain">SimpleMappingExceptionResolver();</code></div><div class="line number4 index3 alt1">&nbsp;</div><div class="line number5 index4 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">Properties exceptionMappings = </code><code class="java keyword">new</code> <code class="java plain">Properties();</code></div><div class="line number6 index5 alt1">&nbsp;</div><div class="line number7 index6 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">exceptionMappings.put(</code><code class="java string">"net.petrikainulainen.spring.testmvc.todo.exception.TodoNotFoundException"</code><code class="java plain">, </code><code class="java string">"error/404"</code><code class="java plain">);</code></div><div class="line number8 index7 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">exceptionMappings.put(</code><code class="java string">"java.lang.Exception"</code><code class="java plain">, </code><code class="java string">"error/error"</code><code class="java plain">);</code></div><div class="line number9 index8 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">exceptionMappings.put(</code><code class="java string">"java.lang.RuntimeException"</code><code class="java plain">, </code><code class="java string">"error/error"</code><code class="java plain">);</code></div><div class="line number10 index9 alt1">&nbsp;</div><div class="line number11 index10 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">exceptionResolver.setExceptionMappings(exceptionMappings);</code></div><div class="line number12 index11 alt1">&nbsp;</div><div class="line number13 index12 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">Properties statusCodes = </code><code class="java keyword">new</code> <code class="java plain">Properties();</code></div><div class="line number14 index13 alt1">&nbsp;</div><div class="line number15 index14 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">statusCodes.put(</code><code class="java string">"error/404"</code><code class="java plain">, </code><code class="java string">"404"</code><code class="java plain">);</code></div><div class="line number16 index15 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">statusCodes.put(</code><code class="java string">"error/error"</code><code class="java plain">, </code><code class="java string">"500"</code><code class="java plain">);</code></div><div class="line number17 index16 alt2">&nbsp;</div><div class="line number18 index17 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">exceptionResolver.setStatusCodes(statusCodes);</code></div><div class="line number19 index18 alt2">&nbsp;</div><div class="line number20 index19 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">return</code> <code class="java plain">exceptionResolver;</code></div><div class="line number21 index20 alt2"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><p class="cye-lm-tag">As we can see, if a <em>TodoNotFoundException</em> is thrown, our application renders the ‘error/404’ view and returns the HTTP status code 404.</p>
<p class="cye-lm-tag">It is clear that we have to write two tests for this controller method:</p>
<ol><li>We have to write a test which ensures that our application is working correctly when the todo entry is not found.</li><li>We have to write a test which verifies that our application is working correctly when the todo entry is found.</li></ol><p class="cye-lm-tag">Let’s see how we can write these tests.</p>
<h4>Test 1: Todo Entry Is Not Found</h4><p class="cye-lm-tag">First, we must ensure that our application is working property when the requested todo entry is not found. We can write the test which ensures this by following these steps:</p>
<ol><li>Configure the mock object to throw a <em>TodoNotFoundException</em> when its <em>findById()</em> method is called and the id of the requested todo entry is 1L.</li><li>Execute a <em>GET</em> request to url ‘/todo/1’.</li><li>Verify that the HTTP status code 404 is returned.</li><li>Ensure that the name of the returned view is ‘error/404’.</li><li>Ensure that the request is forwarded to url ‘/WEB-INF/jsp/error/404.jsp’.</li><li>Verify that the <em>findById()</em> method of the <em>TodoService</em> interface is called only once with the correct method parameter (1L).</li><li>Verify that no other methods of the mock object were called during this test.</li></ol><p class="cye-lm-tag">The source code of our unit test looks as follows:</p>
<div><div id="highlighter_129840" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div class="line number23 index22 alt2">23</div><div class="line number24 index23 alt1">24</div><div class="line number25 index24 alt2">25</div><div class="line number26 index25 alt1">26</div><div class="line number27 index26 alt2">27</div><div class="line number28 index27 alt1">28</div><div class="line number29 index28 alt2">29</div><div class="line number30 index29 alt1">30</div><div class="line number31 index30 alt2">31</div><div class="line number32 index31 alt1">32</div><div class="line number33 index32 alt2">33</div><div class="line number34 index33 alt1">34</div><div class="line number35 index34 alt2">35</div><div class="line number36 index35 alt1">36</div><div class="line number37 index36 alt2">37</div><div class="line number38 index37 alt1">38</div><div class="line number39 index38 alt2">39</div><div class="line number40 index39 alt1">40</div><div class="line number41 index40 alt2">41</div><div class="line number42 index41 alt1">42</div><div class="line number43 index42 alt2">43</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">import</code> <code class="java plain">org.junit.Before;</code></div><div class="line number2 index1 alt1"><code class="java keyword">import</code> <code class="java plain">org.junit.Test;</code></div><div class="line number3 index2 alt2"><code class="java keyword">import</code> <code class="java plain">org.junit.runner.RunWith;</code></div><div class="line number4 index3 alt1"><code class="java keyword">import</code> <code class="java plain">org.mockito.Mockito;</code></div><div class="line number5 index4 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.beans.factory.annotation.Autowired;</code></div><div class="line number6 index5 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.test.context.ContextConfiguration;</code></div><div class="line number7 index6 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</code></div><div class="line number8 index7 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.test.context.web.WebAppConfiguration;</code></div><div class="line number9 index8 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.test.web.servlet.MockMvc;</code></div><div class="line number10 index9 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.test.web.servlet.setup.MockMvcBuilders;</code></div><div class="line number11 index10 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.web.context.WebApplicationContext;</code></div><div class="line number12 index11 alt1">&nbsp;</div><div class="line number13 index12 alt2"><code class="java keyword">import</code> <code class="java keyword">static</code> <code class="java plain">org.mockito.Mockito.*;</code></div><div class="line number14 index13 alt1"><code class="java keyword">import</code> <code class="java keyword">static</code> <code class="java plain">org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;</code></div><div class="line number15 index14 alt2"><code class="java keyword">import</code> <code class="java keyword">static</code> <code class="java plain">org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;</code></div><div class="line number16 index15 alt1">&nbsp;</div><div class="line number17 index16 alt2"><code class="java color1">@RunWith</code><code class="java plain">(SpringJUnit4ClassRunner.</code><code class="java keyword">class</code><code class="java plain">)</code></div><div class="line number18 index17 alt1"><code class="java color1">@ContextConfiguration</code><code class="java plain">(classes = {TestContext.</code><code class="java keyword">class</code><code class="java plain">, WebAppContext.</code><code class="java keyword">class</code><code class="java plain">})</code></div><div class="line number19 index18 alt2"><code class="java color1">@WebAppConfiguration</code></div><div class="line number20 index19 alt1"><code class="java keyword">public</code> <code class="java keyword">class</code> <code class="java plain">TodoControllerTest {</code></div><div class="line number21 index20 alt2">&nbsp;</div><div class="line number22 index21 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java plain">MockMvc mockMvc;</code></div><div class="line number23 index22 alt2">&nbsp;</div><div class="line number24 index23 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Autowired</code></div><div class="line number25 index24 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java plain">TodoService todoServiceMock;</code></div><div class="line number26 index25 alt1">&nbsp;</div><div class="line number27 index26 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java comments">//Add WebApplicationContext field here</code></div><div class="line number28 index27 alt1">&nbsp;</div><div class="line number29 index28 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java comments">//The setUp() method is omitted.</code></div><div class="line number30 index29 alt1">&nbsp;</div><div class="line number31 index30 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Test</code></div><div class="line number32 index31 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java keyword">void</code> <code class="java plain">findById_TodoEntryNotFound_ShouldRender404View() </code><code class="java keyword">throws</code> <code class="java plain">Exception {</code></div><div class="line number33 index32 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">when(todoServiceMock.findById(1L)).thenThrow(</code><code class="java keyword">new</code> <code class="java plain">TodoNotFoundException(</code><code class="java string">""</code><code class="java plain">));</code></div><div class="line number34 index33 alt1">&nbsp;</div><div class="line number35 index34 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">mockMvc.perform(get(</code><code class="java string">"/todo/{id}"</code><code class="java plain">, 1L))</code></div><div class="line number36 index35 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">.andExpect(status().isNotFound())</code></div><div class="line number37 index36 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">.andExpect(view().name(</code><code class="java string">"error/404"</code><code class="java plain">))</code></div><div class="line number38 index37 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">.andExpect(forwardedUrl(</code><code class="java string">"/WEB-INF/jsp/error/404.jsp"</code><code class="java plain">));</code></div><div class="line number39 index38 alt2">&nbsp;</div><div class="line number40 index39 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">verify(todoServiceMock, times(</code><code class="java value">1</code><code class="java plain">)).findById(1L);</code></div><div class="line number41 index40 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">verifyZeroInteractions(todoServiceMock);</code></div><div class="line number42 index41 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number43 index42 alt2"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><h4>Test 2: Todo Entry Is Found</h4><p class="cye-lm-tag">Second, we must write a test which ensures that our controller is working properly when a todo entry is found. We can do this by following these steps:</p>
<ol><li>Create the <em>Todo</em> object which is returned when our service method is called. Again, we create the returned <em>Todo</em> object by using our test data builder.</li><li>Configure our mock object to return the created <em>Todo</em> object when its <em>findById()</em> method is called by using a method parameter 1L.</li><li>Execute a <em>GET</em> request to url ‘/todo/1’.</li><li>Verify that the HTTP status code 200 is returned.</li><li>Ensure that the name of the returned view is ‘todo/view’.</li><li>Ensure that the request is forwarded to url ‘/WEB-INF/jsp/todo/view.jsp’.</li><li>Verify that the <em>id</em> of the model object called <em>todo</em> is 1L.</li><li>Verify that the <em>description</em> of the model object called <em>todo</em> is ‘Lorem ipsum’.</li><li>Verify that the <em>title</em> of the model object called <em>todo</em> is ‘Foo’.</li><li>Ensure that the <em>findById()</em> method of our mock object is called only once with the correct method parameter (1L).</li><li>Ensure that the other methods of the mock object were not called during our test.</li></ol><p class="cye-lm-tag">The source code of our unit test looks as follows:</p>
<div><div id="highlighter_739686" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div class="line number23 index22 alt2">23</div><div class="line number24 index23 alt1">24</div><div class="line number25 index24 alt2">25</div><div class="line number26 index25 alt1">26</div><div class="line number27 index26 alt2">27</div><div class="line number28 index27 alt1">28</div><div class="line number29 index28 alt2">29</div><div class="line number30 index29 alt1">30</div><div class="line number31 index30 alt2">31</div><div class="line number32 index31 alt1">32</div><div class="line number33 index32 alt2">33</div><div class="line number34 index33 alt1">34</div><div class="line number35 index34 alt2">35</div><div class="line number36 index35 alt1">36</div><div class="line number37 index36 alt2">37</div><div class="line number38 index37 alt1">38</div><div class="line number39 index38 alt2">39</div><div class="line number40 index39 alt1">40</div><div class="line number41 index40 alt2">41</div><div class="line number42 index41 alt1">42</div><div class="line number43 index42 alt2">43</div><div class="line number44 index43 alt1">44</div><div class="line number45 index44 alt2">45</div><div class="line number46 index45 alt1">46</div><div class="line number47 index46 alt2">47</div><div class="line number48 index47 alt1">48</div><div class="line number49 index48 alt2">49</div><div class="line number50 index49 alt1">50</div><div class="line number51 index50 alt2">51</div><div class="line number52 index51 alt1">52</div><div class="line number53 index52 alt2">53</div><div class="line number54 index53 alt1">54</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">import</code> <code class="java plain">org.junit.Before;</code></div><div class="line number2 index1 alt1"><code class="java keyword">import</code> <code class="java plain">org.junit.Test;</code></div><div class="line number3 index2 alt2"><code class="java keyword">import</code> <code class="java plain">org.junit.runner.RunWith;</code></div><div class="line number4 index3 alt1"><code class="java keyword">import</code> <code class="java plain">org.mockito.Mockito;</code></div><div class="line number5 index4 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.beans.factory.annotation.Autowired;</code></div><div class="line number6 index5 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.test.context.ContextConfiguration;</code></div><div class="line number7 index6 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</code></div><div class="line number8 index7 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.test.context.web.WebAppConfiguration;</code></div><div class="line number9 index8 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.test.web.servlet.MockMvc;</code></div><div class="line number10 index9 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.test.web.servlet.setup.MockMvcBuilders;</code></div><div class="line number11 index10 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.web.context.WebApplicationContext;</code></div><div class="line number12 index11 alt1">&nbsp;</div><div class="line number13 index12 alt2"><code class="java keyword">import</code> <code class="java keyword">static</code> <code class="java plain">org.hamcrest.Matchers.hasProperty;</code></div><div class="line number14 index13 alt1"><code class="java keyword">import</code> <code class="java keyword">static</code> <code class="java plain">org.hamcrest.Matchers.is;</code></div><div class="line number15 index14 alt2"><code class="java keyword">import</code> <code class="java keyword">static</code> <code class="java plain">org.mockito.Mockito.*;</code></div><div class="line number16 index15 alt1"><code class="java keyword">import</code> <code class="java keyword">static</code> <code class="java plain">org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;</code></div><div class="line number17 index16 alt2"><code class="java keyword">import</code> <code class="java keyword">static</code> <code class="java plain">org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;</code></div><div class="line number18 index17 alt1">&nbsp;</div><div class="line number19 index18 alt2"><code class="java color1">@RunWith</code><code class="java plain">(SpringJUnit4ClassRunner.</code><code class="java keyword">class</code><code class="java plain">)</code></div><div class="line number20 index19 alt1"><code class="java color1">@ContextConfiguration</code><code class="java plain">(classes = {TestContext.</code><code class="java keyword">class</code><code class="java plain">, WebAppContext.</code><code class="java keyword">class</code><code class="java plain">})</code></div><div class="line number21 index20 alt2"><code class="java color1">@WebAppConfiguration</code></div><div class="line number22 index21 alt1"><code class="java keyword">public</code> <code class="java keyword">class</code> <code class="java plain">TodoControllerTest {</code></div><div class="line number23 index22 alt2">&nbsp;</div><div class="line number24 index23 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java plain">MockMvc mockMvc;</code></div><div class="line number25 index24 alt2">&nbsp;</div><div class="line number26 index25 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Autowired</code></div><div class="line number27 index26 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java plain">TodoService todoServiceMock;</code></div><div class="line number28 index27 alt1">&nbsp;</div><div class="line number29 index28 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java comments">//Add WebApplicationContext field here</code></div><div class="line number30 index29 alt1">&nbsp;</div><div class="line number31 index30 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java comments">//The setUp() method is omitted.</code></div><div class="line number32 index31 alt1">&nbsp;</div><div class="line number33 index32 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Test</code></div><div class="line number34 index33 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java keyword">void</code> <code class="java plain">findById_TodoEntryFound_ShouldAddTodoEntryToModelAndRenderViewTodoEntryView() </code><code class="java keyword">throws</code> <code class="java plain">Exception {</code></div><div class="line number35 index34 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">Todo found = </code><code class="java keyword">new</code> <code class="java plain">TodoBuilder()</code></div><div class="line number36 index35 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">.id(1L)</code></div><div class="line number37 index36 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">.description(</code><code class="java string">"Lorem ipsum"</code><code class="java plain">)</code></div><div class="line number38 index37 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">.title(</code><code class="java string">"Foo"</code><code class="java plain">)</code></div><div class="line number39 index38 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">.build();</code></div><div class="line number40 index39 alt1">&nbsp;</div><div class="line number41 index40 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">when(todoServiceMock.findById(1L)).thenReturn(found);</code></div><div class="line number42 index41 alt1">&nbsp;</div><div class="line number43 index42 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">mockMvc.perform(get(</code><code class="java string">"/todo/{id}"</code><code class="java plain">, 1L))</code></div><div class="line number44 index43 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">.andExpect(status().isOk())</code></div><div class="line number45 index44 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">.andExpect(view().name(</code><code class="java string">"todo/view"</code><code class="java plain">))</code></div><div class="line number46 index45 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">.andExpect(forwardedUrl(</code><code class="java string">"/WEB-INF/jsp/todo/view.jsp"</code><code class="java plain">))</code></div><div class="line number47 index46 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">.andExpect(model().attribute(</code><code class="java string">"todo"</code><code class="java plain">, hasProperty(</code><code class="java string">"id"</code><code class="java plain">, is(1L))))</code></div><div class="line number48 index47 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">.andExpect(model().attribute(</code><code class="java string">"todo"</code><code class="java plain">, hasProperty(</code><code class="java string">"description"</code><code class="java plain">, is(</code><code class="java string">"Lorem ipsum"</code><code class="java plain">))))</code></div><div class="line number49 index48 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">.andExpect(model().attribute(</code><code class="java string">"todo"</code><code class="java plain">, hasProperty(</code><code class="java string">"title"</code><code class="java plain">, is(</code><code class="java string">"Foo"</code><code class="java plain">))));</code></div><div class="line number50 index49 alt1">&nbsp;</div><div class="line number51 index50 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">verify(todoServiceMock, times(</code><code class="java value">1</code><code class="java plain">)).findById(1L);</code></div><div class="line number52 index51 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">verifyNoMoreInteractions(todoServiceMock);</code></div><div class="line number53 index52 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number54 index53 alt1"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><h3>Handling The Form Submission of The Add Todo Entry Form</h3><p class="cye-lm-tag">Again, we will first take a look at the expected behavior of our controller method before we will write the unit tests for it.</p>
<h4>Expected Behavior</h4><p class="cye-lm-tag">The controller method which handles the form submissions of the add todo entry form is implemented by following these steps:</p>
<ol><li>It processes <em>POST</em> requests send to url ‘/todo/add’.</li><li>It checks that the <em>BindingResult</em> object given as a method parameter doesn’t have any errors. If errors are found, it returns the name of the form view.</li><li>It adds a new Todo entry by calling the <em>add()</em> method of the <em>TodoService</em> interface and passes the form object as a method parameter. This method creates a new todo entry and returns it.</li><li>It creates the feedback message about the added todo entry and adds the message to the <em>RedirectAttributes</em> object given as a method parameter.</li><li>It adds the id of the added todo entry to the <em>RedirectAttributes</em> object.</li><li>It returns the name of a redirect view which redirects the request to the view todo entry page.</li></ol><p class="cye-lm-tag">The relevant part of the <em>TodoController</em> class looks as follows:</p>
<div><div id="highlighter_397087" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div class="line number23 index22 alt2">23</div><div class="line number24 index23 alt1">24</div><div class="line number25 index24 alt2">25</div><div class="line number26 index25 alt1">26</div><div class="line number27 index26 alt2">27</div><div class="line number28 index27 alt1">28</div><div class="line number29 index28 alt2">29</div><div class="line number30 index29 alt1">30</div><div class="line number31 index30 alt2">31</div><div class="line number32 index31 alt1">32</div><div class="line number33 index32 alt2">33</div><div class="line number34 index33 alt1">34</div><div class="line number35 index34 alt2">35</div><div class="line number36 index35 alt1">36</div><div class="line number37 index36 alt2">37</div><div class="line number38 index37 alt1">38</div><div class="line number39 index38 alt2">39</div><div class="line number40 index39 alt1">40</div><div class="line number41 index40 alt2">41</div><div class="line number42 index41 alt1">42</div><div class="line number43 index42 alt2">43</div><div class="line number44 index43 alt1">44</div><div class="line number45 index44 alt2">45</div><div class="line number46 index45 alt1">46</div><div class="line number47 index46 alt2">47</div><div class="line number48 index47 alt1">48</div><div class="line number49 index48 alt2">49</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.context.MessageSource;</code></div><div class="line number2 index1 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.context.i18n.LocaleContextHolder;</code></div><div class="line number3 index2 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.stereotype.Controller;</code></div><div class="line number4 index3 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.validation.BindingResult;</code></div><div class="line number5 index4 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.web.bind.annotation.*;</code></div><div class="line number6 index5 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.web.servlet.mvc.support.RedirectAttributes;</code></div><div class="line number7 index6 alt2">&nbsp;</div><div class="line number8 index7 alt1"><code class="java keyword">import</code> <code class="java plain">javax.validation.Valid;</code></div><div class="line number9 index8 alt2"><code class="java keyword">import</code> <code class="java plain">java.util.Locale;</code></div><div class="line number10 index9 alt1">&nbsp;</div><div class="line number11 index10 alt2"><code class="java color1">@Controller</code></div><div class="line number12 index11 alt1"><code class="java color1">@SessionAttributes</code><code class="java plain">(</code><code class="java string">"todo"</code><code class="java plain">)</code></div><div class="line number13 index12 alt2"><code class="java keyword">public</code> <code class="java keyword">class</code> <code class="java plain">TodoController {</code></div><div class="line number14 index13 alt1">&nbsp;</div><div class="line number15 index14 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java keyword">final</code> <code class="java plain">TodoService service;</code></div><div class="line number16 index15 alt1">&nbsp;</div><div class="line number17 index16 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java keyword">final</code> <code class="java plain">MessageSource messageSource;</code></div><div class="line number18 index17 alt1">&nbsp;</div><div class="line number19 index18 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@RequestMapping</code><code class="java plain">(value = </code><code class="java string">"/todo/add"</code><code class="java plain">, method = RequestMethod.POST)</code></div><div class="line number20 index19 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java plain">String add(</code><code class="java color1">@Valid</code> <code class="java color1">@ModelAttribute</code><code class="java plain">(</code><code class="java string">"todo"</code><code class="java plain">) TodoDTO dto, BindingResult result, RedirectAttributes attributes) {</code></div><div class="line number21 index20 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">if</code> <code class="java plain">(result.hasErrors()) {</code></div><div class="line number22 index21 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">return</code> <code class="java string">"todo/add"</code><code class="java plain">;</code></div><div class="line number23 index22 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number24 index23 alt1">&nbsp;</div><div class="line number25 index24 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">Todo added = service.add(dto);</code></div><div class="line number26 index25 alt1">&nbsp;</div><div class="line number27 index26 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">addFeedbackMessage(attributes, </code><code class="java string">"feedback.message.todo.added"</code><code class="java plain">, added.getTitle());</code></div><div class="line number28 index27 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">attributes.addAttribute(</code><code class="java string">"id"</code><code class="java plain">, added.getId());</code></div><div class="line number29 index28 alt2">&nbsp;</div><div class="line number30 index29 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">return</code> <code class="java plain">createRedirectViewPath(</code><code class="java string">"todo/view"</code><code class="java plain">);</code></div><div class="line number31 index30 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number32 index31 alt1">&nbsp;</div><div class="line number33 index32 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java keyword">void</code> <code class="java plain">addFeedbackMessage(RedirectAttributes attributes, String messageCode, Object... messageParameters) {</code></div><div class="line number34 index33 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">String localizedFeedbackMessage = getMessage(messageCode, messageParameters);</code></div><div class="line number35 index34 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">attributes.addFlashAttribute(</code><code class="java string">"feedbackMessage"</code><code class="java plain">, localizedFeedbackMessage);</code></div><div class="line number36 index35 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number37 index36 alt2">&nbsp;</div><div class="line number38 index37 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java plain">String getMessage(String messageCode, Object... messageParameters) {</code></div><div class="line number39 index38 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">Locale current = LocaleContextHolder.getLocale();</code></div><div class="line number40 index39 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">return</code> <code class="java plain">messageSource.getMessage(messageCode, messageParameters, current);</code></div><div class="line number41 index40 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number42 index41 alt1">&nbsp;</div><div class="line number43 index42 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java plain">String createRedirectViewPath(String requestMapping) {</code></div><div class="line number44 index43 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">StringBuilder redirectViewPath = </code><code class="java keyword">new</code> <code class="java plain">StringBuilder();</code></div><div class="line number45 index44 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">redirectViewPath.append(</code><code class="java string">"redirect:"</code><code class="java plain">);</code></div><div class="line number46 index45 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">redirectViewPath.append(requestMapping);</code></div><div class="line number47 index46 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">return</code> <code class="java plain">redirectViewPath.toString();</code></div><div class="line number48 index47 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number49 index48 alt2"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><p class="cye-lm-tag">As we can see, the controller method uses a <em>TodoDTO</em> object as a form object. The <em>TodoDTO</em> class is a simple DTO class which source code looks as follows:</p>
<div><div id="highlighter_420727" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">import</code> <code class="java plain">org.hibernate.validator.constraints.Length;</code></div><div class="line number2 index1 alt1"><code class="java keyword">import</code> <code class="java plain">org.hibernate.validator.constraints.NotEmpty;</code></div><div class="line number3 index2 alt2">&nbsp;</div><div class="line number4 index3 alt1"><code class="java keyword">public</code> <code class="java keyword">class</code> <code class="java plain">TodoDTO {</code></div><div class="line number5 index4 alt2">&nbsp;</div><div class="line number6 index5 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java plain">Long id;</code></div><div class="line number7 index6 alt2">&nbsp;</div><div class="line number8 index7 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Length</code><code class="java plain">(max = </code><code class="java value">500</code><code class="java plain">)</code></div><div class="line number9 index8 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java plain">String description;</code></div><div class="line number10 index9 alt1">&nbsp;</div><div class="line number11 index10 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@NotEmpty</code></div><div class="line number12 index11 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Length</code><code class="java plain">(max = </code><code class="java value">100</code><code class="java plain">)</code></div><div class="line number13 index12 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java plain">String title;</code></div><div class="line number14 index13 alt1">&nbsp;</div><div class="line number15 index14 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java comments">//Constructor and other methods are omitted.</code></div><div class="line number16 index15 alt1"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><p class="cye-lm-tag">The <em>TodoDTO</em> class declares some validation constraints which are described in following:</p>
<ul><li>The title of a todo entry cannot be empty.</li><li>The maximum length of the description is 500 characters.</li><li>The maximum length of the title is 100 characters.</li></ul><p class="cye-lm-tag">If we think about the tests which we should write for this controller method, it is clear that we must ensure that</p>
<ol><li>The controller method is working property when the validation fails.</li><li>The controller method is working property when a todo entry is added to the database.</li></ol><p class="cye-lm-tag">Let’s find out how we can write these tests.</p>
<h4>Test 1: Validation Fails</h4><p class="cye-lm-tag">First, we have to write a test which ensures that our controller method is working properly when the validation fails. We can write this test by following these steps:</p>
<ol><li>Create a <em>title</em> which has 101 characters.</li><li>Create a <em>description</em> which has 501 characters.</li><li>Execute a <em>POST</em> request to url ‘/todo/add’ by following these steps:<ol><li>Set the content type of the request to ‘application/x-www-form-urlencoded’.</li><li>Send the <em>description</em> and <em>title</em> of the todo entry as request parameters.</li><li>Set a new <em>TodoDTO</em> object to session. This is required because our controller is annotated with the <em>@SessionAttributes</em> annotation.</li></ol></li><li>Verify that the HTTP status code 200 is returned.</li><li>Verify that the name of the returned view is ‘todo/add’.</li><li>Verify that the request is forwarded to url ‘/WEB-INF/jsp/todo/add.jsp’.</li><li>Verify that our model attribute has field errors in the <em>title</em> and <em>description</em> fields.</li><li>Ensure that the <em>id</em> of our model attribute is null.</li><li>Ensure that the <em>description</em> of our model attribute is correct.</li><li>Ensure that the <em>title</em> of our model attribute is correct.</li><li>Ensure that the methods of our mock object were not called during the test.</li></ol><p class="cye-lm-tag">The source code of our unit test looks as follows:</p>
<div><div id="highlighter_568847" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div class="line number23 index22 alt2">23</div><div class="line number24 index23 alt1">24</div><div class="line number25 index24 alt2">25</div><div class="line number26 index25 alt1">26</div><div class="line number27 index26 alt2">27</div><div class="line number28 index27 alt1">28</div><div class="line number29 index28 alt2">29</div><div class="line number30 index29 alt1">30</div><div class="line number31 index30 alt2">31</div><div class="line number32 index31 alt1">32</div><div class="line number33 index32 alt2">33</div><div class="line number34 index33 alt1">34</div><div class="line number35 index34 alt2">35</div><div class="line number36 index35 alt1">36</div><div class="line number37 index36 alt2">37</div><div class="line number38 index37 alt1">38</div><div class="line number39 index38 alt2">39</div><div class="line number40 index39 alt1">40</div><div class="line number41 index40 alt2">41</div><div class="line number42 index41 alt1">42</div><div class="line number43 index42 alt2">43</div><div class="line number44 index43 alt1">44</div><div class="line number45 index44 alt2">45</div><div class="line number46 index45 alt1">46</div><div class="line number47 index46 alt2">47</div><div class="line number48 index47 alt1">48</div><div class="line number49 index48 alt2">49</div><div class="line number50 index49 alt1">50</div><div class="line number51 index50 alt2">51</div><div class="line number52 index51 alt1">52</div><div class="line number53 index52 alt2">53</div><div class="line number54 index53 alt1">54</div><div class="line number55 index54 alt2">55</div><div class="line number56 index55 alt1">56</div><div class="line number57 index56 alt2">57</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">import</code> <code class="java plain">org.junit.Before;</code></div><div class="line number2 index1 alt1"><code class="java keyword">import</code> <code class="java plain">org.junit.Test;</code></div><div class="line number3 index2 alt2"><code class="java keyword">import</code> <code class="java plain">org.junit.runner.RunWith;</code></div><div class="line number4 index3 alt1"><code class="java keyword">import</code> <code class="java plain">org.mockito.Mockito;</code></div><div class="line number5 index4 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.beans.factory.annotation.Autowired;</code></div><div class="line number6 index5 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.http.MediaType;</code></div><div class="line number7 index6 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.test.context.ContextConfiguration;</code></div><div class="line number8 index7 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</code></div><div class="line number9 index8 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.test.context.web.WebAppConfiguration;</code></div><div class="line number10 index9 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.test.web.servlet.MockMvc;</code></div><div class="line number11 index10 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.test.web.servlet.setup.MockMvcBuilders;</code></div><div class="line number12 index11 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.web.context.WebApplicationContext;</code></div><div class="line number13 index12 alt2">&nbsp;</div><div class="line number14 index13 alt1"><code class="java keyword">import</code> <code class="java keyword">static</code> <code class="java plain">org.hamcrest.Matchers.hasProperty;</code></div><div class="line number15 index14 alt2"><code class="java keyword">import</code> <code class="java keyword">static</code> <code class="java plain">org.hamcrest.Matchers.is;</code></div><div class="line number16 index15 alt1"><code class="java keyword">import</code> <code class="java keyword">static</code> <code class="java plain">org.hamcrest.Matchers.nullValue;</code></div><div class="line number17 index16 alt2"><code class="java keyword">import</code> <code class="java keyword">static</code> <code class="java plain">org.mockito.Mockito.*;</code></div><div class="line number18 index17 alt1"><code class="java keyword">import</code> <code class="java keyword">static</code> <code class="java plain">org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;</code></div><div class="line number19 index18 alt2"><code class="java keyword">import</code> <code class="java keyword">static</code> <code class="java plain">org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;</code></div><div class="line number20 index19 alt1">&nbsp;</div><div class="line number21 index20 alt2"><code class="java color1">@RunWith</code><code class="java plain">(SpringJUnit4ClassRunner.</code><code class="java keyword">class</code><code class="java plain">)</code></div><div class="line number22 index21 alt1"><code class="java color1">@ContextConfiguration</code><code class="java plain">(classes = {TestContext.</code><code class="java keyword">class</code><code class="java plain">, WebAppContext.</code><code class="java keyword">class</code><code class="java plain">})</code></div><div class="line number23 index22 alt2"><code class="java color1">@WebAppConfiguration</code></div><div class="line number24 index23 alt1"><code class="java keyword">public</code> <code class="java keyword">class</code> <code class="java plain">TodoControllerTest {</code></div><div class="line number25 index24 alt2">&nbsp;</div><div class="line number26 index25 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java plain">MockMvc mockMvc;</code></div><div class="line number27 index26 alt2">&nbsp;</div><div class="line number28 index27 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Autowired</code></div><div class="line number29 index28 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java plain">TodoService todoServiceMock;</code></div><div class="line number30 index29 alt1">&nbsp;</div><div class="line number31 index30 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java comments">//Add WebApplicationContext field here</code></div><div class="line number32 index31 alt1">&nbsp;</div><div class="line number33 index32 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java comments">//The setUp() method is omitted.</code></div><div class="line number34 index33 alt1">&nbsp;</div><div class="line number35 index34 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Test</code></div><div class="line number36 index35 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java keyword">void</code> <code class="java plain">add_DescriptionAndTitleAreTooLong_ShouldRenderFormViewAndReturnValidationErrorsForTitleAndDescription() </code><code class="java keyword">throws</code> <code class="java plain">Exception {</code></div><div class="line number37 index36 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">String title = TestUtil.createStringWithLength(</code><code class="java value">101</code><code class="java plain">);</code></div><div class="line number38 index37 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">String description = TestUtil.createStringWithLength(</code><code class="java value">501</code><code class="java plain">);</code></div><div class="line number39 index38 alt2">&nbsp;</div><div class="line number40 index39 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">mockMvc.perform(post(</code><code class="java string">"/todo/add"</code><code class="java plain">)</code></div><div class="line number41 index40 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">.contentType(MediaType.APPLICATION_FORM_URLENCODED)</code></div><div class="line number42 index41 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">.param(</code><code class="java string">"description"</code><code class="java plain">, description)</code></div><div class="line number43 index42 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">.param(</code><code class="java string">"title"</code><code class="java plain">, title)</code></div><div class="line number44 index43 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">.sessionAttr(</code><code class="java string">"todo"</code><code class="java plain">, </code><code class="java keyword">new</code> <code class="java plain">TodoDTO())</code></div><div class="line number45 index44 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">)</code></div><div class="line number46 index45 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">.andExpect(status().isOk())</code></div><div class="line number47 index46 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">.andExpect(view().name(</code><code class="java string">"todo/add"</code><code class="java plain">))</code></div><div class="line number48 index47 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">.andExpect(forwardedUrl(</code><code class="java string">"/WEB-INF/jsp/todo/add.jsp"</code><code class="java plain">))</code></div><div class="line number49 index48 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">.andExpect(model().attributeHasFieldErrors(</code><code class="java string">"todo"</code><code class="java plain">, </code><code class="java string">"title"</code><code class="java plain">))</code></div><div class="line number50 index49 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">.andExpect(model().attributeHasFieldErrors(</code><code class="java string">"todo"</code><code class="java plain">, </code><code class="java string">"description"</code><code class="java plain">))</code></div><div class="line number51 index50 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">.andExpect(model().attribute(</code><code class="java string">"todo"</code><code class="java plain">, hasProperty(</code><code class="java string">"id"</code><code class="java plain">, nullValue())))</code></div><div class="line number52 index51 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">.andExpect(model().attribute(</code><code class="java string">"todo"</code><code class="java plain">, hasProperty(</code><code class="java string">"description"</code><code class="java plain">, is(description))))</code></div><div class="line number53 index52 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">.andExpect(model().attribute(</code><code class="java string">"todo"</code><code class="java plain">, hasProperty(</code><code class="java string">"title"</code><code class="java plain">, is(title))));</code></div><div class="line number54 index53 alt1">&nbsp;</div><div class="line number55 index54 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">verifyZeroInteractions(todoServiceMock);</code></div><div class="line number56 index55 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number57 index56 alt2"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><p class="cye-lm-tag">Our test case calls the static <em>createStringWithLength(int length)</em> method of the <em>TestUtil</em> class. This method creates a new <em>String</em> object with the given length and returns the created object.</p>
<p class="cye-lm-tag">The source code of the <em>TestUtil</em> class looks as follows:</p>
<div><div id="highlighter_754531" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div>
<div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">import</code> <code class="java plain">com.fasterxml.jackson.annotation.JsonInclude;</code></div><div class="line number2 index1 alt1"><code class="java keyword">import</code> <code class="java plain">com.fasterxml.jackson.databind.ObjectMapper;</code></div><div class="line number3 index2 alt2">&nbsp;</div><div class="line number4 index3 alt1"><code class="java keyword">import</code> <code class="java plain">java.util.Iterator;</code></div><div class="line number5 index4 alt2"><code class="java keyword">import</code> <code class="java plain">java.util.Map;</code></div><div class="line number6 index5 alt1"><code class="java keyword">import</code> <code class="java plain">java.util.Set;</code></div><div class="line number7 index6 alt2">&nbsp;</div><div class="line number8 index7 alt1"><code class="java keyword">public</code> <code class="java keyword">class</code> <code class="java plain">TestUtil {</code></div><div class="line number9 index8 alt2">&nbsp;</div><div class="line number10 index9 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java keyword">static</code> <code class="java plain">String createStringWithLength(</code><code class="java keyword">int</code> <code class="java plain">length) {</code></div><div class="line number11 index10 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">StringBuilder builder = </code><code class="java keyword">new</code> <code class="java plain">StringBuilder();</code></div><div class="line number12 index11 alt1">&nbsp;</div><div class="line number13 index12 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">for</code> <code class="java plain">(</code><code class="java keyword">int</code> <code class="java plain">index = </code><code class="java value">0</code><code class="java plain">; index &lt; length; index++) {</code></div><div class="line number14 index13 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">builder.append(</code><code class="java string">"a"</code><code class="java plain">);</code></div><div class="line number15 index14 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number16 index15 alt1">&nbsp;</div><div class="line number17 index16 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">return</code> <code class="java plain">builder.toString();</code></div><div class="line number18 index17 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number19 index18 alt2"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><h4>Test 2: Todo Entry Is Added to The Database</h4><p class="cye-lm-tag">Second, we have to write a test which ensures that our controller is working properly when a new todo entry is added to the database. We can write this test by following these steps:</p>
<ol><li>Create a <em>Todo</em> object which is returned when the <em>add()</em> method of the <em>TodoService</em> interface is called.</li><li>Configure our mock object to return the created <em>Todo</em> object when its <em>add()</em> method is called a <em>TodoDTO</em> object is given as a method parameter.</li><li>Execute a <em>POST</em> request to url ‘/todo/add’ by following these steps:<ol><li>Set the content type of the request to ‘application/x-www-form-urlencoded’.</li><li>Send the <em>description</em> and <em>title</em> of the todo entry as request parameters.</li><li>Set a new <em>TodoDTO</em> object to session. This is required because our controller is annotated with the <em>@SessionAttributes</em> annotation.</li></ol></li><li>Verify that the HTTP status code 302 is returned.</li><li>Ensure that the name of the returned view is ‘redirect:todo/{id}’.</li><li>Ensure that the request is redirected to url ‘/todo/1’.</li><li>Verify that the model attribute called <em>id</em> is ‘1’.</li><li>Verify that the feedback message is set.</li><li>Verify that the <em>add()</em> method of our mock object is called only once and that a <em>TodoDTO</em> object was given as a method parameter. Capture the object given as a method parameter by using an <em>ArgumentCaptor</em> object.</li><li>Verify that no other methods of the mock object were called during our test.</li><li>Verify that the field values of the <em>TodoDTO</em> object are correct.</li></ol><p class="cye-lm-tag">The source code of our unit test looks as follows:</p>
<div><div id="highlighter_117530" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div class="line number23 index22 alt2">23</div><div class="line number24 index23 alt1">24</div><div class="line number25 index24 alt2">25</div><div class="line number26 index25 alt1">26</div><div class="line number27 index26 alt2">27</div><div class="line number28 index27 alt1">28</div><div class="line number29 index28 alt2">29</div><div class="line number30 index29 alt1">30</div><div class="line number31 index30 alt2">31</div><div class="line number32 index31 alt1">32</div><div class="line number33 index32 alt2">33</div><div class="line number34 index33 alt1">34</div><div class="line number35 index34 alt2">35</div><div class="line number36 index35 alt1">36</div><div class="line number37 index36 alt2">37</div><div class="line number38 index37 alt1">38</div><div class="line number39 index38 alt2">39</div><div class="line number40 index39 alt1">40</div><div class="line number41 index40 alt2">41</div><div class="line number42 index41 alt1">42</div><div class="line number43 index42 alt2">43</div><div class="line number44 index43 alt1">44</div><div class="line number45 index44 alt2">45</div><div class="line number46 index45 alt1">46</div><div class="line number47 index46 alt2">47</div><div class="line number48 index47 alt1">48</div><div class="line number49 index48 alt2">49</div><div class="line number50 index49 alt1">50</div><div class="line number51 index50 alt2">51</div><div class="line number52 index51 alt1">52</div><div class="line number53 index52 alt2">53</div><div class="line number54 index53 alt1">54</div><div class="line number55 index54 alt2">55</div><div class="line number56 index55 alt1">56</div><div class="line number57 index56 alt2">57</div><div class="line number58 index57 alt1">58</div><div class="line number59 index58 alt2">59</div><div class="line number60 index59 alt1">60</div><div class="line number61 index60 alt2">61</div><div class="line number62 index61 alt1">62</div><div class="line number63 index62 alt2">63</div><div class="line number64 index63 alt1">64</div><div class="line number65 index64 alt2">65</div><div class="line number66 index65 alt1">66</div><div class="line number67 index66 alt2">67</div><div class="line number68 index67 alt1">68</div><div class="line number69 index68 alt2">69</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">import</code> <code class="java plain">org.junit.Before;</code></div><div class="line number2 index1 alt1"><code class="java keyword">import</code> <code class="java plain">org.junit.Test;</code></div><div class="line number3 index2 alt2"><code class="java keyword">import</code> <code class="java plain">org.junit.runner.RunWith;</code></div><div class="line number4 index3 alt1"><code class="java keyword">import</code> <code class="java plain">org.mockito.ArgumentCaptor;</code></div><div class="line number5 index4 alt2"><code class="java keyword">import</code> <code class="java plain">org.mockito.Mockito;</code></div><div class="line number6 index5 alt1"><code class="java keyword">import</code> 
<code class="java plain">org.springframework.beans.factory.annotation.Autowired;</code></div><div class="line number7 index6 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.http.MediaType;</code></div><div class="line number8 index7 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.test.context.ContextConfiguration;</code></div><div class="line number9 index8 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</code></div><div class="line number10 index9 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.test.context.web.WebAppConfiguration;</code></div><div class="line number11 index10 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.test.web.servlet.MockMvc;</code></div><div class="line number12 index11 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.test.web.servlet.setup.MockMvcBuilders;</code></div><div class="line number13 index12 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.web.context.WebApplicationContext;</code></div><div class="line number14 index13 alt1">&nbsp;</div><div class="line number15 index14 alt2"><code class="java keyword">import</code> <code class="java keyword">static</code> <code class="java plain">org.hamcrest.Matchers.is;</code></div><div class="line number16 index15 alt1"><code class="java keyword">import</code> <code class="java keyword">static</code> <code class="java plain">org.junit.Assert.assertNull;</code></div><div class="line number17 index16 alt2"><code class="java keyword">import</code> <code class="java keyword">static</code> <code class="java plain">org.junit.Assert.assertThat;</code></div><div class="line number18 index17 alt1"><code class="java keyword">import</code> <code class="java keyword">static</code> <code class="java plain">org.mockito.Matchers.isA;</code></div><div class="line number19 index18 alt2"><code class="java keyword">import</code> <code class="java keyword">static</code> <code class="java plain">org.mockito.Mockito.*;</code></div><div class="line number20 index19 alt1"><code class="java keyword">import</code> <code class="java keyword">static</code> <code class="java plain">org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;</code></div><div class="line number21 index20 alt2"><code class="java keyword">import</code> <code class="java keyword">static</code> <code class="java plain">org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;</code></div><div class="line number22 index21 alt1">&nbsp;</div><div class="line number23 index22 alt2"><code class="java color1">@RunWith</code><code class="java plain">(SpringJUnit4ClassRunner.</code><code class="java keyword">class</code><code class="java plain">)</code></div><div class="line number24 index23 alt1"><code class="java color1">@ContextConfiguration</code>
<code class="java plain">(classes = {TestContext.</code><code class="java keyword">class</code><code class="java plain">, WebAppContext.</code><code class="java keyword">class</code><code class="java plain">})</code></div><div class="line number25 index24 alt2"><code class="java color1">@WebAppConfiguration</code></div><div class="line number26 index25 alt1"><code class="java keyword">public</code> <code class="java keyword">class</code> <code class="java plain">TodoControllerTest {</code></div><div class="line number27 index26 alt2">&nbsp;</div><div class="line number28 index27 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java plain">MockMvc mockMvc;</code></div><div class="line number29 index28 alt2">&nbsp;</div><div class="line number30 index29 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Autowired</code></div><div class="line number31 index30 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java plain">TodoService todoServiceMock;</code></div><div class="line number32 index31 alt1">&nbsp;</div><div class="line number33 index32 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java comments">//Add WebApplicationContext field here</code></div><div class="line number34 index33 alt1">&nbsp;</div><div class="line number35 index34 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java comments">//The setUp() method is omitted.</code></div><div class="line number36 index35 alt1">&nbsp;</div><div class="line number37 index36 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Test</code></div><div class="line number38 index37 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java keyword">void</code> <code class="java plain">add_NewTodoEntry_ShouldAddTodoEntryAndRenderViewTodoEntryView() </code><code class="java keyword">throws</code> <code class="java plain">Exception {</code></div><div class="line number39 index38 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">Todo added = </code><code class="java keyword">new</code> <code class="java plain">TodoBuilder()</code></div><div class="line number40 index39 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">.id(1L)</code></div><div class="line number41 index40 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">.description(</code><code class="java string">"description"</code><code class="java plain">)</code></div><div class="line number42 index41 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">.title(</code><code class="java string">"title"</code><code class="java plain">)</code></div><div class="line number43 index42 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">.build();</code></div>
<div class="line number44 index43 alt1">&nbsp;</div><div class="line number45 index44 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">when(todoServiceMock.add(isA(TodoDTO.</code><code class="java keyword">class</code><code class="java plain">))).thenReturn(added);</code></div><div class="line number46 index45 alt1">&nbsp;</div><div class="line number47 index46 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">mockMvc.perform(post(</code><code class="java string">"/todo/add"</code><code class="java plain">)</code></div><div class="line number48 index47 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">.contentType(MediaType.APPLICATION_FORM_URLENCODED)</code></div><div class="line number49 index48 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">.param(</code><code class="java string">"description"</code><code class="java plain">, </code><code class="java string">"description"</code><code class="java plain">)</code></div><div class="line number50 index49 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">.param(</code><code class="java string">"title"</code><code class="java plain">, </code><code class="java string">"title"</code><code class="java plain">)</code></div><div class="line number51 index50 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">.sessionAttr(</code><code class="java string">"todo"</code><code class="java plain">, </code><code class="java keyword">new</code> <code class="java plain">TodoDTO())</code></div><div class="line number52 index51 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">)</code></div><div class="line number53 index52 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">.andExpect(status().isMovedTemporarily())</code></div><div class="line number54 index53 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">.andExpect(view().name(</code><code class="java string">"redirect:todo/{id}"</code><code class="java plain">))</code></div><div class="line number55 index54 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">.andExpect(redirectedUrl(</code><code class="java string">"/todo/1"</code><code class="java plain">))</code></div><div class="line number56 index55 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">.andExpect(model().attribute(</code><code class="java string">"id"</code><code class="java plain">, is(</code><code class="java string">"1"</code><code class="java plain">)))</code></div><div class="line number57 index56 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>
<code class="java plain">.andExpect(flash().attribute(</code><code class="java string">"feedbackMessage"</code><code class="java plain">, is(</code><code class="java string">"Todo entry: title was added."</code><code class="java plain">)));</code></div><div class="line number58 index57 alt1">&nbsp;</div><div class="line number59 index58 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">ArgumentCaptor&lt;TodoDTO&gt; formObjectArgument = ArgumentCaptor.forClass(TodoDTO.</code><code class="java keyword">class</code><code class="java plain">);</code></div><div class="line number60 index59 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">verify(todoServiceMock, times(</code><code class="java value">1</code><code class="java plain">)).add(formObjectArgument.capture());</code></div><div class="line number61 index60 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">verifyNoMoreInteractions(todoServiceMock);</code></div><div class="line number62 index61 alt1">&nbsp;</div><div class="line number63 index62 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">TodoDTO formObject = formObjectArgument.getValue();</code></div><div class="line number64 index63 alt1">&nbsp;</div><div class="line number65 index64 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">assertThat(formObject.getDescription(), is(</code><code class="java string">"description"</code><code class="java plain">));</code></div><div class="line number66 index65 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">assertNull(formObject.getId());</code></div><div class="line number67 index66 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">assertThat(formObject.getTitle(), is(</code><code class="java string">"title"</code><code class="java plain">));</code></div><div class="line number68 index67 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number69 index68 alt2"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><p class="cye-lm-tag"></p>
<h2>Summary</h2>
<p class="cye-lm-tag">We have now written some unit tests for “normal” controller methods by using the Spring MVC Test framework. This tutorial has taught has four things:</p>
<ul><li>We learned to create requests which are processed by the tested controller methods.</li><li>We learned to write assertions for the responses returned by the tested controller methods.</li><li>We learned how we can write unit tests for controller methods which render a view.</li><li>We learned to write unit tests for controller methods which handle form submissions.</li></ul><p class="cye-lm-tag">The next part of this tutorial describes how we can <a href="http://www.petrikainulainen.net/programming/spring-framework/unit-testing-of-spring-mvc-controllers-rest-api/">write unit tests for a REST API</a>.</p>
<p class="cye-lm-tag"><strong>P.S.</strong> You can <a href="https://github.com/pkainulainen/spring-mvc-test-examples/tree/master/controllers-unittest" target="_blank">get the example application of this blog post from Github</a>. I recommend that you check it out because it has some unit tests which were not covered in this blog post.</p>
 <span id="tve_leads_end_content" style="display: block; visibility: hidden; border: 1px solid transparent;" class="cye-lm-tag"></span>

 </div>

<br><hr>
<section id="comments"><div class="comments_intro"><span class="num_comments cye-lm-tag">155</span> comments… <a href="#commentform" rel="nofollow">add one</a></div><ul class="comment_list"><li class="comment even thread-even depth-1" id="comment-269932"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">viswa</span>  <span class="comment_date cye-lm-tag">August 13, 2013, 18:59</span></div><div class="comment_text" id="comment-body-269932"><p class="cye-lm-tag">Its really helpful. Please consider to give as eclipse project. It will be very useful for a lot those don’t use maven like me</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-269941"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">August 13, 2013, 20:24</span></div><div class="comment_text" id="comment-body-269941"><p class="cye-lm-tag">Thank you for your comment.</p>
<p class="cye-lm-tag">Unfortunately I don’t use Eclipse (I switched to IntelliJ Idea a few years ago).</p>
<p class="cye-lm-tag">However, you can import Maven projects to Eclipse by using the Eclipse Maven plugin (<a href="http://www.eclipse.org/m2e/" target="_blank" rel="nofollow">m2e</a>). Check out <a href="http://www.ryanchapin.com/Home?article_id=716" target="_blank" rel="nofollow">this blog post</a> for more details about this.</p>
<p class="cye-lm-tag">I hope that this helps you to get the project up and running!</p>
</div> </div></li></ul></li><li class="comment even thread-odd thread-alt depth-1" id="comment-271150"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Rachid</span>  <span class="comment_date cye-lm-tag">August 26, 2013, 15:39</span></div><div class="comment_text" id="comment-body-271150"><p class="cye-lm-tag">thank you very much</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-271151"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">August 26, 2013, 15:45</span></div><div class="comment_text" id="comment-body-271151"><p class="cye-lm-tag">You are welcome!</p>
</div> </div></li></ul></li><li class="comment even thread-even depth-1" id="comment-275248"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">adil ramdan</span>  <span class="comment_date cye-lm-tag">September 30, 2013, 06:19</span></div><div class="comment_text" id="comment-body-275248"><p class="cye-lm-tag">thanks for your post , but i have a question i have i form with at least 150 field, is there another ways to make the test more simple ?<br> because when i try your ways its really works, but its very complicated :(<br> thanks :D</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-275340"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">September 30, 2013, 21:19</span></div><div class="comment_text" id="comment-body-275340"><p class="cye-lm-tag">Unfortunately I have to say that I am not aware of a way which would make testing easier if you have very large forms. Is it possible to split that form into smaller forms?</p>
</div> </div><ul class="children"><li class="comment even depth-3" id="comment-275632"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Adil Ramdan</span>  <span class="comment_date cye-lm-tag">October 3, 2013, 11:51</span></div><div class="comment_text" id="comment-body-275632"><p class="cye-lm-tag">I think my form not possible to split because its one model.. :(<br> hy petri what the best tools according to you which used for test  presentation layer(view) ?<br> thanks very much petri :D</p>
</div> </div></li></ul></li></ul></li><li class="comment odd alt thread-odd thread-alt depth-1" id="comment-277582"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Chandu</span>  <span class="comment_date cye-lm-tag">October 12, 2013, 00:47</span></div><div class="comment_text" id="comment-body-277582"><p class="cye-lm-tag">I am getting NullPointerException during this line</p>
<p class="cye-lm-tag">mockMvc.perform(get(“/”)).</p>
<p class="cye-lm-tag">Am I missing any thing?</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-277584"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">October 12, 2013, 00:52</span></div><div class="comment_text" id="comment-body-277584"><p class="cye-lm-tag">Did you remember to configure your unit tests and create the <code>MockMvc</code> object as explained <a href="https://www.petrikainulainen.net/programming/spring-framework/unit-testing-of-spring-mvc-controllers-configuration/" rel="nofollow">in the first part of this tutorial</a>?</p>
</div> </div></li></ul></li><li class="comment odd alt thread-even depth-1" id="comment-288028"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">wwww</span>  <span class="comment_date cye-lm-tag">November 15, 2013, 09:28</span></div><div class="comment_text" id="comment-body-288028"><p class="cye-lm-tag">need those methods’API</p>
</div> </div></li><li class="comment byuser comment-author-petrikainulainen bypostauthor even thread-odd thread-alt depth-1" id="comment-288098"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">November 15, 2013, 13:25</span></div><div class="comment_text" id="comment-body-288098"><p class="cye-lm-tag">Check out the Javadocs of the these classes:</p>
<ul><li><a href="http://docs.spring.io/spring/docs/3.2.x/javadoc-api/org/springframework/test/web/servlet/MockMvc.html" target="_blank" rel="nofollow"><code>MockMvc</code></a></li><li><a href="http://docs.spring.io/spring/docs/3.2.x/javadoc-api/org/springframework/test/web/servlet/request/MockMvcRequestBuilders.html" target="_blank" rel="nofollow"><code>MockMvcRequestBuilders</code></a></li><li><a href="http://docs.spring.io/spring/docs/3.2.x/javadoc-api/org/springframework/test/web/servlet/result/MockMvcResultMatchers.html" target="_blank" rel="nofollow"><code>MockMvcResultMatchers</code></a></li></ul></div> </div></li><li class="comment odd alt thread-even depth-1" id="comment-295373"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Steve Johann</span>  <span class="comment_date cye-lm-tag">December 4, 2013, 15:59</span></div><div class="comment_text" id="comment-body-295373"><p class="cye-lm-tag">Very nice article!</p>
<p class="cye-lm-tag">Thank you!</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-295510"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">December 4, 2013, 19:47</span></div><div class="comment_text" id="comment-body-295510"><p class="cye-lm-tag">You are welcome! I am happy to hear that you like this blog post.</p>
</div> </div></li></ul></li><li class="comment odd alt thread-odd thread-alt depth-1" id="comment-305055"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Andrew</span>  <span class="comment_date cye-lm-tag">December 13, 2013, 22:47</span></div><div class="comment_text" id="comment-body-305055"><p class="cye-lm-tag">Great article. However when I tried start the server (clean jetty:run), I received a message:</p>
<p class="cye-lm-tag">2013-12-13 21:39:57.502:INFO:oejs.Server:jetty-8.1.5.v20120716<br> 2013-12-13 21:39:58.488:INFO:oejpw.PlusConfiguration:No Transaction manager found – if your webapp requires one, please configure one.<br> 2013-12-13 21:40:04.835:INFO:/:No Spring WebApplicationInitializer types detected on classpath<br> …<br> 2013-12-13 21:40:05.318:INFO:oejs.AbstractConnector:Started SelectChannelConnector@0.0.0.0:8080</p>
<p class="cye-lm-tag">and I saw content of directory / (WEB-INF, static).</p>
<p class="cye-lm-tag">Is there something I’m doing wrong?</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-305121"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">December 14, 2013, 00:54</span></div><div class="comment_text" id="comment-body-305121"><p class="cye-lm-tag">Did you clone the example project from <a href="https://github.com/pkainulainen/spring-mvc-test-examples/tree/master/controllers-unittest" target="_blank" rel="nofollow">Github</a> or did you try to create one from the scratch by following my instructions?</p>
<p class="cye-lm-tag">The log message which you should be interested in this is this:</p>
<p class="cye-lm-tag"><code>2013-12-13 21:40:04.835:INFO:/:No Spring WebApplicationInitializer types detected on classpath</code></p>
<p class="cye-lm-tag">It means that Jetty did not find <a href="https://github.com/pkainulainen/spring-mvc-test-examples/blob/master/controllers-unittest/src/main/java/net/petrikainulainen/spring/testmvc/config/ExampleApplicationConfig.java" target="_blank" rel="nofollow">the configuration class of the web application</a> (click the link to see the configuration class of the example application). The Spring <a href="http://docs.spring.io/spring/docs/3.2.x/spring-framework-reference/htmlsingle/#mvc-servlet" target="_blank" rel="nofollow">reference manual has also more information about this</a>.</p>
<p class="cye-lm-tag">I hope that I could answer to your question.</p>
</div> </div></li></ul></li><li class="comment odd alt thread-even depth-1" id="comment-335561"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag"><a href="https://github.com/santoshjoshi" rel="external nofollow" class="url">santosh joshi</a></span>  <span class="comment_date cye-lm-tag">January 17, 2014, 07:31</span></div><div class="comment_text" id="comment-body-335561"><p class="cye-lm-tag">Very Nice and great article covering almost every thing.</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-341229"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">January 20, 2014, 17:59</span></div><div class="comment_text" id="comment-body-341229"><p class="cye-lm-tag">Thank you for your kind words.</p>
<p class="cye-lm-tag">These tutorials cover almost everything but one thing that is missing is writing unit tests for file uploads. Do you think that this would be an useful addition to these tutorials?</p>
</div> </div></li></ul></li><li class="comment odd alt thread-odd thread-alt depth-1" id="comment-338453"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag"><a href="http://www.edwardbeckett.com" rel="external nofollow" class="url">Edward Beckett</a></span>  <span class="comment_date cye-lm-tag">January 18, 2014, 22:47</span></div><div class="comment_text" id="comment-body-338453"><p class="cye-lm-tag">Awesome write up … keep em coming…</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-341230"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">January 20, 2014, 18:00</span></div><div class="comment_text" id="comment-body-341230"><p class="cye-lm-tag">Thank you! I will.</p>
</div> </div></li></ul></li><li class="comment odd alt thread-even depth-1" id="comment-343663"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">bos</span>  <span class="comment_date cye-lm-tag">January 22, 2014, 12:24</span></div><div class="comment_text" id="comment-body-343663"><p class="cye-lm-tag">Thanks for your great tutorial about testing in Spring Platform.<br> I am a newbie in testing of Spring MVC. I’m a bit confused about integration tests and unit tests.<br> I downloaded the source codes from Github. Which project gives a complete guide for testing?<br> For example, “controllers” project tests controller activities, controller-unittest also test controller activities.<br> But Spring-32 project makes testing of routing inside the integration-test, unit-test side does not have a routing test.<br> As I mentioned earlier, the previous projects have routing tests in both sides unit-test and integration-test.</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-344141"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">January 22, 2014, 19:48</span></div><div class="comment_text" id="comment-body-344141"><p class="cye-lm-tag">I will try to clarify things a bit:</p>
<p class="cye-lm-tag">I wrote most of the integration testing tutorials before Spring Framework 3.2 was released. These tutorials use a standalone library called spring-test-mvc. When Spring 3.2 was released, the code of this library was included in the Spring Test Framework.</p>
<p class="cye-lm-tag">In other words, if you want to simply read the source code, you should check out the example applications of my unit testing tutorials. These applications use the Spring MVC Test framework in both unit and integration tests.</p>
<p class="cye-lm-tag">I hope that this answered to your question. If not, feel free to answer to my comment. :)</p>
</div> </div></li></ul></li><li class="comment odd alt thread-odd thread-alt depth-1" id="comment-370834"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">kazaff</span>  <span class="comment_date cye-lm-tag">February 23, 2014, 13:27</span></div><div class="comment_text" id="comment-body-370834"><p class="cye-lm-tag">this is the best post that i found！</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-372100"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">February 25, 2014, 18:18</span></div><div class="comment_text" id="comment-body-372100"><p class="cye-lm-tag">Thank you for your kind words. I really appreciate them.</p>
</div> </div></li></ul></li><li class="comment odd alt thread-even depth-1" id="comment-499369"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Marco</span>  <span class="comment_date cye-lm-tag">April 23, 2014, 08:15</span></div><div class="comment_text" id="comment-body-499369"><p class="cye-lm-tag">Hi Petri! Thank you for these very useful tutorial!</p>
<p class="cye-lm-tag">I’m trying to test my controller in the way you explain in this tutorial (like add_DescriptionAndTitleAreTooLong_ShouldRenderFormViewAndReturnValidationErrorsForTitleAndDescription), but when i post() content() data to my controller, handler method is triggered and the backing object is not populated.. all properties are null.</p>
<p class="cye-lm-tag">Without lose your time.. do you know which could be the problem? :)</p>
<p class="cye-lm-tag">Thank you very much!! I’m waiting for your new testing book!! I hope goes on sale soon!</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-499729"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri Kainulainen</span>  <span class="comment_date cye-lm-tag">April 23, 2014, 09:44</span></div><div class="comment_text" id="comment-body-499729"><p class="cye-lm-tag">Hi Marco,</p>
<p class="cye-lm-tag">There are two possible reasons for this:</p>
<ol><li>Your controller class isn’t annotated with the <code>@SessionAttributes</code> annotation.</li><li>You didn’t put the form object to session when you invoke the handler method in your test.</li></ol><p class="cye-lm-tag">The relevant part of the <code>TodoController</code> class looks as follows:</p>
<pre><code>
@Controller
@SessionAttributes("todo")
public class TodoController {
}
</code>
</pre><p class="cye-lm-tag">I use the <a href="http://docs.spring.io/spring/docs/4.0.x/javadoc-api/org/springframework/web/bind/annotation/SessionAttributes.html" target="_blank" rel="nofollow"><code>@SessionAttributes</code></a> annotation to ensure that my form object is saved to a session. This makes it possible to display the “old” field values if validation fails.</p>
<p class="cye-lm-tag">I can now set the form object to session in my test by using the <code>sessionAttr()</code> method as follows:</p>
<pre><code>
 mockMvc.perform(post("/todo/add")
		.contentType(MediaType.APPLICATION_FORM_URLENCODED)
		.content(TestUtil.convertObjectToFormUrlEncodedBytes(formObject))
		.sessionAttr("todo", formObject)
)
</code>
</pre><p class="cye-lm-tag">I hope that this answered to your question. :)</p>
</div> </div><ul class="children"><li class="comment odd alt depth-3" id="comment-500357"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Marco</span>  <span class="comment_date cye-lm-tag">April 23, 2014, 12:41</span></div><div class="comment_text" id="comment-body-500357"><p class="cye-lm-tag">You have solved my problem! :) Thank you!!</p>
<p class="cye-lm-tag">So the @SessionAttributes annotation in controller is ONLY for testing purpose?</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-4" id="comment-500423"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">April 23, 2014, 12:59</span></div><div class="comment_text" id="comment-body-500423"><p class="cye-lm-tag">You are welcome!</p>
<p class="cye-lm-tag">The <code>@SessionAttributes</code> annotation is used to save your form object to “conversational session”. In other words, you can ensure that your form object is available as long as the form is submitted successfully. That is why the value of the <code>@SessionAttributes</code> annotation and the name of your form object should be equal.</p>
<p class="cye-lm-tag">There is an easy to way to see what it does:</p>
<ul><li>Submit a form which has validation errors (add something to form fields) when your controller class is not annotated with the <code>@SessionAttributes</code> annotation.</li><li>Submit a form which has validation errors (add something to form fields) when your controller class is annotated with the <code>@SessionAttributes</code> annotation.</li></ul><p class="cye-lm-tag">See the difference?</p>
</div> </div><ul class="children"><li class="comment odd alt depth-5" id="comment-501348"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Marco</span>  <span class="comment_date cye-lm-tag">April 23, 2014, 17:17</span></div><div class="comment_text" id="comment-body-501348"><p class="cye-lm-tag">No :) But I think that it’s because I have in my controller</p>
<p class="cye-lm-tag">if (bindingResult.hasErrors()) {<br> uiModel.addAttribute(“message”, new Message(“error”, messageSource.getMessage(“entry_save_fail”, new Object[]{}, locale)));<br> uiModel.addAttribute(“language”, language);<br> DateTimeUtil.dateTimePattern(messageSource, uiModel, locale);<br> return “language/create”;<br> }</p>
<p class="cye-lm-tag">I think that the difference could be that I can avoid to re-add to uiModel Map language object.. could it be?</p>
</div></div></li><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-5" id="comment-501945"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">April 23, 2014, 20:20</span></div><div class="comment_text" id="comment-body-501945"><p class="cye-lm-tag">Actually when I wrote that question I didn’t remember that the difference might not be obvious unless you use a debugger (this depends from the form). Sorry about that.</p>
<p class="cye-lm-tag">Check out this <a href="http://stackoverflow.com/a/4914150/313554" target="_blank" rel="nofollow">Stack Overflow answer</a>. It explains the difference between those two situations.</p>
</div></div></li><li class="comment odd alt depth-5" id="comment-504907"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Marco</span>  <span class="comment_date cye-lm-tag">April 24, 2014, 09:47</span></div><div class="comment_text" id="comment-body-504907"><p class="cye-lm-tag">Thank you. I get it!</p>
<p class="cye-lm-tag">I have tryed to remove an input type tied to a non null property from my update form and:<br> 1) with @SessionAttributes after submit update form the relative property is not null (it reuse the same instance of the object used to create update form and populate values with form properties).<br> 2)without @SessionAttributes the property is null (a new instance is created and populated with form properties).</p>
<p class="cye-lm-tag">So this can be for example a valid method to avoid hidden input in forms?</p>
<p class="cye-lm-tag">Another question is: in this test the following line:</p>
<p class="cye-lm-tag">.content(TestUtil.convertObjectToFormUrlEncodedBytes(formObject))</p>
<p class="cye-lm-tag">could be removed.. no?</p>
<p class="cye-lm-tag">Sorry if I’m flooding your blog with my questions :) Tell me and I’ll stop immediately!</p>
</div></div></li><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-5" id="comment-507072"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">April 24, 2014, 18:05</span></div><div class="comment_text" id="comment-body-507072"><p class="cye-lm-tag">Don’t worry about flooding my blog. If I wouldn’t want to answer questions, I wouldn’t allow people to leave them. :)</p>
<p class="cye-lm-tag">I think that this <a href="http://stackoverflow.com/a/4914357/313554" target="_blank" rel="nofollow">Stack Overflow answer</a> provides a good practical example about the benefits of the <code>@SessionAttributes</code> annotation.</p>
<p class="cye-lm-tag">About your question: You are right. You can remove that line. However, you can remove it only because the session attribute already contains the updated properties. This is not case when the form is really updated. In that case, the session attribute contains the “old” values of the form object, and the <a href="http://stackoverflow.com/a/4914150/313554" target="_blank" rel="nofollow">values send in the request body should replace them</a>. However, when I tried this, it didn’t work.</p>
<p class="cye-lm-tag">Good work. You found a bug from my tests! I have to investigate what is the correct way to test this.</p>
<p class="cye-lm-tag"><strong>Update:</strong> <a href="http://stackoverflow.com/a/17143677/313554" target="_blank" rel="nofollow">I found it</a>. I must update the example application (and this blog post). Again, thanks for noticing this!</p>
</div></div></li><li class="comment odd alt depth-5" id="comment-523672"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Marco</span>  <span class="comment_date cye-lm-tag">April 28, 2014, 08:55</span></div><div class="comment_text" id="comment-body-523672"><p class="cye-lm-tag">I’m glad to be helpful!</p>
<p class="cye-lm-tag">One last thing. I’ve never used @SessionAttributes approach before. Searching on internet I’ve found that it suffers, or suffered (<a href="https://jira.spring.io/browse/SPR-4160" rel="nofollow">https://jira.spring.io/browse/SPR-4160</a> not seems to be resolved) from a problem in tabbed browsing.</p>
<p class="cye-lm-tag">What do you think about it?</p>
<p class="cye-lm-tag">Thanks again!!</p>
</div></div></li><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-5" id="comment-526139"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">April 28, 2014, 21:03</span></div><div class="comment_text" id="comment-body-526139"><p class="cye-lm-tag">I think that this kind of “sucks”. However, I would still listen Juergen Hoeller and use the <a href="http://projects.spring.io/spring-webflow/" target="_blank" rel="nofollow">Spring Web Flow</a> if I would have to support this.</p>
</div></div></li></ul></li></ul></li></ul></li></ul></li><li class="comment odd alt thread-odd thread-alt depth-1" id="comment-588376"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">RB</span>  <span class="comment_date cye-lm-tag">May 12, 2014, 21:27</span></div><div class="comment_text" id="comment-body-588376"><p class="cye-lm-tag">Perti,</p>
<p class="cye-lm-tag">Thanks a lot for the detailed post !!!!!!!<br> I am going to implement the same for my controllers and get back with comments/questions…<br> Really use full blog.</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-588439"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">May 12, 2014, 21:42</span></div><div class="comment_text" id="comment-body-588439"><p class="cye-lm-tag">Thank you for your kind words. I really appreciate them. Also, I am waiting for your comments / questions.</p>
</div> </div></li></ul></li><li class="comment odd alt thread-even depth-1" id="comment-701398"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">HerpDerp</span>  <span class="comment_date cye-lm-tag">June 18, 2014, 16:58</span></div><div class="comment_text" id="comment-body-701398"><p class="cye-lm-tag">In your add_DescriptionAndTitleAreTooLong_ShouldRenderFormViewAndReturnValidationErrorsForTitleAndDescription() on this page you use “.sessionAttr(“todo”, formObject)”, but formObject doesn’t seem to exist. On github this is replaced with “.sessionAttr(“todo”, new TodoDTO())”, so there’s no problem there.</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-701406"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">June 18, 2014, 17:07</span></div><div class="comment_text" id="comment-body-701406"><p class="cye-lm-tag">Thanks!</p>
<p class="cye-lm-tag">I updated this blog post some time ago and probably forgot to change that code example. Anyway, it is fixed now.</p>
<p class="cye-lm-tag">Thanks again!</p>
</div> </div></li></ul></li><li class="comment odd alt thread-odd thread-alt depth-1" id="comment-707319"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">priyanka</span>  <span class="comment_date cye-lm-tag">June 23, 2014, 15:10</span></div><div class="comment_text" id="comment-body-707319"><p class="cye-lm-tag">I am want to mock “public void claimTask(String taskId, String userId);”  this method which i am calling in my Rest web sevice how do i do it ?<br> I am not getting the ouput</p>
<pre><code>
@Test
public void testClaimSuccess() throws Exception{
		 
	doNothing()
	.doThrow(new RuntimeException("t1"))
	.when(cmmnEngineRuntimeService).claimTask("t1", "u1");	
		
	this.mockMvc
		.perform(MockMvcRequestBuilders.post(
				"/cmmncase/claim/{taskId}","taskId")
		)
		.andExpect(status().isOk())
		.andExpect(redirectedUrl("claim/t1"))
		.andExpect(model().size(1))
		.andExpect(model().attributeExists("claim"))
		.andExpect(flash().attributeCount(1))
		.andExpect(flash().attribute(
				"You have Claim The Task", 
				"success"
		));		                  
}
</code>
</pre></div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-707550"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">June 23, 2014, 19:08</span></div><div class="comment_text" id="comment-body-707550"><p class="cye-lm-tag">If you want that the <code>void claimTask(String taskId, String userId)</code> method throws a <code>RuntimeException</code> when it is called by using method parameters "t1" and "u1", you should mock it like this:</p>
<pre><code>
doThrow(new RuntimeException("foo"))
	.when(cmmnEngineRuntimeService)
	.claimTask("t1", "u1");
</code>
</pre><p class="cye-lm-tag"><a href="http://site.mockito.org/mockito/docs/1.10.19/org/mockito/Mockito.html#doThrow(java.lang.Throwable)" target="_blank" rel="nofollow">The Javadoc of the <code>Mockito</code> class’ <code>doThrow()</code> method</a> provides more information about this.</p>
</div> </div></li></ul></li><li class="comment odd alt thread-even depth-1" id="comment-710555"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Nikhil</span>  <span class="comment_date cye-lm-tag">June 26, 2014, 17:57</span></div><div class="comment_text" id="comment-body-710555"><p class="cye-lm-tag">Heyy buddy.. i want to Write Junit test for this Controller.. please help me Out..!</p>
<p class="cye-lm-tag">@Controller<br> @RequestMapping(“/login”)<br> public class LoginController {<br> private LoginUser loginUser;<br> private Logger logger=null;<br> public LoginController() {<br> logger=Logger.getRootLogger();<br> }<br> @RequestMapping(method=RequestMethod.GET)<br> public String showForm(LoginUser user) {<br> logger.info(“User Get Login Page”);<br> return “login”;<br> }</p>
<p class="cye-lm-tag"> @RequestMapping(method = RequestMethod.POST)<br> public String processForm(@Valid LoginUser loginUser, BindingResult result) {<br> String userName = “Admin”;<br> String password = “Admin”;</p>
<p class="cye-lm-tag"> if (result.hasErrors()) {<br> logger.info(“User Login Page has Errors”);<br> return “login”;<br> }</p>
<p class="cye-lm-tag"> if (!loginUser.getUserName().equals(userName) || !loginUser.getPassword().equals(password)) {<br> logger.info(“User is not a Valid User”);<br> return “error”;<br> }</p>
<p class="cye-lm-tag"> logger.info(“User is a Valid User, Get Success Page”);<br> return “success”;<br> }</p>
<p class="cye-lm-tag"> public LoginUser getLoginUser() {<br> return loginUser;<br> }</p>
<p class="cye-lm-tag"> public void setLoginUser(LoginUser loginUser) {<br> this.loginUser = loginUser;<br> }</p>
<p class="cye-lm-tag">}</p>
</div> </div><ul class="children"><li class="comment even depth-2" id="comment-710558"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Nikhil</span>  <span class="comment_date cye-lm-tag">June 26, 2014, 18:02</span></div><div class="comment_text" id="comment-body-710558"><p class="cye-lm-tag">Hey i post my code here but its not display</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-3" id="comment-710577"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">June 26, 2014, 18:20</span></div><div class="comment_text" id="comment-body-710577"><p class="cye-lm-tag">The comments of my blog are moderated. This means that comment isn’t published until I approve it. Also, you should see a message if your comment is in moderation queue.</p>
<p class="cye-lm-tag">I am currently on a summer holiday so I will not check my blog all the time. I hope that you understand this.</p>
</div> </div><ul class="children"><li class="comment even depth-4" id="comment-710582"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Nikhil</span>  <span class="comment_date cye-lm-tag">June 26, 2014, 18:23</span></div><div class="comment_text" id="comment-body-710582"><p class="cye-lm-tag">Hmm..!</p>
<p class="cye-lm-tag"> But please solve my problem as you get some free time..! thanks buddy..! Enjoy Holiday..!</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-5" id="comment-710591"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">June 26, 2014, 18:31</span></div><div class="comment_text" id="comment-body-710591"><p class="cye-lm-tag">I answered to your question <a href="https://www.petrikainulainen.net/programming/spring-framework/unit-testing-of-spring-mvc-controllers-normal-controllers/#comment-710588" rel="nofollow">here</a>.</p>
</div></div></li></ul></li></ul></li></ul></li><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-710588"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">June 26, 2014, 18:27</span></div><div class="comment_text" id="comment-body-710588"><p class="cye-lm-tag">You can get started by reading these blog posts:</p>
<ul><li><a href="https://www.petrikainulainen.net/programming/spring-framework/unit-testing-of-spring-mvc-controllers-configuration/" rel="nofollow">Unit Testing of Spring MVC Controllers: Configuration</a> explains how can configure your unit tests which use the Spring MVC Test framework.</li><li><a href="https://www.petrikainulainen.net/programming/spring-framework/unit-testing-of-spring-mvc-controllers-normal-controllers/" rel="nofollow">Unit Testing of Spring MVC Controllers: Normal Controllers </a> describes how you can write unit tests for “normal” Spring MVC controllers.</li><li><a href="https://www.petrikainulainen.net/programming/spring-framework/unit-testing-of-spring-mvc-controllers-rest-api/" rel="nofollow">Unit Testing of Spring MVC Controllers: REST API</a> describes how you can write unit tests for a REST API which is implemented by using Spring MVC.</li></ul><p class="cye-lm-tag">Also, if you want concrete examples, you should take a look a these example applications: <a href="https://github.com/pkainulainen/spring-mvc-test-examples/tree/master/controllers-unittest" target="_blank" rel="nofollow">normal controllers</a> and <a href="https://github.com/pkainulainen/spring-mvc-test-examples/tree/master/rest-unittest" target="_blank" rel="nofollow">REST API</a>.</p>
</div> </div></li></ul></li><li class="comment odd alt thread-odd thread-alt depth-1" id="comment-754105"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">schoudari</span>  <span class="comment_date cye-lm-tag">August 7, 2014, 07:24</span></div><div class="comment_text" id="comment-body-754105"><p class="cye-lm-tag">I have seen so many of tutorials on-line. Your tutorials stand out for the following reasons :<br> a. All best practices of coding, unit-testing and building an almost production-ready code.<br> b. Excellent content organisation and to-the-point explanations. [No Fluff Just Stuff ;-) ]<br> c. Great support in answering blog reader queries</p>
<p class="cye-lm-tag">Thank you for the continuous sharing of your knowledge</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-754654"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">August 7, 2014, 20:26</span></div><div class="comment_text" id="comment-body-754654"><p class="cye-lm-tag">Thank you for your kind words. I really appreciate them. I promise that I will keep learning new things and sharing these things on my blog. :)</p>
</div> </div></li></ul></li><li class="comment odd alt thread-even depth-1" id="comment-766650"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Passarinho</span>  <span class="comment_date cye-lm-tag">August 16, 2014, 02:19</span></div><div class="comment_text" id="comment-body-766650"><p class="cye-lm-tag">Hi i tried to write my own unit test for simply controller and i get many excetions, here is my code:<br> <a href="http://stackoverflow.com/questions/25335343/spring-junit-mockito-unit-test-controller-specified-class-is-an-interface" rel="nofollow">http://stackoverflow.com/questions/25335343/spring-junit-mockito-unit-test-controller-specified-class-is-an-interface</a></p>
<p class="cye-lm-tag">Please help me! :) Thanks</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-767353"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">August 16, 2014, 12:50</span></div><div class="comment_text" id="comment-body-767353"><p class="cye-lm-tag">The problem is that you have imported the <a href="http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/context/TestContext.html" target="_blank" rel="nofollow"><code>org.springframework.test.context.TestContext</code> interface</a>. The configuration of my unit tests uses a <code>TestContext</code> class (I admit that I could have named it a bit better to avoid this).</p>
<p class="cye-lm-tag">Check out the <a href="https://www.petrikainulainen.net/programming/spring-framework/unit-testing-of-spring-mvc-controllers-configuration/" rel="nofollow">first part of this tutorial</a> that explains how can configure your unit tests.</p>
<p class="cye-lm-tag">If you want a quick fix, you should create the <code>TestContext</code> class and use it instead of the <code>TestContext</code> interface. The source code of my <code>TestContext</code> class looks as follows:</p>
<pre><code>
import org.mockito.Mockito;
import org.springframework.context.MessageSource;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.support.ResourceBundleMessageSource;
 
@Configuration
public class TestContext {
 
    @Bean
    public MessageSource messageSource() {
        ResourceBundleMessageSource messageSource = new ResourceBundleMessageSource();
 
        messageSource.setBasename("i18n/messages");
        messageSource.setUseCodeAsDefaultMessage(true);
 
        return messageSource;
    }
 
    @Bean
    public TodoService todoService() {
        return Mockito.mock(TodoService.class);
    }
}
</code>
</pre><p class="cye-lm-tag">You should also rename this class so that you don’t face this problem again.</p>
<p class="cye-lm-tag">By the way, you might want to consider using the standalone configuration because this way you don’t have to configure the required mock objects as beans. The application context based setup becomes painful when you have a lot of mock objects because you have to remember to configure them in your application context configuration class. If you use standalone configuration, you don’t have to worry about this because you can configure the required mock objects in the test class.</p>
</div> </div><ul class="children"><li class="comment odd alt depth-3" id="comment-840267"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Jennifer</span>  <span class="comment_date cye-lm-tag">October 1, 2014, 05:03</span></div><div class="comment_text" id="comment-body-840267"><p class="cye-lm-tag">Great Article. I have problem to git clone your source code. What is the ?</p>
<p class="cye-lm-tag">Thanks.</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-4" id="comment-840914"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">October 1, 2014, 09:22</span></div><div class="comment_text" id="comment-body-840914"><p class="cye-lm-tag">You can <a href="https://github.com/pkainulainen/spring-mvc-test-examples/tree/master/controllers-unittest" target="_blank" rel="nofollow">get the source code from Github</a>.</p>
</div> </div><ul class="children"><li class="comment odd alt depth-5" id="comment-849464"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Anonymous</span>  <span class="comment_date cye-lm-tag">October 4, 2014, 16:31</span></div><div class="comment_text" id="comment-body-849464"><p class="cye-lm-tag">I tried following in gitbash:</p>
<p class="cye-lm-tag">$ git clone <a href="https://github.com/pkainulainen/spring-mvc-test-examples/tree/maste" rel="nofollow">https://github.com/pkainulainen/spring-mvc-test-examples/tree/maste</a><br> r/controllers-unittest<br> Cloning into ‘controllers-unittest’…<br> fatal: repository ‘https://github.com/pkainulainen/spring-mvc-test-examples/tree<br> /master/controllers-unittest/’ not found</p>
<p class="cye-lm-tag">What is my problem?<br> Thanks</p>
</div></div></li><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-5" id="comment-849501"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">October 4, 2014, 16:49</span></div><div class="comment_text" id="comment-body-849501"><p class="cye-lm-tag">Your repository url is not correct. The link that I provided is a direct link to the source code of the example application. However, you cannot use that url for cloning the repository.</p>
<p class="cye-lm-tag">You can clone the repository by using the following command:</p>
<p class="cye-lm-tag"><code>git clone git@github.com:pkainulainen/spring-mvc-test-examples.git</code></p>
</div></div></li><li class="comment odd alt depth-5" id="comment-975185"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Jennifer</span>  <span class="comment_date cye-lm-tag">November 14, 2014, 03:20</span></div><div class="comment_text" id="comment-body-975185"><p class="cye-lm-tag">After I typed in “git clone <a href="mailto:git@github.com">git@github.com</a>:pkainulainen/spring-mvc-test-examples.git” in the gitbash, I get following:</p>
<p class="cye-lm-tag">Cloning into ‘spring-mvc-test-examples’…<br> The authenticity of host ‘github.com (192.30.252.128)’ can’t be established.<br> RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.<br> Are you sure you want to continue connecting (yes/no)? y<br> Please type ‘yes’ or ‘no’: yes<br> Warning: Permanently added ‘github.com,192.30.252.128’ (RSA) to the list of know<br> n hosts.<br> Permission denied (publickey).<br> fatal: Could not read from remote repository.</p>
<p class="cye-lm-tag">Please make sure you have the correct access rights<br> and the repository exists.</p>
<p class="cye-lm-tag">I guess that your computer is down and will try some other time.</p>
<p class="cye-lm-tag">Thank you very much,</p>
</div></div></li><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-5" id="comment-980277"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">November 15, 2014, 23:32</span></div><div class="comment_text" id="comment-body-980277"><p class="cye-lm-tag">Hi Jennifer,</p>
<p class="cye-lm-tag">The repository is not hosted on my own computer. It is hosted on Github, and it seems that the server rejected your connection for some reason. You should read an article titled: <a href="https://help.github.com/articles/error-permission-denied-publickey/" target="_blank" rel="nofollow">Error: Permission denied (publickey)</a>. It describes how you can troubleshoot (and hopefully solve) this problem.</p>
</div></div></li><li class="comment odd alt depth-5" id="comment-1000088"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Jennifer</span>  <span class="comment_date cye-lm-tag">November 23, 2014, 16:14</span></div><div class="comment_text" id="comment-body-1000088"><p class="cye-lm-tag">OK. I got it.Thanks a lot for letting me know this.</p>
</div></div></li><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-5" id="comment-1000274"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">November 23, 2014, 18:43</span></div><div class="comment_text" id="comment-body-1000274"><p class="cye-lm-tag">Were you able to get the example applications? If not, could you let me know.</p>
<p class="cye-lm-tag">I can email them to you if you leave me a comment that has your email address in it (I won’t publish anyone’s email address).</p>
</div></div></li><li class="comment odd alt depth-5" id="comment-1177475"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Jennifer</span>  <span class="comment_date cye-lm-tag">April 9, 2015, 05:39</span></div><div class="comment_text" id="comment-body-1177475"><p class="cye-lm-tag">Thank you very much. I have already got your source code.</p>
</div></div></li></ul></li></ul></li></ul></li></ul></li><li class="comment even thread-odd thread-alt depth-1" id="comment-974394"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">karthik</span>  <span class="comment_date cye-lm-tag">November 13, 2014, 21:39</span></div><div class="comment_text" id="comment-body-974394"><p class="cye-lm-tag">What if you had a POST like this and the UserrequestListWrapper has a list inside it.How you go about validating the fields inside the list. Should i create a couple of Builders?</p>
<pre><code>
public String submitUser(@ModelAttribute("listWrapper") UserRequestListWrapper wrapper,
						 @ModelAttribute("user") User user, 
						 Error result) { 
}

public class UserRequestListWrapper {

    private List userRequestList;

    public List getUserRequestList() {
        return userRequestList;
    }

    public void setUserRequestList(List userRequestList) {
        this.userRequestList = userRequestList;
    }
}
</code>
</pre></div> </div></li><li class="comment odd alt thread-even depth-1" id="comment-1038737"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Reji</span>  <span class="comment_date cye-lm-tag">December 9, 2014, 17:06</span></div><div class="comment_text" id="comment-body-1038737"><p class="cye-lm-tag">Hi Petri,<br> Great Article. Helped a lot in unit testing web applications.<br> But I identified a problem in tests expecting exceptions.</p>
<p class="cye-lm-tag">For example in RepositoryTodoServiceTest,<br> the test “deleteById_TodoEntryNotFound_ShouldThrowException” expects TodoNotFoundException.<br> The test passes since service.deleteById(ID) throws TodoNotFoundException.</p>
<p class="cye-lm-tag">Now the problem is when I change the next line in this test as follows<br> verify(repositoryMock, times(5)).findOne(ID); //Expect the findOne(ID) called FIVE times.<br> the test execution result was GREEN instead of RED.</p>
<p class="cye-lm-tag">Now I changed the test as follows</p>
<p class="cye-lm-tag"> @Test<br> public void deleteById_TodoEntryNotFound_ShouldThrowException() throws TodoNotFoundException {<br> when(repositoryMock.findOne(ID)).thenReturn(null);</p>
<p class="cye-lm-tag"> try {<br> service.deleteById(ID);<br> fail(“TodoNotFoundException not thrown by service.deleteById”);<br> } catch (Exception e) {<br> assertTrue(e instanceof TodoNotFoundException);<br> }</p>
<p class="cye-lm-tag"> verify(repositoryMock, times(1)).findOne(ID);<br> verifyNoMoreInteractions(repositoryMock);<br> }</p>
<p class="cye-lm-tag">The test passes</p>
<p class="cye-lm-tag">And if change the code to verify(repositoryMock, times(5)).findOne(ID);<br> It fails as expected.</p>
<p class="cye-lm-tag">Is there anything wrong with the @test(expected = ) and @Rule annotations to test exceptions?</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-1038842"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">December 9, 2014, 18:16</span></div><div class="comment_text" id="comment-body-1038842"><p class="cye-lm-tag">If you use the <code>@Test(expected= ...)</code> and an exception is thrown, the remaining lines aren’t invoked because an exception was thrown from the test method. When I wrote that example application, I thought that it is a good idea to add those lines anyway because they document the behavior of the tested service method. Now I think that adding those lines is a bad idea because they are dead code.</p>
<p class="cye-lm-tag">If you are using Java 8 AND you want to verify that the correct method was invoked, you should read a blog post titled: <a href="http://www.codeaffine.com/2014/07/28/clean-junit-throwable-tests-with-java-8-lambdas/" target="_blank" rel="nofollow">Clean JUnit Throwable-Tests with Java 8 Lambdas</a>. It explains how you can catch the exception and write assertions for it. If you decide to use this approach, you can also verify that the correct method was invoked because the exception is not thrown from the test method (you catch it).</p>
</div> </div></li></ul></li><li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1120004"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Reji</span>  <span class="comment_date cye-lm-tag">February 7, 2015, 10:24</span></div><div class="comment_text" id="comment-body-1120004"><p class="cye-lm-tag">Hi Petri,</p>
<p class="cye-lm-tag">Please comment on below doubt. I’m confused with the behavior of MockMvc.</p>
<p class="cye-lm-tag">For this I removed the “add.jsp” from “/WEB-INF/jsp/todo/” and run the the first test(showAddTodoForm_ShouldCreateFormObjectAndRenderAddTodoForm) in WebApplicationContextTodoControllerTest.java</p>
<p class="cye-lm-tag">I expected the test to fail with status 404 instead of 200. But the test was GREEN. I run the webapplication and navigated to “http://localhost:8080/todo/add” here I’m getting the 404.</p>
<p class="cye-lm-tag">Is that mean we can’t rely on the MockMvc tests to verify our web application? Also please let me know how can I correct this problem</p>
<p class="cye-lm-tag">Thanks.</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-1120024"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">February 7, 2015, 10:52</span></div><div class="comment_text" id="comment-body-1120024"><p class="cye-lm-tag">Spring MVC Test doesn’t “render” JSP pages because it doesn’t use a servlet container and you cannot render JSP pages without using one. In other words,</p>
<ul><li>You can test that the correct JSP page should be rendered.</li><li>You cannot test that it is rendered correctly.</li></ul><p class="cye-lm-tag">If you use a template technology that doesn’t need a servlet container (i.e. Thymeleaf, Freemarker, Velocity, and so on), you can also test that the page is rendered correctly.</p>
<p class="cye-lm-tag">In other words, if you use JSP as a view technology, you cannot write tests which ensure that the user interface of your application is working correctly. If you want to write these tests, you have to deploy your application into a servlet container and use some other testing framework.</p>
</div> </div><ul class="children"><li class="comment odd alt depth-3" id="comment-1121298"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Reji</span>  <span class="comment_date cye-lm-tag">February 8, 2015, 16:39</span></div><div class="comment_text" id="comment-body-1121298"><p class="cye-lm-tag">Thanks Petri. Can you please suggest some testing frameworks that can be used to test page rendering?</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-4" id="comment-1123515"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">February 10, 2015, 21:57</span></div><div class="comment_text" id="comment-body-1123515"><p class="cye-lm-tag">I haven’t written UI tests for a few years, but when I did write them, I used <a href="http://www.seleniumhq.org/" target="_blank" rel="nofollow">Selenium</a>. However, you might want to search for other options too because I am not a UI testing expert.</p>
</div> </div></li></ul></li></ul></li></ul></li><li class="comment odd alt thread-even depth-1" id="comment-1177467"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Jennifer</span>  <span class="comment_date cye-lm-tag">April 9, 2015, 05:27</span></div><div class="comment_text" id="comment-body-1177467"><p class="cye-lm-tag">Hi Petri,<br> I have following two classes and want to write a Junit test for the generatePdfJasperReport() method by using mokito, but I do not know how. I do not have problem to write normal junit test for controller, just do not know how to write Junit test for jasper report controller.  Do you know how?</p>
<p class="cye-lm-tag">Thank you in advance</p>
<p class="cye-lm-tag">public class Employee {<br> private int employeeId;<br> private String lastName;<br> private String firstName;<br> private String title;<br> private Date hireDate;</p>
<p class="cye-lm-tag"> // Set and get methods<br> ….<br> }</p>
<p class="cye-lm-tag">@Controller<br> @RequestMapping(value = EmployeeJasperReportController.BASE_REQUEST_MAPPING)<br> public class EmployeeJasperReportController extends BaseController {<br> public static final String JASPER_DIR = “/WEB-INF/reports/employee”;<br> public static final String BASE_REQUEST_MAPPING = “/EmployeeReport”;<br> public static final String EMPLOYEE_REPORT = “EmployeeReport”;</p>
<p class="cye-lm-tag"> public ModelAndView generatePdfJasperReport(HttpServletRequest request, HttpSession session, HttpServletResponse respose) throws Exception {<br> Employee employeeObj = new Employee();<br> List employeeList = new ArrayList();<br> employeeList.add(employee);</p>
<p class="cye-lm-tag"> Map model = new HashMap();<br> JRBeanCollectionDataSource reportDataSource = new JRBeanCollectionDataSource(employeeList, false);<br> model.put(“dataSource”, reportDataSource);<br> model.put(JRParameter.IS_IGNORE_PAGINATION, Boolean.FALSE);</p>
<p class="cye-lm-tag"> setRelativeReportPathForJasperReports(session, model);</p>
<p class="cye-lm-tag"> return new ModelAndView(EMPLOYEE_REPORT, model);<br> }</p>
<p class="cye-lm-tag">protected void setRelativeReportPathForJasperReports(HttpSession session, Map model) throws FileNotFoundException {<br> // setting relative path for report<br> String reportsDirPath = session.getServletContext().getRealPath(JASPER_DIR);<br> File reportsDir = new File(reportsDirPath);<br> if(! reportsDir.isDirectory()) {<br> throw new FileNotFoundException(String.valueOf(reportsDir));<br> }<br> model.put(JRParameter.REPORT_FILE_RESOLVER, new SimpleFileResolver(reportsDir));<br> }<br> }</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-1177621"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">April 9, 2015, 10:25</span></div><div class="comment_text" id="comment-body-1177621"><p class="cye-lm-tag">Hi Jennifer,</p>
<p class="cye-lm-tag">what kind of unit tests do you want to write for the <code>generatePdfJasperReport()</code> method? The reason why I am asking this is that this method seems to be doing three things:</p>
<ol><li>It creates an employee list (I assume that in real code this is fetched from service) and creates a JasperReports datasource that contains this list. Also, it sets the created datasource to the model.</li><li>It enables pagination and sets this information to the model.</li><li>It sets the report directory to the model.</li></ol><p class="cye-lm-tag">You can test three things quite easily by <a href="http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/web/servlet/ResultActions.html#andExpect-org.springframework.test.web.servlet.ResultMatcher-" target="_blank" rel="nofollow">asserting the contents of the <code>Model</code> object</a>. However, these tests doesn’t ensure that the created report contains the correct data because the report creation logic is not found from this controller. I assume that this logic is found from a JSP page. Am I correct?</p>
<p class="cye-lm-tag">If you have added the report creation logic to a JSP page, you cannot test it by using the Spring MVC Test framework because it doesn’t run your code inside a servlet container.</p>
<p class="cye-lm-tag">By the way, you mentioned that you don’t know how to unit test this controller method. Did you mean that don’t know how you can assert the contents of the <code>Model</code> object when it contains these objects provided by JasperReports?</p>
</div> </div></li></ul></li><li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1231499"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Karthik</span>  <span class="comment_date cye-lm-tag">June 23, 2015, 13:16</span></div><div class="comment_text" id="comment-body-1231499"><p class="cye-lm-tag">Hi Petri,<br> Thanks for such a detailed explanation on spring controller testing, and I’m following the same to test my controller class. But I’m stuck at<br> (add_DescriptionAndTitleAreTooLong_ShouldRenderFormViewAndReturnValidationErrorsForTitleAndDescription) this point<br> I have the same form in my application also the same method with @valid @modelattribute but, I have not used @sessionAttributes in controller class.<br> When I’m testing against the validation of the form , irrespective of the .param() value it is redirected to 302 status but the expected it 200 , since it is returning the redirected view path.<br> I don’t know what I’m missing and where I’m going wrong.<br> Thank You</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-1231630"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">June 23, 2015, 18:48</span></div><div class="comment_text" id="comment-body-1231630"><p class="cye-lm-tag">Hi Karthik,</p>
<p class="cye-lm-tag">It is kind of hard to say what could be wrong without seeing the actual code, but I have a few questions for you:</p>
<ul><li>Does your code return the same status code when you try to submit the form manually?</li><li>Is the code found from your controller method invoked when you run your tests (or does the validation fail)?</li></ul><p class="cye-lm-tag">Also, these resources might be useful:</p>
<ul><li><a href="http://stackoverflow.com/questions/17107656/java-spring-controller-mapped-properly-but-server-returns-302-instead-of-200" target="_blank" rel="nofollow">Java Spring Controller mapped properly, but server returns 302 instead of 200 @StackOverflow</a></li><li><a href="http://stackoverflow.com/questions/25921961/spring-mvc-and-302-status" target="_blank" rel="nofollow">Spring MVC and 302 Status @StackOverflow</a></li><li><a href="http://stackoverflow.com/questions/27642038/spring-tiles-how-to-return-301-redirect-instead-of-302-in-controller" target="_blank" rel="nofollow">Spring + Tiles. How to return 301 redirect (instead of 302) in Controller @StackOverflow</a></li></ul><p class="cye-lm-tag">In other words, check that:</p>
<ul><li>You don’t have hidden redirect somewhere.</li><li>You don’t have multiple controller methods with same request mappings.</li><li>The correct response status is set if you redirect the request manually (by creating a <code>RedirectView</code> object or returning a view name that has the <code>redirect:</code> prefix).</li></ul><p class="cye-lm-tag">If you have any additional questions, don’t hesitate to ask them!</p>
</div> </div><ul class="children"><li class="comment odd alt depth-3" id="comment-1231951"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">karthik</span>  <span class="comment_date cye-lm-tag">June 24, 2015, 08:07</span></div><div class="comment_text" id="comment-body-1231951"><p class="cye-lm-tag">Hi Petri<br> Thank you for the response,<br> 1) When Im trying to submit my form manually it is working properly, i.e., It is redirected to the specifies view(“redirected: view name”) with the valid entry, and returns to the specified view name with an invalid entry(view within the if block)<br> 2) Yes code found from your controller method is invoked when I run my tests. But whatever I give as the parameter i.e., in .param() irrespective of tat it is redirected (So I’m not able to test my controller method for the invalid entry)<br> And I don’t have any hidden redirect or multiple controller of same request mapping</p>
<p class="cye-lm-tag">Thanks in advance</p>
<p class="cye-lm-tag">Here is my code snippet and the test case for tat</p>
<p class="cye-lm-tag">//IdEntryForm has only the ID of type String</p>
<pre><code>
@RequestMapping(value = "/Id/", method = RequestMethod.POST)
public String getID(@Valid @ModelAttribute("idEntryForm") IdEntryForm idForm, 
					BindingResult result, 
					Model model) {

	if (result.hasErrors()) {
		return "IdEntryView";
	}
	/* after this I have some setters of other class*/
	return "redirect:/IdSearch/"
}
</code>
</pre><p class="cye-lm-tag">//My test case -To test the method for invalid entry</p>
<pre><code>
@Test
public void getIdTest_WithFormViewAndReturnValidationErrorsForit() throws Exception{
	String Id = "2587419";(valid entry is the max length of 5)
	mockMvc.perform(post("/Id/")
			.contentType(MediaType.APPLICATION_FORM_URLENCODED)
			.param("ID",Id)
	)
		.andDo(print())
		.andExpect(status().isOk())                
		.andExpect(view().name("IdEntryView"))
		.andExpect(forwardedUrl("/WEB-INF/view/IdEntryView.jsp"))
		.andExpect(model().attributeHasFieldErrors("idEntryForm",Id))
		.andExpect(model().attribute("idEntryForm", hasProperty("ID", is(Id))))
}
</code>
</pre></div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-4" id="comment-1232153"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">June 24, 2015, 18:10</span></div><div class="comment_text" id="comment-body-1232153"><p class="cye-lm-tag">I have to admit that I don’t know what is wrong. However, because you mentioned that the validation works when you submit the form manually, I assume that the problem is somehow related to the configuration of your unit tests. Do you configure your unit tests by using the standalone configuration or the web application context based configuration?</p>
</div> </div><ul class="children"><li class="comment odd alt depth-5" id="comment-1232509"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">karthik</span>  <span class="comment_date cye-lm-tag">June 25, 2015, 07:13</span></div><div class="comment_text" id="comment-body-1232509"><p class="cye-lm-tag">I have used standalone configuration , testing single controller class at a time<br> here is my setup</p>
<pre><code>
@InjectMocks
IdSearch idSearch=new IdSearch();
	
@Before
public void setup()throws Exception {
	MockitoAnnotations.initMocks(this);
		
	InternalResourceViewResolver viewRes = new InternalResourceViewResolver();
	viewRes.setPrefix("/WEB-INF/pages/");
	viewRes.setSuffix(".jsp");
	    
	this.mockMvc = MockMvcBuilders.standaloneSetup(idSearch)
						.setViewResolvers(viewResolver)
						.build();
}
</code>
</pre></div></div></li><li class="comment even depth-5" id="comment-1232562"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">katrhik</span>  <span class="comment_date cye-lm-tag">June 25, 2015, 10:00</span></div><div class="comment_text" id="comment-body-1232562"><p class="cye-lm-tag">Thank You Petri  for giving me an hint, I resolved my issue. I had missed adding validator() in test configuration.</p>
<p class="cye-lm-tag">Even though I have tested my if(){} condition successfully, still my cobertura shows red line. May I know the reson</p>
</div></div></li></ul></li></ul></li></ul></li></ul></li><li class="comment odd alt thread-even depth-1" id="comment-1238151"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Sana</span>  <span class="comment_date cye-lm-tag">July 6, 2015, 09:54</span></div><div class="comment_text" id="comment-body-1238151"><p class="cye-lm-tag">Hi Petri,</p>
<p class="cye-lm-tag">You have give the idea about all kind  of unit testing, But I have a problem with FileUpload Controller testing ,can you please give me the example for FileUpload testing which test for all the conditions like if the file is empty, or if the directory is not present and few more conditions</p>
<p class="cye-lm-tag">Thanks</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-1238182"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">July 6, 2015, 10:58</span></div><div class="comment_text" id="comment-body-1238182"><p class="cye-lm-tag">Hi Sana,</p>
<p class="cye-lm-tag">Check out <a href="http://stackoverflow.com/a/21805186/313554" target="_blank" rel="nofollow">This StackOverflow answer</a>. It provides a working test which ensures that the file upload function is working as expected. That should help you get started.</p>
<p class="cye-lm-tag">Also, you should follow these “rules”:</p>
<ul><li>If you want to test a situation where an empty file is uploaded, you simply need to pass an empty <code>MockMultipartFile</code> to the <code>file()</code> method.</li><li>If you want to test a situation where the directory is not present, you need to configure the system under test to use a directory that is not found.</li></ul><p class="cye-lm-tag">I wish that I could give you a better answer, but it’s impossible to write a test case without seeing the tested code. If you can show it to me, I will give you a better answer.</p>
<p class="cye-lm-tag">If you have any further questions, don’t hesitate to ask them.</p>
</div> </div><ul class="children"><li class="comment odd alt depth-3" id="comment-1238273"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Sana</span>  <span class="comment_date cye-lm-tag">July 6, 2015, 14:38</span></div><div class="comment_text" id="comment-body-1238273"><p class="cye-lm-tag">Thank You Petri, here is the part my code</p>
<pre><code>
@RequestMapping(value = "/FileUpload", method = RequestMethod.POST)
public String getId(@RequestParam("file") MultipartFile batchFile, Model model) {
	if (file.isEmpty()) {
		return "redirect:/MyId/";
	}

	BufferedOutputStream stream = null;
	BufferedReader reader = null;

	try {
		byte[] bytes = file.getBytes();

		if (!dir.exists())
			dir.mkdirs();
		}
	}
	catch (Exception e){
 		return "redirect:/MyId/";
	}
}
</code></pre><p class="cye-lm-tag">also please give me an idea of how to test the code within the try catch blocks</p>
<p class="cye-lm-tag">Thank You</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-4" id="comment-1238343"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">July 6, 2015, 18:02</span></div><div class="comment_text" id="comment-body-1238343"><p class="cye-lm-tag">It seems that you have test these things by combining two different techniques:</p>
<p class="cye-lm-tag">The first technique requires that you create “correct” <code>MockMultipartFile</code> objects and “pass” them to the tested controller method by using the technique described in <a href="http://stackoverflow.com/questions/21800726/using-spring-mvc-test-to-unit-test-multipart-post-request/21805186#21805186" target="_blank" rel="nofollow">this SO answer</a>. This useful when you write tests that cover the following situations:</p>
<ul><li>If you want to test that the user is redirected to the ‘/MyId/’ view when the uploaded file is empty, you need to create the uploaded <code>MockMultipartFile</code> by using <a href="http://docs.spring.io/spring/docs/4.1.x/javadoc-api/org/springframework/mock/web/MockMultipartFile.html#MockMultipartFile-java.lang.String-byte:A-" target="_blank" rel="nofollow">this constructor</a> and pass an empty <code>byte</code> array as the second constructor argument.</li><li>If you want to test that the user is redirected to the ‘MyId/’ view when an exception is thrown, you could extend the <code>MockMultipartFile</code> class and override its <code>isEmpty()</code> and <code>getBytes()</code> methods. The <code>isEmpty()</code> method must always return <code>false</code>, and the <code>getBytes()</code> should throw the exception.</li></ul><p class="cye-lm-tag">The second technique requires that <a href="https://garygregory.wordpress.com/2010/01/20/junit-tip-use-rules-to-manage-temporary-files-and-folders/" target="_blank" rel="nofollow">use the <code>@TemporaryFolder</code> JUnit rule</a>. This way you can create folders to the temporary directory that are deleted after the test case is invoked. This helps you to test the situation where the upload directory is not found.</p>
</div> </div></li></ul></li></ul></li></ul></li><li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1238225"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Govardhan Vedams</span>  <span class="comment_date cye-lm-tag">July 6, 2015, 13:24</span></div><div class="comment_text" id="comment-body-1238225"><p class="cye-lm-tag">Hi Petri Good morning ,</p>
<p class="cye-lm-tag">I got project   “spring-mvc-test-examples-master”  from GitHub ,  but in this involved multiple projects. Which is used for testing expected view in spring controller .</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-1238227"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">July 6, 2015, 13:30</span></div><div class="comment_text" id="comment-body-1238227"><p class="cye-lm-tag">Hi,</p>
<p class="cye-lm-tag">The <a href="https://github.com/pkainulainen/spring-mvc-test-examples/tree/master/controllers-unittest" target="_blank" rel="nofollow">example application of this blog post</a> is found from the <em>controllers-unittest</em> directory. It contains the examples you are looking for.</p>
</div> </div><ul class="children"><li class="comment odd alt depth-3" id="comment-1238228"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Govardhan Vedams</span>  <span class="comment_date cye-lm-tag">July 6, 2015, 13:34</span></div><div class="comment_text" id="comment-body-1238228"><p class="cye-lm-tag">Thank you Petri , Thank you so much</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-4" id="comment-1238320"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">July 6, 2015, 17:00</span></div><div class="comment_text" id="comment-body-1238320"><p class="cye-lm-tag">You are welcome!</p>
</div> </div></li></ul></li></ul></li></ul></li><li class="comment odd alt thread-even depth-1" id="comment-1238262"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Govardhan Vedams</span>  <span class="comment_date cye-lm-tag">July 6, 2015, 14:28</span></div><div class="comment_text" id="comment-body-1238262"><p class="cye-lm-tag">Hi Petri,</p>
<p class="cye-lm-tag">I got “controllers-unittest” project in my eclipse . I got below error at the time of maven clean and after maven install</p>
<p class="cye-lm-tag">[INFO] — maven-compiler-plugin:2.5.1:compile (default-compile) @ controllers-unittest —<br> [INFO] Compiling 12 source files to C:\Documents and Settings\Govardhan\Desktop\spring-mvc-test-examples-master\controllers-unittest\target\classes<br> [INFO] ————————————————————-<br> [ERROR] COMPILATION ERROR :<br> [INFO] ————————————————————-<br> [ERROR] Failure executing javac, but could not parse the error:<br> javac: invalid target release: 1.7<br> Usage: javac<br> use -help for a list of possible options</p>
<p class="cye-lm-tag"><em>Update: I removed the irrelevant part – Petri</em></p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-1238318"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">July 6, 2015, 16:59</span></div><div class="comment_text" id="comment-body-1238318"><p class="cye-lm-tag">Hi,</p>
<p class="cye-lm-tag">Which Java version are you using? The example application requires Java 7 (or newer). I have to confess that I cannot remember if you can compile and run it with Java 6 without making some changes to its source code, but if you want to try it, you have follow these steps:</p>
<p class="cye-lm-tag"><strong>First</strong>, you have to find the following line from the <em>pom.xml</em> file:</p>
<pre><code>
&lt;jdk.version&gt;1.7&lt;/jdk.version&gt;
</code>
</pre><p class="cye-lm-tag"><strong>Second</strong>, you have to change it to:</p>
<pre><code>
&lt;jdk.version&gt;1.6&lt;/jdk.version&gt;
</code>
</pre><p class="cye-lm-tag">I hope that this helped you solve your problem. If not, feel free to answer to this comment!</p>
</div> </div><ul class="children"><li class="comment odd alt depth-3" id="comment-1238775"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Govardhan Vedams</span>  <span class="comment_date cye-lm-tag">July 7, 2015, 16:01</span></div><div class="comment_text" id="comment-body-1238775"><p class="cye-lm-tag">I change to</p>
<p class="cye-lm-tag"> 1.6</p>
<p class="cye-lm-tag">Thank you ,  its working.</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-4" id="comment-1238779"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">July 7, 2015, 16:12</span></div><div class="comment_text" id="comment-body-1238779"><p class="cye-lm-tag">You are welcome!</p>
</div> </div></li></ul></li></ul></li></ul></li><li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1238774"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Govardhan Vedams</span>  <span class="comment_date cye-lm-tag">July 7, 2015, 16:00</span></div><div class="comment_text" id="comment-body-1238774"><p class="cye-lm-tag">HI Petri, I start thinking about controller testing .</p>
<p class="cye-lm-tag">==&gt; In controllers-unittest application , How ” toDoData.xml and toDoData-add-expected.xml “are communicated.<br> ==&gt; I wrote records with id’s 1,2 and 6 in toDoData.xml . when i add record in toDoData-add-expected.xml . In this time<br> ———–.sessionAttr(TodoController.MODEL_ATTRIBUTE_TODO, new TodoDTO() —————–<br> this sessionAttr is generated id 7, how this know present id is 6 which is in toDoData.xml.</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-1238781"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">July 7, 2015, 16:15</span></div><div class="comment_text" id="comment-body-1238781"><p class="cye-lm-tag">Hi,</p>
<p class="cye-lm-tag">This is actually a quite common problem. You can solve it by resetting the auto increment column before the test is invoked. I have written <a href="https://www.petrikainulainen.net/programming/spring-framework/spring-from-the-trenches-resetting-auto-increment-columns-before-each-test-method/" rel="nofollow">a blog post</a> that describes how you can do it.</p>
</div> </div><ul class="children"><li class="comment odd alt depth-3" id="comment-1239061"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Anonymous</span>  <span class="comment_date cye-lm-tag">July 8, 2015, 09:27</span></div><div class="comment_text" id="comment-body-1239061"><p class="cye-lm-tag">Hi Petri Good morning,<br> Thank you . Now I am reading blog , I get doubt<br> may i know use of below line and this line is not used in  controllers-unittest application . when we can use this ?<br> @DatabaseSetup(“no-todo-entries.xml”)     .</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-4" id="comment-1239082"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">July 8, 2015, 10:15</span></div><div class="comment_text" id="comment-body-1239082"><p class="cye-lm-tag">The <code>@DatabaseSetup</code> annotation simply identifies the DbUnit data set that is used to initialize the database before each test method is invoked.</p>
<p class="cye-lm-tag">The reason I applied that annotation at the method level is that <a href="https://github.com/pkainulainen/spring-from-the-trenches/blob/master/spring-test-dbunit-tips/src/integration-test/java/net/petrikainulainen/spring/trenches/todo/repository/ITTodoRepositoryTest.java" target="_blank" rel="nofollow">the integration tests of that example application</a> use different data sets for different test methods.</p>
<p class="cye-lm-tag">Because <a href="https://github.com/pkainulainen/spring-mvc-test-examples/blob/master/controllers-unittest/src/integration-test/java/net/petrikainulainen/spring/testmvc/todo/controller/ITTodoControllerTest.java" target="_Blank" rel="nofollow">the integration tests which I wrote for this blog post</a> use the same data set, I applied the <code>@DatabaseSetup</code> annotation at the class level.</p>
<p class="cye-lm-tag">You can get more information about this from <a href="http://springtestdbunit.github.io/spring-test-dbunit/" target="_blank" rel="nofollow">the website of the Spring Test DbUnit library</a>.</p>
</div> </div><ul class="children"><li class="comment odd alt depth-5" id="comment-1239118"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Govardhan Vedams</span>  <span class="comment_date cye-lm-tag">July 8, 2015, 12:44</span></div><div class="comment_text" id="comment-body-1239118"><p class="cye-lm-tag">Thank you petri, i try one example now.<br> I added below files in my project<br> 1)toDoData.xml<br> 2)PersonControllerTest    (ITTodoControllerTest)<br> 3)updated pom.xml<br> need to add any more for testing expected view?<br> ————————————————————————————————————-<br> i got got null pointer exception. i share the code below</p>
<pre><code>
@Controller
@RequestMapping("/person")
public class PersonController extends SuperController{
	@RequestMapping(value ="/{id}", method = RequestMethod.GET)
	public String viewForm(@PathVariable(value="id")Long personId, 
							Person person, 
							IPAddress ipAddress, 
							HttpSession session, 
							Model model) throws Exception {

	}
}
</code>
</pre><p class="cye-lm-tag">——————————————————————————————————————</p>
<pre><code>
@TestExecutionListeners({ DependencyInjectionTestExecutionListener.class,
    DirtiesContextTestExecutionListener.class,
    TransactionalTestExecutionListener.class,
    DbUnitTestExecutionListener.class })
@WebAppConfiguration
@DatabaseSetup("toDoData.xml")
@ContextConfiguration("file:servlet-context.xml")
public class SetupControllerTest33 {

	private MockMvc mockMvc;
	  
	@Resource
	private WebApplicationContext webApplicationContext;
	  
	@Before
	public void setUp() {
		mockMvc = MockMvcBuilders.webAppContextSetup(webApplicationContext)
								.build();
	}
	  
	@Test
	@ExpectedDatabase("toDoData.xml")
	public void showAddTodoForm_ShouldRenderAddTodoForm() throws Exception {
		mockMvc.perform(get("alan/setup/2{id}",2L))
			.andExpect(status().isOk())
			.andExpect(view().name(SetupController.VIEW_TODO_ADD))
			.andExpect(forwardedUrl("/WEB-INF/views/setup-form.jsp"))
			.andExpect(model().attribute(SetupController.MODEL_ATTRIBUTE_TODO, 
						hasProperty("id", is(2L))
			));
	}
}
</code>
</pre><p class="cye-lm-tag">—————————————-below is servlet-context.xml———————————-</p>
<p class="cye-lm-tag"></p>
<p class="cye-lm-tag"></p>
<p class="cye-lm-tag"> org.springframework.web.servlet.view.tiles2.TilesView</p>
<p class="cye-lm-tag"> /WEB-INF/hibernate.cfg.xml</p>
<p class="cye-lm-tag"> ${hibernate.dialect}<br> ${hibernate.show_sql}<br> update<br> &lt;!– import.sql –&gt;</p>
<p class="cye-lm-tag">——————————————-below tododata.xml——————————————–</p>
</div></div></li><li class="comment even depth-5" id="comment-1239119"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Govardhan Vedams</span>  <span class="comment_date cye-lm-tag">July 8, 2015, 12:50</span></div><div class="comment_text" id="comment-body-1239119"><p class="cye-lm-tag">continuation from above comment<br> now I got<br> java.lang.IllegalArgumentException: WebApplicationContext is required</p>
<p class="cye-lm-tag">——————————————-below tododata.xml——————————————–</p>
</div></div></li><li class="comment odd alt depth-5" id="comment-1239120"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Govardhan Vedams</span>  <span class="comment_date cye-lm-tag">July 8, 2015, 12:51</span></div><div class="comment_text" id="comment-body-1239120"><p class="cye-lm-tag">——————————————-below tododata.xml——————————————–</p>
<pre><code>
&lt;todos setupId="2" 
			title="" 
			mode="" 
			sourcePath="" 
			deleteSource="true" 
			scheduleEnabled="true" 
			dateCreated="" 
			dateModified="" 
			createdBy="" 
			ipList="" 
			scheduler=""/&gt;
</code>
</pre></div></div></li><li class="comment even depth-5" id="comment-1239127"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Govardhan Vedams</span>  <span class="comment_date cye-lm-tag">July 8, 2015, 13:06</span></div><div class="comment_text" id="comment-body-1239127"><p class="cye-lm-tag">continuation from above comment<br> solve some above exceptions  from google , but now i get</p>
<p class="cye-lm-tag">java.lang.IllegalArgumentException: Unable to load dataset from “toDoData.xml” using class com.github.springtestdbunit.dataset.FlatXmlDataSetLoader</p>
</div></div></li><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-5" id="comment-1239136"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">July 8, 2015, 13:20</span></div><div class="comment_text" id="comment-body-1239136"><p class="cye-lm-tag">You need to put the data set file to the same package as the class which uses it. You can do this by either:</p>
<ul><li>Putting the data set file to the same directory as the class file.</li><li>Creating a similar directory structure under the <em>src/integration-test/resources</em> directory and putting the data set file to that directory. For example, if the package of the test class is <code>foo.bar</code>, you need to put the data set file to the <em>src/integration-test/resources/foo/bar</em> directory.</li></ul></div></div></li><li class="comment even depth-5" id="comment-1239146"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Govardhan Vedams</span>  <span class="comment_date cye-lm-tag">July 8, 2015, 13:41</span></div><div class="comment_text" id="comment-body-1239146"><p class="cye-lm-tag">this site is so  great . ok thank you .</p>
<p class="cye-lm-tag">now i get</p>
<p class="cye-lm-tag">com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Cannot delete or update a parent row: a foreign key constraint fails (`project`.`scheduler`, CONSTRAINT `FK_id695164fqgy6meyjpunk1k` FOREIGN KEY (`SETUPID`) REFERENCES `setup` (`SETUPID`))</p>
</div></div></li><li class="comment odd alt depth-5" id="comment-1239148"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Anonymous</span>  <span class="comment_date cye-lm-tag">July 8, 2015, 13:48</span></div><div class="comment_text" id="comment-body-1239148"><p class="cye-lm-tag">continuation from above comment<br> here just i am expecting edit form with record information which have id = 2 , but it shows cannot delete , below is test class method.</p>
<pre><code>
@Test
@ExpectedDatabase("toDoData.xml")
public void showAddTodoForm_ShoulddRenderAddTodoForm() throws Exception {
	mockMvc.perform(get("project/person/2{id}",2L))
		.andExpect(status().isOk())
		.andExpect(view().name(SetupController.VIEW_TODO_ADD))
		.andExpect(forwardedUrl("/WEB-INF/views/setup-form.jsp"))
		.andExpect(model().attribute(SetupController.MODEL_ATTRIBUTE_TODO, 
						hasProperty("id", is(2L))
		));
}
</code>
</pre><p class="cye-lm-tag">—————–i got below exception————————————————————-</p>
<p class="cye-lm-tag">com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Cannot delete or update a parent row: a foreign key constraint fails (`project`.`scheduler`, CONSTRAINT `FK_id695164fqgy6meyjpunk1k` FOREIGN KEY (`SETUPID`) REFERENCES `setup` (`SETUPID`))</p>
</div></div></li><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-5" id="comment-1239204"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">July 8, 2015, 17:11</span></div><div class="comment_text" id="comment-body-1239204"><p class="cye-lm-tag">The problem is that your data set has a <code>setupId</code> column that references to the <code>setup</code> table. However, the <code>setup</code> table doesn’t have a row whose id is 2. In other words, you have to fix your data set so that all foreign key columns references to existing rows.</p>
</div></div></li><li class="comment odd alt depth-5" id="comment-1239516"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Govardhan Vedams</span>  <span class="comment_date cye-lm-tag">July 9, 2015, 10:22</span></div><div class="comment_text" id="comment-body-1239516"><p class="cye-lm-tag">Hi Petri Good morning.</p>
<p class="cye-lm-tag">I am sorry . I got same exception , I shared below total my project.</p>
<p class="cye-lm-tag">—————————————-below is tododata.xml———————————————-</p>
<pre><code>
&lt;setup SETUPID="2" 
	TITLE="setup" 
	MODE="online" 
	SOURCEPATH="NULL" 
	DELETESOURCE="0" 
	SCHEDULEENABLED="1" 
	DATECREATED="2015-06-24 15:49:34" 
	DATEMODIFIED="NULL" 
	CREATEDBY="1"/&gt;

&lt;scheduler SETUPID="2" J
	OBNAME="setup" 
	ALERTGROUPID="1" 
	STARTDATE="24-06-2015" 
	ENDDATE="24-06-2015" 
	SCHEDULETYPE="daily" 
	HOURS="0" 
	DAILYTIME="15:50"
	WEEKLYTIME="" 
	WEEKDAYS="" 
	NEXTRUNTIME="NULL"&gt;
</code>
</pre><p class="cye-lm-tag"><em>Update: I removed the irrelevant files from this comment – Petri</em></p>
</div></div></li><li class="comment even depth-5" id="comment-1239519"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Govardhan Vedams</span>  <span class="comment_date cye-lm-tag">July 9, 2015, 10:37</span></div><div class="comment_text" id="comment-body-1239519"><p class="cye-lm-tag">Continuation above comment</p>
<p class="cye-lm-tag">Now I am listening your video in you tube</p>
</div></div></li><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-5" id="comment-1239539"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">July 9, 2015, 11:14</span></div><div class="comment_text" id="comment-body-1239539"><p class="cye-lm-tag">Do you get the constraint violation error because the correct row is not found from the <code>setup</code> table, or do you get the constraint violation error because the <code>CREATEDBY</code> or <code>ALERTGROUPID</code> columns references to a row that is not found from the database? Remember that if your data set contains columns that references to other tables, you need insert the appropriate rows to all those tables before you can run your test case.</p>
<p class="cye-lm-tag">It’s impossible to know what is wrong because I am not familiar the structure of your database and you didn’t add the stack trace to your comment. Can you add the stack trace here?</p>
<p class="cye-lm-tag">By the way, this DbUnit FAQ entry might be useful to you: <a href="http://web.archive.org/web/20160628064745/http://dbunit.sourceforge.net/faq.html#tableseq" target="_blank" rel="nofollow">How to automatically order tables by their foreign keys?</a></p>
</div></div></li><li class="comment even depth-5" id="comment-1239559"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Govardhan Vedams</span>  <span class="comment_date cye-lm-tag">July 9, 2015, 12:21</span></div><div class="comment_text" id="comment-body-1239559"><p class="cye-lm-tag">—–continuation above comment<br> —–stack trace for above comment</p>
<p class="cye-lm-tag">com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Cannot delete or update a parent row: a foreign key constraint fails (`alan`.`ipaddress`, CONSTRAINT `FK_p3uranrjk6r8ufu86xbwx9x5b` FOREIGN KEY (`SETUPID`) REFERENCES `setup` (`SETUPID`))</p>
<p class="cye-lm-tag"><em>Update: I removed the stack trace because the error message provides the required information – Petri</em></p>
</div></div></li><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-5" id="comment-1239572"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">July 9, 2015, 13:02</span></div><div class="comment_text" id="comment-body-1239572"><p class="cye-lm-tag">Are you running your integration tests against an existing database that has data in it? The reason why I ask this is that the error message states that the <code>SETUPID</code> column of the <code>ipaddress</code> table has an id that is not found from the <code>setup</code> table.</p>
<p class="cye-lm-tag">If so, you need to clean up your database before you insert the data found from your data set. If you haven’t specified the value of the <code>@DatabaseSetup</code> annotation’s <code>type</code> attribute, DbUnit will delete all rows from a database table when the table is found from the data set before it inserts new row(s) into that table.</p>
<p class="cye-lm-tag">In other words, if you want to delete all rows from a database table (without inserting new rows), you have to add an empty “row” to your data set. For example, you can delete all rows from the <code>ipaddress</code> table by adding the following row to your data set file:</p>
<pre><code>
&lt;ipaddress/&gt;
</code>
</pre></div></div></li><li class="comment even depth-5" id="comment-1239581"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Govardhan Vedams</span>  <span class="comment_date cye-lm-tag">July 9, 2015, 13:24</span></div><div class="comment_text" id="comment-body-1239581"><p class="cye-lm-tag">Thank u ,I add ipaddress table data  in data set.  But here my setup and ipaddress table data  is deleted in my db . why ?</p>
<p class="cye-lm-tag">—– and i got below exception<br> org.dbunit.dataset.datatype.TypeCastException: Error casting value for table ‘setup’ and column ‘DATEMODIFIED’</p>
</div></div></li><li class="comment odd alt depth-5" id="comment-1239590"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Govardhan Vedams</span>  <span class="comment_date cye-lm-tag">July 9, 2015, 13:38</span></div><div class="comment_text" id="comment-body-1239590"><p class="cye-lm-tag">Thank u ,I add ipaddress table data in data set. But my total records are deleted in below tables<br> setup , schedular , ipaddress. now i am in confusion ? . i am doing testing for getting edit page for record which have id=2. see below method———–<br> ——————————————————————————-<br> @Test<br> @ExpectedDatabase(“toDoData.xml”)<br> public void showAddTodoForm_ShoulddRenderAddTodoForm() throws Exception {<br> mockMvc.perform(get(“project/person/2{id}”,2L))<br> .andExpect(status().isOk())<br> .andExpect(view().name(SetupController.VIEW_TODO_ADD))<br> .andExpect(forwardedUrl(“/WEB-INF/views/setup-form.jsp”))<br> .andExpect(model().attribute(SetupController.MODEL_ATTRIBUTE_TODO,<br> hasProperty(“id”, is(2L))<br> ));<br> }<br> ———————————————————<br> —– and i got below exception<br> org.dbunit.dataset.datatype.TypeCastException: Error casting value for table ‘setup’ and column ‘DATEMODIFIED’</p>
</div></div></li><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-5" id="comment-1239593"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">July 9, 2015, 13:41</span></div><div class="comment_text" id="comment-body-1239593"><blockquote><p class="cye-lm-tag">Thank u ,I add ipaddress table data in data set. But here my setup and ipaddress table data is deleted in my db . why ?</p>
</blockquote><p class="cye-lm-tag">Did you add it before or after the the element that inserts one row to the <code>setup</code> table? If you added it after the <code>setup</code> element, the data is probably removed from the <code>setup</code> table because of the foreign key’s <code>ON DELETE</code> action. If you don’t know how foreign key constraints work in MySQL, read the section <a href="http://dev.mysql.com/doc/refman/5.6/en/create-table-foreign-keys.html" target="_blank" rel="nofollow">13.1.17.3 Using FOREIGN KEY Constraints</a> of the MySQL 5.6 Reference Manual.</p>
<blockquote><p class="cye-lm-tag">and i got below exception<br> org.dbunit.dataset.datatype.TypeCastException: Error casting value for table ‘setup’ and column ‘DATEMODIFIED’</p>
</blockquote><p class="cye-lm-tag">You are probably using the wrong date format. Check the type of the column from the database and use the format that is described in this DbUnit FAQ entry: <a href="http://web.archive.org/web/20160628064745/http://dbunit.sourceforge.net/faq.html#dateformat" target="_blank" rel="nofollow">What are the date formats supported by DbUnit?</a></p>
</div></div></li><li class="comment odd alt depth-5" id="comment-1239597"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Govardhan Vedams</span>  <span class="comment_date cye-lm-tag">July 9, 2015, 13:46</span></div><div class="comment_text" id="comment-body-1239597"><p class="cye-lm-tag">Thank you petri .you are giving response quickly.. you are giving great support to me. Thank you so much .</p>
</div></div></li><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-5" id="comment-1239604"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">July 9, 2015, 14:01</span></div><div class="comment_text" id="comment-body-1239604"><p class="cye-lm-tag">You are welcome.</p>
</div></div></li></ul></li></ul></li></ul></li></ul></li><li class="comment odd alt thread-even depth-1" id="comment-1239640"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Govardhan Vedams</span>  <span class="comment_date cye-lm-tag">July 9, 2015, 15:49</span></div><div class="comment_text" id="comment-body-1239640"><p class="cye-lm-tag">Thank you . I succeed in expected view , but I not get expected url .. I expected<br> “/WEB-INF/views/setup.jsp” url, but i get “tiles/baselayout.jsp”<br> below code in tiles.xml</p>
<p class="cye-lm-tag">definition name=”setup” extends=”baseLayout”<br> put-attribute name=”body” value=”/WEB-INF/views/setup.jsp” /<br> /definition</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-1239650"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">July 9, 2015, 16:21</span></div><div class="comment_text" id="comment-body-1239650"><p class="cye-lm-tag">I have never used Tiles, but it seems that this is the way how Tiles works. These StackOverflow questions provide more details about this:</p>
<ul><li><a href="http://stackoverflow.com/questions/18828499/spring-mvc-tiles-integration-testing" target="_blank" rel="nofollow">Spring MVC + Tiles: integration testing</a></li><li><a href="http://stackoverflow.com/questions/9191135/testing-spring-mvc-controller-having-the-view-with-tiles-configuration" target="_blank" rel="nofollow">Testing spring mvc controller having the view with tiles configuration</a></li></ul></div> </div></li></ul></li><li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1239651"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Govardhan Vedams</span>  <span class="comment_date cye-lm-tag">July 9, 2015, 16:22</span></div><div class="comment_text" id="comment-body-1239651"><p class="cye-lm-tag">—————————————-below code in test class———————————-</p>
<pre><code>
mockSession = new MockHttpSession(wac.getServletContext(), UUID.randomUUID().toString());


mockMvc.perform(get("/setup/{page}/{pageSize}",1,15)
	.session(mockSession))
	.andDo(MockMvcResultHandlers.print())
	.andExpect(status().isOk())
	.andExpect(view().name("setup"));
</code>
</pre><p class="cye-lm-tag">——————————below code in controller—————————————-</p>
<pre><code>
getPageView(model,buildRequest(page,pageSize,""), super.getUserId(session));
</code>
</pre><p class="cye-lm-tag">in above line at    super.getUserId(session)     get null value , when i hot coded with  1L then expected view is working . HOw can I pass session dynamically from test class.</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-1239660"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">July 9, 2015, 16:42</span></div><div class="comment_text" id="comment-body-1239660"><p class="cye-lm-tag">You have to set the <code>userId</code> to the session or the tested code doesn’t find it (and returns <code>null</code>). You can set the <code>userId</code> to the session by using one of these two options:</p>
<p class="cye-lm-tag"><strong>First</strong>, you can use <a href="http://docs.spring.io/spring/docs/4.1.x/javadoc-api/org/springframework/mock/web/MockHttpSession.html#setAttribute-java.lang.String-java.lang.Object-" target="_blank" rel="nofollow">the <code>setAttribute(String name, Object value)</code> method of the <code>MockHttpSession</code> class</a>. If you decide to use this approach, your code should like this:</p>
<pre><code>
mockSession = new MockHttpSession(wac.getServletContext(), UUID.randomUUID().toString());
mockSession.setAttribute("userId", 1L);

mockMvc.perform(get("/setup/{page}/{pageSize}",1,15)
	.session(mockSession))
	.andDo(MockMvcResultHandlers.print())
	.andExpect(status().isOk())
	.andExpect(view().name("setup"));
</code>
</pre><p class="cye-lm-tag"><strong>Second</strong>, you can use <a href="http://docs.spring.io/spring/docs/4.1.x/javadoc-api/org/springframework/test/web/servlet/request/MockHttpServletRequestBuilder.html#sessionAttr-java.lang.String-java.lang.Object-" target="_blank" rel="nofollow">the <code>sessionAttr(String name, Object value)</code> method of the <code>MockHttpServletRequestBuilder</code> class</a>. If you decide to use this approach, your code should look like this:</p>
<pre><code>
mockMvc.perform(get("/setup/{page}/{pageSize}",1,15)
	.sessionAttr("userId", 1L)
	.andDo(MockMvcResultHandlers.print())
	.andExpect(status().isOk())
	.andExpect(view().name("setup"));
</code>
</pre></div> </div><ul class="children"><li class="comment odd alt depth-3" id="comment-1239683"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Govardhan Vedams</span>  <span class="comment_date cye-lm-tag">July 9, 2015, 17:22</span></div><div class="comment_text" id="comment-body-1239683"><p class="cye-lm-tag">Thank you petri , i develop what u assigned to me for setting session attribute, but get exception .<br> ———————-below code in In super class——————————————-</p>
<pre><code>
@Controller
@SessionAttributes({"userbean"})
public class SuperController {
	public String getUserName(HttpSession session){
		UserBean userbean  = (UserBean)session.getAttribute("userbean");
		return userbean.getUserName();
 	}
	public Long getUserId(HttpSession session){
		UserBean userbean  = (UserBean)session.getAttribute("userbean");
		return userbean.getUserId();
 	}
}
</code>
</pre><p class="cye-lm-tag">——————below code in subclass————————–</p>
<pre><code>
public class SupController extends SuperController {
	@RequestMapping(value ="/{page}/{pageSize}", method = RequestMethod.GET)
	public String getAll(@PathVariable("page") Integer page ,
				@PathVariable("pageSize") Integer pageSize ,
				Model model, 
				HttpSession session) {
		getPageView(model,buildRequest(page,pageSize,""), super.getUserId(session));
		return "jspup";
    }
}
</code>
</pre><p class="cye-lm-tag">—————-below code in test class————————————————–</p>
<pre><code>
@Before	
public void setUp() throws Exception {
	MockitoAnnotations.initMocks(this);
	MockMvc mockMvc = MockMvcBuilders.standaloneSetup(new SetupController())
			.build();

	this.mockMvc = webAppContextSetup(wac).build();
	request = new PageRequest();
	response = new PageResponse();
	mockSession = new MockHttpSession(wac.getServletContext(),
		 	UUID.randomUUID().toString()
	);
	UserBean userBean =  (UserBean) mockSession.getAttribute("userBean");
	// UserBean userBean=new UserBean();
	userBean.setUserId(1L);
	mockSession.setAttribute("userBean", userBean);
}
</code>
</pre><p class="cye-lm-tag">@Test<br> —————-<br> ————–</p>
<pre><code>
mockMvc.perform(get("/setup/{page}/{pageSize}",1,15)
	.session(mockSession))
	.andDo(MockMvcResultHandlers.print())
	.andExpect(status().isOk())
	.andExpect(view().name("setup"));
</code>
</pre><p class="cye-lm-tag">error ==&gt; getting null pointer exception at    super.getUserId(session) …..</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-4" id="comment-1239701"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">July 9, 2015, 18:20</span></div><div class="comment_text" id="comment-body-1239701"><p class="cye-lm-tag">To be honest, I have no idea why you get that NPE, but I noticed a few things that look a bit suspicious:</p>
<ul><li>The request mapping of your controller method is “/{page}/{pageSize}”, but you send the GET request to the url: “/setup/1/15”. I assume that this is just a typo.</li><li>You create the <code>MockMvc</code> object twice (using standalone and web application based setup), but you use only the object that was created by using the web application context based setup. I assume that is not the problem why your test fails, but there is no need to do this.</li><li>You get the <code>UserBean</code> from the session after you have created the <code>MockHttpSession</code> object, but at this point you haven’t set the user to the session. Thus, the <code>getAttribute()</code> method should return <code>null</code> and your test should throw NPE when you try to set the <code>userId</code> of the user. Is this a typo?</li></ul><p class="cye-lm-tag">Anyway, I wrote two small tests and everything worked as expected.</p>
<p class="cye-lm-tag">My controller looks as follows:</p>
<pre><code>
@Controller
public class HomeController {

    @RequestMapping(value="/", method = RequestMethod.GET)
    public String showHomePage(HttpSession session) {
        LOGGER.debug("UserId: {}", ((User)session.getAttribute("user")).getId());
        return "index";
    }
}
</code><code>
</code></pre><p class="cye-lm-tag">I wrote two tests that put a <code>User</code> object to the session:</p>
<pre><code>
@Test
public void showHomePage1_ShouldRenderHomePage() throws Exception {
	User user = new UserBuilder().id(10L).build();
		
	MockHttpSession session = new MockHttpSession();
	session.setAttribute("user", user);
		
	mockMvc.perform(get("/")
		.session(session)
	)
		.andExpect(status().isOk())
		.andExpect(view().name("index"))
		.andExpect(forwardedUrl("/WEB-INF/jsp/index.jsp"));
}

@Test
public void showHomePage2_ShouldRenderHomePage() throws Exception {
	User user = new UserBuilder().id(10L).build();
	mockMvc.perform(get("/")
		.sessionAttr("user", user)
	)
		.andExpect(status().isOk())
		.andExpect(view().name("index"))
		.andExpect(forwardedUrl("/WEB-INF/jsp/index.jsp"));
}
</code>
</pre><p class="cye-lm-tag">When I ran these tests, the following line was written to the log file:</p>
<pre><code>
DEBUG - HomeController             - UserId: 10
</code>
</pre><p class="cye-lm-tag">It seems that there is something wrong with your code, but I cannot figure out what it is. :( I recommend that you use a debugger and monitor the internal state of the <code>MockHttpSession</code> object which you create in the <code>setUp()</code> method.</p>
</div> </div><ul class="children"><li class="comment odd alt depth-5" id="comment-1240031"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Govardhan Vedams</span>  <span class="comment_date cye-lm-tag">July 10, 2015, 10:07</span></div><div class="comment_text" id="comment-body-1240031"><p class="cye-lm-tag">Hi Petri Good morning .</p>
<p class="cye-lm-tag">Thank you .</p>
</div></div></li><li class="comment even depth-5" id="comment-1240035"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Govardhan Vedams</span>  <span class="comment_date cye-lm-tag">July 10, 2015, 10:17</span></div><div class="comment_text" id="comment-body-1240035"><p class="cye-lm-tag">User user = new UserBuilder().id(10L).build();</p>
<p class="cye-lm-tag">How can i get UserBuilder. I think UserBuilder is customized class. I dont have UserBuildr class in my project . I have only User class.</p>
</div></div></li><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-5" id="comment-1240044"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">July 10, 2015, 10:46</span></div><div class="comment_text" id="comment-body-1240044"><p class="cye-lm-tag">The <code>UserBuilder</code> class is a custom class found from the example application of my <a href="/spring-social-tutorial/" rel="nofollow">Spring Social tutorial</a>. It is not useful to you because the <code>User</code> class of that example application and your <code>User</code> class are totally different beasts.</p>
</div></div></li></ul></li></ul></li></ul></li></ul></li><li class="comment even thread-even depth-1" id="comment-1239661"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Govardhan Vedams</span>  <span class="comment_date cye-lm-tag">July 9, 2015, 16:43</span></div><div class="comment_text" id="comment-body-1239661"><p class="cye-lm-tag">Thank you petri ,<br> I am using below code for expected url</p>
<pre><code>
.andExpect(content().source(containsString("Manage Entities"));
</code>
</pre><p class="cye-lm-tag">eclipse shows content() and containsString() are undefined , I am searching maven dependencies ,<br> but i can’t get solution.</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-1239662"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">July 9, 2015, 16:49</span></div><div class="comment_text" id="comment-body-1239662"><p class="cye-lm-tag">Unfortunately I don’t know what is wrong.</p>
</div> </div></li></ul></li><li class="comment even thread-odd thread-alt depth-1" id="comment-1241501"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Govardhan Vedams</span>  <span class="comment_date cye-lm-tag">July 13, 2015, 13:06</span></div><div class="comment_text" id="comment-body-1241501"><p class="cye-lm-tag">Hi Petri .</p>
<p class="cye-lm-tag">I add this ==&gt;   	.andExpect(content().contentType(“/WEB-INF/views/setup.jsp”));</p>
<p class="cye-lm-tag">but I got below error</p>
<p class="cye-lm-tag">org.springframework.http.InvalidMediaTypeException: Invalid mime type “/WEB-INF/views/setup.jsp”: type must not be empty</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-1241515"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">July 13, 2015, 13:22</span></div><div class="comment_text" id="comment-body-1241515"><p class="cye-lm-tag"><a href="http://docs.spring.io/spring/docs/4.1.x/javadoc-api/org/springframework/test/web/servlet/result/ContentResultMatchers.html#contentType-java.lang.String-" target="_blank" rel="nofollow">The <code>contentType()</code> method of the <code>ContentResultMatchers</code> class</a> asserts that the content type of the response is equal to the content type given as a method parameter. Since <code>'/WEB-INF/views/setup.jsp'</code> is not a legal mime type, it throws an exception.</p>
<p class="cye-lm-tag"> I recommend that you define the expected content type by using the <a href="http://docs.spring.io/spring/docs/4.1.x/javadoc-api/org/springframework/http/MediaType.html" target="_blank" rel="nofollow">MediaType</a> class.</p>
</div> </div></li></ul></li><li class="comment even thread-even depth-1" id="comment-1242704"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Govardhan Vedams</span>  <span class="comment_date cye-lm-tag">July 16, 2015, 11:00</span></div><div class="comment_text" id="comment-body-1242704"><p class="cye-lm-tag">Hi Petri , Good morning . I removed one pojo1  from pojo2 (mean remove one column(pojo1) from another table(pojo2)) .<br> I removed pojo1and pojo2  realations in both  hbm,xml ,<br> removed column properties in .sql file,<br> removed column1(pojo1) of set and get methods in both pojo2 classes only,<br> column of pojo1 is removed in pojo2 table using sql alter query. but i got below exception at the time of saving pojo2 info in db.</p>
<p class="cye-lm-tag">org.springframework.dao.InvalidDataAccessResourceUsageException: could not execute statement; SQL [n/a]; nested exception is org.hibernate.exception.SQLGrammarException: could not execute statement</p>
<p class="cye-lm-tag">org.hibernate.exception.SQLGrammarException: could not execute statement</p>
<p class="cye-lm-tag">Caused by: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column ‘ERMA’ (column1) in ‘field list’</p>
</div> </div><ul class="children"><li class="comment odd alt depth-2" id="comment-1242727"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Govardhan Vedams</span>  <span class="comment_date cye-lm-tag">July 16, 2015, 12:50</span></div><div class="comment_text" id="comment-body-1242727"><p class="cye-lm-tag">Thank u petri ,<br> I solve above bug, I am not execute the triggers related the tables in my db.</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-3" id="comment-1242791"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">July 16, 2015, 17:18</span></div><div class="comment_text" id="comment-body-1242791"><p class="cye-lm-tag">Hi,</p>
<p class="cye-lm-tag">It is good to hear that you were able to solve your problem!</p>
<blockquote><p class="cye-lm-tag">I am not execute the triggers related the tables in my db.</p>
</blockquote><p class="cye-lm-tag">Unfortunately I cannot know what is wrong without seeing the <code>CREATE TRIGGER</code> statements. Also, I need to see the database query or queries that should activate the trigger(s).</p>
</div> </div></li></ul></li></ul></li><li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1258210"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Kalpana</span>  <span class="comment_date cye-lm-tag">August 18, 2015, 19:15</span></div><div class="comment_text" id="comment-body-1258210"><p class="cye-lm-tag">Hello Petri ,</p>
<p class="cye-lm-tag">I am using spring boot. I am trying to write the Junit test for the controller. Can I follow the same as you mentioned in the blog ?</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-1258277"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">August 18, 2015, 22:25</span></div><div class="comment_text" id="comment-body-1258277"><p class="cye-lm-tag">Hi Kalpana,</p>
<blockquote><p class="cye-lm-tag">I am using spring boot. I am trying to write the Junit test for the controller. Can I follow the same as you mentioned in the blog ?</p>
</blockquote><p class="cye-lm-tag">Yes. I recommend that you use the standalone configuration for your unit tests and the web application context based setup for your integration tests.</p>
<p class="cye-lm-tag">The Spring Boot Reference Guide has a section that describes how you can <a href="http://docs.spring.io/spring-boot/docs/1.2.x/reference/htmlsingle/#boot-features-testing-spring-boot-applications" target="_blank" rel="nofollow">write tests for Spring Boot applications</a>. You can also <a href="https://github.com/pkainulainen/gradle-examples/tree/master/spring-boot-web-application" target="_blank" rel="nofollow">take a look at this example application</a>. It uses Spring Boot and has a few simple unit and integration tests.</p>
<p><a href="https://github.com/pkainulainen/gradle-examples">github gradle-examples</a></p>
</div> </div><ul class="children"><li class="comment odd alt depth-3" id="comment-1264838"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Kalpana</span>  <span class="comment_date cye-lm-tag">September 1, 2015, 21:46</span></div><div class="comment_text" id="comment-body-1264838"><p class="cye-lm-tag">thank you for your reply.</p>
<p class="cye-lm-tag">In my controller I am also checking BindingResult and setting variables for model, how to write unit test /Integration test for those functions in controller?<br> for Example :<br> In my controller:</p>
<pre><code>
public String test1(@ModelAttribute("bean1") Bean1, 
					BindingResult results,
					Model model){
	bean1.initialize();
	if(results.hasErrors())
		retunr "page1";

	bean1.setDetails(myservice.getdetails(true);//Calling service to get list
	model.addAttribute("bean1","bean1");
	return "page1";
}
</code>
</pre><p class="cye-lm-tag">do you have any suggestions for this type of functions ?</p>
<p class="cye-lm-tag">thanks ,<br> Kalpana</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-4" id="comment-1265119"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">September 2, 2015, 10:00</span></div><div class="comment_text" id="comment-body-1265119"><p class="cye-lm-tag">This blog post provides a few examples of unit tests that can be used to test controller methods like this (Test 1: Validation Fails and Test 2: Todo Entry Is Added to The Database).</p>
<p class="cye-lm-tag">If you want to write integration tests for this controller method, you should take a look at my <a href="/spring-mvc-test-tutorial/" rel="nofollow">Spring MVC Test tutorial</a> (search for ‘Integration Testing of Spring MVC Applications’).</p>
</div> </div></li></ul></li><li class="comment odd alt depth-3" id="comment-1264905"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Kalpana</span>  <span class="comment_date cye-lm-tag">September 2, 2015, 00:03</span></div><div class="comment_text" id="comment-body-1264905"><p class="cye-lm-tag">Also Petri, in your example you mentioned that ‘NesterRunner.class’ , i tried to import the same as you mentioned ‘import com.nitorcreations.junit.runners.NestedRunner;’ but still it couldnt recognize the nitorcreations.</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-4" id="comment-1265116"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">September 2, 2015, 09:53</span></div><div class="comment_text" id="comment-body-1265116"><p class="cye-lm-tag">Did you add the the required dependencies into your <em>pom.xml</em> file? If you did not do it, <a href="https://www.petrikainulainen.net/programming/testing/writing-clean-tests-small-is-beautiful/" rel="nofollow">follow the instructions given in this blog post</a>.</p>
</div> </div><ul class="children"><li class="comment odd alt depth-5" id="comment-1268172"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Anonymous</span>  <span class="comment_date cye-lm-tag">September 8, 2015, 19:47</span></div><div class="comment_text" id="comment-body-1268172"><p class="cye-lm-tag">Hello Petri,</p>
<p class="cye-lm-tag">Thank you for your reply . In my controller i am calling service to get the list from the database . While writing the unit test , it throws null pointer exception , do you have any clue how to overcome that one ?</p>
<p class="cye-lm-tag">public String test1(@ModelAttribute(“bean1”) Bean1,<br> BindingResult results,<br> Model model){<br> bean1.initialize();<br> if(results.hasErrors())<br> retunr “page1”;</p>
<p class="cye-lm-tag"> bean1.setDetails(myservice.getdetails(true);//Calling service to get list<br> model.addAttribute(“bean1″,”bean1”);<br> return “page1”;<br> }</p>
</div></div></li><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-5" id="comment-1268656"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">September 9, 2015, 18:03</span></div><div class="comment_text" id="comment-body-1268656"><p class="cye-lm-tag">Hi,</p>
<p class="cye-lm-tag">If you get a <code>NullPointerException</code> when the tested controller calls the service, the service isn’t injected property (it’s <code>null</code>). Do you use web application context based setup or standalone setup?</p>
</div></div></li></ul></li></ul></li></ul></li></ul></li><li class="comment odd alt thread-even depth-1" id="comment-1265769"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Michael P</span>  <span class="comment_date cye-lm-tag">September 3, 2015, 18:27</span></div><div class="comment_text" id="comment-body-1265769"><p class="cye-lm-tag">I see this method and I have trouble with it at an enterprise level and perhaps other developers can weigh in. You should differentiate the concept of Unit testing from Integration/Functional/Black Box testing. When you require testing at the dispatcher servlet level, your unit is now very large. If you want to check how mappings are mapping to individual methods, that test seems better suited toward functional testing (as in with Selenium or another tool like that). When you test for whether or not a 200 status code is returned or if the todo/lists resolves to the correct jsp, you are testing Spring itself! These tests should **already be covered** by Spring’s own unit tests! For your Unit test in the example above, for the TodoController with a single findAll() method, your unit tests for this controller **<em>should only be</em>** testing this findAll() method by a) mocking the service, b) passing in good/bad input to the method and c) validating behaviors and output for this method alone. A true unit test would not encompass testing the behaviors of Spring, because that is also to say that you do not trust the contracts that Spring has set up.</p>
<p class="cye-lm-tag">Of course, I am not saying that what I am suggesting is the only way to test – this approach relieves functional testing to a degree by combining into unit testing. It just also gives an alternate (in my opinion, incorrect) definition of unit testing, because you have expanded your unit across multiple classes and methods.</p>
<p class="cye-lm-tag">Please let me know your thoughts.</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-1266609"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">September 5, 2015, 10:07</span></div><div class="comment_text" id="comment-body-1266609"><p class="cye-lm-tag">Hi Michael,</p>
<blockquote><p class="cye-lm-tag">You should differentiate the concept of Unit testing from Integration/Functional/Black Box testing.</p>
</blockquote><p class="cye-lm-tag">Definitely.</p>
<blockquote><p class="cye-lm-tag">When you require testing at the dispatcher servlet level, your unit is now very large.</p>
</blockquote><p class="cye-lm-tag">I don’t necessarily require it, but this tutorial describes how the reader can do it if he/she wants to.</p>
<blockquote><p class="cye-lm-tag">If you want to check how mappings are mapping to individual methods, that test seems better suited toward functional testing (as in with Selenium or another tool like that). When you test for whether or not a 200 status code is returned or if the todo/lists resolves to the correct jsp, you are testing Spring itself! These tests should **already be covered** by Spring’s own unit tests!</p>
</blockquote><p class="cye-lm-tag">Yes and no. I agree that Spring’s own unit tests should definitely cover its features, but we have to write tests that cover the contract of the tested component. I think that the HTTP status code, the returned JSON, or the rendered JSP page are a part of that contract. That is why we must test them, but we must also find the answers to these questions:</p>
<ul><li>Should we test these things by using unit, integration, or end-to-end tests?</li><li>What tools should we use?</li></ul><p class="cye-lm-tag">By the way, Jim Coplien has written a thought provoking article titled: <a href="http://www.rbcs-us.com/documents/Why-Most-Unit-Testing-is-Waste.pdf" target="_blank" rel="nofollow">Why Most Unit Testing is Waste</a>. It tries to provide some answers to the first question.</p>
<blockquote><p class="cye-lm-tag">For your Unit test in the example above, for the TodoController with a single findAll() method, your unit tests for this controller **should only be** testing this findAll() method by a) mocking the service, b) passing in good/bad input to the method and c) validating behaviors and output for this method alone. A true unit test would not encompass testing the behaviors of Spring, because that is also to say that you do not trust the contracts that Spring has set up.</p>
</blockquote><p class="cye-lm-tag">This depends from the definition of the tested unit. If we think that the tested unit is one class, we should definitely ignore Spring Test MVC and write “normal” unit tests. On the other hand, if we think that <a href="http://andrzejonsoftware.blogspot.fi/2015/02/tdding-unit-not-class.html" target="_blank" rel="nofollow">the tested unit is something that provides a useful feature</a> (like a public API method), we should use Spring Test MVC.</p>
<p class="cye-lm-tag">Also, trusting Spring is one thing, but Spring doesn’t specify how the tested controller should behave. It only provides the framework that we use when we build our application on the top of it.</p>
<blockquote><p class="cye-lm-tag">Of course, I am not saying that what I am suggesting is the only way to test – this approach relieves functional testing to a degree by combining into unit testing. It just also gives an alternate (in my opinion, incorrect) definition of unit testing, because you have expanded your unit across multiple classes and methods.</p>
</blockquote><p class="cye-lm-tag">I have actually written these so called normal unit tests and I noticed that they have quite many problems. The two most painful problems are:</p>
<ul><li>If our controller method takes Spring specified object as a method parameter, we have to create these objects in our test class. Also, we have to initialize their internal state in our test class.</li><li>If we want to write tests, which ensure that the validation is working properly, we have to validate the form object in our test class.</li></ul><p class="cye-lm-tag">In other words, because I had to setup a lot of Spring related stuff in my test class, my unit tests were long, hard to read, and really error prone. This was actually one of the biggest reasons why people didn’t write unit tests for Spring MVC controllers. They used integration tests or end-to-end tests.</p>
<p class="cye-lm-tag">I chose a different path. I decided to start using Spring Test MVC because it helps me to write unit tests that explains the contract of the tested controller method to the person who reads them. Also, if I do TDD (I am still struggling with it), Spring Test MVC makes it a lot easier because I can concentrate on testing the contract of the tested controller method and ignore the burdensome setup phase.</p>
</div> </div></li></ul></li><li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1284170"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Gaetano</span>  <span class="comment_date cye-lm-tag">October 9, 2015, 14:09</span></div><div class="comment_text" id="comment-body-1284170"><p class="cye-lm-tag">Hi Petri, I’m bothering you early than expected :)</p>
<p class="cye-lm-tag">In my application, in order to provide feedbacks to the user I have small home made framework that is based on a class called Alert which has 3 properties:</p>
<pre><code>
String msgCode;	
String message;			
Priority priority; &lt;-- this is an ENUM
</code>
</pre><p class="cye-lm-tag">Anyway, depending on the scenario, I create a ArrayList of Alerts and add it to the model<br> These Alerts are displayed to the user in the appropriate way. Now my silly question<br> I'm able to check that the ArrayList of Alerts is present in the model and that it is actually an ArrayList:</p>
<pre><code>
.andExpect(model().attributeExists(Alert.ALERT_MSG))  		 
.andExpect(model().attribute(Alert.ALERT_MSG, instanceOf(ArrayList.class))) 
</code>
</pre><p class="cye-lm-tag">but how can I check the ArrayList's content? I have tried with hasPropertiy but it didn't get me anywhere. something like:</p>
<pre><code>
.andExpect(model().attribute(Alert.ALERT_MSG, hasPropertiy ??))) 
</code>
</pre><p class="cye-lm-tag">Do you have any suggestion?<br> thanks<br> Gaetano</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-1284467"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">October 9, 2015, 21:52</span></div><div class="comment_text" id="comment-body-1284467"><p class="cye-lm-tag">Hi!</p>
<p class="cye-lm-tag">If you take a look at the <a href="https://github.com/pkainulainen/spring-mvc-test-examples/blob/master/controllers-unittest/src/test/java/net/petrikainulainen/spring/testmvc/todo/controller/StandaloneTodoControllerTest.java" target="_blank" rel="nofollow"><code>StandAloneTodoControllerTest</code></a>, you notice that there is a solution to this problem. You need to follow these steps:</p>
<ol><li>Verify that the list has the correct number of items.</li><li>Ensure that the list has the correct items.</li></ol><p class="cye-lm-tag">The relevant part of my example looks as follows:</p>
<pre><code>
.andExpect(model().attribute("todos", hasSize(2)))
.andExpect(model().attribute("todos", hasItem(
	allOf(
		hasProperty("id", is(1L)),
		hasProperty("description", is("Lorem ipsum")),
		hasProperty("title", is("Foo"))
	)
)))
.andExpect(model().attribute("todos", hasItem(
	allOf(
		hasProperty("id", is(2L)),
		hasProperty("description", is("Lorem ipsum")),
		hasProperty("title", is("Bar"))
	)
)))
</code>
</pre><p class="cye-lm-tag">However, when I took a look at the the Javadoc of the <a href="http://hamcrest.org/JavaHamcrest/javadoc/1.3/org/hamcrest/Matchers.html" target="_blank" rel="nofollow"><code>Matchers</code></a> class, I noticed that it also has a <code>hasItems(Matcher&lt;? super T&gt;... itemMatchers)</code> method that makes this assertion a bit more cleaner and easier to read. If you convert the previous example to use that method, it looks as follows:</p>
<pre><code>
.andExpect(model().attribute("todos", hasSize(2)))
.andExpect(model().attribute("todos", hasItems(
	allOf(
		hasProperty("id", is(1L)),
		hasProperty("description", is("Lorem ipsum")),
		hasProperty("title", is("Foo"))
	),
	allOf(
		hasProperty("id", is(2L)),
		hasProperty("description", is("Lorem ipsum")),
		hasProperty("title", is("Bar"))
	)
)))
</code>
</pre></div> </div><ul class="children"><li class="comment odd alt depth-3" id="comment-1286846"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Anonymous</span>  <span class="comment_date cye-lm-tag">October 12, 2015, 13:57</span></div><div class="comment_text" id="comment-body-1286846"><p class="cye-lm-tag">Thanks it worked.<br> below my code:</p>
<pre><code>
.andExpect(model().attribute(Alert.ALERT_MSG, instanceOf(ArrayList.class))) 
.andExpect(model().attribute(Alert.ALERT_MSG, hasSize(1))) 					
.andExpect(model().attribute(Alert.ALERT_MSG, hasItems(						
	allOf(
		hasProperty("msgCode",is("errMsg.usrCreation.emailPresent")),
		hasProperty("priority",is(Alert.Priority.DANGER))
)))) 
</code>
</pre></div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-4" id="comment-1287032"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">October 12, 2015, 19:21</span></div><div class="comment_text" id="comment-body-1287032"><p class="cye-lm-tag">You are welcome. I am happy to hear that you were able to solve your problem!</p>
</div> </div></li></ul></li></ul></li></ul></li><li class="comment odd alt thread-even depth-1" id="comment-1284398"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Gaetano</span>  <span class="comment_date cye-lm-tag">October 9, 2015, 20:16</span></div><div class="comment_text" id="comment-body-1284398"><p class="cye-lm-tag">Hello Petri<br> apart from my previous question I’m also having problem testing Form Validation.<br> The part of the application that I’m trying to test  is basically User registration</p>
<p class="cye-lm-tag">In my application I’m using a spring custom validator:</p>
<pre><code>
import org.springframework.validation.ValidationUtils;
import org.springframework.validation.Validator;

@Component
public class UserValidator implements Validator {
	
	@Override
	public boolean supports(Class clazz) {
		return User.class.equals(clazz);
	}
	
	@Override
	public void validate(Object target, Errors errors) {
		//...
		ValidationUtils.rejectIfEmptyOrWhitespace(errors, 
				"firstName", 
				"errMsg.usrCreation.nameMandatory"
		);
		ValidationUtils.rejectIfEmptyOrWhitespace(errors, 
				"secondName", 
				"errMsg.usrCreation.surnameMandatory"
		);

		// here some other validation logic
	}	
}
</code>
</pre><p class="cye-lm-tag">In my Controller:</p>
<pre><code>
import org.springframework.validation.BindingResult;
import org.springframework.validation.Validator;

@Controller
public class UserController {

	@Autowired
	@Qualifier("userValidator")
	private Validator validator;
	...
	@InitBinder("aUser") 
	public void initBinder(WebDataBinder binder) {

		binder.setValidator(validator);
	}

	@RequestMapping(value = "/register", method = RequestMethod.POST)
	public String createUser(@Valid @ModelAttribute("aUser") User user,
							  BindingResult result,
							  Model model,
							  Locale locale) {
		
		if(result.hasErrors()) {
			System.out.println("Form has errors");
			return "newUserProfile"; //&lt;-- returns back the the form view 
		}
		// call the service to create the User
		return "success";
}
</code>
</pre><p class="cye-lm-tag">User.java is a very simple bean<br> with four properties , and related getters and setters</p>
<pre><code>
public class UserParameters {
	
	private String firstName;
	private String secondName;
	private String email;
	private String pwd;
	
	//constructors &amp; mutators	
}
</code>
</pre><p class="cye-lm-tag">If I run the application, the validation works perfectly fine, for example if I don’t provide a Name I get sent back to the User registration page and the error is displayed alongside  the appropriate field</p>
<p class="cye-lm-tag">During the JUnit Test the following assertion <code> .andExpect(model().attributeHasErrors("aUser")) </code> keeps failing.<br> It must be something related to Test configuration but I’m not able to figure it out. I’m using standalone approach, below the details of my test:</p>
<pre><code>
@RunWith(MockitoJUnitRunner.class)
public class UserControllerTest {

	private MockMvc mockMvc;
	
	@Mock
	private WebUserService webUserServiceMock;
	
	protected MessageSource messageSource;
	
	protected Validator validator;
	
	protected MessageSource messageSource() {
		ResourceBundleMessageSource messageSource = new ResourceBundleMessageSource();
		messageSource.setBasename("/i18n/messages");
		messageSource.setUseCodeAsDefaultMessage(true);
		return messageSource;
	}
	
	protected LocalValidatorFactoryBean validator() {
        return new LocalValidatorFactoryBean();
    }
	
	@Before
	public void setUp() {
		//MockitoAnnotations.initMocks(this); &lt; -- this was just an attempt but nothing changed
		messageSource = messageSource();
		UserProfileController  userProfileController = new UserProfileController();
		ReflectionTestUtils.setField(userProfileController, "messageSource", messageSource);
		ReflectionTestUtils.setField(userProfileController, "validator", validator);
		ReflectionTestUtils.setField(userProfileController, 
				"webUserService", 
				webUserServiceMock
		);
		mockMvc = MockMvcBuilders.standaloneSetup(userProfileController)
				.setValidator(validator())
				.build();
	}
	
	@Test 
	public void testFormSubmitionFailureDueToMissingName() throws Exception {
		WebUser webUser =  getWebUser(null,
				"Doe", 
				"johndoe@missing.com", 
				"myV3ryCoMplexP@55w0rD"
		); 
					
		mockMvc.perform(post("/register")
						.param("firstName", webUser.getFirstName()) &lt;-- here first name is null
						.param("secondName",webUser.getLastName() )
						.param("email", webUser.getEmailAddress())
						.param("pwd", webUser.getPassword()))							
					.andExpect(model().attributeHasErrors("aUserParam")); &lt;-- this keeps failing
}
</code>
</pre><p class="cye-lm-tag">Any suggestion will be very appreciated<br> Thanks and regards,<br> Gaetano</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-1284480"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">October 9, 2015, 22:05</span></div><div class="comment_text" id="comment-body-1284480"><p class="cye-lm-tag">Hi,</p>
<p class="cye-lm-tag">I noticed something that can cause this. If you take a look at the <a href="https://github.com/pkainulainen/spring-mvc-test-examples/blob/master/controllers-unittest/src/test/java/net/petrikainulainen/spring/testmvc/todo/controller/StandaloneTodoControllerTest.java" target="blank" rel="nofollow"><code>StandaloneTodoControllerTest</code></a>, you notice that you need to pass the name of the model attribute and the field names to the <code>attributeHasErrors()</code> method.</p>
<p class="cye-lm-tag">You should replace your current assertion with this one:</p>
<pre><code>
 .andExpect(model().attributeHasFieldErrors("aUser", "firstName"))
</code>
</pre></div> </div><ul class="children"><li class="comment odd alt depth-3" id="comment-1307586"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Gaetano</span>  <span class="comment_date cye-lm-tag">November 7, 2015, 18:27</span></div><div class="comment_text" id="comment-body-1307586"><p class="cye-lm-tag">Hello Petri,</p>
<p class="cye-lm-tag">I’m sorry to bother you again, I have tried your suggestion but it doesn’t make any difference. I’m still not able to test the Validator.</p>
<p class="cye-lm-tag">I did run JUnit in debug mode and I stuck a breakpoint in my Custom Validator, as I suspected, it is not called at all.</p>
<p class="cye-lm-tag">It may sound dumb to you but really do not understand how the following code is supposed to found  and instantiate my custom validator class…definitely must be something missing.</p>
<pre><code>
...
  protected LocalValidatorFactoryBean validator() {
          return new LocalValidatorFactoryBean();
      }
...
  mockMvc = MockMvcBuilders.standaloneSetup(userProfileController)
				.setValidator(validator()).build();
</code>
</pre><p class="cye-lm-tag">I would be extremely grateful for any help<br> cheers<br> Gaetano</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-4" id="comment-1307995"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">November 8, 2015, 10:04</span></div><div class="comment_text" id="comment-body-1307995"><p class="cye-lm-tag">Hi Gaetano,</p>
<blockquote><p class="cye-lm-tag">I’m sorry to bother you again, I have tried your suggestion but it doesn’t make any difference. I’m still not able to test the Validator.</p>
</blockquote><p class="cye-lm-tag">Don’t worry. You are not bothering me. This is actually a quite interesting problem.</p>
<blockquote><p class="cye-lm-tag">I did run JUnit in debug mode and I stuck a breakpoint in my Custom Validator, as I suspected, it is not called at all.</p>
</blockquote><p class="cye-lm-tag">This is a vital clue.</p>
<p class="cye-lm-tag">The code you mentioned doesn’t create your custom validator. It creates a validator that can validate objects by using the Bean Validation API. Based on your source code, the custom validator bean is injected to your controller by using field injection.</p>
<p class="cye-lm-tag">I noticed that you try to inject the custom validator by using the <code>ReflectionTestUtils</code> class:</p>
<pre><code>
@Before
public void setUp() {
	messageSource = messageSource();
	UserProfileController  userProfileController = new UserProfileController();
	ReflectionTestUtils.setField(userProfileController, 
			"messageSource", 
			messageSource
	);

	//Where do you create the custom validator object?
	ReflectionTestUtils.setField(userProfileController, "validator", validator);
	
	ReflectionTestUtils.setField(userProfileController, 
			"webUserService", 
			webUserServiceMock
	);
	
	mockMvc = MockMvcBuilders.standaloneSetup(userProfileController)
			.setValidator(validator())
			.build();
}
</code>
</pre><p class="cye-lm-tag">How do you create the custom validator object? It seems the <code>validator</code> field of your controller class is <code>null</code> (or I am missing something really obvious).</p>
<p class="cye-lm-tag">Also, it would be useful to know if the <code>initBinder()</code> method is invoked at all. If it is invoked, is the <code>validator</code> field <code>null</code>?</p>
</div> </div><ul class="children"><li class="comment odd alt depth-5" id="comment-1309502"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Gaetano</span>  <span class="comment_date cye-lm-tag">November 10, 2015, 20:57</span></div><div class="comment_text" id="comment-body-1309502"><p class="cye-lm-tag">Hello Petri,<br> I have  resolved my problem.<br> As you suggested the custom validator were never created (doh!!!)<br> I don’t need at all the code to the following<br> <code><br> protected LocalValidatorFactoryBean validator() {<br> return new LocalValidatorFactoryBean();<br> }<br> </code><br> All I had to do is create an instance of the custom validator in the setUp method and all went smoothly.<br> Below my updated code in case it might useful to someone else.</p>
<p class="cye-lm-tag">Thanks for your help,<br> cheers Gaetano</p>
<p class="cye-lm-tag"> <code><br> @RunWith(MockitoJUnitRunner.class)<br> public class UserControllerTest {</code></p>
<p class="cye-lm-tag"><code> private MockMvc mockMvc;</code></p>
<p class="cye-lm-tag"><code> @Mock<br> private WebUserService webUserServiceMock;</code></p>
<p class="cye-lm-tag"><code> protected MessageSource messageSource;</code></p>
<p class="cye-lm-tag"><code> protected UserValidator validator; // &lt;-- this is my custom validator</code></p>
<p class="cye-lm-tag"><code> protected MessageSource messageSource() {<br> ResourceBundleMessageSource messageSource = new ResourceBundleMessageSource();<br> messageSource.setBasename("/i18n/messages");<br> messageSource.setUseCodeAsDefaultMessage(true);<br> return messageSource;<br> }</code></p>
<p class="cye-lm-tag"><code> /* protected LocalValidatorFactoryBean validator() {  &lt;-- I don't need this at all!!<br> return new LocalValidatorFactoryBean();<br> }*/</code></p>
<p class="cye-lm-tag"><code> @Before<br> public void setUp() {</code></p>
<p class="cye-lm-tag"><code> messageSource = messageSource();</code></p>
<p class="cye-lm-tag"><code> validator = new UserValidator(); 				//&lt;-- here creating an instance of my custom validator</code></p>
<p class="cye-lm-tag"><code> UserProfileController  userProfileController = new UserProfileController();<br> ReflectionTestUtils.setField(userProfileController, "messageSource", messageSource);<br> ReflectionTestUtils.setField(userProfileController, "validator", validator);<br> ReflectionTestUtils.setField(userProfileController, "webUserService", webUserServiceMock<br> );<br> mockMvc = MockMvcBuilders.standaloneSetup(userProfileController)<br> .setValidator(validator).build(); //&lt;-- here setting the validator<br> }</code></p>
<p class="cye-lm-tag"><code> @Test<br> public void testFormSubmitionFailureDueToMissingName() throws Exception {<br> WebUser webUser =  getWebUser(null,<br> "Doe",<br> "johndoe@missing.com",<br> "myV3ryCoMplexP@55w0rD"<br> );</code></p>
<p class="cye-lm-tag"><code> mockMvc.perform(post("/register")<br> .param("firstName", webUser.getFirstName()) &lt;-- here first name is null<br> .param("secondName",webUser.getLastName() )<br> .param("email", webUser.getEmailAddress())<br> .param("pwd", webUser.getPassword()))<br> .andExpect(model().attributeHasFieldErrors("aUserParam", "firstName")); &lt;-- this is now successful<br> }<br> </code></p>
</div></div></li></ul></li></ul></li></ul></li></ul></li><li class="comment even thread-odd thread-alt depth-1" id="comment-1389600"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Dinh Duc</span>  <span class="comment_date cye-lm-tag">March 11, 2016, 21:08</span></div><div class="comment_text" id="comment-body-1389600"><p class="cye-lm-tag">Kun minä huomaan sun nimeen, olen satavarma sinä olet suomalainen! Minulla on vielä kysyttävän yhällä koodauksella ymmärtämättä. Mikä oikea todoBuilder() metodi on? Jos minulla on objektti, jonka nimi on Duuni, niin pystynkö kirjoittaa niin kuin</p>
<pre><code> 
Duuni duuni1 = new DuuniBuilder()
</code>
</pre><p class="cye-lm-tag">Ymmärsinkö oikein vai väärin? Anteeksi olen uusi Spring Framework tulija. Oikeasti tämä on todella hyvä tutoriaali!</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-1390327"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">March 12, 2016, 18:45</span></div><div class="comment_text" id="comment-body-1390327"><p class="cye-lm-tag">Moi,</p>
<p class="cye-lm-tag">olen suomalainen :) Kiitos kun kommentoit suomeksi, mutta vastaan englanniksi, koska noiden termien suomentaminen on hieman vaikeaa.</p>
<p class="cye-lm-tag">The <code>TodoBuilder</code> class is a so called test data builder, and you have to create this class yourself. In other words, before you can create <code>Duuni</code> objects by using the <code>DuuniBuilder</code> class, you have to create the <code>DuuniBuilder</code> class.</p>
<p class="cye-lm-tag">If you want to get more information about this, you should read my blog post that explains how you can <a href="https://www.petrikainulainen.net/programming/testing/writing-clean-tests-new-considered-harmful/" rel="nofollow">create test data by using factory methods and test data builders</a>.</p>
</div> </div><ul class="children"><li class="comment even depth-3" id="comment-1391054"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Duc Dinh</span>  <span class="comment_date cye-lm-tag">March 13, 2016, 17:35</span></div><div class="comment_text" id="comment-body-1391054"><p class="cye-lm-tag">Thanks for your answers!</p>
<p class="cye-lm-tag">Exactly! we should write in english, so everyone can understand what we say :). But I also already found the answer by reading the other tutorials from your blog yesterday. I’m working with Spring Framework version 4.0.0, maybe it’s some different with your version that you used. I tried to write a junit test for my controller but i get error like below :<br> org.mockito.exceptions.misusing.MissingMethodInvocationException:</p>
<p class="cye-lm-tag">when() requires an argument which has to be ‘a method call on a mock’.<br> For example:<br> when(mock.getArticles()).thenReturn(articles);</p>
<p class="cye-lm-tag">Also, this error might show up because:<br> 1. you stub either of: final/private/equals()/hashCode() methods.<br> Those methods *cannot* be stubbed/verified.<br> 2. inside when() you don’t call method on mock but on some other object.<br> 3. the parent of the mocked class is not public.<br> It is a limitation of the mock engine.</p>
<p class="cye-lm-tag">at vjb.de.vietjob.controller.DuuniControllerTest.showDuuniTest(DuuniControllerTest.java:17)</p>
<p class="cye-lm-tag">Here’s my test code:</p>
<pre><code>
@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration
@RequestMapping(value = "/")
public class DuuniControllerTest {
	private MockMvc mockMvc;

	@Inject
	private DuuniDao duuniDaoMock;
	

	@Test
	public void showDuuniTest() throws Exception {
		Duuni duuni1 = new DuuniImpl();
		Duuni duuni2 = new DuuniImpl();
		Duuni duuni3 = new DuuniImpl();
	
		when(duuniDaoMock.showDuuni()).thenReturn(
				Arrays.asList(duuni1, duuni2, duuni3));
		
		mockMvc.perform(get("/tyopaikka.lista"))
				.andExpect(status().isOk());
				
		verify(duuniDaoMock, times(1)).showDuuni();
		verifyNoMoreInteractions(duuniDaoMock);

	}
}
</code>
</pre><p class="cye-lm-tag">Could you explain where i was wrong?</p>
<p class="cye-lm-tag"><em>Update: I cleaned this comment a bit – Petri</em></p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-4" id="comment-1391919"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">March 14, 2016, 20:36</span></div><div class="comment_text" id="comment-body-1391919"><p class="cye-lm-tag">Hi,</p>
<p class="cye-lm-tag">You have to ensure that the <code>DuuniDao</code> object is a mock object. If you configure the <code>MockMvc</code> object by using the web application context based setup, you have to divide your <code>@Configuration</code> classes in a such way that you can replace the actual <code>DuuniDao</code> object with a mock object when you run your unit tests (<a href="https://www.petrikainulainen.net/programming/spring-framework/unit-testing-of-spring-mvc-controllers-configuration/" rel="nofollow">check this blog post for more details</a>).</p>
<p class="cye-lm-tag">That being said, I don’t use the web application context based setup in my unit tests anymore. It’s a bit confusing and managing the mock objects becomes pain in the ass if you have to create more than a few “mock beans”. Nowadays I configure the <code>MockMvc</code> object by using the standalone setup. If you want to know how I do this, you should <a href="https://www.petrikainulainen.net/programming/testing/writing-clean-tests-it-starts-from-the-configuration/" rel="nofollow">take a look at this blog post</a>.</p>
</div> </div></li></ul></li></ul></li></ul></li><li class="comment even thread-even depth-1" id="comment-1500985"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Will</span>  <span class="comment_date cye-lm-tag">November 3, 2016, 17:41</span></div><div class="comment_text" id="comment-body-1500985"><p class="cye-lm-tag">Hi, thanks for the article. When trying to implement this I get this error..<br> java.lang.ClassFormatError: Absent Code attribute in method that is not native or abstract in class file javax/servlet/SessionTrackingMode<br> Researching this it seems that the dependency..</p>
<p class="cye-lm-tag"> javax<br> javaee-web-api<br> 6.0<br> provided</p>
<p class="cye-lm-tag">is the culprit. The javax:javaee-api is only intended for compiling against, not for running against, including unit tests. If you need classes suitable for running against, you really need a full Java EE application server. I am a bit lost here as I thought the point of a junit is that you don’t need the application server. Any help would be much appreciated. Thanks.</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-1501347"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">November 4, 2016, 22:18</span></div><div class="comment_text" id="comment-body-1501347"><p class="cye-lm-tag">Hi,</p>
<p class="cye-lm-tag">What Spring and Java version are you using? The reason why I ask this is that the <code>ClassFormatException</code> is thrown when the VM cannot read a class because it’s malformed (or not a class file). I assume that root cause of this problem is that you might be using dependencies that are too old for your Java version, but I cannot be sure of this until you answer to my question.</p>
<p class="cye-lm-tag">That being said, Spring MVC Test does require a few Java EE dependencies for running unit tests that use Spring MVC Test. I assume that it uses some classes from these modules in its mock servlet API implementation (I haven’t read its code though).</p>
<p class="cye-lm-tag">If you want to write unit tests for normal Spring MVC controllers that render a view, you can take a look at <a href="https://github.com/pkainulainen/test-with-spring/blob/master/starter-package/writing-unit-tests-for-spring-web-apps/normal-controllers/spring/pom.xml" target="_blank" rel="nofollow">this POM file</a>. It’s an example application of my Test With Spring course, and that is the configuration I use nowadays (this is a rather old post).</p>
</div> </div><ul class="children"><li class="comment even depth-3" id="comment-1502827"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Will</span>  <span class="comment_date cye-lm-tag">November 10, 2016, 13:30</span></div><div class="comment_text" id="comment-body-1502827"><p class="cye-lm-tag">Hi thanks for the reply. My POM file looks like this…I will look at this one.</p>
<p class="cye-lm-tag"><em>Update: Removed the POM file since Wordpress stripped all tags and the file was unreadable – Petri</em></p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-4" id="comment-1504216"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">November 16, 2016, 22:05</span></div><div class="comment_text" id="comment-body-1504216"><p class="cye-lm-tag">You are welcome. I hope that you were able to fix your POM file.</p>
</div> </div></li></ul></li></ul></li></ul></li><li class="comment even thread-odd thread-alt depth-1" id="comment-1517456"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Kostyantyn</span>  <span class="comment_date cye-lm-tag">January 15, 2017, 20:04</span></div><div class="comment_text" id="comment-body-1517456"><p class="cye-lm-tag">Petri, hi!<br> First of all I’d like to thank you for work you’ve done. I really enjoy reading your tutorial. Breaf, “meaty” and understandable. It’s exactly what I’ve been looking for :)<br> I’m just starting mastering Spring MVC app and I’ve got a problem, so I need some help: test configuration is done (based on your example), tests run successfully (in Eclipse: Run as -&gt; Maven test). But when I try to run project from Eclipse (Run as -&gt; Run on server) I receive an error “No qualifying bean of type [here goes type on one of my services] is defined: expected single matching bean but found 2”. As far as I understand it happens because we have test context configuration class (where mocks are created). Could you, please, advice me how to fix this problem :)</p>
</div> </div><ul class="children"><li class="comment odd alt depth-2" id="comment-1517461"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Kostyantyn</span>  <span class="comment_date cye-lm-tag">January 15, 2017, 20:18</span></div><div class="comment_text" id="comment-body-1517461"><p class="cye-lm-tag">Maven -&gt; Update project… solved the problem.</p>
</div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-3" id="comment-1517958"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span>  <span class="comment_date cye-lm-tag">January 18, 2017, 23:59</span></div><div class="comment_text" id="comment-body-1517958"><p class="cye-lm-tag">Hi,</p>
<p class="cye-lm-tag">It’s good to know that were able to solve your problem. Also, if you want to get up-to-date examples about writing unit and integration tests for Spring web applications, you should <a href="https://github.com/pkainulainen/test-with-spring" target="_blank" rel="nofollow">take a look at the examples</a> of my <a href="https://www.testwithspring.com" target="_blank" rel="nofollow">Test With Spring course</a>. Note that even though the course is not free, the examples are (and will be) free.</p>
<p><b>git clone git@github.com:pkainulainen/test-with-spring.git</b></p>
</div> </div></li></ul></li></ul></li></ul>
</section>
</body>
</html>