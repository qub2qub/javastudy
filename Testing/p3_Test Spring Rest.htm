<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<title>p3_Test Spring Rest</title>
    <link rel="stylesheet" href="../Git Guide/grey.css">
    <style type="text/css">
    	div.comment-container {
    		border: 1px solid #920000;
    	}
    </style>
</head>
<body>
<a href="https://www.petrikainulainen.net/programming/spring-framework/unit-testing-of-spring-mvc-controllers-rest-api/">P3 _ Unit Testing of Spring MVC Controllers: REST API
</a>

<div class="post_content" itemprop="articleBody"><p class="cye-lm-tag">Spring MVC provides an easy way to create REST APIs. However, writing comprehensive and fast unit tests for these APIs has been troublesome. The release of the <a href="http://static.springsource.org/spring/docs/3.2.x/spring-framework-reference/htmlsingle/#spring-mvc-test-framework" target="_blank">Spring MVC Test framework</a> gave us the possibility to write unit tests which are readable, comprehensive and fast.</p><p class="cye-lm-tag">This blog post describes how we can write unit tests for a REST API by using the Spring MVC Test framework. During this blog post we will write unit tests for controller methods which provide CRUD functions for todo entries.</p><p class="cye-lm-tag">Let’s get started.</p><p class="cye-lm-tag"></p><div class="note course-banner"><strong>I released the starter package of my "Test With Spring" course:</strong><p class="cye-lm-tag"></p><p class="cye-lm-tag"><strong><a href="https://www.testwithspring.com/?utm_source=petri-kainulainen&amp;utm_medium=web&amp;utm_content=spring-mvc-unit-start&amp;utm_campaign=test-with-spring-course-presales" target="_blank">CHECK IT OUT &gt;&gt;</a></strong></p></div><h2>Getting The Required Dependencies with Maven</h2><p class="cye-lm-tag">We can get the required testing dependencies by adding the following dependency declarations to our POM file:</p><ul><li>Hamcrest 1.3 (<em>hamcrest-all</em>). We use Hamcrest matchers when we are writing assertions for the responses.</li><li>Junit 4.11. We need to exclude the <em>hamcrest-core</em> dependency because we already added the <em>hamcrest-all</em> dependency.</li><li>Mockito 1.9.5 (<em>mockito-core</em>). We use Mockito as our mocking library.</li><li>Spring Test 3.2.3.RELEASE</li><li>JsonPath 0.8.1 (<em>json-path</em> and <em>json-path-assert</em>). We use JsonPath when we are writing assertions for JSON documents returned by our REST API.</li></ul><p class="cye-lm-tag">The relevant dependency declarations looks as follows:</p><div><div id="highlighter_753149" class="syntaxhighlighter  xml"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div class="line number23 index22 alt2">23</div><div class="line number24 index23 alt1">24</div><div class="line number25 index24 alt2">25</div><div class="line number26 index25 alt1">26</div><div class="line number27 index26 alt2">27</div><div class="line number28 index27 alt1">28</div><div class="line number29 index28 alt2">29</div><div class="line number30 index29 alt1">30</div><div class="line number31 index30 alt2">31</div><div class="line number32 index31 alt1">32</div><div class="line number33 index32 alt2">33</div><div class="line number34 index33 alt1">34</div><div class="line number35 index34 alt2">35</div><div class="line number36 index35 alt1">36</div><div class="line number37 index36 alt2">37</div><div class="line number38 index37 alt1">38</div><div class="line number39 index38 alt2">39</div><div class="line number40 index39 alt1">40</div><div class="line number41 index40 alt2">41</div><div class="line number42 index41 alt1">42</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="xml plain">&lt;</code><code class="xml keyword">dependency</code><code class="xml plain">&gt;</code></div><div class="line number2 index1 alt1"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">groupId</code><code class="xml plain">&gt;org.hamcrest&lt;/</code><code class="xml keyword">groupId</code><code class="xml plain">&gt;</code></div><div class="line number3 index2 alt2"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">artifactId</code><code class="xml plain">&gt;hamcrest-all&lt;/</code><code class="xml keyword">artifactId</code><code class="xml plain">&gt;</code></div><div class="line number4 index3 alt1"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">version</code><code class="xml plain">&gt;1.3&lt;/</code><code class="xml keyword">version</code><code class="xml plain">&gt;</code></div><div class="line number5 index4 alt2"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">scope</code><code class="xml plain">&gt;test&lt;/</code><code class="xml keyword">scope</code><code class="xml plain">&gt;</code></div><div class="line number6 index5 alt1"><code class="xml plain">&lt;/</code><code class="xml keyword">dependency</code><code class="xml plain">&gt;</code></div><div class="line number7 index6 alt2"><code class="xml plain">&lt;</code><code class="xml keyword">dependency</code><code class="xml plain">&gt;</code></div><div class="line number8 index7 alt1"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">groupId</code><code class="xml plain">&gt;junit&lt;/</code><code class="xml keyword">groupId</code><code class="xml plain">&gt;</code></div><div class="line number9 index8 alt2"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">artifactId</code><code class="xml plain">&gt;junit&lt;/</code><code class="xml keyword">artifactId</code><code class="xml plain">&gt;</code></div><div class="line number10 index9 alt1"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">version</code><code class="xml plain">&gt;4.11&lt;/</code><code class="xml keyword">version</code><code class="xml plain">&gt;</code></div><div class="line number11 index10 alt2"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">scope</code><code class="xml plain">&gt;test&lt;/</code><code class="xml keyword">scope</code><code class="xml plain">&gt;</code></div><div class="line number12 index11 alt1"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">exclusions</code><code class="xml plain">&gt;</code></div><div class="line number13 index12 alt2"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">exclusion</code><code class="xml plain">&gt;</code></div><div class="line number14 index13 alt1"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">artifactId</code><code class="xml plain">&gt;hamcrest-core&lt;/</code><code class="xml keyword">artifactId</code><code class="xml plain">&gt;</code></div><div class="line number15 index14 alt2"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">groupId</code><code class="xml plain">&gt;org.hamcrest&lt;/</code><code class="xml keyword">groupId</code><code class="xml plain">&gt;</code></div><div class="line number16 index15 alt1"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;/</code><code class="xml keyword">exclusion</code><code class="xml plain">&gt;</code></div><div class="line number17 index16 alt2"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;/</code><code class="xml keyword">exclusions</code><code class="xml plain">&gt;</code></div><div class="line number18 index17 alt1"><code class="xml plain">&lt;/</code><code class="xml keyword">dependency</code><code class="xml plain">&gt;</code></div><div class="line number19 index18 alt2"><code class="xml plain">&lt;</code><code class="xml keyword">dependency</code><code class="xml plain">&gt;</code></div><div class="line number20 index19 alt1"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">groupId</code><code class="xml plain">&gt;org.mockito&lt;/</code><code class="xml keyword">groupId</code><code class="xml plain">&gt;</code></div><div class="line number21 index20 alt2"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">artifactId</code><code class="xml plain">&gt;mockito-core&lt;/</code><code class="xml keyword">artifactId</code><code class="xml plain">&gt;</code></div><div class="line number22 index21 alt1"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">version</code><code class="xml plain">&gt;1.9.5&lt;/</code><code class="xml keyword">version</code><code class="xml plain">&gt;</code></div><div class="line number23 index22 alt2"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">scope</code><code class="xml plain">&gt;test&lt;/</code><code class="xml keyword">scope</code><code class="xml plain">&gt;</code></div><div class="line number24 index23 alt1"><code class="xml plain">&lt;/</code><code class="xml keyword">dependency</code><code class="xml plain">&gt;</code></div><div class="line number25 index24 alt2"><code class="xml plain">&lt;</code><code class="xml keyword">dependency</code><code class="xml plain">&gt;</code></div><div class="line number26 index25 alt1"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">groupId</code><code class="xml plain">&gt;org.springframework&lt;/</code><code class="xml keyword">groupId</code><code class="xml plain">&gt;</code></div><div class="line number27 index26 alt2"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">artifactId</code><code class="xml plain">&gt;spring-test&lt;/</code><code class="xml keyword">artifactId</code><code class="xml plain">&gt;</code></div><div class="line number28 index27 alt1"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">version</code><code class="xml plain">&gt;3.2.3.RELEASE&lt;/</code><code class="xml keyword">version</code><code class="xml plain">&gt;</code></div><div class="line number29 index28 alt2"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">scope</code><code class="xml plain">&gt;test&lt;/</code><code class="xml keyword">scope</code><code class="xml plain">&gt;</code></div><div class="line number30 index29 alt1"><code class="xml plain">&lt;/</code><code class="xml keyword">dependency</code><code class="xml plain">&gt;</code></div><div class="line number31 index30 alt2"><code class="xml plain">&lt;</code><code class="xml keyword">dependency</code><code class="xml plain">&gt;</code></div><div class="line number32 index31 alt1"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">groupId</code><code class="xml plain">&gt;com.jayway.jsonpath&lt;/</code><code class="xml keyword">groupId</code><code class="xml plain">&gt;</code></div><div class="line number33 index32 alt2"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">artifactId</code><code class="xml plain">&gt;json-path&lt;/</code><code class="xml keyword">artifactId</code><code class="xml plain">&gt;</code></div><div class="line number34 index33 alt1"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">version</code><code class="xml plain">&gt;0.8.1&lt;/</code><code class="xml keyword">version</code><code class="xml plain">&gt;</code></div><div class="line number35 index34 alt2"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">scope</code><code class="xml plain">&gt;test&lt;/</code><code class="xml keyword">scope</code><code class="xml plain">&gt;</code></div><div class="line number36 index35 alt1"><code class="xml plain">&lt;/</code><code class="xml keyword">dependency</code><code class="xml plain">&gt;</code></div><div class="line number37 index36 alt2"><code class="xml plain">&lt;</code><code class="xml keyword">dependency</code><code class="xml plain">&gt;</code></div><div class="line number38 index37 alt1"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">groupId</code><code class="xml plain">&gt;com.jayway.jsonpath&lt;/</code><code class="xml keyword">groupId</code><code class="xml plain">&gt;</code></div><div class="line number39 index38 alt2"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">artifactId</code><code class="xml plain">&gt;json-path-assert&lt;/</code><code class="xml keyword">artifactId</code><code class="xml plain">&gt;</code></div><div class="line number40 index39 alt1"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">version</code><code class="xml plain">&gt;0.8.1&lt;/</code><code class="xml keyword">version</code><code class="xml plain">&gt;</code></div><div class="line number41 index40 alt2"><code class="xml spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">scope</code><code class="xml plain">&gt;test&lt;/</code><code class="xml keyword">scope</code><code class="xml plain">&gt;</code></div><div class="line number42 index41 alt1"><code class="xml plain">&lt;/</code><code class="xml keyword">dependency</code><code class="xml plain">&gt;</code></div></div></td></tr></tbody></table></div></div><p class="cye-lm-tag">Let’s move on and talk a bit about the configuration of our unit tests.</p><h2>Configuring Our Unit Tests</h2><p class="cye-lm-tag">The unit tests which we will write during this blog post use the web application context based configuration. This means that we configure the Spring MVC infrastructure by using either an application context configuration class or a XML configuration file.</p><p class="cye-lm-tag">Because the <a href="http://www.petrikainulainen.net/programming/spring-framework/unit-testing-of-spring-mvc-controllers-configuration#appcontext-config">first part of this tutorial</a> described the principles which we should follow when we are configuring the application context of our application, this issue is not discussed in this blog post.</p><p class="cye-lm-tag">However, there is one thing that we have to address here.</p><p class="cye-lm-tag">The application context configuration class (or file) which configures the web layer of our example application does not create an exception resolver bean. The <a href="http://static.springsource.org/spring/docs/3.2.x/javadoc-api/org/springframework/web/portlet/handler/SimpleMappingExceptionResolver.html" target="_blank"><em>SimpleMappingExceptionResolver</em></a> class used in the earlier parts of this tutorial maps exception class name to the view which is rendered when the configured exception is thrown.</p><p class="cye-lm-tag">This makes sense if we are implementing a “normal” Spring MVC application. However, if we are implementing a REST API, we want to transform exceptions into HTTP status codes. This behavior is provided by the <a href="http://static.springsource.org/spring/docs/3.2.x/javadoc-api/org/springframework/web/servlet/mvc/annotation/ResponseStatusExceptionResolver.html" target="_blank"><em>ResponseStatusExceptionResolver</em></a> class which is enabled by default.</p><p class="cye-lm-tag">Our example application also has a <a href="http://static.springsource.org/spring/docs/3.2.x/spring-framework-reference/htmlsingle/#mvc-exceptionhandlers-resolver" target="_blank">custom exception handler class which is annotated with the @ControllerAdvice annotation</a>. This class handles validation errors and application specific exceptions. We will talk more about this class later in this blog post.</p><p class="cye-lm-tag">Let’s move on and find out how we can write unit tests for our REST API.</p><h2>Writing Unit Tests for a REST API</h2><p class="cye-lm-tag">Before we can start writing unit tests for our REST API, we need to understand two things:</p><ul><li>We need to know what are the core components of the Spring MVC Test framework. These components are described in the <a href="http://www.petrikainulainen.net/programming/spring-framework/unit-testing-of-spring-mvc-controllers-normal-controllers#writing-unit-tests">second part of this tutorial</a>.</li><li>We need to know how we can write assertions for JSON documents by using JsonPath expressions. We can get this information by reading my blog post which describes <a href="http://www.petrikainulainen.net/programming/spring-framework/integration-testing-of-spring-mvc-applications-write-clean-assertions-with-jsonpath#writing-integration-tests">how we can write clean assertions with JsonPath</a>.</li></ul><p class="cye-lm-tag">Next we will see the Spring MVC Test framework in action and write unit tests for the following controller methods:</p><ul><li>The first controller methods returns a list of todo entries.</li><li>The second controller method returns the information of a single todo entry.</li><li>The third controller method adds a new todo entry to the database and returns the added todo entry.</li></ul><h3>Get Todo Entries</h3><p class="cye-lm-tag">The first controller method returns a list of todo entries which are found from the database. Let’s start by taking a look at the implementation of this method.</p><h4>Expected Behavior</h4><p class="cye-lm-tag">The controller method which returns all todo entries stored to the database is implemented by following these steps:</p><ol><li>It processes <em>GET</em> requests send to url ‘/api/todo’.</li><li>It gets a list of <em>Todo</em> objects by calling the <em>findAll()</em> method of the <em>TodoService</em> interface. This method returns all todo entries which are stored to the database. These todo entries are always returned in the same order.</li><li>It transforms the received list into a list of <em>TodoDTO</em> objects.</li><li>It returns the list which contains <em>TodoDTO</em> objects.</li></ol><p class="cye-lm-tag">The relevant part of the <em>TodoController</em> class looks as follows:</p><div><div id="highlighter_416742" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div class="line number23 index22 alt2">23</div><div class="line number24 index23 alt1">24</div><div class="line number25 index24 alt2">25</div><div class="line number26 index25 alt1">26</div><div class="line number27 index26 alt2">27</div><div class="line number28 index27 alt1">28</div><div class="line number29 index28 alt2">29</div><div class="line number30 index29 alt1">30</div><div class="line number31 index30 alt2">31</div><div class="line number32 index31 alt1">32</div><div class="line number33 index32 alt2">33</div><div class="line number34 index33 alt1">34</div><div class="line number35 index34 alt2">35</div><div class="line number36 index35 alt1">36</div><div class="line number37 index36 alt2">37</div><div class="line number38 index37 alt1">38</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.stereotype.Controller;</code></div><div class="line number2 index1 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.web.bind.annotation.*;</code></div><div class="line number3 index2 alt2">&nbsp;</div><div class="line number4 index3 alt1"><code class="java keyword">import</code> <code class="java plain">java.util.ArrayList;</code></div><div class="line number5 index4 alt2"><code class="java keyword">import</code> <code class="java plain">java.util.List;</code></div><div class="line number6 index5 alt1">&nbsp;</div><div class="line number7 index6 alt2"><code class="java color1">@Controller</code></div><div class="line number8 index7 alt1"><code class="java keyword">public</code> <code class="java keyword">class</code> <code class="java plain">TodoController {</code></div><div class="line number9 index8 alt2">&nbsp;</div><div class="line number10 index9 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java plain">TodoService service;</code></div><div class="line number11 index10 alt2">&nbsp;</div><div class="line number12 index11 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@RequestMapping</code><code class="java plain">(value = </code><code class="java string">"/api/todo"</code><code class="java plain">, method = RequestMethod.GET)</code></div><div class="line number13 index12 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@ResponseBody</code></div><div class="line number14 index13 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java plain">List&lt;TodoDTO&gt; findAll() {</code></div><div class="line number15 index14 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">List&lt;Todo&gt; models = service.findAll();</code></div><div class="line number16 index15 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">return</code> <code class="java plain">createDTOs(models);</code></div><div class="line number17 index16 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number18 index17 alt1">&nbsp;</div><div class="line number19 index18 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java plain">List&lt;TodoDTO&gt; createDTOs(List&lt;Todo&gt; models) {</code></div><div class="line number20 index19 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">List&lt;TodoDTO&gt; dtos = </code><code class="java keyword">new</code> <code class="java plain">ArrayList&lt;&gt;();</code></div><div class="line number21 index20 alt2">&nbsp;</div><div class="line number22 index21 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">for</code> <code class="java plain">(Todo model: models) {</code></div><div class="line number23 index22 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">dtos.add(createDTO(model));</code></div><div class="line number24 index23 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number25 index24 alt2">&nbsp;</div><div class="line number26 index25 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">return</code> <code class="java plain">dtos;</code></div><div class="line number27 index26 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number28 index27 alt1">&nbsp;</div><div class="line number29 index28 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java plain">TodoDTO createDTO(Todo model) {</code></div><div class="line number30 index29 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">TodoDTO dto = </code><code class="java keyword">new</code> <code class="java plain">TodoDTO();</code></div><div class="line number31 index30 alt2">&nbsp;</div><div class="line number32 index31 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">dto.setId(model.getId());</code></div><div class="line number33 index32 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">dto.setDescription(model.getDescription());</code></div><div class="line number34 index33 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">dto.setTitle(model.getTitle());</code></div><div class="line number35 index34 alt2">&nbsp;</div><div class="line number36 index35 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">return</code> <code class="java plain">dto;</code></div><div class="line number37 index36 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number38 index37 alt1"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><p class="cye-lm-tag">When a list of <em>TodoDTO</em> objects is returned, Spring MVC transforms this list into a JSON document which contains a collection of objects. The returned JSON document looks as follows:</p><div><div id="highlighter_914964" class="syntaxhighlighter nogutter  plain"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="plain plain">[</code></div><div class="line number2 index1 alt1"><code class="plain spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain plain">{</code></div><div class="line number3 index2 alt2"><code class="plain spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain plain">"id":1,</code></div><div class="line number4 index3 alt1"><code class="plain spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain plain">"description":"Lorem ipsum",</code></div><div class="line number5 index4 alt2"><code class="plain spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain plain">"title":"Foo"</code></div><div class="line number6 index5 alt1"><code class="plain spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain plain">},</code></div><div class="line number7 index6 alt2"><code class="plain spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain plain">{</code></div><div class="line number8 index7 alt1"><code class="plain spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain plain">"id":2,</code></div><div class="line number9 index8 alt2"><code class="plain spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain plain">"description":"Lorem ipsum",</code></div><div class="line number10 index9 alt1"><code class="plain spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain plain">"title":"Bar"</code></div><div class="line number11 index10 alt2"><code class="plain spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain plain">}</code></div><div class="line number12 index11 alt1"><code class="plain plain">]</code></div></div></td></tr></tbody></table></div></div><p class="cye-lm-tag">Let’s move on and write an unit test which ensures that this controller method is working as expected.</p><h4>Test: Todo Entries Are Found</h4><p class="cye-lm-tag">We can write an unit test for this controller method by following these steps:</p><ol><li>Create the test data which is returned when the <em>findAll()</em> method of the <em>TodoService</em> interface is called. We create the test data by using a <a href="http://web.archive.org/web/20150512204023/http://nat.truemesh.com:80/archives/000714.html" target="_blank">test data builder</a> class.</li><li>Configure our mock object to return the created test data when its <em>findAll()</em> method is invoked.</li><li>Execute a <em>GET</em> request to url ‘/api/todo’.</li><li>Verify that the HTTP status code 200 is returned.</li><li>Verify that the content type of the response is ‘application/json’ and its character set is ‘UTF-8’.</li><li>Get the collection of todo entries by using the JsonPath expression <em>$</em> and ensure that that two todo entries are returned.</li><li>Get the <em>id</em>, <em>description</em>, and <em>title</em> of the first todo entry by using JsonPath expressions <em>$[0].id</em>, <em>$[0].description</em>, and <em>$[0].title</em>. Verify that the correct values are returned.</li><li>Get the <em>id</em>, <em>description</em>, and title of the second todo entry by using JsonPath expressions <em>$[1].id</em>, <em>$[1].description</em>, and <em>$[1].title</em>. Verify that the correct values are returned.</li><li>Verify that the <em>findAll()</em> method of the <em>TodoService</em> interface is called only once.</li><li>Ensure that no other methods of our mock object are called during the test.</li></ol><p class="cye-lm-tag">The source code of our unit test looks as follows:</p><div><div id="highlighter_170084" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div class="line number23 index22 alt2">23</div><div class="line number24 index23 alt1">24</div><div class="line number25 index24 alt2">25</div><div class="line number26 index25 alt1">26</div><div class="line number27 index26 alt2">27</div><div class="line number28 index27 alt1">28</div><div class="line number29 index28 alt2">29</div><div class="line number30 index29 alt1">30</div><div class="line number31 index30 alt2">31</div><div class="line number32 index31 alt1">32</div><div class="line number33 index32 alt2">33</div><div class="line number34 index33 alt1">34</div><div class="line number35 index34 alt2">35</div><div class="line number36 index35 alt1">36</div><div class="line number37 index36 alt2">37</div><div class="line number38 index37 alt1">38</div><div class="line number39 index38 alt2">39</div><div class="line number40 index39 alt1">40</div><div class="line number41 index40 alt2">41</div><div class="line number42 index41 alt1">42</div><div class="line number43 index42 alt2">43</div><div class="line number44 index43 alt1">44</div><div class="line number45 index44 alt2">45</div><div class="line number46 index45 alt1">46</div><div class="line number47 index46 alt2">47</div><div class="line number48 index47 alt1">48</div><div class="line number49 index48 alt2">49</div><div class="line number50 index49 alt1">50</div><div class="line number51 index50 alt2">51</div><div class="line number52 index51 alt1">52</div><div class="line number53 index52 alt2">53</div><div class="line number54 index53 alt1">54</div><div class="line number55 index54 alt2">55</div><div class="line number56 index55 alt1">56</div><div class="line number57 index56 alt2">57</div><div class="line number58 index57 alt1">58</div><div class="line number59 index58 alt2">59</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">import</code> <code class="java plain">org.junit.Test;</code></div><div class="line number2 index1 alt1"><code class="java keyword">import</code> <code class="java plain">org.junit.runner.RunWith;</code></div><div class="line number3 index2 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.beans.factory.annotation.Autowired;</code></div><div class="line number4 index3 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.test.context.ContextConfiguration;</code></div><div class="line number5 index4 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</code></div><div class="line number6 index5 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.test.context.web.WebAppConfiguration;</code></div><div class="line number7 index6 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.test.web.servlet.MockMvc;</code></div><div class="line number8 index7 alt1">&nbsp;</div><div class="line number9 index8 alt2"><code class="java keyword">import</code> <code class="java plain">java.util.Arrays;</code></div><div class="line number10 index9 alt1">&nbsp;</div><div class="line number11 index10 alt2"><code class="java keyword">import</code> <code class="java keyword">static</code> <code class="java plain">org.hamcrest.Matchers.*;</code></div><div class="line number12 index11 alt1"><code class="java keyword">import</code> <code class="java keyword">static</code> <code class="java plain">org.mockito.Mockito.*;</code></div><div class="line number13 index12 alt2"><code class="java keyword">import</code> <code class="java keyword">static</code> <code class="java plain">org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;</code></div><div class="line number14 index13 alt1"><code class="java keyword">import</code> <code class="java keyword">static</code> <code class="java plain">org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;</code></div><div class="line number15 index14 alt2">&nbsp;</div><div class="line number16 index15 alt1"><code class="java color1">@RunWith</code><code class="java plain">(SpringJUnit4ClassRunner.</code><code class="java keyword">class</code><code class="java plain">)</code></div><div class="line number17 index16 alt2"><code class="java color1">@ContextConfiguration</code><code class="java plain">(classes = {TestContext.</code><code class="java keyword">class</code><code class="java plain">, WebAppContext.</code><code class="java keyword">class</code><code class="java plain">})</code></div><div class="line number18 index17 alt1"><code class="java color1">@WebAppConfiguration</code></div><div class="line number19 index18 alt2"><code class="java keyword">public</code> <code class="java keyword">class</code> <code class="java plain">TodoControllerTest {</code></div><div class="line number20 index19 alt1">&nbsp;</div><div class="line number21 index20 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java plain">MockMvc mockMvc;</code></div><div class="line number22 index21 alt1">&nbsp;</div><div class="line number23 index22 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Autowired</code></div><div class="line number24 index23 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java plain">TodoService todoServiceMock;</code></div><div class="line number25 index24 alt2">&nbsp;</div><div class="line number26 index25 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java comments">//Add WebApplicationContext field here.</code></div><div class="line number27 index26 alt2">&nbsp;</div><div class="line number28 index27 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java comments">//The setUp() method is omitted.</code></div><div class="line number29 index28 alt2">&nbsp;</div><div class="line number30 index29 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Test</code></div><div class="line number31 index30 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java keyword">void</code> <code class="java plain">findAll_TodosFound_ShouldReturnFoundTodoEntries() </code><code class="java keyword">throws</code> <code class="java plain">Exception {</code></div><div class="line number32 index31 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">Todo first = </code><code class="java keyword">new</code> <code class="java plain">TodoBuilder()</code></div><div class="line number33 index32 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">.id(1L)</code></div><div class="line number34 index33 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">.description(</code><code class="java string">"Lorem ipsum"</code><code class="java plain">)</code></div><div class="line number35 index34 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">.title(</code><code class="java string">"Foo"</code><code class="java plain">)</code></div><div class="line number36 index35 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">.build();</code></div><div class="line number37 index36 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">Todo second = </code><code class="java keyword">new</code> <code class="java plain">TodoBuilder()</code></div><div class="line number38 index37 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">.id(2L)</code></div><div class="line number39 index38 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">.description(</code><code class="java string">"Lorem ipsum"</code><code class="java plain">)</code></div><div class="line number40 index39 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">.title(</code><code class="java string">"Bar"</code><code class="java plain">)</code></div><div class="line number41 index40 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">.build();</code></div><div class="line number42 index41 alt1">&nbsp;</div><div class="line number43 index42 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">when(todoServiceMock.findAll()).thenReturn(Arrays.asList(first, second));</code></div><div class="line number44 index43 alt1">&nbsp;</div><div class="line number45 index44 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">mockMvc.perform(get(</code><code class="java string">"/api/todo"</code><code class="java plain">))</code></div><div class="line number46 index45 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">.andExpect(status().isOk())</code></div><div class="line number47 index46 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">.andExpect(content().contentType(TestUtil.APPLICATION_JSON_UTF8))</code></div><div class="line number48 index47 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">.andExpect(jsonPath(</code><code class="java string">"$"</code><code class="java plain">, hasSize(</code><code class="java value">2</code><code class="java plain">)))</code></div><div class="line number49 index48 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">.andExpect(jsonPath(</code><code class="java string">"$[0].id"</code><code class="java plain">, is(</code><code class="java value">1</code><code class="java plain">)))</code></div><div class="line number50 index49 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">.andExpect(jsonPath(</code><code class="java string">"$[0].description"</code><code class="java plain">, is(</code><code class="java string">"Lorem ipsum"</code><code class="java plain">)))</code></div><div class="line number51 index50 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">.andExpect(jsonPath(</code><code class="java string">"$[0].title"</code><code class="java plain">, is(</code><code class="java string">"Foo"</code><code class="java plain">)))</code></div><div class="line number52 index51 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">.andExpect(jsonPath(</code><code class="java string">"$[1].id"</code><code class="java plain">, is(</code><code class="java value">2</code><code class="java plain">)))</code></div><div class="line number53 index52 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">.andExpect(jsonPath(</code><code class="java string">"$[1].description"</code><code class="java plain">, is(</code><code class="java string">"Lorem ipsum"</code><code class="java plain">)))</code></div><div class="line number54 index53 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">.andExpect(jsonPath(</code><code class="java string">"$[1].title"</code><code class="java plain">, is(</code><code class="java string">"Bar"</code><code class="java plain">)));</code></div><div class="line number55 index54 alt2">&nbsp;</div><div class="line number56 index55 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">verify(todoServiceMock, times(</code><code class="java value">1</code><code class="java plain">)).findAll();</code></div><div class="line number57 index56 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">verifyNoMoreInteractions(todoServiceMock);</code></div><div class="line number58 index57 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number59 index58 alt2"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><p class="cye-lm-tag">Our unit test uses a constant called <em>APPLICATION_JSON_UTF8</em> which is declared in the <em>TestUtil</em> class. The value of that constant is a <a href="http://static.springsource.org/spring/docs/3.2.x/javadoc-api/org/springframework/http/MediaType.html" target="_blank"><em>MediaType</em></a> object which content type is ‘application/json’ and character set is ‘UTF-8’.</p><p class="cye-lm-tag">The relevant part of the <em>TestUtil</em> class looks as follows:</p><div><div id="highlighter_302699" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">public</code> <code class="java keyword">class</code> <code class="java plain">TestUtil {</code></div><div class="line number2 index1 alt1">&nbsp;</div><div class="line number3 index2 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java keyword">static</code> <code class="java keyword">final</code> <code class="java plain">MediaType APPLICATION_JSON_UTF8 = </code><code class="java keyword">new</code> <code class="java plain">MediaType(MediaType.APPLICATION_JSON.getType(),</code></div><div class="line number4 index3 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">MediaType.APPLICATION_JSON.getSubtype(),&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </code></div><div class="line number5 index4 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">Charset.forName(</code><code class="java string">"utf8"</code><code class="java plain">)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </code></div><div class="line number6 index5 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">);</code></div><div class="line number7 index6 alt2"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><h3>Get Todo Entry</h3><p class="cye-lm-tag">The second controller method which we have to test returns the information of a single todo entry. Let’s find out how this controller method is implemented.</p><h4>Expected Behavior</h4><p class="cye-lm-tag">The controller method which returns the information of a single todo entry is implemented by following these steps:</p><ol><li>It processes <em>GET</em> requests send to url ‘/api/todo/{id}’. The <em>{id}</em> is a path variable which contains the <em>id</em> of the requested todo entry.</li><li>It obtains the requested todo entry by calling the <em>findById()</em> method of the <em>TodoService</em> interface and passes the <em>id</em> of the requested todo entry as a method parameter. This method returns the found todo entry. If no todo entry is found, this method throws a <em>TodoNotFoundException</em>.</li><li>It transforms the <em>Todo</em> object into a <em>TodoDTO</em> object.</li><li>It returns the created <em>TodoDTO</em> object.</li></ol><p class="cye-lm-tag">The source code of our controller method looks as follows:</p><div><div id="highlighter_717443" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div class="line number23 index22 alt2">23</div><div class="line number24 index23 alt1">24</div><div class="line number25 index24 alt2">25</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.stereotype.Controller;</code></div><div class="line number2 index1 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.web.bind.annotation.*;</code></div><div class="line number3 index2 alt2">&nbsp;</div><div class="line number4 index3 alt1"><code class="java color1">@Controller</code></div><div class="line number5 index4 alt2"><code class="java keyword">public</code> <code class="java keyword">class</code> <code class="java plain">TodoController {</code></div><div class="line number6 index5 alt1">&nbsp;</div><div class="line number7 index6 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java plain">TodoService service;</code></div><div class="line number8 index7 alt1">&nbsp;</div><div class="line number9 index8 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@RequestMapping</code><code class="java plain">(value = </code><code class="java string">"/api/todo/{id}"</code><code class="java plain">, method = RequestMethod.GET)</code></div><div class="line number10 index9 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@ResponseBody</code></div><div class="line number11 index10 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java plain">TodoDTO findById(</code><code class="java color1">@PathVariable</code><code class="java plain">(</code><code class="java string">"id"</code><code class="java plain">) Long id) </code><code class="java keyword">throws</code> <code class="java plain">TodoNotFoundException {</code></div><div class="line number12 index11 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">Todo found = service.findById(id);</code></div><div class="line number13 index12 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">return</code> <code class="java plain">createDTO(found);</code></div><div class="line number14 index13 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number15 index14 alt2">&nbsp;</div><div class="line number16 index15 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java plain">TodoDTO createDTO(Todo model) {</code></div><div class="line number17 index16 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">TodoDTO dto = </code><code class="java keyword">new</code> <code class="java plain">TodoDTO();</code></div><div class="line number18 index17 alt1">&nbsp;</div><div class="line number19 index18 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">dto.setId(model.getId());</code></div><div class="line number20 index19 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">dto.setDescription(model.getDescription());</code></div><div class="line number21 index20 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">dto.setTitle(model.getTitle());</code></div><div class="line number22 index21 alt1">&nbsp;</div><div class="line number23 index22 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">return</code> <code class="java plain">dto;</code></div><div class="line number24 index23 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number25 index24 alt2"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><p class="cye-lm-tag">The JSON document which is returned to the client looks as follows:</p><div><div id="highlighter_770006" class="syntaxhighlighter nogutter  plain"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="plain plain">{</code></div><div class="line number2 index1 alt1"><code class="plain spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain plain">"id":1,</code></div><div class="line number3 index2 alt2"><code class="plain spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain plain">"description":"Lorem ipsum",</code></div><div class="line number4 index3 alt1"><code class="plain spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain plain">"title":"Foo"</code></div><div class="line number5 index4 alt2"><code class="plain plain">}</code></div></div></td></tr></tbody></table></div></div><p class="cye-lm-tag">Our next question is:</p><blockquote><p class="cye-lm-tag">What happens when a TodoNotFoundException is thrown?</p></blockquote><p class="cye-lm-tag">Our example application has an exception handler class which handles application specific exceptions thrown by our controller classes. This class has an exception handler method which is called when a <em>TodoNotFoundException</em> is thrown. The implementation of this method writes a new log message to the log file and ensures that the HTTP status code 404 is send back to the client.</p><p class="cye-lm-tag">The relevant part of the <em>RestErrorHandler</em> class looks as follows:</p><div><div id="highlighter_711761" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">import</code> <code class="java plain">org.slf4j.Logger;</code></div><div class="line number2 index1 alt1"><code class="java keyword">import</code> <code class="java plain">org.slf4j.LoggerFactory;</code></div><div class="line number3 index2 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.http.HttpStatus;</code></div><div class="line number4 index3 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.web.bind.annotation.ControllerAdvice;</code></div><div class="line number5 index4 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.web.bind.annotation.ExceptionHandler;</code></div><div class="line number6 index5 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.web.bind.annotation.ResponseStatus;</code></div><div class="line number7 index6 alt2">&nbsp;</div><div class="line number8 index7 alt1"><code class="java color1">@ControllerAdvice</code></div><div class="line number9 index8 alt2"><code class="java keyword">public</code> <code class="java keyword">class</code> <code class="java plain">RestErrorHandler {</code></div><div class="line number10 index9 alt1">&nbsp;</div><div class="line number11 index10 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java keyword">static</code> <code class="java keyword">final</code> <code class="java plain">Logger LOGGER = LoggerFactory.getLogger(RestErrorHandler.</code><code class="java keyword">class</code><code class="java plain">);</code></div><div class="line number12 index11 alt1">&nbsp;</div><div class="line number13 index12 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@ExceptionHandler</code><code class="java plain">(TodoNotFoundException.</code><code class="java keyword">class</code><code class="java plain">)</code></div><div class="line number14 index13 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@ResponseStatus</code><code class="java plain">(HttpStatus.NOT_FOUND)</code></div><div class="line number15 index14 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java keyword">void</code> <code class="java plain">handleTodoNotFoundException(TodoNotFoundException ex) {</code></div><div class="line number16 index15 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">LOGGER.debug(</code><code class="java string">"handling 404 error on a todo entry"</code><code class="java plain">);</code></div><div class="line number17 index16 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number18 index17 alt1"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><p class="cye-lm-tag">We have to write two unit tests for this controller method:</p><ol><li>We have to write a test which ensures that our application is working properly when the todo entry is not found.</li><li>We have to write a test which verifies that the correct data is returned to the client when the todo entry is found.</li></ol><p class="cye-lm-tag">Let’s see how we can write these tests.</p><h4>Test 1: Todo Entry Is Not Found</h4><p class="cye-lm-tag">First, we must ensure that our application is working properly when a todo entry is not found. We can write an unit test which ensures this by following these steps:</p><ol><li>Configure our mock object to throw a <em>TodoNotFoundException</em> when its <em>findById()</em> method is called and the <em>id</em> of the requested todo entry is 1L.</li><li>Execute a <em>GET</em> request to url ‘/api/todo/1’.</li><li>Verify that the HTTP status code 404 is returned.</li><li>Ensure that the <em>findById()</em> method of the <em>TodoService</em> interface is called only once by using the correct method parameter (1L).</li><li>Verify that no other methods of the <em>TodoService</em> interface are called during this test.</li></ol><p class="cye-lm-tag">The source code of our unit test looks as follows:</p><div><div id="highlighter_223823" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div class="line number23 index22 alt2">23</div><div class="line number24 index23 alt1">24</div><div class="line number25 index24 alt2">25</div><div class="line number26 index25 alt1">26</div><div class="line number27 index26 alt2">27</div><div class="line number28 index27 alt1">28</div><div class="line number29 index28 alt2">29</div><div class="line number30 index29 alt1">30</div><div class="line number31 index30 alt2">31</div><div class="line number32 index31 alt1">32</div><div class="line number33 index32 alt2">33</div><div class="line number34 index33 alt1">34</div><div class="line number35 index34 alt2">35</div><div class="line number36 index35 alt1">36</div><div class="line number37 index36 alt2">37</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">import</code> <code class="java plain">org.junit.Test;</code></div><div class="line number2 index1 alt1"><code class="java keyword">import</code> <code class="java plain">org.junit.runner.RunWith;</code></div><div class="line number3 index2 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.beans.factory.annotation.Autowired;</code></div><div class="line number4 index3 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.test.context.ContextConfiguration;</code></div><div class="line number5 index4 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</code></div><div class="line number6 index5 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.test.context.web.WebAppConfiguration;</code></div><div class="line number7 index6 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.test.web.servlet.MockMvc;</code></div><div class="line number8 index7 alt1">&nbsp;</div><div class="line number9 index8 alt2"><code class="java keyword">import</code> <code class="java keyword">static</code> <code class="java plain">org.mockito.Mockito.*;</code></div><div class="line number10 index9 alt1"><code class="java keyword">import</code> <code class="java keyword">static</code> <code class="java plain">org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;</code></div><div class="line number11 index10 alt2"><code class="java keyword">import</code> <code class="java keyword">static</code> <code class="java plain">org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;</code></div><div class="line number12 index11 alt1">&nbsp;</div><div class="line number13 index12 alt2"><code class="java color1">@RunWith</code><code class="java plain">(SpringJUnit4ClassRunner.</code><code class="java keyword">class</code><code class="java plain">)</code></div><div class="line number14 index13 alt1"><code class="java color1">@ContextConfiguration</code><code class="java plain">(classes = {TestContext.</code><code class="java keyword">class</code><code class="java plain">, WebAppContext.</code><code class="java keyword">class</code><code class="java plain">})</code></div><div class="line number15 index14 alt2"><code class="java color1">@WebAppConfiguration</code></div><div class="line number16 index15 alt1"><code class="java keyword">public</code> <code class="java keyword">class</code> <code class="java plain">TodoControllerTest {</code></div><div class="line number17 index16 alt2">&nbsp;</div><div class="line number18 index17 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java plain">MockMvc mockMvc;</code></div><div class="line number19 index18 alt2">&nbsp;</div><div class="line number20 index19 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Autowired</code></div><div class="line number21 index20 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java plain">TodoService todoServiceMock;</code></div><div class="line number22 index21 alt1">&nbsp;</div><div class="line number23 index22 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java comments">//Add WebApplicationContext field here.</code></div><div class="line number24 index23 alt1">&nbsp;</div><div class="line number25 index24 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java comments">//The setUp() method is omitted.</code></div><div class="line number26 index25 alt1">&nbsp;</div><div class="line number27 index26 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Test</code></div><div class="line number28 index27 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java keyword">void</code> <code class="java plain">findById_TodoEntryNotFound_ShouldReturnHttpStatusCode404() </code><code class="java keyword">throws</code> <code class="java plain">Exception {</code></div><div class="line number29 index28 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">when(todoServiceMock.findById(1L)).thenThrow(</code><code class="java keyword">new</code> <code class="java plain">TodoNotFoundException(</code><code class="java string">""</code><code class="java plain">));</code></div><div class="line number30 index29 alt1">&nbsp;</div><div class="line number31 index30 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">mockMvc.perform(get(</code><code class="java string">"/api/todo/{id}"</code><code class="java plain">, 1L))</code></div><div class="line number32 index31 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">.andExpect(status().isNotFound());</code></div><div class="line number33 index32 alt2">&nbsp;</div><div class="line number34 index33 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">verify(todoServiceMock, times(</code><code class="java value">1</code><code class="java plain">)).findById(1L);</code></div><div class="line number35 index34 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">verifyNoMoreInteractions(todoServiceMock);</code></div><div class="line number36 index35 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number37 index36 alt2"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><h4>Test 2: Todo Entry Is Found</h4><p class="cye-lm-tag">Second, we must write a test which ensures that the correct data is returned when the requested todo entry is found. We can write a test which ensures this by following these steps:</p><ol><li>Create the <em>Todo</em> object which is returned when our service method is called. We create this object by using our test data builder.</li><li>Configure our mock object to return the created <em>Todo</em> object when its <em>findById()</em> method is called by using a method parameter 1L.</li><li>Execute a <em>GET</em> request to url ‘/api/todo/1’.</li><li>Verify that the HTTP status code 200 is returned.</li><li>Verify that the content type of the response is ‘application/json’ and its character set is ‘UTF-8’.</li><li>Get the <em>id</em> of the todo entry by using the JsonPath expression <em>$.id</em> and verify that the <em>id</em> is 1.</li><li>Get the <em>description</em> of the todo entry by using the JsonPath expression <em>$.description</em> and verify that the <em>description</em> is “Lorem ipsum”.</li><li>Get the <em>title</em> of the todo entry by using the JsonPath expression <em>$.title</em> and verify that the title is “Foo”.</li><li>Ensure that the <em>findById()</em> method of the <em>TodoService</em> interface is called only once by using the correct method parameter (1L).</li><li>Verify that the other methods of our mock object are not called during the test.</li></ol><p class="cye-lm-tag">The source code of our unit test looks as follows:</p><div><div id="highlighter_574622" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div class="line number23 index22 alt2">23</div><div class="line number24 index23 alt1">24</div><div class="line number25 index24 alt2">25</div><div class="line number26 index25 alt1">26</div><div class="line number27 index26 alt2">27</div><div class="line number28 index27 alt1">28</div><div class="line number29 index28 alt2">29</div><div class="line number30 index29 alt1">30</div><div class="line number31 index30 alt2">31</div><div class="line number32 index31 alt1">32</div><div class="line number33 index32 alt2">33</div><div class="line number34 index33 alt1">34</div><div class="line number35 index34 alt2">35</div><div class="line number36 index35 alt1">36</div><div class="line number37 index36 alt2">37</div><div class="line number38 index37 alt1">38</div><div class="line number39 index38 alt2">39</div><div class="line number40 index39 alt1">40</div><div class="line number41 index40 alt2">41</div><div class="line number42 index41 alt1">42</div><div class="line number43 index42 alt2">43</div><div class="line number44 index43 alt1">44</div><div class="line number45 index44 alt2">45</div><div class="line number46 index45 alt1">46</div><div class="line number47 index46 alt2">47</div><div class="line number48 index47 alt1">48</div><div class="line number49 index48 alt2">49</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">import</code> <code class="java plain">org.junit.Test;</code></div><div class="line number2 index1 alt1"><code class="java keyword">import</code> <code class="java plain">org.junit.runner.RunWith;</code></div><div class="line number3 index2 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.beans.factory.annotation.Autowired;</code></div><div class="line number4 index3 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.test.context.ContextConfiguration;</code></div><div class="line number5 index4 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</code></div><div class="line number6 index5 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.test.context.web.WebAppConfiguration;</code></div><div class="line number7 index6 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.test.web.servlet.MockMvc;</code></div><div class="line number8 index7 alt1">&nbsp;</div><div class="line number9 index8 alt2"><code class="java keyword">import</code> <code class="java keyword">static</code> <code class="java plain">org.hamcrest.Matchers.is;</code></div><div class="line number10 index9 alt1"><code class="java keyword">import</code> <code class="java keyword">static</code> <code class="java plain">org.mockito.Mockito.*;</code></div><div class="line number11 index10 alt2"><code class="java keyword">import</code> <code class="java keyword">static</code> <code class="java plain">org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;</code></div><div class="line number12 index11 alt1"><code class="java keyword">import</code> <code class="java keyword">static</code> <code class="java plain">org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;</code></div><div class="line number13 index12 alt2"><code class="java keyword">import</code> <code class="java keyword">static</code> <code class="java plain">org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;</code></div><div class="line number14 index13 alt1">&nbsp;</div><div class="line number15 index14 alt2"><code class="java color1">@RunWith</code><code class="java plain">(SpringJUnit4ClassRunner.</code><code class="java keyword">class</code><code class="java plain">)</code></div><div class="line number16 index15 alt1"><code class="java color1">@ContextConfiguration</code><code class="java plain">(classes = {TestContext.</code><code class="java keyword">class</code><code class="java plain">, WebAppContext.</code><code class="java keyword">class</code><code class="java plain">})</code></div><div class="line number17 index16 alt2"><code class="java color1">@WebAppConfiguration</code></div><div class="line number18 index17 alt1"><code class="java keyword">public</code> <code class="java keyword">class</code> <code class="java plain">TodoControllerTest {</code></div><div class="line number19 index18 alt2">&nbsp;</div><div class="line number20 index19 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java plain">MockMvc mockMvc;</code></div><div class="line number21 index20 alt2">&nbsp;</div><div class="line number22 index21 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Autowired</code></div><div class="line number23 index22 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java plain">TodoService todoServiceMock;</code></div><div class="line number24 index23 alt1">&nbsp;</div><div class="line number25 index24 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java comments">//Add WebApplicationContext field here.</code></div><div class="line number26 index25 alt1">&nbsp;</div><div class="line number27 index26 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java comments">//The setUp() method is omitted.</code></div><div class="line number28 index27 alt1">&nbsp;</div><div class="line number29 index28 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Test</code></div><div class="line number30 index29 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java keyword">void</code> <code class="java plain">findById_TodoEntryFound_ShouldReturnFoundTodoEntry() </code><code class="java keyword">throws</code> <code class="java plain">Exception {</code></div><div class="line number31 index30 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">Todo found = </code><code class="java keyword">new</code> <code class="java plain">TodoBuilder()</code></div><div class="line number32 index31 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">.id(1L)</code></div><div class="line number33 index32 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">.description(</code><code class="java string">"Lorem ipsum"</code><code class="java plain">)</code></div><div class="line number34 index33 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">.title(</code><code class="java string">"Foo"</code><code class="java plain">)</code></div><div class="line number35 index34 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">.build();</code></div><div class="line number36 index35 alt1">&nbsp;</div><div class="line number37 index36 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">when(todoServiceMock.findById(1L)).thenReturn(found);</code></div><div class="line number38 index37 alt1">&nbsp;</div><div class="line number39 index38 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">mockMvc.perform(get(</code><code class="java string">"/api/todo/{id}"</code><code class="java plain">, 1L))</code></div><div class="line number40 index39 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">.andExpect(status().isOk())</code></div><div class="line number41 index40 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">.andExpect(content().contentType(TestUtil.APPLICATION_JSON_UTF8))</code></div><div class="line number42 index41 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">.andExpect(jsonPath(</code><code class="java string">"$.id"</code><code class="java plain">, is(</code><code class="java value">1</code><code class="java plain">)))</code></div><div class="line number43 index42 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">.andExpect(jsonPath(</code><code class="java string">"$.description"</code><code class="java plain">, is(</code><code class="java string">"Lorem ipsum"</code><code class="java plain">)))</code></div><div class="line number44 index43 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">.andExpect(jsonPath(</code><code class="java string">"$.title"</code><code class="java plain">, is(</code><code class="java string">"Foo"</code><code class="java plain">)));</code></div><div class="line number45 index44 alt2">&nbsp;</div><div class="line number46 index45 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">verify(todoServiceMock, times(</code><code class="java value">1</code><code class="java plain">)).findById(1L);</code></div><div class="line number47 index46 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">verifyNoMoreInteractions(todoServiceMock);</code></div><div class="line number48 index47 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number49 index48 alt2"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><h3>Add New Todo Entry</h3><p class="cye-lm-tag">The third controller method adds a new todo entry to the database and returns the information of the added todo entry. Let’s move on and find out how it is implemented.</p><h4>Expected Behavior</h4><p class="cye-lm-tag">The controller method which adds new todo entries to the database is implemented by following these steps:</p><ol><li>It processes <em>POST</em> requests send to url ‘/api/todo’.</li><li>It validates the <em>TodoDTO</em> object given as a method parameter. If the validation fails, a <a href="http://static.springsource.org/spring/docs/3.2.x/javadoc-api/org/springframework/web/bind/MethodArgumentNotValidException.html" target="_blank"><em>MethodArgumentNotValidException</em></a> is thrown.</li><li>It Adds a new todo entry to the database by calling the <em>add()</em> method of the <em>TodoService</em> interface and passes the <em>TodoDTO</em> object as a method parameter. This method adds a new todo entry to the database and returns the added todo entry.</li><li>It transforms the created <em>Todo</em> object into a <em>TodoDTO</em> object.</li><li>It returns the <em>TodoDTO</em> object.</li></ol><p class="cye-lm-tag">The source code of our controller method looks as follows:</p><div><div id="highlighter_265976" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div class="line number23 index22 alt2">23</div><div class="line number24 index23 alt1">24</div><div class="line number25 index24 alt2">25</div><div class="line number26 index25 alt1">26</div><div class="line number27 index26 alt2">27</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.stereotype.Controller;</code></div><div class="line number2 index1 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.web.bind.annotation.*;</code></div><div class="line number3 index2 alt2">&nbsp;</div><div class="line number4 index3 alt1"><code class="java keyword">import</code> <code class="java plain">javax.validation.Valid;</code></div><div class="line number5 index4 alt2">&nbsp;</div><div class="line number6 index5 alt1"><code class="java color1">@Controller</code></div><div class="line number7 index6 alt2"><code class="java keyword">public</code> <code class="java keyword">class</code> <code class="java plain">TodoController {</code></div><div class="line number8 index7 alt1">&nbsp;</div><div class="line number9 index8 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java plain">TodoService service;</code></div><div class="line number10 index9 alt1">&nbsp;</div><div class="line number11 index10 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@RequestMapping</code><code class="java plain">(value = </code><code class="java string">"/api/todo"</code><code class="java plain">, method = RequestMethod.POST)</code></div><div class="line number12 index11 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@ResponseBody</code></div><div class="line number13 index12 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java plain">TodoDTO add(</code><code class="java color1">@Valid</code> <code class="java color1">@RequestBody</code> <code class="java plain">TodoDTO dto) {</code></div><div class="line number14 index13 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">Todo added = service.add(dto);</code></div><div class="line number15 index14 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">return</code> <code class="java plain">createDTO(added);</code></div><div class="line number16 index15 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number17 index16 alt2">&nbsp;</div><div class="line number18 index17 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java plain">TodoDTO createDTO(Todo model) {</code></div><div class="line number19 index18 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">TodoDTO dto = </code><code class="java keyword">new</code> <code class="java plain">TodoDTO();</code></div><div class="line number20 index19 alt1">&nbsp;</div><div class="line number21 index20 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">dto.setId(model.getId());</code></div><div class="line number22 index21 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">dto.setDescription(model.getDescription());</code></div><div class="line number23 index22 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">dto.setTitle(model.getTitle());</code></div><div class="line number24 index23 alt1">&nbsp;</div><div class="line number25 index24 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">return</code> <code class="java plain">dto;</code></div><div class="line number26 index25 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number27 index26 alt2"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><p class="cye-lm-tag">The <em>TodoDTO</em> class is a simple DTO class which source code looks as follows:</p><div><div id="highlighter_105569" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">import</code> <code class="java plain">org.hibernate.validator.constraints.Length;</code></div><div class="line number2 index1 alt1"><code class="java keyword">import</code> <code class="java plain">org.hibernate.validator.constraints.NotEmpty;</code></div><div class="line number3 index2 alt2">&nbsp;</div><div class="line number4 index3 alt1"><code class="java keyword">public</code> <code class="java keyword">class</code> <code class="java plain">TodoDTO {</code></div><div class="line number5 index4 alt2">&nbsp;</div><div class="line number6 index5 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java plain">Long id;</code></div><div class="line number7 index6 alt2">&nbsp;</div><div class="line number8 index7 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Length</code><code class="java plain">(max = </code><code class="java value">500</code><code class="java plain">)</code></div><div class="line number9 index8 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java plain">String description;</code></div><div class="line number10 index9 alt1">&nbsp;</div><div class="line number11 index10 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@NotEmpty</code></div><div class="line number12 index11 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Length</code><code class="java plain">(max = </code><code class="java value">100</code><code class="java plain">)</code></div><div class="line number13 index12 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java plain">String title;</code></div><div class="line number14 index13 alt1">&nbsp;</div><div class="line number15 index14 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java comments">//Constructor and other methods are omitted.</code></div><div class="line number16 index15 alt1"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><p class="cye-lm-tag">As we can see, this class declares three validation constraints which are described in the following:</p><ol><li>The maximum length of the <em>description</em> is 500 characters.</li><li>The <em>title</em> of a todo entry cannot be empty.</li><li>The maximum length of the <em>title</em> is 100 characters.</li></ol><p class="cye-lm-tag">If the validation fails, our error handler component ensures that</p><ol><li>The HTTP status code 400 is returned to the client.</li><li>The validation errors are returned to the client as a JSON document.</li></ol><p class="cye-lm-tag">Because I have already written a <a href="http://www.petrikainulainen.net/programming/spring-framework/spring-from-the-trenches-adding-validation-to-a-rest-api/">blog post</a> which describes how we can add validation to a REST API, the implementation of the error handler component is not discussed in this blog post.</p><p class="cye-lm-tag">However, we need to know what kind of a JSON document is returned to the client if the validation fails. This information is given in the following.</p><p class="cye-lm-tag">If the <em>title</em> and the <em>description</em> of the <em>TodoDTO</em> object are too long, the following JSON document is returned to the client:</p><div><div id="highlighter_797555" class="syntaxhighlighter nogutter  plain"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="plain plain">{</code></div><div class="line number2 index1 alt1"><code class="plain spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain plain">"fieldErrors":[</code></div><div class="line number3 index2 alt2"><code class="plain spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain plain">{</code></div><div class="line number4 index3 alt1"><code class="plain spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain plain">"path":"description",</code></div><div class="line number5 index4 alt2"><code class="plain spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain plain">"message":"The maximum length of the description is 500 characters."</code></div><div class="line number6 index5 alt1"><code class="plain spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain plain">},</code></div><div class="line number7 index6 alt2"><code class="plain spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain plain">{</code></div><div class="line number8 index7 alt1"><code class="plain spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain plain">"path":"title",</code></div><div class="line number9 index8 alt2"><code class="plain spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain plain">"message":"The maximum length of the title is 100 characters."</code></div><div class="line number10 index9 alt1"><code class="plain spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain plain">}</code></div><div class="line number11 index10 alt2"><code class="plain spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain plain">]</code></div><div class="line number12 index11 alt1"><code class="plain plain">}</code></div></div></td></tr></tbody></table></div></div><p class="cye-lm-tag"><strong>Note</strong>: Spring MVC does not guarantee the ordering of the field errors. In other words, the field errors are returned in random order. We have to take this into account when we are writing unit tests for this controller method.</p><p class="cye-lm-tag">On the other hand, if the validation does not fail, our controller method returns the following JSON document to the client:</p><div><div id="highlighter_616531" class="syntaxhighlighter nogutter  plain"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="plain plain">{</code></div><div class="line number2 index1 alt1"><code class="plain spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain plain">"id":1,</code></div><div class="line number3 index2 alt2"><code class="plain spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain plain">"description":"description",</code></div><div class="line number4 index3 alt1"><code class="plain spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain plain">"title":"todo"</code></div><div class="line number5 index4 alt2"><code class="plain plain">}</code></div></div></td></tr></tbody></table></div></div><p class="cye-lm-tag">We have to write two unit tests for this controller method:</p><ol><li>We have to write a test which ensures that our application is working properly when the validation fails.</li><li>We have to write a test which ensures that our application is working properly when a new todo entry is added to the database.</li></ol><p class="cye-lm-tag">Let’s find out how we can write these tests.</p><h4>Test 1: Validation Fails</h4><p class="cye-lm-tag">Our first test ensures that our application is working properly when the validation of the added todo entry fails. We can write this test by following these steps:</p><ol><li>Create a <em>title</em> which has 101 characters.</li><li>Create a <em>description</em> which has 501 characters.</li><li>Create a new <em>TodoDTO</em> object by using our test data builder. Set the <em>title</em> and the <em>description</em> of the object.</li><li>Execute a <em>POST</em> request to url ‘/api/todo’. Set the content type of the request to ‘application/json’. Set the character set of the request to ‘UTF-8’. Transform the created <em>TodoDTO</em> object into JSON bytes and send it in the body of the request.</li><li>Verify that the HTTP status code 400 is returned.</li><li>Verify that the content type of the response is ‘application/json’ and its content type is ‘UTF-8’.</li><li>Fetch the field errors by using the JsonPath expression <em>$.fieldErrors</em> and ensure that two field errors are returned.</li><li>Fetch all available paths by using the JsonPath expression <em>$.fieldErrors[*].path</em> and ensure that field errors about the <em>title</em> and <em>description</em> fields are found.</li><li>Fetch all available error messages by using the JsonPath expression <em>$.fieldErrors[*].message</em> and ensure that error messages about the <em>title</em> and <em>description</em> fields are found.</li><li>Verify that the methods of our mock object are not called during our test.</li></ol><p class="cye-lm-tag">The source code of our unit test looks as follows:</p><div><div id="highlighter_632641" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div class="line number23 index22 alt2">23</div><div class="line number24 index23 alt1">24</div><div class="line number25 index24 alt2">25</div><div class="line number26 index25 alt1">26</div><div class="line number27 index26 alt2">27</div><div class="line number28 index27 alt1">28</div><div class="line number29 index28 alt2">29</div><div class="line number30 index29 alt1">30</div><div class="line number31 index30 alt2">31</div><div class="line number32 index31 alt1">32</div><div class="line number33 index32 alt2">33</div><div class="line number34 index33 alt1">34</div><div class="line number35 index34 alt2">35</div><div class="line number36 index35 alt1">36</div><div class="line number37 index36 alt2">37</div><div class="line number38 index37 alt1">38</div><div class="line number39 index38 alt2">39</div><div class="line number40 index39 alt1">40</div><div class="line number41 index40 alt2">41</div><div class="line number42 index41 alt1">42</div><div class="line number43 index42 alt2">43</div><div class="line number44 index43 alt1">44</div><div class="line number45 index44 alt2">45</div><div class="line number46 index45 alt1">46</div><div class="line number47 index46 alt2">47</div><div class="line number48 index47 alt1">48</div><div class="line number49 index48 alt2">49</div><div class="line number50 index49 alt1">50</div><div class="line number51 index50 alt2">51</div><div class="line number52 index51 alt1">52</div><div class="line number53 index52 alt2">53</div><div class="line number54 index53 alt1">54</div><div class="line number55 index54 alt2">55</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">import</code> <code class="java plain">org.junit.Test;</code></div><div class="line number2 index1 alt1"><code class="java keyword">import</code> <code class="java plain">org.junit.runner.RunWith;</code></div><div class="line number3 index2 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.beans.factory.annotation.Autowired;</code></div><div class="line number4 index3 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.test.context.ContextConfiguration;</code></div><div class="line number5 index4 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</code></div><div class="line number6 index5 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.test.context.web.WebAppConfiguration;</code></div><div class="line number7 index6 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.test.web.servlet.MockMvc;</code></div><div class="line number8 index7 alt1">&nbsp;</div><div class="line number9 index8 alt2"><code class="java keyword">import</code> <code class="java keyword">static</code> <code class="java plain">org.hamcrest.Matchers.containsInAnyOrder;</code></div><div class="line number10 index9 alt1"><code class="java keyword">import</code> <code class="java keyword">static</code> <code class="java plain">org.hamcrest.Matchers.hasSize;</code></div><div class="line number11 index10 alt2"><code class="java keyword">import</code> <code class="java keyword">static</code> <code class="java plain">org.mockito.Mockito.*;</code></div><div class="line number12 index11 alt1"><code class="java keyword">import</code> <code class="java keyword">static</code> <code class="java plain">org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;</code></div><div class="line number13 index12 alt2"><code class="java keyword">import</code> <code class="java keyword">static</code> <code class="java plain">org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;</code></div><div class="line number14 index13 alt1"><code class="java keyword">import</code> <code class="java keyword">static</code> <code class="java plain">org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;</code></div><div class="line number15 index14 alt2">&nbsp;</div><div class="line number16 index15 alt1"><code class="java color1">@RunWith</code><code class="java plain">(SpringJUnit4ClassRunner.</code><code class="java keyword">class</code><code class="java plain">)</code></div><div class="line number17 index16 alt2"><code class="java color1">@ContextConfiguration</code><code class="java plain">(classes = {TestContext.</code><code class="java keyword">class</code><code class="java plain">, WebAppContext.</code><code class="java keyword">class</code><code class="java plain">})</code></div><div class="line number18 index17 alt1"><code class="java color1">@WebAppConfiguration</code></div><div class="line number19 index18 alt2"><code class="java keyword">public</code> <code class="java keyword">class</code> <code class="java plain">TodoControllerTest {</code></div><div class="line number20 index19 alt1">&nbsp;</div><div class="line number21 index20 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java plain">MockMvc mockMvc;</code></div><div class="line number22 index21 alt1">&nbsp;</div><div class="line number23 index22 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Autowired</code></div><div class="line number24 index23 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java plain">TodoService todoServiceMock;</code></div><div class="line number25 index24 alt2">&nbsp;</div><div class="line number26 index25 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java comments">//Add WebApplicationContext field here.</code></div><div class="line number27 index26 alt2">&nbsp;</div><div class="line number28 index27 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java comments">//The setUp() method is omitted.</code></div><div class="line number29 index28 alt2">&nbsp;</div><div class="line number30 index29 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Test</code></div><div class="line number31 index30 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java keyword">void</code> <code class="java plain">add_TitleAndDescriptionAreTooLong_ShouldReturnValidationErrorsForTitleAndDescription() </code><code class="java keyword">throws</code> <code class="java plain">Exception {</code></div><div class="line number32 index31 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">String title = TestUtil.createStringWithLength(</code><code class="java value">101</code><code class="java plain">);</code></div><div class="line number33 index32 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">String description = TestUtil.createStringWithLength(</code><code class="java value">501</code><code class="java plain">);</code></div><div class="line number34 index33 alt1">&nbsp;</div><div class="line number35 index34 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">TodoDTO dto = </code><code class="java keyword">new</code> <code class="java plain">TodoDTOBuilder()</code></div><div class="line number36 index35 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">.description(description)</code></div><div class="line number37 index36 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">.title(title)</code></div><div class="line number38 index37 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">.build();</code></div><div class="line number39 index38 alt2">&nbsp;</div><div class="line number40 index39 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">mockMvc.perform(post(</code><code class="java string">"/api/todo"</code><code class="java plain">)</code></div><div class="line number41 index40 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">.contentType(TestUtil.APPLICATION_JSON_UTF8)</code></div><div class="line number42 index41 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">.content(TestUtil.convertObjectToJsonBytes(dto))</code></div><div class="line number43 index42 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">)</code></div><div class="line number44 index43 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">.andExpect(status().isBadRequest())</code></div><div class="line number45 index44 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">.andExpect(content().contentType(TestUtil.APPLICATION_JSON_UTF8))</code></div><div class="line number46 index45 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">.andExpect(jsonPath(</code><code class="java string">"$.fieldErrors"</code><code class="java plain">, hasSize(</code><code class="java value">2</code><code class="java plain">)))</code></div><div class="line number47 index46 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">.andExpect(jsonPath(</code><code class="java string">"$.fieldErrors[*].path"</code><code class="java plain">, containsInAnyOrder(</code><code class="java string">"title"</code><code class="java plain">, </code><code class="java string">"description"</code><code class="java plain">)))</code></div><div class="line number48 index47 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">.andExpect(jsonPath(</code><code class="java string">"$.fieldErrors[*].message"</code><code class="java plain">, containsInAnyOrder(</code></div><div class="line number49 index48 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java string">"The maximum length of the description is 500 characters."</code><code class="java plain">,</code></div><div class="line number50 index49 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java string">"The maximum length of the title is 100 characters."</code></div><div class="line number51 index50 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">)));</code></div><div class="line number52 index51 alt1">&nbsp;</div><div class="line number53 index52 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">verifyZeroInteractions(todoServiceMock);</code></div><div class="line number54 index53 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number55 index54 alt2"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><p class="cye-lm-tag">Our unit test uses two static methods of the <em>TestUtil</em> class. These methods are described in the following:</p><ul><li>The <em>createStringWithLength(int length)</em> method creates a new <em>String</em> object with the given length and returns the created object.</li><li>The <em>convertObjectToJsonBytes(Object  object)</em> method converts the object given as a method parameter into a JSON document and returns the content of that document as a <em>byte array</em>.</li></ul><p class="cye-lm-tag">The source code of the <em>TestUtil</em> class looks as follows:</p><div><div id="highlighter_611907" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div class="line number23 index22 alt2">23</div><div class="line number24 index23 alt1">24</div><div class="line number25 index24 alt2">25</div><div class="line number26 index25 alt1">26</div><div class="line number27 index26 alt2">27</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">import</code> <code class="java plain">com.fasterxml.jackson.annotation.JsonInclude;</code></div><div class="line number2 index1 alt1"><code class="java keyword">import</code> <code class="java plain">com.fasterxml.jackson.databind.ObjectMapper;</code></div><div class="line number3 index2 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.http.MediaType;</code></div><div class="line number4 index3 alt1">&nbsp;</div><div class="line number5 index4 alt2"><code class="java keyword">import</code> <code class="java plain">java.io.IOException;</code></div><div class="line number6 index5 alt1"><code class="java keyword">import</code> <code class="java plain">java.nio.charset.Charset;</code></div><div class="line number7 index6 alt2">&nbsp;</div><div class="line number8 index7 alt1"><code class="java keyword">public</code> <code class="java keyword">class</code> <code class="java plain">TestUtil {</code></div><div class="line number9 index8 alt2">&nbsp;</div><div class="line number10 index9 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java keyword">static</code> <code class="java keyword">final</code> <code class="java plain">MediaType APPLICATION_JSON_UTF8 = </code><code class="java keyword">new</code> <code class="java plain">MediaType(MediaType.APPLICATION_JSON.getType(), MediaType.APPLICATION_JSON.getSubtype(), Charset.forName(</code><code class="java string">"utf8"</code><code class="java plain">));</code></div><div class="line number11 index10 alt2">&nbsp;</div><div class="line number12 index11 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java keyword">static</code> <code class="java keyword">byte</code><code class="java plain">[] convertObjectToJsonBytes(Object object) </code><code class="java keyword">throws</code> <code class="java plain">IOException {</code></div><div class="line number13 index12 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">ObjectMapper mapper = </code><code class="java keyword">new</code> <code class="java plain">ObjectMapper();</code></div><div class="line number14 index13 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);</code></div><div class="line number15 index14 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">return</code> <code class="java plain">mapper.writeValueAsBytes(object);</code></div><div class="line number16 index15 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number17 index16 alt2">&nbsp;</div><div class="line number18 index17 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java keyword">static</code> <code class="java plain">String createStringWithLength(</code><code class="java keyword">int</code> <code class="java plain">length) {</code></div><div class="line number19 index18 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">StringBuilder builder = </code><code class="java keyword">new</code> <code class="java plain">StringBuilder();</code></div><div class="line number20 index19 alt1">&nbsp;</div><div class="line number21 index20 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">for</code> <code class="java plain">(</code><code class="java keyword">int</code> <code class="java plain">index = </code><code class="java value">0</code><code class="java plain">; index &lt; length; index++) {</code></div><div class="line number22 index21 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">builder.append(</code><code class="java string">"a"</code><code class="java plain">);</code></div><div class="line number23 index22 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number24 index23 alt1">&nbsp;</div><div class="line number25 index24 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">return</code> <code class="java plain">builder.toString();</code></div><div class="line number26 index25 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number27 index26 alt2"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><h4>Test 2: Todo Entry Is Added to The Database</h4><p class="cye-lm-tag">The second unit test ensures that our controller is working properly when a new todo entry is added to the database. We can write this test by following these steps:</p><ol><li>Create a new <em>TodoDTO</em> object by using our test data builder. Set “legal” values to the <em>title</em> and <em>description</em> fields.</li><li>Create a <em>Todo</em> object which is returned when the <em>add()</em> method of the <em>TodoService</em> interface is called.</li><li>Configure our mock object to return the created <em>Todo</em> object when its <em>add()</em> method is called and a <em>TodoDTO</em> object is given as a parameter.</li><li>Execute a <em>POST</em> request to url ‘/api/todo’. Set the content type of the request to ‘application/json’. Set the character set of the request to ‘UTF-8’. Transform the created <em>TodoDTO</em> object into JSON bytes and send it in the body of the request.</li><li>Verify that the HTTP status code 200 is returned.</li><li>Verify that the content type of the response is ‘application/json’ and its content type is ‘UTF-8’.</li><li>Get the <em>id</em> of the returned todo entry by using the JsonPath expression <em>$.id</em> and verify that the <em>id</em> is 1.</li><li>Get the <em>description</em> of the returned todo entry by using the JsonPath expression <em>$.description</em> and verify that the <em>description</em> is “description”.</li><li>Get the <em>title</em> of the returned todo entry by using the JsonPath expression <em>$.title</em> and ensure that the <em>title</em> is “title”.</li><li>Create an <a href="http://site.mockito.org/mockito/docs/1.10.19/org/mockito/ArgumentCaptor.html" target="_blank" class="broken_link"><em>ArgumentCaptor</em></a> object which can capture <em>TodoDTO</em> objects.</li><li>Verify that the <em>add()</em> method of the <em>TodoService</em> interface is called only once and capture the object given as a parameter.</li><li>Verify that the other methods of our mock object are not called during our test.</li><li>Verify that the <em>id</em> of the captured <em>TodoDTO</em> object is null.</li><li>Verify that the <em>description</em> of the captured <em>TodoDTO</em> object is “description”.</li><li>Verify that the <em>title</em> of the captured <em>TodoDTO</em> object is “title”.</li></ol><p class="cye-lm-tag">The source code of our unit test looks as follows:</p><div><div id="highlighter_517252" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div class="line number23 index22 alt2">23</div><div class="line number24 index23 alt1">24</div><div class="line number25 index24 alt2">25</div><div class="line number26 index25 alt1">26</div><div class="line number27 index26 alt2">27</div><div class="line number28 index27 alt1">28</div><div class="line number29 index28 alt2">29</div><div class="line number30 index29 alt1">30</div><div class="line number31 index30 alt2">31</div><div class="line number32 index31 alt1">32</div><div class="line number33 index32 alt2">33</div><div class="line number34 index33 alt1">34</div><div class="line number35 index34 alt2">35</div><div class="line number36 index35 alt1">36</div><div class="line number37 index36 alt2">37</div><div class="line number38 index37 alt1">38</div><div class="line number39 index38 alt2">39</div><div class="line number40 index39 alt1">40</div><div class="line number41 index40 alt2">41</div><div class="line number42 index41 alt1">42</div><div class="line number43 index42 alt2">43</div><div class="line number44 index43 alt1">44</div><div class="line number45 index44 alt2">45</div><div class="line number46 index45 alt1">46</div><div class="line number47 index46 alt2">47</div><div class="line number48 index47 alt1">48</div><div class="line number49 index48 alt2">49</div><div class="line number50 index49 alt1">50</div><div class="line number51 index50 alt2">51</div><div class="line number52 index51 alt1">52</div><div class="line number53 index52 alt2">53</div><div class="line number54 index53 alt1">54</div><div class="line number55 index54 alt2">55</div><div class="line number56 index55 alt1">56</div><div class="line number57 index56 alt2">57</div><div class="line number58 index57 alt1">58</div><div class="line number59 index58 alt2">59</div><div class="line number60 index59 alt1">60</div><div class="line number61 index60 alt2">61</div><div class="line number62 index61 alt1">62</div><div class="line number63 index62 alt2">63</div><div class="line number64 index63 alt1">64</div><div class="line number65 index64 alt2">65</div><div class="line number66 index65 alt1">66</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">import</code> <code class="java plain">org.junit.Test;</code></div><div class="line number2 index1 alt1"><code class="java keyword">import</code> <code class="java plain">org.junit.runner.RunWith;</code></div><div class="line number3 index2 alt2"><code class="java keyword">import</code> <code class="java plain">org.mockito.ArgumentCaptor;</code></div><div class="line number4 index3 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.beans.factory.annotation.Autowired;</code></div><div class="line number5 index4 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.test.context.ContextConfiguration;</code></div><div class="line number6 index5 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</code></div><div class="line number7 index6 alt2"><code class="java keyword">import</code> <code class="java plain">org.springframework.test.context.web.WebAppConfiguration;</code></div><div class="line number8 index7 alt1"><code class="java keyword">import</code> <code class="java plain">org.springframework.test.web.servlet.MockMvc;</code></div><div class="line number9 index8 alt2">&nbsp;</div><div class="line number10 index9 alt1"><code class="java keyword">import</code> <code class="java keyword">static</code> <code class="java plain">junit.framework.Assert.assertNull;</code></div><div class="line number11 index10 alt2"><code class="java keyword">import</code> <code class="java keyword">static</code> <code class="java plain">org.hamcrest.Matchers.is;</code></div><div class="line number12 index11 alt1"><code class="java keyword">import</code> <code class="java keyword">static</code> <code class="java plain">org.junit.Assert.assertThat;</code></div><div class="line number13 index12 alt2"><code class="java keyword">import</code> <code class="java keyword">static</code> <code class="java plain">org.mockito.Mockito.*;</code></div><div class="line number14 index13 alt1"><code class="java keyword">import</code> <code class="java keyword">static</code> <code class="java plain">org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;</code></div><div class="line number15 index14 alt2"><code class="java keyword">import</code> <code class="java keyword">static</code> <code class="java plain">org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;</code></div><div class="line number16 index15 alt1"><code class="java keyword">import</code> <code class="java keyword">static</code> <code class="java plain">org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;</code></div><div class="line number17 index16 alt2">&nbsp;</div><div class="line number18 index17 alt1"><code class="java color1">@RunWith</code><code class="java plain">(SpringJUnit4ClassRunner.</code><code class="java keyword">class</code><code class="java plain">)</code></div><div class="line number19 index18 alt2"><code class="java color1">@ContextConfiguration</code><code class="java plain">(classes = {TestContext.</code><code class="java keyword">class</code><code class="java plain">, WebAppContext.</code><code class="java keyword">class</code><code class="java plain">})</code></div><div class="line number20 index19 alt1"><code class="java color1">@WebAppConfiguration</code></div><div class="line number21 index20 alt2"><code class="java keyword">public</code> <code class="java keyword">class</code> <code class="java plain">TodoControllerTest {</code></div><div class="line number22 index21 alt1">&nbsp;</div><div class="line number23 index22 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java plain">MockMvc mockMvc;</code></div><div class="line number24 index23 alt1">&nbsp;</div><div class="line number25 index24 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Autowired</code></div><div class="line number26 index25 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java plain">TodoService todoServiceMock;</code></div><div class="line number27 index26 alt2">&nbsp;</div><div class="line number28 index27 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java comments">//Add WebApplicationContext field here.</code></div><div class="line number29 index28 alt2">&nbsp;</div><div class="line number30 index29 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java comments">//The setUp() method is omitted.</code></div><div class="line number31 index30 alt2">&nbsp;</div><div class="line number32 index31 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Test</code></div><div class="line number33 index32 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java keyword">void</code> <code class="java plain">add_NewTodoEntry_ShouldAddTodoEntryAndReturnAddedEntry() </code><code class="java keyword">throws</code> <code class="java plain">Exception {</code></div><div class="line number34 index33 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">TodoDTO dto = </code><code class="java keyword">new</code> <code class="java plain">TodoDTOBuilder()</code></div><div class="line number35 index34 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">.description(</code><code class="java string">"description"</code><code class="java plain">)</code></div><div class="line number36 index35 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">.title(</code><code class="java string">"title"</code><code class="java plain">)</code></div><div class="line number37 index36 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">.build();</code></div><div class="line number38 index37 alt1">&nbsp;</div><div class="line number39 index38 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">Todo added = </code><code class="java keyword">new</code> <code class="java plain">TodoBuilder()</code></div><div class="line number40 index39 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">.id(1L)</code></div><div class="line number41 index40 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">.description(</code><code class="java string">"description"</code><code class="java plain">)</code></div><div class="line number42 index41 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">.title(</code><code class="java string">"title"</code><code class="java plain">)</code></div><div class="line number43 index42 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">.build();</code></div><div class="line number44 index43 alt1">&nbsp;</div><div class="line number45 index44 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">when(todoServiceMock.add(any(TodoDTO.</code><code class="java keyword">class</code><code class="java plain">))).thenReturn(added);</code></div><div class="line number46 index45 alt1">&nbsp;</div><div class="line number47 index46 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">mockMvc.perform(post(</code><code class="java string">"/api/todo"</code><code class="java plain">)</code></div><div class="line number48 index47 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">.contentType(TestUtil.APPLICATION_JSON_UTF8)</code></div><div class="line number49 index48 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">.content(TestUtil.convertObjectToJsonBytes(dto))</code></div><div class="line number50 index49 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">)</code></div><div class="line number51 index50 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">.andExpect(status().isOk())</code></div><div class="line number52 index51 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">.andExpect(content().contentType(TestUtil.APPLICATION_JSON_UTF8))</code></div><div class="line number53 index52 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">.andExpect(jsonPath(</code><code class="java string">"$.id"</code><code class="java plain">, is(</code><code class="java value">1</code><code class="java plain">)))</code></div><div class="line number54 index53 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">.andExpect(jsonPath(</code><code class="java string">"$.description"</code><code class="java plain">, is(</code><code class="java string">"description"</code><code class="java plain">)))</code></div><div class="line number55 index54 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">.andExpect(jsonPath(</code><code class="java string">"$.title"</code><code class="java plain">, is(</code><code class="java string">"title"</code><code class="java plain">)));</code></div><div class="line number56 index55 alt1">&nbsp;</div><div class="line number57 index56 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">ArgumentCaptor&lt;TodoDTO&gt; dtoCaptor = ArgumentCaptor.forClass(TodoDTO.</code><code class="java keyword">class</code><code class="java plain">);</code></div><div class="line number58 index57 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">verify(todoServiceMock, times(</code><code class="java value">1</code><code class="java plain">)).add(dtoCaptor.capture());</code></div><div class="line number59 index58 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">verifyNoMoreInteractions(todoServiceMock);</code></div><div class="line number60 index59 alt1">&nbsp;</div><div class="line number61 index60 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">TodoDTO dtoArgument = dtoCaptor.getValue();</code></div><div class="line number62 index61 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">assertNull(dtoArgument.getId());</code></div><div class="line number63 index62 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">assertThat(dtoArgument.getDescription(), is(</code><code class="java string">"description"</code><code class="java plain">));</code></div><div class="line number64 index63 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">assertThat(dtoArgument.getTitle(), is(</code><code class="java string">"title"</code><code class="java plain">));</code></div><div class="line number65 index64 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number66 index65 alt1"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><p class="cye-lm-tag"></p><div class="note course-banner"><strong>I released the starter package of my "Test With Spring" course:</strong><p class="cye-lm-tag"></p><p class="cye-lm-tag"><strong><a href="https://www.testwithspring.com/?utm_source=petri-kainulainen&amp;utm_medium=web&amp;utm_content=spring-mvc-unit-end&amp;utm_campaign=test-with-spring-course-presales" target="_blank">CHECK IT OUT &gt;&gt;</a></strong></p></div><h2>Summary</h2><p class="cye-lm-tag">We have now written unit tests for a REST API by using the Spring MVC Test framework. This tutorial has taught us four things:</p><ul><li>We learned to write unit tests for controller methods which read information from the database.</li><li>We learned to write unit tests for controller methods which add information to the database.</li><li>We learned how we can transform DTO objects into JSON bytes and send the result of the transformation in the body of the request.</li><li>We learned how we can write assertions for JSON documents by using JsonPath expressions.</li></ul><p class="cye-lm-tag">As always, you can <a href="https://github.com/pkainulainen/spring-mvc-test-examples/tree/master/rest-unittest" target="_blank">get the example application of this blog post from Github</a>. I recommend that you check it out because it has a lot of unit tests which were not covered in this blog post.</p> <span id="tve_leads_end_content" style="display: block; visibility: hidden; border: 1px solid transparent;" class="cye-lm-tag"></span><div class="tve-leads-post-footer tve-tl-anim tve-leads-track-post_footer-11 tl-anim-instant tve-leads-triggered"><div class="tl-style" id="tve_20_set" data-state="11"><div class="tve-leads-conversion-object" data-tl-type="post_footer"><div class="tve_flt"><div id="tve_editor" class="tve_shortcode_editor"><div class="thrv-leads-form-box tve_no_drag tve_no_icons tve_element_hover thrv_wrapper tve_editor_main_content tve_20_set tve_teal tve_brdr_solid">
<div class="thrv_wrapper thrv_columns tve_clearfix" style="margin-top: 0;">
<div class="tve_colm tve_foc tve_df tve_ofo ">
<div style="width: 113px;" class="thrv_wrapper tve_image_caption aligncenter">
<span class="tve_image_frame cye-lm-tag">
<img class="tve_image" src="/wp-content/plugins/thrive-leads/editor-templates/_form_css/images/set_20_icon.png" style="width: 113px;" height="113" width="113">
</span>
</div>
</div>
<div class="tve_colm tve_tfo tve_df tve_lst">
<h2 style="color: #101010; font-size: 34px; margin-top: 25px;margin-bottom: 0;" class="rft">
GET FREE EBOOK<br></h2>
<p data-unit="px" style="color: rgb(0, 0, 0); font-size: 16px; margin-top: 0px; line-height: 24px;" class="cye-lm-tag">
Subscribe my email newsletter <span class="bold_text cye-lm-tag">AND</span> you will get my eBook: Writing Integration Tests for Spring Powered Repositories <span class="bold_text cye-lm-tag">FOR FREE</span>.</p>
</div>
</div>
<div class="thrv_wrapper thrv_contentbox_shortcode" data-tve-style="5">
<div class="tve_cb tve_cb5 tve_teal">
<div class="tve_cb_cnt">
<div data-tve-style="1" class="thrv_wrapper thrv_lead_generation tve_clearfix tve_red thrv_lead_generation_horizontal tve_2" data-inputs-count="2" style="margin-top: 0;margin-bottom: 0;">
<div style="display: none;" class="thrv_lead_generation_code"></div>
<input class="tve-lg-err-msg" value="{&quot;email&quot;:&quot;Please enter a valid email address&quot;,&quot;phone&quot;:&quot;Please enter a valid phone number&quot;,&quot;required&quot;:&quot;Name and Email fields are required&quot;}" type="hidden">
<div class="thrv_lead_generation_container tve_clearfix">
<div class="tve_lead_generated_inputs_container tve_clearfix">
<div class="tve_lead_fields_overlay"></div>
<form action="https://www.getdrip.com/forms/9536594/submissions" method="POST" data-drip-embedded-form="9536594">
<div class="tve_lg_input_container  tve_lg_2 tve_lg_input">
<input name="fields[email]" value="" data-placeholder="email" placeholder="Email Address..." type="text">
</div>
<div class="tve_lg_input_container tve_submit_container tve_lg_2 tve_lg_submit">
<button type="Submit" data-drip-attribute="sign-up-button">SUBSCRIBE</button>
</div>
</form>
</div>
</div>
</div>
</div>
</div>
</div><p style="line-height: 24px;" data-unit="px" class="tve_p_center cye-lm-tag"><span class="tve_custom_font_size cye-lm-tag" style="font-size: 16px;">I will never rent, sell, or share your email address.<br></span></p>
</div></div></div></div></div></div></div>

<section id="comments"><div class="comments_intro"><span class="num_comments cye-lm-tag">108</span> comments… <a href="#commentform" rel="nofollow">add one</a></div><ul class="comment_list"><li class="comment even thread-even depth-1" id="comment-270729"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Lemrabet</span> <a class="comment_permalink" href="#comment-270729" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">August 22, 2013, 13:50</span></div><div class="comment_text" id="comment-body-270729"><p class="cye-lm-tag">Hi Petri,<br> Thank you for this very useful</p><p class="cye-lm-tag"> following step by step your recommendations<br> <code><br> @RunWith(SpringJUnit4ClassRunner.class)<br> @ContextConfiguration(locations = { "classpath:rtls-management-test-context.xml", "classpath:rtls-management-application.xml" })<br> @WebAppConfiguration<br> @TransactionConfiguration(defaultRollback = true, transactionManager = "hibernatetransactionManager")<br> @Transactional<br> public class UserRestServiceTest {</code></p><p class="cye-lm-tag"><code> Logger logger = Logger.getLogger(UserRestServiceTest.class.getName());</code></p><p class="cye-lm-tag"><code> private MockMvc mockMvc;</code></p><p class="cye-lm-tag"><code> @Autowired<br> private UserService userService;</code></p><p class="cye-lm-tag"><code> @Autowired<br> private WebApplicationContext webApplicationContext;</code></p><p class="cye-lm-tag"><code> @Before<br> public void setUp() {<br> // We have to reset our mock between tests because the mock objects<br> // are managed by the Spring container. If we would not reset them,<br> // stubbing and verified behavior would "leak" from one test to another.<br> Mockito.reset(userService);</code></p><p class="cye-lm-tag"><code> mockMvc = MockMvcBuilders.webAppContextSetup(webApplicationContext)<br> .build();<br> }</code></p><p class="cye-lm-tag"><code> private User addUser() {<br> logger.info("-&gt; addUser");<br> User user = new User();<br> long id = 1;<br> user.setId(id);<br> user.setEnabled(true);<br> user.setFirstname("youness");<br> user.setUsername("admin");<br> user.setName("lemrabet");<br> user.setPassword("21232f297a57a5a743894a0e4a801fc3");<br> user.setEmail("youness.lemrabet@gmail.com");<br> logger.info(" findAllUsers");<br> User user = addUser();<br> // stubbing<br> when(userService.findAll()).thenReturn(Arrays.asList(user));</code></p><p class="cye-lm-tag"><code> mockMvc.perform(get("/get/all"))<br> .andExpect(status().isOk())<br> .andExpect(<br> content().contentType(TestUtil.APPLICATION_JSON_UTF8))<br> .andExpect(jsonPath("$", hasSize(2)))<br> .andExpect(jsonPath("$[0].id", is(1)))<br> .andExpect(jsonPath("$[0].enabled", is(true)))<br> .andExpect(jsonPath("$[0].firstname", is("youness")))<br> .andExpect(jsonPath("$[0].username", is("admin")))<br> .andExpect(jsonPath("$[0].name", is("lemrabet")))<br> .andExpect(<br> jsonPath("$[0].password",<br> is("21232f297a57a5a743894a0e4a801fc3")))<br> .andExpect(<br> jsonPath("$[0].email", is("youness.lemrabet@gmail.com")));</code></p><p class="cye-lm-tag"><code> verify(userService, times(1)).findAll();<br> verifyNoMoreInteractions(userService);</code></p><p class="cye-lm-tag"><code> logger.info("&lt;- findAllUsers");<br> }</code></p><p class="cye-lm-tag"><code>}<br> </code><br> I get the  following error :<br> Failed tests:   findAllUsers(com.smartobjectsecurity.management.rest.user.UserRestServiceTest): Status expected: &lt;200&gt; but was: &lt;404&gt;</p><p class="cye-lm-tag">Thank you for your help</p></div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-270746"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span> <a class="comment_permalink" href="#comment-270746" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">August 22, 2013, 17:10</span></div><div class="comment_text" id="comment-body-270746"><p class="cye-lm-tag">The status code 404 means that the tested controller method was not found. There are typically two reasons for this:</p><ol><li>The request is send to wrong url (typo in the request mapping).</li><li>The controller class is not found during component scan. Check out that your component scan configuration is correct.</li></ol><p class="cye-lm-tag">I hope that this answered to your question.</p></div> </div><ul class="children"><li class="comment even depth-3" id="comment-957051"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Amishi Shah</span> <a class="comment_permalink" href="#comment-957051" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">November 8, 2014, 00:25</span></div><div class="comment_text" id="comment-body-957051"><p class="cye-lm-tag">Hi Petri,</p><p class="cye-lm-tag">Thanks for the wonderful post. I have implemented a similar kind of test in my environment but I am getting the 404 error. I have checked for the URL as well as included the @ComponentScan(basePackages = {“somepackage”}) .</p><p class="cye-lm-tag">Do you recommend any other thing to be taken care of?</p><p class="cye-lm-tag">Thanks in anticipation.</p><p class="cye-lm-tag">Regards,<br> Amishi Shah</p></div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-4" id="comment-962214"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span> <a class="comment_permalink" href="#comment-962214" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">November 9, 2014, 20:43</span></div><div class="comment_text" id="comment-body-962214"><p class="cye-lm-tag">Hi,</p><p class="cye-lm-tag">Usually when you get a 404 response status, the reason is that the URL is not correct or the controller class is not found during component scan. You mentioned that you checked the URL and configured the Spring container to scan the correct package.</p><p class="cye-lm-tag">Did you remember to annotate the controller class with the <code>@Controller</code> or <code>@RestController</code> annotation?</p></div> </div></li></ul></li></ul></li></ul></li><li class="comment even thread-odd thread-alt depth-1" id="comment-279578"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Lukman</span> <a class="comment_permalink" href="#comment-279578" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">October 20, 2013, 18:24</span></div><div class="comment_text" id="comment-body-279578"><p class="cye-lm-tag">Hi<br> I was wondering how I could write a test for testing xml response instead of json . Any sample code would be appreciated.</p><p class="cye-lm-tag"> I learnt from a lot from this tutorial thanks.</p></div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-279602"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span> <a class="comment_permalink" href="#comment-279602" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">October 21, 2013, 00:37</span></div><div class="comment_text" id="comment-body-279602"><p class="cye-lm-tag">Hi Lukman,</p><p class="cye-lm-tag">The <a href="http://stackoverflow.com/questions/16208787/integration-tests-of-spring-mvc-controller" target="_blank" rel="nofollow">answer of this StackOverflow question</a> answers to your question as well. Remember that you have to add <a href="https://github.com/xmlunit/xmlunit" target="_blank" rel="nofollow">XmlUnit</a> to your <em>pom.xml</em> file (the correct scope for this dependency is <code>test</code>).</p></div> </div><ul class="children"><li class="comment even depth-3" id="comment-279629"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Lukman</span> <a class="comment_permalink" href="#comment-279629" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">October 21, 2013, 08:17</span></div><div class="comment_text" id="comment-body-279629"><p class="cye-lm-tag">Thanks Petri</p></div> </div></li></ul></li></ul></li><li class="comment odd alt thread-even depth-1" id="comment-357461"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Chris</span> <a class="comment_permalink" href="#comment-357461" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">February 5, 2014, 23:43</span></div><div class="comment_text" id="comment-body-357461"><p class="cye-lm-tag">hi Petri<br> I have the code from the blog. this is probably something silly but would like your input if you can.<br> Everything from the blog is almost the same except the integration test @ContextConfiguration<br> which I changed to<br> @ContextConfiguration(locations = {“classpath:spring/root-Context.xml”, “classpath:spring/app/servlet-context.xml”})<br> as I made some changes to the files.</p><p class="cye-lm-tag">The integration test run and executes through the controller  fine but fails with a response content type</p><p class="cye-lm-tag">Tests run: 1, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 4.619 sec &lt;&lt;&lt; FAILURE!<br> testController(my.tests.web.SomeControllerIntegrationTest)  Time elapsed: 4.331 sec  &lt;&lt;&lt; FAILURE!<br> java.lang.AssertionError: Content type expected: but was:<br> at org.springframework.test.util.AssertionErrors.fail(AssertionErrors.java:60)<br> at org.springframework.test.util.AssertionErrors.assertEquals(AssertionErrors.java:89)<br> at org.springframework.test.web.servlet.result.ContentResultMatchers$1.match(ContentResultMatchers.java:71)<br> at org.springframework.test.web.servlet.MockMvc$1.andExpect(MockMvc.java:141)<br> The mockMvc object is expecting Json in the response but it is not so. Thanks in advance</p></div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-357471"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span> <a class="comment_permalink" href="#comment-357471" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">February 6, 2014, 00:07</span></div><div class="comment_text" id="comment-body-357471"><p class="cye-lm-tag">Hi Chris,</p><p class="cye-lm-tag">There are no silly questions! I assume that you have tested the controller method manually and verified that it returns a JSON document in the request body.</p><p class="cye-lm-tag">Are you using Spring 4? I remember that I was having a similar problem in a project which uses Spring 4 instead of Spring 3.2. I was able to solve it by setting the Accept request header:</p><pre><code>
mockMvc.perform(get("/api/srv/maincontractor")
		.accept(MediaType.APPLICATION_JSON)
)
//Add assertions here
</code>
</pre><p class="cye-lm-tag">Is it possible to see the request mapping of the tested controller method (I don’t need to see the actual implementation)?</p></div> </div><ul class="children"><li class="comment odd alt depth-3" id="comment-357477"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Chris</span> <a class="comment_permalink" href="#comment-357477" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">February 6, 2014, 00:44</span></div><div class="comment_text" id="comment-body-357477"><p class="cye-lm-tag">Hi Petri,<br> Yes. This is the controller method under test. It returns a list of terms in json format. If i do a mvn tomcat:run and test it using rest client I can see that it does.</p><p class="cye-lm-tag"> @RequestMapping(value = “/terms/”, method = RequestMethod.GET)<br> public ModelAndView listTerms() {…}</p><p class="cye-lm-tag">The version of spring are newer and so is the JSon mapper. I wonder why there is such a version to version compatibility issue with these both but this another animal.<br> 3.2.0.RELEASE<br> 1.9.2</p></div> </div></li><li class="comment even depth-3" id="comment-357489"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Chris</span> <a class="comment_permalink" href="#comment-357489" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">February 6, 2014, 01:19</span></div><div class="comment_text" id="comment-body-357489"><p class="cye-lm-tag">Hi Petri</p><p class="cye-lm-tag">Thank you for your input previously. I think I see how I managed to screw this up. In my spring configuration. I am using ..</p><p class="cye-lm-tag">which I changed now to</p><p class="cye-lm-tag">.. turns out surprisingly that it actually does the conversion from pojo to json but renders it in plain text – which makes sense; so that it can be captured in a jsp etc., except it was not obvious.<br> Many thanks again.</p></div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-4" id="comment-357869"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span> <a class="comment_permalink" href="#comment-357869" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">February 6, 2014, 20:14</span></div><div class="comment_text" id="comment-body-357869"><p class="cye-lm-tag">Hi Chris,</p><p class="cye-lm-tag">If you want to simplify your code a bit (I assume that you create the <code>ModelAndView</code> object inside the controller method), you can change the controller method to look like this:</p><pre><code>
@RequestMapping(value = "/terms/", method = RequestMethod.GET)
@ResponseBody
public List&lt;Terms&gt; listTerms() {...}
</code>
</pre><p class="cye-lm-tag">This simplifies the code of your controller method and more importantly, it fixes your content type problem.</p></div> </div></li></ul></li></ul></li><li class="comment even depth-2" id="comment-1514027"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Abhay</span> <a class="comment_permalink" href="#comment-1514027" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">December 26, 2016, 14:38</span></div><div class="comment_text" id="comment-body-1514027"><p class="cye-lm-tag">Hi Petri,</p><p class="cye-lm-tag">Thanks for giving all information i need you help please tell me how i can write the junit test preparation on following code.</p><p class="cye-lm-tag">@RequestMapping(value=”/search-calendars/{resourceTypeCode}”, method=RequestMethod.GET , produces = MediaType.APPLICATION_JSON_VALUE)<br> public ResponseEntity&lt;List&gt;  searchResource(	@PathVariable String resourceTypeCode,<br> @RequestParam(value = “resourceId”, required = false) Integer resourceId) throws SunshineException {<br> if(StringUtils.isEmpty(resourceTypeCode)){<br> throw new SunshineException(“Resource code should not be Empty”);<br> }<br> SearchCalendarDTO resourceTypeDTO = new SearchCalendarDTO(resourceTypeCode,resourceId );<br> List searchlist = calendarService.searchCalendars(resourceTypeDTO);<br> return new ResponseEntity(searchlist, HttpStatus.OK);<br> }<br> }<br> Thanks,<br> Abhay</p></div> </div></li></ul></li><li class="comment odd alt thread-odd thread-alt depth-1" id="comment-379108"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Ahmad</span> <a class="comment_permalink" href="#comment-379108" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">March 6, 2014, 13:00</span></div><div class="comment_text" id="comment-body-379108"><p class="cye-lm-tag">Hi Petri,</p><p class="cye-lm-tag">First, I want to thank you for this great tutorial, it helps me a lot.</p><p class="cye-lm-tag">I found an weird issue in bean validation, spring mvc controllers’ unit tests.<br> To reproduce you juste have to upgrade your dependency for the jsp api to the lastest version and execute your first test in TodoControllerTest (`add_EmptyTodoEntry_ShouldReturnValidationErrorForTitle()`)<br> Upgrading that dependency will make this test fail, because I don’t know how but it kinda bypass bean validation. So you should get a 201 instead of 400.</p><p class="cye-lm-tag">Can you confirm this? Is it a known issue?<br> Thanks in advance for your time.</p></div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-385355"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span> <a class="comment_permalink" href="#comment-385355" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">March 10, 2014, 19:34</span></div><div class="comment_text" id="comment-body-385355"><p class="cye-lm-tag">Hi Ahmad,</p><p class="cye-lm-tag">actually I couldn’t reproduce this issue. Did you upgrade any other dependencies to newer versions?</p></div> </div><ul class="children"><li class="comment odd alt depth-3" id="comment-400879"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Ahmad</span> <a class="comment_permalink" href="#comment-400879" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">March 21, 2014, 11:51</span></div><div class="comment_text" id="comment-body-400879"><p class="cye-lm-tag">Hi Petri,</p><p class="cye-lm-tag">Thanks for your reply, yes actually I upgraded other dependencies (sorry I forgot to mentionned):<br> – Spring: 4.0.2.RELEASE<br> – Hibernate Validator: 5.1.0.Final<br> – Servlet Api: 3.1</p><p class="cye-lm-tag">If I remember well, I fixed the issue, by adding a dependency to javaee-web-api: 7.0.</p></div> </div></li><li class="comment even depth-3" id="comment-400886"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Ahmad</span> <a class="comment_permalink" href="#comment-400886" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">March 21, 2014, 11:53</span></div><div class="comment_text" id="comment-body-400886"><p class="cye-lm-tag">Petri,</p><p class="cye-lm-tag">If you still can’t reproduce it, I can send you a pull request with the pom.xml if you want.</p><p class="cye-lm-tag">Thanks for your time.</p></div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-4" id="comment-403015"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span> <a class="comment_permalink" href="#comment-403015" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">March 22, 2014, 14:37</span></div><div class="comment_text" id="comment-body-403015"><p class="cye-lm-tag">Hi Ahmad,</p><p class="cye-lm-tag">actually I happened to run into this issue when I updated Hibernate Validator to version 5.1.0.Final. I was able to solve this issue by using Hibernate Validator 5.0.3.Final. I suspect that Spring Framework 4 doesn’t support Hibernate Validator 5.1.0.Final but I haven’t been able to confirm this.</p></div> </div><ul class="children"><li class="comment even depth-5" id="comment-683510"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Angelos</span> <a class="comment_permalink" href="#comment-683510" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">June 6, 2014, 18:21</span></div><div class="comment_text" id="comment-body-683510"><p class="cye-lm-tag">thank you man for this, I was getting very frustrated!!</p></div></div></li><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-5" id="comment-683722"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span> <a class="comment_permalink" href="#comment-683722" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">June 6, 2014, 20:24</span></div><div class="comment_text" id="comment-body-683722"><p class="cye-lm-tag">You are welcome! I am happy to hear that I was able to help you out.</p></div></div></li></ul></li></ul></li></ul></li></ul></li><li class="comment even thread-even depth-1" id="comment-677839"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Magnus</span> <a class="comment_permalink" href="#comment-677839" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">June 4, 2014, 15:02</span></div><div class="comment_text" id="comment-body-677839"><p class="cye-lm-tag">Petri, these examples are really nice! I particularly like how clean and fast the unit test runs of your controller’s.</p><p class="cye-lm-tag">Do you do the same type of setup in Spring 4?</p><p class="cye-lm-tag">If you have a simple setup and use SpringBoot  org.springframework.boot.SpringApplication.Application to bootstrap the application, is there anything significant that would change with your solution?</p><p class="cye-lm-tag">Also, I thought I saw that spring-mvc-test was added into the Spring framework in Spring 3.2 which of course was released later after your blog post about this. I assume you would be using that instead of spring-mvc-test separately or did they make any changes that creates overhead that slows down the unit tests significantly?</p><p class="cye-lm-tag">Thanks,<br> Magnus</p></div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-678440"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span> <a class="comment_permalink" href="#comment-678440" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">June 4, 2014, 20:15</span></div><div class="comment_text" id="comment-body-678440"><p class="cye-lm-tag">Actually the example application of this blog post uses Spring Framework 3.2.X and Spring MVC Test framework. The standalone project is called <a href="https://github.com/spring-projects/spring-test-mvc" target="_blank" rel="nofollow">spring-test-mvc</a>, and it is used in my blog posts which talk about the integration testing of Spring MVC Applications. There really isn’t any reason to use it anymore (unless you have to use Spring 3.1).</p><p class="cye-lm-tag">I use the same setup for testing web applications which use Spring Framework 4, but I haven’t used Spring Boot yet so I cannot answer to your question. I am planning to write a Spring Boot tutorial in the future, and I will definitely address this issue in that tutorial.</p></div> </div></li></ul></li><li class="comment even thread-odd thread-alt depth-1" id="comment-708782"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Jaxox</span> <a class="comment_permalink" href="#comment-708782" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">June 24, 2014, 21:31</span></div><div class="comment_text" id="comment-body-708782"><p class="cye-lm-tag">Hi Petri</p><p class="cye-lm-tag">Thanks for the tutorial.</p><p class="cye-lm-tag">I am having some issue to get it start. I have post the question to the Stackoverflow.</p><p class="cye-lm-tag"><a href="http://stackoverflow.com/questions/24393684/constructor-threw-exception-nested-exception-is-java-lang-noclassdeffounderror" rel="nofollow">http://stackoverflow.com/questions/24393684/constructor-threw-exception-nested-exception-is-java-lang-noclassdeffounderror</a></p><p class="cye-lm-tag">let me know if you need more info, thanks.</p></div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-708813"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span> <a class="comment_permalink" href="#comment-708813" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">June 24, 2014, 22:20</span></div><div class="comment_text" id="comment-body-708813"><p class="cye-lm-tag">Hi,</p><p class="cye-lm-tag">It seems that you already got <a href="http://stackoverflow.com/a/24394329/313554" target="_blank" rel="nofollow">the correct answer to your StackOverflow question</a>. Follow the instructions given in that answer and you should be able to solve your problem.</p></div> </div></li></ul></li><li class="comment even thread-even depth-1" id="comment-773211"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Paul Statham</span> <a class="comment_permalink" href="#comment-773211" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">August 20, 2014, 13:12</span></div><div class="comment_text" id="comment-body-773211"><p class="cye-lm-tag">Hi Petri,</p><p class="cye-lm-tag">I have a question about the your object creation. In the controller test class you build your test data using a builder, but when you’re converting your data with createDTO you don’t use a builder here. Is there a reason for this?</p><p class="cye-lm-tag">Thanks,<br> Paul</p></div> </div></li><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt thread-odd thread-alt depth-1" id="comment-773263"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span> <a class="comment_permalink" href="#comment-773263" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">August 20, 2014, 13:48</span></div><div class="comment_text" id="comment-body-773263"><p class="cye-lm-tag">Thank you for asking such a good question.</p><p class="cye-lm-tag">I cannot remember what my reason was when I made the decision to use the builder pattern only in my tests (I probably didn’t have any reason for this), but nowadays I follow these “rules”:</p><ul><li>If the DTO is read-only, I will use a builder pattern  and mark all its field as <code>final</code>. Also, I won’t add setters to this DTO. This is handy if I want to just transform read-only information without exposing the internal data model of my application to the outside world.</li><li>If the information of the DTO can be modified (e.g. a form object or an object that is read from the request body), I will not use a builder pattern in my application. The reason for this is that Spring provides the object to my controller method when it is processing a request. When I return information back to the client of my API, I use a library to map entities into data transfer objects so that I can eliminate unnecessary “boiletplate” code (check out <a href="https://github.com/DozerMapper/dozer" target="_blank" rel="nofollow">Dozer</a>, <a href="http://jtransfo.org/" target="_blank" rel="nofollow">jTransfo</a>, and <a href="http://modelmapper.org/" target="_blank" rel="nofollow">ModelMapper</a>). However, I do use builder pattern in my tests because this way <a href="/programming/testing/writing-clean-tests-new-considered-harmful/" rel="nofollow">I can write tests that speak the language that is understood by domain experts</a>.</li></ul></div> </div></li><li class="comment even thread-even depth-1" id="comment-834575"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Akshay</span> <a class="comment_permalink" href="#comment-834575" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">September 28, 2014, 20:23</span></div><div class="comment_text" id="comment-body-834575"><p class="cye-lm-tag">Hi Petri,</p><p class="cye-lm-tag">Nice tutorial.<br> When I tried to use : <a href="https://github.com/pkainulainen/spring-mvc-test-examples/tree/master/controllers-unittest" rel="nofollow">https://github.com/pkainulainen/spring-mvc-test-examples/tree/master/controllers-unittest</a> I found that TodoBuilder class was missing.</p><p class="cye-lm-tag">Can you guide me what went wrong? (Version I have used : <a href="https://github.com/pkainulainen/spring-mvc-test-examples/commit/93ea56b879a0af64f862c935de188cf4860a9dd0" rel="nofollow">https://github.com/pkainulainen/spring-mvc-test-examples/commit/93ea56b879a0af64f862c935de188cf4860a9dd0</a>)</p><p class="cye-lm-tag">Thanks,<br> Akshay</p></div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-834582"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span> <a class="comment_permalink" href="#comment-834582" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">September 28, 2014, 20:30</span></div><div class="comment_text" id="comment-body-834582"><p class="cye-lm-tag">Hi Akshay,</p><p class="cye-lm-tag">Unfortunately I am not sure what is going on because I can find the <a href="https://github.com/pkainulainen/spring-mvc-test-examples/blob/master/controllers-unittest/src/test/java/net/petrikainulainen/spring/testmvc/todo/model/TodoBuilder.java" target="_blank" rel="nofollow"><code>TodoBuilder</code></a> class. :(</p></div> </div></li></ul></li><li class="comment even thread-odd thread-alt depth-1" id="comment-857501"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">damn</span> <a class="comment_permalink" href="#comment-857501" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">October 7, 2014, 09:42</span></div><div class="comment_text" id="comment-body-857501"><p class="cye-lm-tag">without TodoBuilder this are piece of shit…</p></div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-857622"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span> <a class="comment_permalink" href="#comment-857622" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">October 7, 2014, 10:23</span></div><div class="comment_text" id="comment-body-857622"><p class="cye-lm-tag">Hi,</p><p class="cye-lm-tag">thanks for the feedback! I left a few trivial classes out from this blog post since I assumed that those who are interested in them, will read them on Github.</p><p class="cye-lm-tag">Anyway, if you want to get the source code of those test data builder classes, just click the links below:</p><ul><li><a href="https://github.com/pkainulainen/spring-mvc-test-examples/blob/master/rest-unittest/src/test/java/net/petrikainulainen/spring/testmvc/todo/model/TodoBuilder.java" target="_blank" rel="nofollow">The source code of the <code>TodoBuilder</code> class</a></li><li><a href="https://github.com/pkainulainen/spring-mvc-test-examples/blob/master/rest-unittest/src/test/java/net/petrikainulainen/spring/testmvc/todo/dto/TodoDTOBuilder.java" target="_blank" rel="nofollow">The source code of the <code>TodoDTOBuilder</code> class.</a></li></ul></div> </div></li></ul></li><li class="comment even thread-even depth-1" id="comment-1015232"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Ramakrishna</span> <a class="comment_permalink" href="#comment-1015232" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">November 29, 2014, 23:20</span></div><div class="comment_text" id="comment-body-1015232"><p class="cye-lm-tag">Hi Petri, Superb Tutorial !!<br> I have a question.<br> While verifying the response, we are doing an inline compare of values like:<br> .andExpect(jsonPath(“$[0].id”, is(1)))<br> .andExpect(jsonPath(“$[0].description”, is(“Lorem ipsum”)))<br> .andExpect(jsonPath(“$[0].title”, is(“Foo”)))</p><p class="cye-lm-tag">is it possible to collect this response or parts of response into an object. So that I can write a seperate method to pass on the json response to a separate method for asserting values</p></div> </div><ul class="children"><li class="comment odd alt depth-2" id="comment-1015277"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Ramakrishna</span> <a class="comment_permalink" href="#comment-1015277" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">November 29, 2014, 23:43</span></div><div class="comment_text" id="comment-body-1015277"><p class="cye-lm-tag">Okay, I have figured this out.</p><p class="cye-lm-tag"> MvcResult result = mockMvc.perform(post(“/admin/state/getById/” + state.getId()))<br> .andExpect(status().isOk())<br> .andExpect(content().contentType(TestUtil.APPLICATION_JSON))<br> .andDo(print())<br> .andReturn();</p><p class="cye-lm-tag"> MockHttpServletResponse response = result.getResponse();<br> String reponseJSON = response.getContentAsString();</p><p class="cye-lm-tag">this responseJSON now is a string representation of the returned JSON,<br> Now we can use it in whatever way we want, eg: using Jackson convert it into the relevant DTO and compare values.</p></div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-3" id="comment-1017199"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span> <a class="comment_permalink" href="#comment-1017199" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">November 30, 2014, 15:58</span></div><div class="comment_text" id="comment-body-1017199"><p class="cye-lm-tag">Hi,</p><p class="cye-lm-tag">I am happy to hear that you were able to solve your problem. By the way, is there some reason why you want to do this? Do you like to write assertions for real objects instead of using jsonpath?</p></div> </div></li></ul></li></ul></li><li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1075327"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Abrar</span> <a class="comment_permalink" href="#comment-1075327" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">December 29, 2014, 15:27</span></div><div class="comment_text" id="comment-body-1075327"><p class="cye-lm-tag">Hi petri, thanks for  nice tutorial..</p><p class="cye-lm-tag">i have a very simple controller which return JSON array here is my test class to test that controller :</p><pre><code>
@Test
public void findAllObjects() throws Exception {
	Components first = new ExBuilder()
			.cname("asdfasf")
			.mdesc("asdcb")
			.cdesc("asdfa")
			.ccode("asdf")
			.unitrateusd(24)
			.build();

	when(exampledao.list()).thenReturn(Arrays.asList(first));
	
	mockMvc.perform(get("/getdata"))
		.andExpect(status().isOk())
		.andExpect(content().contentType(TestUtil.APPLICATION_JSON))
		.andExpect(jsonPath("$", hasSize(0)))
		.andExpect(jsonPath("$", hasSize(1)))
		.andExpect(jsonPath("$[0].cname", is("asdfasf")))
		.andExpect(jsonPath("$[0].mdesc", is("asdcb")))
		.andExpect(jsonPath("$[0].cdesc", is("asdfa")))
		.andExpect(jsonPath("$[0].ccode", is("asdf")))
		.andExpect(jsonPath("$[0].unitrateusd", is(24)));
          
	verify(exampledao, times(1)).list();
	verifyNoMoreInteractions(exampledao);	
}
</code>
</pre><p class="cye-lm-tag">here is my java controller which i am trying to test:</p><pre><code>
@RequestMapping(value="/getdata" , method=RequestMethod.GET)
public List listContact(ModelAndView model) throws IOException {
	System.out.println("dfadfajfajfa");
	
	List listContact;
	listContact= exampeldao.list();
	
	System.out.println("hiii i made a call  but i dnt have any data.....");
	
	return listContact;
}
</code>
</pre><p class="cye-lm-tag">i could not able to call list() method, which is defined in another class.</p><p class="cye-lm-tag">when i run the test i am getting SecurityException:org.hamcrest.Matchers signature information does not match signature information of other classes in same package.</p><p class="cye-lm-tag">can u help me to solve this issue..</p><p class="cye-lm-tag">thank you</p></div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-1075444"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span> <a class="comment_permalink" href="#comment-1075444" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">December 29, 2014, 17:11</span></div><div class="comment_text" id="comment-body-1075444"><p class="cye-lm-tag">First, your test looks fine to me and it should work (assuming that you have annotated your controller with the <a href="http://docs.spring.io/spring/docs/4.1.x/javadoc-api/org/springframework/web/bind/annotation/RestController.html" target="_blank" rel="nofollow"><code>@RestController</code></a> annotation).</p><p class="cye-lm-tag">Are you trying to run your unit tests by using Eclipse? The reason why I am asking this is that I found this <a href="https://code.google.com/p/hamcrest/issues/detail?id=128" target="_blank" rel="nofollow">bug report</a> and <a href="https://code.google.com/p/hamcrest/issues/detail?id=128#c14" target="_blank" rel="nofollow">one commenter suggests that</a>:</p><blockquote><p class="cye-lm-tag">The hamcrest-library-1.3.jar in maven dependencies had collision with Eclipse embedded Hamcrest.</p></blockquote><p class="cye-lm-tag">He also found a solution to this problem (but unfortunately it sounds like a hack):</p><blockquote><p class="cye-lm-tag">So I found alternative simple solution:  rename the file $ECLIPSE_HOME\plugins\org.hamcrest.core_1.3.0.v201303031735.jar  to something like  *.bak    or  remove the file.</p><p class="cye-lm-tag">Eclipse ignores the embedded Hamcrest :) and Maven dependencies will be used instead.</p></blockquote><p class="cye-lm-tag">Unfortunately I cannot provide you any further advice since I haven’t used Eclipse for several years.</p><p class="cye-lm-tag">On the other hand, if you this happened when you tried to run your unit tests by using Maven, let me know and I will take a closer look at this problem.</p></div> </div></li></ul></li><li class="comment odd alt thread-even depth-1" id="comment-1076395"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Abrar</span> <a class="comment_permalink" href="#comment-1076395" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">December 30, 2014, 07:29</span></div><div class="comment_text" id="comment-body-1076395"><p class="cye-lm-tag">hiiii petri…<br> when i am trying to call any uri of controller i am getting some security error: class:org.hamcrest.Matchers signature information does not match  signature information of other classes in same package.<br> can u tell me why i am getting this error<br> Thankl You</p></div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-1076459"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span> <a class="comment_permalink" href="#comment-1076459" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">December 30, 2014, 08:41</span></div><div class="comment_text" id="comment-body-1076459"><p class="cye-lm-tag">Hi,</p><p class="cye-lm-tag">I answered to this question in <a href="/programming/spring-framework/unit-testing-of-spring-mvc-controllers-rest-api/#comment-1075444" rel="nofollow">this comment</a>.</p></div> </div><ul class="children"><li class="comment odd alt depth-3" id="comment-1080760"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Abrar</span> <a class="comment_permalink" href="#comment-1080760" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">January 2, 2015, 15:00</span></div><div class="comment_text" id="comment-body-1080760"><p class="cye-lm-tag">Thanks for instant response…<br> i am able to solve that security issue error, but my main issue is i am not able to execute this “listContact= exampeldao.list();” statement from my test code. If i define the list() inside the controller class i am able to get the data. but if i define list() in some other class and if i try to access via instance , i could not able to do. can u tell me where probably i am making mistake.</p><p class="cye-lm-tag">Thank You</p></div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-4" id="comment-1080782"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span> <a class="comment_permalink" href="#comment-1080782" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">January 2, 2015, 15:37</span></div><div class="comment_text" id="comment-body-1080782"><p class="cye-lm-tag">Do you mean that you cannot create a mock object that returns something when the <code>list()</code> method of <code>ExampleDao</code> object is invoked?</p><p class="cye-lm-tag">If so (and you want to get good advice), I have to see the source code of the tested method and the source code of your unit test.</p><p class="cye-lm-tag">If I have to guess, I would say that you haven’t configured the mock object correctly or the <code>list()</code> method of the <code>ExampleDao</code> object is not invoked during your unit test.</p></div> </div><ul class="children"><li class="comment odd alt depth-5" id="comment-1081819"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Abrar</span> <a class="comment_permalink" href="#comment-1081819" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">January 3, 2015, 13:48</span></div><div class="comment_text" id="comment-body-1081819"><p class="cye-lm-tag">hi petri…</p><p class="cye-lm-tag">This is my list() method</p><pre><code>
public class ExampleDaoImpl  implements Example {
	
	@Autowired
	DataSource dataSource;
	
	@Autowired
	Example exampledao;
	
	public List list() {
		//removed implementation as irrelevant
	}
}
</code>
</pre><p class="cye-lm-tag">This method is declared in “Example” interface and which is implemented by ExampleDao class.</p><p class="cye-lm-tag">Here is my controller:</p><pre><code>
@RequestMapping(value="/getdata" , method=RequestMethod.GET)
public List listContact(ModelAndView model) throws IOException{
	System.out.println("checking for unit test");
	List listContact;
	listContact= exampledao.list1();
	System.out.println("i dont have any data....");
	return listContact;
}	
</code>
</pre><p class="cye-lm-tag">here is my complete Testclass:</p><pre><code>
@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(locations={
	"classpath:/rest-servlet.xml",
	"classpath:/test-context.xml"
})
@WebAppConfiguration
public class RestTest {
	 
	private MockMvc mockMvc;
	
	@Autowired
	private Example exampledao;

	@Autowired
	private WebApplicationContext webApplicationContext;

	@Before
	public void setUp() {
		Mockito.reset(exampledao);
		mockMvc = MockMvcBuilders.webAppContextSetup(webApplicationContext)
						.build();
	}

	@Test
	public void findAllObjects() throws Exception {
		Components first = new TodoBuilder()
			.cname("asdfasf")
			.mdesc("asdcb")
			.cdesc("asdfa")
			.ccode("asdfasf")
			.unitrateusd(24)
			.build();

		when(exampledao.list1()).thenReturn(Arrays.asList(first));

		mockMvc.perform(get("/getdata"))
			.andExpect(status().isOk())
			.andExpect(content().contentType(TestUtil.APPLICATION_JSON))
			.andExpect(jsonPath("$", hasSize(1)))
			.andExpect(jsonPath("$[0].cname", is("asdfasf")))
			.andExpect(jsonPath("$[0].mdesc", is("asdcb")))
			.andExpect(jsonPath("$[0].cdesc", is("asdfa")))
			.andExpect(jsonPath("$[0].ccode", is("asdfasf")))
			.andExpect(jsonPath("$[0].unitrateusd", is(24)));

		verify(exampledao, times(1)).list1();
		verifyNoMoreInteractions(exampledao);
	}
}
</code>
</pre><p class="cye-lm-tag">And here is my configuration files:</p><p class="cye-lm-tag">test-context.xml:</p><p class="cye-lm-tag">i don’t no where i m committing mistake :-) help me to fix this issue.. :-)</p><p class="cye-lm-tag">Thank You</p></div></div></li><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-5" id="comment-1084667"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span> <a class="comment_permalink" href="#comment-1084667" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">January 5, 2015, 20:41</span></div><div class="comment_text" id="comment-body-1084667"><p class="cye-lm-tag">Wordpress doesn’t allow you to paste XML in comments =&gt; Wordpress removed the content of your configuration files. You should paste those files to <a href="http://www.pastebin.com" target="_blank" rel="nofollow">Pastebin.com</a> and add the link to your comment.</p><p class="cye-lm-tag">Anyway, the only problem I can see is that the <code>ExampleDaoImpl</code> class has a method called <code>list()</code> but your test mocks the <code>list1()</code> method.</p><p class="cye-lm-tag">Also, it would be helpful if you could clarify your problem a bit. Do you mean that your test fails because:</p><ol><li>The <code>list1()</code> method returns an empty list?</li><li>The <code>list1()</code> method is not invoked at all.</li></ol></div></div></li><li class="comment odd alt depth-5" id="comment-1085450"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Abrar</span> <a class="comment_permalink" href="#comment-1085450" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">January 6, 2015, 09:24</span></div><div class="comment_text" id="comment-body-1085450"><p class="cye-lm-tag">i could not able to invoke list1() method at all…<br> here is my link of configuration files…<br> <a href="http://pastebin.com/bjWLDJPA" rel="nofollow">http://pastebin.com/bjWLDJPA</a><br> <a href="http://pastebin.com/psN6Zb5J" rel="nofollow">http://pastebin.com/psN6Zb5J</a></p><p class="cye-lm-tag">Thank You</p></div></div></li><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-5" id="comment-1085944"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span> <a class="comment_permalink" href="#comment-1085944" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">January 6, 2015, 18:44</span></div><div class="comment_text" id="comment-body-1085944"><p class="cye-lm-tag">I took a quick look at your configuration files and I have no idea why you don’t get an exception because both configuration files configure the <code>exampleDao</code> bean.</p><p class="cye-lm-tag">If you use the web application context based configuration, you have to split the application context configuration files of your application so that you can use only some of them in your unit tests (<a href="/programming/spring-framework/unit-testing-of-spring-mvc-controllers-configuration/#appcontext-config" rel="nofollow">get more information about this</a>).</p><p class="cye-lm-tag">In other words, you have two options:</p><ol><li>You can <a href="/programming/spring-framework/unit-testing-of-spring-mvc-controllers-configuration/#appcontext-config" rel="nofollow">split your configuration file into multiple configuration files</a> and configure only the mock bean in the test specific configuration file. After you have done this, you can configure your unit tests by using the correct application context configuration files.</li><li>You can configure the web layer and the required mock beans in the <em>test-config.xml</em> file and configure your unit tests by using only that file.</li></ol><p class="cye-lm-tag">I hope that this answered to your question.</p></div></div></li></ul></li></ul></li></ul></li></ul></li><li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1090201"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag"><a href="http://www.patrick-gotthard.de" rel="external nofollow" class="url">Patrick</a></span> <a class="comment_permalink" href="#comment-1090201" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">January 9, 2015, 21:52</span></div><div class="comment_text" id="comment-body-1090201"><p class="cye-lm-tag">Hi Petri,</p><p class="cye-lm-tag">instead of excluding hamcrest-core from junit and adding hamcrest-all as a dependency you could just add hamcrest-library as a dependency.</p><p class="cye-lm-tag">Regards,<br> Patrick</p></div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-1090237"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span> <a class="comment_permalink" href="#comment-1090237" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">January 9, 2015, 22:37</span></div><div class="comment_text" id="comment-body-1090237"><p class="cye-lm-tag">Hi Patrick,</p><p class="cye-lm-tag">Good catch! I am going to rewrite my Spring MVC Test tutorial during this year (2015), and I will include this fix to my new tutorial.</p><p class="cye-lm-tag">Thank you for pointing this out!</p></div> </div></li></ul></li><li class="comment odd alt thread-even depth-1" id="comment-1090343"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag"><a href="http://www.patrick-gotthard.de" rel="external nofollow" class="url">Patrick</a></span> <a class="comment_permalink" href="#comment-1090343" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">January 10, 2015, 00:29</span></div><div class="comment_text" id="comment-body-1090343"><p class="cye-lm-tag">Hi again,</p><p class="cye-lm-tag">just another Point: are you always programming your Builders like the TodoBuilder? I mean the fact that you are not able to create multiple Todo instances with one Builder instance (build only returns the reference to model instance).</p><p class="cye-lm-tag">I prefer to copy all fields of the Todo model to the builder class and create a new Todo instance with every build method call. This is especially useful when you want to create multiple instances with e.g. only one difference.</p><p class="cye-lm-tag">What do you think about it?</p><p class="cye-lm-tag">Regards,<br> Patrick</p></div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-1091185"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span> <a class="comment_permalink" href="#comment-1091185" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">January 10, 2015, 18:09</span></div><div class="comment_text" id="comment-body-1091185"><p class="cye-lm-tag">Hi,</p><p class="cye-lm-tag">Actually I don’t use the approach that is used in this blog post anymore. I “copy” the fields of the constructed object to the test data builder class (and of course to the “real” builder), and create a new object in the <code>build()</code> method.</p><p class="cye-lm-tag">My main reason for doing this was that often objects have a many mandatory properties, and the “real” builder class verifies that everyone of them is “valid”. If these fields are not valid, it will throw the correct <code>RuntimeException</code>. When I copy these fields to the test data builder class, I also set default values to these mandatory fields (e.g. if the field is a <code>String</code> field, I use string “NOT_IMPORTANT”). This way I can set only those fields that are relevant for the test case.</p><p class="cye-lm-tag">This is one of those things that will change when I update my Spring MVC Test tutorial =&gt; don’t change your way of doing things since it is better than the approach described here.</p></div> </div></li></ul></li><li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1222404"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Dinda</span> <a class="comment_permalink" href="#comment-1222404" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">June 9, 2015, 10:14</span></div><div class="comment_text" id="comment-body-1222404"><p class="cye-lm-tag">Hi Petri,</p><p class="cye-lm-tag">First of all, your tutorial is really great. I am new to unit testing (or to spring in general) and I learned a lot from this tutorial.</p><p class="cye-lm-tag">I was trying to test a controller my self, using the stand alone setup (because I hate xml), but then there’s an error in the .andExpect(jsonPath(“$.var3”, is(“123456”))) line. The error said “json can not be null” and it throws IllegalArgumentException.<br> And I’ve tried almost everything and can’t figure out why it happened. Does it have anything to do with me not using xml? or what</p><p class="cye-lm-tag">Here’s the controller I want to test</p><pre><code>
@RestController
@RequestMapping("/test")
public class MyController {
    
    @Autowired
    MyService myService;
    
    @RequestMapping(
            value={"/dosomething"},
            method=RequestMethod.POST
    )
    @ResponseBody
    public MyResponse doSomething(@RequestBody MyRequest request) {
        return myService.doSomething(request);
    }
    //another methods here
}
</code>
</pre><p class="cye-lm-tag">Here’s my test controller</p><pre><code>
public class MyControllerTest {
    
    @Mock
    private MyService myService;
    
    @InjectMocks
    private MyController myController;
    
    private MockMvc mockMvc;
    
    public MyControllerTest() {
    }
    
    @Before
    public void setUp() {
        MockitoAnnotations.initMocks(this);
        mockMvc = MockMvcBuilders.standaloneSetup(myController).build();
    }

    @Test
    public void testDoSomething() throws Exception {
        System.out.println("do something");
        
        MyRequest myRequest = new MyRequest();
        myRequest.var1("abc");
        myRequest.var2("def");
        
        MyResponse myResponse = new MyResponse();
        myResponse.var3("123456");
		myResponse.var4("qwerty"); 
        //in reality (when tested from postman), the var4 value is and supposed to be null
        
        when(myService.doSomething(myRequest)).thenReturn(myResponse);
        
        mockMvc.perform(post("/test/dosomething")
                .content(new ObjectMapper().writeValueAsBytes(myRequest))
                .contentType(MediaType.APPLICATION_JSON)
        )
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.var3", is("123456")))
                ;
    }
}
</code>
</pre><p class="cye-lm-tag">Thank you</p></div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-1222735"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span> <a class="comment_permalink" href="#comment-1222735" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">June 9, 2015, 18:59</span></div><div class="comment_text" id="comment-body-1222735"><p class="cye-lm-tag">Hi,</p><p class="cye-lm-tag">Replace this line:</p><pre><code>
when(myService.doSomething(myRequest)).thenReturn(myResponse);
</code>
</pre><p class="cye-lm-tag">With this line:</p><pre><code>
when(myService.doSomething(isA(MyRequest.class))).thenReturn(myResponse);
</code>
</pre><p class="cye-lm-tag">The problem is that the <code>MyRequest</code> object that is passed to the <code>doSomething()</code> method of the <code>MyService</code> class is not the same object which you create in your test method.</p><p class="cye-lm-tag">The reason for this is that Spring MVC creates a new <code>MyRequest</code> object when it resolves the method parameters of your controller method (and reads the field values from the request body).</p><p class="cye-lm-tag">Did this solve your problem?</p></div> </div></li></ul></li><li class="comment odd alt thread-even depth-1" id="comment-1227333"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Dinda</span> <a class="comment_permalink" href="#comment-1227333" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">June 16, 2015, 14:09</span></div><div class="comment_text" id="comment-body-1227333"><p class="cye-lm-tag">OMG, thank you!<br> That did solve my problem. And apparently, it was that simple.</p><p class="cye-lm-tag">I have some other questions if you don’t mind.<br> I was wondering how to pass parameter (Object) annotated with @ModelAttribute when unit testing a method in Controller class.<br> For example, I have this GET method<br> public Response doSomething(@ModelAttribute Request request).<br> How should I unit test that kind of method? What should I do in the mockMvc.perform(get(“/test/something”)) ?</p><p class="cye-lm-tag">Thank you.</p></div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-1227518"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span> <a class="comment_permalink" href="#comment-1227518" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">June 16, 2015, 21:08</span></div><div class="comment_text" id="comment-body-1227518"><p class="cye-lm-tag">Thank you for your kind words. I really appreciate them.</p><blockquote><p class="cye-lm-tag">I was wondering how to pass parameter (Object) annotated with @ModelAttribute when unit testing a method in Controller class.</p></blockquote><p class="cye-lm-tag">It depends.</p><p class="cye-lm-tag">If you want to write a unit test for a controller method that processes form submissions, you should read my blog post that describes how you can <a href="/programming/spring-framework/unit-testing-of-spring-mvc-controllers-normal-controllers/" rel="nofollow">write unit tests for “normal” Spring MVC controllers</a>.</p><p class="cye-lm-tag">If you want to write a unit test that passes “other” objects to your controller method, the answer to your question depends from the way you “initialize” the <code>@ModelAttribute</code> object (see <a href="http://docs.spring.io/spring/docs/4.1.x/spring-framework-reference/html/mvc.html#mvc-ann-modelattrib-method-args" target="_blank" rel="nofollow">Using @ModelAttribute on a method argument</a> for more details). Could you provide an example that provides more details about your problem?</p></div> </div></li></ul></li><li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1239035"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">candy</span> <a class="comment_permalink" href="#comment-1239035" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">July 8, 2015, 08:07</span></div><div class="comment_text" id="comment-body-1239035"><p class="cye-lm-tag">Hi Petri,<br> Your tutorial is good and thank you  for your  tutorials,  I am new to this MVC testing and I learned a lot from this tutorial.I have some doubts.</p><p class="cye-lm-tag">In this tutorial u explained about one @pathvariable only  mockMvc.perform(get(“/api/todo/{id}”, 1L))  ok fine,how to pass multiple @pathvariables in url ,for ex /add/{id}/{page}</p><p class="cye-lm-tag">Thank you</p></div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-1239075"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span> <a class="comment_permalink" href="#comment-1239075" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">July 8, 2015, 09:59</span></div><div class="comment_text" id="comment-body-1239075"><p class="cye-lm-tag">Hi,</p><blockquote><p class="cye-lm-tag">how to pass multiple @pathvariables in url</p></blockquote><p class="cye-lm-tag">You can simply pass the url template and variables as method parameters to the factory method that creates the used <code>RequestBuilder</code> object (see the Javadoc of the <a href="http://docs.spring.io/spring/docs/4.1.x/javadoc-api/org/springframework/test/web/servlet/request/MockMvcRequestBuilders.html" target="_blank" rel="nofollow"><code>MockMvcRequestBuilders</code></a> class).</p><p class="cye-lm-tag">For example, if you want to send get a GET request by using url template: ‘/api/person/{personId}/todo/{todoId}’ when the <code>personId</code> is <code>1L</code> and the <code>todoId</code> is <code>99L</code>, you have to use the following code:</p><pre><code>
mockMvc.perform(get("/api/person/{personId}/todo/{todoId}", 1L, 99L));
</code>
</pre><p class="cye-lm-tag">As long as you remember to pass the path variable values in the same order than the path variables, you should be fine. If you have any further questions, don’t hesitate to ask them.</p></div> </div><ul class="children"><li class="comment odd alt depth-3" id="comment-1239105"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">candy</span> <a class="comment_permalink" href="#comment-1239105" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">July 8, 2015, 11:59</span></div><div class="comment_text" id="comment-body-1239105"><p class="cye-lm-tag">yes,its working fine.Thank you</p><p class="cye-lm-tag">I have one more questions,In my url am passing pathvariables ,HttpSession and Model for form values am clear about how to pass pathvariables and HttpSession but how to pass that Model.</p><p class="cye-lm-tag">Am passing those all form values in model attribute but still am getting Null Pointer expection</p></div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-4" id="comment-1239109"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span> <a class="comment_permalink" href="#comment-1239109" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">July 8, 2015, 12:13</span></div><div class="comment_text" id="comment-body-1239109"><p class="cye-lm-tag">Hi,</p><p class="cye-lm-tag">If you want to set the property values of a form object (a controller method parameter that is annotated with the <code>@ModelAttribute</code> annotation), you should set the property values by using <a href="http://docs.spring.io/spring/docs/4.1.x/javadoc-api/org/springframework/test/web/servlet/request/MockHttpServletRequestBuilder.html#param-java.lang.String-java.lang.String...-" target="_blank" rel="nofollow">the <code>param()</code> method of the <code>MockHttpServletRequestBuilder</code> class</a>.</p><p class="cye-lm-tag">I have written a <a href="/programming/spring-framework/unit-testing-of-spring-mvc-controllers-normal-controllers/" rel="nofollow">blog post</a> that describes how you can write unit tests for controller methods which processes form submissions. It describes how you can use this method in your unit tests.</p><p class="cye-lm-tag">Let me know if this solved your problem. :)</p></div> </div><ul class="children"><li class="comment odd alt depth-5" id="comment-1239156"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Anonymous</span> <a class="comment_permalink" href="#comment-1239156" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">July 8, 2015, 14:15</span></div><div class="comment_text" id="comment-body-1239156"><p class="cye-lm-tag">Hi,<br> thanks for that blog post  thats very helpfull .</p><p class="cye-lm-tag">how to test private methods?</p><p class="cye-lm-tag">Thanks</p></div></div></li><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-5" id="comment-1239216"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span> <a class="comment_permalink" href="#comment-1239216" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">July 8, 2015, 17:57</span></div><div class="comment_text" id="comment-body-1239216"><p class="cye-lm-tag">Hi,</p><p class="cye-lm-tag">You cannot (and should not) test private methods. You should only test your public API. If the tested methods use private methods (and often they do), the private methods will be “tested” as well.</p><p class="cye-lm-tag">On the other hand, if you have to test the functionality of a private method, you should move it to another class and make it public. Or you could make it protected (this is useful if you are <a href="http://www.amazon.com/Working-Effectively-Legacy-Michael-Feathers/dp/0131177052" target="_blank" rel="nofollow">working with legacy code</a>).</p></div></div></li><li class="comment odd alt depth-5" id="comment-1239508"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">candy</span> <a class="comment_permalink" href="#comment-1239508" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">July 9, 2015, 09:44</span></div><div class="comment_text" id="comment-body-1239508"><p class="cye-lm-tag">Hi,</p><p class="cye-lm-tag">ok thank you.</p></div></div></li><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-5" id="comment-1239511"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span> <a class="comment_permalink" href="#comment-1239511" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">July 9, 2015, 09:59</span></div><div class="comment_text" id="comment-body-1239511"><p class="cye-lm-tag">You are welcome!</p></div></div></li></ul></li></ul></li></ul></li></ul></li><li class="comment odd alt thread-even depth-1" id="comment-1239576"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">candy</span> <a class="comment_permalink" href="#comment-1239576" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">July 9, 2015, 13:12</span></div><div class="comment_text" id="comment-body-1239576"><p class="cye-lm-tag">Hi<br> Am trying to get userID form session but am getting null.</p><p class="cye-lm-tag">Thank you</p></div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-1239653"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span> <a class="comment_permalink" href="#comment-1239653" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">July 9, 2015, 16:24</span></div><div class="comment_text" id="comment-body-1239653"><p class="cye-lm-tag">Unfortunately I cannot know what is wrong. However, because you get <code>null</code>, it is very likely that the userID is not found from the session.</p></div> </div></li></ul></li><li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1239630"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Candy</span> <a class="comment_permalink" href="#comment-1239630" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">July 9, 2015, 15:23</span></div><div class="comment_text" id="comment-body-1239630"><p class="cye-lm-tag">Hi,</p><p class="cye-lm-tag">How to test Spring MVC with tiles</p><p class="cye-lm-tag">Thank you</p></div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-1239657"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span> <a class="comment_permalink" href="#comment-1239657" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">July 9, 2015, 16:30</span></div><div class="comment_text" id="comment-body-1239657"><p class="cye-lm-tag">I have never used Tiles, but I assume that you can write controller tests by using the techniques described in <a href="/programming/spring-framework/unit-testing-of-spring-mvc-controllers-normal-controllers/" rel="nofollow">this blog post</a>. There <a href="/programming/spring-framework/unit-testing-of-spring-mvc-controllers-normal-controllers/#comment-1239640" rel="nofollow">seems to be some differences though</a>.</p></div> </div><ul class="children"><li class="comment odd alt depth-3" id="comment-1239996"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Candy</span> <a class="comment_permalink" href="#comment-1239996" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">July 10, 2015, 08:29</span></div><div class="comment_text" id="comment-body-1239996"><p class="cye-lm-tag">Ok, Thank you</p></div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-4" id="comment-1240046"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span> <a class="comment_permalink" href="#comment-1240046" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">July 10, 2015, 10:48</span></div><div class="comment_text" id="comment-body-1240046"><p class="cye-lm-tag">You are welcome.</p></div> </div></li></ul></li></ul></li></ul></li><li class="comment odd alt thread-even depth-1" id="comment-1240087"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Candy</span> <a class="comment_permalink" href="#comment-1240087" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">July 10, 2015, 12:26</span></div><div class="comment_text" id="comment-body-1240087"><p class="cye-lm-tag">Hi,</p><p class="cye-lm-tag">In my controller i have HttpSession session as parameter and my using this session to get userid.<br> my mockMVC my passing mockSession as parameter but am getting null how to get userid using this seccion.</p><p class="cye-lm-tag">Thank you</p></div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-1240090"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span> <a class="comment_permalink" href="#comment-1240090" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">July 10, 2015, 12:33</span></div><div class="comment_text" id="comment-body-1240090"><p class="cye-lm-tag">Hi,</p><p class="cye-lm-tag">Another reader had the exact same problem. Check out <a href="/programming/spring-framework/unit-testing-of-spring-mvc-controllers-normal-controllers/#comment-1239651" rel="nofollow">this thread</a>.</p></div> </div><ul class="children"><li class="comment odd alt depth-3" id="comment-1241915"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">candy</span> <a class="comment_permalink" href="#comment-1241915" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">July 14, 2015, 12:47</span></div><div class="comment_text" id="comment-body-1241915"><p class="cye-lm-tag">Hi,</p><p class="cye-lm-tag">This the way to get userid from session.</p><pre><code>
UserBean userBean = new UserBean();
userBean.setUserId("111");
this.mockMvc.perform(post("/getuser")
		.sessionAttr("userbean",userBean))
</code>
</pre><p class="cye-lm-tag">Thanks</p></div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-4" id="comment-1241918"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span> <a class="comment_permalink" href="#comment-1241918" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">July 14, 2015, 12:52</span></div><div class="comment_text" id="comment-body-1241918"><p class="cye-lm-tag">You are welcome! I am happy to hear that you were able to solve your problem.</p></div> </div><ul class="children"><li class="comment odd alt depth-5" id="comment-1243101"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Candy</span> <a class="comment_permalink" href="#comment-1243101" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">July 17, 2015, 10:33</span></div><div class="comment_text" id="comment-body-1243101"><p class="cye-lm-tag">Hi,<br> I am getting  java.lang.ClassNotFoundException: org.springframework.test.web.server.MockMvc exception while building the maven project.<br> could you please help to resolve this issue.</p><p class="cye-lm-tag">Thank you</p></div></div></li><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-5" id="comment-1243144"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span> <a class="comment_permalink" href="#comment-1243144" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">July 17, 2015, 12:53</span></div><div class="comment_text" id="comment-body-1243144"><p class="cye-lm-tag">Which Spring version are you using? The reason why ask this is that I noticed that the error message has the “old” package of the <code>MockMvc</code> class.</p><p class="cye-lm-tag">If you are writing tests for an application that uses Spring 3.1.X, this package is correct. If this is the case, you need to ensure that you have added the standalone <a href="https://github.com/spring-projects/spring-test-mvc" target="_blank" rel="nofollow">spring-test-mvc</a> dependency to your <em>pom.xml</em> file.</p><p class="cye-lm-tag">If you are writing tests for an application that uses Spring 3.2.X or never, you should add the sprint-test library to your <em>pom.xml</em> file. Also, remember that in this case you must remove the spring-test-mvc dependency from your POM file.</p></div></div></li><li class="comment odd alt depth-5" id="comment-1243164"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Candy</span> <a class="comment_permalink" href="#comment-1243164" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">July 17, 2015, 14:13</span></div><div class="comment_text" id="comment-body-1243164"><p class="cye-lm-tag">I am using spring 4.0.1.RELEASE</p><p class="cye-lm-tag">Thank you</p></div></div></li><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-5" id="comment-1243231"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span> <a class="comment_permalink" href="#comment-1243231" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">July 17, 2015, 17:38</span></div><div class="comment_text" id="comment-body-1243231"><p class="cye-lm-tag">You have to ensure that your <em>pom.xml</em> contains ONLY the spring-test dependency. If your <em>pom.xml</em> contains the spring-test-mvc dependency, you need to remove it. Also, you need to fix the imports because the package of the <code>MockMvc</code> class has changed.</p></div></div></li><li class="comment odd alt depth-5" id="comment-1244812"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Candy</span> <a class="comment_permalink" href="#comment-1244812" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">July 21, 2015, 09:50</span></div><div class="comment_text" id="comment-body-1244812"><p class="cye-lm-tag">Hi</p><p class="cye-lm-tag">Now its working fine.</p><p class="cye-lm-tag">Thank you</p></div></div></li><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-5" id="comment-1244837"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span> <a class="comment_permalink" href="#comment-1244837" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">July 21, 2015, 11:52</span></div><div class="comment_text" id="comment-body-1244837"><p class="cye-lm-tag">You are welcome.</p></div></div></li></ul></li></ul></li></ul></li></ul></li><li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1244844"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Candy</span> <a class="comment_permalink" href="#comment-1244844" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">July 21, 2015, 12:14</span></div><div class="comment_text" id="comment-body-1244844"><p class="cye-lm-tag">Hi,</p><p class="cye-lm-tag">I am getting “The method when(T) in the type Mockito is not applicable for the arguments (void)”  while testing void methods.</p><p class="cye-lm-tag">Thanks</p></div> </div><ul class="children"><li class="comment even depth-2" id="comment-1244862"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Candy</span> <a class="comment_permalink" href="#comment-1244862" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">July 21, 2015, 13:24</span></div><div class="comment_text" id="comment-body-1244862"><p class="cye-lm-tag">Hi,</p><p class="cye-lm-tag">One more doubt whether tomcat is running or not while executing junit testcases.</p><p class="cye-lm-tag">Thanks</p></div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-3" id="comment-1245028"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span> <a class="comment_permalink" href="#comment-1245028" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">July 21, 2015, 22:00</span></div><div class="comment_text" id="comment-body-1245028"><p class="cye-lm-tag">No. Tomcat is not running when you run unit tests that use the Spring MVC Test framework.</p></div> </div></li></ul></li><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-1245029"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span> <a class="comment_permalink" href="#comment-1245029" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">July 21, 2015, 22:03</span></div><div class="comment_text" id="comment-body-1245029"><p class="cye-lm-tag">The Mockito documentation explains how you can <a href="http://site.mockito.org/mockito/docs/current/org/mockito/Mockito.html#12" target="_blank" rel="nofollow">mock <code>void</code> methods</a>.</p></div> </div><ul class="children"><li class="comment odd alt depth-3" id="comment-1245221"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Candy</span> <a class="comment_permalink" href="#comment-1245221" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">July 22, 2015, 07:39</span></div><div class="comment_text" id="comment-body-1245221"><p class="cye-lm-tag">Ok Thank you very much Petri.</p></div> </div></li></ul></li></ul></li><li class="comment even thread-even depth-1" id="comment-1313463"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Paul</span> <a class="comment_permalink" href="#comment-1313463" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">November 16, 2015, 21:10</span></div><div class="comment_text" id="comment-body-1313463"><p class="cye-lm-tag">Thanks for the insightful and thorough tutorial .  However, it appears that for several of the examples, the controller logic is not actually being tested.  Consider the line:<br> when(todoServiceMock.findAll()).thenReturn(Arrays.asList(first, second));<br> Seems like it would be a more true unit test if the call service.findAll(); was mocked.  In this way, we only mock the database service and actually execute the rest of the logic in findAll (which in this particular case is pretty minimal).  Thoughts?</p></div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-1315031"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span> <a class="comment_permalink" href="#comment-1315031" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">November 18, 2015, 23:10</span></div><div class="comment_text" id="comment-body-1315031"><p class="cye-lm-tag">Hi Paul,</p><p class="cye-lm-tag">Thank your for your kind words. I really appreciate them. Also, thank you for writing an interesting comment. I will answer to it below:</p><blockquote><p class="cye-lm-tag"> However, it appears that for several of the examples, the controller logic is not actually being tested. Consider the line:<br> when(todoServiceMock.findAll()).thenReturn(Arrays.asList(first, second));<br> Seems like it would be a more true unit test if the call service.findAll(); was mocked.</p></blockquote><p class="cye-lm-tag">Do you mean that the service logic is not tested? The reason why I ask this is that these unit tests isolate the tested code by replacing its dependencies with mock objects. In other words, they test the controller logic but not the service logic (because the service is a mock object).</p><blockquote><p class="cye-lm-tag">Seems like it would be a more true unit test if the call service.findAll(); was mocked. In this way, we only mock the database service and actually execute the rest of the logic in findAll (which in this particular case is pretty minimal). Thoughts?</p></blockquote><p class="cye-lm-tag">I assume that you want to mock the repository’s <code>findAll()</code> method? This is entirely possible. It just means that you want to use a larger than unit I did. Typically I use small units and mock the external dependencies for two reasons:</p><ul><li>I think that these tests are easier to write and read.</li><li>If my unit test fails, I know the exact location of the problem.</li></ul><p class="cye-lm-tag">However, I am saying that this is the one and only way of doing things. It is just an approach that has served me well. If you think that a bigger unit size helps you to write better tests, you should give it a shot. You will notice pretty soon if it is a better approach than using small units. In fact, this example is so simple that the unit size probably don’t matter at all because there really isn’t a lot of logic.</p><p class="cye-lm-tag"><strong>P.S.</strong> Naturally I write integration and end-to-end tests as well.</p><p class="cye-lm-tag"><strong>P.P.S.</strong> You might want to check out my <a href="/writing-clean-tests/" rel="nofollow">Writing Clean Tests tutorial</a>. It should give you something to think about.</p></div> </div></li></ul></li><li class="comment even thread-odd thread-alt depth-1" id="comment-1362993"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Will</span> <a class="comment_permalink" href="#comment-1362993" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">February 2, 2016, 00:05</span></div><div class="comment_text" id="comment-body-1362993"><p class="cye-lm-tag">Hi<br> Great tutorial.. thanks very much.<br> I am having an issue getting it working though and would be grateful for any advice..<br> I added the jsonPath 0.8.1 jar file to my class path manually through eclipse and now when running my test I get the following error.. On researching it suggest this jar file was compiled with a different jdk version, I am using java 5, could this be the problem?</p><pre><code>
java.lang.UnsupportedClassVersionError: Bad version number in .class file
	at java.lang.ClassLoader.defineClass1(Native Method)
	at java.lang.ClassLoader.defineClass(ClassLoader.java:620)
	at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:124)
</code>
</pre><p class="cye-lm-tag"><em>Update: I removed the irrelevant part of the stack trace – Petri</em></p></div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-1363419"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span> <a class="comment_permalink" href="#comment-1363419" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">February 2, 2016, 19:01</span></div><div class="comment_text" id="comment-body-1363419"><p class="cye-lm-tag">Hi,</p><p class="cye-lm-tag">The problem is that your JDK is too old. The latest version of JsonPath (2.1.0) requires JDK 1.6, and I assume that the version 0.8.1 requires it as well (otherwise you wouldn’t get this error).</p></div> </div><ul class="children"><li class="comment even depth-3" id="comment-1363476"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Will</span> <a class="comment_permalink" href="#comment-1363476" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">February 2, 2016, 20:36</span></div><div class="comment_text" id="comment-body-1363476"><p class="cye-lm-tag">Thanks for the reply. I though that may be the problem. Unfortunately I cannot upgrade my java version as the production server is not compatible. Do you recommend an alternative library I could use to make assertions about the returned json response. Thanks.</p></div> </div><ul class="children"><li class="comment odd alt depth-4" id="comment-1363501"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Will</span> <a class="comment_permalink" href="#comment-1363501" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">February 2, 2016, 21:08</span></div><div class="comment_text" id="comment-body-1363501"><p class="cye-lm-tag">Maybe I could use jackson object mapper to make assertions like..</p><pre><code>
MyClass myClass = new MyClass();
    myClass.setProp1("property1");
    when(myService.method1("property1")).thenReturn(myClass); 
    String urlTemplate = "/myUrl/property1";

ResultActions results = mockMvc.perform(get(urlTemplate, new Object()))
        .andExpect(status().isOk())
        .andExpect(content().contentType("application/json;charset=UTF-8"));
MyClass response = 
        mapper.readValue(results.andReturn().getResponse()
            .getContentAsString(), MyClass.class);

assertEquals("property1" response.getProp1());
</code>
</pre></div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-5" id="comment-1364337"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span> <a class="comment_permalink" href="#comment-1364337" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">February 3, 2016, 22:47</span></div><div class="comment_text" id="comment-body-1364337"><p class="cye-lm-tag">Hi Will,</p><p class="cye-lm-tag">that is definitely one way to solve your problem. However, you can also “hide” these implementation details by <a href="http://www.planetgeek.ch/2012/03/07/create-your-own-matcher/" target="_blank" rel="nofollow">creating a custom Hamcrest matcher</a>. After you have created your custom matcher, you can use it for writing assertions for the returned JSON.</p><p class="cye-lm-tag">For example, your test case could look like this:</p><pre><code>
mockMvc.perform(get("/foo/bar"))
	.andExpect(content().string(hasJsonProperty("id", 1L)));
</code>
</pre></div></div></li></ul></li></ul></li></ul></li></ul></li><li class="comment odd alt thread-even depth-1" id="comment-1380321"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Adel Sassi</span> <a class="comment_permalink" href="#comment-1380321" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">February 26, 2016, 12:33</span></div><div class="comment_text" id="comment-body-1380321"><p class="cye-lm-tag">Hello, thank you so much for your tutorial.<br> I have encountered an exception when makin unit test using mock:</p></div> </div></li><li class="comment even thread-odd thread-alt depth-1" id="comment-1380325"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Adel Sassi</span> <a class="comment_permalink" href="#comment-1380325" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">February 26, 2016, 12:36</span></div><div class="comment_text" id="comment-body-1380325"><p class="cye-lm-tag">Error: java.lang.AssertionError: Status expected: but was:</p><p class="cye-lm-tag">Contoller:<br> @RestController<br> @RequestMapping(value = “Univ”)<br> @ComponentScan(basePackages = {“com.back.controller”})<br> public class UniversityController {<br> @Autowired<br> private UniversityService universityService;<br> @RequestMapping(value = “/university/Hello”, method = RequestMethod.GET , produces = “application/json”)<br> public String  sayHello() throws UniversityException {</p><p class="cye-lm-tag"> return universityService.getName();<br> }<br> }<br> Class for test:<br> @RunWith(SpringJUnit4ClassRunner.class)<br> @ContextConfiguration(locations = {<br> “file:WebContent/WEB-INF/spring-config.xml”,”file:WebContent/WEB-INF/AnnotationsDriven.xml”})<br> @WebAppConfiguration<br> public class TodoControllerTest {<br> @Autowired<br> @Qualifier(“universityForTest”)<br> private UniversityService universityServiceMock;<br> @Autowired<br> private WebApplicationContext webApplicationContext;<br> private MockMvc mockMvc;<br> @Before<br> public void setUp() {<br> Mockito.reset(universityServiceMock);<br> mockMvc = MockMvcBuilders.webAppContextSetup(webApplicationContext).dispatchOptions(true)<br> .build();<br> }<br> @Test<br> public void tester() throws Exception {<br> when(universityServiceMock.getName()).thenReturn(“Hello Mock!!”);<br> mockMvc.perform(get(“/Univ/university/Hello”)).andExpect(status().isOk());<br> }<br> }</p></div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-1380333"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span> <a class="comment_permalink" href="#comment-1380333" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">February 26, 2016, 12:55</span></div><div class="comment_text" id="comment-body-1380333"><p class="cye-lm-tag">Hi,</p><p class="cye-lm-tag">Your unit test fails because your controller method doesn’t return HTTP response status 200 (OK). Replace the following code: <code>.andExpect(status().isOk())</code> with: <code>andDo(print())</code>. This prints the request and response into <code>System.out</code> and should help you to solve your problem.</p></div> </div></li></ul></li><li class="comment even thread-even depth-1" id="comment-1419456"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Vishal</span> <a class="comment_permalink" href="#comment-1419456" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">April 15, 2016, 18:00</span></div><div class="comment_text" id="comment-body-1419456"><p class="cye-lm-tag">The last example in this blog illustrates a test case for ToDo object entry into the database. You have already verified returned object success using jsonPath. I do not understand why did we again retrieve the ToDo object using ArgumentCaptor and then again verified ID, Description and other fields. Is it not duplicated? I am sure there must be a reason. Can you please explain.</p></div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-1420562"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span> <a class="comment_permalink" href="#comment-1420562" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">April 16, 2016, 15:56</span></div><div class="comment_text" id="comment-body-1420562"><p class="cye-lm-tag">Good question. Actually I have to I have to admit that the test question sucks because it can fail for more than one reason (it has other flaws as well). If I would test that controller method now, I would write several unit tests for it. If you think about the requirements of the tested method, it is a somewhat clear that:</p><ul><li>The information of the saved todo entry must be returned as JSON.</li><li>The correct information must be passed forward to the service method (that saves it).</li></ul><p class="cye-lm-tag">Now, if you don’t capture the <code>TodoDTO</code> object that is passed to the service method, you cannot ensure that the correct information is passed to the service method.</p></div> </div></li></ul></li><li class="comment even thread-odd thread-alt depth-1" id="comment-1421047"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Bharat</span> <a class="comment_permalink" href="#comment-1421047" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">April 17, 2016, 01:44</span></div><div class="comment_text" id="comment-body-1421047"><p class="cye-lm-tag">Hello,<br> Thanks for the very nice overview. Helped me a lot with understanding the test framework.</p><p class="cye-lm-tag">Question:<br> When I configure as you outlined here and run the test, I keep getting the below error. Any help with how I should troubleshoot it would be helpful. Thank you.</p><p class="cye-lm-tag">org.mockito.exceptions.misusing.NotAMockException: Argument should be a mock, but is: class com.sun.proxy.$Proxy36<br> at com.travenion.controllers.customer.CustomerControllerTest.setup(CustomerControllerTest.java:50)</p><p class="cye-lm-tag"><em>Update: I removed the irrelevant part of the stacktrace – Petri</em></p></div> </div><ul class="children"><li class="comment odd alt depth-2" id="comment-1421134"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Bharat</span> <a class="comment_permalink" href="#comment-1421134" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">April 17, 2016, 03:16</span></div><div class="comment_text" id="comment-body-1421134"><p class="cye-lm-tag">To add to the above, I was able to get it to work with StandaloneSetup config, but when using webApplicationContext based configuration, I keep running into the above issue. And using WebApplicationContext, I was not even able to inject mocks manually. If I tried injecting it manually, the service is hitting the real object instead of mock object…hence it is going all the way to the database instead of using my test data.</p></div> </div></li><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-2" id="comment-1421888"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span> <a class="comment_permalink" href="#comment-1421888" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">April 17, 2016, 17:41</span></div><div class="comment_text" id="comment-body-1421888"><p class="cye-lm-tag">The problem is that a real object is injected into your controller instead of a mock object. If you want to use the web application context based setup, you should <a href="/programming/spring-framework/unit-testing-of-spring-mvc-controllers-configuration/" rel="nofollow">read this blog post</a>. However, I recommend that you use the standalone setup in your unit tests because it’s a lot easier to maintain if you have a lot services that need to be mocked.</p></div> </div><ul class="children"><li class="comment odd alt depth-3" id="comment-1422203"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Bharat</span> <a class="comment_permalink" href="#comment-1422203" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">April 18, 2016, 00:41</span></div><div class="comment_text" id="comment-body-1422203"><p class="cye-lm-tag">Thanks Petri! Yes, I did follow that blog already and that’s where I picked up the standalone setup from. I will continue using the standalone setup. I appreciate your feedback.</p></div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor even depth-4" id="comment-1423018"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span> <a class="comment_permalink" href="#comment-1423018" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">April 18, 2016, 18:29</span></div><div class="comment_text" id="comment-body-1423018"><p class="cye-lm-tag">You are welcome. It is always fun to help other people.</p></div> </div></li></ul></li></ul></li></ul></li><li class="comment odd alt thread-even depth-1" id="comment-1447921"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Rahul Singh</span> <a class="comment_permalink" href="#comment-1447921" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">May 26, 2016, 20:23</span></div><div class="comment_text" id="comment-body-1447921"><p class="cye-lm-tag">Hi Petri I have followed your youtube tutorial  and I have a very basic problem as far as I know I am doing everything write but still getting assertion error Content type not set, I have asked this question on stack overflow and other sites no help yet and It’s kinda blocker for me right now<br> So here is my problem</p><p class="cye-lm-tag">this is the setup method</p><p class="cye-lm-tag">@Before<br> public void init() {<br> MockitoAnnotations.initMocks(this);<br> ReflectionTestUtils.setField(restController, “luceneSearchEnabled”, true);<br> mockMvc = standaloneSetup(restController).build();<br> }</p><p class="cye-lm-tag">This is my test method:</p><p class="cye-lm-tag">@Test<br> public void pmmSearchContentTypeTest() throws Exception {<br> mockMvc<br> .perform(get(“/api/v1/pmm”).contentType(MediaType.APPLICATION_JSON))<br> .andExpect(content().contentTypeCompatibleWith(MediaType.APPLICATION_JSON_VALUE)<br> .andReturn();<br> }<br> This is my search method where I am setting content type:</p><p class="cye-lm-tag">@RequestMapping(value = “/api/v1/pmm”, method = RequestMethod.GET, produces ={MediaType.APPLICATION_JSON_VALUE})<br> @ResponseBody<br> public String pmmSearch() { … }</p></div> </div><ul class="children"><li class="comment even depth-2" id="comment-1447922"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Rahul Singh</span> <a class="comment_permalink" href="#comment-1447922" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">May 26, 2016, 20:24</span></div><div class="comment_text" id="comment-body-1447922"><p class="cye-lm-tag">Also I have checked this manually from browser and the content-type is getting set correctly</p></div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-3" id="comment-1448186"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span> <a class="comment_permalink" href="#comment-1448186" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">May 27, 2016, 09:10</span></div><div class="comment_text" id="comment-body-1448186"><p class="cye-lm-tag">Hi,</p><p class="cye-lm-tag">Typically when you get that error it means that the controller method threw an exception. Have you tried to <a href="http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/web/servlet/ResultActions.html#andDo-org.springframework.test.web.servlet.ResultHandler-" target="_blank" rel="nofollow">print the sent request and the received response</a>?</p></div> </div><ul class="children"><li class="comment even depth-4" id="comment-1459501"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Rahul Singh</span> <a class="comment_permalink" href="#comment-1459501" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">June 22, 2016, 20:42</span></div><div class="comment_text" id="comment-body-1459501"><p class="cye-lm-tag">I was able to figure that out I had to make a real oblect in standalone setup and I was using incomplete url</p><p class="cye-lm-tag">Thanks for your help though</p></div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-5" id="comment-1459891"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span> <a class="comment_permalink" href="#comment-1459891" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">June 23, 2016, 23:18</span></div><div class="comment_text" id="comment-body-1459891"><p class="cye-lm-tag">Hi,</p><p class="cye-lm-tag">You are welcome! It is good to hear that you were able to solve your problem.</p></div></div></li></ul></li></ul></li></ul></li></ul></li><li class="comment even thread-odd thread-alt depth-1" id="comment-1453130"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Sameedha</span> <a class="comment_permalink" href="#comment-1453130" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">June 6, 2016, 23:08</span></div><div class="comment_text" id="comment-body-1453130"><p class="cye-lm-tag">Hi Petri,</p><p class="cye-lm-tag">Thanks for the awesome tutorial. It really helped !!<br> But, I am facing this weird issue while running JUnit test .</p><p class="cye-lm-tag">org.springframework.beans.factory.BeanCreationException: Error creating bean with name ‘com.borrowlenses.services.junits.OrderServiceControllerTest’: Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire field: private com.borrowlenses.controller.OrdersRestController com.borrowlenses.services.junits.OrderServiceControllerTest.mockOrdersRestController; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type [com.borrowlenses.controller.OrdersRestController] found for dependency: expected at least 1 bean which qualifies as autowire candidate for this dependency. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true)}<br> at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:292)</p><p class="cye-lm-tag">I have added the correct context configuration location. Can you help me to identify the cause of this problem ?</p><p class="cye-lm-tag">Thanks in Advance :)</p></div> </div><ul class="children"><li class="comment byuser comment-author-petrikainulainen bypostauthor odd alt depth-2" id="comment-1453553"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Petri</span> <a class="comment_permalink" href="#comment-1453553" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">June 7, 2016, 19:59</span></div><div class="comment_text" id="comment-body-1453553"><p class="cye-lm-tag">Hi,</p><p class="cye-lm-tag">It seems that the Spring container cannot find the <code>OrdersRestController</code> bean. Unfortunately it’s impossible to say what causes this because I cannot run your code. However, take a look at <a href="http://www.baeldung.com/spring-nosuchbeandefinitionexception" target="_blank" rel="nofollow">this blog post</a>. It identifies the situations when the <code>NoSuchBeanDefinitionException</code> is thrown and explains how you can solve them.</p></div> </div></li></ul></li><li class="comment even thread-even depth-1" id="comment-1497673"><div class="comment-container"> <div class="comment-byline"> <span class="comment_author cye-lm-tag">Arun</span> <a class="comment_permalink" href="#comment-1497673" title="permalink to this comment" rel="nofollow"></a> <span class="comment_date cye-lm-tag">October 21, 2016, 01:05</span></div><div class="comment_text" id="comment-body-1497673"><p class="cye-lm-tag">Hi Petri,</p><p class="cye-lm-tag">If our controller methods have Method Security(@PreAuthorize) and checks for roles. How do we write Unit tests for the controller methods ? Should we create mock for spring security ? if so, how do we do ?</p></div> </div></li></ul><div id="respond"><div id="commentform"><form method="post" action="https://www.petrikainulainen.net/wp-comments-post.php"><p class="comment_form_title cye-lm-tag">Leave a Comment</p><p id="comment_form_name" class="cye-lm-tag"> <input type="text" id="author" class="input_text" name="author" value="" placeholder="Name (required)" tabindex="1"></p><p id="comment_form_email" class="cye-lm-tag"> <input type="text" id="email" class="input_text" name="email" value="" placeholder="Email (not required)" tabindex="2"></p><p id="comment_form_url" class="cye-lm-tag"> <input type="text" id="url" class="input_text" name="url" value="" placeholder="Website (not required)" tabindex="3"></p><p id="comment_form_comment" class="cye-lm-tag"><textarea name="comment" id="comment" class="input_text" tabindex="4" rows="6"></textarea></p><p id="comment_form_submit" class="cye-lm-tag"> <input type="submit" id="submit" class="input_submit" name="submit" tabindex="5" value="Submit"></p> <a rel="nofollow" id="cancel-comment-reply-link" href="/programming/spring-framework/unit-testing-of-spring-mvc-controllers-rest-api/#respond" style="display:none;">Cancel</a><p style="display: none;" class="cye-lm-tag"><input type="hidden" id="akismet_comment_nonce" name="akismet_comment_nonce" value="e22be3a759"></p><p style="display: none;" class="cye-lm-tag"></p><input type="hidden" name="comment_post_ID" value="5959" id="comment_post_ID"> <input type="hidden" name="comment_parent" id="comment_parent" value="0"></form><input type="hidden" id="ak_js" name="ak_js" value="1489765371592"></div></div> </section>
</body>
</html>