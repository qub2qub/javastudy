1) http://blog.bausov.pro/code-review/
Ревью кода 30.10.2016


Ревью кода — одна из практик экстремального программирования, позволяющая заметно улучшить качество кода проекта.

Ревью незаменимо при работе в команде над крупной базой кода по методологиям подобным SCRUM, при которых универсальности участников отводится особая роль. Необходимость работать над всей базой кода с одной стороны дает каждому из участников какое то представление о работе системы в целом, однако все равно не гарантирует приобретения экспертных знаний на уровне отдельных составляющих системы. Даже если вы по призванию настоящий мясник, вас так или иначе заставят лечить людей. Очевидно, что помощь настоящего врача вам не помешает.

Ревью кода с одной стороны дает представление о новых изменениях в системе членам команды, не принимавшим участие в непосредственном кодировании. С другой — участник ревью сам по себе может являться автором кода, в который вносятся изменения, а, следовательно, может обладать знаниями, необходимыми для оценки влияния изменений на работу системы. Это следует учитывать при выборе участников ревью. Если ревью кода всеми членами команды по каким то причинам сложно практиковать (например, их слишком много), то первым претендентом на участие в ревью должен стать человек, разбирающийся в подсистеме, изменения в которую вносятся.* Верно и обратное:

При ревью чужого кода особое внимание следует уделить изменениям, затронувшим те части системы, в создании которых вы принимали непосредственное участие, — оценить качество этих изменений именно ваша задача.

Очевидно, что мы не всегда обладаем достаточным временем на полное изучение кода (вспомним, что на детальный разбор кода объемом 200-300 строк в среднем тратится около 5 часов), поэтому прежде всего при ревью кода следует:

— оценить качество изменений с точки зрения архитектуры системы;
— оценить влияние изменений на функционал системы;
— исследовать код на предмет грубых ошибок;
— исследовать новый код на наличие уже изобретенных “велосипедов”.

Если в вашем проекте используется одна из практик разработки через тестирование (TDD/BDD), то ревью кода следует начать с тестов на новый код — так вы сразу ознакомитесь с новым функционалом и примерами его использования. Тесты сами по себе являются документацией к коду, поэтому если уже на этой стадии у вас возникнут вопросы, то ревью уже можно считать не пройденным.

Стоить помнить, что ревью кода — не инструмент для отслеживания code style — для этого существуют другие, специализированные инструменты. Обращать внимание на явные огрехи стиля конечно нужно, но не стоит этим злоупотреблять. Человек, отправивший вам на ревью значительный объем кода, ожидает от вас явно не этого.

Инструменты для ревью (например, Upsource от JetBrains) позволяют взглянуть на код свежим взглядом. И этим нужно пользоваться. Практика показывает, что само-ревью так же является очень эффективным инструментом. Осуществите ревью собственного кода и только потом приступайте к правкам. Такой подход не даст вам схалтурить.

*Некоторые инструменты для ревью кода способны вычислить таких претендентов автоматически, но если такого софта у вас нет, система контроля версий вам в помощь.

2) http://blog.bausov.pro/why-doesnt-scrum-work/
Почему не работает SCRUM 25.02.2016

Методология Scrum эффективна только при внедрении всех описанных в ней приемов. На первый взгляд все, что предлагает Scrum внедрить не так сложно, однако на практике получается обратное. Вроде и Scrum, но не совсем, да и результат какой-то не такой.

Как правило, решив применить Scrum на практике, компания или команда в первую очередь заимствует только имиджевые черты методологии — те, которые сразу бросаются в глаза и могут пустить в них пыль. Однако, внедрив все по списку (ежедневные stand up — собрания и ретроспективу, Scrum-доску ,оценку задач, разбиение процесса разработки на спринты, обратную связь и т.д.), получить волшебный прирост производительности, обещанный гуру методологии Scrum, не получается.

Здесь я рассмотрю некоторые проблемы, с которыми мне пришлось столкнуться на практике.

Ежедневные Scrum-митинги организуются не только для того, что бы отчитаться о проделанной работе. Методология Scrum предполагает, что все участники должны внимательно слушать друг друга, а не просто ждать своей очереди для выступления, и, в случае возникновения у одного из участников проблемы с той или иной задачей, помочь с ее решением. Препятствия, с которыми сталкивается команда, обсуждаются и оперативно устраняются.

На практике же часто бывает, что отчетность действительно оказывается единственным назначением ежедневных встреч. В результате все концептуальные идеи stand up-митинга, призванные увеличить эффективность команды и обеспечить ее “разгон”, не работают — участники не слушают друг друга, а проблемы, с которыми сталкивается команда, могут оставаться без внимания долгое время.

Scrum предполагает итеративный подход к разработке, при котором объём пула задач для реализации определяется скоростью разработки и сроком итерации. Реальность часто оказывает влияние и на это предположение. Длительность спринта не является постоянной и в отличие от концепции Scrum является величиной, производной от пула задач, запланированных для реализации в рамках итерации. На первый взгляд различия не выглядят принципиальными, однако контроль эффективности разработки для спринтов разной длительности заметно усложняется. Необходимость назвать сроки выполнения пула задач (релиза) как результат планирования делают оценку задач в человеко-часах более подходящей, а учёт сложности чем то бессмысленным. Отказ от оценки относительной сложности задач в свою очередь делает невозможным подсчёт скорости и контроль ускорения разработки от спринта к спринту.

В результате получается, что многие компании, утверждающие, что при разработке используют Scrum, на деле используют что то другое — свою собственную методологию, — да, Agile, но не Scrum, ведь cистема определяется не только тем, что она рекомендует делать, но и тем, как и для чего она рекомендует это делать. 

3) http://blog.bausov.pro/code-katas/
Каты программирования 02.02.2016
С понятием “каты программирования” я познакомился из книг. Как гласит википедия, впервые это понятие использовал Дэйв Томас, соавтор книги “The Progmatic Programmer” (эту книгу я еще не читал, но обязательно собираюсь прочесть). Впоследствие, эту идею за ним подхватили и другие авторы. Но, несмотря на то, что каты программирования упоминались, примеров их использования в книгах не приводилось практически никаких. Так что же такое “каты программирования”?

Если буквально, каты программирования — это упражнения, которые позволят вам стать ниндзя программирования. С одной стороны, довольно очевидное определение, с другой не совсем понятно, какие упражнения нужно выполнять, чтобы стать обычным ниндзя, а ниндзя программирования уж тем более. Итак, если серьезно, то каты программирования — это небольшие упражнения в программировании, призванные держать ваши навыки программиста в тонусе. Для себя я уяснил, что это могут быть:

— Упражнения, позволяющие освоить новые и не забыть старые алгоритмы и концепции. Примерами кат этой группы могут служить задания реализовать алгоритм сортировки путем подсчета или распечатку бинарного дерева. Как показывает практика, такие задачи могут поставить в тупик многих современных программистов, не обладающих соответствующим классическим образованием.

— Упражнения, демонстрирующие особенности реализации с использованием конкретного языка программирования. Например, реализация одного из классических паттернов на языке Objective-C или пример реализации классического наследования на языке EcmaScript 3. Регулярное выполнение подобных кат позволит вам не забыть особенности языка даже при отсутствии практики программирования на нем.

— Упражнения для освоения одной из практик программирования (например, модульные тесты для класса, реализующего функционал калькулятора).

Каты могут не только помочь отточить навыки, но и проверить их качество — примерами кат могут служить задачи, предлагаемые соискателю на собеседованиях. Помните, как ряд собеседований позволяет освежить в памяти ту или иную тему?

Тему кат программирования я поднял не случайно. Я собираюсь создать собственную коллекцию кат, чтобы самому стать джедаем программирования. Читайте соответствующую тему моего блога и да пребудет с вами сила!